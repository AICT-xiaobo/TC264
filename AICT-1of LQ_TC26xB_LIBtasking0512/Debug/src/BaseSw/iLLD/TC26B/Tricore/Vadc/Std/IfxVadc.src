	; Module start
	.compiler_version	"TASKING VX-toolset for TriCore: C compiler v6.3r1 Build 19041558 SN 99293038"
	.compiler_invocation	"ctc --dep-file=src\\BaseSw\\iLLD\\TC26B\\Tricore\\Vadc\\Std\\.IfxVadc.o.d --fp-model=c,f,l,n,r,S,T,z -D__CPU__=tc26x -D__CPU_TC26X__ --core=tc1.6.x --iso=99 -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512 -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\AppSw\\Tricore -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\AppSw\\Tricore\\APP -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\AppSw\\Tricore\\Main -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Cpu -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Cpu\\CStart -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Cpu\\Irq -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Cpu\\Std -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Cpu\\Trap -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\AppSw -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\iLLD -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\iLLD\\TC26B -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\iLLD\\TC26B\\Tricore -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\_Build -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\_Impl -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\_Lib -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\_Lib\\DataHandling -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\_Lib\\InternalMux -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\_PinMap -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Asclin -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Ccu6 -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Cif -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Cpu -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Dma -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Dsadc -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Dts -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Emem -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Eray -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Eth -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Fce -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Fft -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Flash -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Gpt12 -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Gtm -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Hssl -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\I2c -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Iom -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Msc -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Mtu -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Multican -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Port -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Psi5 -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Psi5s -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Qspi -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Scu -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Sent -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Smu -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Src -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Stm -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Vadc -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\Infra -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\Infra\\Platform -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\Infra\\Platform\\Tricore -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\Infra\\Platform\\Tricore\\Compilers -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\Infra\\Sfr -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\Infra\\Sfr\\TC26B -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\Infra\\Sfr\\TC26B\\_Reg -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\Service -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\Service\\CpuGeneric -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\Service\\CpuGeneric\\_Utilities -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\Service\\CpuGeneric\\If -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\Service\\CpuGeneric\\If\\Ccu6If -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\Service\\CpuGeneric\\StdIf -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\Service\\CpuGeneric\\SysSe -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\Service\\CpuGeneric\\SysSe\\Bsp -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\Service\\CpuGeneric\\SysSe\\Comm -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\Service\\CpuGeneric\\SysSe\\General -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\Service\\CpuGeneric\\SysSe\\Math -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\Service\\CpuGeneric\\SysSe\\Time -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\AppSw\\Tricore\\User -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\AppSw -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\AppSw\\Tricore\\APP -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\AppSw\\Tricore\\Main -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\AppSw\\Tricore\\Driver -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\iLLD -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\iLLD\\TC26B -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\iLLD\\TC26B\\Tricore -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\_Build -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\_Impl -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\_Lib -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\_Lib\\DataHandling -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\_Lib\\InternalMux -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\_PinMap -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Asclin -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Asclin\\Asc -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Asclin\\Lin -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Asclin\\Spi -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Asclin\\Std -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Ccu6 -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Ccu6\\Icu -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Ccu6\\PwmBc -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Ccu6\\PwmHl -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Ccu6\\Std -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Ccu6\\Timer -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Ccu6\\TimerWithTrigger -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Ccu6\\TPwm -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Cif -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Cif\\Cam -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Cif\\Std -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Cpu -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Cpu\\CStart -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Cpu\\Irq -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Cpu\\Std -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Cpu\\Trap -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Dma -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Dma\\Dma -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Dma\\Std -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Dsadc -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Dsadc\\Dsadc -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Dsadc\\Rdc -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Dsadc\\Std -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Dts -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Dts\\Dts -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Dts\\Std -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Emem -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Emem\\Std -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Eray -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Eray\\Eray -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Eray\\Std -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Eth -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Eth\\Phy_Pef7071 -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Eth\\Std -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Fce -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Fce\\Crc -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Fce\\Std -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Fft -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Fft\\Fft -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Fft\\Std -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Flash -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Flash\\Std -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Gpt12 -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Gpt12\\IncrEnc -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Gpt12\\Std -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Gtm -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Gtm\\Atom -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Gtm\\Atom\\Pwm -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Gtm\\Atom\\PwmHl -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Gtm\\Atom\\Timer -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Gtm\\Std -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Gtm\\Tim -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Gtm\\Tim\\In -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Gtm\\Tom -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Gtm\\Tom\\Pwm -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Gtm\\Tom\\PwmHl -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Gtm\\Tom\\Timer -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Gtm\\Trig -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Hssl -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Hssl\\Hssl -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Hssl\\Std -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\I2c -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\I2c\\I2c -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\I2c\\Std -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Iom -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Iom\\Driver -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Iom\\Std -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Msc -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Msc\\Msc -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Msc\\Std -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Mtu -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Mtu\\Std -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Multican -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Multican\\Can -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Multican\\Std -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Port -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Port\\Io -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Port\\Std -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Psi5 -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Psi5\\Psi5 -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Psi5\\Std -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Psi5s -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Psi5s\\Psi5s -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Psi5s\\Std -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Qspi -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Qspi\\SpiMaster -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Qspi\\SpiSlave -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Qspi\\Std -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Scu -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Scu\\Std -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Sent -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Sent\\Sent -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Sent\\Std -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Smu -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Smu\\Std -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Src -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Src\\Std -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Stm -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Stm\\Std -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Stm\\Timer -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Vadc -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Vadc\\Adc -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Vadc\\Std -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\Infra -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\Infra\\Platform -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\Infra\\Platform\\Tricore -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\Infra\\Platform\\Tricore\\Compilers -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\Infra\\Sfr -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\Infra\\Sfr\\TC26B -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\Infra\\Sfr\\TC26B\\_Reg -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\Service -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\Service\\CpuGeneric -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\Service\\CpuGeneric\\_Utilities -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\Service\\CpuGeneric\\If -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\Service\\CpuGeneric\\If\\Ccu6If -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\Service\\CpuGeneric\\StdIf -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\Service\\CpuGeneric\\SysSe -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\Service\\CpuGeneric\\SysSe\\Bsp -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\Service\\CpuGeneric\\SysSe\\Comm -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\Service\\CpuGeneric\\SysSe\\General -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\Service\\CpuGeneric\\SysSe\\Math -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\Service\\CpuGeneric\\SysSe\\Time -g2 --make-target=src\\BaseSw\\iLLD\\TC26B\\Tricore\\Vadc\\Std\\IfxVadc.o -t4 --language=-gcc,-volatile,+strings,-kanji --default-near-size=0 -O2 --default-a1-size=0 --default-a0-size=0 --source --align=0 --compact-max-size=200 --switch=auto --error-limit=42 -o src\\BaseSw\\iLLD\\TC26B\\Tricore\\Vadc\\Std\\IfxVadc.src ..\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Vadc\\Std\\IfxVadc.c"
	.compiler_name		"ctc"
	;source	'..\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Vadc\\Std\\IfxVadc.c'

	
$TC16X
	
	.sdecl	'.text.IfxVadc.IfxVadc_configExternalMultiplexerMode',code,cluster('IfxVadc_configExternalMultiplexerMode')
	.sect	'.text.IfxVadc.IfxVadc_configExternalMultiplexerMode'
	.align	2
	
	.global	IfxVadc_configExternalMultiplexerMode

; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	     1  /**
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	     2   * \file IfxVadc.c
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	     3   * \brief VADC  basic functionality
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	     4   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	     5   * \version iLLD_1_0_1_11_0
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	     6   * \copyright Copyright (c) 2017 Infineon Technologies AG. All rights reserved.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	     7   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	     8   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	     9   *                                 IMPORTANT NOTICE
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	    10   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	    11   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	    12   * Use of this file is subject to the terms of use agreed between (i) you or 
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	    13   * the company in which ordinary course of business you are acting and (ii) 
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	    14   * Infineon Technologies AG or its licensees. If and as long as no such 
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	    15   * terms of use are agreed, use of this file is subject to following:
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	    16  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	    17  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	    18   * Boost Software License - Version 1.0 - August 17th, 2003
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	    19  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	    20   * Permission is hereby granted, free of charge, to any person or 
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	    21   * organization obtaining a copy of the software and accompanying 
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	    22   * documentation covered by this license (the "Software") to use, reproduce,
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	    23   * display, distribute, execute, and transmit the Software, and to prepare
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	    24   * derivative works of the Software, and to permit third-parties to whom the 
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	    25   * Software is furnished to do so, all subject to the following:
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	    26  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	    27   * The copyright notices in the Software and this entire statement, including
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	    28   * the above license grant, this restriction and the following disclaimer, must
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	    29   * be included in all copies of the Software, in whole or in part, and all
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	    30   * derivative works of the Software, unless such copies or derivative works are
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	    31   * solely in the form of machine-executable object code generated by a source
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	    32   * language processor.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	    33  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	    34   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR 
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	    35   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	    36   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	    37   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE 
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	    38   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	    39   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	    40   * DEALINGS IN THE SOFTWARE.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	    41  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	    42   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	    43   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	    44  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	    45  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	    46  /*----------------------------------Includes----------------------------------*/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	    47  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	    48  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	    49  #include "IfxVadc.h"
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	    50  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	    51  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	    52  /*-------------------------Function Implementations---------------------------*/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	    53  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	    54  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	    55  void IfxVadc_configExternalMultiplexerMode(Ifx_VADC *vadc, Ifx_VADC_G *vadcG, IfxVadc_ExternalMultiplexerMode mode, uint8 channels, IfxVadc_EmuxSelectValue startChannel, IfxVadc_EmuxCodingScheme code, IfxVadc_EmuxSampleTimeControl sampleTimeControl, IfxVadc_ChannelSelectionStyle channelSelectionStyle)
; Function IfxVadc_configExternalMultiplexerMode
.L76:
IfxVadc_configExternalMultiplexerMode:	.type	func

; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	    56  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	    57      Ifx_VADC_G_EMUXCTR emuxctr;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	    58  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	    59      emuxctr.B.EMXWC    = 1;
	extr.u	d15,d15,#24,#8
	ld.bu	d1,[a10]4
.L420:
	ld.bu	d0,[a10]
.L423:
	mov.aa	a15,a4
.L425:
	or	d15,#128
	mov.aa	a12,a5
.L426:

; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	    60      emuxctr.B.EMUXMODE = mode;
	insert	d15,d15,d4,#2,#2
.L784:

; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	    61      emuxctr.B.EMXCSS   = channelSelectionStyle;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	    62      emuxctr.B.EMUXCH   = channels;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	    63      emuxctr.B.EMUXSET  = startChannel;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	    64      emuxctr.B.EMXCOD   = code;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	    65      emuxctr.B.EMXST    = sampleTimeControl;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	    66      IfxVadc_enableAccess(vadc, IfxVadc_Protection_externalMultiplexer);
	mov	d4,#15
.L421:
	insert	d15,d15,d1,#6,#1
.L427:
	insert	d15,d15,d15,#24,#8
.L785:
	insert	d15,d15,d5,#16,#10
.L786:
	insert	d15,d15,d6,#0,#3
.L787:
	extr.u	d1,d15,#24,#8
.L422:
	insert	d1,d1,d7,#4,#1
.L788:
	insert	d0,d1,d0,#5,#1
.L424:
	insert	d15,d15,d0,#24,#8
	call	IfxVadc_enableAccess
.L419:

; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	    67      vadcG->EMUXCTR.U   = emuxctr.U;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	    68      emuxctr.B.EMXWC    = 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	    69      vadcG->EMUXCTR.U   = emuxctr.U;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	    70      IfxVadc_disableAccess(vadc, IfxVadc_Protection_externalMultiplexer);
	mov	d4,#15
	st.w	[a12]368,d15
.L789:
	insert	d15,d15,#0,#31,#1
	mov.aa	a4,a15
.L428:
	st.w	[a12]368,d15
.L790:
	j	IfxVadc_disableAccess
.L403:
	
__IfxVadc_configExternalMultiplexerMode_function_end:
	.size	IfxVadc_configExternalMultiplexerMode,__IfxVadc_configExternalMultiplexerMode_function_end-IfxVadc_configExternalMultiplexerMode
.L250:
	; End of function
	
	.sdecl	'.text.IfxVadc.IfxVadc_disableAccess',code,cluster('IfxVadc_disableAccess')
	.sect	'.text.IfxVadc.IfxVadc_disableAccess'
	.align	2
	
	.global	IfxVadc_disableAccess

; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	    71  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	    72  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	    73  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	    74  void IfxVadc_disableAccess(Ifx_VADC *vadc, IfxVadc_Protection protectionSet)
; Function IfxVadc_disableAccess
.L78:
IfxVadc_disableAccess:	.type	func
	mov.aa	a15,a4
.L430:

; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	    75  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	    76      uint16 passwd = IfxScuWdt_getSafetyWatchdogPassword();
	mov	d8,d4
	call	IfxScuWdt_getSafetyWatchdogPassword
.L429:
	mov	d9,d2
.L433:

; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	    77      IfxScuWdt_clearSafetyEndinit(passwd);
	mov	d4,d9
	call	IfxScuWdt_clearSafetyEndinit
.L432:

; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	    78  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	    79      if (protectionSet < IFXVADC_MAXIMUM_BITFIELDS_IN_ACCPROT0_REGISTER)
	mov	d15,#32
.L625:
	jge.u	d8,d15,.L2
.L626:

; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	    80      {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	    81          vadc->ACCPROT0.U |= (0x00000001 << protectionSet);
	mov	d0,#1
	ld.w	d15,[a15]136
.L627:
	sha	d0,d0,d8
.L628:
	or	d15,d0
	st.w	[a15]136,d15
.L629:
	j	.L3
.L2:

; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	    82      }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	    83      else
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	    84      {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	    85          vadc->ACCPROT1.U |= (0x00000001 << (protectionSet & 0x1F));
	fcall	.cocofun_2
.L431:
	or	d0,d1
	st.w	[a15]140,d0
.L3:

; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	    86      }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	    87  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	    88      IfxScuWdt_setSafetyEndinit(passwd);
	mov	d4,d9
.L434:
	j	IfxScuWdt_setSafetyEndinit
.L301:
	
__IfxVadc_disableAccess_function_end:
	.size	IfxVadc_disableAccess,__IfxVadc_disableAccess_function_end-IfxVadc_disableAccess
.L175:
	; End of function
	
	.sdecl	'.text.IfxVadc..cocofun_2',code,cluster('.cocofun_2')
	.sect	'.text.IfxVadc..cocofun_2'
	.align	2
; Function .cocofun_2
.L80:
.cocofun_2:	.type	func
; Function body .cocofun_2, coco_iter:0
	and	d15,d8,#31
	ld.w	d0,[a15]140
.L799:
	mov	d1,#1
.L800:
	sha	d1,d1,d15
	fret
.L260:
	; End of function
	.sdecl	'.text.IfxVadc.IfxVadc_disablePostCalibration',code,cluster('IfxVadc_disablePostCalibration')
	.sect	'.text.IfxVadc.IfxVadc_disablePostCalibration'
	.align	2
	
	.global	IfxVadc_disablePostCalibration

; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	    89  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	    90  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	    91  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	    92  void IfxVadc_disablePostCalibration(Ifx_VADC *vadc, IfxVadc_GroupId group, boolean disable)
; Function IfxVadc_disablePostCalibration
.L82:
IfxVadc_disablePostCalibration:	.type	func
	mov	d8,d4
	mov.aa	a15,a4
.L441:
	mov	d15,d5
.L435:

; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	    93  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	    94      if (group < IFXVADC_NUM_ADC_CAL_GROUPS)
	jge.u	d8,#4,.L4
.L634:

; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	    95      {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	    96          IfxVadc_enableAccess(vadc, IfxVadc_Protection_globalConfig);
	mov	d4,#31
	call	IfxVadc_enableAccess
.L314:

; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	    97  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	    98          uint32 mask = 1 << (IFX_VADC_GLOBCFG_DPCAL0_OFF + group);
	mov	d0,#1
.L635:
	add	d1,d8,#16
.L636:
	sha	d0,d0,d1
.L437:

; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	    99  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   100          if (disable == TRUE)
	jne	d15,#1,.L5
.L637:

; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   101          {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   102              vadc->GLOBCFG.U |= mask;
	ld.w	d15,[a15]128
.L436:
	or	d15,d0
	j	.L6
.L4:

; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   103          }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   104          else
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   105          {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   106              vadc->GLOBCFG.U &= ~mask;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   107          }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   108  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   109          IfxVadc_disableAccess(vadc, IfxVadc_Protection_globalConfig);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   110      }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   111  }
	ret
.L5:
	mov	d1,#-1
	ld.w	d15,[a15]128
.L438:
	xor	d0,d1
.L439:
	and	d15,d0
.L6:
	st.w	[a15]128,d15
.L638:
	fcall	.cocofun_1
.L442:
	j	IfxVadc_disableAccess
.L308:
	
__IfxVadc_disablePostCalibration_function_end:
	.size	IfxVadc_disablePostCalibration,__IfxVadc_disablePostCalibration_function_end-IfxVadc_disablePostCalibration
.L180:
	; End of function
	
	.sdecl	'.text.IfxVadc..cocofun_1',code,cluster('.cocofun_1')
	.sect	'.text.IfxVadc..cocofun_1'
	.align	2
; Function .cocofun_1
.L84:
.cocofun_1:	.type	func
; Function body .cocofun_1, coco_iter:0
	mov	d4,#31
	mov.aa	a4,a15
.L440:
	fret
.L255:
	; End of function
	.sdecl	'.text.IfxVadc.IfxVadc_enableAccess',code,cluster('IfxVadc_enableAccess')
	.sect	'.text.IfxVadc.IfxVadc_enableAccess'
	.align	2
	
	.global	IfxVadc_enableAccess

; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   112  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   113  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   114  void IfxVadc_enableAccess(Ifx_VADC *vadc, IfxVadc_Protection protectionSet)
; Function IfxVadc_enableAccess
.L86:
IfxVadc_enableAccess:	.type	func
	mov.aa	a15,a4
.L446:

; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   115  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   116      uint16 passwd = IfxScuWdt_getSafetyWatchdogPassword();
	mov	d8,d4
	call	IfxScuWdt_getSafetyWatchdogPassword
.L443:
	mov	d9,d2
.L445:

; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   117      IfxScuWdt_clearSafetyEndinit(passwd);
	mov	d4,d9
	call	IfxScuWdt_clearSafetyEndinit
.L444:

; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   118  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   119      if (protectionSet < IFXVADC_MAXIMUM_BITFIELDS_IN_ACCPROT0_REGISTER)
	mov	d15,#32
.L643:
	jge.u	d8,d15,.L7
.L644:

; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   120      {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   121          vadc->ACCPROT0.U &= ~(0x00000001 << protectionSet);
	mov	d0,#1
	ld.w	d15,[a15]136
.L645:
	sha	d0,d0,d8
.L646:
	mov	d1,#-1
	xor	d0,d1
.L647:
	and	d15,d0
	st.w	[a15]136,d15
.L648:
	j	.L8
.L7:

; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   122      }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   123      else
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   124      {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   125          vadc->ACCPROT1.U &= ~(0x00000001 << (protectionSet & 0x1F));
	fcall	.cocofun_2
.L649:
	mov	d15,#-1
	xor	d1,d15
.L650:
	and	d0,d1
	st.w	[a15]140,d0
.L8:

; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   126      }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   127  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   128      IfxScuWdt_setSafetyEndinit(passwd);
	mov	d4,d9
.L447:
	j	IfxScuWdt_setSafetyEndinit
.L316:
	
__IfxVadc_enableAccess_function_end:
	.size	IfxVadc_enableAccess,__IfxVadc_enableAccess_function_end-IfxVadc_enableAccess
.L185:
	; End of function
	
	.sdecl	'.text.IfxVadc.IfxVadc_enableGroupSync',code,cluster('IfxVadc_enableGroupSync')
	.sect	'.text.IfxVadc.IfxVadc_enableGroupSync'
	.align	2
	
	.global	IfxVadc_enableGroupSync

; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   129  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   130  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   131  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   132  void IfxVadc_enableGroupSync(Ifx_VADC *vadc, uint32 ccu6Num)
; Function IfxVadc_enableGroupSync
.L88:
IfxVadc_enableGroupSync:	.type	func
	mov.aa	a15,a4
.L453:

; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   133  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   134      uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
	mov	d15,d4
	call	IfxScuWdt_getCpuWatchdogPassword
.L448:
	mov	d9,d2
.L452:

; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   135      IfxScuWdt_clearCpuEndinit(passwd);
	mov	d4,d9
	call	IfxScuWdt_clearCpuEndinit
.L324:

; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   136  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   137      // VADC Config: enable ADC group sync
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   138      {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   139          Ifx_VADC_GLOBCFG vadcGlobCfg;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   140          vadcGlobCfg.U       = vadc->GLOBCFG.U;
	ld.w	d8,[a15]128
.L455:

; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   141          vadcGlobCfg.B.DIVWC = 1;
	insert	d8,d8,#1,#15,#1
.L655:

; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   142          vadcGlobCfg.B.DCMSB = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   143  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   144          IfxVadc_enableAccess(vadc, IfxVadc_Protection_globalConfig);
	insert	d8,d8,#1,#7,#1
	fcall	.cocofun_1
.L449:
	call	IfxVadc_enableAccess
.L450:

; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   145          vadc->GLOBCFG.U = vadcGlobCfg.U;
	st.w	[a15]128,d8
.L656:

; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   146          IfxVadc_disableAccess(vadc, IfxVadc_Protection_globalConfig);
	fcall	.cocofun_1
.L454:
	call	IfxVadc_disableAccess
.L325:

; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   147      }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   148  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   149      if (ccu6Num == 0)
	jne	d15,#0,.L9
.L657:

; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   150      {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   151          // CCU60 Config
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   152          CCU60_CLC.U = 0;
	st.w	0xf0002a00,d15
.L658:

; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   153  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   154          if (CCU60_CLC.U)
	ld.w	d15,0xf0002a00
.L451:

; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   155          {}
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   156  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   157          CCU60_T13PR.U          = 4;                                                                  // results in  4+1 clock periods (100MHz)  = 20MHz
	mov	d15,#4
.L659:
	st.w	0xf0002a54,d15
.L660:

; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   158          CCU60_CC63SR.U         = 4;                                                                  // configures duty cycle of 40ns low and 10ns high
	st.w	0xf0002a5c,d15
.L661:

; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   159          CCU60_MODCTR.B.ECT13O  = 1;                                                                  // bit ECT130 = 1 serves to route  CC63ST signals out to  COUT63
	ld.bu	d15,0xf0002a81
.L662:
	or	d15,#128
	st.b	0xf0002a81,d15
.L663:

; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   160          CCU60_TCTR4.U          = (1 << IFX_CCU6_TCTR4_T13STR_OFF) | (1 << IFX_CCU6_TCTR4_T13RS_OFF); // set bit T13STR  & T13RS  -> enable shadow transfer & start timer T13
	mov	d15,#16896
	st.w	0xf0002a78,d15
.L664:

; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   161          CCU60_MOSEL.B.TRIG1SEL = 0;                                                                  // CCU60_COUT63 routed to output signal CCU6061 TRIG1
	ld.bu	d15,0xf0002a0c
.L665:
	insert	d15,d15,#0,#3,#3
	j	.L10
.L9:

; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   162      }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   163      else if (ccu6Num == 1)
	jne	d15,#1,.L11
.L666:

; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   164      {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   165          // CCU60 + CCU61 Config
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   166          CCU60_CLC.U = 0;
	mov	d15,#0
	st.w	0xf0002a00,d15
.L456:

; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   167          CCU61_CLC.U = 0;
	st.w	0xf0002b00,d15
.L667:

; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   168  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   169          if (CCU61_CLC.U)
	ld.w	d15,0xf0002b00
.L668:

; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   170          {}
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   171  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   172          CCU61_T13PR.U          = 4;                                                                  // results in  4+1 clock periods (100MHz)  = 20MHz
	mov	d15,#4
.L669:
	st.w	0xf0002b54,d15
.L670:

; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   173          CCU61_CC63SR.U         = 4;                                                                  // configures duty cycle of 40ns low and 10ns high
	st.w	0xf0002b5c,d15
.L671:

; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   174          CCU61_MODCTR.B.ECT13O  = 1;                                                                  // bit ECT130 = 1 serves to route  CC63ST signals out to  COUT63
	ld.bu	d15,0xf0002b81
.L672:
	or	d15,#128
	st.b	0xf0002b81,d15
.L673:

; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   175          CCU61_TCTR4.U          = (1 << IFX_CCU6_TCTR4_T13STR_OFF) | (1 << IFX_CCU6_TCTR4_T13RS_OFF); // set bit T13STR  & T13RS  -> enable shadow transfer & start timer T13
	mov	d15,#16896
	st.w	0xf0002b78,d15
.L674:

; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   176          CCU60_MOSEL.B.TRIG1SEL = 1;                                                                  // CCU61_COUT63 routed to output signal CCU6061 TRIG1
	ld.bu	d15,0xf0002a0c
.L675:
	insert	d15,d15,#1,#3,#3
.L10:
	st.b	0xf0002a0c,d15
.L11:

; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   177      }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   178  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   179      IfxScuWdt_setCpuEndinit(passwd);
	mov	d4,d9
.L457:
	j	IfxScuWdt_setCpuEndinit
.L320:
	
__IfxVadc_enableGroupSync_function_end:
	.size	IfxVadc_enableGroupSync,__IfxVadc_enableGroupSync_function_end-IfxVadc_enableGroupSync
.L190:
	; End of function
	
	.sdecl	'.text.IfxVadc.IfxVadc_getAdcAnalogFrequency',code,cluster('IfxVadc_getAdcAnalogFrequency')
	.sect	'.text.IfxVadc.IfxVadc_getAdcAnalogFrequency'
	.align	2
	
	.global	IfxVadc_getAdcAnalogFrequency

; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   180  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   181  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   182  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   183  float32 IfxVadc_getAdcAnalogFrequency(Ifx_VADC *vadc)
; Function IfxVadc_getAdcAnalogFrequency
.L90:
IfxVadc_getAdcAnalogFrequency:	.type	func
	mov.aa	a15,a4
.L459:

; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   184  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   185      return IfxScuCcu_getSpbFrequency() / (1U + vadc->GLOBCFG.B.DIVA);
	call	IfxScuCcu_getSpbFrequency
.L458:
	ld.bu	d15,[a15]128
	and	d15,#31
.L588:
	add	d15,#1
	utof	d15,d15
.L589:

; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   186  }
	div.f	d2,d2,d15
	ret
.L289:
	
__IfxVadc_getAdcAnalogFrequency_function_end:
	.size	IfxVadc_getAdcAnalogFrequency,__IfxVadc_getAdcAnalogFrequency_function_end-IfxVadc_getAdcAnalogFrequency
.L160:
	; End of function
	
	.sdecl	'.text.IfxVadc.IfxVadc_getAdcDigitalFrequency',code,cluster('IfxVadc_getAdcDigitalFrequency')
	.sect	'.text.IfxVadc.IfxVadc_getAdcDigitalFrequency'
	.align	2
	
	.global	IfxVadc_getAdcDigitalFrequency

; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   187  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   188  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   189  float32 IfxVadc_getAdcDigitalFrequency(Ifx_VADC *vadc)
; Function IfxVadc_getAdcDigitalFrequency
.L92:
IfxVadc_getAdcDigitalFrequency:	.type	func
	mov.aa	a15,a4
.L461:

; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   190  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   191      return IfxScuCcu_getSpbFrequency() / (1U + vadc->GLOBCFG.B.DIVD);
	call	IfxScuCcu_getSpbFrequency
.L460:
	ld.bu	d15,[a15]129
	and	d15,#3
.L594:
	add	d15,#1
	utof	d15,d15
.L595:

; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   192  }
	div.f	d2,d2,d15
	ret
.L291:
	
__IfxVadc_getAdcDigitalFrequency_function_end:
	.size	IfxVadc_getAdcDigitalFrequency,__IfxVadc_getAdcDigitalFrequency_function_end-IfxVadc_getAdcDigitalFrequency
.L165:
	; End of function
	
	.sdecl	'.text.IfxVadc.IfxVadc_getAdcModuleFrequency',code,cluster('IfxVadc_getAdcModuleFrequency')
	.sect	'.text.IfxVadc.IfxVadc_getAdcModuleFrequency'
	.align	2
	
	.global	IfxVadc_getAdcModuleFrequency

; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   193  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   194  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   195  float32 IfxVadc_getAdcModuleFrequency(void)
; Function IfxVadc_getAdcModuleFrequency
.L94:
IfxVadc_getAdcModuleFrequency:	.type	func

; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   196  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   197      return IfxScuCcu_getSpbFrequency();
	j	IfxScuCcu_getSpbFrequency
.L328:
	
__IfxVadc_getAdcModuleFrequency_function_end:
	.size	IfxVadc_getAdcModuleFrequency,__IfxVadc_getAdcModuleFrequency_function_end-IfxVadc_getAdcModuleFrequency
.L195:
	; End of function
	
	.sdecl	'.text.IfxVadc.IfxVadc_getBackgroundScanStatus',code,cluster('IfxVadc_getBackgroundScanStatus')
	.sect	'.text.IfxVadc.IfxVadc_getBackgroundScanStatus'
	.align	2
	
	.global	IfxVadc_getBackgroundScanStatus

; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   198  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   199  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   200  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   201  IfxVadc_Status IfxVadc_getBackgroundScanStatus(Ifx_VADC *vadc)
; Function IfxVadc_getBackgroundScanStatus
.L96:
IfxVadc_getBackgroundScanStatus:	.type	func

; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   202  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   203      IfxVadc_Status status = IfxVadc_Status_noError;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   204      uint8          i;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   205  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   206      for (i = 0; i < IFXVADC_NUM_ADC_GROUPS; i++)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   207      {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   208          if (vadc->BRSPND[i].U)
	lea	a15,[a4]448
.L541:
	mov.a	a2,#3
.L15:
	ld.w	d15,[a15]
.L542:
	jeq	d15,#0,.L16
.L543:

; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   209          {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   210              return IfxVadc_Status_channelsStillPending;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   211          }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   212          else
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   213          {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   214              continue;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   215          }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   216      }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   217  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   218      return status;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   219  }
	mov	d2,#6
	ret
.L16:
	add.a	a15,#4
	loop	a2,.L15
.L544:
	mov	d2,#0
	ret
.L262:
	
__IfxVadc_getBackgroundScanStatus_function_end:
	.size	IfxVadc_getBackgroundScanStatus,__IfxVadc_getBackgroundScanStatus_function_end-IfxVadc_getBackgroundScanStatus
.L135:
	; End of function
	
	.sdecl	'.text.IfxVadc.IfxVadc_getChannelConversionTime',code,cluster('IfxVadc_getChannelConversionTime')
	.sect	'.text.IfxVadc.IfxVadc_getChannelConversionTime'
	.align	2
	
	.global	IfxVadc_getChannelConversionTime

; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   220  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   221  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   222  float32 IfxVadc_getChannelConversionTime(Ifx_VADC *vadc, IfxVadc_GroupId group, IfxVadc_InputClasses inputClass, float32 analogFrequency, float32 moduleFrequency, IfxVadc_ConversionType conversionMode)
; Function IfxVadc_getChannelConversionTime
.L98:
IfxVadc_getChannelConversionTime:	.type	func

; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   223  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   224      float32                   conversionTime = 0.0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   225      Ifx_VADC_G               *vadcG          = &vadc->G[group];
	sha	d0,d4,#10
	ld.bu	d1,[a10]
.L463:
	addsc.a	a15,a4,d0,#0
.L768:
	mov	d15,d5
.L464:
	lea	a15,[a15]1152
.L466:
	mov	d8,d6
.L468:
	mov	d2,#0
.L469:

; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   226      uint32                    stcs;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   227      IfxVadc_ChannelResolution resolution;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   228      uint32                    n;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   229  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   230      uint32                    inputClassNum;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   231  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   232      if (inputClass <= IfxVadc_InputClasses_group1)
	jge.u	d15,#2,.L19
.L769:

; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   233      {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   234          inputClassNum = inputClass;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   235          stcs          = vadcG->ICLASS[inputClassNum].B.STCS;
	addsc.a	a15,a15,d15,#2
.L467:
	ld.bu	d15,[a15]32
.L465:

; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   236          resolution    = (IfxVadc_ChannelResolution)vadcG->ICLASS[inputClassNum].B.CMS;
	and	d9,d15,#31
	ld.bu	d15,[a15]33
.L470:
	j	.L20
.L19:

; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   237      }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   238      else
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   239      {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   240          inputClassNum = inputClass - IfxVadc_InputClasses_global0;
	add	d15,#-2
.L471:

; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   241          stcs          = vadc->GLOBICLASS[inputClassNum].B.STCS;
	addsc.a	a15,a4,d15,#2
.L473:
	ld.bu	d15,[a15]160
.L472:

; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   242          resolution    = (IfxVadc_ChannelResolution)vadc->GLOBICLASS[inputClassNum].B.CMS;
	and	d9,d15,#31
	ld.bu	d15,[a15]161
.L20:
	and	d15,#7
.L770:

; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   243      }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   244  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   245      if (stcs > 16)
	mov	d0,#16
.L771:
	jge.u	d0,d9,.L21
.L772:

; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   246      {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   247          stcs = (stcs - 15) * 16; // Reference for the logic: Table 28-4 of TC29xB User Manual v1.3
	sh	d0,d9,#4
	add	d9,d0,#-240
.L21:

; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   248      }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   249  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   250      switch (resolution)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   251      {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   252      case IfxVadc_ChannelResolution_12bit: n     = 12;
	jeq	d15,#0,.L22
.L773:

; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   253          break;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   254      case IfxVadc_ChannelResolution_10bit: n     = 10;
	jeq	d15,#1,.L23
.L774:

; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   255          break;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   256      case IfxVadc_ChannelResolution_8bit: n      = 8;
	jeq	d15,#2,.L24
.L775:

; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   257          break;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   258      case IfxVadc_ChannelResolution_10bitFast: n = 10;
	jeq	d15,#5,.L25
.L776:
	j	.L26
.L22:
	mov	d10,#12
	j	.L27
.L24:
	mov	d10,#8
	j	.L28
.L25:
.L23:

; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   259          break;
	mov	d10,#10
	j	.L29

; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   260      default: n                                  = 0;
.L26:
	mov	d10,d2

; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   261          break;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   262      }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   263  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   264      if (conversionMode == IfxVadc_ConversionType_Compatible)
.L29:
.L28:
.L27:
	jne	d1,#0,.L30
.L400:

; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   265      {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   266          if (resolution != IfxVadc_ChannelResolution_10bitFast)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   267          {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   268              /* Standard conversion */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   269              uint32 pc = IfxVadc_isPostCalibration(vadc, group) ? 2 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   270              conversionTime = (float32)(2 + stcs + n + pc) / analogFrequency + 2.0 / moduleFrequency;
	movh	d0,#16384
.L777:
	div.f	d11,d0,d7
.L401:
	jeq	d15,#5,.L31
.L402:
	call	IfxVadc_isPostCalibration
.L462:
	add	d9,d10
.L475:
	cadd	d9,d2,d9,#2
.L778:
	add	d9,#2
	j	.L32
.L31:

; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   271          }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   272          else
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   273          {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   274              /* Fast compare mode */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   275              conversionTime = (float32)(2 + stcs + 2) / analogFrequency + 2.0 / moduleFrequency;
	add	d9,#4
.L32:
	utof	d15,d9
.L474:
	div.f	d15,d15,d8
.L779:
	add.f	d2,d15,d11
.L30:

; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   276          }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   277      }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   278      else
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   279      {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   280          // do nothing
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   281      }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   282  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   283      return conversionTime;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   284  }
	ret
.L383:
	
__IfxVadc_getChannelConversionTime_function_end:
	.size	IfxVadc_getChannelConversionTime,__IfxVadc_getChannelConversionTime_function_end-IfxVadc_getChannelConversionTime
.L245:
	; End of function
	
	.sdecl	'.text.IfxVadc.IfxVadc_getQueueStatus',code,cluster('IfxVadc_getQueueStatus')
	.sect	'.text.IfxVadc.IfxVadc_getQueueStatus'
	.align	2
	
	.global	IfxVadc_getQueueStatus

; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   285  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   286  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   287  IfxVadc_Status IfxVadc_getQueueStatus(Ifx_VADC_G *group)
; Function IfxVadc_getQueueStatus
.L100:
IfxVadc_getQueueStatus:	.type	func

; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   288  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   289      IfxVadc_Status status = IfxVadc_Status_noError;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   290  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   291      /* just fill level is checked */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   292      if (0x7 == group->QSR0.B.FILL)
	ld.bu	d15,[a4]136
	and	d15,#15
.L582:
	eq	d15,d15,#7
.L583:

; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   293      {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   294          status = IfxVadc_Status_queueFull;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   295      }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   296      else
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   297      {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   298          status = IfxVadc_Status_noError;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   299      }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   300  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   301      return status;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   302  }
	sha	d2,d15,#2
	ret
.L286:
	
__IfxVadc_getQueueStatus_function_end:
	.size	IfxVadc_getQueueStatus,__IfxVadc_getQueueStatus_function_end-IfxVadc_getQueueStatus
.L155:
	; End of function
	
	.sdecl	'.text.IfxVadc.IfxVadc_getResultBasedOnRequestSource',code,cluster('IfxVadc_getResultBasedOnRequestSource')
	.sect	'.text.IfxVadc.IfxVadc_getResultBasedOnRequestSource'
	.align	2
	
	.global	IfxVadc_getResultBasedOnRequestSource

; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   303  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   304  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   305  Ifx_VADC_RES IfxVadc_getResultBasedOnRequestSource(Ifx_VADC *vadc, Ifx_VADC_G *group, IfxVadc_ChannelId channel, IfxVadc_RequestSource sourceType)
; Function IfxVadc_getResultBasedOnRequestSource
.L102:
IfxVadc_getResultBasedOnRequestSource:	.type	func

; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   306  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   307      sint32       sourceResultRegister = -1;
	mov	d15,#-1
.L476:

; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   308      Ifx_VADC_RES tmpResult;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   309  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   310      switch (sourceType)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   311      {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   312      case IfxVadc_RequestSource_queue:
	jeq	d5,#0,.L35
.L549:

; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   313          sourceResultRegister = group->QCTRL0.B.SRCRESREG;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   314          break;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   315  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   316      case IfxVadc_RequestSource_scan:
	jeq	d5,#1,.L36
.L550:

; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   317          sourceResultRegister = group->ASCTRL.B.SRCRESREG;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   318          break;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   319  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   320      case IfxVadc_RequestSource_background:
	jeq	d5,#2,.L37
.L551:
	j	.L38
.L35:
	ld.bu	d15,[a5]128
.L477:
	j	.L39
.L36:
	ld.bu	d15,[a5]160
.L478:
	j	.L40
.L37:

; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   321          sourceResultRegister = vadc->BRSCTRL.B.SRCRESREG;
	ld.bu	d15,[a4]512

; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   322          break;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   323      }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   324  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   325      if (sourceResultRegister > 0)
.L39:
.L40:
	and	d15,#15
.L38:
	jge	d15,#1,.L42
.L552:

; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   326      {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   327          tmpResult.U = group->RES[sourceResultRegister].U;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   328  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   329          return tmpResult;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   330      }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   331      else
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   332      {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   333          if ((sourceType == IfxVadc_RequestSource_background) && (group->CHCTR[channel].B.RESTBS == 1))
	jne	d5,#2,.L43
.L553:
	addsc.a	a15,a5,d4,#2
.L554:
	ld.bu	d15,[a15]386
.L479:
	jz.t	d15:4,.L44
.L555:

; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   334          {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   335              tmpResult.B.VF     = vadc->GLOBRES.B.VF;
	ld.bu	d15,[a4]771
	extr.u	d15,d15,#7,#1
.L480:

; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   336              tmpResult.B.FCR    = vadc->GLOBRES.B.FCR;
	insert	d2,d2,d15,#31,#1
	ld.bu	d15,[a4]771
	extr.u	d15,d15,#6,#1
.L556:

; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   337              tmpResult.B.CRS    = vadc->GLOBRES.B.CRS;
	insert	d2,d2,d15,#30,#1
	ld.bu	d15,[a4]771
	extr.u	d15,d15,#4,#2
.L557:

; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   338              tmpResult.B.EMUX   = vadc->GLOBRES.B.EMUX;
	insert	d2,d2,d15,#28,#2
	ld.bu	d15,[a4]771
	extr.u	d15,d15,#1,#3
.L558:

; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   339              tmpResult.B.CHNR   = vadc->GLOBRES.B.CHNR;
	insert	d2,d2,d15,#25,#3
	ld.hu	d15,[a4]770
	extr.u	d15,d15,#4,#5
.L559:

; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   340              tmpResult.B.DRC    = vadc->GLOBRES.B.GNR; //The bitfields are the same but interpretation is different. TODO- define a generic result register type.
	insert	d2,d2,d15,#20,#5
	ld.bu	d15,[a4]770
	and	d15,#15
.L560:

; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   341              tmpResult.B.RESULT = vadc->GLOBRES.B.RESULT;
	insert	d2,d2,d15,#16,#4
	ld.hu	d15,[a4]768
.L561:

; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   342  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   343              return tmpResult;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   344          }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   345          else
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   346          {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   347              tmpResult.U = group->RES[group->CHCTR[channel].B.RESREG].U;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   348  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   349              return tmpResult;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   350          }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   351      }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   352  }
	insert	d2,d2,d15,#0,#16
	ret
.L44:
.L43:
	addsc.a	a15,a5,d4,#2
.L562:
	ld.bu	d15,[a15]386
	and	d15,#15
.L42:
	addsc.a	a15,a5,d15,#2
.L563:
	ld.w	d2,[a15]640
.L481:
	ret
.L268:
	
__IfxVadc_getResultBasedOnRequestSource_function_end:
	.size	IfxVadc_getResultBasedOnRequestSource,__IfxVadc_getResultBasedOnRequestSource_function_end-IfxVadc_getResultBasedOnRequestSource
.L140:
	; End of function
	
	.sdecl	'.text.IfxVadc.IfxVadc_getScanStatus',code,cluster('IfxVadc_getScanStatus')
	.sect	'.text.IfxVadc.IfxVadc_getScanStatus'
	.align	2
	
	.global	IfxVadc_getScanStatus

; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   353  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   354  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   355  IfxVadc_Status IfxVadc_getScanStatus(Ifx_VADC_G *group)
; Function IfxVadc_getScanStatus
.L104:
IfxVadc_getScanStatus:	.type	func

; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   356  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   357      IfxVadc_Status status = IfxVadc_Status_noError;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   358  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   359      if (group->ASPND.U)
	ld.w	d15,[a4]172
.L568:

; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   360      {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   361          return IfxVadc_Status_channelsStillPending;
	mov	d2,#6
.L569:

; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   362      }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   363      else
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   364      {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   365          return status;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   366      }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   367  }
	cmovn	d2,d15,#0
	ret
.L279:
	
__IfxVadc_getScanStatus_function_end:
	.size	IfxVadc_getScanStatus,__IfxVadc_getScanStatus_function_end-IfxVadc_getScanStatus
.L145:
	; End of function
	
	.sdecl	'.text.IfxVadc.IfxVadc_getSrcAddress',code,cluster('IfxVadc_getSrcAddress')
	.sect	'.text.IfxVadc.IfxVadc_getSrcAddress'
	.align	2
	
	.global	IfxVadc_getSrcAddress

; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   368  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   369  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   370  volatile Ifx_SRC_SRCR *IfxVadc_getSrcAddress(IfxVadc_GroupId group, IfxVadc_SrcNr index)
; Function IfxVadc_getSrcAddress
.L106:
IfxVadc_getSrcAddress:	.type	func

; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   371  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   372      Ifx_SRC_SRCR *base;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   373  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   374      if (IfxVadc_SrcNr_shared0 <= index)
	jlt.u	d5,#4,.L50
.L684:

; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   375      {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   376          index -= 4;
	add	d5,#-4
.L685:

; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   377  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   378          if ((group & 0x1) != 0)
	and	d15,d4,#1
.L686:
	ne	d4,d15,#0
	add	d4,#4
.L50:

; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   379          {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   380              group = IfxVadc_GroupId_global1;    /* Shared interrupt common 1 is used */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   381          }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   382          else
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   383          {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   384              group = IfxVadc_GroupId_global0;    /* Shared interrupt common 0 is used */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   385          }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   386      }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   387      else
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   388      {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   389          /* do nothing */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   390      }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   391  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   392      base = (Ifx_SRC_SRCR *)IfxVadc_cfg_srcAddresses[(group * 4) + index];
	sha	d4,#2
	movh.a	a15,#@his(IfxVadc_cfg_srcAddresses)
.L482:
	add	d5,d4
	lea	a15,[a15]@los(IfxVadc_cfg_srcAddresses)
.L483:
	addsc.a	a15,a15,d5,#2
	ld.w	d15,[a15]
.L687:

; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   393  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   394      return &(base[0]);
	mov.a	a2,d15
.L688:

; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   395  }
	ret
.L330:
	
__IfxVadc_getSrcAddress_function_end:
	.size	IfxVadc_getSrcAddress,__IfxVadc_getSrcAddress_function_end-IfxVadc_getSrcAddress
.L200:
	; End of function
	
	.sdecl	'.text.IfxVadc.IfxVadc_initialiseAdcArbiterClock',code,cluster('IfxVadc_initialiseAdcArbiterClock')
	.sect	'.text.IfxVadc.IfxVadc_initialiseAdcArbiterClock'
	.align	2
	
	.global	IfxVadc_initialiseAdcArbiterClock

; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   396  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   397  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   398  void IfxVadc_initialiseAdcArbiterClock(Ifx_VADC *vadc, uint32 arbiterClockDivider)
; Function IfxVadc_initialiseAdcArbiterClock
.L108:
IfxVadc_initialiseAdcArbiterClock:	.type	func
	mov.aa	a15,a4
.L487:

; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   399  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   400      Ifx_VADC_GLOBCFG tempGLOBCFG;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   401      tempGLOBCFG.U       = vadc->GLOBCFG.U;
	ld.w	d8,[a15]128
.L486:

; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   402      tempGLOBCFG.B.DIVD  = arbiterClockDivider;
	extr.u	d15,d8,#8,#8
.L693:
	insert	d15,d15,d4,#0,#2
.L694:

; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   403      tempGLOBCFG.B.DIVWC = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   404      IfxVadc_enableAccess(vadc, IfxVadc_Protection_globalConfig);
	mov	d4,#31
.L484:
	or	d15,#128
.L695:
	insert	d8,d8,d15,#8,#8
	call	IfxVadc_enableAccess
.L485:

; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   405      vadc->GLOBCFG.U     = tempGLOBCFG.U;
	st.w	[a15]128,d8
.L696:

; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   406      IfxVadc_disableAccess(vadc, IfxVadc_Protection_globalConfig);
	fcall	.cocofun_1
.L488:
	j	IfxVadc_disableAccess
.L334:
	
__IfxVadc_initialiseAdcArbiterClock_function_end:
	.size	IfxVadc_initialiseAdcArbiterClock,__IfxVadc_initialiseAdcArbiterClock_function_end-IfxVadc_initialiseAdcArbiterClock
.L205:
	; End of function
	
	.sdecl	'.text.IfxVadc.IfxVadc_initialiseAdcConverterClock',code,cluster('IfxVadc_initialiseAdcConverterClock')
	.sect	'.text.IfxVadc.IfxVadc_initialiseAdcConverterClock'
	.align	2
	
	.global	IfxVadc_initialiseAdcConverterClock

; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   407  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   408  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   409  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   410  void IfxVadc_initialiseAdcConverterClock(Ifx_VADC *vadc, uint32 converterClockDivider)
; Function IfxVadc_initialiseAdcConverterClock
.L110:
IfxVadc_initialiseAdcConverterClock:	.type	func
	mov.aa	a15,a4
.L492:

; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   411  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   412      Ifx_VADC_GLOBCFG tempGLOBCFG;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   413      tempGLOBCFG.U       = vadc->GLOBCFG.U;
	ld.w	d15,[a15]128
.L491:

; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   414      tempGLOBCFG.B.DIVA  = converterClockDivider;
	insert	d15,d15,d4,#0,#5
.L701:

; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   415      tempGLOBCFG.B.DIVWC = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   416      IfxVadc_enableAccess(vadc, IfxVadc_Protection_globalConfig);
	mov	d4,#31
.L489:
	insert	d15,d15,#1,#15,#1
	call	IfxVadc_enableAccess
.L490:

; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   417      vadc->GLOBCFG.U     = tempGLOBCFG.U;
	st.w	[a15]128,d15
.L702:

; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   418      IfxVadc_disableAccess(vadc, IfxVadc_Protection_globalConfig);
	fcall	.cocofun_1
.L493:
	j	IfxVadc_disableAccess
.L338:
	
__IfxVadc_initialiseAdcConverterClock_function_end:
	.size	IfxVadc_initialiseAdcConverterClock,__IfxVadc_initialiseAdcConverterClock_function_end-IfxVadc_initialiseAdcConverterClock
.L210:
	; End of function
	
	.sdecl	'.text.IfxVadc.IfxVadc_initializeFAdcD',code,cluster('IfxVadc_initializeFAdcD')
	.sect	'.text.IfxVadc.IfxVadc_initializeFAdcD'
	.align	2
	
	.global	IfxVadc_initializeFAdcD

; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   419  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   420  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   421  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   422  uint32 IfxVadc_initializeFAdcD(Ifx_VADC *vadc, uint32 fAdcD)
; Function IfxVadc_initializeFAdcD
.L112:
IfxVadc_initializeFAdcD:	.type	func
	mov.aa	a15,a4
.L495:

; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   423  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   424      uint32 divD;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   425      uint32 result;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   426      uint32 fadc = IfxScuCcu_getSpbFrequency();
	mov	d15,d4
	call	IfxScuCcu_getSpbFrequency
.L494:
	ftouz	d8,d2
.L497:

; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   427  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   428      divD   = (fadc / fAdcD - 1);
	div.u	e0,d8,d15
.L707:
	add	d15,d0,#-1
.L496:

; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   429  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   430      divD   = __minu(divD, 0x3u);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   431  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   432      result = fadc / (divD + 1);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   433      IfxVadc_initialiseAdcArbiterClock(vadc, divD);
	min.u	d15,d15,#3
	mov.aa	a4,a15
.L498:
	mov	d4,d15
	call	IfxVadc_initialiseAdcArbiterClock
.L500:
	add	d15,#1
.L499:

; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   434      return result;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   435  }
	div.u	e2,d8,d15
	ret
.L342:
	
__IfxVadc_initializeFAdcD_function_end:
	.size	IfxVadc_initializeFAdcD,__IfxVadc_initializeFAdcD_function_end-IfxVadc_initializeFAdcD
.L215:
	; End of function
	
	.sdecl	'.text.IfxVadc.IfxVadc_initializeFAdcI',code,cluster('IfxVadc_initializeFAdcI')
	.sect	'.text.IfxVadc.IfxVadc_initializeFAdcI'
	.align	2
	
	.global	IfxVadc_initializeFAdcI

; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   436  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   437  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   438  uint32 IfxVadc_initializeFAdcI(Ifx_VADC *vadc, uint32 fAdcI)
; Function IfxVadc_initializeFAdcI
.L114:
IfxVadc_initializeFAdcI:	.type	func
	mov.aa	a15,a4
.L502:

; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   439  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   440      uint32 divA;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   441      uint32 result;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   442      uint32 fadc = IfxScuCcu_getSpbFrequency();
	mov	d15,d4
	call	IfxScuCcu_getSpbFrequency
.L501:
	ftouz	d0,d2
.L504:

; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   443  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   444      /*    DivA = min(max(0, Fadc / FAdcI - 1), 0x3F); */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   445      divA   = (fadc << 2) / fAdcI;
	sh	d1,d0,#2
.L712:
	div.u	e2,d1,d15
.L713:

; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   446  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   447      divA   = (divA + 2) >> 2; /* Round to nearest integer */
	add	d15,d2,#2
.L503:
	sh	d15,#-2
.L714:

; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   448      divA   = __minu(divA - 1, 0x1Fu);
	add	d15,#-1
.L715:
	min.u	d4,d15,#31
.L506:

; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   449      result = fadc / (divA + 1);
	add	d15,d4,#1
.L716:
	div.u	e8,d0,d15
.L507:

; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   450  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   451      if (result > IFXVADC_ANALOG_FREQUENCY_MAX)
	mov	d1,#11520
	addih	d1,d1,#305
.L717:
	jge.u	d1,d8,.L53
.L718:

; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   452      {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   453          divA   = __minu(divA + 1, 0x1Fu);
	min.u	d4,d15,#31
.L719:

; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   454  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   455          result = fadc / (divA + 1);
	add	d15,d4,#1
.L720:
	div.u	e0,d0,d15
.L505:
	mov	d8,d0
.L53:

; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   456      }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   457      else
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   458      {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   459          /* do nothing */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   460      }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   461  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   462      if (!((result >= IFXVADC_ANALOG_FREQUENCY_MIN) && (result <= IFXVADC_ANALOG_FREQUENCY_MAX)))
	mov	d15,#15625
	sh	d15,#5
.L721:
	sub	d15,d8,d15
.L722:
	mov.u	d0,#35808
	addih	d0,d0,#297
.L723:
	jge.u	d0,d15,.L54
.L724:

; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   463      {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   464          result = 0;             /* Min / Max FAdcI frequency */
	mov	d8,#0
	j	.L55
.L54:

; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   465      }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   466      else
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   467      {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   468          IfxVadc_initialiseAdcConverterClock(vadc, divA);
	mov.aa	a4,a15
.L508:
	call	IfxVadc_initialiseAdcConverterClock
.L55:

; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   469      }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   470  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   471      return result;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   472  }
	mov	d2,d8
	ret
.L347:
	
__IfxVadc_initializeFAdcI_function_end:
	.size	IfxVadc_initializeFAdcI,__IfxVadc_initializeFAdcI_function_end-IfxVadc_initializeFAdcI
.L220:
	; End of function
	
	.sdecl	'.text.IfxVadc.IfxVadc_isPostCalibration',code,cluster('IfxVadc_isPostCalibration')
	.sect	'.text.IfxVadc.IfxVadc_isPostCalibration'
	.align	2
	
	.global	IfxVadc_isPostCalibration

; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   473  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   474  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   475  boolean IfxVadc_isPostCalibration(Ifx_VADC *vadc, IfxVadc_GroupId group)
; Function IfxVadc_isPostCalibration
.L116:
IfxVadc_isPostCalibration:	.type	func

; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   476  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   477      boolean pcEnabled;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   478  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   479      switch (group)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   480      {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   481      case IfxVadc_GroupId_0: pcEnabled = vadc->GLOBCFG.B.DPCAL0 == 0;
	jeq	d4,#0,.L57
.L729:

; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   482          break;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   483      case IfxVadc_GroupId_1: pcEnabled = vadc->GLOBCFG.B.DPCAL1 == 0;
	jeq	d4,#1,.L58
.L730:

; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   484          break;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   485      case IfxVadc_GroupId_2: pcEnabled = vadc->GLOBCFG.B.DPCAL2 == 0;
	jeq	d4,#2,.L59
.L731:

; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   486          break;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   487      case IfxVadc_GroupId_3: pcEnabled = vadc->GLOBCFG.B.DPCAL3 == 0;
	jeq	d4,#3,.L60
.L732:
	j	.L61
.L57:
	ld.bu	d15,[a4]130
.L733:
	and	d15,#1
	j	.L62
.L58:
	ld.bu	d15,[a4]130
.L734:
	extr.u	d15,d15,#1,#1
	j	.L63
.L59:
	ld.bu	d15,[a4]130
.L735:
	extr.u	d15,d15,#2,#1
	j	.L64
.L60:
	ld.bu	d15,[a4]130
	extr.u	d15,d15,#3,#1

; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   488          break;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   489      default: pcEnabled                = FALSE;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   490          break;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   491      }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   492  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   493      return pcEnabled;
.L64:
.L63:
.L62:

; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   494  }
	eq	d2,d15,#0
	ret
.L61:
	mov	d2,#0
	ret
.L353:
	
__IfxVadc_isPostCalibration_function_end:
	.size	IfxVadc_isPostCalibration,__IfxVadc_isPostCalibration_function_end-IfxVadc_isPostCalibration
.L225:
	; End of function
	
	.sdecl	'.text.IfxVadc.IfxVadc_resetKernel',code,cluster('IfxVadc_resetKernel')
	.sect	'.text.IfxVadc.IfxVadc_resetKernel'
	.align	2
	
	.global	IfxVadc_resetKernel

; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   495  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   496  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   497  void IfxVadc_resetKernel(Ifx_VADC *vadc)
; Function IfxVadc_resetKernel
.L118:
IfxVadc_resetKernel:	.type	func
	mov.aa	a15,a4
.L510:

; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   498  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   499      uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
	call	IfxScuWdt_getCpuWatchdogPassword
.L509:
	mov	d8,d2
.L512:

; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   500  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   501      IfxScuWdt_clearCpuEndinit(passwd);
	mov	d4,d8
	call	IfxScuWdt_clearCpuEndinit
.L511:

; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   502      IfxVadc_enableAccess(vadc, IfxVadc_Protection_globalConfig);
	fcall	.cocofun_1
.L513:
	call	IfxVadc_enableAccess
.L515:

; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   503      vadc->KRST1.B.RST = 1;      /* Only if both Kernel reset bits are set a reset is executed */
	ld.bu	d15,[a15]48
.L740:

; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   504      vadc->KRST0.B.RST = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   505      IfxScuWdt_setCpuEndinit(passwd);
	mov	d4,d8
.L516:
	or	d15,#1
	st.b	[a15]48,d15
.L741:
	ld.bu	d15,[a15]52
.L742:
	or	d15,#1
	st.b	[a15]52,d15
.L743:
	call	IfxScuWdt_setCpuEndinit

; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   506  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   507      while (vadc->KRST0.B.RSTSTAT == 0)  /* Wait until reset is executed */
.L67:
	ld.bu	d15,[a15]52
.L744:
	jz.t	d15:1,.L67
.L745:

; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   508  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   509      {}
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   510  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   511      IfxScuWdt_clearCpuEndinit(passwd);
	mov	d4,d8
	call	IfxScuWdt_clearCpuEndinit
.L746:

; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   512      vadc->KRSTCLR.B.CLR = 1;    /* Clear Kernel reset status bit */
	ld.bu	d15,[a15]44
.L747:
	or	d15,#1
	st.b	[a15]44,d15
.L514:

; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   513      IfxVadc_disableAccess(vadc, IfxVadc_Protection_globalConfig);
	fcall	.cocofun_1
.L517:
	call	IfxVadc_disableAccess
.L518:

; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   514      IfxScuWdt_setCpuEndinit(passwd);
	mov	d4,d8
.L519:
	j	IfxScuWdt_setCpuEndinit
.L357:
	
__IfxVadc_resetKernel_function_end:
	.size	IfxVadc_resetKernel,__IfxVadc_resetKernel_function_end-IfxVadc_resetKernel
.L230:
	; End of function
	
	.sdecl	'.text.IfxVadc.IfxVadc_selectPowerSupplyVoltage',code,cluster('IfxVadc_selectPowerSupplyVoltage')
	.sect	'.text.IfxVadc.IfxVadc_selectPowerSupplyVoltage'
	.align	2
	
	.global	IfxVadc_selectPowerSupplyVoltage

; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   515  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   516  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   517  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   518  void IfxVadc_selectPowerSupplyVoltage(Ifx_VADC *vadc, IfxVadc_LowSupplyVoltageSelect supplyVoltage)
; Function IfxVadc_selectPowerSupplyVoltage
.L120:
IfxVadc_selectPowerSupplyVoltage:	.type	func
	mov.aa	a15,a4
.L523:

; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   519  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   520      Ifx_VADC_GLOBCFG tempGLOBCFG;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   521      tempGLOBCFG.U       = vadc->GLOBCFG.U;
	ld.w	d8,[a15]128
.L522:

; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   522      tempGLOBCFG.B.LOSUP = supplyVoltage;
	extr.u	d15,d8,#8,#8
.L752:
	insert	d15,d15,d4,#6,#1
.L753:

; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   523      tempGLOBCFG.B.DIVWC = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   524      IfxVadc_enableAccess(vadc, IfxVadc_Protection_globalConfig);
	mov	d4,#31
.L520:
	or	d15,#128
.L754:
	insert	d8,d8,d15,#8,#8
	call	IfxVadc_enableAccess
.L521:

; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   525      vadc->GLOBCFG.U     = tempGLOBCFG.U;
	st.w	[a15]128,d8
.L755:

; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   526      IfxVadc_disableAccess(vadc, IfxVadc_Protection_globalConfig);
	fcall	.cocofun_1
.L524:
	j	IfxVadc_disableAccess
.L360:
	
__IfxVadc_selectPowerSupplyVoltage_function_end:
	.size	IfxVadc_selectPowerSupplyVoltage,__IfxVadc_selectPowerSupplyVoltage_function_end-IfxVadc_selectPowerSupplyVoltage
.L235:
	; End of function
	
	.sdecl	'.text.IfxVadc.IfxVadc_setArbiterPriority',code,cluster('IfxVadc_setArbiterPriority')
	.sect	'.text.IfxVadc.IfxVadc_setArbiterPriority'
	.align	2
	
	.global	IfxVadc_setArbiterPriority

; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   527  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   528  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   529  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   530  void IfxVadc_setArbiterPriority(Ifx_VADC_G *vadcG, boolean slotEnable, IfxVadc_RequestSlotPriority prio, IfxVadc_RequestSlotStartMode mode, IfxVadc_RequestSource slot)
; Function IfxVadc_setArbiterPriority
.L122:
IfxVadc_setArbiterPriority:	.type	func

; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   531  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   532      if (slotEnable != FALSE)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   533      {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   534          vadcG->ARBPR.U |= slotEnable << (IFX_VADC_G_ARBPR_ASEN0_OFF + slot); /* enable Slot */
	add	d0,d7,#24
.L600:
	jeq	d4,#0,.L68
.L601:
	sha	d4,d4,d0
	ld.w	d15,[a4]4
.L527:

; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   535          vadcG->ARBPR.U &= ~(IFX_VADC_G_ARBPR_PRIO0_MSK << (slot * 4u));      /* clear Priority */
	sh	d7,#2
.L526:
	or	d15,d4
	st.w	[a4]4,d15
.L602:
	mov	d0,#3
.L603:
	ld.w	d15,[a4]4
.L604:
	sh	d0,d0,d7
.L605:
	mov	d1,#-1
	xor	d0,d1
.L606:
	and	d15,d0
	st.w	[a4]4,d15
.L607:

; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   536          vadcG->ARBPR.U |= (prio << (slot * 4u));                             /* Set Priority */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   537  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   538          if (mode != IfxVadc_RequestSlotStartMode_waitForStart)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   539          {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   540              vadcG->ARBPR.U |= 0x1u << (IFX_VADC_G_ARBPR_CSM0_OFF + (slot * 4u)); /* Set cancel inject mode */
	mov	d0,#1
.L608:
	ld.w	d15,[a4]4
.L609:
	sha	d5,d5,d7
.L525:
	add	d7,#3
.L610:
	or	d15,d5
	st.w	[a4]4,d15
.L611:
	sh	d0,d0,d7
.L612:
	jeq	d6,#0,.L69
.L613:
	ld.w	d15,[a4]4
.L614:
	or	d15,d0
	j	.L70
.L69:

; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   541          }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   542          else
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   543          {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   544              vadcG->ARBPR.U &= ~(0x1u << (IFX_VADC_G_ARBPR_CSM0_OFF + (slot * 4u)));  /* Set Wait for Start mode */
	ld.w	d15,[a4]4
.L615:
	xor	d0,d1
.L616:
	and	d15,d0
	j	.L71
.L68:

; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   545          }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   546      }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   547      else
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   548      {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   549          vadcG->ARBPR.U &= ~(IFX_VADC_G_ARBPR_ASEN0_MSK << (IFX_VADC_G_ARBPR_ASEN0_OFF + slot));  /* disable Slot */
	mov	d1,#1
	ld.w	d15,[a4]4
.L617:
	sh	d1,d1,d0
.L618:
	mov	d0,#-1
	xor	d1,d0
.L619:
	and	d15,d1
.L70:
.L71:
	st.w	[a4]4,d15
.L620:

; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   550      }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   551  }
	ret
.L293:
	
__IfxVadc_setArbiterPriority_function_end:
	.size	IfxVadc_setArbiterPriority,__IfxVadc_setArbiterPriority_function_end-IfxVadc_setArbiterPriority
.L170:
	; End of function
	
	.sdecl	'.text.IfxVadc.IfxVadc_setScan',code,cluster('IfxVadc_setScan')
	.sect	'.text.IfxVadc.IfxVadc_setScan'
	.align	2
	
	.global	IfxVadc_setScan

; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   552  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   553  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   554  void IfxVadc_setScan(Ifx_VADC_G *group, uint32 channels, uint32 mask)
; Function IfxVadc_setScan
.L124:
IfxVadc_setScan:	.type	func

; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   555  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   556      /* select channels which should take part in the scan sequence */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   557      /* the mask allows to specify the channels which should be enabled/disabled */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   558      group->ASSEL.U = (group->ASSEL.U & ~mask) | (channels & mask);
	mov	d0,#-1
	ld.w	d15,[a4]168
.L574:
	xor	d0,d5
.L575:
	and	d15,d0
.L576:
	and	d4,d5
.L528:
	or	d15,d4
	st.w	[a4]168,d15
.L577:

; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   559  }
	ret
.L281:
	
__IfxVadc_setScan_function_end:
	.size	IfxVadc_setScan,__IfxVadc_setScan_function_end-IfxVadc_setScan
.L150:
	; End of function
	
	.sdecl	'.text.IfxVadc.IfxVadc_startupCalibration',code,cluster('IfxVadc_startupCalibration')
	.sect	'.text.IfxVadc.IfxVadc_startupCalibration'
	.align	2
	
	.global	IfxVadc_startupCalibration

; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   560  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   561  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   562  void IfxVadc_startupCalibration(Ifx_VADC *vadc)
; Function IfxVadc_startupCalibration
.L126:
IfxVadc_startupCalibration:	.type	func
	mov.aa	a15,a4
.L529:

; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   563  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   564      boolean calibrationRunning;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   565      uint8   adcCalGroupNum;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   566  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   567      /* Start calibration */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   568      IfxVadc_enableAccess(vadc, IfxVadc_Protection_globalConfig);
	mov	d4,#31
	call	IfxVadc_enableAccess
.L370:

; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	     1  /**
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	     2   * \file IfxVadc.h
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	     3   * \brief VADC  basic functionality
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	     4   * \ingroup IfxLld_Vadc
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	     5   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	     6   * \version iLLD_1_0_1_11_0
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	     7   * \copyright Copyright (c) 2017 Infineon Technologies AG. All rights reserved.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	     8   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	     9   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    10   *                                 IMPORTANT NOTICE
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    11   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    12   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    13   * Use of this file is subject to the terms of use agreed between (i) you or 
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    14   * the company in which ordinary course of business you are acting and (ii) 
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    15   * Infineon Technologies AG or its licensees. If and as long as no such 
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    16   * terms of use are agreed, use of this file is subject to following:
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    17  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    18  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    19   * Boost Software License - Version 1.0 - August 17th, 2003
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    20  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    21   * Permission is hereby granted, free of charge, to any person or 
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    22   * organization obtaining a copy of the software and accompanying 
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    23   * documentation covered by this license (the "Software") to use, reproduce,
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    24   * display, distribute, execute, and transmit the Software, and to prepare
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    25   * derivative works of the Software, and to permit third-parties to whom the 
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    26   * Software is furnished to do so, all subject to the following:
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    27  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    28   * The copyright notices in the Software and this entire statement, including
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    29   * the above license grant, this restriction and the following disclaimer, must
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    30   * be included in all copies of the Software, in whole or in part, and all
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    31   * derivative works of the Software, unless such copies or derivative works are
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    32   * solely in the form of machine-executable object code generated by a source
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    33   * language processor.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    34  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    35   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR 
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    36   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    37   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    38   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE 
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    39   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    40   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    41   * DEALINGS IN THE SOFTWARE.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    42  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    43   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    44   * \defgroup IfxLld_Vadc_Std_Enum Enumerations
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    45   * \ingroup IfxLld_Vadc_Std
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    46   * \defgroup IfxLld_Vadc_Std_Background_Autoscan Background Autoscan Functions
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    47   * \ingroup IfxLld_Vadc_Std
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    48   * \defgroup IfxLld_Vadc_Std_ChannelScan Channel Scan Functions
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    49   * \ingroup IfxLld_Vadc_Std
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    50   * \defgroup IfxLld_Vadc_Std_QueueRequest Queue Request Functions
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    51   * \ingroup IfxLld_Vadc_Std
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    52   * \defgroup IfxLld_Vadc_Std_IO IO Pin Configuration Functions
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    53   * \ingroup IfxLld_Vadc_Std
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    54   * \defgroup IfxLld_Vadc_Std_Frequency Frequency Calculation
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    55   * \ingroup IfxLld_Vadc_Std
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    56   * \defgroup IfxLld_Vadc_Std_Group Group Functions
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    57   * \ingroup IfxLld_Vadc_Std
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    58   * \defgroup IfxLld_Vadc_Std_Module Module Functions
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    59   * \ingroup IfxLld_Vadc_Std
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    60   * \defgroup IfxLld_Vadc_Std_Channel Channel Functions
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    61   * \ingroup IfxLld_Vadc_Std
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    62   * \defgroup IfxLld_Vadc_Std_Emux Emux Functions
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    63   * \ingroup IfxLld_Vadc_Std
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    64   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    65  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    66  #ifndef IFXVADC_H
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    67  #define IFXVADC_H 1
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    68  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    69  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    70  /*----------------------------------Includes----------------------------------*/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    71  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    72  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    73  #include "_Impl/IfxVadc_cfg.h"
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    74  #include "_PinMap/IfxVadc_PinMap.h"
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    75  #include "IfxVadc_bf.h"
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    76  #include "Cpu/Std/IfxCpu_Intrinsics.h"
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    77  #include "Scu/Std/IfxScuCcu.h"
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    78  #include "Scu/Std/IfxScuWdt.h"
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    79  #include "IfxCcu6_reg.h"
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    80  #include "IfxCcu6_bf.h"
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    81  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    82  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    83  /*--------------------------------Enumerations--------------------------------*/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    84  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    85  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    86  /** \addtogroup IfxLld_Vadc_Std_Enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    87   * \{ */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    88  /** \brief Defined in MODULE_VADC.G[x].ARBCFG.B.ANONS and ANONC
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    89   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    90  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    91  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    92      IfxVadc_AnalogConverterMode_off             = 0, /**< \brief Analog Converter off */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    93      IfxVadc_AnalogConverterMode_slowStandby     = 1, /**< \brief Slow Standby Mode */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    94      IfxVadc_AnalogConverterMode_fastStandby     = 2, /**< \brief Fast Standby Mode */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    95      IfxVadc_AnalogConverterMode_normalOperation = 3  /**< \brief Normal operation mode */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    96  } IfxVadc_AnalogConverterMode;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    97  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    98  /** \brief Arbitration round length defined in MODULE_VADC.G[x].ARBCFG.ARBRND(x=0,1,..,11)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    99   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   100  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   101  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   102      IfxVadc_ArbitrationRounds_4_slots  = 0,  /**< \brief An arbitration round contains 4 arbitration slots. */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   103      IfxVadc_ArbitrationRounds_8_slots  = 1,  /**< \brief An arbitration round contains 8 arbitration slots. */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   104      IfxVadc_ArbitrationRounds_16_slots = 2,  /**< \brief An arbitration round contains 16 arbitration slots. */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   105      IfxVadc_ArbitrationRounds_20_slots = 3   /**< \brief An arbitration round contains 20 arbitration slots. */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   106  } IfxVadc_ArbitrationRounds;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   107  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   108  /** \brief Boundary Extension defined in MODULE_VADC.G[x].CHCTR[y].B.BNDSELX(x=0,1,...,11;y=0,1....,16)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   109   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   110  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   111  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   112      IfxVadc_BoundaryExtension_standard            = 0,   /**< \brief Boundary Standard mode. BNDSELU/BNDSELL as Boundaries */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   113      IfxVadc_BoundaryExtension_fastCompareResult1  = 1,   /**< \brief Fast compare mode use as upper boundary  Channel result   1 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   114      IfxVadc_BoundaryExtension_fastCompareResult2  = 2,   /**< \brief Fast compare mode use as upper boundary  Channel result   2 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   115      IfxVadc_BoundaryExtension_fastCompareResult3  = 3,   /**< \brief Fast compare mode use as upper boundary  Channel result   3 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   116      IfxVadc_BoundaryExtension_fastCompareResult4  = 4,   /**< \brief Fast compare mode use as upper boundary  Channel result   4 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   117      IfxVadc_BoundaryExtension_fastCompareResult5  = 5,   /**< \brief Fast compare mode use as upper boundary  Channel result   5 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   118      IfxVadc_BoundaryExtension_fastCompareResult6  = 6,   /**< \brief Fast compare mode use as upper boundary  Channel result   6 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   119      IfxVadc_BoundaryExtension_fastCompareResult7  = 7,   /**< \brief Fast compare mode use as upper boundary  Channel result   7 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   120      IfxVadc_BoundaryExtension_fastCompareResult8  = 8,   /**< \brief Fast compare mode use as upper boundary  Channel result   8 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   121      IfxVadc_BoundaryExtension_fastCompareResult9  = 9,   /**< \brief Fast compare mode use as upper boundary  Channel result   9 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   122      IfxVadc_BoundaryExtension_fastCompareResult10 = 10,  /**< \brief Fast compare mode use as upper boundary  Channel result  10 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   123      IfxVadc_BoundaryExtension_fastCompareResult11 = 11,  /**< \brief Fast compare mode use as upper boundary  Channel result  11 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   124      IfxVadc_BoundaryExtension_fastCompareResult12 = 12,  /**< \brief Fast compare mode use as upper boundary  Channel result  12 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   125      IfxVadc_BoundaryExtension_fastCompareResult13 = 13,  /**< \brief Fast compare mode use as upper boundary  Channel result  13 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   126      IfxVadc_BoundaryExtension_fastCompareResult14 = 14,  /**< \brief Fast compare mode use as upper boundary  Channel result  14 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   127      IfxVadc_BoundaryExtension_fastCompareResult15 = 15   /**< \brief Fast compare mode use as upper boundary  Channel result  15 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   128  } IfxVadc_BoundaryExtension;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   129  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   130  /** \brief BoundarySel defined in MODULE_VADC.G[x].CHCTR[y].B.BNDSELL(x=0,1,...,11;y=0,1....,16)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   131   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   132  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   133  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   134      IfxVadc_BoundarySelection_group0  = 0,  /**< \brief Use group class 0 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   135      IfxVadc_BoundarySelection_group1  = 1,  /**< \brief Use group class 1 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   136      IfxVadc_BoundarySelection_global0 = 2,  /**< \brief Use global class 0 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   137      IfxVadc_BoundarySelection_global1 = 3   /**< \brief Use global class 1 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   138  } IfxVadc_BoundarySelection;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   139  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   140  /** \brief VADC Channels
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   141   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   142  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   143  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   144      IfxVadc_ChannelId_none = -1,  /**< \brief None of VADC channels */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   145      IfxVadc_ChannelId_0    = 0,   /**< \brief Channel 0 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   146      IfxVadc_ChannelId_1    = 1,   /**< \brief Channel 1 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   147      IfxVadc_ChannelId_2    = 2,   /**< \brief Channel 2 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   148      IfxVadc_ChannelId_3    = 3,   /**< \brief Channel 3 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   149      IfxVadc_ChannelId_4    = 4,   /**< \brief Channel 4 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   150      IfxVadc_ChannelId_5    = 5,   /**< \brief Channel 5 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   151      IfxVadc_ChannelId_6    = 6,   /**< \brief Channel 6 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   152      IfxVadc_ChannelId_7    = 7,   /**< \brief Channel 7 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   153      IfxVadc_ChannelId_8    = 8,   /**< \brief Channel 8 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   154      IfxVadc_ChannelId_9    = 9,   /**< \brief Channel 9 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   155      IfxVadc_ChannelId_10   = 10,  /**< \brief Channel 10 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   156      IfxVadc_ChannelId_11   = 11,  /**< \brief Channel 11 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   157      IfxVadc_ChannelId_12   = 12,  /**< \brief Channel 12 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   158      IfxVadc_ChannelId_13   = 13,  /**< \brief Channel 13 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   159      IfxVadc_ChannelId_14   = 14,  /**< \brief Channel 14 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   160      IfxVadc_ChannelId_15   = 15   /**< \brief Channel 15 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   161  } IfxVadc_ChannelId;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   162  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   163  /** \brief ADC channel reference defined in MODULE_VADC.G[x].CHCTR[y].B.REFSEL(x=0,1,...,11;y=0,1....,16)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   164   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   165  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   166  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   167      IfxVadc_ChannelReference_standard = 0,  /**< \brief use Varef as reference */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   168      IfxVadc_ChannelReference_channel0 = 1   /**< \brief use CH0 as reference */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   169  } IfxVadc_ChannelReference;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   170  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   171  /** \brief ADC channel resolution defined in MODULE_VADC.G[x].CHCTR[y].B.ICLASS[y].B.CMS(x=0,1,...,11;y=0,1)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   172   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   173  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   174  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   175      IfxVadc_ChannelResolution_12bit     = 0, /**< \brief 12-bit conversion */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   176      IfxVadc_ChannelResolution_10bit     = 1, /**< \brief 10-bit conversion */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   177      IfxVadc_ChannelResolution_8bit      = 2, /**< \brief 8-bit conversion */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   178      IfxVadc_ChannelResolution_10bitFast = 5  /**< \brief 10-bit cfast compare mode */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   179  } IfxVadc_ChannelResolution;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   180  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   181  /** \brief Channel Result defined in MODULE_VADC.G[x].CHCTR[y].B.RESREG(x=0,1,...,11;y=0,1....,16)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   182   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   183  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   184  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   185      IfxVadc_ChannelResult_0 = 0,      /**< \brief Use Channel result 0  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   186      IfxVadc_ChannelResult_1,          /**< \brief Use Channel result 1  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   187      IfxVadc_ChannelResult_2,          /**< \brief Use Channel result 2  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   188      IfxVadc_ChannelResult_3,          /**< \brief Use Channel result 3  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   189      IfxVadc_ChannelResult_4,          /**< \brief Use Channel result 4  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   190      IfxVadc_ChannelResult_5,          /**< \brief Use Channel result 5  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   191      IfxVadc_ChannelResult_6,          /**< \brief Use Channel result 6  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   192      IfxVadc_ChannelResult_7,          /**< \brief Use Channel result 7  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   193      IfxVadc_ChannelResult_8,          /**< \brief Use Channel result 8  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   194      IfxVadc_ChannelResult_9,          /**< \brief Use Channel result 9  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   195      IfxVadc_ChannelResult_10,         /**< \brief Use Channel result 10  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   196      IfxVadc_ChannelResult_11,         /**< \brief Use Channel result 11  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   197      IfxVadc_ChannelResult_12,         /**< \brief Use Channel result 12  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   198      IfxVadc_ChannelResult_13,         /**< \brief Use Channel result 13  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   199      IfxVadc_ChannelResult_14,         /**< \brief Use Channel result 14  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   200      IfxVadc_ChannelResult_15          /**< \brief Use Channel result 15  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   201  } IfxVadc_ChannelResult;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   202  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   203  /** \brief External Multiplexer Channel Selection Style as defined in
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   204   * Ifx_VADC.G[x].EMUXCTR.B.EMXCSS
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   205   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   206  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   207  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   208      IfxVadc_ChannelSelectionStyle_channelNumber = 0,  /**< \brief selects an arbitrary channel */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   209      IfxVadc_ChannelSelectionStyle_binary        = 1   /**< \brief Each bit of bitfield EMUXCH selects the
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   210                                                         * associated channel for EMUX control */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   211  } IfxVadc_ChannelSelectionStyle;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   212  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   213  /** \brief type of conversion
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   214   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   215  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   216  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   217      IfxVadc_ConversionType_Compatible = 0  /**< \brief Compatible Timing Mode */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   218  } IfxVadc_ConversionType;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   219  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   220  /** \brief Specifies the External Coding scheme(binary/gray)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   221   * defined in Ifx_VADC.G[x].EMUXCTR.B.EMXCOD
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   222   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   223  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   224  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   225      IfxVadc_EmuxCodingScheme_binary = 0,  /**< \brief Output the Channel Number in Binary code */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   226      IfxVadc_EmuxCodingScheme_gray   = 1   /**< \brief Output the channel number in gray code */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   227  } IfxVadc_EmuxCodingScheme;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   228  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   229  /** \brief Specifies the Emux interface
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   230   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   231  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   232  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   233      IfxVadc_EmuxInterface_0 = 0,  /**< \brief Emux Interface 0 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   234      IfxVadc_EmuxInterface_1 = 1   /**< \brief Emux Interface 1 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   235  } IfxVadc_EmuxInterface;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   236  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   237  /** \brief External Multiplexer sample time control
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   238   * defined in Ifx_VADC.G[x].EMUXCTR.B.EMXST
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   239   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   240  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   241  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   242      IfxVadc_EmuxSampleTimeControl_settingChanges = 0,  /**< \brief Use STCE Whenever Setting Changes */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   243      IfxVadc_EmuxSampleTimeControl_always         = 1   /**< \brief Use STCE for each conversion of an external channel */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   244  } IfxVadc_EmuxSampleTimeControl;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   245  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   246  /** \brief specifies the External Channel Start select value
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   247   * defined in Ifx_VADC.G[x].EMUXCTR.B.EMUXSET
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   248   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   249  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   250  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   251      IfxVadc_EmuxSelectValue_0 = 0,      /**< \brief Start Selection Value 0  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   252      IfxVadc_EmuxSelectValue_1,          /**< \brief Start Selection Value 1  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   253      IfxVadc_EmuxSelectValue_2,          /**< \brief Start Selection Value 2  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   254      IfxVadc_EmuxSelectValue_3,          /**< \brief Start Selection Value 3  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   255      IfxVadc_EmuxSelectValue_4,          /**< \brief Start Selection Value 4  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   256      IfxVadc_EmuxSelectValue_5,          /**< \brief Start Selection Value 5  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   257      IfxVadc_EmuxSelectValue_6,          /**< \brief Start Selection Value 6  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   258      IfxVadc_EmuxSelectValue_7           /**< \brief Start Selection Value 7  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   259  } IfxVadc_EmuxSelectValue;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   260  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   261  /** \brief Specifies External Multiplexer Mode
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   262   * define in Ifx_VADC.G[x].EMUXCTR.B.EMUXMODE
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   263   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   264  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   265  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   266      IfxVadc_ExternalMultiplexerMode_softwareControl = 0,  /**< \brief Disable The Emux Control */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   267      IfxVadc_ExternalMultiplexerMode_steady          = 1,  /**< \brief select steady mode */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   268      IfxVadc_ExternalMultiplexerMode_singleStep      = 2,  /**< \brief Select single step mode */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   269      IfxVadc_ExternalMultiplexerMode_sequence        = 3   /**< \brief Select Sequence Mode */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   270  } IfxVadc_ExternalMultiplexerMode;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   271  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   272  /** \brief FIFO mode enable
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   273   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   274  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   275  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   276      IfxVadc_FifoMode_seperateResultRegister = 0,  /**< \brief seperate Result Register */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   277      IfxVadc_FifoMode_fifoStructure          = 1,  /**< \brief fifoStructure */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   278      IfxVadc_FifoMode_maximumMode            = 2,  /**< \brief copy new result if bigger */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   279      IfxVadc_FifoMode_minimumMode            = 3   /**< \brief copy new result if it is smaller */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   280  } IfxVadc_FifoMode;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   281  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   282  /** \brief gating mode defined in MODULE_VADC.BRSMR.ENGT
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   283   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   284  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   285  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   286      IfxVadc_GatingMode_disabled   = 0,  /**< \brief Gating is disabled, no conversion request are issued */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   287      IfxVadc_GatingMode_always     = 1,  /**< \brief Conversion request is issued if at least 1 conversion pending bit is set */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   288      IfxVadc_GatingMode_gatingHigh = 2,  /**< \brief Conversion request is issued if at least 1 conversion pending bit is set and the gating signal is high */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   289      IfxVadc_GatingMode_gatingLow  = 3   /**< \brief Conversion request is issued if at least 1 conversion pending bit is set and the gating signal is low */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   290  } IfxVadc_GatingMode;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   291  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   292  /** \brief External trigger gating defined in MODULE_VADC.G[x].QCTRLy.GTSEL(x=0,1,..,11;y=0,1,..,7)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   293   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   294  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   295  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   296      IfxVadc_GatingSource_0 = 0,      /**< \brief Input signal REQGTx_0  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   297      IfxVadc_GatingSource_1,          /**< \brief Input signal REQGTx_1  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   298      IfxVadc_GatingSource_2,          /**< \brief Input signal REQGTx_2  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   299      IfxVadc_GatingSource_3,          /**< \brief Input signal REQGTx_3  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   300      IfxVadc_GatingSource_4,          /**< \brief Input signal REQGTx_4  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   301      IfxVadc_GatingSource_5,          /**< \brief Input signal REQGTx_5  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   302      IfxVadc_GatingSource_6,          /**< \brief Input signal REQGTx_6  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   303      IfxVadc_GatingSource_7,          /**< \brief Input signal REQGTx_7  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   304      IfxVadc_GatingSource_8,          /**< \brief Input signal REQGTx_8  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   305      IfxVadc_GatingSource_9,          /**< \brief Input signal REQGTx_9  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   306      IfxVadc_GatingSource_10,         /**< \brief Input signal REQGTx_10  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   307      IfxVadc_GatingSource_11,         /**< \brief Input signal REQGTx_11  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   308      IfxVadc_GatingSource_12,         /**< \brief Input signal REQGTx_12  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   309      IfxVadc_GatingSource_13,         /**< \brief Input signal REQGTx_13  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   310      IfxVadc_GatingSource_14,         /**< \brief Input signal REQGTx_14  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   311      IfxVadc_GatingSource_15          /**< \brief Input signal REQGTx_15  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   312  } IfxVadc_GatingSource;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   313  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   314  /** \brief inputClass defined in MODULE_VADC.G[x].CHCTR[y].B.ICLSEL(x=0,1,...,11;y=0,1....,16)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   315   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   316  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   317  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   318      IfxVadc_InputClasses_group0  = 0,  /**< \brief Use group class 0 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   319      IfxVadc_InputClasses_group1  = 1,  /**< \brief Use group class 1 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   320      IfxVadc_InputClasses_global0 = 2,  /**< \brief Use global class 0 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   321      IfxVadc_InputClasses_global1 = 3   /**< \brief Use global class 1 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   322  } IfxVadc_InputClasses;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   323  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   324  /** \brief ADC channel limit check defined in MODULE_VADC.G[x].CHCTR[y].B.CHEVMODE(x=0,1,...,11;y=0,1....,16)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   325   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   326  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   327  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   328      IfxVadc_LimitCheck_noCheck            = 0,  /**< \brief Normal compare mode Event Never Fast Compare mode Event Never */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   329      IfxVadc_LimitCheck_eventIfInArea      = 1,  /**< \brief Normal compare mode Event If result is inside the boundary band    Fast Compare mode Event If result switches to high (above comp. value) */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   330      IfxVadc_LimitCheck_eventIfOutsideArea = 2,  /**< \brief Normal compare mode Event If result is outside the boundary band   Fast Compare mode Event If result switches to low (below comp. value) */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   331      IfxVadc_LimitCheck_always             = 3   /**< \brief Normal compare mode Event Always   Fast Compare mode Event Always */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   332  } IfxVadc_LimitCheck;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   333  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   334  /** \brief Low Power Supply Voltage Select
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   335   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   336  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   337  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   338      IfxVadc_LowSupplyVoltageSelect_5V = 0,  /**< \brief 5V Power Supply is Connected */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   339      IfxVadc_LowSupplyVoltageSelect_3V = 1   /**< \brief 3.3V Power Supply is Connected */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   340  } IfxVadc_LowSupplyVoltageSelect;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   341  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   342  /** \brief Access protection for Group registers defined in MODULE_VADC.ACCPROT0.U
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   343   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   344  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   345  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   346      IfxVadc_Protection_channelControl0       = 0,   /**< \brief Access control for GxCHCTR0 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   347      IfxVadc_Protection_channelControl1       = 1,   /**< \brief Access control for GxCHCTR1 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   348      IfxVadc_Protection_channelControl2       = 2,   /**< \brief Access control for GxCHCTR2 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   349      IfxVadc_Protection_channelControl3       = 3,   /**< \brief Access control for GxCHCTR3 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   350      IfxVadc_Protection_channelControl4       = 4,   /**< \brief Access control for GxCHCTR4 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   351      IfxVadc_Protection_channelControl5       = 5,   /**< \brief Access control for GxCHCTR5 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   352      IfxVadc_Protection_channelControl6       = 6,   /**< \brief Access control for GxCHCTR6 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   353      IfxVadc_Protection_channelControl7       = 7,   /**< \brief Access control for GxCHCTR7 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   354      IfxVadc_Protection_channelControl8       = 8,   /**< \brief Access control for GxCHCTR8 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   355      IfxVadc_Protection_channelControl9       = 9,   /**< \brief Access control for GxCHCTR9 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   356      IfxVadc_Protection_channelControl10      = 10,  /**< \brief Access control for GxCHCTR10 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   357      IfxVadc_Protection_channelControl11      = 11,  /**< \brief Access control for GxCHCTR11 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   358      IfxVadc_Protection_channelControl12      = 12,  /**< \brief Access control for GxCHCTR12 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   359      IfxVadc_Protection_channelControl13      = 13,  /**< \brief Access control for GxCHCTR13 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   360      IfxVadc_Protection_channelControl14      = 14,  /**< \brief Access control for GxCHCTR14 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   361      IfxVadc_Protection_externalMultiplexer   = 15,  /**< \brief Access control for EMUXSEL, GxEMUXCTR */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   362      IfxVadc_Protection_initGroup0            = 16,  /**< \brief Access control for GxARBCFG, GxARBPR, GxCHASS, GxRRASS, GxICLASS0/1, GxSYNCTR */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   363      IfxVadc_Protection_initGroup1            = 17,  /**< \brief Access control for GxARBCFG, GxARBPR, GxCHASS, GxRRASS, GxICLASS0/1, GxSYNCTR */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   364      IfxVadc_Protection_initGroup2            = 18,  /**< \brief Access control for GxARBCFG, GxARBPR, GxCHASS, GxRRASS, GxICLASS0/1, GxSYNCTR */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   365      IfxVadc_Protection_initGroup3            = 19,  /**< \brief Access control for GxARBCFG, GxARBPR, GxCHASS, GxRRASS, GxICLASS0/1, GxSYNCTR */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   366      IfxVadc_Protection_initGroup4            = 20,  /**< \brief Access control for GxARBCFG, GxARBPR, GxCHASS, GxRRASS, GxICLASS0/1, GxSYNCTR */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   367      IfxVadc_Protection_initGroup5            = 21,  /**< \brief Access control for GxARBCFG, GxARBPR, GxCHASS, GxRRASS, GxICLASS0/1, GxSYNCTR */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   368      IfxVadc_Protection_initGroup6            = 22,  /**< \brief Access control for GxARBCFG, GxARBPR, GxCHASS, GxRRASS, GxICLASS0/1, GxSYNCTR */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   369      IfxVadc_Protection_initGroup7            = 23,  /**< \brief Access control for GxARBCFG, GxARBPR, GxCHASS, GxRRASS, GxICLASS0/1, GxSYNCTR */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   370      IfxVadc_Protection_initGroup8            = 24,  /**< \brief Access control for GxARBCFG, GxARBPR, GxCHASS, GxRRASS, GxICLASS0/1, GxSYNCTR */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   371      IfxVadc_Protection_initGroup9            = 25,  /**< \brief Access control for GxARBCFG, GxARBPR, GxCHASS, GxRRASS, GxICLASS0/1, GxSYNCTR */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   372      IfxVadc_Protection_initGroup10           = 26,  /**< \brief Access control for GxARBCFG, GxARBPR, GxCHASS, GxRRASS, GxICLASS0/1, GxSYNCTR */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   373      IfxVadc_Protection_initGroup11           = 27,  /**< \brief Access control for GxARBCFG, GxARBPR, GxCHASS, GxRRASS, GxICLASS0/1, GxSYNCTR */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   374      IfxVadc_Protection_initGroup12           = 28,  /**< \brief Access control for GxARBCFG, GxARBPR, GxCHASS, GxRRASS, GxICLASS0/1, GxSYNCTR */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   375      IfxVadc_Protection_initGroup13           = 29,  /**< \brief Access control for GxARBCFG, GxARBPR, GxCHASS, GxRRASS, GxICLASS0/1, GxSYNCTR */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   376      IfxVadc_Protection_initGroup14           = 30,  /**< \brief Access control for GxARBCFG, GxARBPR, GxCHASS, GxRRASS, GxICLASS0/1, GxSYNCTR */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   377      IfxVadc_Protection_globalConfig          = 31,  /**< \brief Access control for GLOBCFG */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   378      IfxVadc_Protection_serviceGroup0         = 32,  /**< \brief Access control for GxSEFLAG, GxSEVNP, GxCEFLAG, GxCEVNP0/1/2, GxREFLAG, GxREVNP0/1, GxSRACT */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   379      IfxVadc_Protection_serviceGroup1         = 33,  /**< \brief Access control for GxSEFLAG, GxSEVNP, GxCEFLAG, GxCEVNP0/1/2, GxREFLAG, GxREVNP0/1, GxSRACT */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   380      IfxVadc_Protection_serviceGroup2         = 34,  /**< \brief Access control for GxSEFLAG, GxSEVNP, GxCEFLAG, GxCEVNP0/1/2, GxREFLAG, GxREVNP0/1, GxSRACT */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   381      IfxVadc_Protection_serviceGroup3         = 35,  /**< \brief Access control for GxSEFLAG, GxSEVNP, GxCEFLAG, GxCEVNP0/1/2, GxREFLAG, GxREVNP0/1, GxSRACT */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   382      IfxVadc_Protection_serviceGroup4         = 36,  /**< \brief Access control for GxSEFLAG, GxSEVNP, GxCEFLAG, GxCEVNP0/1/2, GxREFLAG, GxREVNP0/1, GxSRACT */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   383      IfxVadc_Protection_serviceGroup5         = 37,  /**< \brief Access control for GxSEFLAG, GxSEVNP, GxCEFLAG, GxCEVNP0/1/2, GxREFLAG, GxREVNP0/1, GxSRACT */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   384      IfxVadc_Protection_serviceGroup6         = 38,  /**< \brief Access control for GxSEFLAG, GxSEVNP, GxCEFLAG, GxCEVNP0/1/2, GxREFLAG, GxREVNP0/1, GxSRACT */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   385      IfxVadc_Protection_serviceGroup7         = 39,  /**< \brief Access control for GxSEFLAG, GxSEVNP, GxCEFLAG, GxCEVNP0/1/2, GxREFLAG, GxREVNP0/1, GxSRACT */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   386      IfxVadc_Protection_serviceGroup8         = 40,  /**< \brief Access control for GxSEFLAG, GxSEVNP, GxCEFLAG, GxCEVNP0/1/2, GxREFLAG, GxREVNP0/1, GxSRACT */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   387      IfxVadc_Protection_serviceGroup9         = 41,  /**< \brief Access control for GxSEFLAG, GxSEVNP, GxCEFLAG, GxCEVNP0/1/2, GxREFLAG, GxREVNP0/1, GxSRACT */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   388      IfxVadc_Protection_serviceGroup10        = 42,  /**< \brief Access control for GxSEFLAG, GxSEVNP, GxCEFLAG, GxCEVNP0/1/2, GxREFLAG, GxREVNP0/1, GxSRACT */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   389      IfxVadc_Protection_serviceGroup11        = 43,  /**< \brief Access control for GxSEFLAG, GxSEVNP, GxCEFLAG, GxCEVNP0/1/2, GxREFLAG, GxREVNP0/1, GxSRACT */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   390      IfxVadc_Protection_serviceGroup12        = 44,  /**< \brief Access control for GxSEFLAG, GxSEVNP, GxCEFLAG, GxCEVNP0/1/2, GxREFLAG, GxREVNP0/1, GxSRACT */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   391      IfxVadc_Protection_serviceGroup13        = 45,  /**< \brief Access control for GxSEFLAG, GxSEVNP, GxCEFLAG, GxCEVNP0/1/2, GxREFLAG, GxREVNP0/1, GxSRACT */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   392      IfxVadc_Protection_serviceGroup14        = 46,  /**< \brief Access control for GxSEFLAG, GxSEVNP, GxCEFLAG, GxCEVNP0/1/2, GxREFLAG, GxREVNP0/1, GxSRACT */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   393      IfxVadc_Protection_testFunction          = 47,  /**< \brief Access control for GLOBTF */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   394      IfxVadc_Protection_resultRegisterGroup0  = 48,  /**< \brief Access control for GxRCRx(x=0,1,..,15), GxBOUND, GxRESx(x=0 .. 15) */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   395      IfxVadc_Protection_resultRegisterGroup1  = 49,  /**< \brief Access control for GxRCRx(x=0,1,..,15), GxBOUND, GxRESx(x=0 .. 15) */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   396      IfxVadc_Protection_resultRegisterGroup2  = 50,  /**< \brief Access control for GxRCRx(x=0,1,..,15), GxBOUND, GxRESx(x=0 .. 15) */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   397      IfxVadc_Protection_resultRegisterGroup3  = 51,  /**< \brief Access control for GxRCRx(x=0,1,..,15), GxBOUND, GxRESx(x=0 .. 15) */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   398      IfxVadc_Protection_resultRegisterGroup4  = 52,  /**< \brief Access control for GxRCRx(x=0,1,..,15), GxBOUND, GxRESx(x=0 .. 15) */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   399      IfxVadc_Protection_resultRegisterGroup5  = 53,  /**< \brief Access control for GxRCRx(x=0,1,..,15), GxBOUND, GxRESx(x=0 .. 15) */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   400      IfxVadc_Protection_resultRegisterGroup6  = 54,  /**< \brief Access control for GxRCRx(x=0,1,..,15), GxBOUND, GxRESx(x=0 .. 15) */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   401      IfxVadc_Protection_resultRegisterGroup7  = 55,  /**< \brief Access control for GxRCRx(x=0,1,..,15), GxBOUND, GxRESx(x=0 .. 15) */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   402      IfxVadc_Protection_resultRegisterGroup8  = 56,  /**< \brief Access control for GxRCRx(x=0,1,..,15), GxBOUND, GxRESx(x=0 .. 15) */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   403      IfxVadc_Protection_resultRegisterGroup9  = 57,  /**< \brief Access control for GxRCRx(x=0,1,..,15), GxBOUND, GxRESx(x=0 .. 15) */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   404      IfxVadc_Protection_resultRegisterGroup10 = 58,  /**< \brief Access control for GxRCRx(x=0,1,..,15), GxBOUND, GxRESx(x=0 .. 15) */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   405      IfxVadc_Protection_resultRegisterGroup11 = 59,  /**< \brief Access control for GxRCRx(x=0,1,..,15), GxBOUND, GxRESx(x=0 .. 15) */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   406      IfxVadc_Protection_resultRegisterGroup12 = 60,  /**< \brief Access control for GxRCRx(x=0,1,..,15), GxBOUND, GxRESx(x=0 .. 15) */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   407      IfxVadc_Protection_resultRegisterGroup13 = 61,  /**< \brief Access control for GxRCRx(x=0,1,..,15), GxBOUND, GxRESx(x=0 .. 15) */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   408      IfxVadc_Protection_resultRegisterGroup14 = 62   /**< \brief Access control for GxRCRx(x=0,1,..,15), GxBOUND, GxRESx(x=0 .. 15) */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   409  } IfxVadc_Protection;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   410  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   411  /** \brief Arbitration priority, Group x,defined in MODULE_VADC.G[x].ARBPR.PRIOy(x=0,1,...,11;y=0,1,2)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   412   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   413  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   414  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   415      IfxVadc_RequestSlotPriority_lowest  = 0, /**< \brief Lowest priority */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   416      IfxVadc_RequestSlotPriority_low     = 1, /**< \brief Lowpriority */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   417      IfxVadc_RequestSlotPriority_high    = 2, /**< \brief High priority */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   418      IfxVadc_RequestSlotPriority_highest = 3  /**< \brief Highest priority */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   419  } IfxVadc_RequestSlotPriority;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   420  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   421  /** \brief Request source start mode defined in MODULE_VADC.G[x].ARBPR.CSMy(x=0,1,...,11;y=0,1,2)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   422   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   423  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   424  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   425      IfxVadc_RequestSlotStartMode_waitForStart       = 0, /**< \brief Wait for start */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   426      IfxVadc_RequestSlotStartMode_cancelInjectRepeat = 1  /**< \brief Cancel-Inject-Repeat */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   427  } IfxVadc_RequestSlotStartMode;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   428  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   429  /** \brief Request sources
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   430   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   431  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   432  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   433      IfxVadc_RequestSource_queue      = 0, /**< \brief 8 stage Queue request */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   434      IfxVadc_RequestSource_scan       = 1, /**< \brief scan request */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   435      IfxVadc_RequestSource_background = 2  /**< \brief background scan request */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   436  } IfxVadc_RequestSource;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   437  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   438  /** \brief Enable/disable the sensitivity of the module to sleep signal\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   439   * Definition in Ifx_VADC.CLC.B.EDIS
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   440   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   441  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   442  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   443      IfxVadc_SleepMode_enable  = 0, /**< \brief enables sleep mode */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   444      IfxVadc_SleepMode_disable = 1  /**< \brief disables sleep mode */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   445  } IfxVadc_SleepMode;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   446  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   447  /** \brief Service Node defined in MODULE_VADC.G[x].SRACT.U(x= 0,1,..,11)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   448   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   449  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   450  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   451      IfxVadc_SrcNr_group0  = 0,  /**< \brief service request line 0 of group */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   452      IfxVadc_SrcNr_group1  = 1,  /**< \brief service request line 1 of group */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   453      IfxVadc_SrcNr_group2  = 2,  /**< \brief service request line 2 of group */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   454      IfxVadc_SrcNr_group3  = 3,  /**< \brief service request line 3 of group */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   455      IfxVadc_SrcNr_shared0 = 4,  /**< \brief Select shared service request line 0 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   456      IfxVadc_SrcNr_shared1 = 5,  /**< \brief Select shared service request line 1 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   457      IfxVadc_SrcNr_shared2 = 6,  /**< \brief Select shared service request line 2 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   458      IfxVadc_SrcNr_shared3 = 7   /**< \brief Select shared service request line 3 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   459  } IfxVadc_SrcNr;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   460  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   461  /** \brief API return values defined in
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   462   * MODULE_VADC.G[x].QSR0.U,MODULE_VADC.G[x].ASPND.U
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   463   * MODULE_VADC.BRSPND[x](x=0,1,...,11)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   464   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   465  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   466  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   467      IfxVadc_Status_noError              = 0, /**< \brief No error during api execution */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   468      IfxVadc_Status_notInitialised       = 1, /**< \brief Appropriate initialisation not done */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   469      IfxVadc_Status_invalidGroup         = 2, /**< \brief Invalid group number */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   470      IfxVadc_Status_invalidChannel       = 3, /**< \brief Invalid channel number */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   471      IfxVadc_Status_queueFull            = 4, /**< \brief Queue is full */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   472      IfxVadc_Status_noAccess             = 5, /**< \brief Access to the group/channel is disabled */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   473      IfxVadc_Status_channelsStillPending = 6  /**< \brief Conversion for some of the channels are still pending */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   474  } IfxVadc_Status;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   475  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   476  /** \brief trigger definition defined in MODULE_VADC.G[x].QCTRL0.XTMODE(x=0,1,..,11)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   477   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   478  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   479  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   480      IfxVadc_TriggerMode_noExternalTrigger = 0,  /**< \brief No external trigger */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   481      IfxVadc_TriggerMode_uponFallingEdge   = 1,  /**< \brief Trigger event upon a falling edge */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   482      IfxVadc_TriggerMode_uponRisingEdge    = 2,  /**< \brief Trigger event upon a rising edge */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   483      IfxVadc_TriggerMode_uponAnyEdge       = 3   /**< \brief Trigger event upon any edge */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   484  } IfxVadc_TriggerMode;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   485  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   486  /** \brief Trigger request source defined in MODULE_VADC.G[x].QCTRLy.XTSEL(x=0,1,..,11;y=0,1,..,7)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   487   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   488  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   489  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   490      IfxVadc_TriggerSource_0 = 0,      /**< \brief Input signal REQTRx_0  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   491      IfxVadc_TriggerSource_1,          /**< \brief Input signal REQTRx_1  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   492      IfxVadc_TriggerSource_2,          /**< \brief Input signal REQTRx_2  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   493      IfxVadc_TriggerSource_3,          /**< \brief Input signal REQTRx_3  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   494      IfxVadc_TriggerSource_4,          /**< \brief Input signal REQTRx_4  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   495      IfxVadc_TriggerSource_5,          /**< \brief Input signal REQTRx_5  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   496      IfxVadc_TriggerSource_6,          /**< \brief Input signal REQTRx_6  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   497      IfxVadc_TriggerSource_7,          /**< \brief Input signal REQTRx_7  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   498      IfxVadc_TriggerSource_8,          /**< \brief Input signal REQTRx_8  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   499      IfxVadc_TriggerSource_9,          /**< \brief Input signal REQTRx_9  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   500      IfxVadc_TriggerSource_10,         /**< \brief Input signal REQTRx_10  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   501      IfxVadc_TriggerSource_11,         /**< \brief Input signal REQTRx_11  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   502      IfxVadc_TriggerSource_12,         /**< \brief Input signal REQTRx_12  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   503      IfxVadc_TriggerSource_13,         /**< \brief Input signal REQTRx_13  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   504      IfxVadc_TriggerSource_14,         /**< \brief Input signal REQTRx_14  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   505      IfxVadc_TriggerSource_15          /**< \brief Input signal REQTRx_15  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   506  } IfxVadc_TriggerSource;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   507  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   508  /** \} */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   509  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   510  /** \addtogroup IfxLld_Vadc_Std_Background_Autoscan
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   511   * \{ */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   512  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   513  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   514  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   515  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   516  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   517  /** \brief access function to enable/disable  wait for read mode for result registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   518   * \param group pointer to the VADC group
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   519   * \param resultIdx result register index
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   520   * \param waitForRead wait for read mode enabled/disabled
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   521   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   522   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   523  IFX_INLINE void IfxVadc_configureWaitForReadMode(Ifx_VADC_G *group, uint32 resultIdx, boolean waitForRead);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   524  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   525  /** \brief access function to enable/disable  wait for read mode for global result register
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   526   * \param vadc pointer to the VADC
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   527   * \param waitForRead wait for read mode enabled/disabled
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   528   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   529   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   530  IFX_INLINE void IfxVadc_configureWaitForReadModeForGlobalResultRegister(Ifx_VADC *vadc, boolean waitForRead);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   531  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   532  /** \brief Enables the background sacn external trigger.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   533   * \param vadc pointer to the base of VADC registers.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   534   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   535   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   536  IFX_INLINE void IfxVadc_enableBackgroundScanSlotExternalTrigger(Ifx_VADC *vadc);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   537  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   538  /** \brief Gets the background scan gating mode.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   539   * \param vadc pointer to the base of VADC registers.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   540   * \return background scan gating mode.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   541   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   542  IFX_INLINE IfxVadc_GatingMode IfxVadc_getBackgroundScanGatingMode(Ifx_VADC *vadc);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   543  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   544  /** \brief Gets the gating input selection.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   545   * \param vadc pointer to the base of VADC registers.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   546   * \return background scan gating input selection.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   547   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   548  IFX_INLINE IfxVadc_GatingSource IfxVadc_getBackgroundScanGatingSource(Ifx_VADC *vadc);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   549  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   550  /** \brief Gets the requested background scan slot priority.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   551   * \param vadcG pointer to VADC group registers.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   552   * \return requested background scan slot priority.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   553   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   554  IFX_INLINE IfxVadc_RequestSlotPriority IfxVadc_getBackgroundScanSlotPriority(Ifx_VADC_G *vadcG);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   555  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   556  /** \brief Gets the requested background scan slot start mode.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   557   * \param vadcG pointer to VADC group registers.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   558   * \return requested background scan slot start mode.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   559   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   560  IFX_INLINE IfxVadc_RequestSlotStartMode IfxVadc_getBackgroundScanSlotStartMode(Ifx_VADC_G *vadcG);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   561  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   562  /** \brief Gets the background scan trigger input.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   563   * \param vadc pointer to the base of VADC registers.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   564   * \return Gets the background scan external trigger source.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   565   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   566  IFX_INLINE IfxVadc_TriggerSource IfxVadc_getBackgroundScanTriggerInput(Ifx_VADC *vadc);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   567  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   568  /** \brief Gets the background scan external trigger mode.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   569   * \param vadc pointer to the base of VADC registers.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   570   * \return background scan external trigger mode.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   571   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   572  IFX_INLINE IfxVadc_TriggerMode IfxVadc_getBackgroundScanTriggerMode(Ifx_VADC *vadc);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   573  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   574  /** \brief get global input class resolution
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   575   * \param vadc Pointer to the VADC Group
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   576   * \param inputClassNum global input class number
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   577   * \return ADC input class channel resolution.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   578   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   579  IFX_INLINE IfxVadc_ChannelResolution IfxVadc_getGlobalResolution(Ifx_VADC *vadc, uint8 inputClassNum);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   580  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   581  /** \brief return conversion result stored in the Global result Register
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   582   * \param vadc pointer to the VADC module
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   583   * \return global result register
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   584   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   585   * \code
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   586   * Ifx_VADC* vadc = &MODULE_VADC; // module pointer
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   587   * IfxVadc_GroupId groupId = IfxVadc_GroupId0; // for group 0
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   588   * uint32 channels = (1 << 5) | (1 << 2); // enable channel #5 and #2
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   589   * uint32 mask = (1 << 7) | (1 << 5) | (1 << 2); // modify the selection for channel #7, #5 and #2; channel #7 will be disabled
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   590   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   591   * //confiure wait for read mode for global result register
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   592   * IfxVadc_configureWaitForReadModeForGlobalResultRegister(vadc, TRUE);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   593   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   594   * // configure background scan
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   595   * IfxVadc_setBackgroundScan(vadc, groupId, channels, mask);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   596   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   597   * // enable auto scan
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   598   * IfxVadc_SetAutoBackgroundScan(vadc, TRUE);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   599   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   600   * // start the background scan
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   601   * IfxVadc_startBackgroundScan(vadc);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   602   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   603   * Ifx_VADC_GLOBRES result;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   604   * result = IfxVadc_getGlobalResult (vadc);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   605   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   606   * \endcode
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   607   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   608   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   609  IFX_INLINE Ifx_VADC_GLOBRES IfxVadc_getGlobalResult(Ifx_VADC *vadc);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   610  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   611  /** \brief get global input class sample time in sec
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   612   * \param vadc Pointer to the VADC Group Register space
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   613   * \param inputClassNum ADC input class number
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   614   * \param analogFrequency ADC module analog frequency in Hz.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   615   * \return ADC input class channel sample time in sec.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   616   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   617  IFX_INLINE float32 IfxVadc_getGlobalSampleTime(Ifx_VADC *vadc, uint8 inputClassNum, float32 analogFrequency);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   618  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   619  /** \brief Get conversion result for the group
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   620   * \param group pointer to the VADC group
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   621   * \param results pointer to scaled conversion results
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   622   * \param resultOffset offset for the first result
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   623   * \param numResults number of results
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   624   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   625   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   626   * \code
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   627   * Ifx_VADC* vadc = &MODULE_VADC
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   628   * Ifx_VADC_G* group = &MODULE_VADC.G[0]; // for group 0
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   629   * uint32 channels = (1 << 5) | (1 << 2); // enable channel #5 and #2
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   630   * uint32 mask = (1 << 7) | (1 << 5) | (1 << 2); // modify the selection for channel #7, #5 and #2; channel #7 will be disabled
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   631   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   632   * //confiure wait for read mode for global result register
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   633   * IfxVadc_configureWaitForReadMode(group,IfxVadc_ChannelResult0, TRUE);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   634   * IfxVadc_configureWaitForReadMode(group,IfxVadc_ChannelResult1, TRUE);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   635   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   636   * // configure scan
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   637   * IfxVadc_setScan(group, channels, mask);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   638   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   639   * // enable auto scan
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   640   * IfxVadc_setAutoScan(group, TRUE);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   641   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   642   * // start the scan
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   643   * IfxVadc_startScan(group);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   644   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   645   * // wait for conversion to finish
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   646   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   647   * // fetch the 2 results of conversion for group 0
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   648   * Ifx_VADC_RES results[10];
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   649   * result = IfxVadc_getGroupResult(group, results, 0, 2);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   650   * \endcode
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   651   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   652   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   653  IFX_INLINE void IfxVadc_getGroupResult(Ifx_VADC_G *group, Ifx_VADC_RES *results, uint32 resultOffset, uint32 numResults);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   654  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   655  /** \brief Get conversion result (Function does not care about the alignment)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   656   * value = raw * gain + offset.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   657   * \param group pointer to the VADC group
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   658   * \param resultIdx result register index
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   659   * \return scaled Conversion result
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   660   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   661   * \code
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   662   * Ifx_VADC_G* group = &MODULE_VADC.G[0]; // for group 0
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   663   * uint32 channels = (1 << 5) | (1 << 2); // enable channel #5 and #2
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   664   * uint32 mask = (1 << 7) | (1 << 5) | (1 << 2); // modify the selection for channel #7, #5 and #2; channel #7 will be disabled
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   665   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   666   * //confiure wait for read mode for global result register
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   667   * IfxVadc_configureWaitForReadMode(group,IfxVadc_ChannelResult0, TRUE);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   668   * IfxVadc_configureWaitForReadMode(group,IfxVadc_ChannelResult1, TRUE);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   669   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   670   * // configure scan
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   671   * IfxVadc_setScan(group, channels, mask);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   672   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   673   * // enable auto scan
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   674   * IfxVadc_setAutoScan(group, TRUE);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   675   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   676   * // start the scan
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   677   * IfxVadc_startScan(group);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   678   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   679   * // wait for conversion to finish
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   680   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   681   * // fetch the result of conversion from result register 0 for group 0
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   682   * Ifx_VADC_RES result;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   683   * result = IfxVadc_getResult(group, IfxVadc_ChannelResult0);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   684   * \endcode
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   685   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   686   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   687  IFX_INLINE Ifx_VADC_RES IfxVadc_getResult(Ifx_VADC_G *group, uint32 resultIdx);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   688  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   689  /** \brief Returns the auto background scan status.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   690   * \param vadc pointer to the base of VADC registers.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   691   * \return TRUE if enabled otherwise FALSE.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   692   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   693  IFX_INLINE boolean IfxVadc_isAutoBackgroundScanEnabled(Ifx_VADC *vadc);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   694  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   695  /** \brief Returns the background scan slot requested status.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   696   * \param vadcG pointer to VADC group registers.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   697   * \return background scan slot requested status.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   698   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   699  IFX_INLINE boolean IfxVadc_isRequestBackgroundScanSlotEnabled(Ifx_VADC_G *vadcG);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   700  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   701  /** \brief Enables/Disables continuous background auto scan
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   702   * \param vadc pointer to the base of VADC registers.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   703   * \param autoBackgroundScanEnable whether auto background scan enabled or not.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   704   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   705   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   706  IFX_INLINE void IfxVadc_setAutoBackgroundScan(Ifx_VADC *vadc, boolean autoBackgroundScanEnable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   707  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   708  /** \brief configures a background scan; can also stop autoscan if all channels are 0
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   709   * \param vadc pointer to the VADC module registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   710   * \param groupId group index
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   711   * \param channels specifies the channels which should be enabled/disabled
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   712   * \param mask specifies the channels which should be modified
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   713   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   714   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   715   * Background scan can be enabled/disabled for the given channels which are selected with the mask
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   716   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   717   * \code
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   718   * Ifx_VADC* vadc = &MODULE_VADC; // module pointer
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   719   * IfxVadc_GroupId groupId = IfxVadc_GroupId0; // for group 0
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   720   * uint32 channels = (1 << 5) | (1 << 2); // enable channel #5 and #2
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   721   * uint32 mask = (1 << 7) | (1 << 5) | (1 << 2); // modify the selection for channel #7, #5 and #2; channel #7 will be disabled
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   722   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   723   * //confiure wait for read mode for global result register
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   724   * IfxVadc_configureWaitForReadModeForGlobalResultRegister(vadc, TRUE);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   725   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   726   * // configure background scan
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   727   * IfxVadc_setBackgroundScan(vadc, groupId, channels, mask);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   728   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   729   * // enable auto scan
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   730   * IfxVadc_setAutoBackgroundScan(vadc, TRUE);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   731   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   732   * // start the background scan
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   733   * IfxVadc_startBackgroundScan(vadc);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   734   * \endcode
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   735   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   736   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   737  IFX_INLINE void IfxVadc_setBackgroundScan(Ifx_VADC *vadc, IfxVadc_GroupId groupId, uint32 channels, uint32 mask);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   738  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   739  /** \brief Sets the background scan slot gating configurations.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   740   * \param vadc pointer to the base of VADC registers.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   741   * \param gatingSource gate input for group.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   742   * \param gatingMode gating mode. High level, Low Level  or Gating disabled.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   743   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   744   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   745  IFX_INLINE void IfxVadc_setBackgroundScanSlotGatingConfig(Ifx_VADC *vadc, IfxVadc_GatingSource gatingSource, IfxVadc_GatingMode gatingMode);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   746  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   747  /** \brief Sets the background scan exteranal trigger operating configurations.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   748   * \param vadc pointer to the base of VADC registers.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   749   * \param triggerMode trigger mode. Rising, falling any edge leads to an trigger event.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   750   * \param triggerSource trigger input for group.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   751   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   752   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   753  IFX_INLINE void IfxVadc_setBackgroundScanSlotTriggerConfig(Ifx_VADC *vadc, IfxVadc_TriggerMode triggerMode, IfxVadc_TriggerSource triggerSource);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   754  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   755  /** \brief Starts a background scan
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   756   * \param vadc pointer to the VADC module
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   757   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   758   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   759   * \see IfxVadc_setBackgroundScan
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   760   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   761   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   762  IFX_INLINE void IfxVadc_startBackgroundScan(Ifx_VADC *vadc);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   763  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   764  /** \brief Get debug conversion result
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   765   * \param group pointer to the VADC group
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   766   * \param resultIdx result register index
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   767   * \return Debug conversion result.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   768   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   769  IFX_INLINE Ifx_VADC_RESD IfxVadc_getDebugResult(Ifx_VADC_G *group, uint32 resultIdx);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   770  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   771  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   772  /*-------------------------Global Function Prototypes-------------------------*/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   773  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   774  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   775  /** \brief Gives the background scan status for a group
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   776   * \param vadc pointer to the VADC module
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   777   * \return IfxVadc_Status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   778   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   779  IFX_EXTERN IfxVadc_Status IfxVadc_getBackgroundScanStatus(Ifx_VADC *vadc);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   780  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   781  /** \brief Get conversion result (Function does not care about the alignment)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   782   * value = raw * gain + offset.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   783   * \param vadc VADC module pointer
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   784   * \param group pointer to the VADC group
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   785   * \param channel channel Id
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   786   * \param sourceType type of request source
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   787   * \return scaled Conversion result
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   788   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   789   * \code
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   790   * Ifx_VADC vadc;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   791   * vadc.vadc = &MODULE_VADC;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   792   * Ifx_VADC_G* group = &MODULE_VADC.G[0]; // for group 0
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   793   * uint32 channels = (1 << 5) | (1 << 2); // enable channel #5 and #2
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   794   * uint32 mask = (1 << 7) | (1 << 5) | (1 << 2); // modify the selection for channel #7, #5 and #2; channel #7 will be disabled
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   795   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   796   * //confiure wait for read mode for global result register
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   797   * IfxVadc_configureWaitForReadMode(group,IfxVadc_ChannelResult0, TRUE);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   798   * IfxVadc_configureWaitForReadMode(group,IfxVadc_ChannelResult1, TRUE);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   799   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   800   * // configure scan
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   801   * IfxVadc_setScan(group, channels, mask);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   802   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   803   * // start the scan
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   804   * IfxVadc_startScan(group);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   805   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   806   * // wait for conversion to finish
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   807   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   808   * // fetch the result of conversion for channel 2 of group 0
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   809   * Ifx_VADC_RESresult2;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   810   * result = IfxVadc_getResultBasedOnRequestSource(&vadc, group, IfxVadc_ChannelId2, IfxVadc_RequestSource_scan);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   811   * Ifx_VADC_RESresult5;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   812   * result = IfxVadc_getResultBasedOnRequestSource(&vadc, group, IfxVadc_ChannelId5, IfxVadc_RequestSource_scan);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   813   * \endcode
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   814   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   815   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   816  IFX_EXTERN Ifx_VADC_RES IfxVadc_getResultBasedOnRequestSource(Ifx_VADC *vadc, Ifx_VADC_G *group, IfxVadc_ChannelId channel, IfxVadc_RequestSource sourceType);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   817  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   818  /** \} */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   819  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   820  /** \addtogroup IfxLld_Vadc_Std_ChannelScan
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   821   * \{ */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   822  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   823  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   824  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   825  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   826  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   827  /** \brief Disables the scan slot external trigger.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   828   * \param vadcG pointer to VADC group registers.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   829   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   830   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   831  IFX_INLINE void IfxVadc_disableScanSlotExternalTrigger(Ifx_VADC_G *vadcG);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   832  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   833  /** \brief Enables the scan slot external trigger.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   834   * \param vadcG pointer to VADC group registers.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   835   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   836   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   837  IFX_INLINE void IfxVadc_enableScanSlotExternalTrigger(Ifx_VADC_G *vadcG);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   838  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   839  /** \brief Gets the request scan slot gating mode.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   840   * \param vadcG pointer to VADC group registers.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   841   * \return requested scan slot gating mode.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   842   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   843  IFX_INLINE IfxVadc_GatingMode IfxVadc_getScanSlotGatingMode(Ifx_VADC_G *vadcG);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   844  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   845  /** \brief Gets the request scan slot gating input.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   846   * \param vadcG pointer to VADC group registers.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   847   * \return request scan slot gating input.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   848   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   849  IFX_INLINE IfxVadc_GatingSource IfxVadc_getScanSlotGatingSource(Ifx_VADC_G *vadcG);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   850  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   851  /** \brief Gets the request scan slot priority.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   852   * \param vadcG pointer to VADC group registers.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   853   * \return request scan slot priority.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   854   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   855  IFX_INLINE IfxVadc_RequestSlotPriority IfxVadc_getScanSlotPriority(Ifx_VADC_G *vadcG);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   856  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   857  /** \brief Gets the request scan slot start mode.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   858   * \param vadcG pointer to VADC group registers.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   859   * \return request scan slot start mode.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   860   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   861  IFX_INLINE IfxVadc_RequestSlotStartMode IfxVadc_getScanSlotStartMode(Ifx_VADC_G *vadcG);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   862  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   863  /** \brief Gets the requested scan slot trigger input.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   864   * \param vadcG pointer to VADC group registers.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   865   * \return requested scan slot trigger input.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   866   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   867  IFX_INLINE IfxVadc_TriggerSource IfxVadc_getScanSlotTriggerInput(Ifx_VADC_G *vadcG);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   868  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   869  /** \brief Gets the requested scan slot trigger mode.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   870   * \param vadcG pointer to VADC group registers.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   871   * \return requested scan slot trigger mode.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   872   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   873  IFX_INLINE IfxVadc_TriggerMode IfxVadc_getScanSlotTriggerMode(Ifx_VADC_G *vadcG);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   874  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   875  /** \brief Gets the auto scan enable status.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   876   * \param vadcG pointer to VADC group registers.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   877   * \return TRUE if auto scan enabled otherwise FALSE.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   878   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   879  IFX_INLINE boolean IfxVadc_isAutoScanEnabled(Ifx_VADC_G *vadcG);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   880  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   881  /** \brief Returns the scan slot requested status.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   882   * \param vadcG pointer to VADC group registers.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   883   * \return TRUE if scan slot request enabled otherwise FALSE.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   884   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   885  IFX_INLINE boolean IfxVadc_isRequestScanSlotEnabled(Ifx_VADC_G *vadcG);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   886  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   887  /** \brief Enables/Disables continuous auto scan
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   888   * \param vadcG pointer to VADC group registers.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   889   * \param autoscanEnable whether autoscan is enabled or not.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   890   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   891   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   892  IFX_INLINE void IfxVadc_setAutoScan(Ifx_VADC_G *vadcG, boolean autoscanEnable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   893  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   894  /** \brief Sets the scan slot gating configuration.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   895   * \param vadcG pointer to VADC group registers.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   896   * \param gatingSource gate input for group.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   897   * \param gatingMode gating mode. High level, Low Level  or Gating disabled.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   898   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   899   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   900  IFX_INLINE void IfxVadc_setScanSlotGatingConfig(Ifx_VADC_G *vadcG, IfxVadc_GatingSource gatingSource, IfxVadc_GatingMode gatingMode);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   901  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   902  /** \brief Sets the scan slot trigger operating configurations.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   903   * \param vadcG pointer to VADC group registers.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   904   * \param triggerMode trigger mode. Rising, falling any edge leads to an trigger event.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   905   * \param triggerSource trigger input for group.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   906   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   907   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   908  IFX_INLINE void IfxVadc_setScanSlotTriggerConfig(Ifx_VADC_G *vadcG, IfxVadc_TriggerMode triggerMode, IfxVadc_TriggerSource triggerSource);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   909  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   910  /** \brief Starts an autoscan on the specified group
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   911   * \param group pointer to the VADC group
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   912   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   913   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   914   * See \ref IfxVadc_setScan
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   915   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   916   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   917  IFX_INLINE void IfxVadc_startScan(Ifx_VADC_G *group);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   918  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   919  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   920  /*-------------------------Global Function Prototypes-------------------------*/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   921  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   922  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   923  /** \brief Gives the scan status for a group
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   924   * \param group pointer to the VADC group
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   925   * \return IfxVadc_Status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   926   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   927  IFX_EXTERN IfxVadc_Status IfxVadc_getScanStatus(Ifx_VADC_G *group);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   928  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   929  /** \brief Configures an (auto-)scan
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   930   * \param group pointer to the VADC group
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   931   * \param channels specifies the channels which should be enabled/disabled
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   932   * \param mask specifies the channels which should be modified
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   933   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   934   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   935   * (Auto-)Scan can be enabled/disabled for the given channels which are selected with the mask
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   936   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   937   * \code
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   938   * Ifx_VADC_G* group = &MODULE_VADC.G[0]; // for group 0
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   939   * uint32 channels = (1 << 5) | (1 << 2); // enable channel #5 and #2
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   940   * uint32 mask = (1 << 7) | (1 << 5) | (1 << 2); // modify the selection for channel #7, #5 and #2; channel #7 will be disabled
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   941   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   942   * // configure scan
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   943   * IfxVadc_setScan(group, channels, mask);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   944   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   945   * // enable Auto-Scan
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   946   * IfxVadc_setAutoScan(group, TRUE);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   947   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   948   * // start the scan
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   949   * IfxVadc_startScan(group);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   950   * \endcode
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   951   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   952   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   953  IFX_EXTERN void IfxVadc_setScan(Ifx_VADC_G *group, uint32 channels, uint32 mask);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   954  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   955  /** \} */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   956  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   957  /** \addtogroup IfxLld_Vadc_Std_QueueRequest
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   958   * \{ */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   959  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   960  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   961  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   962  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   963  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   964  /** \brief Add an entry to the queue of a group for the specified channel with the following options set:
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   965   * refill incase of aborted conversion
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   966   * source interrupt enable/disable
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   967   * external trigger control of the aborted conversion
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   968   * \param group pointer to the VADC group
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   969   * \param channel specifies channel Id
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   970   * \param options specifies the refill, source interrupt enable/disable and external trigger control selection
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   971   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   972   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   973   * \code
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   974   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   975   * Ifx_VADC_G* group = &MODULE_VADC.G[0]; // for group 0
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   976   * IfxVadc_ChannelId channel = 1; // for channel 1
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   977   * // Add channel 1 to queue of group 0 with the refill turned on
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   978   * IfxVadc_addToQueue(qroup, channel, (1<<IFX_VADC_G_QBUR0_RF_OFF));
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   979   * \endcode
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   980   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   981   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   982  IFX_INLINE void IfxVadc_addToQueue(Ifx_VADC_G *group, IfxVadc_ChannelId channel, uint32 options);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   983  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   984  /** \brief Clears all the queue entries including backup stage.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   985   * \param vadcG pointer to VADC group registers.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   986   * \param flushQueue Whether queue is cleared or not.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   987   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   988   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   989  IFX_INLINE void IfxVadc_clearQueue(Ifx_VADC_G *vadcG, boolean flushQueue);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   990  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   991  /** \brief Disables the external trigger.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   992   * \param vadcG pointer to VADC group registers.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   993   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   994   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   995  IFX_INLINE void IfxVadc_disableQueueSlotExternalTrigger(Ifx_VADC_G *vadcG);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   996  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   997  /** \brief Enables the external trigger.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   998   * \param vadcG pointer to VADC group registers.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   999   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1000   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1001  IFX_INLINE void IfxVadc_enableQueueSlotExternalTrigger(Ifx_VADC_G *vadcG);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1002  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1003  /** \brief Gets the requested queue slot gating mode.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1004   * \param vadcG pointer to VADC group registers.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1005   * \return requested queue slot gating mode.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1006   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1007  IFX_INLINE IfxVadc_GatingMode IfxVadc_getQueueSlotGatingMode(Ifx_VADC_G *vadcG);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1008  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1009  /** \brief Gets the requested queue slot gating input.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1010   * \param vadcG pointer to VADC group registers.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1011   * \return requested queue slot gating input.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1012   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1013  IFX_INLINE IfxVadc_GatingSource IfxVadc_getQueueSlotGatingSource(Ifx_VADC_G *vadcG);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1014  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1015  /** \brief Gets the request queue slot priority.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1016   * \param vadcG pointer to VADC group registers.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1017   * \return requested queue slot priority.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1018   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1019  IFX_INLINE IfxVadc_RequestSlotPriority IfxVadc_getQueueSlotPriority(Ifx_VADC_G *vadcG);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1020  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1021  /** \brief Gets the requested queue slot start mode.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1022   * \param vadcG pointer to VADC group registers.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1023   * \return requested queue slot start mode.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1024   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1025  IFX_INLINE IfxVadc_RequestSlotStartMode IfxVadc_getQueueSlotStartMode(Ifx_VADC_G *vadcG);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1026  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1027  /** \brief Gets the requested queue slot trigger input.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1028   * \param vadcG pointer to VADC group registers.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1029   * \return requested queue slot trigger input.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1030   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1031  IFX_INLINE IfxVadc_TriggerSource IfxVadc_getQueueSlotTriggerInput(Ifx_VADC_G *vadcG);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1032  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1033  /** \brief Gets the requested queue slot trigger mode.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1034   * \param vadcG pointer to VADC group registers.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1035   * \return requested queue slot trigger mode.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1036   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1037  IFX_INLINE IfxVadc_TriggerMode IfxVadc_getQueueSlotTriggerMode(Ifx_VADC_G *vadcG);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1038  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1039  /** \brief Returns the queue slot requested status.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1040   * \param vadcG pointer to VADC group registers.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1041   * \return TRUE if queue slot request enabled otherwise FALSE.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1042   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1043  IFX_INLINE boolean IfxVadc_isRequestQueueSlotEnabled(Ifx_VADC_G *vadcG);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1044  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1045  /** \brief Sets the gating configurations.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1046   * \param vadcG pointer to VADC group registers.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1047   * \param gatingSource gate input for group.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1048   * \param gatingMode gating mode. High level, Low Level  or Gating disabled.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1049   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1050   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1051  IFX_INLINE void IfxVadc_setQueueSlotGatingConfig(Ifx_VADC_G *vadcG, IfxVadc_GatingSource gatingSource, IfxVadc_GatingMode gatingMode);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1052  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1053  /** \brief Sets the trigger operating configurations.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1054   * \param vadcG pointer to VADC group registers.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1055   * \param triggerMode trigger mode. Rising, falling any edge leads to an trigger event.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1056   * \param triggerSource trigger input for group.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1057   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1058   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1059  IFX_INLINE void IfxVadc_setQueueSlotTriggerOperatingConfig(Ifx_VADC_G *vadcG, IfxVadc_TriggerMode triggerMode, IfxVadc_TriggerSource triggerSource);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1060  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1061  /** \brief Starts a queue of a group by generating a trigger event through software
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1062   * \param group pointer to the VADC group
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1063   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1064   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1065  IFX_INLINE void IfxVadc_startQueue(Ifx_VADC_G *group);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1066  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1067  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1068  /*-------------------------Global Function Prototypes-------------------------*/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1069  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1070  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1071  /** \brief Gives the status of the Queue of a group by returning non zero value if the Queue is full
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1072   * \param group pointer to the VADC group
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1073   * \return status of the Queue
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1074   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1075   * \code
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1076   * Ifx_VADC_G* group = &MODULE_VADC.G[0]; // for group 0
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1077   * boolean queueFull = (IfxVadc_getQueueStatus(group)==IfxVadc_Status_queueFull)?TRUE:FALSE; // get Queue status for group 0
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1078   * \endcode
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1079   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1080   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1081  IFX_EXTERN IfxVadc_Status IfxVadc_getQueueStatus(Ifx_VADC_G *group);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1082  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1083  /** \} */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1084  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1085  /** \addtogroup IfxLld_Vadc_Std_IO
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1086   * \{ */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1087  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1088  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1089  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1090  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1091  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1092  /** \brief Initializes a EMUX output
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1093   * \param emux the Emux Pin which should be configured
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1094   * \param outputMode the pin output mode which should be configured
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1095   * \param padDriver the pad driver mode which should be configured
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1096   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1097   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1098  IFX_INLINE void IfxVadc_initEmuxPin(const IfxVadc_Emux_Out *emux, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1099  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1100  /** \brief Initializes a GxBFL output
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1101   * \param gxBfl the GxBFL Pin which should be configured
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1102   * \param outputMode the pin output mode which should be configured
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1103   * \param padDriver the pad driver mode which should be configured
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1104   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1105   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1106  IFX_INLINE void IfxVadc_initGxBflPin(const IfxVadc_GxBfl_Out *gxBfl, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1107  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1108  /** \} */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1109  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1110  /** \addtogroup IfxLld_Vadc_Std_Frequency
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1111   * \{ */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1112  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1113  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1114  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1115  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1116  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1117  /** \brief Calculate the time using analog frequency.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1118   * \param analogFrequency analog frequency in Hz.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1119   * \param sampleTime sample time in sec.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1120   * \return sample time in sec.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1121   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1122  IFX_INLINE uint32 IfxVadc_calculateSampleTime(float32 analogFrequency, float32 sampleTime);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1123  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1124  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1125  /*-------------------------Global Function Prototypes-------------------------*/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1126  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1127  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1128  /** \brief Returns the configured Fadci VADC analog clock frequency in Hz.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1129   * \param vadc pointer to the base of VADC registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1130   * \return Returns the configured Fadci VADC analog clock frequency in Hz.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1131   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1132  IFX_EXTERN float32 IfxVadc_getAdcAnalogFrequency(Ifx_VADC *vadc);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1133  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1134  /** \brief Returns the configured Fadcd VADC digital clock frequency in Hz.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1135   * \param vadc pointer to the base of VADC registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1136   * \return Returns the configured Fadcd VADC digital clock frequency in Hz.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1137   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1138  IFX_EXTERN float32 IfxVadc_getAdcDigitalFrequency(Ifx_VADC *vadc);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1139  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1140  /** \} */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1141  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1142  /** \addtogroup IfxLld_Vadc_Std_Group
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1143   * \{ */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1144  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1145  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1146  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1147  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1148  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1149  /** \brief Clears the all group requests.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1150   * \param vadcG pointer to VADC group registers.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1151   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1152   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1153  IFX_INLINE void IfxVadc_clearAllResultRequests(Ifx_VADC_G *vadcG);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1154  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1155  /** \brief Gets the ADC group arbitration round length.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1156   * \param vadcG pointer to VADC group registers.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1157   * \return ADC group arbitration round length.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1158   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1159  IFX_INLINE IfxVadc_ArbitrationRounds IfxVadc_getArbiterRoundLength(Ifx_VADC_G *vadcG);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1160  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1161  /** \brief Gets the channel esult service request node pointer 0.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1162   * \param vadcG pointer to VADC group registers.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1163   * \return channel result service request node pointer 0.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1164   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1165  IFX_INLINE Ifx_VADC_G_REVNP0 IfxVadc_getChannelResultServiceRequestNodePointer0(Ifx_VADC_G *vadcG);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1166  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1167  /** \brief Gets the channel esult service request node pointer 1.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1168   * \param vadcG pointer to VADC group registers.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1169   * \return channel result service request node pointer 1.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1170   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1171  IFX_INLINE Ifx_VADC_G_REVNP1 IfxVadc_getChannelResultServiceRequestNodePointer1(Ifx_VADC_G *vadcG);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1172  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1173  /** \brief Gets the channel service request node pointer.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1174   * \param vadcG pointer to VADC group registers.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1175   * \return channel service request node pointer.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1176   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1177  IFX_INLINE Ifx_VADC_G_CEVNP0 IfxVadc_getChannelServiceRequestNodePointer0(Ifx_VADC_G *vadcG);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1178  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1179  /** \brief Gets the configured master index.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1180   * \param vadcG pointer to VADC group registers.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1181   * \return configured master kernel index.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1182   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1183  IFX_INLINE uint8 IfxVadc_getMasterIndex(Ifx_VADC_G *vadcG);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1184  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1185  /** \brief Resets the ADC group.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1186   * \param vadcG pointer to VADC group registers.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1187   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1188   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1189  IFX_INLINE void IfxVadc_resetGroup(Ifx_VADC_G *vadcG);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1190  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1191  /** \brief Sets analog converter group number.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1192   * \param vadcG pointer to VADC group registers.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1193   * \param analogConverterMode group analog converter mode.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1194   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1195   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1196  IFX_INLINE void IfxVadc_setAnalogConvertControl(Ifx_VADC_G *vadcG, IfxVadc_AnalogConverterMode analogConverterMode);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1197  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1198  /** \brief Sets the arbiter round length.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1199   * \param vadcG pointer to VADC group registers.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1200   * \param arbiterRoundLength arbiter round length.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1201   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1202   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1203  IFX_INLINE void IfxVadc_setArbitrationRoundLength(Ifx_VADC_G *vadcG, IfxVadc_ArbitrationRounds arbiterRoundLength);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1204  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1205  /** \brief Sets the ADC input class channel resolution.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1206   * \param vadcG pointer to VADC group registers.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1207   * \param inputClassNum input class number.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1208   * \param resolution ADC input class channel resolution.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1209   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1210   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1211  IFX_INLINE void IfxVadc_setGroupResolution(Ifx_VADC_G *vadcG, uint8 inputClassNum, IfxVadc_ChannelResolution resolution);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1212  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1213  /** \brief Sets the ADC input class sample time.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1214   * \param vadcG pointer to VADC group registers.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1215   * \param inputClassNum input class number.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1216   * \param analogFrequency ADC analog frequency in Hz.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1217   * \param sampleTime request sample time in sec for input class.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1218   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1219   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1220  IFX_INLINE void IfxVadc_setGroupSampleTime(Ifx_VADC_G *vadcG, uint8 inputClassNum, float32 analogFrequency, float32 sampleTime);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1221  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1222  /** \brief Sets the master index.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1223   * \param vadcG pointer to VADC group registers.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1224   * \param masterIndex master index.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1225   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1226   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1227  IFX_INLINE void IfxVadc_setMasterIndex(Ifx_VADC_G *vadcG, uint8 masterIndex);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1228  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1229  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1230  /*-------------------------Global Function Prototypes-------------------------*/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1231  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1232  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1233  /** \brief Sets the Arbiter slot configurations.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1234   * \param vadcG pointer to VADC group registers.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1235   * \param slotEnable enable/disable of slot.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1236   * \param prio channel request priority.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1237   * \param mode Channel Slot start mode.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1238   * \param slot channel slot Request source.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1239   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1240   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1241  IFX_EXTERN void IfxVadc_setArbiterPriority(Ifx_VADC_G *vadcG, boolean slotEnable, IfxVadc_RequestSlotPriority prio, IfxVadc_RequestSlotStartMode mode, IfxVadc_RequestSource slot);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1242  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1243  /** \} */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1244  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1245  /** \addtogroup IfxLld_Vadc_Std_Module
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1246   * \{ */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1247  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1248  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1249  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1250  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1251  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1252  /** \brief Disable VADC Module
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1253   * \param vadc Pointer to VADC Module
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1254   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1255   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1256  IFX_INLINE void IfxVadc_disableModule(Ifx_VADC *vadc);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1257  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1258  /** \brief Enable VADC kernel.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1259   * \param vadc pointer to the base of VADC registers.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1260   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1261   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1262  IFX_INLINE void IfxVadc_enableModule(Ifx_VADC *vadc);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1263  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1264  /** \brief gets ADC Calibration Flag CAL status.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1265   * \param vadc pointer to VADC group registers.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1266   * \param adcCalGroupNum ADC CAL group number.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1267   * \return CAL group status.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1268   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1269  IFX_INLINE uint8 IfxVadc_getAdcCalibrationActiveState(Ifx_VADC *vadc, uint8 adcCalGroupNum);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1270  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1271  /** \brief Gets the global control configuration value.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1272   * \param vadc pointer to the base of VADC registers.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1273   * \return global control configuration value.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1274   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1275  IFX_INLINE Ifx_VADC_GLOBCFG IfxVadc_getGlobalConfigValue(Ifx_VADC *vadc);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1276  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1277  /** \brief get SUCAL bit field status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1278   * \param vadc Pointer to VADC Module
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1279   * \return Indicate the start-up calibration phase
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1280   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1281  IFX_INLINE boolean IfxVadc_getStartupCalibration(Ifx_VADC *vadc);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1282  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1283  /** \brief initiates the calibration pulse phase.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1284   * \param vadc pointer to the base of VADC registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1285   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1286   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1287  IFX_INLINE void IfxVadc_initiateStartupCalibration(Ifx_VADC *vadc);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1288  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1289  /** \brief Sets the channel conversion mode.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1290   * \param vadc pointer to VADC module registers.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1291   * \param inputClassNum global input class  number.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1292   * \param resolution ADC channel resolution.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1293   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1294   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1295  IFX_INLINE void IfxVadc_setGlobalResolution(Ifx_VADC *vadc, uint8 inputClassNum, IfxVadc_ChannelResolution resolution);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1296  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1297  /** \brief Sets the sample time of ADC global class.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1298   * \param vadc pointer to VADC module registers.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1299   * \param inputClassNum global input class  number.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1300   * \param analogFrequency ADC analog frequency in Hz.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1301   * \param sampleTime the requested sample time for input class in sec.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1302   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1303   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1304  IFX_INLINE void IfxVadc_setGlobalSampleTime(Ifx_VADC *vadc, uint8 inputClassNum, float32 analogFrequency, float32 sampleTime);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1305  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1306  /** \brief Sets the sensitivity of the module to sleep signal
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1307   * \param vadc pointer to VADC registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1308   * \param mode mode selection (enable/disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1309   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1310   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1311  IFX_INLINE void IfxVadc_setSleepMode(Ifx_VADC *vadc, IfxVadc_SleepMode mode);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1312  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1313  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1314  /*-------------------------Global Function Prototypes-------------------------*/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1315  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1316  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1317  /** \brief Disable write access to the VADC config/control registers.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1318   * \param vadc pointer to the base of VADC registers.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1319   * \param protectionSet Index of the bit in the ACCPROTx {x=0/1} for which write access is to be disabled.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1320   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1321   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1322  IFX_EXTERN void IfxVadc_disableAccess(Ifx_VADC *vadc, IfxVadc_Protection protectionSet);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1323  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1324  /** \brief Disables the post calibration.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1325   * \param vadc pointer to the base of VADC registers.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1326   * \param group Index of the group.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1327   * \param disable disable or not.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1328   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1329   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1330  IFX_EXTERN void IfxVadc_disablePostCalibration(Ifx_VADC *vadc, IfxVadc_GroupId group, boolean disable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1331  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1332  /** \brief Enable write access to the VADC config/control registers.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1333   * \param vadc pointer to the base of VADC registers.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1334   * \param protectionSet Index of the bit in the ACCPROTx {x=0/1} for which write access is to be enabled.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1335   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1336   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1337  IFX_EXTERN void IfxVadc_enableAccess(Ifx_VADC *vadc, IfxVadc_Protection protectionSet);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1338  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1339  /** \brief Enables the CCU6 based ADC group synchronisation as workaround for Erratum ADC_TC.068
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1340   * \param vadc pointer to the base of VADC registers.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1341   * \param ccu6Num selects CCU60 or CCU61
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1342   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1343   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1344  IFX_EXTERN void IfxVadc_enableGroupSync(Ifx_VADC *vadc, uint32 ccu6Num);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1345  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1346  /** \brief Module Frequency in Hz
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1347   * \return Module Frequency in Hz.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1348   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1349  IFX_EXTERN float32 IfxVadc_getAdcModuleFrequency(void);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1350  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1351  /** \brief Gives the SRC source address.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1352   * \param group Index of the group
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1353   * \param index SRC number
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1354   * \return SRC source address
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1355   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1356  IFX_EXTERN volatile Ifx_SRC_SRCR *IfxVadc_getSrcAddress(IfxVadc_GroupId group, IfxVadc_SrcNr index);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1357  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1358  /** \brief Initialises ADC arbiter clock.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1359   * \param vadc pointer to the base of VADC registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1360   * \param arbiterClockDivider ADC arbiter clock divider.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1361   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1362   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1363  IFX_EXTERN void IfxVadc_initialiseAdcArbiterClock(Ifx_VADC *vadc, uint32 arbiterClockDivider);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1364  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1365  /** \brief Initialises the ADC Converter clock.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1366   * \param vadc pointer to the base of VADC registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1367   * \param converterClockDivider ADC converter clock divider.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1368   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1369   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1370  IFX_EXTERN void IfxVadc_initialiseAdcConverterClock(Ifx_VADC *vadc, uint32 converterClockDivider);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1371  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1372  /** \brief Configure the FadcD vadc digital clock.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1373   * \param vadc pointer to the base of VADC registers.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1374   * \param fAdcD ADC digital clock frequency in Hz.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1375   * \return calculated ADC digital clock frequency in Hz.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1376   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1377  IFX_EXTERN uint32 IfxVadc_initializeFAdcD(Ifx_VADC *vadc, uint32 fAdcD);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1378  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1379  /** \brief Configure the ADC analog clock.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1380   * \param vadc pointer to the base of VADC registers.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1381   * \param fAdcI ADC analog clock clock frequency in Hz. Range = [5000000, 10000000].
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1382   * \return ADC analog clock frequency in Hz.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1383   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1384  IFX_EXTERN uint32 IfxVadc_initializeFAdcI(Ifx_VADC *vadc, uint32 fAdcI);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1385  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1386  /** \brief Return the post calibration status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1387   * \param vadc Pointer to VADC module
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1388   * \param group specifies Group ID
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1389   * \return TRUE if the post calibration is enabled for the group else false
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1390   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1391  IFX_EXTERN boolean IfxVadc_isPostCalibration(Ifx_VADC *vadc, IfxVadc_GroupId group);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1392  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1393  /** \brief Resets the kernel.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1394   * \param vadc pointer to the base of VADC registers.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1395   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1396   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1397  IFX_EXTERN void IfxVadc_resetKernel(Ifx_VADC *vadc);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1398  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1399  /** \brief Select Low Power Supply Voltage
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1400   * \param vadc Pointer to Module space
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1401   * \param supplyVoltage Select Supply Voltage
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1402   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1403   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1404  IFX_EXTERN void IfxVadc_selectPowerSupplyVoltage(Ifx_VADC *vadc, IfxVadc_LowSupplyVoltageSelect supplyVoltage);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1405  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1406  /** \brief Starts ADC calibration and wait for the end of the calibration process.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1407   * \param vadc pointer to the base of VADC registers.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1408   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1409   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1410  IFX_EXTERN void IfxVadc_startupCalibration(Ifx_VADC *vadc);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1411  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1412  /** \} */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1413  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1414  /** \addtogroup IfxLld_Vadc_Std_Channel
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1415   * \{ */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1416  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1417  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1418  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1419  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1420  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1421  /** \brief Clears the channel request.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1422   * \param vadcG pointer to VADC group registers.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1423   * \param channelId channel id whose request to be cleared.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1424   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1425   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1426  IFX_INLINE void IfxVadc_clearChannelRequest(Ifx_VADC_G *vadcG, IfxVadc_ChannelId channelId);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1427  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1428  /** \brief Enables the FIFO mode.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1429   * \param vadcG pointer to VADC group registers.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1430   * \param resultRegister channel result register.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1431   * \param fifoMode FIFO mode .
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1432   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1433   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1434  IFX_INLINE void IfxVadc_enableFifoMode(Ifx_VADC_G *vadcG, IfxVadc_ChannelResult resultRegister, IfxVadc_FifoMode fifoMode);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1435  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1436  /**
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1437   * \param vadcG pointer to VADC group registers.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1438   * \param resultRegister channel result register.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1439   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1440   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1441  IFX_INLINE void IfxVadc_enableServiceRequest(Ifx_VADC_G *vadcG, IfxVadc_ChannelResult resultRegister);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1442  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1443  /** \brief Gets the group's assigned channels.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1444   * \param vadcG pointer to VADC group registers.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1445   * \return group's assigned channels.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1446   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1447  IFX_INLINE Ifx_VADC_G_CHASS IfxVadc_getAssignedChannels(Ifx_VADC_G *vadcG);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1448  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1449  /** \brief Gets the current ADC channel control configurations.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1450   * \param vadcG pointer to VADC group registers.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1451   * \param channelIndex ADC channel number.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1452   * \return current ADC channel control configuration.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1453   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1454  IFX_INLINE Ifx_VADC_CHCTR IfxVadc_getChannelControlConfig(Ifx_VADC_G *vadcG, IfxVadc_ChannelId channelIndex);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1455  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1456  /** \brief Gets the channel input class
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1457   * \param vadcG pointer to VADC Group register space
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1458   * \param channelIndex specifies channel ID
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1459   * \return Input class
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1460   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1461  IFX_INLINE IfxVadc_InputClasses IfxVadc_getChannelInputClass(Ifx_VADC_G *vadcG, IfxVadc_ChannelId channelIndex);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1462  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1463  /** \brief Gets the ADC input class channel resolution.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1464   * \param vadcG pointer to VADC group registers.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1465   * \param inputClassNum ADC input class number.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1466   * \return ADC input class channel resolution.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1467   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1468  IFX_INLINE IfxVadc_ChannelResolution IfxVadc_getGroupResolution(Ifx_VADC_G *vadcG, uint8 inputClassNum);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1469  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1470  /** \brief Gets the ADC input class channel sample time.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1471   * \param vadcG pointer to VADC group registers.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1472   * \param inputClassNum ADC input class number.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1473   * \param analogFrequency ADC module analog frequency in Hz.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1474   * \return ADC input class channel sample time in sec.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1475   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1476  IFX_INLINE float32 IfxVadc_getGroupSampleTime(Ifx_VADC_G *vadcG, uint8 inputClassNum, float32 analogFrequency);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1477  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1478  /** \brief Sets the channels with low priority as background channel.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1479   * \param vadcG pointer to VADC group registers.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1480   * \param channelIndex group channel id.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1481   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1482   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1483  IFX_INLINE void IfxVadc_setBackgroundPriorityChannel(Ifx_VADC_G *vadcG, IfxVadc_ChannelId channelIndex);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1484  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1485  /** \brief Sets the target for result background source.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1486   * \param vadcG pointer to VADC group registers.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1487   * \param channelIndex group channel id.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1488   * \param globalResultUsage whether storage in global result register.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1489   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1490   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1491  IFX_INLINE void IfxVadc_setBackgroundResultTarget(Ifx_VADC_G *vadcG, IfxVadc_ChannelId channelIndex, boolean globalResultUsage);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1492  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1493  /** \brief Selects boundary extension.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1494   * \param vadcG pointer to VADC group registers.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1495   * \param channelIndex group channel id.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1496   * \param boundaryMode boundary extension mode.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1497   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1498   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1499  IFX_INLINE void IfxVadc_setBoundaryMode(Ifx_VADC_G *vadcG, IfxVadc_ChannelId channelIndex, IfxVadc_BoundaryExtension boundaryMode);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1500  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1501  /** \brief Sets the channel event service request line.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1502   * \param vadcG pointer to VADC group registers.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1503   * \param channelSrcNr channel event Service Node.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1504   * \param channel channel number.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1505   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1506   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1507  IFX_INLINE void IfxVadc_setChannelEventNodePointer0(Ifx_VADC_G *vadcG, IfxVadc_SrcNr channelSrcNr, IfxVadc_ChannelId channel);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1508  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1509  /** \brief Sets the channel input class.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1510   * \param vadcG pointer to VADC group registers.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1511   * \param channelIndex group channel id.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1512   * \param inputClass group input class.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1513   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1514   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1515  IFX_INLINE void IfxVadc_setChannelInputClass(Ifx_VADC_G *vadcG, IfxVadc_ChannelId channelIndex, IfxVadc_InputClasses inputClass);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1516  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1517  /** \brief Sets the channel event mode.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1518   * \param vadcG pointer to VADC group registers.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1519   * \param channelIndex group channel id.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1520   * \param limitCheck channel event mode.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1521   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1522   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1523  IFX_INLINE void IfxVadc_setChannelLimitCheckMode(Ifx_VADC_G *vadcG, IfxVadc_ChannelId channelIndex, IfxVadc_LimitCheck limitCheck);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1524  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1525  /** \brief Sets channel as priority channel with in the group.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1526   * \param vadcG pointer to VADC group registers.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1527   * \param channelIndex group channel id.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1528   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1529   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1530  IFX_INLINE void IfxVadc_setGroupPriorityChannel(Ifx_VADC_G *vadcG, IfxVadc_ChannelId channelIndex);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1531  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1532  /** \brief Sets group's lower boundary.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1533   * \param vadcG pointer to VADC group registers.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1534   * \param channelIndex group channel id.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1535   * \param lowerBoundary group lower boundary.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1536   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1537   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1538  IFX_INLINE void IfxVadc_setLowerBoundary(Ifx_VADC_G *vadcG, IfxVadc_ChannelId channelIndex, IfxVadc_BoundarySelection lowerBoundary);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1539  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1540  /** \brief Selects the refernce input.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1541   * \param vadcG pointer to VADC group registers.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1542   * \param channelIndex group channel id.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1543   * \param reference reference input.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1544   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1545   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1546  IFX_INLINE void IfxVadc_setReferenceInput(Ifx_VADC_G *vadcG, IfxVadc_ChannelId channelIndex, IfxVadc_ChannelReference reference);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1547  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1548  /** \brief Sets result event node pointer 0.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1549   * \param vadcG pointer to VADC group registers.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1550   * \param resultSrcNr channel result event service node.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1551   * \param resultRegister channel result register.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1552   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1553   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1554  IFX_INLINE void IfxVadc_setResultNodeEventPointer0(Ifx_VADC_G *vadcG, IfxVadc_SrcNr resultSrcNr, IfxVadc_ChannelResult resultRegister);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1555  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1556  /** \brief Sets result event node pointer 1.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1557   * \param vadcG pointer to VADC group registers.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1558   * \param resultSrcNr channel result event service node.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1559   * \param resultRegister channel result register.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1560   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1561   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1562  IFX_INLINE void IfxVadc_setResultNodeEventPointer1(Ifx_VADC_G *vadcG, IfxVadc_SrcNr resultSrcNr, IfxVadc_ChannelResult resultRegister);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1563  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1564  /** \brief Sets result store position.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1565   * \param vadcG pointer to VADC group registers.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1566   * \param channelIndex group channel id.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1567   * \param rightAlignedStorage result store position.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1568   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1569   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1570  IFX_INLINE void IfxVadc_setResultPosition(Ifx_VADC_G *vadcG, IfxVadc_ChannelId channelIndex, boolean rightAlignedStorage);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1571  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1572  /** \brief Sets channel synchronization request.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1573   * \param vadcG pointer to VADC group registers.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1574   * \param channelIndex group channel id.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1575   * \param synchonize whether channel synchronize or stand alone operation.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1576   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1577   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1578  IFX_INLINE void IfxVadc_setSyncRequest(Ifx_VADC_G *vadcG, IfxVadc_ChannelId channelIndex, boolean synchonize);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1579  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1580  /** \brief Sets group's upper boundary.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1581   * \param vadcG pointer to VADC group registers.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1582   * \param channelIndex group channel id.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1583   * \param upperBoundary group upper boundary.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1584   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1585   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1586  IFX_INLINE void IfxVadc_setUpperBoundary(Ifx_VADC_G *vadcG, IfxVadc_ChannelId channelIndex, IfxVadc_BoundarySelection upperBoundary);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1587  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1588  /** \brief Sets the group result register.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1589   * \param vadcG pointer to VADC group registers.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1590   * \param channelIndex group channel id.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1591   * \param resultRegister result register for group result storage.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1592   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1593   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1594  IFX_INLINE void IfxVadc_storeGroupResult(Ifx_VADC_G *vadcG, IfxVadc_ChannelId channelIndex, IfxVadc_ChannelResult resultRegister);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1595  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1596  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1597  /*-------------------------Global Function Prototypes-------------------------*/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1598  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1599  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1600  /** \brief get channel conversion timing
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1601   * \param vadc Pointer to VADC module
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1602   * \param group specifies the Group
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1603   * \param inputClass Input class used
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1604   * \param analogFrequency ADC module analog frequency fadci in Hz.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1605   * \param moduleFrequency ADC module frequency fvadc in Hz.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1606   * \param conversionMode specifies the conversion mode (Standard conversion mode)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1607   * \return Channel conversion Time in sec
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1608   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1609  IFX_EXTERN float32 IfxVadc_getChannelConversionTime(Ifx_VADC *vadc, IfxVadc_GroupId group, IfxVadc_InputClasses inputClass, float32 analogFrequency, float32 moduleFrequency, IfxVadc_ConversionType conversionMode);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1610  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1611  /** \} */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1612  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1613  /** \addtogroup IfxLld_Vadc_Std_Emux
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1614   * \{ */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1615  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1616  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1617  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1618  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1619  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1620  /** \brief get global input class resolution
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1621   * \param vadc Pointer to VADC Module space
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1622   * \param inputClassNum global input class number
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1623   * \return External channel resolution for global input class
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1624   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1625  IFX_INLINE IfxVadc_ChannelResolution IfxVadc_getEmuxGlobalResolution(Ifx_VADC *vadc, uint8 inputClassNum);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1626  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1627  /** \brief Get the sample time of ADC global class for external channel.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1628   * \param vadc pointer to VADC Module space
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1629   * \param inputClassNum Adc input class number
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1630   * \param analogFrequency ADC module analog frequency in Hz.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1631   * \return ADC input class external channel sample time in sec.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1632   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1633  IFX_INLINE float32 IfxVadc_getEmuxGlobalSampleTime(Ifx_VADC *vadc, uint8 inputClassNum, float32 analogFrequency);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1634  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1635  /** \brief get the external channel resolution
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1636   * \param vadcG Pointer to VADC group register space
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1637   * \param inputClassNum Adc input class number
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1638   * \return Adc input class External channel resolution
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1639   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1640  IFX_INLINE IfxVadc_ChannelResolution IfxVadc_getEmuxGroupResolution(Ifx_VADC_G *vadcG, uint8 inputClassNum);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1641  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1642  /** \brief Gets the ADC input class sample time of external channel.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1643   * \param vadcG Pointer to Register Group space
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1644   * \param inputClassNum ADC input class number
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1645   * \param analogFrequency ADC module analog frequency in Hz.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1646   * \return ADC input class external channel sample time in sec.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1647   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1648  IFX_INLINE float32 IfxVadc_getEmuxGroupSampleTime(Ifx_VADC_G *vadcG, uint8 inputClassNum, float32 analogFrequency);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1649  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1650  /** \brief set the external channel resolution of Global class
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1651   * \param vadc pointer to VADC Module space
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1652   * \param inputClassNum Global Input Class Number
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1653   * \param resolution External Channel resolution
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1654   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1655   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1656  IFX_INLINE void IfxVadc_setEmuxGlobalResolution(Ifx_VADC *vadc, uint8 inputClassNum, IfxVadc_ChannelResolution resolution);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1657  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1658  /** \brief Sets the sample time of ADC global class for external channel.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1659   * \param vadc Pointer to VADC Module space
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1660   * \param inputClassNum Adc input class number
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1661   * \param analogFrequency ADC analog Frequency in HZ
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1662   * \param sampleTime the requested sample time for input class in sec
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1663   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1664   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1665  IFX_INLINE void IfxVadc_setEmuxGlobalSampleTime(Ifx_VADC *vadc, uint8 inputClassNum, float32 analogFrequency, float32 sampleTime);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1666  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1667  /** \brief set the external channel resolution of ADC input class
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1668   * \param vadcG pointer to VADC Group Register space
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1669   * \param inputClassNum input class number
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1670   * \param resolution input class external channel resolution
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1671   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1672   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1673  IFX_INLINE void IfxVadc_setEmuxGroupResolution(Ifx_VADC_G *vadcG, uint8 inputClassNum, IfxVadc_ChannelResolution resolution);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1674  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1675  /** \brief Sets the ADC input class sample time for external channel.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1676   * \param vadcG Pointer to VADC Group Register Space
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1677   * \param inputClassNum input class number
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1678   * \param analogFrequency ADC analog frequency in Hz.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1679   * \param sampleTime request sample time in sec for input class.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1680   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1681   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1682  IFX_INLINE void IfxVadc_setEmuxGroupSampletime(Ifx_VADC_G *vadcG, uint8 inputClassNum, float32 analogFrequency, float32 sampleTime);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1683  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1684  /** \brief Sets the Emux Interface for a particular group
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1685   * \param vadc Pointer to VADC Module Space
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1686   * \param emuxInterface specifies the EmuxInterface
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1687   * \param group specifies the group ID
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1688   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1689   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1690  IFX_INLINE void IfxVadc_setEmuxInterfaceForGroup(Ifx_VADC *vadc, IfxVadc_EmuxInterface emuxInterface, IfxVadc_GroupId group);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1691  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1692  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1693  /*-------------------------Global Function Prototypes-------------------------*/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1694  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1695  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1696  /**
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1697   * \param vadc pointer to Module space
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1698   * \param vadcG Pointer to VADC group register space
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1699   * \param mode External Multiplexer mode
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1700   * \param channels Specifies channel Id
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1701   * \param startChannel specifies the external channel value from which conversion to be carried out
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1702   * \param code Output the channel number in binary code/gray code
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1703   * \param sampleTimeControl specifies when to use a sample time for external channel
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1704   * \param channelSelectionStyle External Multiplexer Channel Selection Style
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1705   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1706   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1707  IFX_EXTERN void IfxVadc_configExternalMultiplexerMode(Ifx_VADC *vadc, Ifx_VADC_G *vadcG, IfxVadc_ExternalMultiplexerMode mode, uint8 channels, IfxVadc_EmuxSelectValue startChannel, IfxVadc_EmuxCodingScheme code, IfxVadc_EmuxSampleTimeControl sampleTimeControl, IfxVadc_ChannelSelectionStyle channelSelectionStyle);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1708  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1709  /** \} */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1710  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1711  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1712  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1713  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1714  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1715  /** \brief get channel service request node pointer
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1716   * \param vadcG Pointer to VADC Group register space
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1717   * \return channel service request node pointer
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1718   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1719  IFX_INLINE Ifx_VADC_G_CEVNP1 IfxVadc_getChannelServiceRequestNodePointer1(Ifx_VADC_G *vadcG);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1720  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1721  /** \brief set channel event node pointer
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1722   * \param vadcG Pointer to the Vadc group register space
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1723   * \param channelSrcNr Service request
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1724   * \param channel specifies channel
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1725   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1726   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1727  IFX_INLINE void IfxVadc_setChannelEventNodePointer1(Ifx_VADC_G *vadcG, IfxVadc_SrcNr channelSrcNr, IfxVadc_ChannelId channel);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1728  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1729  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1730  /*---------------------Inline Function Implementations------------------------*/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1731  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1732  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1733  IFX_INLINE void IfxVadc_addToQueue(Ifx_VADC_G *group, IfxVadc_ChannelId channel, uint32 options)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1734  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1735      group->QINR0.U = channel | options;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1736  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1737  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1738  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1739  IFX_INLINE uint32 IfxVadc_calculateSampleTime(float32 analogFrequency, float32 sampleTime)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1740  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1741      uint32 ticks;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1742  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1743      ticks = (uint32)(sampleTime * analogFrequency) - 2;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1744  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1745      if (ticks > 31)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1746      {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1747          ticks = (ticks / 16) + 15;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1748      }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1749  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1750      ticks = __minu(ticks, 0xFFu);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1751  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1752      return ticks;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1753  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1754  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1755  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1756  IFX_INLINE void IfxVadc_clearAllResultRequests(Ifx_VADC_G *vadcG)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1757  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1758      vadcG->REFCLR.U = 0x0000FFFFu;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1759  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1760  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1761  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1762  IFX_INLINE void IfxVadc_clearChannelRequest(Ifx_VADC_G *vadcG, IfxVadc_ChannelId channelId)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1763  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1764      vadcG->CEFCLR.U = 1 << channelId;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1765  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1766  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1767  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1768  IFX_INLINE void IfxVadc_clearQueue(Ifx_VADC_G *vadcG, boolean flushQueue)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1769  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1770      vadcG->QMR0.B.FLUSH = flushQueue;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1771  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1772  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1773  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1774  IFX_INLINE void IfxVadc_configureWaitForReadMode(Ifx_VADC_G *group, uint32 resultIdx, boolean waitForRead)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1775  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1776      group->RCR[resultIdx].B.WFR = waitForRead;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1777  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1778  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1779  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1780  IFX_INLINE void IfxVadc_configureWaitForReadModeForGlobalResultRegister(Ifx_VADC *vadc, boolean waitForRead)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1781  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1782      vadc->GLOBRCR.B.WFR = waitForRead;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1783  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1784  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1785  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1786  IFX_INLINE void IfxVadc_disableModule(Ifx_VADC *vadc)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1787  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1788      uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1789      IfxScuWdt_clearCpuEndinit(passwd);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1790      vadc->CLC.B.DISR = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1791      IfxScuWdt_setCpuEndinit(passwd);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1792  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1793  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1794  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1795  IFX_INLINE void IfxVadc_disableQueueSlotExternalTrigger(Ifx_VADC_G *vadcG)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1796  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1797      vadcG->QMR0.B.ENTR = 0; /* disable external trigger */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1798  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1799  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1800  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1801  IFX_INLINE void IfxVadc_disableScanSlotExternalTrigger(Ifx_VADC_G *vadcG)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1802  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1803      vadcG->ASMR.B.ENTR = 0; /* disable external trigger */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1804  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1805  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1806  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1807  IFX_INLINE void IfxVadc_enableBackgroundScanSlotExternalTrigger(Ifx_VADC *vadc)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1808  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1809      vadc->BRSMR.B.ENTR = 1; /* enable external trigger */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1810  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1811  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1812  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1813  IFX_INLINE void IfxVadc_enableFifoMode(Ifx_VADC_G *vadcG, IfxVadc_ChannelResult resultRegister, IfxVadc_FifoMode fifoMode)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1814  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1815      vadcG->RCR[resultRegister].B.FEN = fifoMode;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1816  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1817  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1818  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1819  IFX_INLINE void IfxVadc_enableModule(Ifx_VADC *vadc)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1820  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1821      uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1822  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1823      IfxScuWdt_clearCpuEndinit(passwd);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1824      vadc->CLC.U = 0x00000000;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1825      IfxScuWdt_setCpuEndinit(passwd);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1826  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1827  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1828  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1829  IFX_INLINE void IfxVadc_enableQueueSlotExternalTrigger(Ifx_VADC_G *vadcG)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1830  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1831      vadcG->QMR0.B.ENTR = 1;     /* enable external trigger */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1832  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1833  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1834  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1835  IFX_INLINE void IfxVadc_enableScanSlotExternalTrigger(Ifx_VADC_G *vadcG)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1836  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1837      vadcG->ASMR.B.ENTR = 1; /* enable external trigger */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1838  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1839  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1840  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1841  IFX_INLINE void IfxVadc_enableServiceRequest(Ifx_VADC_G *vadcG, IfxVadc_ChannelResult resultRegister)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1842  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1843      vadcG->RCR[resultRegister].B.SRGEN = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1844  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1845  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1846  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1847  IFX_INLINE uint8 IfxVadc_getAdcCalibrationActiveState(Ifx_VADC *vadc, uint8 adcCalGroupNum)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1848  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1849      uint8 status;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1850      status = vadc->G[adcCalGroupNum].ARBCFG.B.CAL;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1851      return status;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1852  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1853  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1854  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1855  IFX_INLINE IfxVadc_ArbitrationRounds IfxVadc_getArbiterRoundLength(Ifx_VADC_G *vadcG)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1856  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1857      return (IfxVadc_ArbitrationRounds)vadcG->ARBCFG.B.ARBRND;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1858  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1859  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1860  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1861  IFX_INLINE Ifx_VADC_G_CHASS IfxVadc_getAssignedChannels(Ifx_VADC_G *vadcG)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1862  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1863      Ifx_VADC_G_CHASS assignChannels;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1864      assignChannels.U = vadcG->CHASS.U;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1865      return assignChannels;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1866  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1867  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1868  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1869  IFX_INLINE IfxVadc_GatingMode IfxVadc_getBackgroundScanGatingMode(Ifx_VADC *vadc)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1870  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1871      return (IfxVadc_GatingMode)vadc->BRSMR.B.ENGT;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1872  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1873  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1874  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1875  IFX_INLINE IfxVadc_GatingSource IfxVadc_getBackgroundScanGatingSource(Ifx_VADC *vadc)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1876  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1877      return (IfxVadc_GatingSource)vadc->BRSCTRL.B.GTSEL;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1878  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1879  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1880  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1881  IFX_INLINE IfxVadc_RequestSlotPriority IfxVadc_getBackgroundScanSlotPriority(Ifx_VADC_G *vadcG)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1882  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1883      return (IfxVadc_RequestSlotPriority)vadcG->ARBPR.B.PRIO2;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1884  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1885  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1886  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1887  IFX_INLINE IfxVadc_RequestSlotStartMode IfxVadc_getBackgroundScanSlotStartMode(Ifx_VADC_G *vadcG)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1888  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1889      return (IfxVadc_RequestSlotStartMode)vadcG->ARBPR.B.CSM2;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1890  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1891  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1892  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1893  IFX_INLINE IfxVadc_TriggerSource IfxVadc_getBackgroundScanTriggerInput(Ifx_VADC *vadc)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1894  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1895      return (IfxVadc_TriggerSource)vadc->BRSCTRL.B.XTSEL;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1896  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1897  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1898  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1899  IFX_INLINE IfxVadc_TriggerMode IfxVadc_getBackgroundScanTriggerMode(Ifx_VADC *vadc)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1900  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1901      return (IfxVadc_TriggerMode)vadc->BRSCTRL.B.XTMODE;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1902  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1903  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1904  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1905  IFX_INLINE Ifx_VADC_CHCTR IfxVadc_getChannelControlConfig(Ifx_VADC_G *vadcG, IfxVadc_ChannelId channelIndex)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1906  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1907      Ifx_VADC_CHCTR tempChctr;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1908      tempChctr.U = vadcG->CHCTR[channelIndex].U;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1909      return tempChctr;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1910  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1911  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1912  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1913  IFX_INLINE IfxVadc_InputClasses IfxVadc_getChannelInputClass(Ifx_VADC_G *vadcG, IfxVadc_ChannelId channelIndex)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1914  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1915      return (IfxVadc_InputClasses)vadcG->CHCTR[channelIndex].B.ICLSEL;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1916  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1917  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1918  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1919  IFX_INLINE Ifx_VADC_G_REVNP0 IfxVadc_getChannelResultServiceRequestNodePointer0(Ifx_VADC_G *vadcG)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1920  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1921      Ifx_VADC_G_REVNP0 resultServiceRequestNodePtr0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1922      resultServiceRequestNodePtr0.U = vadcG->REVNP0.U;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1923      return resultServiceRequestNodePtr0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1924  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1925  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1926  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1927  IFX_INLINE Ifx_VADC_G_REVNP1 IfxVadc_getChannelResultServiceRequestNodePointer1(Ifx_VADC_G *vadcG)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1928  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1929      Ifx_VADC_G_REVNP1 resultServiceRequestNodePtr1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1930      resultServiceRequestNodePtr1.U = vadcG->REVNP1.U;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1931      return resultServiceRequestNodePtr1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1932  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1933  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1934  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1935  IFX_INLINE Ifx_VADC_G_CEVNP0 IfxVadc_getChannelServiceRequestNodePointer0(Ifx_VADC_G *vadcG)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1936  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1937      Ifx_VADC_G_CEVNP0 serviceRequestNodePtr;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1938      serviceRequestNodePtr.U = vadcG->CEVNP0.U;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1939      return serviceRequestNodePtr;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1940  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1941  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1942  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1943  IFX_INLINE Ifx_VADC_G_CEVNP1 IfxVadc_getChannelServiceRequestNodePointer1(Ifx_VADC_G *vadcG)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1944  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1945      Ifx_VADC_G_CEVNP1 serviceRequestNodePtr;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1946      serviceRequestNodePtr.U = vadcG->CEVNP1.U;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1947      return serviceRequestNodePtr;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1948  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1949  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1950  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1951  IFX_INLINE IfxVadc_ChannelResolution IfxVadc_getEmuxGlobalResolution(Ifx_VADC *vadc, uint8 inputClassNum)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1952  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1953      return (IfxVadc_ChannelResolution)vadc->GLOBICLASS[inputClassNum].B.CME;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1954  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1955  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1956  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1957  IFX_INLINE float32 IfxVadc_getEmuxGlobalSampleTime(Ifx_VADC *vadc, uint8 inputClassNum, float32 analogFrequency)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1958  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1959      return (float32)(IFXVADC_SAMPLETIME_MIN + vadc->GLOBICLASS[inputClassNum].B.STCE) / analogFrequency;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1960  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1961  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1962  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1963  IFX_INLINE IfxVadc_ChannelResolution IfxVadc_getEmuxGroupResolution(Ifx_VADC_G *vadcG, uint8 inputClassNum)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1964  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1965      return (IfxVadc_ChannelResolution)vadcG->ICLASS[inputClassNum].B.CME;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1966  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1967  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1968  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1969  IFX_INLINE float32 IfxVadc_getEmuxGroupSampleTime(Ifx_VADC_G *vadcG, uint8 inputClassNum, float32 analogFrequency)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1970  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1971      return (float32)(IFXVADC_SAMPLETIME_MIN + vadcG->ICLASS[inputClassNum].B.STCE) / analogFrequency;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1972  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1973  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1974  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1975  IFX_INLINE Ifx_VADC_GLOBCFG IfxVadc_getGlobalConfigValue(Ifx_VADC *vadc)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1976  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1977      Ifx_VADC_GLOBCFG globCfg;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1978      globCfg.U = vadc->GLOBCFG.U;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1979      return globCfg;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1980  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1981  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1982  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1983  IFX_INLINE IfxVadc_ChannelResolution IfxVadc_getGlobalResolution(Ifx_VADC *vadc, uint8 inputClassNum)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1984  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1985      return (IfxVadc_ChannelResolution)vadc->GLOBICLASS[inputClassNum].B.CMS;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1986  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1987  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1988  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1989  IFX_INLINE Ifx_VADC_GLOBRES IfxVadc_getGlobalResult(Ifx_VADC *vadc)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1990  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1991      Ifx_VADC_GLOBRES tmpGlobalResult;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1992  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1993      tmpGlobalResult.U = vadc->GLOBRES.U;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1994  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1995      return tmpGlobalResult;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1996  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1997  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1998  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1999  IFX_INLINE float32 IfxVadc_getGlobalSampleTime(Ifx_VADC *vadc, uint8 inputClassNum, float32 analogFrequency)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  2000  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  2001      uint32 sampleTime = vadc->GLOBICLASS[inputClassNum].B.STCS;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  2002  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  2003      if (sampleTime > 16)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  2004      {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  2005          sampleTime = (sampleTime - 15) * 16;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  2006      }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  2007  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  2008      return (float32)(IFXVADC_SAMPLETIME_MIN + sampleTime) / analogFrequency;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  2009  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  2010  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  2011  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  2012  IFX_INLINE IfxVadc_ChannelResolution IfxVadc_getGroupResolution(Ifx_VADC_G *vadcG, uint8 inputClassNum)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  2013  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  2014      return (IfxVadc_ChannelResolution)vadcG->ICLASS[inputClassNum].B.CMS;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  2015  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  2016  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  2017  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  2018  IFX_INLINE void IfxVadc_getGroupResult(Ifx_VADC_G *group, Ifx_VADC_RES *results, uint32 resultOffset, uint32 numResults)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  2019  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  2020      uint32 idx;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  2021  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  2022      for (idx = 0; idx < numResults; idx++)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  2023      {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  2024          results[idx].U = group->RES[resultOffset + idx].U;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  2025      }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  2026  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  2027  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  2028  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  2029  IFX_INLINE float32 IfxVadc_getGroupSampleTime(Ifx_VADC_G *vadcG, uint8 inputClassNum, float32 analogFrequency)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  2030  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  2031      uint32 sampleTime = vadcG->ICLASS[inputClassNum].B.STCS;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  2032  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  2033      if (sampleTime > 16)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  2034      {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  2035          sampleTime = (sampleTime - 15) * 16;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  2036      }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  2037  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  2038      return (float32)(IFXVADC_SAMPLETIME_MIN + sampleTime) / analogFrequency;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  2039  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  2040  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  2041  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  2042  IFX_INLINE uint8 IfxVadc_getMasterIndex(Ifx_VADC_G *vadcG)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  2043  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  2044      uint8 masterIndex = 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  2045      masterIndex = vadcG->SYNCTR.B.STSEL;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  2046      return masterIndex;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  2047  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  2048  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  2049  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  2050  IFX_INLINE IfxVadc_GatingMode IfxVadc_getQueueSlotGatingMode(Ifx_VADC_G *vadcG)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  2051  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  2052      return (IfxVadc_GatingMode)vadcG->QMR0.B.ENGT;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  2053  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  2054  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  2055  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  2056  IFX_INLINE IfxVadc_GatingSource IfxVadc_getQueueSlotGatingSource(Ifx_VADC_G *vadcG)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  2057  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  2058      return (IfxVadc_GatingSource)vadcG->QCTRL0.B.GTSEL;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  2059  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  2060  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  2061  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  2062  IFX_INLINE IfxVadc_RequestSlotPriority IfxVadc_getQueueSlotPriority(Ifx_VADC_G *vadcG)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  2063  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  2064      return (IfxVadc_RequestSlotPriority)vadcG->ARBPR.B.PRIO0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  2065  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  2066  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  2067  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  2068  IFX_INLINE IfxVadc_RequestSlotStartMode IfxVadc_getQueueSlotStartMode(Ifx_VADC_G *vadcG)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  2069  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  2070      return (IfxVadc_RequestSlotStartMode)vadcG->ARBPR.B.CSM0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  2071  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  2072  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  2073  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  2074  IFX_INLINE IfxVadc_TriggerSource IfxVadc_getQueueSlotTriggerInput(Ifx_VADC_G *vadcG)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  2075  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  2076      return (IfxVadc_TriggerSource)vadcG->QCTRL0.B.XTSEL;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  2077  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  2078  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  2079  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  2080  IFX_INLINE IfxVadc_TriggerMode IfxVadc_getQueueSlotTriggerMode(Ifx_VADC_G *vadcG)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  2081  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  2082      return (IfxVadc_TriggerMode)vadcG->QCTRL0.B.XTMODE;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  2083  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  2084  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  2085  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  2086  IFX_INLINE Ifx_VADC_RES IfxVadc_getResult(Ifx_VADC_G *group, uint32 resultIdx)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  2087  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  2088      Ifx_VADC_RES tmpResult;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  2089  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  2090      tmpResult.U = group->RES[resultIdx].U;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  2091  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  2092      return tmpResult;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  2093  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  2094  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  2095  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  2096  IFX_INLINE IfxVadc_GatingMode IfxVadc_getScanSlotGatingMode(Ifx_VADC_G *vadcG)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  2097  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  2098      return (IfxVadc_GatingMode)vadcG->ASMR.B.ENGT;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  2099  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  2100  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  2101  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  2102  IFX_INLINE IfxVadc_GatingSource IfxVadc_getScanSlotGatingSource(Ifx_VADC_G *vadcG)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  2103  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  2104      return (IfxVadc_GatingSource)vadcG->ASCTRL.B.GTSEL;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  2105  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  2106  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  2107  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  2108  IFX_INLINE IfxVadc_RequestSlotPriority IfxVadc_getScanSlotPriority(Ifx_VADC_G *vadcG)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  2109  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  2110      return (IfxVadc_RequestSlotPriority)vadcG->ARBPR.B.PRIO1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  2111  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  2112  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  2113  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  2114  IFX_INLINE IfxVadc_RequestSlotStartMode IfxVadc_getScanSlotStartMode(Ifx_VADC_G *vadcG)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  2115  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  2116      return (IfxVadc_RequestSlotStartMode)vadcG->ARBPR.B.CSM1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  2117  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  2118  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  2119  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  2120  IFX_INLINE IfxVadc_TriggerSource IfxVadc_getScanSlotTriggerInput(Ifx_VADC_G *vadcG)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  2121  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  2122      return (IfxVadc_TriggerSource)vadcG->ASCTRL.B.XTSEL;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  2123  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  2124  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  2125  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  2126  IFX_INLINE IfxVadc_TriggerMode IfxVadc_getScanSlotTriggerMode(Ifx_VADC_G *vadcG)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  2127  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  2128      return (IfxVadc_TriggerMode)vadcG->ASCTRL.B.XTMODE;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  2129  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  2130  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  2131  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  2132  IFX_INLINE boolean IfxVadc_getStartupCalibration(Ifx_VADC *vadc)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  2133  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  2134      return (boolean)vadc->GLOBCFG.B.SUCAL;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  2135  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  2136  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  2137  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  2138  IFX_INLINE void IfxVadc_initEmuxPin(const IfxVadc_Emux_Out *emux, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  2139  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  2140      IfxPort_setPinModeOutput(emux->pin.port, emux->pin.pinIndex, outputMode, emux->select);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  2141      IfxPort_setPinPadDriver(emux->pin.port, emux->pin.pinIndex, padDriver);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  2142  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  2143  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  2144  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  2145  IFX_INLINE void IfxVadc_initGxBflPin(const IfxVadc_GxBfl_Out *gxBfl, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  2146  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  2147      IfxPort_setPinModeOutput(gxBfl->pin.port, gxBfl->pin.pinIndex, outputMode, gxBfl->select);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  2148      IfxPort_setPinPadDriver(gxBfl->pin.port, gxBfl->pin.pinIndex, padDriver);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  2149  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  2150  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  2151  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  2152  IFX_INLINE void IfxVadc_initiateStartupCalibration(Ifx_VADC *vadc)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  2153  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  2154      vadc->GLOBCFG.B.SUCAL = 1;
	ld.bu	d15,[a15]131
.L760:
	or	d15,#128
	st.b	[a15]131,d15
.L371:

; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   569  tection_globalConfig);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   570      /* Set SUCAL bit */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   571      IfxVadc_initiateStartupCalibration(vadc);
	fcall	.cocofun_1
.L530:
	call	IfxVadc_disableAccess

; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   572      IfxVadc_disableAccess(vadc, IfxVadc_Protection_globalConfig);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   573  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   574      /* Wait for hardware self-test and calibration to complete */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   575      /* Wait until Calibration is done */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   576      do
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   577      {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   578          calibrationRunning = FALSE;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   579  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   580          for (adcCalGroupNum = 0; adcCalGroupNum < IFXVADC_NUM_ADC_CAL_GROUPS; adcCalGroupNum++)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   581          {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   582              if (IfxVadc_getAdcCalibrationActiveState(vadc, adcCalGroupNum) != 0)     /* Check ADC Calibration Flag CAL */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   583              {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   584                  calibrationRunning = TRUE;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   585              }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   586              else
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   587              {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   588                  /* do nothing */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   589              }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   590          }
.L72:
	mov	d0,#0

; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	     1  /**
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	     2   * \file IfxVadc.h
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	     3   * \brief VADC  basic functionality
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	     4   * \ingroup IfxLld_Vadc
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	     5   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	     6   * \version iLLD_1_0_1_11_0
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	     7   * \copyright Copyright (c) 2017 Infineon Technologies AG. All rights reserved.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	     8   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	     9   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    10   *                                 IMPORTANT NOTICE
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    11   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    12   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    13   * Use of this file is subject to the terms of use agreed between (i) you or 
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    14   * the company in which ordinary course of business you are acting and (ii) 
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    15   * Infineon Technologies AG or its licensees. If and as long as no such 
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    16   * terms of use are agreed, use of this file is subject to following:
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    17  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    18  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    19   * Boost Software License - Version 1.0 - August 17th, 2003
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    20  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    21   * Permission is hereby granted, free of charge, to any person or 
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    22   * organization obtaining a copy of the software and accompanying 
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    23   * documentation covered by this license (the "Software") to use, reproduce,
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    24   * display, distribute, execute, and transmit the Software, and to prepare
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    25   * derivative works of the Software, and to permit third-parties to whom the 
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    26   * Software is furnished to do so, all subject to the following:
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    27  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    28   * The copyright notices in the Software and this entire statement, including
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    29   * the above license grant, this restriction and the following disclaimer, must
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    30   * be included in all copies of the Software, in whole or in part, and all
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    31   * derivative works of the Software, unless such copies or derivative works are
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    32   * solely in the form of machine-executable object code generated by a source
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    33   * language processor.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    34  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    35   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR 
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    36   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    37   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    38   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE 
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    39   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    40   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    41   * DEALINGS IN THE SOFTWARE.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    42  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    43   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    44   * \defgroup IfxLld_Vadc_Std_Enum Enumerations
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    45   * \ingroup IfxLld_Vadc_Std
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    46   * \defgroup IfxLld_Vadc_Std_Background_Autoscan Background Autoscan Functions
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    47   * \ingroup IfxLld_Vadc_Std
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    48   * \defgroup IfxLld_Vadc_Std_ChannelScan Channel Scan Functions
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    49   * \ingroup IfxLld_Vadc_Std
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    50   * \defgroup IfxLld_Vadc_Std_QueueRequest Queue Request Functions
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    51   * \ingroup IfxLld_Vadc_Std
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    52   * \defgroup IfxLld_Vadc_Std_IO IO Pin Configuration Functions
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    53   * \ingroup IfxLld_Vadc_Std
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    54   * \defgroup IfxLld_Vadc_Std_Frequency Frequency Calculation
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    55   * \ingroup IfxLld_Vadc_Std
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    56   * \defgroup IfxLld_Vadc_Std_Group Group Functions
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    57   * \ingroup IfxLld_Vadc_Std
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    58   * \defgroup IfxLld_Vadc_Std_Module Module Functions
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    59   * \ingroup IfxLld_Vadc_Std
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    60   * \defgroup IfxLld_Vadc_Std_Channel Channel Functions
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    61   * \ingroup IfxLld_Vadc_Std
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    62   * \defgroup IfxLld_Vadc_Std_Emux Emux Functions
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    63   * \ingroup IfxLld_Vadc_Std
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    64   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    65  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    66  #ifndef IFXVADC_H
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    67  #define IFXVADC_H 1
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    68  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    69  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    70  /*----------------------------------Includes----------------------------------*/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    71  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    72  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    73  #include "_Impl/IfxVadc_cfg.h"
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    74  #include "_PinMap/IfxVadc_PinMap.h"
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    75  #include "IfxVadc_bf.h"
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    76  #include "Cpu/Std/IfxCpu_Intrinsics.h"
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    77  #include "Scu/Std/IfxScuCcu.h"
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    78  #include "Scu/Std/IfxScuWdt.h"
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    79  #include "IfxCcu6_reg.h"
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    80  #include "IfxCcu6_bf.h"
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    81  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    82  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    83  /*--------------------------------Enumerations--------------------------------*/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    84  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    85  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    86  /** \addtogroup IfxLld_Vadc_Std_Enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    87   * \{ */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    88  /** \brief Defined in MODULE_VADC.G[x].ARBCFG.B.ANONS and ANONC
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    89   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    90  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    91  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    92      IfxVadc_AnalogConverterMode_off             = 0, /**< \brief Analog Converter off */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    93      IfxVadc_AnalogConverterMode_slowStandby     = 1, /**< \brief Slow Standby Mode */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    94      IfxVadc_AnalogConverterMode_fastStandby     = 2, /**< \brief Fast Standby Mode */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    95      IfxVadc_AnalogConverterMode_normalOperation = 3  /**< \brief Normal operation mode */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    96  } IfxVadc_AnalogConverterMode;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    97  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    98  /** \brief Arbitration round length defined in MODULE_VADC.G[x].ARBCFG.ARBRND(x=0,1,..,11)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    99   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   100  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   101  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   102      IfxVadc_ArbitrationRounds_4_slots  = 0,  /**< \brief An arbitration round contains 4 arbitration slots. */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   103      IfxVadc_ArbitrationRounds_8_slots  = 1,  /**< \brief An arbitration round contains 8 arbitration slots. */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   104      IfxVadc_ArbitrationRounds_16_slots = 2,  /**< \brief An arbitration round contains 16 arbitration slots. */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   105      IfxVadc_ArbitrationRounds_20_slots = 3   /**< \brief An arbitration round contains 20 arbitration slots. */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   106  } IfxVadc_ArbitrationRounds;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   107  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   108  /** \brief Boundary Extension defined in MODULE_VADC.G[x].CHCTR[y].B.BNDSELX(x=0,1,...,11;y=0,1....,16)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   109   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   110  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   111  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   112      IfxVadc_BoundaryExtension_standard            = 0,   /**< \brief Boundary Standard mode. BNDSELU/BNDSELL as Boundaries */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   113      IfxVadc_BoundaryExtension_fastCompareResult1  = 1,   /**< \brief Fast compare mode use as upper boundary  Channel result   1 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   114      IfxVadc_BoundaryExtension_fastCompareResult2  = 2,   /**< \brief Fast compare mode use as upper boundary  Channel result   2 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   115      IfxVadc_BoundaryExtension_fastCompareResult3  = 3,   /**< \brief Fast compare mode use as upper boundary  Channel result   3 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   116      IfxVadc_BoundaryExtension_fastCompareResult4  = 4,   /**< \brief Fast compare mode use as upper boundary  Channel result   4 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   117      IfxVadc_BoundaryExtension_fastCompareResult5  = 5,   /**< \brief Fast compare mode use as upper boundary  Channel result   5 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   118      IfxVadc_BoundaryExtension_fastCompareResult6  = 6,   /**< \brief Fast compare mode use as upper boundary  Channel result   6 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   119      IfxVadc_BoundaryExtension_fastCompareResult7  = 7,   /**< \brief Fast compare mode use as upper boundary  Channel result   7 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   120      IfxVadc_BoundaryExtension_fastCompareResult8  = 8,   /**< \brief Fast compare mode use as upper boundary  Channel result   8 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   121      IfxVadc_BoundaryExtension_fastCompareResult9  = 9,   /**< \brief Fast compare mode use as upper boundary  Channel result   9 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   122      IfxVadc_BoundaryExtension_fastCompareResult10 = 10,  /**< \brief Fast compare mode use as upper boundary  Channel result  10 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   123      IfxVadc_BoundaryExtension_fastCompareResult11 = 11,  /**< \brief Fast compare mode use as upper boundary  Channel result  11 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   124      IfxVadc_BoundaryExtension_fastCompareResult12 = 12,  /**< \brief Fast compare mode use as upper boundary  Channel result  12 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   125      IfxVadc_BoundaryExtension_fastCompareResult13 = 13,  /**< \brief Fast compare mode use as upper boundary  Channel result  13 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   126      IfxVadc_BoundaryExtension_fastCompareResult14 = 14,  /**< \brief Fast compare mode use as upper boundary  Channel result  14 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   127      IfxVadc_BoundaryExtension_fastCompareResult15 = 15   /**< \brief Fast compare mode use as upper boundary  Channel result  15 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   128  } IfxVadc_BoundaryExtension;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   129  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   130  /** \brief BoundarySel defined in MODULE_VADC.G[x].CHCTR[y].B.BNDSELL(x=0,1,...,11;y=0,1....,16)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   131   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   132  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   133  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   134      IfxVadc_BoundarySelection_group0  = 0,  /**< \brief Use group class 0 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   135      IfxVadc_BoundarySelection_group1  = 1,  /**< \brief Use group class 1 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   136      IfxVadc_BoundarySelection_global0 = 2,  /**< \brief Use global class 0 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   137      IfxVadc_BoundarySelection_global1 = 3   /**< \brief Use global class 1 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   138  } IfxVadc_BoundarySelection;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   139  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   140  /** \brief VADC Channels
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   141   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   142  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   143  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   144      IfxVadc_ChannelId_none = -1,  /**< \brief None of VADC channels */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   145      IfxVadc_ChannelId_0    = 0,   /**< \brief Channel 0 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   146      IfxVadc_ChannelId_1    = 1,   /**< \brief Channel 1 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   147      IfxVadc_ChannelId_2    = 2,   /**< \brief Channel 2 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   148      IfxVadc_ChannelId_3    = 3,   /**< \brief Channel 3 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   149      IfxVadc_ChannelId_4    = 4,   /**< \brief Channel 4 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   150      IfxVadc_ChannelId_5    = 5,   /**< \brief Channel 5 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   151      IfxVadc_ChannelId_6    = 6,   /**< \brief Channel 6 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   152      IfxVadc_ChannelId_7    = 7,   /**< \brief Channel 7 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   153      IfxVadc_ChannelId_8    = 8,   /**< \brief Channel 8 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   154      IfxVadc_ChannelId_9    = 9,   /**< \brief Channel 9 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   155      IfxVadc_ChannelId_10   = 10,  /**< \brief Channel 10 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   156      IfxVadc_ChannelId_11   = 11,  /**< \brief Channel 11 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   157      IfxVadc_ChannelId_12   = 12,  /**< \brief Channel 12 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   158      IfxVadc_ChannelId_13   = 13,  /**< \brief Channel 13 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   159      IfxVadc_ChannelId_14   = 14,  /**< \brief Channel 14 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   160      IfxVadc_ChannelId_15   = 15   /**< \brief Channel 15 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   161  } IfxVadc_ChannelId;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   162  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   163  /** \brief ADC channel reference defined in MODULE_VADC.G[x].CHCTR[y].B.REFSEL(x=0,1,...,11;y=0,1....,16)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   164   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   165  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   166  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   167      IfxVadc_ChannelReference_standard = 0,  /**< \brief use Varef as reference */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   168      IfxVadc_ChannelReference_channel0 = 1   /**< \brief use CH0 as reference */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   169  } IfxVadc_ChannelReference;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   170  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   171  /** \brief ADC channel resolution defined in MODULE_VADC.G[x].CHCTR[y].B.ICLASS[y].B.CMS(x=0,1,...,11;y=0,1)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   172   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   173  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   174  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   175      IfxVadc_ChannelResolution_12bit     = 0, /**< \brief 12-bit conversion */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   176      IfxVadc_ChannelResolution_10bit     = 1, /**< \brief 10-bit conversion */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   177      IfxVadc_ChannelResolution_8bit      = 2, /**< \brief 8-bit conversion */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   178      IfxVadc_ChannelResolution_10bitFast = 5  /**< \brief 10-bit cfast compare mode */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   179  } IfxVadc_ChannelResolution;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   180  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   181  /** \brief Channel Result defined in MODULE_VADC.G[x].CHCTR[y].B.RESREG(x=0,1,...,11;y=0,1....,16)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   182   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   183  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   184  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   185      IfxVadc_ChannelResult_0 = 0,      /**< \brief Use Channel result 0  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   186      IfxVadc_ChannelResult_1,          /**< \brief Use Channel result 1  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   187      IfxVadc_ChannelResult_2,          /**< \brief Use Channel result 2  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   188      IfxVadc_ChannelResult_3,          /**< \brief Use Channel result 3  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   189      IfxVadc_ChannelResult_4,          /**< \brief Use Channel result 4  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   190      IfxVadc_ChannelResult_5,          /**< \brief Use Channel result 5  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   191      IfxVadc_ChannelResult_6,          /**< \brief Use Channel result 6  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   192      IfxVadc_ChannelResult_7,          /**< \brief Use Channel result 7  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   193      IfxVadc_ChannelResult_8,          /**< \brief Use Channel result 8  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   194      IfxVadc_ChannelResult_9,          /**< \brief Use Channel result 9  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   195      IfxVadc_ChannelResult_10,         /**< \brief Use Channel result 10  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   196      IfxVadc_ChannelResult_11,         /**< \brief Use Channel result 11  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   197      IfxVadc_ChannelResult_12,         /**< \brief Use Channel result 12  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   198      IfxVadc_ChannelResult_13,         /**< \brief Use Channel result 13  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   199      IfxVadc_ChannelResult_14,         /**< \brief Use Channel result 14  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   200      IfxVadc_ChannelResult_15          /**< \brief Use Channel result 15  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   201  } IfxVadc_ChannelResult;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   202  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   203  /** \brief External Multiplexer Channel Selection Style as defined in
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   204   * Ifx_VADC.G[x].EMUXCTR.B.EMXCSS
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   205   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   206  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   207  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   208      IfxVadc_ChannelSelectionStyle_channelNumber = 0,  /**< \brief selects an arbitrary channel */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   209      IfxVadc_ChannelSelectionStyle_binary        = 1   /**< \brief Each bit of bitfield EMUXCH selects the
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   210                                                         * associated channel for EMUX control */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   211  } IfxVadc_ChannelSelectionStyle;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   212  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   213  /** \brief type of conversion
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   214   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   215  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   216  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   217      IfxVadc_ConversionType_Compatible = 0  /**< \brief Compatible Timing Mode */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   218  } IfxVadc_ConversionType;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   219  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   220  /** \brief Specifies the External Coding scheme(binary/gray)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   221   * defined in Ifx_VADC.G[x].EMUXCTR.B.EMXCOD
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   222   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   223  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   224  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   225      IfxVadc_EmuxCodingScheme_binary = 0,  /**< \brief Output the Channel Number in Binary code */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   226      IfxVadc_EmuxCodingScheme_gray   = 1   /**< \brief Output the channel number in gray code */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   227  } IfxVadc_EmuxCodingScheme;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   228  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   229  /** \brief Specifies the Emux interface
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   230   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   231  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   232  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   233      IfxVadc_EmuxInterface_0 = 0,  /**< \brief Emux Interface 0 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   234      IfxVadc_EmuxInterface_1 = 1   /**< \brief Emux Interface 1 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   235  } IfxVadc_EmuxInterface;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   236  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   237  /** \brief External Multiplexer sample time control
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   238   * defined in Ifx_VADC.G[x].EMUXCTR.B.EMXST
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   239   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   240  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   241  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   242      IfxVadc_EmuxSampleTimeControl_settingChanges = 0,  /**< \brief Use STCE Whenever Setting Changes */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   243      IfxVadc_EmuxSampleTimeControl_always         = 1   /**< \brief Use STCE for each conversion of an external channel */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   244  } IfxVadc_EmuxSampleTimeControl;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   245  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   246  /** \brief specifies the External Channel Start select value
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   247   * defined in Ifx_VADC.G[x].EMUXCTR.B.EMUXSET
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   248   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   249  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   250  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   251      IfxVadc_EmuxSelectValue_0 = 0,      /**< \brief Start Selection Value 0  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   252      IfxVadc_EmuxSelectValue_1,          /**< \brief Start Selection Value 1  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   253      IfxVadc_EmuxSelectValue_2,          /**< \brief Start Selection Value 2  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   254      IfxVadc_EmuxSelectValue_3,          /**< \brief Start Selection Value 3  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   255      IfxVadc_EmuxSelectValue_4,          /**< \brief Start Selection Value 4  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   256      IfxVadc_EmuxSelectValue_5,          /**< \brief Start Selection Value 5  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   257      IfxVadc_EmuxSelectValue_6,          /**< \brief Start Selection Value 6  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   258      IfxVadc_EmuxSelectValue_7           /**< \brief Start Selection Value 7  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   259  } IfxVadc_EmuxSelectValue;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   260  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   261  /** \brief Specifies External Multiplexer Mode
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   262   * define in Ifx_VADC.G[x].EMUXCTR.B.EMUXMODE
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   263   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   264  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   265  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   266      IfxVadc_ExternalMultiplexerMode_softwareControl = 0,  /**< \brief Disable The Emux Control */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   267      IfxVadc_ExternalMultiplexerMode_steady          = 1,  /**< \brief select steady mode */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   268      IfxVadc_ExternalMultiplexerMode_singleStep      = 2,  /**< \brief Select single step mode */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   269      IfxVadc_ExternalMultiplexerMode_sequence        = 3   /**< \brief Select Sequence Mode */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   270  } IfxVadc_ExternalMultiplexerMode;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   271  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   272  /** \brief FIFO mode enable
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   273   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   274  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   275  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   276      IfxVadc_FifoMode_seperateResultRegister = 0,  /**< \brief seperate Result Register */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   277      IfxVadc_FifoMode_fifoStructure          = 1,  /**< \brief fifoStructure */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   278      IfxVadc_FifoMode_maximumMode            = 2,  /**< \brief copy new result if bigger */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   279      IfxVadc_FifoMode_minimumMode            = 3   /**< \brief copy new result if it is smaller */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   280  } IfxVadc_FifoMode;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   281  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   282  /** \brief gating mode defined in MODULE_VADC.BRSMR.ENGT
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   283   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   284  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   285  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   286      IfxVadc_GatingMode_disabled   = 0,  /**< \brief Gating is disabled, no conversion request are issued */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   287      IfxVadc_GatingMode_always     = 1,  /**< \brief Conversion request is issued if at least 1 conversion pending bit is set */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   288      IfxVadc_GatingMode_gatingHigh = 2,  /**< \brief Conversion request is issued if at least 1 conversion pending bit is set and the gating signal is high */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   289      IfxVadc_GatingMode_gatingLow  = 3   /**< \brief Conversion request is issued if at least 1 conversion pending bit is set and the gating signal is low */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   290  } IfxVadc_GatingMode;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   291  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   292  /** \brief External trigger gating defined in MODULE_VADC.G[x].QCTRLy.GTSEL(x=0,1,..,11;y=0,1,..,7)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   293   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   294  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   295  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   296      IfxVadc_GatingSource_0 = 0,      /**< \brief Input signal REQGTx_0  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   297      IfxVadc_GatingSource_1,          /**< \brief Input signal REQGTx_1  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   298      IfxVadc_GatingSource_2,          /**< \brief Input signal REQGTx_2  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   299      IfxVadc_GatingSource_3,          /**< \brief Input signal REQGTx_3  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   300      IfxVadc_GatingSource_4,          /**< \brief Input signal REQGTx_4  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   301      IfxVadc_GatingSource_5,          /**< \brief Input signal REQGTx_5  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   302      IfxVadc_GatingSource_6,          /**< \brief Input signal REQGTx_6  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   303      IfxVadc_GatingSource_7,          /**< \brief Input signal REQGTx_7  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   304      IfxVadc_GatingSource_8,          /**< \brief Input signal REQGTx_8  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   305      IfxVadc_GatingSource_9,          /**< \brief Input signal REQGTx_9  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   306      IfxVadc_GatingSource_10,         /**< \brief Input signal REQGTx_10  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   307      IfxVadc_GatingSource_11,         /**< \brief Input signal REQGTx_11  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   308      IfxVadc_GatingSource_12,         /**< \brief Input signal REQGTx_12  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   309      IfxVadc_GatingSource_13,         /**< \brief Input signal REQGTx_13  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   310      IfxVadc_GatingSource_14,         /**< \brief Input signal REQGTx_14  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   311      IfxVadc_GatingSource_15          /**< \brief Input signal REQGTx_15  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   312  } IfxVadc_GatingSource;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   313  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   314  /** \brief inputClass defined in MODULE_VADC.G[x].CHCTR[y].B.ICLSEL(x=0,1,...,11;y=0,1....,16)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   315   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   316  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   317  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   318      IfxVadc_InputClasses_group0  = 0,  /**< \brief Use group class 0 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   319      IfxVadc_InputClasses_group1  = 1,  /**< \brief Use group class 1 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   320      IfxVadc_InputClasses_global0 = 2,  /**< \brief Use global class 0 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   321      IfxVadc_InputClasses_global1 = 3   /**< \brief Use global class 1 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   322  } IfxVadc_InputClasses;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   323  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   324  /** \brief ADC channel limit check defined in MODULE_VADC.G[x].CHCTR[y].B.CHEVMODE(x=0,1,...,11;y=0,1....,16)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   325   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   326  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   327  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   328      IfxVadc_LimitCheck_noCheck            = 0,  /**< \brief Normal compare mode Event Never Fast Compare mode Event Never */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   329      IfxVadc_LimitCheck_eventIfInArea      = 1,  /**< \brief Normal compare mode Event If result is inside the boundary band    Fast Compare mode Event If result switches to high (above comp. value) */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   330      IfxVadc_LimitCheck_eventIfOutsideArea = 2,  /**< \brief Normal compare mode Event If result is outside the boundary band   Fast Compare mode Event If result switches to low (below comp. value) */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   331      IfxVadc_LimitCheck_always             = 3   /**< \brief Normal compare mode Event Always   Fast Compare mode Event Always */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   332  } IfxVadc_LimitCheck;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   333  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   334  /** \brief Low Power Supply Voltage Select
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   335   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   336  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   337  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   338      IfxVadc_LowSupplyVoltageSelect_5V = 0,  /**< \brief 5V Power Supply is Connected */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   339      IfxVadc_LowSupplyVoltageSelect_3V = 1   /**< \brief 3.3V Power Supply is Connected */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   340  } IfxVadc_LowSupplyVoltageSelect;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   341  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   342  /** \brief Access protection for Group registers defined in MODULE_VADC.ACCPROT0.U
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   343   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   344  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   345  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   346      IfxVadc_Protection_channelControl0       = 0,   /**< \brief Access control for GxCHCTR0 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   347      IfxVadc_Protection_channelControl1       = 1,   /**< \brief Access control for GxCHCTR1 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   348      IfxVadc_Protection_channelControl2       = 2,   /**< \brief Access control for GxCHCTR2 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   349      IfxVadc_Protection_channelControl3       = 3,   /**< \brief Access control for GxCHCTR3 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   350      IfxVadc_Protection_channelControl4       = 4,   /**< \brief Access control for GxCHCTR4 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   351      IfxVadc_Protection_channelControl5       = 5,   /**< \brief Access control for GxCHCTR5 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   352      IfxVadc_Protection_channelControl6       = 6,   /**< \brief Access control for GxCHCTR6 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   353      IfxVadc_Protection_channelControl7       = 7,   /**< \brief Access control for GxCHCTR7 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   354      IfxVadc_Protection_channelControl8       = 8,   /**< \brief Access control for GxCHCTR8 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   355      IfxVadc_Protection_channelControl9       = 9,   /**< \brief Access control for GxCHCTR9 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   356      IfxVadc_Protection_channelControl10      = 10,  /**< \brief Access control for GxCHCTR10 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   357      IfxVadc_Protection_channelControl11      = 11,  /**< \brief Access control for GxCHCTR11 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   358      IfxVadc_Protection_channelControl12      = 12,  /**< \brief Access control for GxCHCTR12 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   359      IfxVadc_Protection_channelControl13      = 13,  /**< \brief Access control for GxCHCTR13 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   360      IfxVadc_Protection_channelControl14      = 14,  /**< \brief Access control for GxCHCTR14 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   361      IfxVadc_Protection_externalMultiplexer   = 15,  /**< \brief Access control for EMUXSEL, GxEMUXCTR */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   362      IfxVadc_Protection_initGroup0            = 16,  /**< \brief Access control for GxARBCFG, GxARBPR, GxCHASS, GxRRASS, GxICLASS0/1, GxSYNCTR */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   363      IfxVadc_Protection_initGroup1            = 17,  /**< \brief Access control for GxARBCFG, GxARBPR, GxCHASS, GxRRASS, GxICLASS0/1, GxSYNCTR */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   364      IfxVadc_Protection_initGroup2            = 18,  /**< \brief Access control for GxARBCFG, GxARBPR, GxCHASS, GxRRASS, GxICLASS0/1, GxSYNCTR */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   365      IfxVadc_Protection_initGroup3            = 19,  /**< \brief Access control for GxARBCFG, GxARBPR, GxCHASS, GxRRASS, GxICLASS0/1, GxSYNCTR */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   366      IfxVadc_Protection_initGroup4            = 20,  /**< \brief Access control for GxARBCFG, GxARBPR, GxCHASS, GxRRASS, GxICLASS0/1, GxSYNCTR */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   367      IfxVadc_Protection_initGroup5            = 21,  /**< \brief Access control for GxARBCFG, GxARBPR, GxCHASS, GxRRASS, GxICLASS0/1, GxSYNCTR */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   368      IfxVadc_Protection_initGroup6            = 22,  /**< \brief Access control for GxARBCFG, GxARBPR, GxCHASS, GxRRASS, GxICLASS0/1, GxSYNCTR */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   369      IfxVadc_Protection_initGroup7            = 23,  /**< \brief Access control for GxARBCFG, GxARBPR, GxCHASS, GxRRASS, GxICLASS0/1, GxSYNCTR */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   370      IfxVadc_Protection_initGroup8            = 24,  /**< \brief Access control for GxARBCFG, GxARBPR, GxCHASS, GxRRASS, GxICLASS0/1, GxSYNCTR */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   371      IfxVadc_Protection_initGroup9            = 25,  /**< \brief Access control for GxARBCFG, GxARBPR, GxCHASS, GxRRASS, GxICLASS0/1, GxSYNCTR */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   372      IfxVadc_Protection_initGroup10           = 26,  /**< \brief Access control for GxARBCFG, GxARBPR, GxCHASS, GxRRASS, GxICLASS0/1, GxSYNCTR */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   373      IfxVadc_Protection_initGroup11           = 27,  /**< \brief Access control for GxARBCFG, GxARBPR, GxCHASS, GxRRASS, GxICLASS0/1, GxSYNCTR */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   374      IfxVadc_Protection_initGroup12           = 28,  /**< \brief Access control for GxARBCFG, GxARBPR, GxCHASS, GxRRASS, GxICLASS0/1, GxSYNCTR */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   375      IfxVadc_Protection_initGroup13           = 29,  /**< \brief Access control for GxARBCFG, GxARBPR, GxCHASS, GxRRASS, GxICLASS0/1, GxSYNCTR */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   376      IfxVadc_Protection_initGroup14           = 30,  /**< \brief Access control for GxARBCFG, GxARBPR, GxCHASS, GxRRASS, GxICLASS0/1, GxSYNCTR */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   377      IfxVadc_Protection_globalConfig          = 31,  /**< \brief Access control for GLOBCFG */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   378      IfxVadc_Protection_serviceGroup0         = 32,  /**< \brief Access control for GxSEFLAG, GxSEVNP, GxCEFLAG, GxCEVNP0/1/2, GxREFLAG, GxREVNP0/1, GxSRACT */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   379      IfxVadc_Protection_serviceGroup1         = 33,  /**< \brief Access control for GxSEFLAG, GxSEVNP, GxCEFLAG, GxCEVNP0/1/2, GxREFLAG, GxREVNP0/1, GxSRACT */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   380      IfxVadc_Protection_serviceGroup2         = 34,  /**< \brief Access control for GxSEFLAG, GxSEVNP, GxCEFLAG, GxCEVNP0/1/2, GxREFLAG, GxREVNP0/1, GxSRACT */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   381      IfxVadc_Protection_serviceGroup3         = 35,  /**< \brief Access control for GxSEFLAG, GxSEVNP, GxCEFLAG, GxCEVNP0/1/2, GxREFLAG, GxREVNP0/1, GxSRACT */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   382      IfxVadc_Protection_serviceGroup4         = 36,  /**< \brief Access control for GxSEFLAG, GxSEVNP, GxCEFLAG, GxCEVNP0/1/2, GxREFLAG, GxREVNP0/1, GxSRACT */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   383      IfxVadc_Protection_serviceGroup5         = 37,  /**< \brief Access control for GxSEFLAG, GxSEVNP, GxCEFLAG, GxCEVNP0/1/2, GxREFLAG, GxREVNP0/1, GxSRACT */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   384      IfxVadc_Protection_serviceGroup6         = 38,  /**< \brief Access control for GxSEFLAG, GxSEVNP, GxCEFLAG, GxCEVNP0/1/2, GxREFLAG, GxREVNP0/1, GxSRACT */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   385      IfxVadc_Protection_serviceGroup7         = 39,  /**< \brief Access control for GxSEFLAG, GxSEVNP, GxCEFLAG, GxCEVNP0/1/2, GxREFLAG, GxREVNP0/1, GxSRACT */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   386      IfxVadc_Protection_serviceGroup8         = 40,  /**< \brief Access control for GxSEFLAG, GxSEVNP, GxCEFLAG, GxCEVNP0/1/2, GxREFLAG, GxREVNP0/1, GxSRACT */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   387      IfxVadc_Protection_serviceGroup9         = 41,  /**< \brief Access control for GxSEFLAG, GxSEVNP, GxCEFLAG, GxCEVNP0/1/2, GxREFLAG, GxREVNP0/1, GxSRACT */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   388      IfxVadc_Protection_serviceGroup10        = 42,  /**< \brief Access control for GxSEFLAG, GxSEVNP, GxCEFLAG, GxCEVNP0/1/2, GxREFLAG, GxREVNP0/1, GxSRACT */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   389      IfxVadc_Protection_serviceGroup11        = 43,  /**< \brief Access control for GxSEFLAG, GxSEVNP, GxCEFLAG, GxCEVNP0/1/2, GxREFLAG, GxREVNP0/1, GxSRACT */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   390      IfxVadc_Protection_serviceGroup12        = 44,  /**< \brief Access control for GxSEFLAG, GxSEVNP, GxCEFLAG, GxCEVNP0/1/2, GxREFLAG, GxREVNP0/1, GxSRACT */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   391      IfxVadc_Protection_serviceGroup13        = 45,  /**< \brief Access control for GxSEFLAG, GxSEVNP, GxCEFLAG, GxCEVNP0/1/2, GxREFLAG, GxREVNP0/1, GxSRACT */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   392      IfxVadc_Protection_serviceGroup14        = 46,  /**< \brief Access control for GxSEFLAG, GxSEVNP, GxCEFLAG, GxCEVNP0/1/2, GxREFLAG, GxREVNP0/1, GxSRACT */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   393      IfxVadc_Protection_testFunction          = 47,  /**< \brief Access control for GLOBTF */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   394      IfxVadc_Protection_resultRegisterGroup0  = 48,  /**< \brief Access control for GxRCRx(x=0,1,..,15), GxBOUND, GxRESx(x=0 .. 15) */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   395      IfxVadc_Protection_resultRegisterGroup1  = 49,  /**< \brief Access control for GxRCRx(x=0,1,..,15), GxBOUND, GxRESx(x=0 .. 15) */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   396      IfxVadc_Protection_resultRegisterGroup2  = 50,  /**< \brief Access control for GxRCRx(x=0,1,..,15), GxBOUND, GxRESx(x=0 .. 15) */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   397      IfxVadc_Protection_resultRegisterGroup3  = 51,  /**< \brief Access control for GxRCRx(x=0,1,..,15), GxBOUND, GxRESx(x=0 .. 15) */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   398      IfxVadc_Protection_resultRegisterGroup4  = 52,  /**< \brief Access control for GxRCRx(x=0,1,..,15), GxBOUND, GxRESx(x=0 .. 15) */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   399      IfxVadc_Protection_resultRegisterGroup5  = 53,  /**< \brief Access control for GxRCRx(x=0,1,..,15), GxBOUND, GxRESx(x=0 .. 15) */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   400      IfxVadc_Protection_resultRegisterGroup6  = 54,  /**< \brief Access control for GxRCRx(x=0,1,..,15), GxBOUND, GxRESx(x=0 .. 15) */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   401      IfxVadc_Protection_resultRegisterGroup7  = 55,  /**< \brief Access control for GxRCRx(x=0,1,..,15), GxBOUND, GxRESx(x=0 .. 15) */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   402      IfxVadc_Protection_resultRegisterGroup8  = 56,  /**< \brief Access control for GxRCRx(x=0,1,..,15), GxBOUND, GxRESx(x=0 .. 15) */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   403      IfxVadc_Protection_resultRegisterGroup9  = 57,  /**< \brief Access control for GxRCRx(x=0,1,..,15), GxBOUND, GxRESx(x=0 .. 15) */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   404      IfxVadc_Protection_resultRegisterGroup10 = 58,  /**< \brief Access control for GxRCRx(x=0,1,..,15), GxBOUND, GxRESx(x=0 .. 15) */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   405      IfxVadc_Protection_resultRegisterGroup11 = 59,  /**< \brief Access control for GxRCRx(x=0,1,..,15), GxBOUND, GxRESx(x=0 .. 15) */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   406      IfxVadc_Protection_resultRegisterGroup12 = 60,  /**< \brief Access control for GxRCRx(x=0,1,..,15), GxBOUND, GxRESx(x=0 .. 15) */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   407      IfxVadc_Protection_resultRegisterGroup13 = 61,  /**< \brief Access control for GxRCRx(x=0,1,..,15), GxBOUND, GxRESx(x=0 .. 15) */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   408      IfxVadc_Protection_resultRegisterGroup14 = 62   /**< \brief Access control for GxRCRx(x=0,1,..,15), GxBOUND, GxRESx(x=0 .. 15) */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   409  } IfxVadc_Protection;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   410  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   411  /** \brief Arbitration priority, Group x,defined in MODULE_VADC.G[x].ARBPR.PRIOy(x=0,1,...,11;y=0,1,2)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   412   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   413  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   414  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   415      IfxVadc_RequestSlotPriority_lowest  = 0, /**< \brief Lowest priority */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   416      IfxVadc_RequestSlotPriority_low     = 1, /**< \brief Lowpriority */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   417      IfxVadc_RequestSlotPriority_high    = 2, /**< \brief High priority */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   418      IfxVadc_RequestSlotPriority_highest = 3  /**< \brief Highest priority */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   419  } IfxVadc_RequestSlotPriority;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   420  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   421  /** \brief Request source start mode defined in MODULE_VADC.G[x].ARBPR.CSMy(x=0,1,...,11;y=0,1,2)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   422   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   423  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   424  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   425      IfxVadc_RequestSlotStartMode_waitForStart       = 0, /**< \brief Wait for start */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   426      IfxVadc_RequestSlotStartMode_cancelInjectRepeat = 1  /**< \brief Cancel-Inject-Repeat */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   427  } IfxVadc_RequestSlotStartMode;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   428  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   429  /** \brief Request sources
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   430   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   431  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   432  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   433      IfxVadc_RequestSource_queue      = 0, /**< \brief 8 stage Queue request */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   434      IfxVadc_RequestSource_scan       = 1, /**< \brief scan request */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   435      IfxVadc_RequestSource_background = 2  /**< \brief background scan request */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   436  } IfxVadc_RequestSource;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   437  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   438  /** \brief Enable/disable the sensitivity of the module to sleep signal\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   439   * Definition in Ifx_VADC.CLC.B.EDIS
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   440   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   441  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   442  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   443      IfxVadc_SleepMode_enable  = 0, /**< \brief enables sleep mode */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   444      IfxVadc_SleepMode_disable = 1  /**< \brief disables sleep mode */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   445  } IfxVadc_SleepMode;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   446  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   447  /** \brief Service Node defined in MODULE_VADC.G[x].SRACT.U(x= 0,1,..,11)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   448   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   449  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   450  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   451      IfxVadc_SrcNr_group0  = 0,  /**< \brief service request line 0 of group */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   452      IfxVadc_SrcNr_group1  = 1,  /**< \brief service request line 1 of group */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   453      IfxVadc_SrcNr_group2  = 2,  /**< \brief service request line 2 of group */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   454      IfxVadc_SrcNr_group3  = 3,  /**< \brief service request line 3 of group */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   455      IfxVadc_SrcNr_shared0 = 4,  /**< \brief Select shared service request line 0 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   456      IfxVadc_SrcNr_shared1 = 5,  /**< \brief Select shared service request line 1 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   457      IfxVadc_SrcNr_shared2 = 6,  /**< \brief Select shared service request line 2 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   458      IfxVadc_SrcNr_shared3 = 7   /**< \brief Select shared service request line 3 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   459  } IfxVadc_SrcNr;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   460  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   461  /** \brief API return values defined in
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   462   * MODULE_VADC.G[x].QSR0.U,MODULE_VADC.G[x].ASPND.U
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   463   * MODULE_VADC.BRSPND[x](x=0,1,...,11)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   464   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   465  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   466  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   467      IfxVadc_Status_noError              = 0, /**< \brief No error during api execution */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   468      IfxVadc_Status_notInitialised       = 1, /**< \brief Appropriate initialisation not done */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   469      IfxVadc_Status_invalidGroup         = 2, /**< \brief Invalid group number */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   470      IfxVadc_Status_invalidChannel       = 3, /**< \brief Invalid channel number */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   471      IfxVadc_Status_queueFull            = 4, /**< \brief Queue is full */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   472      IfxVadc_Status_noAccess             = 5, /**< \brief Access to the group/channel is disabled */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   473      IfxVadc_Status_channelsStillPending = 6  /**< \brief Conversion for some of the channels are still pending */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   474  } IfxVadc_Status;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   475  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   476  /** \brief trigger definition defined in MODULE_VADC.G[x].QCTRL0.XTMODE(x=0,1,..,11)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   477   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   478  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   479  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   480      IfxVadc_TriggerMode_noExternalTrigger = 0,  /**< \brief No external trigger */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   481      IfxVadc_TriggerMode_uponFallingEdge   = 1,  /**< \brief Trigger event upon a falling edge */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   482      IfxVadc_TriggerMode_uponRisingEdge    = 2,  /**< \brief Trigger event upon a rising edge */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   483      IfxVadc_TriggerMode_uponAnyEdge       = 3   /**< \brief Trigger event upon any edge */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   484  } IfxVadc_TriggerMode;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   485  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   486  /** \brief Trigger request source defined in MODULE_VADC.G[x].QCTRLy.XTSEL(x=0,1,..,11;y=0,1,..,7)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   487   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   488  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   489  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   490      IfxVadc_TriggerSource_0 = 0,      /**< \brief Input signal REQTRx_0  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   491      IfxVadc_TriggerSource_1,          /**< \brief Input signal REQTRx_1  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   492      IfxVadc_TriggerSource_2,          /**< \brief Input signal REQTRx_2  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   493      IfxVadc_TriggerSource_3,          /**< \brief Input signal REQTRx_3  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   494      IfxVadc_TriggerSource_4,          /**< \brief Input signal REQTRx_4  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   495      IfxVadc_TriggerSource_5,          /**< \brief Input signal REQTRx_5  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   496      IfxVadc_TriggerSource_6,          /**< \brief Input signal REQTRx_6  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   497      IfxVadc_TriggerSource_7,          /**< \brief Input signal REQTRx_7  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   498      IfxVadc_TriggerSource_8,          /**< \brief Input signal REQTRx_8  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   499      IfxVadc_TriggerSource_9,          /**< \brief Input signal REQTRx_9  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   500      IfxVadc_TriggerSource_10,         /**< \brief Input signal REQTRx_10  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   501      IfxVadc_TriggerSource_11,         /**< \brief Input signal REQTRx_11  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   502      IfxVadc_TriggerSource_12,         /**< \brief Input signal REQTRx_12  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   503      IfxVadc_TriggerSource_13,         /**< \brief Input signal REQTRx_13  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   504      IfxVadc_TriggerSource_14,         /**< \brief Input signal REQTRx_14  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   505      IfxVadc_TriggerSource_15          /**< \brief Input signal REQTRx_15  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   506  } IfxVadc_TriggerSource;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   507  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   508  /** \} */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   509  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   510  /** \addtogroup IfxLld_Vadc_Std_Background_Autoscan
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   511   * \{ */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   512  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   513  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   514  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   515  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   516  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   517  /** \brief access function to enable/disable  wait for read mode for result registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   518   * \param group pointer to the VADC group
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   519   * \param resultIdx result register index
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   520   * \param waitForRead wait for read mode enabled/disabled
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   521   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   522   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   523  IFX_INLINE void IfxVadc_configureWaitForReadMode(Ifx_VADC_G *group, uint32 resultIdx, boolean waitForRead);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   524  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   525  /** \brief access function to enable/disable  wait for read mode for global result register
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   526   * \param vadc pointer to the VADC
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   527   * \param waitForRead wait for read mode enabled/disabled
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   528   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   529   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   530  IFX_INLINE void IfxVadc_configureWaitForReadModeForGlobalResultRegister(Ifx_VADC *vadc, boolean waitForRead);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   531  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   532  /** \brief Enables the background sacn external trigger.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   533   * \param vadc pointer to the base of VADC registers.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   534   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   535   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   536  IFX_INLINE void IfxVadc_enableBackgroundScanSlotExternalTrigger(Ifx_VADC *vadc);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   537  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   538  /** \brief Gets the background scan gating mode.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   539   * \param vadc pointer to the base of VADC registers.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   540   * \return background scan gating mode.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   541   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   542  IFX_INLINE IfxVadc_GatingMode IfxVadc_getBackgroundScanGatingMode(Ifx_VADC *vadc);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   543  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   544  /** \brief Gets the gating input selection.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   545   * \param vadc pointer to the base of VADC registers.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   546   * \return background scan gating input selection.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   547   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   548  IFX_INLINE IfxVadc_GatingSource IfxVadc_getBackgroundScanGatingSource(Ifx_VADC *vadc);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   549  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   550  /** \brief Gets the requested background scan slot priority.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   551   * \param vadcG pointer to VADC group registers.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   552   * \return requested background scan slot priority.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   553   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   554  IFX_INLINE IfxVadc_RequestSlotPriority IfxVadc_getBackgroundScanSlotPriority(Ifx_VADC_G *vadcG);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   555  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   556  /** \brief Gets the requested background scan slot start mode.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   557   * \param vadcG pointer to VADC group registers.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   558   * \return requested background scan slot start mode.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   559   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   560  IFX_INLINE IfxVadc_RequestSlotStartMode IfxVadc_getBackgroundScanSlotStartMode(Ifx_VADC_G *vadcG);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   561  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   562  /** \brief Gets the background scan trigger input.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   563   * \param vadc pointer to the base of VADC registers.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   564   * \return Gets the background scan external trigger source.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   565   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   566  IFX_INLINE IfxVadc_TriggerSource IfxVadc_getBackgroundScanTriggerInput(Ifx_VADC *vadc);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   567  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   568  /** \brief Gets the background scan external trigger mode.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   569   * \param vadc pointer to the base of VADC registers.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   570   * \return background scan external trigger mode.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   571   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   572  IFX_INLINE IfxVadc_TriggerMode IfxVadc_getBackgroundScanTriggerMode(Ifx_VADC *vadc);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   573  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   574  /** \brief get global input class resolution
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   575   * \param vadc Pointer to the VADC Group
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   576   * \param inputClassNum global input class number
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   577   * \return ADC input class channel resolution.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   578   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   579  IFX_INLINE IfxVadc_ChannelResolution IfxVadc_getGlobalResolution(Ifx_VADC *vadc, uint8 inputClassNum);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   580  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   581  /** \brief return conversion result stored in the Global result Register
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   582   * \param vadc pointer to the VADC module
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   583   * \return global result register
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   584   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   585   * \code
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   586   * Ifx_VADC* vadc = &MODULE_VADC; // module pointer
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   587   * IfxVadc_GroupId groupId = IfxVadc_GroupId0; // for group 0
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   588   * uint32 channels = (1 << 5) | (1 << 2); // enable channel #5 and #2
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   589   * uint32 mask = (1 << 7) | (1 << 5) | (1 << 2); // modify the selection for channel #7, #5 and #2; channel #7 will be disabled
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   590   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   591   * //confiure wait for read mode for global result register
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   592   * IfxVadc_configureWaitForReadModeForGlobalResultRegister(vadc, TRUE);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   593   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   594   * // configure background scan
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   595   * IfxVadc_setBackgroundScan(vadc, groupId, channels, mask);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   596   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   597   * // enable auto scan
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   598   * IfxVadc_SetAutoBackgroundScan(vadc, TRUE);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   599   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   600   * // start the background scan
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   601   * IfxVadc_startBackgroundScan(vadc);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   602   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   603   * Ifx_VADC_GLOBRES result;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   604   * result = IfxVadc_getGlobalResult (vadc);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   605   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   606   * \endcode
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   607   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   608   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   609  IFX_INLINE Ifx_VADC_GLOBRES IfxVadc_getGlobalResult(Ifx_VADC *vadc);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   610  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   611  /** \brief get global input class sample time in sec
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   612   * \param vadc Pointer to the VADC Group Register space
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   613   * \param inputClassNum ADC input class number
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   614   * \param analogFrequency ADC module analog frequency in Hz.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   615   * \return ADC input class channel sample time in sec.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   616   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   617  IFX_INLINE float32 IfxVadc_getGlobalSampleTime(Ifx_VADC *vadc, uint8 inputClassNum, float32 analogFrequency);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   618  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   619  /** \brief Get conversion result for the group
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   620   * \param group pointer to the VADC group
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   621   * \param results pointer to scaled conversion results
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   622   * \param resultOffset offset for the first result
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   623   * \param numResults number of results
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   624   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   625   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   626   * \code
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   627   * Ifx_VADC* vadc = &MODULE_VADC
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   628   * Ifx_VADC_G* group = &MODULE_VADC.G[0]; // for group 0
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   629   * uint32 channels = (1 << 5) | (1 << 2); // enable channel #5 and #2
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   630   * uint32 mask = (1 << 7) | (1 << 5) | (1 << 2); // modify the selection for channel #7, #5 and #2; channel #7 will be disabled
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   631   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   632   * //confiure wait for read mode for global result register
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   633   * IfxVadc_configureWaitForReadMode(group,IfxVadc_ChannelResult0, TRUE);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   634   * IfxVadc_configureWaitForReadMode(group,IfxVadc_ChannelResult1, TRUE);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   635   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   636   * // configure scan
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   637   * IfxVadc_setScan(group, channels, mask);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   638   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   639   * // enable auto scan
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   640   * IfxVadc_setAutoScan(group, TRUE);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   641   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   642   * // start the scan
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   643   * IfxVadc_startScan(group);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   644   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   645   * // wait for conversion to finish
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   646   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   647   * // fetch the 2 results of conversion for group 0
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   648   * Ifx_VADC_RES results[10];
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   649   * result = IfxVadc_getGroupResult(group, results, 0, 2);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   650   * \endcode
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   651   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   652   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   653  IFX_INLINE void IfxVadc_getGroupResult(Ifx_VADC_G *group, Ifx_VADC_RES *results, uint32 resultOffset, uint32 numResults);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   654  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   655  /** \brief Get conversion result (Function does not care about the alignment)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   656   * value = raw * gain + offset.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   657   * \param group pointer to the VADC group
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   658   * \param resultIdx result register index
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   659   * \return scaled Conversion result
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   660   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   661   * \code
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   662   * Ifx_VADC_G* group = &MODULE_VADC.G[0]; // for group 0
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   663   * uint32 channels = (1 << 5) | (1 << 2); // enable channel #5 and #2
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   664   * uint32 mask = (1 << 7) | (1 << 5) | (1 << 2); // modify the selection for channel #7, #5 and #2; channel #7 will be disabled
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   665   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   666   * //confiure wait for read mode for global result register
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   667   * IfxVadc_configureWaitForReadMode(group,IfxVadc_ChannelResult0, TRUE);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   668   * IfxVadc_configureWaitForReadMode(group,IfxVadc_ChannelResult1, TRUE);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   669   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   670   * // configure scan
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   671   * IfxVadc_setScan(group, channels, mask);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   672   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   673   * // enable auto scan
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   674   * IfxVadc_setAutoScan(group, TRUE);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   675   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   676   * // start the scan
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   677   * IfxVadc_startScan(group);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   678   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   679   * // wait for conversion to finish
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   680   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   681   * // fetch the result of conversion from result register 0 for group 0
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   682   * Ifx_VADC_RES result;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   683   * result = IfxVadc_getResult(group, IfxVadc_ChannelResult0);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   684   * \endcode
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   685   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   686   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   687  IFX_INLINE Ifx_VADC_RES IfxVadc_getResult(Ifx_VADC_G *group, uint32 resultIdx);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   688  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   689  /** \brief Returns the auto background scan status.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   690   * \param vadc pointer to the base of VADC registers.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   691   * \return TRUE if enabled otherwise FALSE.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   692   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   693  IFX_INLINE boolean IfxVadc_isAutoBackgroundScanEnabled(Ifx_VADC *vadc);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   694  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   695  /** \brief Returns the background scan slot requested status.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   696   * \param vadcG pointer to VADC group registers.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   697   * \return background scan slot requested status.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   698   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   699  IFX_INLINE boolean IfxVadc_isRequestBackgroundScanSlotEnabled(Ifx_VADC_G *vadcG);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   700  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   701  /** \brief Enables/Disables continuous background auto scan
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   702   * \param vadc pointer to the base of VADC registers.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   703   * \param autoBackgroundScanEnable whether auto background scan enabled or not.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   704   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   705   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   706  IFX_INLINE void IfxVadc_setAutoBackgroundScan(Ifx_VADC *vadc, boolean autoBackgroundScanEnable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   707  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   708  /** \brief configures a background scan; can also stop autoscan if all channels are 0
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   709   * \param vadc pointer to the VADC module registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   710   * \param groupId group index
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   711   * \param channels specifies the channels which should be enabled/disabled
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   712   * \param mask specifies the channels which should be modified
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   713   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   714   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   715   * Background scan can be enabled/disabled for the given channels which are selected with the mask
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   716   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   717   * \code
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   718   * Ifx_VADC* vadc = &MODULE_VADC; // module pointer
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   719   * IfxVadc_GroupId groupId = IfxVadc_GroupId0; // for group 0
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   720   * uint32 channels = (1 << 5) | (1 << 2); // enable channel #5 and #2
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   721   * uint32 mask = (1 << 7) | (1 << 5) | (1 << 2); // modify the selection for channel #7, #5 and #2; channel #7 will be disabled
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   722   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   723   * //confiure wait for read mode for global result register
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   724   * IfxVadc_configureWaitForReadModeForGlobalResultRegister(vadc, TRUE);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   725   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   726   * // configure background scan
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   727   * IfxVadc_setBackgroundScan(vadc, groupId, channels, mask);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   728   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   729   * // enable auto scan
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   730   * IfxVadc_setAutoBackgroundScan(vadc, TRUE);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   731   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   732   * // start the background scan
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   733   * IfxVadc_startBackgroundScan(vadc);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   734   * \endcode
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   735   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   736   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   737  IFX_INLINE void IfxVadc_setBackgroundScan(Ifx_VADC *vadc, IfxVadc_GroupId groupId, uint32 channels, uint32 mask);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   738  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   739  /** \brief Sets the background scan slot gating configurations.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   740   * \param vadc pointer to the base of VADC registers.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   741   * \param gatingSource gate input for group.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   742   * \param gatingMode gating mode. High level, Low Level  or Gating disabled.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   743   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   744   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   745  IFX_INLINE void IfxVadc_setBackgroundScanSlotGatingConfig(Ifx_VADC *vadc, IfxVadc_GatingSource gatingSource, IfxVadc_GatingMode gatingMode);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   746  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   747  /** \brief Sets the background scan exteranal trigger operating configurations.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   748   * \param vadc pointer to the base of VADC registers.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   749   * \param triggerMode trigger mode. Rising, falling any edge leads to an trigger event.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   750   * \param triggerSource trigger input for group.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   751   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   752   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   753  IFX_INLINE void IfxVadc_setBackgroundScanSlotTriggerConfig(Ifx_VADC *vadc, IfxVadc_TriggerMode triggerMode, IfxVadc_TriggerSource triggerSource);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   754  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   755  /** \brief Starts a background scan
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   756   * \param vadc pointer to the VADC module
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   757   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   758   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   759   * \see IfxVadc_setBackgroundScan
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   760   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   761   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   762  IFX_INLINE void IfxVadc_startBackgroundScan(Ifx_VADC *vadc);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   763  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   764  /** \brief Get debug conversion result
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   765   * \param group pointer to the VADC group
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   766   * \param resultIdx result register index
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   767   * \return Debug conversion result.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   768   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   769  IFX_INLINE Ifx_VADC_RESD IfxVadc_getDebugResult(Ifx_VADC_G *group, uint32 resultIdx);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   770  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   771  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   772  /*-------------------------Global Function Prototypes-------------------------*/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   773  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   774  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   775  /** \brief Gives the background scan status for a group
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   776   * \param vadc pointer to the VADC module
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   777   * \return IfxVadc_Status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   778   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   779  IFX_EXTERN IfxVadc_Status IfxVadc_getBackgroundScanStatus(Ifx_VADC *vadc);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   780  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   781  /** \brief Get conversion result (Function does not care about the alignment)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   782   * value = raw * gain + offset.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   783   * \param vadc VADC module pointer
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   784   * \param group pointer to the VADC group
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   785   * \param channel channel Id
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   786   * \param sourceType type of request source
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   787   * \return scaled Conversion result
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   788   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   789   * \code
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   790   * Ifx_VADC vadc;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   791   * vadc.vadc = &MODULE_VADC;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   792   * Ifx_VADC_G* group = &MODULE_VADC.G[0]; // for group 0
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   793   * uint32 channels = (1 << 5) | (1 << 2); // enable channel #5 and #2
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   794   * uint32 mask = (1 << 7) | (1 << 5) | (1 << 2); // modify the selection for channel #7, #5 and #2; channel #7 will be disabled
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   795   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   796   * //confiure wait for read mode for global result register
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   797   * IfxVadc_configureWaitForReadMode(group,IfxVadc_ChannelResult0, TRUE);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   798   * IfxVadc_configureWaitForReadMode(group,IfxVadc_ChannelResult1, TRUE);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   799   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   800   * // configure scan
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   801   * IfxVadc_setScan(group, channels, mask);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   802   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   803   * // start the scan
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   804   * IfxVadc_startScan(group);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   805   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   806   * // wait for conversion to finish
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   807   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   808   * // fetch the result of conversion for channel 2 of group 0
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   809   * Ifx_VADC_RESresult2;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   810   * result = IfxVadc_getResultBasedOnRequestSource(&vadc, group, IfxVadc_ChannelId2, IfxVadc_RequestSource_scan);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   811   * Ifx_VADC_RESresult5;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   812   * result = IfxVadc_getResultBasedOnRequestSource(&vadc, group, IfxVadc_ChannelId5, IfxVadc_RequestSource_scan);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   813   * \endcode
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   814   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   815   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   816  IFX_EXTERN Ifx_VADC_RES IfxVadc_getResultBasedOnRequestSource(Ifx_VADC *vadc, Ifx_VADC_G *group, IfxVadc_ChannelId channel, IfxVadc_RequestSource sourceType);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   817  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   818  /** \} */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   819  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   820  /** \addtogroup IfxLld_Vadc_Std_ChannelScan
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   821   * \{ */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   822  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   823  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   824  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   825  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   826  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   827  /** \brief Disables the scan slot external trigger.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   828   * \param vadcG pointer to VADC group registers.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   829   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   830   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   831  IFX_INLINE void IfxVadc_disableScanSlotExternalTrigger(Ifx_VADC_G *vadcG);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   832  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   833  /** \brief Enables the scan slot external trigger.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   834   * \param vadcG pointer to VADC group registers.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   835   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   836   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   837  IFX_INLINE void IfxVadc_enableScanSlotExternalTrigger(Ifx_VADC_G *vadcG);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   838  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   839  /** \brief Gets the request scan slot gating mode.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   840   * \param vadcG pointer to VADC group registers.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   841   * \return requested scan slot gating mode.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   842   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   843  IFX_INLINE IfxVadc_GatingMode IfxVadc_getScanSlotGatingMode(Ifx_VADC_G *vadcG);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   844  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   845  /** \brief Gets the request scan slot gating input.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   846   * \param vadcG pointer to VADC group registers.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   847   * \return request scan slot gating input.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   848   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   849  IFX_INLINE IfxVadc_GatingSource IfxVadc_getScanSlotGatingSource(Ifx_VADC_G *vadcG);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   850  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   851  /** \brief Gets the request scan slot priority.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   852   * \param vadcG pointer to VADC group registers.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   853   * \return request scan slot priority.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   854   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   855  IFX_INLINE IfxVadc_RequestSlotPriority IfxVadc_getScanSlotPriority(Ifx_VADC_G *vadcG);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   856  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   857  /** \brief Gets the request scan slot start mode.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   858   * \param vadcG pointer to VADC group registers.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   859   * \return request scan slot start mode.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   860   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   861  IFX_INLINE IfxVadc_RequestSlotStartMode IfxVadc_getScanSlotStartMode(Ifx_VADC_G *vadcG);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   862  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   863  /** \brief Gets the requested scan slot trigger input.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   864   * \param vadcG pointer to VADC group registers.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   865   * \return requested scan slot trigger input.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   866   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   867  IFX_INLINE IfxVadc_TriggerSource IfxVadc_getScanSlotTriggerInput(Ifx_VADC_G *vadcG);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   868  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   869  /** \brief Gets the requested scan slot trigger mode.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   870   * \param vadcG pointer to VADC group registers.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   871   * \return requested scan slot trigger mode.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   872   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   873  IFX_INLINE IfxVadc_TriggerMode IfxVadc_getScanSlotTriggerMode(Ifx_VADC_G *vadcG);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   874  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   875  /** \brief Gets the auto scan enable status.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   876   * \param vadcG pointer to VADC group registers.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   877   * \return TRUE if auto scan enabled otherwise FALSE.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   878   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   879  IFX_INLINE boolean IfxVadc_isAutoScanEnabled(Ifx_VADC_G *vadcG);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   880  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   881  /** \brief Returns the scan slot requested status.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   882   * \param vadcG pointer to VADC group registers.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   883   * \return TRUE if scan slot request enabled otherwise FALSE.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   884   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   885  IFX_INLINE boolean IfxVadc_isRequestScanSlotEnabled(Ifx_VADC_G *vadcG);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   886  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   887  /** \brief Enables/Disables continuous auto scan
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   888   * \param vadcG pointer to VADC group registers.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   889   * \param autoscanEnable whether autoscan is enabled or not.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   890   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   891   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   892  IFX_INLINE void IfxVadc_setAutoScan(Ifx_VADC_G *vadcG, boolean autoscanEnable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   893  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   894  /** \brief Sets the scan slot gating configuration.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   895   * \param vadcG pointer to VADC group registers.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   896   * \param gatingSource gate input for group.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   897   * \param gatingMode gating mode. High level, Low Level  or Gating disabled.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   898   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   899   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   900  IFX_INLINE void IfxVadc_setScanSlotGatingConfig(Ifx_VADC_G *vadcG, IfxVadc_GatingSource gatingSource, IfxVadc_GatingMode gatingMode);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   901  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   902  /** \brief Sets the scan slot trigger operating configurations.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   903   * \param vadcG pointer to VADC group registers.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   904   * \param triggerMode trigger mode. Rising, falling any edge leads to an trigger event.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   905   * \param triggerSource trigger input for group.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   906   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   907   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   908  IFX_INLINE void IfxVadc_setScanSlotTriggerConfig(Ifx_VADC_G *vadcG, IfxVadc_TriggerMode triggerMode, IfxVadc_TriggerSource triggerSource);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   909  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   910  /** \brief Starts an autoscan on the specified group
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   911   * \param group pointer to the VADC group
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   912   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   913   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   914   * See \ref IfxVadc_setScan
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   915   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   916   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   917  IFX_INLINE void IfxVadc_startScan(Ifx_VADC_G *group);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   918  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   919  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   920  /*-------------------------Global Function Prototypes-------------------------*/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   921  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   922  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   923  /** \brief Gives the scan status for a group
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   924   * \param group pointer to the VADC group
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   925   * \return IfxVadc_Status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   926   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   927  IFX_EXTERN IfxVadc_Status IfxVadc_getScanStatus(Ifx_VADC_G *group);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   928  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   929  /** \brief Configures an (auto-)scan
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   930   * \param group pointer to the VADC group
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   931   * \param channels specifies the channels which should be enabled/disabled
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   932   * \param mask specifies the channels which should be modified
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   933   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   934   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   935   * (Auto-)Scan can be enabled/disabled for the given channels which are selected with the mask
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   936   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   937   * \code
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   938   * Ifx_VADC_G* group = &MODULE_VADC.G[0]; // for group 0
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   939   * uint32 channels = (1 << 5) | (1 << 2); // enable channel #5 and #2
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   940   * uint32 mask = (1 << 7) | (1 << 5) | (1 << 2); // modify the selection for channel #7, #5 and #2; channel #7 will be disabled
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   941   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   942   * // configure scan
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   943   * IfxVadc_setScan(group, channels, mask);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   944   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   945   * // enable Auto-Scan
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   946   * IfxVadc_setAutoScan(group, TRUE);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   947   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   948   * // start the scan
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   949   * IfxVadc_startScan(group);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   950   * \endcode
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   951   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   952   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   953  IFX_EXTERN void IfxVadc_setScan(Ifx_VADC_G *group, uint32 channels, uint32 mask);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   954  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   955  /** \} */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   956  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   957  /** \addtogroup IfxLld_Vadc_Std_QueueRequest
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   958   * \{ */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   959  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   960  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   961  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   962  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   963  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   964  /** \brief Add an entry to the queue of a group for the specified channel with the following options set:
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   965   * refill incase of aborted conversion
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   966   * source interrupt enable/disable
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   967   * external trigger control of the aborted conversion
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   968   * \param group pointer to the VADC group
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   969   * \param channel specifies channel Id
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   970   * \param options specifies the refill, source interrupt enable/disable and external trigger control selection
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   971   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   972   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   973   * \code
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   974   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   975   * Ifx_VADC_G* group = &MODULE_VADC.G[0]; // for group 0
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   976   * IfxVadc_ChannelId channel = 1; // for channel 1
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   977   * // Add channel 1 to queue of group 0 with the refill turned on
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   978   * IfxVadc_addToQueue(qroup, channel, (1<<IFX_VADC_G_QBUR0_RF_OFF));
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   979   * \endcode
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   980   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   981   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   982  IFX_INLINE void IfxVadc_addToQueue(Ifx_VADC_G *group, IfxVadc_ChannelId channel, uint32 options);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   983  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   984  /** \brief Clears all the queue entries including backup stage.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   985   * \param vadcG pointer to VADC group registers.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   986   * \param flushQueue Whether queue is cleared or not.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   987   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   988   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   989  IFX_INLINE void IfxVadc_clearQueue(Ifx_VADC_G *vadcG, boolean flushQueue);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   990  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   991  /** \brief Disables the external trigger.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   992   * \param vadcG pointer to VADC group registers.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   993   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   994   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   995  IFX_INLINE void IfxVadc_disableQueueSlotExternalTrigger(Ifx_VADC_G *vadcG);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   996  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   997  /** \brief Enables the external trigger.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   998   * \param vadcG pointer to VADC group registers.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   999   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1000   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1001  IFX_INLINE void IfxVadc_enableQueueSlotExternalTrigger(Ifx_VADC_G *vadcG);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1002  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1003  /** \brief Gets the requested queue slot gating mode.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1004   * \param vadcG pointer to VADC group registers.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1005   * \return requested queue slot gating mode.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1006   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1007  IFX_INLINE IfxVadc_GatingMode IfxVadc_getQueueSlotGatingMode(Ifx_VADC_G *vadcG);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1008  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1009  /** \brief Gets the requested queue slot gating input.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1010   * \param vadcG pointer to VADC group registers.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1011   * \return requested queue slot gating input.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1012   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1013  IFX_INLINE IfxVadc_GatingSource IfxVadc_getQueueSlotGatingSource(Ifx_VADC_G *vadcG);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1014  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1015  /** \brief Gets the request queue slot priority.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1016   * \param vadcG pointer to VADC group registers.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1017   * \return requested queue slot priority.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1018   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1019  IFX_INLINE IfxVadc_RequestSlotPriority IfxVadc_getQueueSlotPriority(Ifx_VADC_G *vadcG);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1020  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1021  /** \brief Gets the requested queue slot start mode.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1022   * \param vadcG pointer to VADC group registers.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1023   * \return requested queue slot start mode.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1024   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1025  IFX_INLINE IfxVadc_RequestSlotStartMode IfxVadc_getQueueSlotStartMode(Ifx_VADC_G *vadcG);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1026  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1027  /** \brief Gets the requested queue slot trigger input.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1028   * \param vadcG pointer to VADC group registers.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1029   * \return requested queue slot trigger input.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1030   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1031  IFX_INLINE IfxVadc_TriggerSource IfxVadc_getQueueSlotTriggerInput(Ifx_VADC_G *vadcG);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1032  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1033  /** \brief Gets the requested queue slot trigger mode.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1034   * \param vadcG pointer to VADC group registers.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1035   * \return requested queue slot trigger mode.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1036   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1037  IFX_INLINE IfxVadc_TriggerMode IfxVadc_getQueueSlotTriggerMode(Ifx_VADC_G *vadcG);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1038  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1039  /** \brief Returns the queue slot requested status.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1040   * \param vadcG pointer to VADC group registers.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1041   * \return TRUE if queue slot request enabled otherwise FALSE.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1042   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1043  IFX_INLINE boolean IfxVadc_isRequestQueueSlotEnabled(Ifx_VADC_G *vadcG);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1044  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1045  /** \brief Sets the gating configurations.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1046   * \param vadcG pointer to VADC group registers.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1047   * \param gatingSource gate input for group.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1048   * \param gatingMode gating mode. High level, Low Level  or Gating disabled.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1049   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1050   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1051  IFX_INLINE void IfxVadc_setQueueSlotGatingConfig(Ifx_VADC_G *vadcG, IfxVadc_GatingSource gatingSource, IfxVadc_GatingMode gatingMode);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1052  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1053  /** \brief Sets the trigger operating configurations.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1054   * \param vadcG pointer to VADC group registers.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1055   * \param triggerMode trigger mode. Rising, falling any edge leads to an trigger event.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1056   * \param triggerSource trigger input for group.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1057   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1058   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1059  IFX_INLINE void IfxVadc_setQueueSlotTriggerOperatingConfig(Ifx_VADC_G *vadcG, IfxVadc_TriggerMode triggerMode, IfxVadc_TriggerSource triggerSource);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1060  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1061  /** \brief Starts a queue of a group by generating a trigger event through software
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1062   * \param group pointer to the VADC group
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1063   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1064   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1065  IFX_INLINE void IfxVadc_startQueue(Ifx_VADC_G *group);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1066  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1067  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1068  /*-------------------------Global Function Prototypes-------------------------*/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1069  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1070  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1071  /** \brief Gives the status of the Queue of a group by returning non zero value if the Queue is full
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1072   * \param group pointer to the VADC group
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1073   * \return status of the Queue
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1074   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1075   * \code
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1076   * Ifx_VADC_G* group = &MODULE_VADC.G[0]; // for group 0
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1077   * boolean queueFull = (IfxVadc_getQueueStatus(group)==IfxVadc_Status_queueFull)?TRUE:FALSE; // get Queue status for group 0
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1078   * \endcode
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1079   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1080   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1081  IFX_EXTERN IfxVadc_Status IfxVadc_getQueueStatus(Ifx_VADC_G *group);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1082  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1083  /** \} */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1084  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1085  /** \addtogroup IfxLld_Vadc_Std_IO
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1086   * \{ */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1087  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1088  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1089  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1090  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1091  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1092  /** \brief Initializes a EMUX output
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1093   * \param emux the Emux Pin which should be configured
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1094   * \param outputMode the pin output mode which should be configured
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1095   * \param padDriver the pad driver mode which should be configured
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1096   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1097   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1098  IFX_INLINE void IfxVadc_initEmuxPin(const IfxVadc_Emux_Out *emux, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1099  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1100  /** \brief Initializes a GxBFL output
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1101   * \param gxBfl the GxBFL Pin which should be configured
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1102   * \param outputMode the pin output mode which should be configured
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1103   * \param padDriver the pad driver mode which should be configured
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1104   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1105   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1106  IFX_INLINE void IfxVadc_initGxBflPin(const IfxVadc_GxBfl_Out *gxBfl, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1107  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1108  /** \} */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1109  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1110  /** \addtogroup IfxLld_Vadc_Std_Frequency
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1111   * \{ */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1112  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1113  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1114  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1115  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1116  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1117  /** \brief Calculate the time using analog frequency.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1118   * \param analogFrequency analog frequency in Hz.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1119   * \param sampleTime sample time in sec.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1120   * \return sample time in sec.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1121   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1122  IFX_INLINE uint32 IfxVadc_calculateSampleTime(float32 analogFrequency, float32 sampleTime);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1123  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1124  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1125  /*-------------------------Global Function Prototypes-------------------------*/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1126  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1127  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1128  /** \brief Returns the configured Fadci VADC analog clock frequency in Hz.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1129   * \param vadc pointer to the base of VADC registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1130   * \return Returns the configured Fadci VADC analog clock frequency in Hz.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1131   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1132  IFX_EXTERN float32 IfxVadc_getAdcAnalogFrequency(Ifx_VADC *vadc);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1133  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1134  /** \brief Returns the configured Fadcd VADC digital clock frequency in Hz.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1135   * \param vadc pointer to the base of VADC registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1136   * \return Returns the configured Fadcd VADC digital clock frequency in Hz.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1137   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1138  IFX_EXTERN float32 IfxVadc_getAdcDigitalFrequency(Ifx_VADC *vadc);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1139  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1140  /** \} */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1141  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1142  /** \addtogroup IfxLld_Vadc_Std_Group
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1143   * \{ */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1144  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1145  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1146  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1147  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1148  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1149  /** \brief Clears the all group requests.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1150   * \param vadcG pointer to VADC group registers.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1151   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1152   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1153  IFX_INLINE void IfxVadc_clearAllResultRequests(Ifx_VADC_G *vadcG);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1154  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1155  /** \brief Gets the ADC group arbitration round length.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1156   * \param vadcG pointer to VADC group registers.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1157   * \return ADC group arbitration round length.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1158   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1159  IFX_INLINE IfxVadc_ArbitrationRounds IfxVadc_getArbiterRoundLength(Ifx_VADC_G *vadcG);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1160  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1161  /** \brief Gets the channel esult service request node pointer 0.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1162   * \param vadcG pointer to VADC group registers.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1163   * \return channel result service request node pointer 0.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1164   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1165  IFX_INLINE Ifx_VADC_G_REVNP0 IfxVadc_getChannelResultServiceRequestNodePointer0(Ifx_VADC_G *vadcG);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1166  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1167  /** \brief Gets the channel esult service request node pointer 1.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1168   * \param vadcG pointer to VADC group registers.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1169   * \return channel result service request node pointer 1.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1170   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1171  IFX_INLINE Ifx_VADC_G_REVNP1 IfxVadc_getChannelResultServiceRequestNodePointer1(Ifx_VADC_G *vadcG);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1172  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1173  /** \brief Gets the channel service request node pointer.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1174   * \param vadcG pointer to VADC group registers.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1175   * \return channel service request node pointer.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1176   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1177  IFX_INLINE Ifx_VADC_G_CEVNP0 IfxVadc_getChannelServiceRequestNodePointer0(Ifx_VADC_G *vadcG);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1178  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1179  /** \brief Gets the configured master index.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1180   * \param vadcG pointer to VADC group registers.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1181   * \return configured master kernel index.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1182   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1183  IFX_INLINE uint8 IfxVadc_getMasterIndex(Ifx_VADC_G *vadcG);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1184  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1185  /** \brief Resets the ADC group.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1186   * \param vadcG pointer to VADC group registers.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1187   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1188   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1189  IFX_INLINE void IfxVadc_resetGroup(Ifx_VADC_G *vadcG);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1190  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1191  /** \brief Sets analog converter group number.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1192   * \param vadcG pointer to VADC group registers.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1193   * \param analogConverterMode group analog converter mode.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1194   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1195   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1196  IFX_INLINE void IfxVadc_setAnalogConvertControl(Ifx_VADC_G *vadcG, IfxVadc_AnalogConverterMode analogConverterMode);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1197  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1198  /** \brief Sets the arbiter round length.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1199   * \param vadcG pointer to VADC group registers.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1200   * \param arbiterRoundLength arbiter round length.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1201   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1202   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1203  IFX_INLINE void IfxVadc_setArbitrationRoundLength(Ifx_VADC_G *vadcG, IfxVadc_ArbitrationRounds arbiterRoundLength);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1204  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1205  /** \brief Sets the ADC input class channel resolution.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1206   * \param vadcG pointer to VADC group registers.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1207   * \param inputClassNum input class number.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1208   * \param resolution ADC input class channel resolution.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1209   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1210   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1211  IFX_INLINE void IfxVadc_setGroupResolution(Ifx_VADC_G *vadcG, uint8 inputClassNum, IfxVadc_ChannelResolution resolution);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1212  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1213  /** \brief Sets the ADC input class sample time.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1214   * \param vadcG pointer to VADC group registers.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1215   * \param inputClassNum input class number.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1216   * \param analogFrequency ADC analog frequency in Hz.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1217   * \param sampleTime request sample time in sec for input class.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1218   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1219   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1220  IFX_INLINE void IfxVadc_setGroupSampleTime(Ifx_VADC_G *vadcG, uint8 inputClassNum, float32 analogFrequency, float32 sampleTime);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1221  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1222  /** \brief Sets the master index.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1223   * \param vadcG pointer to VADC group registers.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1224   * \param masterIndex master index.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1225   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1226   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1227  IFX_INLINE void IfxVadc_setMasterIndex(Ifx_VADC_G *vadcG, uint8 masterIndex);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1228  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1229  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1230  /*-------------------------Global Function Prototypes-------------------------*/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1231  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1232  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1233  /** \brief Sets the Arbiter slot configurations.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1234   * \param vadcG pointer to VADC group registers.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1235   * \param slotEnable enable/disable of slot.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1236   * \param prio channel request priority.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1237   * \param mode Channel Slot start mode.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1238   * \param slot channel slot Request source.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1239   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1240   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1241  IFX_EXTERN void IfxVadc_setArbiterPriority(Ifx_VADC_G *vadcG, boolean slotEnable, IfxVadc_RequestSlotPriority prio, IfxVadc_RequestSlotStartMode mode, IfxVadc_RequestSource slot);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1242  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1243  /** \} */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1244  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1245  /** \addtogroup IfxLld_Vadc_Std_Module
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1246   * \{ */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1247  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1248  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1249  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1250  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1251  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1252  /** \brief Disable VADC Module
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1253   * \param vadc Pointer to VADC Module
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1254   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1255   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1256  IFX_INLINE void IfxVadc_disableModule(Ifx_VADC *vadc);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1257  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1258  /** \brief Enable VADC kernel.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1259   * \param vadc pointer to the base of VADC registers.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1260   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1261   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1262  IFX_INLINE void IfxVadc_enableModule(Ifx_VADC *vadc);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1263  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1264  /** \brief gets ADC Calibration Flag CAL status.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1265   * \param vadc pointer to VADC group registers.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1266   * \param adcCalGroupNum ADC CAL group number.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1267   * \return CAL group status.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1268   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1269  IFX_INLINE uint8 IfxVadc_getAdcCalibrationActiveState(Ifx_VADC *vadc, uint8 adcCalGroupNum);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1270  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1271  /** \brief Gets the global control configuration value.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1272   * \param vadc pointer to the base of VADC registers.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1273   * \return global control configuration value.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1274   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1275  IFX_INLINE Ifx_VADC_GLOBCFG IfxVadc_getGlobalConfigValue(Ifx_VADC *vadc);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1276  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1277  /** \brief get SUCAL bit field status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1278   * \param vadc Pointer to VADC Module
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1279   * \return Indicate the start-up calibration phase
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1280   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1281  IFX_INLINE boolean IfxVadc_getStartupCalibration(Ifx_VADC *vadc);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1282  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1283  /** \brief initiates the calibration pulse phase.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1284   * \param vadc pointer to the base of VADC registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1285   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1286   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1287  IFX_INLINE void IfxVadc_initiateStartupCalibration(Ifx_VADC *vadc);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1288  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1289  /** \brief Sets the channel conversion mode.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1290   * \param vadc pointer to VADC module registers.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1291   * \param inputClassNum global input class  number.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1292   * \param resolution ADC channel resolution.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1293   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1294   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1295  IFX_INLINE void IfxVadc_setGlobalResolution(Ifx_VADC *vadc, uint8 inputClassNum, IfxVadc_ChannelResolution resolution);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1296  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1297  /** \brief Sets the sample time of ADC global class.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1298   * \param vadc pointer to VADC module registers.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1299   * \param inputClassNum global input class  number.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1300   * \param analogFrequency ADC analog frequency in Hz.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1301   * \param sampleTime the requested sample time for input class in sec.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1302   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1303   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1304  IFX_INLINE void IfxVadc_setGlobalSampleTime(Ifx_VADC *vadc, uint8 inputClassNum, float32 analogFrequency, float32 sampleTime);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1305  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1306  /** \brief Sets the sensitivity of the module to sleep signal
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1307   * \param vadc pointer to VADC registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1308   * \param mode mode selection (enable/disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1309   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1310   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1311  IFX_INLINE void IfxVadc_setSleepMode(Ifx_VADC *vadc, IfxVadc_SleepMode mode);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1312  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1313  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1314  /*-------------------------Global Function Prototypes-------------------------*/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1315  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1316  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1317  /** \brief Disable write access to the VADC config/control registers.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1318   * \param vadc pointer to the base of VADC registers.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1319   * \param protectionSet Index of the bit in the ACCPROTx {x=0/1} for which write access is to be disabled.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1320   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1321   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1322  IFX_EXTERN void IfxVadc_disableAccess(Ifx_VADC *vadc, IfxVadc_Protection protectionSet);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1323  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1324  /** \brief Disables the post calibration.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1325   * \param vadc pointer to the base of VADC registers.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1326   * \param group Index of the group.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1327   * \param disable disable or not.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1328   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1329   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1330  IFX_EXTERN void IfxVadc_disablePostCalibration(Ifx_VADC *vadc, IfxVadc_GroupId group, boolean disable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1331  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1332  /** \brief Enable write access to the VADC config/control registers.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1333   * \param vadc pointer to the base of VADC registers.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1334   * \param protectionSet Index of the bit in the ACCPROTx {x=0/1} for which write access is to be enabled.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1335   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1336   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1337  IFX_EXTERN void IfxVadc_enableAccess(Ifx_VADC *vadc, IfxVadc_Protection protectionSet);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1338  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1339  /** \brief Enables the CCU6 based ADC group synchronisation as workaround for Erratum ADC_TC.068
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1340   * \param vadc pointer to the base of VADC registers.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1341   * \param ccu6Num selects CCU60 or CCU61
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1342   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1343   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1344  IFX_EXTERN void IfxVadc_enableGroupSync(Ifx_VADC *vadc, uint32 ccu6Num);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1345  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1346  /** \brief Module Frequency in Hz
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1347   * \return Module Frequency in Hz.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1348   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1349  IFX_EXTERN float32 IfxVadc_getAdcModuleFrequency(void);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1350  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1351  /** \brief Gives the SRC source address.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1352   * \param group Index of the group
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1353   * \param index SRC number
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1354   * \return SRC source address
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1355   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1356  IFX_EXTERN volatile Ifx_SRC_SRCR *IfxVadc_getSrcAddress(IfxVadc_GroupId group, IfxVadc_SrcNr index);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1357  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1358  /** \brief Initialises ADC arbiter clock.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1359   * \param vadc pointer to the base of VADC registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1360   * \param arbiterClockDivider ADC arbiter clock divider.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1361   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1362   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1363  IFX_EXTERN void IfxVadc_initialiseAdcArbiterClock(Ifx_VADC *vadc, uint32 arbiterClockDivider);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1364  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1365  /** \brief Initialises the ADC Converter clock.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1366   * \param vadc pointer to the base of VADC registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1367   * \param converterClockDivider ADC converter clock divider.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1368   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1369   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1370  IFX_EXTERN void IfxVadc_initialiseAdcConverterClock(Ifx_VADC *vadc, uint32 converterClockDivider);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1371  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1372  /** \brief Configure the FadcD vadc digital clock.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1373   * \param vadc pointer to the base of VADC registers.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1374   * \param fAdcD ADC digital clock frequency in Hz.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1375   * \return calculated ADC digital clock frequency in Hz.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1376   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1377  IFX_EXTERN uint32 IfxVadc_initializeFAdcD(Ifx_VADC *vadc, uint32 fAdcD);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1378  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1379  /** \brief Configure the ADC analog clock.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1380   * \param vadc pointer to the base of VADC registers.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1381   * \param fAdcI ADC analog clock clock frequency in Hz. Range = [5000000, 10000000].
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1382   * \return ADC analog clock frequency in Hz.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1383   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1384  IFX_EXTERN uint32 IfxVadc_initializeFAdcI(Ifx_VADC *vadc, uint32 fAdcI);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1385  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1386  /** \brief Return the post calibration status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1387   * \param vadc Pointer to VADC module
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1388   * \param group specifies Group ID
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1389   * \return TRUE if the post calibration is enabled for the group else false
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1390   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1391  IFX_EXTERN boolean IfxVadc_isPostCalibration(Ifx_VADC *vadc, IfxVadc_GroupId group);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1392  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1393  /** \brief Resets the kernel.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1394   * \param vadc pointer to the base of VADC registers.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1395   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1396   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1397  IFX_EXTERN void IfxVadc_resetKernel(Ifx_VADC *vadc);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1398  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1399  /** \brief Select Low Power Supply Voltage
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1400   * \param vadc Pointer to Module space
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1401   * \param supplyVoltage Select Supply Voltage
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1402   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1403   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1404  IFX_EXTERN void IfxVadc_selectPowerSupplyVoltage(Ifx_VADC *vadc, IfxVadc_LowSupplyVoltageSelect supplyVoltage);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1405  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1406  /** \brief Starts ADC calibration and wait for the end of the calibration process.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1407   * \param vadc pointer to the base of VADC registers.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1408   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1409   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1410  IFX_EXTERN void IfxVadc_startupCalibration(Ifx_VADC *vadc);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1411  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1412  /** \} */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1413  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1414  /** \addtogroup IfxLld_Vadc_Std_Channel
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1415   * \{ */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1416  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1417  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1418  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1419  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1420  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1421  /** \brief Clears the channel request.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1422   * \param vadcG pointer to VADC group registers.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1423   * \param channelId channel id whose request to be cleared.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1424   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1425   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1426  IFX_INLINE void IfxVadc_clearChannelRequest(Ifx_VADC_G *vadcG, IfxVadc_ChannelId channelId);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1427  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1428  /** \brief Enables the FIFO mode.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1429   * \param vadcG pointer to VADC group registers.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1430   * \param resultRegister channel result register.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1431   * \param fifoMode FIFO mode .
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1432   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1433   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1434  IFX_INLINE void IfxVadc_enableFifoMode(Ifx_VADC_G *vadcG, IfxVadc_ChannelResult resultRegister, IfxVadc_FifoMode fifoMode);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1435  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1436  /**
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1437   * \param vadcG pointer to VADC group registers.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1438   * \param resultRegister channel result register.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1439   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1440   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1441  IFX_INLINE void IfxVadc_enableServiceRequest(Ifx_VADC_G *vadcG, IfxVadc_ChannelResult resultRegister);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1442  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1443  /** \brief Gets the group's assigned channels.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1444   * \param vadcG pointer to VADC group registers.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1445   * \return group's assigned channels.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1446   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1447  IFX_INLINE Ifx_VADC_G_CHASS IfxVadc_getAssignedChannels(Ifx_VADC_G *vadcG);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1448  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1449  /** \brief Gets the current ADC channel control configurations.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1450   * \param vadcG pointer to VADC group registers.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1451   * \param channelIndex ADC channel number.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1452   * \return current ADC channel control configuration.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1453   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1454  IFX_INLINE Ifx_VADC_CHCTR IfxVadc_getChannelControlConfig(Ifx_VADC_G *vadcG, IfxVadc_ChannelId channelIndex);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1455  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1456  /** \brief Gets the channel input class
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1457   * \param vadcG pointer to VADC Group register space
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1458   * \param channelIndex specifies channel ID
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1459   * \return Input class
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1460   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1461  IFX_INLINE IfxVadc_InputClasses IfxVadc_getChannelInputClass(Ifx_VADC_G *vadcG, IfxVadc_ChannelId channelIndex);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1462  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1463  /** \brief Gets the ADC input class channel resolution.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1464   * \param vadcG pointer to VADC group registers.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1465   * \param inputClassNum ADC input class number.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1466   * \return ADC input class channel resolution.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1467   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1468  IFX_INLINE IfxVadc_ChannelResolution IfxVadc_getGroupResolution(Ifx_VADC_G *vadcG, uint8 inputClassNum);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1469  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1470  /** \brief Gets the ADC input class channel sample time.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1471   * \param vadcG pointer to VADC group registers.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1472   * \param inputClassNum ADC input class number.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1473   * \param analogFrequency ADC module analog frequency in Hz.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1474   * \return ADC input class channel sample time in sec.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1475   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1476  IFX_INLINE float32 IfxVadc_getGroupSampleTime(Ifx_VADC_G *vadcG, uint8 inputClassNum, float32 analogFrequency);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1477  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1478  /** \brief Sets the channels with low priority as background channel.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1479   * \param vadcG pointer to VADC group registers.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1480   * \param channelIndex group channel id.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1481   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1482   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1483  IFX_INLINE void IfxVadc_setBackgroundPriorityChannel(Ifx_VADC_G *vadcG, IfxVadc_ChannelId channelIndex);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1484  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1485  /** \brief Sets the target for result background source.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1486   * \param vadcG pointer to VADC group registers.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1487   * \param channelIndex group channel id.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1488   * \param globalResultUsage whether storage in global result register.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1489   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1490   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1491  IFX_INLINE void IfxVadc_setBackgroundResultTarget(Ifx_VADC_G *vadcG, IfxVadc_ChannelId channelIndex, boolean globalResultUsage);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1492  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1493  /** \brief Selects boundary extension.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1494   * \param vadcG pointer to VADC group registers.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1495   * \param channelIndex group channel id.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1496   * \param boundaryMode boundary extension mode.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1497   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1498   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1499  IFX_INLINE void IfxVadc_setBoundaryMode(Ifx_VADC_G *vadcG, IfxVadc_ChannelId channelIndex, IfxVadc_BoundaryExtension boundaryMode);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1500  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1501  /** \brief Sets the channel event service request line.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1502   * \param vadcG pointer to VADC group registers.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1503   * \param channelSrcNr channel event Service Node.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1504   * \param channel channel number.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1505   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1506   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1507  IFX_INLINE void IfxVadc_setChannelEventNodePointer0(Ifx_VADC_G *vadcG, IfxVadc_SrcNr channelSrcNr, IfxVadc_ChannelId channel);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1508  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1509  /** \brief Sets the channel input class.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1510   * \param vadcG pointer to VADC group registers.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1511   * \param channelIndex group channel id.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1512   * \param inputClass group input class.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1513   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1514   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1515  IFX_INLINE void IfxVadc_setChannelInputClass(Ifx_VADC_G *vadcG, IfxVadc_ChannelId channelIndex, IfxVadc_InputClasses inputClass);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1516  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1517  /** \brief Sets the channel event mode.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1518   * \param vadcG pointer to VADC group registers.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1519   * \param channelIndex group channel id.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1520   * \param limitCheck channel event mode.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1521   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1522   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1523  IFX_INLINE void IfxVadc_setChannelLimitCheckMode(Ifx_VADC_G *vadcG, IfxVadc_ChannelId channelIndex, IfxVadc_LimitCheck limitCheck);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1524  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1525  /** \brief Sets channel as priority channel with in the group.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1526   * \param vadcG pointer to VADC group registers.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1527   * \param channelIndex group channel id.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1528   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1529   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1530  IFX_INLINE void IfxVadc_setGroupPriorityChannel(Ifx_VADC_G *vadcG, IfxVadc_ChannelId channelIndex);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1531  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1532  /** \brief Sets group's lower boundary.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1533   * \param vadcG pointer to VADC group registers.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1534   * \param channelIndex group channel id.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1535   * \param lowerBoundary group lower boundary.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1536   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1537   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1538  IFX_INLINE void IfxVadc_setLowerBoundary(Ifx_VADC_G *vadcG, IfxVadc_ChannelId channelIndex, IfxVadc_BoundarySelection lowerBoundary);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1539  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1540  /** \brief Selects the refernce input.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1541   * \param vadcG pointer to VADC group registers.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1542   * \param channelIndex group channel id.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1543   * \param reference reference input.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1544   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1545   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1546  IFX_INLINE void IfxVadc_setReferenceInput(Ifx_VADC_G *vadcG, IfxVadc_ChannelId channelIndex, IfxVadc_ChannelReference reference);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1547  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1548  /** \brief Sets result event node pointer 0.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1549   * \param vadcG pointer to VADC group registers.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1550   * \param resultSrcNr channel result event service node.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1551   * \param resultRegister channel result register.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1552   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1553   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1554  IFX_INLINE void IfxVadc_setResultNodeEventPointer0(Ifx_VADC_G *vadcG, IfxVadc_SrcNr resultSrcNr, IfxVadc_ChannelResult resultRegister);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1555  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1556  /** \brief Sets result event node pointer 1.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1557   * \param vadcG pointer to VADC group registers.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1558   * \param resultSrcNr channel result event service node.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1559   * \param resultRegister channel result register.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1560   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1561   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1562  IFX_INLINE void IfxVadc_setResultNodeEventPointer1(Ifx_VADC_G *vadcG, IfxVadc_SrcNr resultSrcNr, IfxVadc_ChannelResult resultRegister);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1563  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1564  /** \brief Sets result store position.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1565   * \param vadcG pointer to VADC group registers.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1566   * \param channelIndex group channel id.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1567   * \param rightAlignedStorage result store position.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1568   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1569   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1570  IFX_INLINE void IfxVadc_setResultPosition(Ifx_VADC_G *vadcG, IfxVadc_ChannelId channelIndex, boolean rightAlignedStorage);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1571  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1572  /** \brief Sets channel synchronization request.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1573   * \param vadcG pointer to VADC group registers.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1574   * \param channelIndex group channel id.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1575   * \param synchonize whether channel synchronize or stand alone operation.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1576   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1577   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1578  IFX_INLINE void IfxVadc_setSyncRequest(Ifx_VADC_G *vadcG, IfxVadc_ChannelId channelIndex, boolean synchonize);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1579  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1580  /** \brief Sets group's upper boundary.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1581   * \param vadcG pointer to VADC group registers.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1582   * \param channelIndex group channel id.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1583   * \param upperBoundary group upper boundary.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1584   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1585   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1586  IFX_INLINE void IfxVadc_setUpperBoundary(Ifx_VADC_G *vadcG, IfxVadc_ChannelId channelIndex, IfxVadc_BoundarySelection upperBoundary);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1587  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1588  /** \brief Sets the group result register.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1589   * \param vadcG pointer to VADC group registers.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1590   * \param channelIndex group channel id.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1591   * \param resultRegister result register for group result storage.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1592   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1593   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1594  IFX_INLINE void IfxVadc_storeGroupResult(Ifx_VADC_G *vadcG, IfxVadc_ChannelId channelIndex, IfxVadc_ChannelResult resultRegister);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1595  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1596  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1597  /*-------------------------Global Function Prototypes-------------------------*/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1598  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1599  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1600  /** \brief get channel conversion timing
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1601   * \param vadc Pointer to VADC module
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1602   * \param group specifies the Group
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1603   * \param inputClass Input class used
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1604   * \param analogFrequency ADC module analog frequency fadci in Hz.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1605   * \param moduleFrequency ADC module frequency fvadc in Hz.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1606   * \param conversionMode specifies the conversion mode (Standard conversion mode)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1607   * \return Channel conversion Time in sec
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1608   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1609  IFX_EXTERN float32 IfxVadc_getChannelConversionTime(Ifx_VADC *vadc, IfxVadc_GroupId group, IfxVadc_InputClasses inputClass, float32 analogFrequency, float32 moduleFrequency, IfxVadc_ConversionType conversionMode);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1610  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1611  /** \} */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1612  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1613  /** \addtogroup IfxLld_Vadc_Std_Emux
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1614   * \{ */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1615  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1616  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1617  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1618  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1619  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1620  /** \brief get global input class resolution
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1621   * \param vadc Pointer to VADC Module space
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1622   * \param inputClassNum global input class number
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1623   * \return External channel resolution for global input class
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1624   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1625  IFX_INLINE IfxVadc_ChannelResolution IfxVadc_getEmuxGlobalResolution(Ifx_VADC *vadc, uint8 inputClassNum);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1626  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1627  /** \brief Get the sample time of ADC global class for external channel.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1628   * \param vadc pointer to VADC Module space
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1629   * \param inputClassNum Adc input class number
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1630   * \param analogFrequency ADC module analog frequency in Hz.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1631   * \return ADC input class external channel sample time in sec.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1632   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1633  IFX_INLINE float32 IfxVadc_getEmuxGlobalSampleTime(Ifx_VADC *vadc, uint8 inputClassNum, float32 analogFrequency);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1634  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1635  /** \brief get the external channel resolution
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1636   * \param vadcG Pointer to VADC group register space
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1637   * \param inputClassNum Adc input class number
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1638   * \return Adc input class External channel resolution
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1639   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1640  IFX_INLINE IfxVadc_ChannelResolution IfxVadc_getEmuxGroupResolution(Ifx_VADC_G *vadcG, uint8 inputClassNum);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1641  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1642  /** \brief Gets the ADC input class sample time of external channel.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1643   * \param vadcG Pointer to Register Group space
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1644   * \param inputClassNum ADC input class number
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1645   * \param analogFrequency ADC module analog frequency in Hz.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1646   * \return ADC input class external channel sample time in sec.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1647   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1648  IFX_INLINE float32 IfxVadc_getEmuxGroupSampleTime(Ifx_VADC_G *vadcG, uint8 inputClassNum, float32 analogFrequency);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1649  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1650  /** \brief set the external channel resolution of Global class
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1651   * \param vadc pointer to VADC Module space
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1652   * \param inputClassNum Global Input Class Number
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1653   * \param resolution External Channel resolution
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1654   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1655   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1656  IFX_INLINE void IfxVadc_setEmuxGlobalResolution(Ifx_VADC *vadc, uint8 inputClassNum, IfxVadc_ChannelResolution resolution);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1657  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1658  /** \brief Sets the sample time of ADC global class for external channel.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1659   * \param vadc Pointer to VADC Module space
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1660   * \param inputClassNum Adc input class number
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1661   * \param analogFrequency ADC analog Frequency in HZ
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1662   * \param sampleTime the requested sample time for input class in sec
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1663   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1664   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1665  IFX_INLINE void IfxVadc_setEmuxGlobalSampleTime(Ifx_VADC *vadc, uint8 inputClassNum, float32 analogFrequency, float32 sampleTime);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1666  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1667  /** \brief set the external channel resolution of ADC input class
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1668   * \param vadcG pointer to VADC Group Register space
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1669   * \param inputClassNum input class number
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1670   * \param resolution input class external channel resolution
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1671   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1672   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1673  IFX_INLINE void IfxVadc_setEmuxGroupResolution(Ifx_VADC_G *vadcG, uint8 inputClassNum, IfxVadc_ChannelResolution resolution);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1674  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1675  /** \brief Sets the ADC input class sample time for external channel.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1676   * \param vadcG Pointer to VADC Group Register Space
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1677   * \param inputClassNum input class number
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1678   * \param analogFrequency ADC analog frequency in Hz.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1679   * \param sampleTime request sample time in sec for input class.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1680   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1681   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1682  IFX_INLINE void IfxVadc_setEmuxGroupSampletime(Ifx_VADC_G *vadcG, uint8 inputClassNum, float32 analogFrequency, float32 sampleTime);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1683  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1684  /** \brief Sets the Emux Interface for a particular group
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1685   * \param vadc Pointer to VADC Module Space
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1686   * \param emuxInterface specifies the EmuxInterface
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1687   * \param group specifies the group ID
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1688   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1689   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1690  IFX_INLINE void IfxVadc_setEmuxInterfaceForGroup(Ifx_VADC *vadc, IfxVadc_EmuxInterface emuxInterface, IfxVadc_GroupId group);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1691  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1692  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1693  /*-------------------------Global Function Prototypes-------------------------*/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1694  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1695  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1696  /**
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1697   * \param vadc pointer to Module space
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1698   * \param vadcG Pointer to VADC group register space
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1699   * \param mode External Multiplexer mode
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1700   * \param channels Specifies channel Id
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1701   * \param startChannel specifies the external channel value from which conversion to be carried out
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1702   * \param code Output the channel number in binary code/gray code
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1703   * \param sampleTimeControl specifies when to use a sample time for external channel
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1704   * \param channelSelectionStyle External Multiplexer Channel Selection Style
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1705   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1706   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1707  IFX_EXTERN void IfxVadc_configExternalMultiplexerMode(Ifx_VADC *vadc, Ifx_VADC_G *vadcG, IfxVadc_ExternalMultiplexerMode mode, uint8 channels, IfxVadc_EmuxSelectValue startChannel, IfxVadc_EmuxCodingScheme code, IfxVadc_EmuxSampleTimeControl sampleTimeControl, IfxVadc_ChannelSelectionStyle channelSelectionStyle);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1708  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1709  /** \} */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1710  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1711  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1712  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1713  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1714  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1715  /** \brief get channel service request node pointer
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1716   * \param vadcG Pointer to VADC Group register space
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1717   * \return channel service request node pointer
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1718   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1719  IFX_INLINE Ifx_VADC_G_CEVNP1 IfxVadc_getChannelServiceRequestNodePointer1(Ifx_VADC_G *vadcG);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1720  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1721  /** \brief set channel event node pointer
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1722   * \param vadcG Pointer to the Vadc group register space
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1723   * \param channelSrcNr Service request
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1724   * \param channel specifies channel
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1725   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1726   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1727  IFX_INLINE void IfxVadc_setChannelEventNodePointer1(Ifx_VADC_G *vadcG, IfxVadc_SrcNr channelSrcNr, IfxVadc_ChannelId channel);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1728  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1729  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1730  /*---------------------Inline Function Implementations------------------------*/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1731  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1732  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1733  IFX_INLINE void IfxVadc_addToQueue(Ifx_VADC_G *group, IfxVadc_ChannelId channel, uint32 options)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1734  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1735      group->QINR0.U = channel | options;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1736  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1737  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1738  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1739  IFX_INLINE uint32 IfxVadc_calculateSampleTime(float32 analogFrequency, float32 sampleTime)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1740  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1741      uint32 ticks;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1742  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1743      ticks = (uint32)(sampleTime * analogFrequency) - 2;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1744  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1745      if (ticks > 31)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1746      {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1747          ticks = (ticks / 16) + 15;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1748      }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1749  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1750      ticks = __minu(ticks, 0xFFu);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1751  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1752      return ticks;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1753  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1754  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1755  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1756  IFX_INLINE void IfxVadc_clearAllResultRequests(Ifx_VADC_G *vadcG)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1757  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1758      vadcG->REFCLR.U = 0x0000FFFFu;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1759  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1760  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1761  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1762  IFX_INLINE void IfxVadc_clearChannelRequest(Ifx_VADC_G *vadcG, IfxVadc_ChannelId channelId)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1763  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1764      vadcG->CEFCLR.U = 1 << channelId;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1765  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1766  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1767  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1768  IFX_INLINE void IfxVadc_clearQueue(Ifx_VADC_G *vadcG, boolean flushQueue)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1769  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1770      vadcG->QMR0.B.FLUSH = flushQueue;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1771  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1772  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1773  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1774  IFX_INLINE void IfxVadc_configureWaitForReadMode(Ifx_VADC_G *group, uint32 resultIdx, boolean waitForRead)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1775  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1776      group->RCR[resultIdx].B.WFR = waitForRead;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1777  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1778  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1779  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1780  IFX_INLINE void IfxVadc_configureWaitForReadModeForGlobalResultRegister(Ifx_VADC *vadc, boolean waitForRead)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1781  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1782      vadc->GLOBRCR.B.WFR = waitForRead;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1783  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1784  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1785  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1786  IFX_INLINE void IfxVadc_disableModule(Ifx_VADC *vadc)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1787  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1788      uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1789      IfxScuWdt_clearCpuEndinit(passwd);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1790      vadc->CLC.B.DISR = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1791      IfxScuWdt_setCpuEndinit(passwd);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1792  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1793  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1794  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1795  IFX_INLINE void IfxVadc_disableQueueSlotExternalTrigger(Ifx_VADC_G *vadcG)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1796  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1797      vadcG->QMR0.B.ENTR = 0; /* disable external trigger */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1798  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1799  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1800  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1801  IFX_INLINE void IfxVadc_disableScanSlotExternalTrigger(Ifx_VADC_G *vadcG)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1802  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1803      vadcG->ASMR.B.ENTR = 0; /* disable external trigger */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1804  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1805  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1806  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1807  IFX_INLINE void IfxVadc_enableBackgroundScanSlotExternalTrigger(Ifx_VADC *vadc)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1808  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1809      vadc->BRSMR.B.ENTR = 1; /* enable external trigger */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1810  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1811  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1812  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1813  IFX_INLINE void IfxVadc_enableFifoMode(Ifx_VADC_G *vadcG, IfxVadc_ChannelResult resultRegister, IfxVadc_FifoMode fifoMode)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1814  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1815      vadcG->RCR[resultRegister].B.FEN = fifoMode;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1816  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1817  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1818  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1819  IFX_INLINE void IfxVadc_enableModule(Ifx_VADC *vadc)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1820  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1821      uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1822  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1823      IfxScuWdt_clearCpuEndinit(passwd);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1824      vadc->CLC.U = 0x00000000;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1825      IfxScuWdt_setCpuEndinit(passwd);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1826  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1827  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1828  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1829  IFX_INLINE void IfxVadc_enableQueueSlotExternalTrigger(Ifx_VADC_G *vadcG)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1830  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1831      vadcG->QMR0.B.ENTR = 1;     /* enable external trigger */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1832  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1833  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1834  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1835  IFX_INLINE void IfxVadc_enableScanSlotExternalTrigger(Ifx_VADC_G *vadcG)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1836  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1837      vadcG->ASMR.B.ENTR = 1; /* enable external trigger */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1838  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1839  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1840  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1841  IFX_INLINE void IfxVadc_enableServiceRequest(Ifx_VADC_G *vadcG, IfxVadc_ChannelResult resultRegister)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1842  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1843      vadcG->RCR[resultRegister].B.SRGEN = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1844  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1845  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1846  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1847  IFX_INLINE uint8 IfxVadc_getAdcCalibrationActiveState(Ifx_VADC *vadc, uint8 adcCalGroupNum)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1848  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1849      uint8 status;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1850      status = vadc->G[adcCalGroupNum].ARBCFG.B.CAL;
	lea	a2,[a15]1155
.L531:
	mov.a	a4,#3
.L73:

; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	     1  /**
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	     2   * \file IfxVadc.h
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	     3   * \brief VADC  basic functionality
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	     4   * \ingroup IfxLld_Vadc
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	     5   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	     6   * \version iLLD_1_0_1_11_0
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	     7   * \copyright Copyright (c) 2017 Infineon Technologies AG. All rights reserved.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	     8   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	     9   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    10   *                                 IMPORTANT NOTICE
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    11   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    12   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    13   * Use of this file is subject to the terms of use agreed between (i) you or 
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    14   * the company in which ordinary course of business you are acting and (ii) 
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    15   * Infineon Technologies AG or its licensees. If and as long as no such 
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    16   * terms of use are agreed, use of this file is subject to following:
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    17  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    18  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    19   * Boost Software License - Version 1.0 - August 17th, 2003
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    20  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    21   * Permission is hereby granted, free of charge, to any person or 
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    22   * organization obtaining a copy of the software and accompanying 
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    23   * documentation covered by this license (the "Software") to use, reproduce,
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    24   * display, distribute, execute, and transmit the Software, and to prepare
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    25   * derivative works of the Software, and to permit third-parties to whom the 
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    26   * Software is furnished to do so, all subject to the following:
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    27  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    28   * The copyright notices in the Software and this entire statement, including
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    29   * the above license grant, this restriction and the following disclaimer, must
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    30   * be included in all copies of the Software, in whole or in part, and all
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    31   * derivative works of the Software, unless such copies or derivative works are
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    32   * solely in the form of machine-executable object code generated by a source
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    33   * language processor.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    34  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    35   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR 
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    36   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    37   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    38   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE 
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    39   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    40   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    41   * DEALINGS IN THE SOFTWARE.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    42  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    43   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    44   * \defgroup IfxLld_Vadc_Std_Enum Enumerations
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    45   * \ingroup IfxLld_Vadc_Std
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    46   * \defgroup IfxLld_Vadc_Std_Background_Autoscan Background Autoscan Functions
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    47   * \ingroup IfxLld_Vadc_Std
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    48   * \defgroup IfxLld_Vadc_Std_ChannelScan Channel Scan Functions
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    49   * \ingroup IfxLld_Vadc_Std
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    50   * \defgroup IfxLld_Vadc_Std_QueueRequest Queue Request Functions
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    51   * \ingroup IfxLld_Vadc_Std
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    52   * \defgroup IfxLld_Vadc_Std_IO IO Pin Configuration Functions
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    53   * \ingroup IfxLld_Vadc_Std
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    54   * \defgroup IfxLld_Vadc_Std_Frequency Frequency Calculation
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    55   * \ingroup IfxLld_Vadc_Std
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    56   * \defgroup IfxLld_Vadc_Std_Group Group Functions
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    57   * \ingroup IfxLld_Vadc_Std
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    58   * \defgroup IfxLld_Vadc_Std_Module Module Functions
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    59   * \ingroup IfxLld_Vadc_Std
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    60   * \defgroup IfxLld_Vadc_Std_Channel Channel Functions
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    61   * \ingroup IfxLld_Vadc_Std
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    62   * \defgroup IfxLld_Vadc_Std_Emux Emux Functions
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    63   * \ingroup IfxLld_Vadc_Std
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    64   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    65  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    66  #ifndef IFXVADC_H
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    67  #define IFXVADC_H 1
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    68  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    69  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    70  /*----------------------------------Includes----------------------------------*/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    71  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    72  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    73  #include "_Impl/IfxVadc_cfg.h"
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    74  #include "_PinMap/IfxVadc_PinMap.h"
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    75  #include "IfxVadc_bf.h"
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    76  #include "Cpu/Std/IfxCpu_Intrinsics.h"
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    77  #include "Scu/Std/IfxScuCcu.h"
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    78  #include "Scu/Std/IfxScuWdt.h"
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    79  #include "IfxCcu6_reg.h"
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    80  #include "IfxCcu6_bf.h"
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    81  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    82  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    83  /*--------------------------------Enumerations--------------------------------*/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    84  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    85  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    86  /** \addtogroup IfxLld_Vadc_Std_Enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    87   * \{ */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    88  /** \brief Defined in MODULE_VADC.G[x].ARBCFG.B.ANONS and ANONC
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    89   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    90  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    91  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    92      IfxVadc_AnalogConverterMode_off             = 0, /**< \brief Analog Converter off */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    93      IfxVadc_AnalogConverterMode_slowStandby     = 1, /**< \brief Slow Standby Mode */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    94      IfxVadc_AnalogConverterMode_fastStandby     = 2, /**< \brief Fast Standby Mode */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    95      IfxVadc_AnalogConverterMode_normalOperation = 3  /**< \brief Normal operation mode */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    96  } IfxVadc_AnalogConverterMode;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    97  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    98  /** \brief Arbitration round length defined in MODULE_VADC.G[x].ARBCFG.ARBRND(x=0,1,..,11)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    99   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   100  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   101  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   102      IfxVadc_ArbitrationRounds_4_slots  = 0,  /**< \brief An arbitration round contains 4 arbitration slots. */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   103      IfxVadc_ArbitrationRounds_8_slots  = 1,  /**< \brief An arbitration round contains 8 arbitration slots. */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   104      IfxVadc_ArbitrationRounds_16_slots = 2,  /**< \brief An arbitration round contains 16 arbitration slots. */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   105      IfxVadc_ArbitrationRounds_20_slots = 3   /**< \brief An arbitration round contains 20 arbitration slots. */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   106  } IfxVadc_ArbitrationRounds;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   107  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   108  /** \brief Boundary Extension defined in MODULE_VADC.G[x].CHCTR[y].B.BNDSELX(x=0,1,...,11;y=0,1....,16)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   109   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   110  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   111  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   112      IfxVadc_BoundaryExtension_standard            = 0,   /**< \brief Boundary Standard mode. BNDSELU/BNDSELL as Boundaries */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   113      IfxVadc_BoundaryExtension_fastCompareResult1  = 1,   /**< \brief Fast compare mode use as upper boundary  Channel result   1 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   114      IfxVadc_BoundaryExtension_fastCompareResult2  = 2,   /**< \brief Fast compare mode use as upper boundary  Channel result   2 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   115      IfxVadc_BoundaryExtension_fastCompareResult3  = 3,   /**< \brief Fast compare mode use as upper boundary  Channel result   3 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   116      IfxVadc_BoundaryExtension_fastCompareResult4  = 4,   /**< \brief Fast compare mode use as upper boundary  Channel result   4 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   117      IfxVadc_BoundaryExtension_fastCompareResult5  = 5,   /**< \brief Fast compare mode use as upper boundary  Channel result   5 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   118      IfxVadc_BoundaryExtension_fastCompareResult6  = 6,   /**< \brief Fast compare mode use as upper boundary  Channel result   6 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   119      IfxVadc_BoundaryExtension_fastCompareResult7  = 7,   /**< \brief Fast compare mode use as upper boundary  Channel result   7 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   120      IfxVadc_BoundaryExtension_fastCompareResult8  = 8,   /**< \brief Fast compare mode use as upper boundary  Channel result   8 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   121      IfxVadc_BoundaryExtension_fastCompareResult9  = 9,   /**< \brief Fast compare mode use as upper boundary  Channel result   9 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   122      IfxVadc_BoundaryExtension_fastCompareResult10 = 10,  /**< \brief Fast compare mode use as upper boundary  Channel result  10 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   123      IfxVadc_BoundaryExtension_fastCompareResult11 = 11,  /**< \brief Fast compare mode use as upper boundary  Channel result  11 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   124      IfxVadc_BoundaryExtension_fastCompareResult12 = 12,  /**< \brief Fast compare mode use as upper boundary  Channel result  12 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   125      IfxVadc_BoundaryExtension_fastCompareResult13 = 13,  /**< \brief Fast compare mode use as upper boundary  Channel result  13 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   126      IfxVadc_BoundaryExtension_fastCompareResult14 = 14,  /**< \brief Fast compare mode use as upper boundary  Channel result  14 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   127      IfxVadc_BoundaryExtension_fastCompareResult15 = 15   /**< \brief Fast compare mode use as upper boundary  Channel result  15 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   128  } IfxVadc_BoundaryExtension;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   129  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   130  /** \brief BoundarySel defined in MODULE_VADC.G[x].CHCTR[y].B.BNDSELL(x=0,1,...,11;y=0,1....,16)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   131   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   132  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   133  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   134      IfxVadc_BoundarySelection_group0  = 0,  /**< \brief Use group class 0 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   135      IfxVadc_BoundarySelection_group1  = 1,  /**< \brief Use group class 1 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   136      IfxVadc_BoundarySelection_global0 = 2,  /**< \brief Use global class 0 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   137      IfxVadc_BoundarySelection_global1 = 3   /**< \brief Use global class 1 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   138  } IfxVadc_BoundarySelection;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   139  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   140  /** \brief VADC Channels
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   141   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   142  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   143  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   144      IfxVadc_ChannelId_none = -1,  /**< \brief None of VADC channels */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   145      IfxVadc_ChannelId_0    = 0,   /**< \brief Channel 0 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   146      IfxVadc_ChannelId_1    = 1,   /**< \brief Channel 1 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   147      IfxVadc_ChannelId_2    = 2,   /**< \brief Channel 2 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   148      IfxVadc_ChannelId_3    = 3,   /**< \brief Channel 3 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   149      IfxVadc_ChannelId_4    = 4,   /**< \brief Channel 4 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   150      IfxVadc_ChannelId_5    = 5,   /**< \brief Channel 5 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   151      IfxVadc_ChannelId_6    = 6,   /**< \brief Channel 6 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   152      IfxVadc_ChannelId_7    = 7,   /**< \brief Channel 7 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   153      IfxVadc_ChannelId_8    = 8,   /**< \brief Channel 8 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   154      IfxVadc_ChannelId_9    = 9,   /**< \brief Channel 9 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   155      IfxVadc_ChannelId_10   = 10,  /**< \brief Channel 10 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   156      IfxVadc_ChannelId_11   = 11,  /**< \brief Channel 11 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   157      IfxVadc_ChannelId_12   = 12,  /**< \brief Channel 12 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   158      IfxVadc_ChannelId_13   = 13,  /**< \brief Channel 13 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   159      IfxVadc_ChannelId_14   = 14,  /**< \brief Channel 14 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   160      IfxVadc_ChannelId_15   = 15   /**< \brief Channel 15 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   161  } IfxVadc_ChannelId;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   162  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   163  /** \brief ADC channel reference defined in MODULE_VADC.G[x].CHCTR[y].B.REFSEL(x=0,1,...,11;y=0,1....,16)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   164   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   165  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   166  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   167      IfxVadc_ChannelReference_standard = 0,  /**< \brief use Varef as reference */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   168      IfxVadc_ChannelReference_channel0 = 1   /**< \brief use CH0 as reference */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   169  } IfxVadc_ChannelReference;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   170  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   171  /** \brief ADC channel resolution defined in MODULE_VADC.G[x].CHCTR[y].B.ICLASS[y].B.CMS(x=0,1,...,11;y=0,1)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   172   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   173  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   174  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   175      IfxVadc_ChannelResolution_12bit     = 0, /**< \brief 12-bit conversion */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   176      IfxVadc_ChannelResolution_10bit     = 1, /**< \brief 10-bit conversion */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   177      IfxVadc_ChannelResolution_8bit      = 2, /**< \brief 8-bit conversion */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   178      IfxVadc_ChannelResolution_10bitFast = 5  /**< \brief 10-bit cfast compare mode */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   179  } IfxVadc_ChannelResolution;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   180  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   181  /** \brief Channel Result defined in MODULE_VADC.G[x].CHCTR[y].B.RESREG(x=0,1,...,11;y=0,1....,16)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   182   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   183  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   184  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   185      IfxVadc_ChannelResult_0 = 0,      /**< \brief Use Channel result 0  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   186      IfxVadc_ChannelResult_1,          /**< \brief Use Channel result 1  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   187      IfxVadc_ChannelResult_2,          /**< \brief Use Channel result 2  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   188      IfxVadc_ChannelResult_3,          /**< \brief Use Channel result 3  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   189      IfxVadc_ChannelResult_4,          /**< \brief Use Channel result 4  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   190      IfxVadc_ChannelResult_5,          /**< \brief Use Channel result 5  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   191      IfxVadc_ChannelResult_6,          /**< \brief Use Channel result 6  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   192      IfxVadc_ChannelResult_7,          /**< \brief Use Channel result 7  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   193      IfxVadc_ChannelResult_8,          /**< \brief Use Channel result 8  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   194      IfxVadc_ChannelResult_9,          /**< \brief Use Channel result 9  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   195      IfxVadc_ChannelResult_10,         /**< \brief Use Channel result 10  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   196      IfxVadc_ChannelResult_11,         /**< \brief Use Channel result 11  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   197      IfxVadc_ChannelResult_12,         /**< \brief Use Channel result 12  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   198      IfxVadc_ChannelResult_13,         /**< \brief Use Channel result 13  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   199      IfxVadc_ChannelResult_14,         /**< \brief Use Channel result 14  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   200      IfxVadc_ChannelResult_15          /**< \brief Use Channel result 15  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   201  } IfxVadc_ChannelResult;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   202  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   203  /** \brief External Multiplexer Channel Selection Style as defined in
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   204   * Ifx_VADC.G[x].EMUXCTR.B.EMXCSS
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   205   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   206  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   207  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   208      IfxVadc_ChannelSelectionStyle_channelNumber = 0,  /**< \brief selects an arbitrary channel */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   209      IfxVadc_ChannelSelectionStyle_binary        = 1   /**< \brief Each bit of bitfield EMUXCH selects the
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   210                                                         * associated channel for EMUX control */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   211  } IfxVadc_ChannelSelectionStyle;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   212  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   213  /** \brief type of conversion
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   214   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   215  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   216  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   217      IfxVadc_ConversionType_Compatible = 0  /**< \brief Compatible Timing Mode */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   218  } IfxVadc_ConversionType;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   219  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   220  /** \brief Specifies the External Coding scheme(binary/gray)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   221   * defined in Ifx_VADC.G[x].EMUXCTR.B.EMXCOD
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   222   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   223  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   224  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   225      IfxVadc_EmuxCodingScheme_binary = 0,  /**< \brief Output the Channel Number in Binary code */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   226      IfxVadc_EmuxCodingScheme_gray   = 1   /**< \brief Output the channel number in gray code */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   227  } IfxVadc_EmuxCodingScheme;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   228  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   229  /** \brief Specifies the Emux interface
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   230   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   231  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   232  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   233      IfxVadc_EmuxInterface_0 = 0,  /**< \brief Emux Interface 0 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   234      IfxVadc_EmuxInterface_1 = 1   /**< \brief Emux Interface 1 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   235  } IfxVadc_EmuxInterface;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   236  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   237  /** \brief External Multiplexer sample time control
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   238   * defined in Ifx_VADC.G[x].EMUXCTR.B.EMXST
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   239   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   240  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   241  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   242      IfxVadc_EmuxSampleTimeControl_settingChanges = 0,  /**< \brief Use STCE Whenever Setting Changes */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   243      IfxVadc_EmuxSampleTimeControl_always         = 1   /**< \brief Use STCE for each conversion of an external channel */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   244  } IfxVadc_EmuxSampleTimeControl;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   245  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   246  /** \brief specifies the External Channel Start select value
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   247   * defined in Ifx_VADC.G[x].EMUXCTR.B.EMUXSET
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   248   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   249  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   250  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   251      IfxVadc_EmuxSelectValue_0 = 0,      /**< \brief Start Selection Value 0  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   252      IfxVadc_EmuxSelectValue_1,          /**< \brief Start Selection Value 1  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   253      IfxVadc_EmuxSelectValue_2,          /**< \brief Start Selection Value 2  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   254      IfxVadc_EmuxSelectValue_3,          /**< \brief Start Selection Value 3  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   255      IfxVadc_EmuxSelectValue_4,          /**< \brief Start Selection Value 4  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   256      IfxVadc_EmuxSelectValue_5,          /**< \brief Start Selection Value 5  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   257      IfxVadc_EmuxSelectValue_6,          /**< \brief Start Selection Value 6  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   258      IfxVadc_EmuxSelectValue_7           /**< \brief Start Selection Value 7  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   259  } IfxVadc_EmuxSelectValue;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   260  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   261  /** \brief Specifies External Multiplexer Mode
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   262   * define in Ifx_VADC.G[x].EMUXCTR.B.EMUXMODE
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   263   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   264  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   265  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   266      IfxVadc_ExternalMultiplexerMode_softwareControl = 0,  /**< \brief Disable The Emux Control */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   267      IfxVadc_ExternalMultiplexerMode_steady          = 1,  /**< \brief select steady mode */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   268      IfxVadc_ExternalMultiplexerMode_singleStep      = 2,  /**< \brief Select single step mode */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   269      IfxVadc_ExternalMultiplexerMode_sequence        = 3   /**< \brief Select Sequence Mode */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   270  } IfxVadc_ExternalMultiplexerMode;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   271  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   272  /** \brief FIFO mode enable
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   273   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   274  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   275  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   276      IfxVadc_FifoMode_seperateResultRegister = 0,  /**< \brief seperate Result Register */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   277      IfxVadc_FifoMode_fifoStructure          = 1,  /**< \brief fifoStructure */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   278      IfxVadc_FifoMode_maximumMode            = 2,  /**< \brief copy new result if bigger */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   279      IfxVadc_FifoMode_minimumMode            = 3   /**< \brief copy new result if it is smaller */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   280  } IfxVadc_FifoMode;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   281  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   282  /** \brief gating mode defined in MODULE_VADC.BRSMR.ENGT
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   283   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   284  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   285  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   286      IfxVadc_GatingMode_disabled   = 0,  /**< \brief Gating is disabled, no conversion request are issued */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   287      IfxVadc_GatingMode_always     = 1,  /**< \brief Conversion request is issued if at least 1 conversion pending bit is set */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   288      IfxVadc_GatingMode_gatingHigh = 2,  /**< \brief Conversion request is issued if at least 1 conversion pending bit is set and the gating signal is high */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   289      IfxVadc_GatingMode_gatingLow  = 3   /**< \brief Conversion request is issued if at least 1 conversion pending bit is set and the gating signal is low */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   290  } IfxVadc_GatingMode;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   291  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   292  /** \brief External trigger gating defined in MODULE_VADC.G[x].QCTRLy.GTSEL(x=0,1,..,11;y=0,1,..,7)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   293   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   294  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   295  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   296      IfxVadc_GatingSource_0 = 0,      /**< \brief Input signal REQGTx_0  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   297      IfxVadc_GatingSource_1,          /**< \brief Input signal REQGTx_1  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   298      IfxVadc_GatingSource_2,          /**< \brief Input signal REQGTx_2  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   299      IfxVadc_GatingSource_3,          /**< \brief Input signal REQGTx_3  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   300      IfxVadc_GatingSource_4,          /**< \brief Input signal REQGTx_4  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   301      IfxVadc_GatingSource_5,          /**< \brief Input signal REQGTx_5  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   302      IfxVadc_GatingSource_6,          /**< \brief Input signal REQGTx_6  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   303      IfxVadc_GatingSource_7,          /**< \brief Input signal REQGTx_7  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   304      IfxVadc_GatingSource_8,          /**< \brief Input signal REQGTx_8  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   305      IfxVadc_GatingSource_9,          /**< \brief Input signal REQGTx_9  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   306      IfxVadc_GatingSource_10,         /**< \brief Input signal REQGTx_10  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   307      IfxVadc_GatingSource_11,         /**< \brief Input signal REQGTx_11  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   308      IfxVadc_GatingSource_12,         /**< \brief Input signal REQGTx_12  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   309      IfxVadc_GatingSource_13,         /**< \brief Input signal REQGTx_13  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   310      IfxVadc_GatingSource_14,         /**< \brief Input signal REQGTx_14  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   311      IfxVadc_GatingSource_15          /**< \brief Input signal REQGTx_15  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   312  } IfxVadc_GatingSource;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   313  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   314  /** \brief inputClass defined in MODULE_VADC.G[x].CHCTR[y].B.ICLSEL(x=0,1,...,11;y=0,1....,16)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   315   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   316  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   317  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   318      IfxVadc_InputClasses_group0  = 0,  /**< \brief Use group class 0 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   319      IfxVadc_InputClasses_group1  = 1,  /**< \brief Use group class 1 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   320      IfxVadc_InputClasses_global0 = 2,  /**< \brief Use global class 0 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   321      IfxVadc_InputClasses_global1 = 3   /**< \brief Use global class 1 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   322  } IfxVadc_InputClasses;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   323  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   324  /** \brief ADC channel limit check defined in MODULE_VADC.G[x].CHCTR[y].B.CHEVMODE(x=0,1,...,11;y=0,1....,16)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   325   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   326  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   327  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   328      IfxVadc_LimitCheck_noCheck            = 0,  /**< \brief Normal compare mode Event Never Fast Compare mode Event Never */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   329      IfxVadc_LimitCheck_eventIfInArea      = 1,  /**< \brief Normal compare mode Event If result is inside the boundary band    Fast Compare mode Event If result switches to high (above comp. value) */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   330      IfxVadc_LimitCheck_eventIfOutsideArea = 2,  /**< \brief Normal compare mode Event If result is outside the boundary band   Fast Compare mode Event If result switches to low (below comp. value) */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   331      IfxVadc_LimitCheck_always             = 3   /**< \brief Normal compare mode Event Always   Fast Compare mode Event Always */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   332  } IfxVadc_LimitCheck;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   333  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   334  /** \brief Low Power Supply Voltage Select
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   335   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   336  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   337  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   338      IfxVadc_LowSupplyVoltageSelect_5V = 0,  /**< \brief 5V Power Supply is Connected */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   339      IfxVadc_LowSupplyVoltageSelect_3V = 1   /**< \brief 3.3V Power Supply is Connected */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   340  } IfxVadc_LowSupplyVoltageSelect;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   341  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   342  /** \brief Access protection for Group registers defined in MODULE_VADC.ACCPROT0.U
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   343   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   344  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   345  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   346      IfxVadc_Protection_channelControl0       = 0,   /**< \brief Access control for GxCHCTR0 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   347      IfxVadc_Protection_channelControl1       = 1,   /**< \brief Access control for GxCHCTR1 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   348      IfxVadc_Protection_channelControl2       = 2,   /**< \brief Access control for GxCHCTR2 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   349      IfxVadc_Protection_channelControl3       = 3,   /**< \brief Access control for GxCHCTR3 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   350      IfxVadc_Protection_channelControl4       = 4,   /**< \brief Access control for GxCHCTR4 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   351      IfxVadc_Protection_channelControl5       = 5,   /**< \brief Access control for GxCHCTR5 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   352      IfxVadc_Protection_channelControl6       = 6,   /**< \brief Access control for GxCHCTR6 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   353      IfxVadc_Protection_channelControl7       = 7,   /**< \brief Access control for GxCHCTR7 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   354      IfxVadc_Protection_channelControl8       = 8,   /**< \brief Access control for GxCHCTR8 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   355      IfxVadc_Protection_channelControl9       = 9,   /**< \brief Access control for GxCHCTR9 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   356      IfxVadc_Protection_channelControl10      = 10,  /**< \brief Access control for GxCHCTR10 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   357      IfxVadc_Protection_channelControl11      = 11,  /**< \brief Access control for GxCHCTR11 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   358      IfxVadc_Protection_channelControl12      = 12,  /**< \brief Access control for GxCHCTR12 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   359      IfxVadc_Protection_channelControl13      = 13,  /**< \brief Access control for GxCHCTR13 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   360      IfxVadc_Protection_channelControl14      = 14,  /**< \brief Access control for GxCHCTR14 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   361      IfxVadc_Protection_externalMultiplexer   = 15,  /**< \brief Access control for EMUXSEL, GxEMUXCTR */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   362      IfxVadc_Protection_initGroup0            = 16,  /**< \brief Access control for GxARBCFG, GxARBPR, GxCHASS, GxRRASS, GxICLASS0/1, GxSYNCTR */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   363      IfxVadc_Protection_initGroup1            = 17,  /**< \brief Access control for GxARBCFG, GxARBPR, GxCHASS, GxRRASS, GxICLASS0/1, GxSYNCTR */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   364      IfxVadc_Protection_initGroup2            = 18,  /**< \brief Access control for GxARBCFG, GxARBPR, GxCHASS, GxRRASS, GxICLASS0/1, GxSYNCTR */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   365      IfxVadc_Protection_initGroup3            = 19,  /**< \brief Access control for GxARBCFG, GxARBPR, GxCHASS, GxRRASS, GxICLASS0/1, GxSYNCTR */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   366      IfxVadc_Protection_initGroup4            = 20,  /**< \brief Access control for GxARBCFG, GxARBPR, GxCHASS, GxRRASS, GxICLASS0/1, GxSYNCTR */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   367      IfxVadc_Protection_initGroup5            = 21,  /**< \brief Access control for GxARBCFG, GxARBPR, GxCHASS, GxRRASS, GxICLASS0/1, GxSYNCTR */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   368      IfxVadc_Protection_initGroup6            = 22,  /**< \brief Access control for GxARBCFG, GxARBPR, GxCHASS, GxRRASS, GxICLASS0/1, GxSYNCTR */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   369      IfxVadc_Protection_initGroup7            = 23,  /**< \brief Access control for GxARBCFG, GxARBPR, GxCHASS, GxRRASS, GxICLASS0/1, GxSYNCTR */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   370      IfxVadc_Protection_initGroup8            = 24,  /**< \brief Access control for GxARBCFG, GxARBPR, GxCHASS, GxRRASS, GxICLASS0/1, GxSYNCTR */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   371      IfxVadc_Protection_initGroup9            = 25,  /**< \brief Access control for GxARBCFG, GxARBPR, GxCHASS, GxRRASS, GxICLASS0/1, GxSYNCTR */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   372      IfxVadc_Protection_initGroup10           = 26,  /**< \brief Access control for GxARBCFG, GxARBPR, GxCHASS, GxRRASS, GxICLASS0/1, GxSYNCTR */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   373      IfxVadc_Protection_initGroup11           = 27,  /**< \brief Access control for GxARBCFG, GxARBPR, GxCHASS, GxRRASS, GxICLASS0/1, GxSYNCTR */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   374      IfxVadc_Protection_initGroup12           = 28,  /**< \brief Access control for GxARBCFG, GxARBPR, GxCHASS, GxRRASS, GxICLASS0/1, GxSYNCTR */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   375      IfxVadc_Protection_initGroup13           = 29,  /**< \brief Access control for GxARBCFG, GxARBPR, GxCHASS, GxRRASS, GxICLASS0/1, GxSYNCTR */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   376      IfxVadc_Protection_initGroup14           = 30,  /**< \brief Access control for GxARBCFG, GxARBPR, GxCHASS, GxRRASS, GxICLASS0/1, GxSYNCTR */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   377      IfxVadc_Protection_globalConfig          = 31,  /**< \brief Access control for GLOBCFG */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   378      IfxVadc_Protection_serviceGroup0         = 32,  /**< \brief Access control for GxSEFLAG, GxSEVNP, GxCEFLAG, GxCEVNP0/1/2, GxREFLAG, GxREVNP0/1, GxSRACT */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   379      IfxVadc_Protection_serviceGroup1         = 33,  /**< \brief Access control for GxSEFLAG, GxSEVNP, GxCEFLAG, GxCEVNP0/1/2, GxREFLAG, GxREVNP0/1, GxSRACT */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   380      IfxVadc_Protection_serviceGroup2         = 34,  /**< \brief Access control for GxSEFLAG, GxSEVNP, GxCEFLAG, GxCEVNP0/1/2, GxREFLAG, GxREVNP0/1, GxSRACT */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   381      IfxVadc_Protection_serviceGroup3         = 35,  /**< \brief Access control for GxSEFLAG, GxSEVNP, GxCEFLAG, GxCEVNP0/1/2, GxREFLAG, GxREVNP0/1, GxSRACT */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   382      IfxVadc_Protection_serviceGroup4         = 36,  /**< \brief Access control for GxSEFLAG, GxSEVNP, GxCEFLAG, GxCEVNP0/1/2, GxREFLAG, GxREVNP0/1, GxSRACT */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   383      IfxVadc_Protection_serviceGroup5         = 37,  /**< \brief Access control for GxSEFLAG, GxSEVNP, GxCEFLAG, GxCEVNP0/1/2, GxREFLAG, GxREVNP0/1, GxSRACT */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   384      IfxVadc_Protection_serviceGroup6         = 38,  /**< \brief Access control for GxSEFLAG, GxSEVNP, GxCEFLAG, GxCEVNP0/1/2, GxREFLAG, GxREVNP0/1, GxSRACT */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   385      IfxVadc_Protection_serviceGroup7         = 39,  /**< \brief Access control for GxSEFLAG, GxSEVNP, GxCEFLAG, GxCEVNP0/1/2, GxREFLAG, GxREVNP0/1, GxSRACT */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   386      IfxVadc_Protection_serviceGroup8         = 40,  /**< \brief Access control for GxSEFLAG, GxSEVNP, GxCEFLAG, GxCEVNP0/1/2, GxREFLAG, GxREVNP0/1, GxSRACT */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   387      IfxVadc_Protection_serviceGroup9         = 41,  /**< \brief Access control for GxSEFLAG, GxSEVNP, GxCEFLAG, GxCEVNP0/1/2, GxREFLAG, GxREVNP0/1, GxSRACT */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   388      IfxVadc_Protection_serviceGroup10        = 42,  /**< \brief Access control for GxSEFLAG, GxSEVNP, GxCEFLAG, GxCEVNP0/1/2, GxREFLAG, GxREVNP0/1, GxSRACT */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   389      IfxVadc_Protection_serviceGroup11        = 43,  /**< \brief Access control for GxSEFLAG, GxSEVNP, GxCEFLAG, GxCEVNP0/1/2, GxREFLAG, GxREVNP0/1, GxSRACT */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   390      IfxVadc_Protection_serviceGroup12        = 44,  /**< \brief Access control for GxSEFLAG, GxSEVNP, GxCEFLAG, GxCEVNP0/1/2, GxREFLAG, GxREVNP0/1, GxSRACT */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   391      IfxVadc_Protection_serviceGroup13        = 45,  /**< \brief Access control for GxSEFLAG, GxSEVNP, GxCEFLAG, GxCEVNP0/1/2, GxREFLAG, GxREVNP0/1, GxSRACT */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   392      IfxVadc_Protection_serviceGroup14        = 46,  /**< \brief Access control for GxSEFLAG, GxSEVNP, GxCEFLAG, GxCEVNP0/1/2, GxREFLAG, GxREVNP0/1, GxSRACT */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   393      IfxVadc_Protection_testFunction          = 47,  /**< \brief Access control for GLOBTF */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   394      IfxVadc_Protection_resultRegisterGroup0  = 48,  /**< \brief Access control for GxRCRx(x=0,1,..,15), GxBOUND, GxRESx(x=0 .. 15) */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   395      IfxVadc_Protection_resultRegisterGroup1  = 49,  /**< \brief Access control for GxRCRx(x=0,1,..,15), GxBOUND, GxRESx(x=0 .. 15) */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   396      IfxVadc_Protection_resultRegisterGroup2  = 50,  /**< \brief Access control for GxRCRx(x=0,1,..,15), GxBOUND, GxRESx(x=0 .. 15) */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   397      IfxVadc_Protection_resultRegisterGroup3  = 51,  /**< \brief Access control for GxRCRx(x=0,1,..,15), GxBOUND, GxRESx(x=0 .. 15) */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   398      IfxVadc_Protection_resultRegisterGroup4  = 52,  /**< \brief Access control for GxRCRx(x=0,1,..,15), GxBOUND, GxRESx(x=0 .. 15) */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   399      IfxVadc_Protection_resultRegisterGroup5  = 53,  /**< \brief Access control for GxRCRx(x=0,1,..,15), GxBOUND, GxRESx(x=0 .. 15) */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   400      IfxVadc_Protection_resultRegisterGroup6  = 54,  /**< \brief Access control for GxRCRx(x=0,1,..,15), GxBOUND, GxRESx(x=0 .. 15) */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   401      IfxVadc_Protection_resultRegisterGroup7  = 55,  /**< \brief Access control for GxRCRx(x=0,1,..,15), GxBOUND, GxRESx(x=0 .. 15) */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   402      IfxVadc_Protection_resultRegisterGroup8  = 56,  /**< \brief Access control for GxRCRx(x=0,1,..,15), GxBOUND, GxRESx(x=0 .. 15) */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   403      IfxVadc_Protection_resultRegisterGroup9  = 57,  /**< \brief Access control for GxRCRx(x=0,1,..,15), GxBOUND, GxRESx(x=0 .. 15) */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   404      IfxVadc_Protection_resultRegisterGroup10 = 58,  /**< \brief Access control for GxRCRx(x=0,1,..,15), GxBOUND, GxRESx(x=0 .. 15) */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   405      IfxVadc_Protection_resultRegisterGroup11 = 59,  /**< \brief Access control for GxRCRx(x=0,1,..,15), GxBOUND, GxRESx(x=0 .. 15) */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   406      IfxVadc_Protection_resultRegisterGroup12 = 60,  /**< \brief Access control for GxRCRx(x=0,1,..,15), GxBOUND, GxRESx(x=0 .. 15) */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   407      IfxVadc_Protection_resultRegisterGroup13 = 61,  /**< \brief Access control for GxRCRx(x=0,1,..,15), GxBOUND, GxRESx(x=0 .. 15) */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   408      IfxVadc_Protection_resultRegisterGroup14 = 62   /**< \brief Access control for GxRCRx(x=0,1,..,15), GxBOUND, GxRESx(x=0 .. 15) */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   409  } IfxVadc_Protection;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   410  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   411  /** \brief Arbitration priority, Group x,defined in MODULE_VADC.G[x].ARBPR.PRIOy(x=0,1,...,11;y=0,1,2)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   412   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   413  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   414  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   415      IfxVadc_RequestSlotPriority_lowest  = 0, /**< \brief Lowest priority */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   416      IfxVadc_RequestSlotPriority_low     = 1, /**< \brief Lowpriority */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   417      IfxVadc_RequestSlotPriority_high    = 2, /**< \brief High priority */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   418      IfxVadc_RequestSlotPriority_highest = 3  /**< \brief Highest priority */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   419  } IfxVadc_RequestSlotPriority;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   420  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   421  /** \brief Request source start mode defined in MODULE_VADC.G[x].ARBPR.CSMy(x=0,1,...,11;y=0,1,2)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   422   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   423  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   424  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   425      IfxVadc_RequestSlotStartMode_waitForStart       = 0, /**< \brief Wait for start */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   426      IfxVadc_RequestSlotStartMode_cancelInjectRepeat = 1  /**< \brief Cancel-Inject-Repeat */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   427  } IfxVadc_RequestSlotStartMode;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   428  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   429  /** \brief Request sources
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   430   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   431  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   432  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   433      IfxVadc_RequestSource_queue      = 0, /**< \brief 8 stage Queue request */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   434      IfxVadc_RequestSource_scan       = 1, /**< \brief scan request */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   435      IfxVadc_RequestSource_background = 2  /**< \brief background scan request */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   436  } IfxVadc_RequestSource;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   437  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   438  /** \brief Enable/disable the sensitivity of the module to sleep signal\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   439   * Definition in Ifx_VADC.CLC.B.EDIS
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   440   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   441  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   442  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   443      IfxVadc_SleepMode_enable  = 0, /**< \brief enables sleep mode */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   444      IfxVadc_SleepMode_disable = 1  /**< \brief disables sleep mode */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   445  } IfxVadc_SleepMode;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   446  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   447  /** \brief Service Node defined in MODULE_VADC.G[x].SRACT.U(x= 0,1,..,11)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   448   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   449  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   450  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   451      IfxVadc_SrcNr_group0  = 0,  /**< \brief service request line 0 of group */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   452      IfxVadc_SrcNr_group1  = 1,  /**< \brief service request line 1 of group */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   453      IfxVadc_SrcNr_group2  = 2,  /**< \brief service request line 2 of group */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   454      IfxVadc_SrcNr_group3  = 3,  /**< \brief service request line 3 of group */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   455      IfxVadc_SrcNr_shared0 = 4,  /**< \brief Select shared service request line 0 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   456      IfxVadc_SrcNr_shared1 = 5,  /**< \brief Select shared service request line 1 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   457      IfxVadc_SrcNr_shared2 = 6,  /**< \brief Select shared service request line 2 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   458      IfxVadc_SrcNr_shared3 = 7   /**< \brief Select shared service request line 3 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   459  } IfxVadc_SrcNr;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   460  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   461  /** \brief API return values defined in
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   462   * MODULE_VADC.G[x].QSR0.U,MODULE_VADC.G[x].ASPND.U
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   463   * MODULE_VADC.BRSPND[x](x=0,1,...,11)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   464   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   465  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   466  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   467      IfxVadc_Status_noError              = 0, /**< \brief No error during api execution */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   468      IfxVadc_Status_notInitialised       = 1, /**< \brief Appropriate initialisation not done */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   469      IfxVadc_Status_invalidGroup         = 2, /**< \brief Invalid group number */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   470      IfxVadc_Status_invalidChannel       = 3, /**< \brief Invalid channel number */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   471      IfxVadc_Status_queueFull            = 4, /**< \brief Queue is full */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   472      IfxVadc_Status_noAccess             = 5, /**< \brief Access to the group/channel is disabled */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   473      IfxVadc_Status_channelsStillPending = 6  /**< \brief Conversion for some of the channels are still pending */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   474  } IfxVadc_Status;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   475  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   476  /** \brief trigger definition defined in MODULE_VADC.G[x].QCTRL0.XTMODE(x=0,1,..,11)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   477   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   478  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   479  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   480      IfxVadc_TriggerMode_noExternalTrigger = 0,  /**< \brief No external trigger */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   481      IfxVadc_TriggerMode_uponFallingEdge   = 1,  /**< \brief Trigger event upon a falling edge */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   482      IfxVadc_TriggerMode_uponRisingEdge    = 2,  /**< \brief Trigger event upon a rising edge */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   483      IfxVadc_TriggerMode_uponAnyEdge       = 3   /**< \brief Trigger event upon any edge */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   484  } IfxVadc_TriggerMode;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   485  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   486  /** \brief Trigger request source defined in MODULE_VADC.G[x].QCTRLy.XTSEL(x=0,1,..,11;y=0,1,..,7)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   487   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   488  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   489  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   490      IfxVadc_TriggerSource_0 = 0,      /**< \brief Input signal REQTRx_0  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   491      IfxVadc_TriggerSource_1,          /**< \brief Input signal REQTRx_1  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   492      IfxVadc_TriggerSource_2,          /**< \brief Input signal REQTRx_2  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   493      IfxVadc_TriggerSource_3,          /**< \brief Input signal REQTRx_3  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   494      IfxVadc_TriggerSource_4,          /**< \brief Input signal REQTRx_4  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   495      IfxVadc_TriggerSource_5,          /**< \brief Input signal REQTRx_5  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   496      IfxVadc_TriggerSource_6,          /**< \brief Input signal REQTRx_6  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   497      IfxVadc_TriggerSource_7,          /**< \brief Input signal REQTRx_7  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   498      IfxVadc_TriggerSource_8,          /**< \brief Input signal REQTRx_8  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   499      IfxVadc_TriggerSource_9,          /**< \brief Input signal REQTRx_9  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   500      IfxVadc_TriggerSource_10,         /**< \brief Input signal REQTRx_10  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   501      IfxVadc_TriggerSource_11,         /**< \brief Input signal REQTRx_11  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   502      IfxVadc_TriggerSource_12,         /**< \brief Input signal REQTRx_12  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   503      IfxVadc_TriggerSource_13,         /**< \brief Input signal REQTRx_13  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   504      IfxVadc_TriggerSource_14,         /**< \brief Input signal REQTRx_14  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   505      IfxVadc_TriggerSource_15          /**< \brief Input signal REQTRx_15  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   506  } IfxVadc_TriggerSource;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   507  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   508  /** \} */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   509  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   510  /** \addtogroup IfxLld_Vadc_Std_Background_Autoscan
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   511   * \{ */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   512  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   513  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   514  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   515  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   516  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   517  /** \brief access function to enable/disable  wait for read mode for result registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   518   * \param group pointer to the VADC group
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   519   * \param resultIdx result register index
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   520   * \param waitForRead wait for read mode enabled/disabled
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   521   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   522   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   523  IFX_INLINE void IfxVadc_configureWaitForReadMode(Ifx_VADC_G *group, uint32 resultIdx, boolean waitForRead);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   524  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   525  /** \brief access function to enable/disable  wait for read mode for global result register
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   526   * \param vadc pointer to the VADC
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   527   * \param waitForRead wait for read mode enabled/disabled
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   528   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   529   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   530  IFX_INLINE void IfxVadc_configureWaitForReadModeForGlobalResultRegister(Ifx_VADC *vadc, boolean waitForRead);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   531  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   532  /** \brief Enables the background sacn external trigger.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   533   * \param vadc pointer to the base of VADC registers.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   534   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   535   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   536  IFX_INLINE void IfxVadc_enableBackgroundScanSlotExternalTrigger(Ifx_VADC *vadc);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   537  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   538  /** \brief Gets the background scan gating mode.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   539   * \param vadc pointer to the base of VADC registers.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   540   * \return background scan gating mode.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   541   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   542  IFX_INLINE IfxVadc_GatingMode IfxVadc_getBackgroundScanGatingMode(Ifx_VADC *vadc);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   543  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   544  /** \brief Gets the gating input selection.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   545   * \param vadc pointer to the base of VADC registers.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   546   * \return background scan gating input selection.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   547   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   548  IFX_INLINE IfxVadc_GatingSource IfxVadc_getBackgroundScanGatingSource(Ifx_VADC *vadc);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   549  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   550  /** \brief Gets the requested background scan slot priority.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   551   * \param vadcG pointer to VADC group registers.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   552   * \return requested background scan slot priority.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   553   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   554  IFX_INLINE IfxVadc_RequestSlotPriority IfxVadc_getBackgroundScanSlotPriority(Ifx_VADC_G *vadcG);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   555  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   556  /** \brief Gets the requested background scan slot start mode.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   557   * \param vadcG pointer to VADC group registers.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   558   * \return requested background scan slot start mode.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   559   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   560  IFX_INLINE IfxVadc_RequestSlotStartMode IfxVadc_getBackgroundScanSlotStartMode(Ifx_VADC_G *vadcG);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   561  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   562  /** \brief Gets the background scan trigger input.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   563   * \param vadc pointer to the base of VADC registers.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   564   * \return Gets the background scan external trigger source.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   565   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   566  IFX_INLINE IfxVadc_TriggerSource IfxVadc_getBackgroundScanTriggerInput(Ifx_VADC *vadc);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   567  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   568  /** \brief Gets the background scan external trigger mode.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   569   * \param vadc pointer to the base of VADC registers.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   570   * \return background scan external trigger mode.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   571   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   572  IFX_INLINE IfxVadc_TriggerMode IfxVadc_getBackgroundScanTriggerMode(Ifx_VADC *vadc);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   573  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   574  /** \brief get global input class resolution
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   575   * \param vadc Pointer to the VADC Group
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   576   * \param inputClassNum global input class number
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   577   * \return ADC input class channel resolution.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   578   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   579  IFX_INLINE IfxVadc_ChannelResolution IfxVadc_getGlobalResolution(Ifx_VADC *vadc, uint8 inputClassNum);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   580  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   581  /** \brief return conversion result stored in the Global result Register
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   582   * \param vadc pointer to the VADC module
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   583   * \return global result register
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   584   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   585   * \code
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   586   * Ifx_VADC* vadc = &MODULE_VADC; // module pointer
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   587   * IfxVadc_GroupId groupId = IfxVadc_GroupId0; // for group 0
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   588   * uint32 channels = (1 << 5) | (1 << 2); // enable channel #5 and #2
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   589   * uint32 mask = (1 << 7) | (1 << 5) | (1 << 2); // modify the selection for channel #7, #5 and #2; channel #7 will be disabled
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   590   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   591   * //confiure wait for read mode for global result register
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   592   * IfxVadc_configureWaitForReadModeForGlobalResultRegister(vadc, TRUE);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   593   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   594   * // configure background scan
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   595   * IfxVadc_setBackgroundScan(vadc, groupId, channels, mask);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   596   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   597   * // enable auto scan
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   598   * IfxVadc_SetAutoBackgroundScan(vadc, TRUE);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   599   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   600   * // start the background scan
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   601   * IfxVadc_startBackgroundScan(vadc);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   602   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   603   * Ifx_VADC_GLOBRES result;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   604   * result = IfxVadc_getGlobalResult (vadc);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   605   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   606   * \endcode
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   607   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   608   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   609  IFX_INLINE Ifx_VADC_GLOBRES IfxVadc_getGlobalResult(Ifx_VADC *vadc);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   610  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   611  /** \brief get global input class sample time in sec
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   612   * \param vadc Pointer to the VADC Group Register space
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   613   * \param inputClassNum ADC input class number
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   614   * \param analogFrequency ADC module analog frequency in Hz.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   615   * \return ADC input class channel sample time in sec.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   616   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   617  IFX_INLINE float32 IfxVadc_getGlobalSampleTime(Ifx_VADC *vadc, uint8 inputClassNum, float32 analogFrequency);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   618  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   619  /** \brief Get conversion result for the group
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   620   * \param group pointer to the VADC group
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   621   * \param results pointer to scaled conversion results
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   622   * \param resultOffset offset for the first result
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   623   * \param numResults number of results
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   624   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   625   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   626   * \code
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   627   * Ifx_VADC* vadc = &MODULE_VADC
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   628   * Ifx_VADC_G* group = &MODULE_VADC.G[0]; // for group 0
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   629   * uint32 channels = (1 << 5) | (1 << 2); // enable channel #5 and #2
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   630   * uint32 mask = (1 << 7) | (1 << 5) | (1 << 2); // modify the selection for channel #7, #5 and #2; channel #7 will be disabled
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   631   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   632   * //confiure wait for read mode for global result register
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   633   * IfxVadc_configureWaitForReadMode(group,IfxVadc_ChannelResult0, TRUE);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   634   * IfxVadc_configureWaitForReadMode(group,IfxVadc_ChannelResult1, TRUE);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   635   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   636   * // configure scan
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   637   * IfxVadc_setScan(group, channels, mask);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   638   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   639   * // enable auto scan
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   640   * IfxVadc_setAutoScan(group, TRUE);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   641   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   642   * // start the scan
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   643   * IfxVadc_startScan(group);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   644   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   645   * // wait for conversion to finish
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   646   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   647   * // fetch the 2 results of conversion for group 0
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   648   * Ifx_VADC_RES results[10];
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   649   * result = IfxVadc_getGroupResult(group, results, 0, 2);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   650   * \endcode
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   651   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   652   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   653  IFX_INLINE void IfxVadc_getGroupResult(Ifx_VADC_G *group, Ifx_VADC_RES *results, uint32 resultOffset, uint32 numResults);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   654  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   655  /** \brief Get conversion result (Function does not care about the alignment)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   656   * value = raw * gain + offset.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   657   * \param group pointer to the VADC group
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   658   * \param resultIdx result register index
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   659   * \return scaled Conversion result
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   660   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   661   * \code
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   662   * Ifx_VADC_G* group = &MODULE_VADC.G[0]; // for group 0
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   663   * uint32 channels = (1 << 5) | (1 << 2); // enable channel #5 and #2
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   664   * uint32 mask = (1 << 7) | (1 << 5) | (1 << 2); // modify the selection for channel #7, #5 and #2; channel #7 will be disabled
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   665   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   666   * //confiure wait for read mode for global result register
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   667   * IfxVadc_configureWaitForReadMode(group,IfxVadc_ChannelResult0, TRUE);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   668   * IfxVadc_configureWaitForReadMode(group,IfxVadc_ChannelResult1, TRUE);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   669   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   670   * // configure scan
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   671   * IfxVadc_setScan(group, channels, mask);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   672   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   673   * // enable auto scan
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   674   * IfxVadc_setAutoScan(group, TRUE);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   675   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   676   * // start the scan
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   677   * IfxVadc_startScan(group);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   678   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   679   * // wait for conversion to finish
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   680   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   681   * // fetch the result of conversion from result register 0 for group 0
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   682   * Ifx_VADC_RES result;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   683   * result = IfxVadc_getResult(group, IfxVadc_ChannelResult0);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   684   * \endcode
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   685   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   686   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   687  IFX_INLINE Ifx_VADC_RES IfxVadc_getResult(Ifx_VADC_G *group, uint32 resultIdx);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   688  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   689  /** \brief Returns the auto background scan status.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   690   * \param vadc pointer to the base of VADC registers.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   691   * \return TRUE if enabled otherwise FALSE.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   692   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   693  IFX_INLINE boolean IfxVadc_isAutoBackgroundScanEnabled(Ifx_VADC *vadc);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   694  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   695  /** \brief Returns the background scan slot requested status.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   696   * \param vadcG pointer to VADC group registers.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   697   * \return background scan slot requested status.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   698   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   699  IFX_INLINE boolean IfxVadc_isRequestBackgroundScanSlotEnabled(Ifx_VADC_G *vadcG);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   700  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   701  /** \brief Enables/Disables continuous background auto scan
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   702   * \param vadc pointer to the base of VADC registers.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   703   * \param autoBackgroundScanEnable whether auto background scan enabled or not.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   704   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   705   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   706  IFX_INLINE void IfxVadc_setAutoBackgroundScan(Ifx_VADC *vadc, boolean autoBackgroundScanEnable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   707  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   708  /** \brief configures a background scan; can also stop autoscan if all channels are 0
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   709   * \param vadc pointer to the VADC module registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   710   * \param groupId group index
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   711   * \param channels specifies the channels which should be enabled/disabled
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   712   * \param mask specifies the channels which should be modified
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   713   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   714   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   715   * Background scan can be enabled/disabled for the given channels which are selected with the mask
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   716   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   717   * \code
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   718   * Ifx_VADC* vadc = &MODULE_VADC; // module pointer
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   719   * IfxVadc_GroupId groupId = IfxVadc_GroupId0; // for group 0
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   720   * uint32 channels = (1 << 5) | (1 << 2); // enable channel #5 and #2
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   721   * uint32 mask = (1 << 7) | (1 << 5) | (1 << 2); // modify the selection for channel #7, #5 and #2; channel #7 will be disabled
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   722   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   723   * //confiure wait for read mode for global result register
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   724   * IfxVadc_configureWaitForReadModeForGlobalResultRegister(vadc, TRUE);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   725   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   726   * // configure background scan
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   727   * IfxVadc_setBackgroundScan(vadc, groupId, channels, mask);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   728   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   729   * // enable auto scan
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   730   * IfxVadc_setAutoBackgroundScan(vadc, TRUE);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   731   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   732   * // start the background scan
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   733   * IfxVadc_startBackgroundScan(vadc);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   734   * \endcode
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   735   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   736   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   737  IFX_INLINE void IfxVadc_setBackgroundScan(Ifx_VADC *vadc, IfxVadc_GroupId groupId, uint32 channels, uint32 mask);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   738  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   739  /** \brief Sets the background scan slot gating configurations.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   740   * \param vadc pointer to the base of VADC registers.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   741   * \param gatingSource gate input for group.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   742   * \param gatingMode gating mode. High level, Low Level  or Gating disabled.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   743   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   744   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   745  IFX_INLINE void IfxVadc_setBackgroundScanSlotGatingConfig(Ifx_VADC *vadc, IfxVadc_GatingSource gatingSource, IfxVadc_GatingMode gatingMode);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   746  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   747  /** \brief Sets the background scan exteranal trigger operating configurations.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   748   * \param vadc pointer to the base of VADC registers.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   749   * \param triggerMode trigger mode. Rising, falling any edge leads to an trigger event.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   750   * \param triggerSource trigger input for group.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   751   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   752   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   753  IFX_INLINE void IfxVadc_setBackgroundScanSlotTriggerConfig(Ifx_VADC *vadc, IfxVadc_TriggerMode triggerMode, IfxVadc_TriggerSource triggerSource);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   754  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   755  /** \brief Starts a background scan
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   756   * \param vadc pointer to the VADC module
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   757   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   758   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   759   * \see IfxVadc_setBackgroundScan
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   760   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   761   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   762  IFX_INLINE void IfxVadc_startBackgroundScan(Ifx_VADC *vadc);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   763  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   764  /** \brief Get debug conversion result
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   765   * \param group pointer to the VADC group
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   766   * \param resultIdx result register index
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   767   * \return Debug conversion result.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   768   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   769  IFX_INLINE Ifx_VADC_RESD IfxVadc_getDebugResult(Ifx_VADC_G *group, uint32 resultIdx);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   770  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   771  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   772  /*-------------------------Global Function Prototypes-------------------------*/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   773  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   774  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   775  /** \brief Gives the background scan status for a group
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   776   * \param vadc pointer to the VADC module
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   777   * \return IfxVadc_Status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   778   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   779  IFX_EXTERN IfxVadc_Status IfxVadc_getBackgroundScanStatus(Ifx_VADC *vadc);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   780  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   781  /** \brief Get conversion result (Function does not care about the alignment)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   782   * value = raw * gain + offset.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   783   * \param vadc VADC module pointer
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   784   * \param group pointer to the VADC group
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   785   * \param channel channel Id
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   786   * \param sourceType type of request source
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   787   * \return scaled Conversion result
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   788   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   789   * \code
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   790   * Ifx_VADC vadc;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   791   * vadc.vadc = &MODULE_VADC;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   792   * Ifx_VADC_G* group = &MODULE_VADC.G[0]; // for group 0
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   793   * uint32 channels = (1 << 5) | (1 << 2); // enable channel #5 and #2
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   794   * uint32 mask = (1 << 7) | (1 << 5) | (1 << 2); // modify the selection for channel #7, #5 and #2; channel #7 will be disabled
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   795   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   796   * //confiure wait for read mode for global result register
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   797   * IfxVadc_configureWaitForReadMode(group,IfxVadc_ChannelResult0, TRUE);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   798   * IfxVadc_configureWaitForReadMode(group,IfxVadc_ChannelResult1, TRUE);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   799   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   800   * // configure scan
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   801   * IfxVadc_setScan(group, channels, mask);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   802   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   803   * // start the scan
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   804   * IfxVadc_startScan(group);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   805   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   806   * // wait for conversion to finish
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   807   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   808   * // fetch the result of conversion for channel 2 of group 0
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   809   * Ifx_VADC_RESresult2;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   810   * result = IfxVadc_getResultBasedOnRequestSource(&vadc, group, IfxVadc_ChannelId2, IfxVadc_RequestSource_scan);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   811   * Ifx_VADC_RESresult5;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   812   * result = IfxVadc_getResultBasedOnRequestSource(&vadc, group, IfxVadc_ChannelId5, IfxVadc_RequestSource_scan);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   813   * \endcode
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   814   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   815   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   816  IFX_EXTERN Ifx_VADC_RES IfxVadc_getResultBasedOnRequestSource(Ifx_VADC *vadc, Ifx_VADC_G *group, IfxVadc_ChannelId channel, IfxVadc_RequestSource sourceType);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   817  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   818  /** \} */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   819  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   820  /** \addtogroup IfxLld_Vadc_Std_ChannelScan
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   821   * \{ */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   822  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   823  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   824  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   825  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   826  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   827  /** \brief Disables the scan slot external trigger.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   828   * \param vadcG pointer to VADC group registers.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   829   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   830   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   831  IFX_INLINE void IfxVadc_disableScanSlotExternalTrigger(Ifx_VADC_G *vadcG);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   832  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   833  /** \brief Enables the scan slot external trigger.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   834   * \param vadcG pointer to VADC group registers.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   835   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   836   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   837  IFX_INLINE void IfxVadc_enableScanSlotExternalTrigger(Ifx_VADC_G *vadcG);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   838  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   839  /** \brief Gets the request scan slot gating mode.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   840   * \param vadcG pointer to VADC group registers.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   841   * \return requested scan slot gating mode.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   842   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   843  IFX_INLINE IfxVadc_GatingMode IfxVadc_getScanSlotGatingMode(Ifx_VADC_G *vadcG);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   844  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   845  /** \brief Gets the request scan slot gating input.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   846   * \param vadcG pointer to VADC group registers.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   847   * \return request scan slot gating input.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   848   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   849  IFX_INLINE IfxVadc_GatingSource IfxVadc_getScanSlotGatingSource(Ifx_VADC_G *vadcG);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   850  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   851  /** \brief Gets the request scan slot priority.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   852   * \param vadcG pointer to VADC group registers.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   853   * \return request scan slot priority.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   854   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   855  IFX_INLINE IfxVadc_RequestSlotPriority IfxVadc_getScanSlotPriority(Ifx_VADC_G *vadcG);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   856  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   857  /** \brief Gets the request scan slot start mode.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   858   * \param vadcG pointer to VADC group registers.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   859   * \return request scan slot start mode.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   860   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   861  IFX_INLINE IfxVadc_RequestSlotStartMode IfxVadc_getScanSlotStartMode(Ifx_VADC_G *vadcG);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   862  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   863  /** \brief Gets the requested scan slot trigger input.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   864   * \param vadcG pointer to VADC group registers.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   865   * \return requested scan slot trigger input.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   866   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   867  IFX_INLINE IfxVadc_TriggerSource IfxVadc_getScanSlotTriggerInput(Ifx_VADC_G *vadcG);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   868  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   869  /** \brief Gets the requested scan slot trigger mode.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   870   * \param vadcG pointer to VADC group registers.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   871   * \return requested scan slot trigger mode.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   872   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   873  IFX_INLINE IfxVadc_TriggerMode IfxVadc_getScanSlotTriggerMode(Ifx_VADC_G *vadcG);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   874  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   875  /** \brief Gets the auto scan enable status.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   876   * \param vadcG pointer to VADC group registers.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   877   * \return TRUE if auto scan enabled otherwise FALSE.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   878   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   879  IFX_INLINE boolean IfxVadc_isAutoScanEnabled(Ifx_VADC_G *vadcG);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   880  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   881  /** \brief Returns the scan slot requested status.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   882   * \param vadcG pointer to VADC group registers.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   883   * \return TRUE if scan slot request enabled otherwise FALSE.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   884   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   885  IFX_INLINE boolean IfxVadc_isRequestScanSlotEnabled(Ifx_VADC_G *vadcG);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   886  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   887  /** \brief Enables/Disables continuous auto scan
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   888   * \param vadcG pointer to VADC group registers.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   889   * \param autoscanEnable whether autoscan is enabled or not.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   890   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   891   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   892  IFX_INLINE void IfxVadc_setAutoScan(Ifx_VADC_G *vadcG, boolean autoscanEnable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   893  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   894  /** \brief Sets the scan slot gating configuration.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   895   * \param vadcG pointer to VADC group registers.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   896   * \param gatingSource gate input for group.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   897   * \param gatingMode gating mode. High level, Low Level  or Gating disabled.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   898   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   899   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   900  IFX_INLINE void IfxVadc_setScanSlotGatingConfig(Ifx_VADC_G *vadcG, IfxVadc_GatingSource gatingSource, IfxVadc_GatingMode gatingMode);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   901  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   902  /** \brief Sets the scan slot trigger operating configurations.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   903   * \param vadcG pointer to VADC group registers.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   904   * \param triggerMode trigger mode. Rising, falling any edge leads to an trigger event.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   905   * \param triggerSource trigger input for group.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   906   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   907   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   908  IFX_INLINE void IfxVadc_setScanSlotTriggerConfig(Ifx_VADC_G *vadcG, IfxVadc_TriggerMode triggerMode, IfxVadc_TriggerSource triggerSource);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   909  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   910  /** \brief Starts an autoscan on the specified group
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   911   * \param group pointer to the VADC group
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   912   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   913   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   914   * See \ref IfxVadc_setScan
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   915   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   916   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   917  IFX_INLINE void IfxVadc_startScan(Ifx_VADC_G *group);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   918  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   919  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   920  /*-------------------------Global Function Prototypes-------------------------*/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   921  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   922  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   923  /** \brief Gives the scan status for a group
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   924   * \param group pointer to the VADC group
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   925   * \return IfxVadc_Status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   926   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   927  IFX_EXTERN IfxVadc_Status IfxVadc_getScanStatus(Ifx_VADC_G *group);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   928  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   929  /** \brief Configures an (auto-)scan
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   930   * \param group pointer to the VADC group
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   931   * \param channels specifies the channels which should be enabled/disabled
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   932   * \param mask specifies the channels which should be modified
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   933   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   934   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   935   * (Auto-)Scan can be enabled/disabled for the given channels which are selected with the mask
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   936   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   937   * \code
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   938   * Ifx_VADC_G* group = &MODULE_VADC.G[0]; // for group 0
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   939   * uint32 channels = (1 << 5) | (1 << 2); // enable channel #5 and #2
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   940   * uint32 mask = (1 << 7) | (1 << 5) | (1 << 2); // modify the selection for channel #7, #5 and #2; channel #7 will be disabled
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   941   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   942   * // configure scan
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   943   * IfxVadc_setScan(group, channels, mask);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   944   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   945   * // enable Auto-Scan
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   946   * IfxVadc_setAutoScan(group, TRUE);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   947   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   948   * // start the scan
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   949   * IfxVadc_startScan(group);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   950   * \endcode
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   951   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   952   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   953  IFX_EXTERN void IfxVadc_setScan(Ifx_VADC_G *group, uint32 channels, uint32 mask);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   954  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   955  /** \} */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   956  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   957  /** \addtogroup IfxLld_Vadc_Std_QueueRequest
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   958   * \{ */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   959  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   960  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   961  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   962  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   963  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   964  /** \brief Add an entry to the queue of a group for the specified channel with the following options set:
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   965   * refill incase of aborted conversion
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   966   * source interrupt enable/disable
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   967   * external trigger control of the aborted conversion
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   968   * \param group pointer to the VADC group
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   969   * \param channel specifies channel Id
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   970   * \param options specifies the refill, source interrupt enable/disable and external trigger control selection
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   971   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   972   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   973   * \code
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   974   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   975   * Ifx_VADC_G* group = &MODULE_VADC.G[0]; // for group 0
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   976   * IfxVadc_ChannelId channel = 1; // for channel 1
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   977   * // Add channel 1 to queue of group 0 with the refill turned on
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   978   * IfxVadc_addToQueue(qroup, channel, (1<<IFX_VADC_G_QBUR0_RF_OFF));
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   979   * \endcode
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   980   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   981   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   982  IFX_INLINE void IfxVadc_addToQueue(Ifx_VADC_G *group, IfxVadc_ChannelId channel, uint32 options);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   983  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   984  /** \brief Clears all the queue entries including backup stage.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   985   * \param vadcG pointer to VADC group registers.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   986   * \param flushQueue Whether queue is cleared or not.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   987   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   988   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   989  IFX_INLINE void IfxVadc_clearQueue(Ifx_VADC_G *vadcG, boolean flushQueue);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   990  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   991  /** \brief Disables the external trigger.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   992   * \param vadcG pointer to VADC group registers.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   993   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   994   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   995  IFX_INLINE void IfxVadc_disableQueueSlotExternalTrigger(Ifx_VADC_G *vadcG);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   996  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   997  /** \brief Enables the external trigger.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   998   * \param vadcG pointer to VADC group registers.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   999   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1000   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1001  IFX_INLINE void IfxVadc_enableQueueSlotExternalTrigger(Ifx_VADC_G *vadcG);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1002  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1003  /** \brief Gets the requested queue slot gating mode.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1004   * \param vadcG pointer to VADC group registers.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1005   * \return requested queue slot gating mode.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1006   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1007  IFX_INLINE IfxVadc_GatingMode IfxVadc_getQueueSlotGatingMode(Ifx_VADC_G *vadcG);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1008  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1009  /** \brief Gets the requested queue slot gating input.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1010   * \param vadcG pointer to VADC group registers.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1011   * \return requested queue slot gating input.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1012   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1013  IFX_INLINE IfxVadc_GatingSource IfxVadc_getQueueSlotGatingSource(Ifx_VADC_G *vadcG);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1014  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1015  /** \brief Gets the request queue slot priority.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1016   * \param vadcG pointer to VADC group registers.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1017   * \return requested queue slot priority.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1018   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1019  IFX_INLINE IfxVadc_RequestSlotPriority IfxVadc_getQueueSlotPriority(Ifx_VADC_G *vadcG);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1020  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1021  /** \brief Gets the requested queue slot start mode.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1022   * \param vadcG pointer to VADC group registers.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1023   * \return requested queue slot start mode.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1024   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1025  IFX_INLINE IfxVadc_RequestSlotStartMode IfxVadc_getQueueSlotStartMode(Ifx_VADC_G *vadcG);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1026  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1027  /** \brief Gets the requested queue slot trigger input.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1028   * \param vadcG pointer to VADC group registers.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1029   * \return requested queue slot trigger input.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1030   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1031  IFX_INLINE IfxVadc_TriggerSource IfxVadc_getQueueSlotTriggerInput(Ifx_VADC_G *vadcG);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1032  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1033  /** \brief Gets the requested queue slot trigger mode.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1034   * \param vadcG pointer to VADC group registers.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1035   * \return requested queue slot trigger mode.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1036   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1037  IFX_INLINE IfxVadc_TriggerMode IfxVadc_getQueueSlotTriggerMode(Ifx_VADC_G *vadcG);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1038  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1039  /** \brief Returns the queue slot requested status.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1040   * \param vadcG pointer to VADC group registers.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1041   * \return TRUE if queue slot request enabled otherwise FALSE.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1042   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1043  IFX_INLINE boolean IfxVadc_isRequestQueueSlotEnabled(Ifx_VADC_G *vadcG);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1044  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1045  /** \brief Sets the gating configurations.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1046   * \param vadcG pointer to VADC group registers.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1047   * \param gatingSource gate input for group.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1048   * \param gatingMode gating mode. High level, Low Level  or Gating disabled.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1049   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1050   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1051  IFX_INLINE void IfxVadc_setQueueSlotGatingConfig(Ifx_VADC_G *vadcG, IfxVadc_GatingSource gatingSource, IfxVadc_GatingMode gatingMode);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1052  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1053  /** \brief Sets the trigger operating configurations.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1054   * \param vadcG pointer to VADC group registers.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1055   * \param triggerMode trigger mode. Rising, falling any edge leads to an trigger event.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1056   * \param triggerSource trigger input for group.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1057   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1058   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1059  IFX_INLINE void IfxVadc_setQueueSlotTriggerOperatingConfig(Ifx_VADC_G *vadcG, IfxVadc_TriggerMode triggerMode, IfxVadc_TriggerSource triggerSource);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1060  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1061  /** \brief Starts a queue of a group by generating a trigger event through software
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1062   * \param group pointer to the VADC group
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1063   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1064   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1065  IFX_INLINE void IfxVadc_startQueue(Ifx_VADC_G *group);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1066  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1067  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1068  /*-------------------------Global Function Prototypes-------------------------*/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1069  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1070  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1071  /** \brief Gives the status of the Queue of a group by returning non zero value if the Queue is full
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1072   * \param group pointer to the VADC group
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1073   * \return status of the Queue
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1074   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1075   * \code
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1076   * Ifx_VADC_G* group = &MODULE_VADC.G[0]; // for group 0
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1077   * boolean queueFull = (IfxVadc_getQueueStatus(group)==IfxVadc_Status_queueFull)?TRUE:FALSE; // get Queue status for group 0
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1078   * \endcode
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1079   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1080   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1081  IFX_EXTERN IfxVadc_Status IfxVadc_getQueueStatus(Ifx_VADC_G *group);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1082  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1083  /** \} */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1084  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1085  /** \addtogroup IfxLld_Vadc_Std_IO
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1086   * \{ */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1087  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1088  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1089  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1090  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1091  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1092  /** \brief Initializes a EMUX output
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1093   * \param emux the Emux Pin which should be configured
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1094   * \param outputMode the pin output mode which should be configured
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1095   * \param padDriver the pad driver mode which should be configured
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1096   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1097   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1098  IFX_INLINE void IfxVadc_initEmuxPin(const IfxVadc_Emux_Out *emux, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1099  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1100  /** \brief Initializes a GxBFL output
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1101   * \param gxBfl the GxBFL Pin which should be configured
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1102   * \param outputMode the pin output mode which should be configured
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1103   * \param padDriver the pad driver mode which should be configured
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1104   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1105   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1106  IFX_INLINE void IfxVadc_initGxBflPin(const IfxVadc_GxBfl_Out *gxBfl, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1107  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1108  /** \} */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1109  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1110  /** \addtogroup IfxLld_Vadc_Std_Frequency
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1111   * \{ */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1112  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1113  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1114  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1115  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1116  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1117  /** \brief Calculate the time using analog frequency.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1118   * \param analogFrequency analog frequency in Hz.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1119   * \param sampleTime sample time in sec.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1120   * \return sample time in sec.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1121   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1122  IFX_INLINE uint32 IfxVadc_calculateSampleTime(float32 analogFrequency, float32 sampleTime);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1123  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1124  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1125  /*-------------------------Global Function Prototypes-------------------------*/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1126  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1127  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1128  /** \brief Returns the configured Fadci VADC analog clock frequency in Hz.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1129   * \param vadc pointer to the base of VADC registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1130   * \return Returns the configured Fadci VADC analog clock frequency in Hz.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1131   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1132  IFX_EXTERN float32 IfxVadc_getAdcAnalogFrequency(Ifx_VADC *vadc);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1133  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1134  /** \brief Returns the configured Fadcd VADC digital clock frequency in Hz.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1135   * \param vadc pointer to the base of VADC registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1136   * \return Returns the configured Fadcd VADC digital clock frequency in Hz.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1137   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1138  IFX_EXTERN float32 IfxVadc_getAdcDigitalFrequency(Ifx_VADC *vadc);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1139  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1140  /** \} */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1141  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1142  /** \addtogroup IfxLld_Vadc_Std_Group
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1143   * \{ */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1144  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1145  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1146  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1147  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1148  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1149  /** \brief Clears the all group requests.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1150   * \param vadcG pointer to VADC group registers.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1151   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1152   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1153  IFX_INLINE void IfxVadc_clearAllResultRequests(Ifx_VADC_G *vadcG);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1154  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1155  /** \brief Gets the ADC group arbitration round length.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1156   * \param vadcG pointer to VADC group registers.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1157   * \return ADC group arbitration round length.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1158   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1159  IFX_INLINE IfxVadc_ArbitrationRounds IfxVadc_getArbiterRoundLength(Ifx_VADC_G *vadcG);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1160  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1161  /** \brief Gets the channel esult service request node pointer 0.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1162   * \param vadcG pointer to VADC group registers.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1163   * \return channel result service request node pointer 0.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1164   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1165  IFX_INLINE Ifx_VADC_G_REVNP0 IfxVadc_getChannelResultServiceRequestNodePointer0(Ifx_VADC_G *vadcG);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1166  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1167  /** \brief Gets the channel esult service request node pointer 1.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1168   * \param vadcG pointer to VADC group registers.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1169   * \return channel result service request node pointer 1.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1170   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1171  IFX_INLINE Ifx_VADC_G_REVNP1 IfxVadc_getChannelResultServiceRequestNodePointer1(Ifx_VADC_G *vadcG);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1172  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1173  /** \brief Gets the channel service request node pointer.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1174   * \param vadcG pointer to VADC group registers.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1175   * \return channel service request node pointer.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1176   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1177  IFX_INLINE Ifx_VADC_G_CEVNP0 IfxVadc_getChannelServiceRequestNodePointer0(Ifx_VADC_G *vadcG);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1178  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1179  /** \brief Gets the configured master index.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1180   * \param vadcG pointer to VADC group registers.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1181   * \return configured master kernel index.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1182   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1183  IFX_INLINE uint8 IfxVadc_getMasterIndex(Ifx_VADC_G *vadcG);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1184  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1185  /** \brief Resets the ADC group.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1186   * \param vadcG pointer to VADC group registers.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1187   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1188   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1189  IFX_INLINE void IfxVadc_resetGroup(Ifx_VADC_G *vadcG);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1190  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1191  /** \brief Sets analog converter group number.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1192   * \param vadcG pointer to VADC group registers.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1193   * \param analogConverterMode group analog converter mode.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1194   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1195   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1196  IFX_INLINE void IfxVadc_setAnalogConvertControl(Ifx_VADC_G *vadcG, IfxVadc_AnalogConverterMode analogConverterMode);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1197  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1198  /** \brief Sets the arbiter round length.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1199   * \param vadcG pointer to VADC group registers.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1200   * \param arbiterRoundLength arbiter round length.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1201   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1202   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1203  IFX_INLINE void IfxVadc_setArbitrationRoundLength(Ifx_VADC_G *vadcG, IfxVadc_ArbitrationRounds arbiterRoundLength);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1204  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1205  /** \brief Sets the ADC input class channel resolution.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1206   * \param vadcG pointer to VADC group registers.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1207   * \param inputClassNum input class number.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1208   * \param resolution ADC input class channel resolution.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1209   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1210   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1211  IFX_INLINE void IfxVadc_setGroupResolution(Ifx_VADC_G *vadcG, uint8 inputClassNum, IfxVadc_ChannelResolution resolution);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1212  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1213  /** \brief Sets the ADC input class sample time.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1214   * \param vadcG pointer to VADC group registers.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1215   * \param inputClassNum input class number.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1216   * \param analogFrequency ADC analog frequency in Hz.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1217   * \param sampleTime request sample time in sec for input class.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1218   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1219   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1220  IFX_INLINE void IfxVadc_setGroupSampleTime(Ifx_VADC_G *vadcG, uint8 inputClassNum, float32 analogFrequency, float32 sampleTime);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1221  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1222  /** \brief Sets the master index.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1223   * \param vadcG pointer to VADC group registers.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1224   * \param masterIndex master index.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1225   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1226   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1227  IFX_INLINE void IfxVadc_setMasterIndex(Ifx_VADC_G *vadcG, uint8 masterIndex);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1228  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1229  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1230  /*-------------------------Global Function Prototypes-------------------------*/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1231  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1232  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1233  /** \brief Sets the Arbiter slot configurations.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1234   * \param vadcG pointer to VADC group registers.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1235   * \param slotEnable enable/disable of slot.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1236   * \param prio channel request priority.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1237   * \param mode Channel Slot start mode.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1238   * \param slot channel slot Request source.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1239   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1240   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1241  IFX_EXTERN void IfxVadc_setArbiterPriority(Ifx_VADC_G *vadcG, boolean slotEnable, IfxVadc_RequestSlotPriority prio, IfxVadc_RequestSlotStartMode mode, IfxVadc_RequestSource slot);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1242  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1243  /** \} */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1244  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1245  /** \addtogroup IfxLld_Vadc_Std_Module
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1246   * \{ */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1247  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1248  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1249  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1250  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1251  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1252  /** \brief Disable VADC Module
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1253   * \param vadc Pointer to VADC Module
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1254   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1255   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1256  IFX_INLINE void IfxVadc_disableModule(Ifx_VADC *vadc);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1257  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1258  /** \brief Enable VADC kernel.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1259   * \param vadc pointer to the base of VADC registers.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1260   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1261   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1262  IFX_INLINE void IfxVadc_enableModule(Ifx_VADC *vadc);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1263  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1264  /** \brief gets ADC Calibration Flag CAL status.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1265   * \param vadc pointer to VADC group registers.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1266   * \param adcCalGroupNum ADC CAL group number.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1267   * \return CAL group status.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1268   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1269  IFX_INLINE uint8 IfxVadc_getAdcCalibrationActiveState(Ifx_VADC *vadc, uint8 adcCalGroupNum);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1270  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1271  /** \brief Gets the global control configuration value.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1272   * \param vadc pointer to the base of VADC registers.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1273   * \return global control configuration value.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1274   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1275  IFX_INLINE Ifx_VADC_GLOBCFG IfxVadc_getGlobalConfigValue(Ifx_VADC *vadc);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1276  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1277  /** \brief get SUCAL bit field status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1278   * \param vadc Pointer to VADC Module
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1279   * \return Indicate the start-up calibration phase
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1280   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1281  IFX_INLINE boolean IfxVadc_getStartupCalibration(Ifx_VADC *vadc);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1282  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1283  /** \brief initiates the calibration pulse phase.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1284   * \param vadc pointer to the base of VADC registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1285   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1286   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1287  IFX_INLINE void IfxVadc_initiateStartupCalibration(Ifx_VADC *vadc);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1288  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1289  /** \brief Sets the channel conversion mode.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1290   * \param vadc pointer to VADC module registers.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1291   * \param inputClassNum global input class  number.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1292   * \param resolution ADC channel resolution.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1293   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1294   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1295  IFX_INLINE void IfxVadc_setGlobalResolution(Ifx_VADC *vadc, uint8 inputClassNum, IfxVadc_ChannelResolution resolution);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1296  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1297  /** \brief Sets the sample time of ADC global class.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1298   * \param vadc pointer to VADC module registers.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1299   * \param inputClassNum global input class  number.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1300   * \param analogFrequency ADC analog frequency in Hz.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1301   * \param sampleTime the requested sample time for input class in sec.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1302   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1303   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1304  IFX_INLINE void IfxVadc_setGlobalSampleTime(Ifx_VADC *vadc, uint8 inputClassNum, float32 analogFrequency, float32 sampleTime);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1305  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1306  /** \brief Sets the sensitivity of the module to sleep signal
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1307   * \param vadc pointer to VADC registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1308   * \param mode mode selection (enable/disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1309   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1310   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1311  IFX_INLINE void IfxVadc_setSleepMode(Ifx_VADC *vadc, IfxVadc_SleepMode mode);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1312  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1313  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1314  /*-------------------------Global Function Prototypes-------------------------*/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1315  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1316  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1317  /** \brief Disable write access to the VADC config/control registers.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1318   * \param vadc pointer to the base of VADC registers.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1319   * \param protectionSet Index of the bit in the ACCPROTx {x=0/1} for which write access is to be disabled.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1320   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1321   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1322  IFX_EXTERN void IfxVadc_disableAccess(Ifx_VADC *vadc, IfxVadc_Protection protectionSet);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1323  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1324  /** \brief Disables the post calibration.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1325   * \param vadc pointer to the base of VADC registers.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1326   * \param group Index of the group.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1327   * \param disable disable or not.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1328   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1329   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1330  IFX_EXTERN void IfxVadc_disablePostCalibration(Ifx_VADC *vadc, IfxVadc_GroupId group, boolean disable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1331  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1332  /** \brief Enable write access to the VADC config/control registers.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1333   * \param vadc pointer to the base of VADC registers.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1334   * \param protectionSet Index of the bit in the ACCPROTx {x=0/1} for which write access is to be enabled.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1335   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1336   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1337  IFX_EXTERN void IfxVadc_enableAccess(Ifx_VADC *vadc, IfxVadc_Protection protectionSet);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1338  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1339  /** \brief Enables the CCU6 based ADC group synchronisation as workaround for Erratum ADC_TC.068
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1340   * \param vadc pointer to the base of VADC registers.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1341   * \param ccu6Num selects CCU60 or CCU61
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1342   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1343   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1344  IFX_EXTERN void IfxVadc_enableGroupSync(Ifx_VADC *vadc, uint32 ccu6Num);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1345  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1346  /** \brief Module Frequency in Hz
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1347   * \return Module Frequency in Hz.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1348   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1349  IFX_EXTERN float32 IfxVadc_getAdcModuleFrequency(void);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1350  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1351  /** \brief Gives the SRC source address.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1352   * \param group Index of the group
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1353   * \param index SRC number
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1354   * \return SRC source address
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1355   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1356  IFX_EXTERN volatile Ifx_SRC_SRCR *IfxVadc_getSrcAddress(IfxVadc_GroupId group, IfxVadc_SrcNr index);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1357  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1358  /** \brief Initialises ADC arbiter clock.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1359   * \param vadc pointer to the base of VADC registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1360   * \param arbiterClockDivider ADC arbiter clock divider.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1361   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1362   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1363  IFX_EXTERN void IfxVadc_initialiseAdcArbiterClock(Ifx_VADC *vadc, uint32 arbiterClockDivider);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1364  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1365  /** \brief Initialises the ADC Converter clock.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1366   * \param vadc pointer to the base of VADC registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1367   * \param converterClockDivider ADC converter clock divider.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1368   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1369   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1370  IFX_EXTERN void IfxVadc_initialiseAdcConverterClock(Ifx_VADC *vadc, uint32 converterClockDivider);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1371  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1372  /** \brief Configure the FadcD vadc digital clock.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1373   * \param vadc pointer to the base of VADC registers.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1374   * \param fAdcD ADC digital clock frequency in Hz.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1375   * \return calculated ADC digital clock frequency in Hz.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1376   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1377  IFX_EXTERN uint32 IfxVadc_initializeFAdcD(Ifx_VADC *vadc, uint32 fAdcD);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1378  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1379  /** \brief Configure the ADC analog clock.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1380   * \param vadc pointer to the base of VADC registers.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1381   * \param fAdcI ADC analog clock clock frequency in Hz. Range = [5000000, 10000000].
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1382   * \return ADC analog clock frequency in Hz.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1383   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1384  IFX_EXTERN uint32 IfxVadc_initializeFAdcI(Ifx_VADC *vadc, uint32 fAdcI);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1385  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1386  /** \brief Return the post calibration status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1387   * \param vadc Pointer to VADC module
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1388   * \param group specifies Group ID
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1389   * \return TRUE if the post calibration is enabled for the group else false
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1390   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1391  IFX_EXTERN boolean IfxVadc_isPostCalibration(Ifx_VADC *vadc, IfxVadc_GroupId group);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1392  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1393  /** \brief Resets the kernel.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1394   * \param vadc pointer to the base of VADC registers.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1395   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1396   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1397  IFX_EXTERN void IfxVadc_resetKernel(Ifx_VADC *vadc);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1398  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1399  /** \brief Select Low Power Supply Voltage
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1400   * \param vadc Pointer to Module space
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1401   * \param supplyVoltage Select Supply Voltage
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1402   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1403   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1404  IFX_EXTERN void IfxVadc_selectPowerSupplyVoltage(Ifx_VADC *vadc, IfxVadc_LowSupplyVoltageSelect supplyVoltage);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1405  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1406  /** \brief Starts ADC calibration and wait for the end of the calibration process.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1407   * \param vadc pointer to the base of VADC registers.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1408   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1409   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1410  IFX_EXTERN void IfxVadc_startupCalibration(Ifx_VADC *vadc);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1411  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1412  /** \} */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1413  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1414  /** \addtogroup IfxLld_Vadc_Std_Channel
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1415   * \{ */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1416  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1417  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1418  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1419  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1420  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1421  /** \brief Clears the channel request.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1422   * \param vadcG pointer to VADC group registers.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1423   * \param channelId channel id whose request to be cleared.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1424   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1425   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1426  IFX_INLINE void IfxVadc_clearChannelRequest(Ifx_VADC_G *vadcG, IfxVadc_ChannelId channelId);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1427  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1428  /** \brief Enables the FIFO mode.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1429   * \param vadcG pointer to VADC group registers.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1430   * \param resultRegister channel result register.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1431   * \param fifoMode FIFO mode .
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1432   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1433   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1434  IFX_INLINE void IfxVadc_enableFifoMode(Ifx_VADC_G *vadcG, IfxVadc_ChannelResult resultRegister, IfxVadc_FifoMode fifoMode);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1435  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1436  /**
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1437   * \param vadcG pointer to VADC group registers.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1438   * \param resultRegister channel result register.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1439   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1440   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1441  IFX_INLINE void IfxVadc_enableServiceRequest(Ifx_VADC_G *vadcG, IfxVadc_ChannelResult resultRegister);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1442  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1443  /** \brief Gets the group's assigned channels.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1444   * \param vadcG pointer to VADC group registers.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1445   * \return group's assigned channels.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1446   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1447  IFX_INLINE Ifx_VADC_G_CHASS IfxVadc_getAssignedChannels(Ifx_VADC_G *vadcG);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1448  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1449  /** \brief Gets the current ADC channel control configurations.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1450   * \param vadcG pointer to VADC group registers.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1451   * \param channelIndex ADC channel number.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1452   * \return current ADC channel control configuration.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1453   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1454  IFX_INLINE Ifx_VADC_CHCTR IfxVadc_getChannelControlConfig(Ifx_VADC_G *vadcG, IfxVadc_ChannelId channelIndex);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1455  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1456  /** \brief Gets the channel input class
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1457   * \param vadcG pointer to VADC Group register space
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1458   * \param channelIndex specifies channel ID
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1459   * \return Input class
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1460   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1461  IFX_INLINE IfxVadc_InputClasses IfxVadc_getChannelInputClass(Ifx_VADC_G *vadcG, IfxVadc_ChannelId channelIndex);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1462  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1463  /** \brief Gets the ADC input class channel resolution.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1464   * \param vadcG pointer to VADC group registers.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1465   * \param inputClassNum ADC input class number.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1466   * \return ADC input class channel resolution.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1467   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1468  IFX_INLINE IfxVadc_ChannelResolution IfxVadc_getGroupResolution(Ifx_VADC_G *vadcG, uint8 inputClassNum);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1469  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1470  /** \brief Gets the ADC input class channel sample time.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1471   * \param vadcG pointer to VADC group registers.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1472   * \param inputClassNum ADC input class number.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1473   * \param analogFrequency ADC module analog frequency in Hz.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1474   * \return ADC input class channel sample time in sec.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1475   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1476  IFX_INLINE float32 IfxVadc_getGroupSampleTime(Ifx_VADC_G *vadcG, uint8 inputClassNum, float32 analogFrequency);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1477  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1478  /** \brief Sets the channels with low priority as background channel.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1479   * \param vadcG pointer to VADC group registers.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1480   * \param channelIndex group channel id.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1481   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1482   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1483  IFX_INLINE void IfxVadc_setBackgroundPriorityChannel(Ifx_VADC_G *vadcG, IfxVadc_ChannelId channelIndex);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1484  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1485  /** \brief Sets the target for result background source.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1486   * \param vadcG pointer to VADC group registers.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1487   * \param channelIndex group channel id.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1488   * \param globalResultUsage whether storage in global result register.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1489   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1490   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1491  IFX_INLINE void IfxVadc_setBackgroundResultTarget(Ifx_VADC_G *vadcG, IfxVadc_ChannelId channelIndex, boolean globalResultUsage);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1492  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1493  /** \brief Selects boundary extension.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1494   * \param vadcG pointer to VADC group registers.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1495   * \param channelIndex group channel id.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1496   * \param boundaryMode boundary extension mode.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1497   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1498   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1499  IFX_INLINE void IfxVadc_setBoundaryMode(Ifx_VADC_G *vadcG, IfxVadc_ChannelId channelIndex, IfxVadc_BoundaryExtension boundaryMode);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1500  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1501  /** \brief Sets the channel event service request line.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1502   * \param vadcG pointer to VADC group registers.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1503   * \param channelSrcNr channel event Service Node.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1504   * \param channel channel number.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1505   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1506   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1507  IFX_INLINE void IfxVadc_setChannelEventNodePointer0(Ifx_VADC_G *vadcG, IfxVadc_SrcNr channelSrcNr, IfxVadc_ChannelId channel);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1508  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1509  /** \brief Sets the channel input class.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1510   * \param vadcG pointer to VADC group registers.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1511   * \param channelIndex group channel id.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1512   * \param inputClass group input class.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1513   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1514   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1515  IFX_INLINE void IfxVadc_setChannelInputClass(Ifx_VADC_G *vadcG, IfxVadc_ChannelId channelIndex, IfxVadc_InputClasses inputClass);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1516  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1517  /** \brief Sets the channel event mode.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1518   * \param vadcG pointer to VADC group registers.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1519   * \param channelIndex group channel id.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1520   * \param limitCheck channel event mode.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1521   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1522   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1523  IFX_INLINE void IfxVadc_setChannelLimitCheckMode(Ifx_VADC_G *vadcG, IfxVadc_ChannelId channelIndex, IfxVadc_LimitCheck limitCheck);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1524  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1525  /** \brief Sets channel as priority channel with in the group.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1526   * \param vadcG pointer to VADC group registers.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1527   * \param channelIndex group channel id.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1528   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1529   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1530  IFX_INLINE void IfxVadc_setGroupPriorityChannel(Ifx_VADC_G *vadcG, IfxVadc_ChannelId channelIndex);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1531  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1532  /** \brief Sets group's lower boundary.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1533   * \param vadcG pointer to VADC group registers.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1534   * \param channelIndex group channel id.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1535   * \param lowerBoundary group lower boundary.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1536   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1537   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1538  IFX_INLINE void IfxVadc_setLowerBoundary(Ifx_VADC_G *vadcG, IfxVadc_ChannelId channelIndex, IfxVadc_BoundarySelection lowerBoundary);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1539  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1540  /** \brief Selects the refernce input.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1541   * \param vadcG pointer to VADC group registers.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1542   * \param channelIndex group channel id.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1543   * \param reference reference input.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1544   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1545   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1546  IFX_INLINE void IfxVadc_setReferenceInput(Ifx_VADC_G *vadcG, IfxVadc_ChannelId channelIndex, IfxVadc_ChannelReference reference);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1547  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1548  /** \brief Sets result event node pointer 0.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1549   * \param vadcG pointer to VADC group registers.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1550   * \param resultSrcNr channel result event service node.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1551   * \param resultRegister channel result register.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1552   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1553   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1554  IFX_INLINE void IfxVadc_setResultNodeEventPointer0(Ifx_VADC_G *vadcG, IfxVadc_SrcNr resultSrcNr, IfxVadc_ChannelResult resultRegister);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1555  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1556  /** \brief Sets result event node pointer 1.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1557   * \param vadcG pointer to VADC group registers.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1558   * \param resultSrcNr channel result event service node.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1559   * \param resultRegister channel result register.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1560   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1561   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1562  IFX_INLINE void IfxVadc_setResultNodeEventPointer1(Ifx_VADC_G *vadcG, IfxVadc_SrcNr resultSrcNr, IfxVadc_ChannelResult resultRegister);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1563  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1564  /** \brief Sets result store position.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1565   * \param vadcG pointer to VADC group registers.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1566   * \param channelIndex group channel id.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1567   * \param rightAlignedStorage result store position.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1568   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1569   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1570  IFX_INLINE void IfxVadc_setResultPosition(Ifx_VADC_G *vadcG, IfxVadc_ChannelId channelIndex, boolean rightAlignedStorage);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1571  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1572  /** \brief Sets channel synchronization request.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1573   * \param vadcG pointer to VADC group registers.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1574   * \param channelIndex group channel id.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1575   * \param synchonize whether channel synchronize or stand alone operation.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1576   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1577   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1578  IFX_INLINE void IfxVadc_setSyncRequest(Ifx_VADC_G *vadcG, IfxVadc_ChannelId channelIndex, boolean synchonize);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1579  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1580  /** \brief Sets group's upper boundary.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1581   * \param vadcG pointer to VADC group registers.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1582   * \param channelIndex group channel id.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1583   * \param upperBoundary group upper boundary.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1584   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1585   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1586  IFX_INLINE void IfxVadc_setUpperBoundary(Ifx_VADC_G *vadcG, IfxVadc_ChannelId channelIndex, IfxVadc_BoundarySelection upperBoundary);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1587  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1588  /** \brief Sets the group result register.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1589   * \param vadcG pointer to VADC group registers.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1590   * \param channelIndex group channel id.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1591   * \param resultRegister result register for group result storage.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1592   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1593   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1594  IFX_INLINE void IfxVadc_storeGroupResult(Ifx_VADC_G *vadcG, IfxVadc_ChannelId channelIndex, IfxVadc_ChannelResult resultRegister);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1595  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1596  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1597  /*-------------------------Global Function Prototypes-------------------------*/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1598  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1599  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1600  /** \brief get channel conversion timing
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1601   * \param vadc Pointer to VADC module
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1602   * \param group specifies the Group
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1603   * \param inputClass Input class used
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1604   * \param analogFrequency ADC module analog frequency fadci in Hz.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1605   * \param moduleFrequency ADC module frequency fvadc in Hz.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1606   * \param conversionMode specifies the conversion mode (Standard conversion mode)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1607   * \return Channel conversion Time in sec
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1608   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1609  IFX_EXTERN float32 IfxVadc_getChannelConversionTime(Ifx_VADC *vadc, IfxVadc_GroupId group, IfxVadc_InputClasses inputClass, float32 analogFrequency, float32 moduleFrequency, IfxVadc_ConversionType conversionMode);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1610  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1611  /** \} */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1612  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1613  /** \addtogroup IfxLld_Vadc_Std_Emux
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1614   * \{ */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1615  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1616  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1617  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1618  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1619  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1620  /** \brief get global input class resolution
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1621   * \param vadc Pointer to VADC Module space
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1622   * \param inputClassNum global input class number
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1623   * \return External channel resolution for global input class
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1624   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1625  IFX_INLINE IfxVadc_ChannelResolution IfxVadc_getEmuxGlobalResolution(Ifx_VADC *vadc, uint8 inputClassNum);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1626  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1627  /** \brief Get the sample time of ADC global class for external channel.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1628   * \param vadc pointer to VADC Module space
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1629   * \param inputClassNum Adc input class number
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1630   * \param analogFrequency ADC module analog frequency in Hz.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1631   * \return ADC input class external channel sample time in sec.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1632   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1633  IFX_INLINE float32 IfxVadc_getEmuxGlobalSampleTime(Ifx_VADC *vadc, uint8 inputClassNum, float32 analogFrequency);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1634  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1635  /** \brief get the external channel resolution
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1636   * \param vadcG Pointer to VADC group register space
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1637   * \param inputClassNum Adc input class number
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1638   * \return Adc input class External channel resolution
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1639   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1640  IFX_INLINE IfxVadc_ChannelResolution IfxVadc_getEmuxGroupResolution(Ifx_VADC_G *vadcG, uint8 inputClassNum);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1641  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1642  /** \brief Gets the ADC input class sample time of external channel.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1643   * \param vadcG Pointer to Register Group space
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1644   * \param inputClassNum ADC input class number
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1645   * \param analogFrequency ADC module analog frequency in Hz.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1646   * \return ADC input class external channel sample time in sec.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1647   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1648  IFX_INLINE float32 IfxVadc_getEmuxGroupSampleTime(Ifx_VADC_G *vadcG, uint8 inputClassNum, float32 analogFrequency);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1649  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1650  /** \brief set the external channel resolution of Global class
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1651   * \param vadc pointer to VADC Module space
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1652   * \param inputClassNum Global Input Class Number
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1653   * \param resolution External Channel resolution
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1654   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1655   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1656  IFX_INLINE void IfxVadc_setEmuxGlobalResolution(Ifx_VADC *vadc, uint8 inputClassNum, IfxVadc_ChannelResolution resolution);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1657  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1658  /** \brief Sets the sample time of ADC global class for external channel.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1659   * \param vadc Pointer to VADC Module space
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1660   * \param inputClassNum Adc input class number
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1661   * \param analogFrequency ADC analog Frequency in HZ
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1662   * \param sampleTime the requested sample time for input class in sec
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1663   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1664   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1665  IFX_INLINE void IfxVadc_setEmuxGlobalSampleTime(Ifx_VADC *vadc, uint8 inputClassNum, float32 analogFrequency, float32 sampleTime);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1666  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1667  /** \brief set the external channel resolution of ADC input class
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1668   * \param vadcG pointer to VADC Group Register space
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1669   * \param inputClassNum input class number
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1670   * \param resolution input class external channel resolution
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1671   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1672   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1673  IFX_INLINE void IfxVadc_setEmuxGroupResolution(Ifx_VADC_G *vadcG, uint8 inputClassNum, IfxVadc_ChannelResolution resolution);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1674  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1675  /** \brief Sets the ADC input class sample time for external channel.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1676   * \param vadcG Pointer to VADC Group Register Space
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1677   * \param inputClassNum input class number
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1678   * \param analogFrequency ADC analog frequency in Hz.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1679   * \param sampleTime request sample time in sec for input class.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1680   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1681   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1682  IFX_INLINE void IfxVadc_setEmuxGroupSampletime(Ifx_VADC_G *vadcG, uint8 inputClassNum, float32 analogFrequency, float32 sampleTime);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1683  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1684  /** \brief Sets the Emux Interface for a particular group
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1685   * \param vadc Pointer to VADC Module Space
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1686   * \param emuxInterface specifies the EmuxInterface
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1687   * \param group specifies the group ID
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1688   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1689   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1690  IFX_INLINE void IfxVadc_setEmuxInterfaceForGroup(Ifx_VADC *vadc, IfxVadc_EmuxInterface emuxInterface, IfxVadc_GroupId group);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1691  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1692  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1693  /*-------------------------Global Function Prototypes-------------------------*/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1694  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1695  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1696  /**
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1697   * \param vadc pointer to Module space
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1698   * \param vadcG Pointer to VADC group register space
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1699   * \param mode External Multiplexer mode
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1700   * \param channels Specifies channel Id
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1701   * \param startChannel specifies the external channel value from which conversion to be carried out
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1702   * \param code Output the channel number in binary code/gray code
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1703   * \param sampleTimeControl specifies when to use a sample time for external channel
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1704   * \param channelSelectionStyle External Multiplexer Channel Selection Style
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1705   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1706   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1707  IFX_EXTERN void IfxVadc_configExternalMultiplexerMode(Ifx_VADC *vadc, Ifx_VADC_G *vadcG, IfxVadc_ExternalMultiplexerMode mode, uint8 channels, IfxVadc_EmuxSelectValue startChannel, IfxVadc_EmuxCodingScheme code, IfxVadc_EmuxSampleTimeControl sampleTimeControl, IfxVadc_ChannelSelectionStyle channelSelectionStyle);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1708  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1709  /** \} */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1710  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1711  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1712  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1713  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1714  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1715  /** \brief get channel service request node pointer
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1716   * \param vadcG Pointer to VADC Group register space
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1717   * \return channel service request node pointer
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1718   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1719  IFX_INLINE Ifx_VADC_G_CEVNP1 IfxVadc_getChannelServiceRequestNodePointer1(Ifx_VADC_G *vadcG);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1720  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1721  /** \brief set channel event node pointer
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1722   * \param vadcG Pointer to the Vadc group register space
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1723   * \param channelSrcNr Service request
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1724   * \param channel specifies channel
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1725   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1726   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1727  IFX_INLINE void IfxVadc_setChannelEventNodePointer1(Ifx_VADC_G *vadcG, IfxVadc_SrcNr channelSrcNr, IfxVadc_ChannelId channel);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1728  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1729  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1730  /*---------------------Inline Function Implementations------------------------*/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1731  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1732  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1733  IFX_INLINE void IfxVadc_addToQueue(Ifx_VADC_G *group, IfxVadc_ChannelId channel, uint32 options)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1734  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1735      group->QINR0.U = channel | options;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1736  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1737  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1738  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1739  IFX_INLINE uint32 IfxVadc_calculateSampleTime(float32 analogFrequency, float32 sampleTime)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1740  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1741      uint32 ticks;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1742  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1743      ticks = (uint32)(sampleTime * analogFrequency) - 2;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1744  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1745      if (ticks > 31)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1746      {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1747          ticks = (ticks / 16) + 15;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1748      }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1749  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1750      ticks = __minu(ticks, 0xFFu);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1751  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1752      return ticks;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1753  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1754  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1755  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1756  IFX_INLINE void IfxVadc_clearAllResultRequests(Ifx_VADC_G *vadcG)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1757  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1758      vadcG->REFCLR.U = 0x0000FFFFu;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1759  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1760  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1761  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1762  IFX_INLINE void IfxVadc_clearChannelRequest(Ifx_VADC_G *vadcG, IfxVadc_ChannelId channelId)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1763  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1764      vadcG->CEFCLR.U = 1 << channelId;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1765  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1766  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1767  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1768  IFX_INLINE void IfxVadc_clearQueue(Ifx_VADC_G *vadcG, boolean flushQueue)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1769  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1770      vadcG->QMR0.B.FLUSH = flushQueue;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1771  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1772  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1773  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1774  IFX_INLINE void IfxVadc_configureWaitForReadMode(Ifx_VADC_G *group, uint32 resultIdx, boolean waitForRead)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1775  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1776      group->RCR[resultIdx].B.WFR = waitForRead;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1777  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1778  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1779  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1780  IFX_INLINE void IfxVadc_configureWaitForReadModeForGlobalResultRegister(Ifx_VADC *vadc, boolean waitForRead)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1781  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1782      vadc->GLOBRCR.B.WFR = waitForRead;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1783  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1784  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1785  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1786  IFX_INLINE void IfxVadc_disableModule(Ifx_VADC *vadc)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1787  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1788      uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1789      IfxScuWdt_clearCpuEndinit(passwd);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1790      vadc->CLC.B.DISR = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1791      IfxScuWdt_setCpuEndinit(passwd);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1792  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1793  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1794  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1795  IFX_INLINE void IfxVadc_disableQueueSlotExternalTrigger(Ifx_VADC_G *vadcG)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1796  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1797      vadcG->QMR0.B.ENTR = 0; /* disable external trigger */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1798  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1799  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1800  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1801  IFX_INLINE void IfxVadc_disableScanSlotExternalTrigger(Ifx_VADC_G *vadcG)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1802  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1803      vadcG->ASMR.B.ENTR = 0; /* disable external trigger */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1804  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1805  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1806  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1807  IFX_INLINE void IfxVadc_enableBackgroundScanSlotExternalTrigger(Ifx_VADC *vadc)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1808  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1809      vadc->BRSMR.B.ENTR = 1; /* enable external trigger */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1810  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1811  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1812  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1813  IFX_INLINE void IfxVadc_enableFifoMode(Ifx_VADC_G *vadcG, IfxVadc_ChannelResult resultRegister, IfxVadc_FifoMode fifoMode)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1814  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1815      vadcG->RCR[resultRegister].B.FEN = fifoMode;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1816  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1817  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1818  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1819  IFX_INLINE void IfxVadc_enableModule(Ifx_VADC *vadc)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1820  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1821      uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1822  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1823      IfxScuWdt_clearCpuEndinit(passwd);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1824      vadc->CLC.U = 0x00000000;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1825      IfxScuWdt_setCpuEndinit(passwd);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1826  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1827  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1828  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1829  IFX_INLINE void IfxVadc_enableQueueSlotExternalTrigger(Ifx_VADC_G *vadcG)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1830  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1831      vadcG->QMR0.B.ENTR = 1;     /* enable external trigger */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1832  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1833  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1834  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1835  IFX_INLINE void IfxVadc_enableScanSlotExternalTrigger(Ifx_VADC_G *vadcG)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1836  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1837      vadcG->ASMR.B.ENTR = 1; /* enable external trigger */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1838  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1839  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1840  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1841  IFX_INLINE void IfxVadc_enableServiceRequest(Ifx_VADC_G *vadcG, IfxVadc_ChannelResult resultRegister)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1842  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1843      vadcG->RCR[resultRegister].B.SRGEN = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1844  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1845  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1846  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1847  IFX_INLINE uint8 IfxVadc_getAdcCalibrationActiveState(Ifx_VADC *vadc, uint8 adcCalGroupNum)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1848  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1849      uint8 status;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1850      status = vadc->G[adcCalGroupNum].ARBCFG.B.CAL;
	ld.bu	d15,[a2]
.L761:
	lea	a2,[a2]1024
.L762:

; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	     1  /**
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	     2   * \file IfxVadc.h
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	     3   * \brief VADC  basic functionality
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	     4   * \ingroup IfxLld_Vadc
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	     5   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	     6   * \version iLLD_1_0_1_11_0
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	     7   * \copyright Copyright (c) 2017 Infineon Technologies AG. All rights reserved.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	     8   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	     9   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    10   *                                 IMPORTANT NOTICE
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    11   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    12   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    13   * Use of this file is subject to the terms of use agreed between (i) you or 
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    14   * the company in which ordinary course of business you are acting and (ii) 
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    15   * Infineon Technologies AG or its licensees. If and as long as no such 
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    16   * terms of use are agreed, use of this file is subject to following:
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    17  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    18  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    19   * Boost Software License - Version 1.0 - August 17th, 2003
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    20  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    21   * Permission is hereby granted, free of charge, to any person or 
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    22   * organization obtaining a copy of the software and accompanying 
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    23   * documentation covered by this license (the "Software") to use, reproduce,
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    24   * display, distribute, execute, and transmit the Software, and to prepare
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    25   * derivative works of the Software, and to permit third-parties to whom the 
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    26   * Software is furnished to do so, all subject to the following:
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    27  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    28   * The copyright notices in the Software and this entire statement, including
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    29   * the above license grant, this restriction and the following disclaimer, must
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    30   * be included in all copies of the Software, in whole or in part, and all
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    31   * derivative works of the Software, unless such copies or derivative works are
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    32   * solely in the form of machine-executable object code generated by a source
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    33   * language processor.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    34  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    35   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR 
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    36   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    37   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    38   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE 
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    39   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    40   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    41   * DEALINGS IN THE SOFTWARE.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    42  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    43   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    44   * \defgroup IfxLld_Vadc_Std_Enum Enumerations
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    45   * \ingroup IfxLld_Vadc_Std
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    46   * \defgroup IfxLld_Vadc_Std_Background_Autoscan Background Autoscan Functions
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    47   * \ingroup IfxLld_Vadc_Std
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    48   * \defgroup IfxLld_Vadc_Std_ChannelScan Channel Scan Functions
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    49   * \ingroup IfxLld_Vadc_Std
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    50   * \defgroup IfxLld_Vadc_Std_QueueRequest Queue Request Functions
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    51   * \ingroup IfxLld_Vadc_Std
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    52   * \defgroup IfxLld_Vadc_Std_IO IO Pin Configuration Functions
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    53   * \ingroup IfxLld_Vadc_Std
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    54   * \defgroup IfxLld_Vadc_Std_Frequency Frequency Calculation
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    55   * \ingroup IfxLld_Vadc_Std
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    56   * \defgroup IfxLld_Vadc_Std_Group Group Functions
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    57   * \ingroup IfxLld_Vadc_Std
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    58   * \defgroup IfxLld_Vadc_Std_Module Module Functions
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    59   * \ingroup IfxLld_Vadc_Std
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    60   * \defgroup IfxLld_Vadc_Std_Channel Channel Functions
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    61   * \ingroup IfxLld_Vadc_Std
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    62   * \defgroup IfxLld_Vadc_Std_Emux Emux Functions
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    63   * \ingroup IfxLld_Vadc_Std
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    64   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    65  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    66  #ifndef IFXVADC_H
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    67  #define IFXVADC_H 1
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    68  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    69  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    70  /*----------------------------------Includes----------------------------------*/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    71  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    72  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    73  #include "_Impl/IfxVadc_cfg.h"
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    74  #include "_PinMap/IfxVadc_PinMap.h"
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    75  #include "IfxVadc_bf.h"
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    76  #include "Cpu/Std/IfxCpu_Intrinsics.h"
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    77  #include "Scu/Std/IfxScuCcu.h"
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    78  #include "Scu/Std/IfxScuWdt.h"
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    79  #include "IfxCcu6_reg.h"
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    80  #include "IfxCcu6_bf.h"
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    81  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    82  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    83  /*--------------------------------Enumerations--------------------------------*/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    84  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    85  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    86  /** \addtogroup IfxLld_Vadc_Std_Enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    87   * \{ */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    88  /** \brief Defined in MODULE_VADC.G[x].ARBCFG.B.ANONS and ANONC
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    89   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    90  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    91  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    92      IfxVadc_AnalogConverterMode_off             = 0, /**< \brief Analog Converter off */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    93      IfxVadc_AnalogConverterMode_slowStandby     = 1, /**< \brief Slow Standby Mode */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    94      IfxVadc_AnalogConverterMode_fastStandby     = 2, /**< \brief Fast Standby Mode */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    95      IfxVadc_AnalogConverterMode_normalOperation = 3  /**< \brief Normal operation mode */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    96  } IfxVadc_AnalogConverterMode;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    97  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    98  /** \brief Arbitration round length defined in MODULE_VADC.G[x].ARBCFG.ARBRND(x=0,1,..,11)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	    99   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   100  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   101  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   102      IfxVadc_ArbitrationRounds_4_slots  = 0,  /**< \brief An arbitration round contains 4 arbitration slots. */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   103      IfxVadc_ArbitrationRounds_8_slots  = 1,  /**< \brief An arbitration round contains 8 arbitration slots. */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   104      IfxVadc_ArbitrationRounds_16_slots = 2,  /**< \brief An arbitration round contains 16 arbitration slots. */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   105      IfxVadc_ArbitrationRounds_20_slots = 3   /**< \brief An arbitration round contains 20 arbitration slots. */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   106  } IfxVadc_ArbitrationRounds;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   107  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   108  /** \brief Boundary Extension defined in MODULE_VADC.G[x].CHCTR[y].B.BNDSELX(x=0,1,...,11;y=0,1....,16)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   109   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   110  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   111  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   112      IfxVadc_BoundaryExtension_standard            = 0,   /**< \brief Boundary Standard mode. BNDSELU/BNDSELL as Boundaries */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   113      IfxVadc_BoundaryExtension_fastCompareResult1  = 1,   /**< \brief Fast compare mode use as upper boundary  Channel result   1 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   114      IfxVadc_BoundaryExtension_fastCompareResult2  = 2,   /**< \brief Fast compare mode use as upper boundary  Channel result   2 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   115      IfxVadc_BoundaryExtension_fastCompareResult3  = 3,   /**< \brief Fast compare mode use as upper boundary  Channel result   3 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   116      IfxVadc_BoundaryExtension_fastCompareResult4  = 4,   /**< \brief Fast compare mode use as upper boundary  Channel result   4 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   117      IfxVadc_BoundaryExtension_fastCompareResult5  = 5,   /**< \brief Fast compare mode use as upper boundary  Channel result   5 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   118      IfxVadc_BoundaryExtension_fastCompareResult6  = 6,   /**< \brief Fast compare mode use as upper boundary  Channel result   6 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   119      IfxVadc_BoundaryExtension_fastCompareResult7  = 7,   /**< \brief Fast compare mode use as upper boundary  Channel result   7 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   120      IfxVadc_BoundaryExtension_fastCompareResult8  = 8,   /**< \brief Fast compare mode use as upper boundary  Channel result   8 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   121      IfxVadc_BoundaryExtension_fastCompareResult9  = 9,   /**< \brief Fast compare mode use as upper boundary  Channel result   9 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   122      IfxVadc_BoundaryExtension_fastCompareResult10 = 10,  /**< \brief Fast compare mode use as upper boundary  Channel result  10 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   123      IfxVadc_BoundaryExtension_fastCompareResult11 = 11,  /**< \brief Fast compare mode use as upper boundary  Channel result  11 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   124      IfxVadc_BoundaryExtension_fastCompareResult12 = 12,  /**< \brief Fast compare mode use as upper boundary  Channel result  12 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   125      IfxVadc_BoundaryExtension_fastCompareResult13 = 13,  /**< \brief Fast compare mode use as upper boundary  Channel result  13 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   126      IfxVadc_BoundaryExtension_fastCompareResult14 = 14,  /**< \brief Fast compare mode use as upper boundary  Channel result  14 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   127      IfxVadc_BoundaryExtension_fastCompareResult15 = 15   /**< \brief Fast compare mode use as upper boundary  Channel result  15 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   128  } IfxVadc_BoundaryExtension;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   129  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   130  /** \brief BoundarySel defined in MODULE_VADC.G[x].CHCTR[y].B.BNDSELL(x=0,1,...,11;y=0,1....,16)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   131   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   132  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   133  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   134      IfxVadc_BoundarySelection_group0  = 0,  /**< \brief Use group class 0 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   135      IfxVadc_BoundarySelection_group1  = 1,  /**< \brief Use group class 1 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   136      IfxVadc_BoundarySelection_global0 = 2,  /**< \brief Use global class 0 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   137      IfxVadc_BoundarySelection_global1 = 3   /**< \brief Use global class 1 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   138  } IfxVadc_BoundarySelection;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   139  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   140  /** \brief VADC Channels
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   141   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   142  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   143  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   144      IfxVadc_ChannelId_none = -1,  /**< \brief None of VADC channels */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   145      IfxVadc_ChannelId_0    = 0,   /**< \brief Channel 0 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   146      IfxVadc_ChannelId_1    = 1,   /**< \brief Channel 1 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   147      IfxVadc_ChannelId_2    = 2,   /**< \brief Channel 2 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   148      IfxVadc_ChannelId_3    = 3,   /**< \brief Channel 3 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   149      IfxVadc_ChannelId_4    = 4,   /**< \brief Channel 4 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   150      IfxVadc_ChannelId_5    = 5,   /**< \brief Channel 5 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   151      IfxVadc_ChannelId_6    = 6,   /**< \brief Channel 6 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   152      IfxVadc_ChannelId_7    = 7,   /**< \brief Channel 7 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   153      IfxVadc_ChannelId_8    = 8,   /**< \brief Channel 8 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   154      IfxVadc_ChannelId_9    = 9,   /**< \brief Channel 9 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   155      IfxVadc_ChannelId_10   = 10,  /**< \brief Channel 10 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   156      IfxVadc_ChannelId_11   = 11,  /**< \brief Channel 11 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   157      IfxVadc_ChannelId_12   = 12,  /**< \brief Channel 12 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   158      IfxVadc_ChannelId_13   = 13,  /**< \brief Channel 13 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   159      IfxVadc_ChannelId_14   = 14,  /**< \brief Channel 14 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   160      IfxVadc_ChannelId_15   = 15   /**< \brief Channel 15 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   161  } IfxVadc_ChannelId;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   162  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   163  /** \brief ADC channel reference defined in MODULE_VADC.G[x].CHCTR[y].B.REFSEL(x=0,1,...,11;y=0,1....,16)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   164   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   165  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   166  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   167      IfxVadc_ChannelReference_standard = 0,  /**< \brief use Varef as reference */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   168      IfxVadc_ChannelReference_channel0 = 1   /**< \brief use CH0 as reference */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   169  } IfxVadc_ChannelReference;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   170  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   171  /** \brief ADC channel resolution defined in MODULE_VADC.G[x].CHCTR[y].B.ICLASS[y].B.CMS(x=0,1,...,11;y=0,1)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   172   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   173  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   174  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   175      IfxVadc_ChannelResolution_12bit     = 0, /**< \brief 12-bit conversion */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   176      IfxVadc_ChannelResolution_10bit     = 1, /**< \brief 10-bit conversion */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   177      IfxVadc_ChannelResolution_8bit      = 2, /**< \brief 8-bit conversion */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   178      IfxVadc_ChannelResolution_10bitFast = 5  /**< \brief 10-bit cfast compare mode */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   179  } IfxVadc_ChannelResolution;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   180  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   181  /** \brief Channel Result defined in MODULE_VADC.G[x].CHCTR[y].B.RESREG(x=0,1,...,11;y=0,1....,16)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   182   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   183  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   184  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   185      IfxVadc_ChannelResult_0 = 0,      /**< \brief Use Channel result 0  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   186      IfxVadc_ChannelResult_1,          /**< \brief Use Channel result 1  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   187      IfxVadc_ChannelResult_2,          /**< \brief Use Channel result 2  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   188      IfxVadc_ChannelResult_3,          /**< \brief Use Channel result 3  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   189      IfxVadc_ChannelResult_4,          /**< \brief Use Channel result 4  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   190      IfxVadc_ChannelResult_5,          /**< \brief Use Channel result 5  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   191      IfxVadc_ChannelResult_6,          /**< \brief Use Channel result 6  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   192      IfxVadc_ChannelResult_7,          /**< \brief Use Channel result 7  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   193      IfxVadc_ChannelResult_8,          /**< \brief Use Channel result 8  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   194      IfxVadc_ChannelResult_9,          /**< \brief Use Channel result 9  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   195      IfxVadc_ChannelResult_10,         /**< \brief Use Channel result 10  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   196      IfxVadc_ChannelResult_11,         /**< \brief Use Channel result 11  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   197      IfxVadc_ChannelResult_12,         /**< \brief Use Channel result 12  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   198      IfxVadc_ChannelResult_13,         /**< \brief Use Channel result 13  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   199      IfxVadc_ChannelResult_14,         /**< \brief Use Channel result 14  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   200      IfxVadc_ChannelResult_15          /**< \brief Use Channel result 15  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   201  } IfxVadc_ChannelResult;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   202  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   203  /** \brief External Multiplexer Channel Selection Style as defined in
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   204   * Ifx_VADC.G[x].EMUXCTR.B.EMXCSS
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   205   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   206  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   207  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   208      IfxVadc_ChannelSelectionStyle_channelNumber = 0,  /**< \brief selects an arbitrary channel */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   209      IfxVadc_ChannelSelectionStyle_binary        = 1   /**< \brief Each bit of bitfield EMUXCH selects the
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   210                                                         * associated channel for EMUX control */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   211  } IfxVadc_ChannelSelectionStyle;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   212  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   213  /** \brief type of conversion
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   214   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   215  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   216  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   217      IfxVadc_ConversionType_Compatible = 0  /**< \brief Compatible Timing Mode */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   218  } IfxVadc_ConversionType;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   219  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   220  /** \brief Specifies the External Coding scheme(binary/gray)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   221   * defined in Ifx_VADC.G[x].EMUXCTR.B.EMXCOD
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   222   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   223  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   224  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   225      IfxVadc_EmuxCodingScheme_binary = 0,  /**< \brief Output the Channel Number in Binary code */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   226      IfxVadc_EmuxCodingScheme_gray   = 1   /**< \brief Output the channel number in gray code */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   227  } IfxVadc_EmuxCodingScheme;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   228  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   229  /** \brief Specifies the Emux interface
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   230   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   231  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   232  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   233      IfxVadc_EmuxInterface_0 = 0,  /**< \brief Emux Interface 0 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   234      IfxVadc_EmuxInterface_1 = 1   /**< \brief Emux Interface 1 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   235  } IfxVadc_EmuxInterface;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   236  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   237  /** \brief External Multiplexer sample time control
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   238   * defined in Ifx_VADC.G[x].EMUXCTR.B.EMXST
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   239   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   240  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   241  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   242      IfxVadc_EmuxSampleTimeControl_settingChanges = 0,  /**< \brief Use STCE Whenever Setting Changes */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   243      IfxVadc_EmuxSampleTimeControl_always         = 1   /**< \brief Use STCE for each conversion of an external channel */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   244  } IfxVadc_EmuxSampleTimeControl;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   245  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   246  /** \brief specifies the External Channel Start select value
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   247   * defined in Ifx_VADC.G[x].EMUXCTR.B.EMUXSET
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   248   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   249  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   250  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   251      IfxVadc_EmuxSelectValue_0 = 0,      /**< \brief Start Selection Value 0  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   252      IfxVadc_EmuxSelectValue_1,          /**< \brief Start Selection Value 1  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   253      IfxVadc_EmuxSelectValue_2,          /**< \brief Start Selection Value 2  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   254      IfxVadc_EmuxSelectValue_3,          /**< \brief Start Selection Value 3  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   255      IfxVadc_EmuxSelectValue_4,          /**< \brief Start Selection Value 4  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   256      IfxVadc_EmuxSelectValue_5,          /**< \brief Start Selection Value 5  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   257      IfxVadc_EmuxSelectValue_6,          /**< \brief Start Selection Value 6  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   258      IfxVadc_EmuxSelectValue_7           /**< \brief Start Selection Value 7  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   259  } IfxVadc_EmuxSelectValue;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   260  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   261  /** \brief Specifies External Multiplexer Mode
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   262   * define in Ifx_VADC.G[x].EMUXCTR.B.EMUXMODE
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   263   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   264  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   265  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   266      IfxVadc_ExternalMultiplexerMode_softwareControl = 0,  /**< \brief Disable The Emux Control */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   267      IfxVadc_ExternalMultiplexerMode_steady          = 1,  /**< \brief select steady mode */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   268      IfxVadc_ExternalMultiplexerMode_singleStep      = 2,  /**< \brief Select single step mode */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   269      IfxVadc_ExternalMultiplexerMode_sequence        = 3   /**< \brief Select Sequence Mode */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   270  } IfxVadc_ExternalMultiplexerMode;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   271  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   272  /** \brief FIFO mode enable
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   273   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   274  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   275  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   276      IfxVadc_FifoMode_seperateResultRegister = 0,  /**< \brief seperate Result Register */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   277      IfxVadc_FifoMode_fifoStructure          = 1,  /**< \brief fifoStructure */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   278      IfxVadc_FifoMode_maximumMode            = 2,  /**< \brief copy new result if bigger */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   279      IfxVadc_FifoMode_minimumMode            = 3   /**< \brief copy new result if it is smaller */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   280  } IfxVadc_FifoMode;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   281  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   282  /** \brief gating mode defined in MODULE_VADC.BRSMR.ENGT
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   283   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   284  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   285  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   286      IfxVadc_GatingMode_disabled   = 0,  /**< \brief Gating is disabled, no conversion request are issued */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   287      IfxVadc_GatingMode_always     = 1,  /**< \brief Conversion request is issued if at least 1 conversion pending bit is set */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   288      IfxVadc_GatingMode_gatingHigh = 2,  /**< \brief Conversion request is issued if at least 1 conversion pending bit is set and the gating signal is high */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   289      IfxVadc_GatingMode_gatingLow  = 3   /**< \brief Conversion request is issued if at least 1 conversion pending bit is set and the gating signal is low */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   290  } IfxVadc_GatingMode;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   291  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   292  /** \brief External trigger gating defined in MODULE_VADC.G[x].QCTRLy.GTSEL(x=0,1,..,11;y=0,1,..,7)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   293   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   294  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   295  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   296      IfxVadc_GatingSource_0 = 0,      /**< \brief Input signal REQGTx_0  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   297      IfxVadc_GatingSource_1,          /**< \brief Input signal REQGTx_1  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   298      IfxVadc_GatingSource_2,          /**< \brief Input signal REQGTx_2  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   299      IfxVadc_GatingSource_3,          /**< \brief Input signal REQGTx_3  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   300      IfxVadc_GatingSource_4,          /**< \brief Input signal REQGTx_4  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   301      IfxVadc_GatingSource_5,          /**< \brief Input signal REQGTx_5  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   302      IfxVadc_GatingSource_6,          /**< \brief Input signal REQGTx_6  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   303      IfxVadc_GatingSource_7,          /**< \brief Input signal REQGTx_7  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   304      IfxVadc_GatingSource_8,          /**< \brief Input signal REQGTx_8  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   305      IfxVadc_GatingSource_9,          /**< \brief Input signal REQGTx_9  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   306      IfxVadc_GatingSource_10,         /**< \brief Input signal REQGTx_10  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   307      IfxVadc_GatingSource_11,         /**< \brief Input signal REQGTx_11  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   308      IfxVadc_GatingSource_12,         /**< \brief Input signal REQGTx_12  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   309      IfxVadc_GatingSource_13,         /**< \brief Input signal REQGTx_13  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   310      IfxVadc_GatingSource_14,         /**< \brief Input signal REQGTx_14  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   311      IfxVadc_GatingSource_15          /**< \brief Input signal REQGTx_15  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   312  } IfxVadc_GatingSource;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   313  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   314  /** \brief inputClass defined in MODULE_VADC.G[x].CHCTR[y].B.ICLSEL(x=0,1,...,11;y=0,1....,16)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   315   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   316  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   317  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   318      IfxVadc_InputClasses_group0  = 0,  /**< \brief Use group class 0 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   319      IfxVadc_InputClasses_group1  = 1,  /**< \brief Use group class 1 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   320      IfxVadc_InputClasses_global0 = 2,  /**< \brief Use global class 0 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   321      IfxVadc_InputClasses_global1 = 3   /**< \brief Use global class 1 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   322  } IfxVadc_InputClasses;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   323  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   324  /** \brief ADC channel limit check defined in MODULE_VADC.G[x].CHCTR[y].B.CHEVMODE(x=0,1,...,11;y=0,1....,16)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   325   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   326  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   327  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   328      IfxVadc_LimitCheck_noCheck            = 0,  /**< \brief Normal compare mode Event Never Fast Compare mode Event Never */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   329      IfxVadc_LimitCheck_eventIfInArea      = 1,  /**< \brief Normal compare mode Event If result is inside the boundary band    Fast Compare mode Event If result switches to high (above comp. value) */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   330      IfxVadc_LimitCheck_eventIfOutsideArea = 2,  /**< \brief Normal compare mode Event If result is outside the boundary band   Fast Compare mode Event If result switches to low (below comp. value) */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   331      IfxVadc_LimitCheck_always             = 3   /**< \brief Normal compare mode Event Always   Fast Compare mode Event Always */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   332  } IfxVadc_LimitCheck;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   333  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   334  /** \brief Low Power Supply Voltage Select
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   335   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   336  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   337  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   338      IfxVadc_LowSupplyVoltageSelect_5V = 0,  /**< \brief 5V Power Supply is Connected */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   339      IfxVadc_LowSupplyVoltageSelect_3V = 1   /**< \brief 3.3V Power Supply is Connected */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   340  } IfxVadc_LowSupplyVoltageSelect;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   341  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   342  /** \brief Access protection for Group registers defined in MODULE_VADC.ACCPROT0.U
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   343   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   344  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   345  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   346      IfxVadc_Protection_channelControl0       = 0,   /**< \brief Access control for GxCHCTR0 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   347      IfxVadc_Protection_channelControl1       = 1,   /**< \brief Access control for GxCHCTR1 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   348      IfxVadc_Protection_channelControl2       = 2,   /**< \brief Access control for GxCHCTR2 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   349      IfxVadc_Protection_channelControl3       = 3,   /**< \brief Access control for GxCHCTR3 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   350      IfxVadc_Protection_channelControl4       = 4,   /**< \brief Access control for GxCHCTR4 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   351      IfxVadc_Protection_channelControl5       = 5,   /**< \brief Access control for GxCHCTR5 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   352      IfxVadc_Protection_channelControl6       = 6,   /**< \brief Access control for GxCHCTR6 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   353      IfxVadc_Protection_channelControl7       = 7,   /**< \brief Access control for GxCHCTR7 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   354      IfxVadc_Protection_channelControl8       = 8,   /**< \brief Access control for GxCHCTR8 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   355      IfxVadc_Protection_channelControl9       = 9,   /**< \brief Access control for GxCHCTR9 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   356      IfxVadc_Protection_channelControl10      = 10,  /**< \brief Access control for GxCHCTR10 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   357      IfxVadc_Protection_channelControl11      = 11,  /**< \brief Access control for GxCHCTR11 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   358      IfxVadc_Protection_channelControl12      = 12,  /**< \brief Access control for GxCHCTR12 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   359      IfxVadc_Protection_channelControl13      = 13,  /**< \brief Access control for GxCHCTR13 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   360      IfxVadc_Protection_channelControl14      = 14,  /**< \brief Access control for GxCHCTR14 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   361      IfxVadc_Protection_externalMultiplexer   = 15,  /**< \brief Access control for EMUXSEL, GxEMUXCTR */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   362      IfxVadc_Protection_initGroup0            = 16,  /**< \brief Access control for GxARBCFG, GxARBPR, GxCHASS, GxRRASS, GxICLASS0/1, GxSYNCTR */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   363      IfxVadc_Protection_initGroup1            = 17,  /**< \brief Access control for GxARBCFG, GxARBPR, GxCHASS, GxRRASS, GxICLASS0/1, GxSYNCTR */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   364      IfxVadc_Protection_initGroup2            = 18,  /**< \brief Access control for GxARBCFG, GxARBPR, GxCHASS, GxRRASS, GxICLASS0/1, GxSYNCTR */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   365      IfxVadc_Protection_initGroup3            = 19,  /**< \brief Access control for GxARBCFG, GxARBPR, GxCHASS, GxRRASS, GxICLASS0/1, GxSYNCTR */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   366      IfxVadc_Protection_initGroup4            = 20,  /**< \brief Access control for GxARBCFG, GxARBPR, GxCHASS, GxRRASS, GxICLASS0/1, GxSYNCTR */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   367      IfxVadc_Protection_initGroup5            = 21,  /**< \brief Access control for GxARBCFG, GxARBPR, GxCHASS, GxRRASS, GxICLASS0/1, GxSYNCTR */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   368      IfxVadc_Protection_initGroup6            = 22,  /**< \brief Access control for GxARBCFG, GxARBPR, GxCHASS, GxRRASS, GxICLASS0/1, GxSYNCTR */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   369      IfxVadc_Protection_initGroup7            = 23,  /**< \brief Access control for GxARBCFG, GxARBPR, GxCHASS, GxRRASS, GxICLASS0/1, GxSYNCTR */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   370      IfxVadc_Protection_initGroup8            = 24,  /**< \brief Access control for GxARBCFG, GxARBPR, GxCHASS, GxRRASS, GxICLASS0/1, GxSYNCTR */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   371      IfxVadc_Protection_initGroup9            = 25,  /**< \brief Access control for GxARBCFG, GxARBPR, GxCHASS, GxRRASS, GxICLASS0/1, GxSYNCTR */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   372      IfxVadc_Protection_initGroup10           = 26,  /**< \brief Access control for GxARBCFG, GxARBPR, GxCHASS, GxRRASS, GxICLASS0/1, GxSYNCTR */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   373      IfxVadc_Protection_initGroup11           = 27,  /**< \brief Access control for GxARBCFG, GxARBPR, GxCHASS, GxRRASS, GxICLASS0/1, GxSYNCTR */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   374      IfxVadc_Protection_initGroup12           = 28,  /**< \brief Access control for GxARBCFG, GxARBPR, GxCHASS, GxRRASS, GxICLASS0/1, GxSYNCTR */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   375      IfxVadc_Protection_initGroup13           = 29,  /**< \brief Access control for GxARBCFG, GxARBPR, GxCHASS, GxRRASS, GxICLASS0/1, GxSYNCTR */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   376      IfxVadc_Protection_initGroup14           = 30,  /**< \brief Access control for GxARBCFG, GxARBPR, GxCHASS, GxRRASS, GxICLASS0/1, GxSYNCTR */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   377      IfxVadc_Protection_globalConfig          = 31,  /**< \brief Access control for GLOBCFG */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   378      IfxVadc_Protection_serviceGroup0         = 32,  /**< \brief Access control for GxSEFLAG, GxSEVNP, GxCEFLAG, GxCEVNP0/1/2, GxREFLAG, GxREVNP0/1, GxSRACT */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   379      IfxVadc_Protection_serviceGroup1         = 33,  /**< \brief Access control for GxSEFLAG, GxSEVNP, GxCEFLAG, GxCEVNP0/1/2, GxREFLAG, GxREVNP0/1, GxSRACT */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   380      IfxVadc_Protection_serviceGroup2         = 34,  /**< \brief Access control for GxSEFLAG, GxSEVNP, GxCEFLAG, GxCEVNP0/1/2, GxREFLAG, GxREVNP0/1, GxSRACT */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   381      IfxVadc_Protection_serviceGroup3         = 35,  /**< \brief Access control for GxSEFLAG, GxSEVNP, GxCEFLAG, GxCEVNP0/1/2, GxREFLAG, GxREVNP0/1, GxSRACT */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   382      IfxVadc_Protection_serviceGroup4         = 36,  /**< \brief Access control for GxSEFLAG, GxSEVNP, GxCEFLAG, GxCEVNP0/1/2, GxREFLAG, GxREVNP0/1, GxSRACT */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   383      IfxVadc_Protection_serviceGroup5         = 37,  /**< \brief Access control for GxSEFLAG, GxSEVNP, GxCEFLAG, GxCEVNP0/1/2, GxREFLAG, GxREVNP0/1, GxSRACT */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   384      IfxVadc_Protection_serviceGroup6         = 38,  /**< \brief Access control for GxSEFLAG, GxSEVNP, GxCEFLAG, GxCEVNP0/1/2, GxREFLAG, GxREVNP0/1, GxSRACT */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   385      IfxVadc_Protection_serviceGroup7         = 39,  /**< \brief Access control for GxSEFLAG, GxSEVNP, GxCEFLAG, GxCEVNP0/1/2, GxREFLAG, GxREVNP0/1, GxSRACT */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   386      IfxVadc_Protection_serviceGroup8         = 40,  /**< \brief Access control for GxSEFLAG, GxSEVNP, GxCEFLAG, GxCEVNP0/1/2, GxREFLAG, GxREVNP0/1, GxSRACT */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   387      IfxVadc_Protection_serviceGroup9         = 41,  /**< \brief Access control for GxSEFLAG, GxSEVNP, GxCEFLAG, GxCEVNP0/1/2, GxREFLAG, GxREVNP0/1, GxSRACT */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   388      IfxVadc_Protection_serviceGroup10        = 42,  /**< \brief Access control for GxSEFLAG, GxSEVNP, GxCEFLAG, GxCEVNP0/1/2, GxREFLAG, GxREVNP0/1, GxSRACT */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   389      IfxVadc_Protection_serviceGroup11        = 43,  /**< \brief Access control for GxSEFLAG, GxSEVNP, GxCEFLAG, GxCEVNP0/1/2, GxREFLAG, GxREVNP0/1, GxSRACT */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   390      IfxVadc_Protection_serviceGroup12        = 44,  /**< \brief Access control for GxSEFLAG, GxSEVNP, GxCEFLAG, GxCEVNP0/1/2, GxREFLAG, GxREVNP0/1, GxSRACT */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   391      IfxVadc_Protection_serviceGroup13        = 45,  /**< \brief Access control for GxSEFLAG, GxSEVNP, GxCEFLAG, GxCEVNP0/1/2, GxREFLAG, GxREVNP0/1, GxSRACT */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   392      IfxVadc_Protection_serviceGroup14        = 46,  /**< \brief Access control for GxSEFLAG, GxSEVNP, GxCEFLAG, GxCEVNP0/1/2, GxREFLAG, GxREVNP0/1, GxSRACT */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   393      IfxVadc_Protection_testFunction          = 47,  /**< \brief Access control for GLOBTF */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   394      IfxVadc_Protection_resultRegisterGroup0  = 48,  /**< \brief Access control for GxRCRx(x=0,1,..,15), GxBOUND, GxRESx(x=0 .. 15) */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   395      IfxVadc_Protection_resultRegisterGroup1  = 49,  /**< \brief Access control for GxRCRx(x=0,1,..,15), GxBOUND, GxRESx(x=0 .. 15) */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   396      IfxVadc_Protection_resultRegisterGroup2  = 50,  /**< \brief Access control for GxRCRx(x=0,1,..,15), GxBOUND, GxRESx(x=0 .. 15) */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   397      IfxVadc_Protection_resultRegisterGroup3  = 51,  /**< \brief Access control for GxRCRx(x=0,1,..,15), GxBOUND, GxRESx(x=0 .. 15) */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   398      IfxVadc_Protection_resultRegisterGroup4  = 52,  /**< \brief Access control for GxRCRx(x=0,1,..,15), GxBOUND, GxRESx(x=0 .. 15) */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   399      IfxVadc_Protection_resultRegisterGroup5  = 53,  /**< \brief Access control for GxRCRx(x=0,1,..,15), GxBOUND, GxRESx(x=0 .. 15) */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   400      IfxVadc_Protection_resultRegisterGroup6  = 54,  /**< \brief Access control for GxRCRx(x=0,1,..,15), GxBOUND, GxRESx(x=0 .. 15) */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   401      IfxVadc_Protection_resultRegisterGroup7  = 55,  /**< \brief Access control for GxRCRx(x=0,1,..,15), GxBOUND, GxRESx(x=0 .. 15) */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   402      IfxVadc_Protection_resultRegisterGroup8  = 56,  /**< \brief Access control for GxRCRx(x=0,1,..,15), GxBOUND, GxRESx(x=0 .. 15) */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   403      IfxVadc_Protection_resultRegisterGroup9  = 57,  /**< \brief Access control for GxRCRx(x=0,1,..,15), GxBOUND, GxRESx(x=0 .. 15) */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   404      IfxVadc_Protection_resultRegisterGroup10 = 58,  /**< \brief Access control for GxRCRx(x=0,1,..,15), GxBOUND, GxRESx(x=0 .. 15) */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   405      IfxVadc_Protection_resultRegisterGroup11 = 59,  /**< \brief Access control for GxRCRx(x=0,1,..,15), GxBOUND, GxRESx(x=0 .. 15) */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   406      IfxVadc_Protection_resultRegisterGroup12 = 60,  /**< \brief Access control for GxRCRx(x=0,1,..,15), GxBOUND, GxRESx(x=0 .. 15) */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   407      IfxVadc_Protection_resultRegisterGroup13 = 61,  /**< \brief Access control for GxRCRx(x=0,1,..,15), GxBOUND, GxRESx(x=0 .. 15) */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   408      IfxVadc_Protection_resultRegisterGroup14 = 62   /**< \brief Access control for GxRCRx(x=0,1,..,15), GxBOUND, GxRESx(x=0 .. 15) */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   409  } IfxVadc_Protection;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   410  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   411  /** \brief Arbitration priority, Group x,defined in MODULE_VADC.G[x].ARBPR.PRIOy(x=0,1,...,11;y=0,1,2)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   412   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   413  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   414  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   415      IfxVadc_RequestSlotPriority_lowest  = 0, /**< \brief Lowest priority */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   416      IfxVadc_RequestSlotPriority_low     = 1, /**< \brief Lowpriority */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   417      IfxVadc_RequestSlotPriority_high    = 2, /**< \brief High priority */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   418      IfxVadc_RequestSlotPriority_highest = 3  /**< \brief Highest priority */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   419  } IfxVadc_RequestSlotPriority;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   420  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   421  /** \brief Request source start mode defined in MODULE_VADC.G[x].ARBPR.CSMy(x=0,1,...,11;y=0,1,2)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   422   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   423  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   424  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   425      IfxVadc_RequestSlotStartMode_waitForStart       = 0, /**< \brief Wait for start */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   426      IfxVadc_RequestSlotStartMode_cancelInjectRepeat = 1  /**< \brief Cancel-Inject-Repeat */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   427  } IfxVadc_RequestSlotStartMode;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   428  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   429  /** \brief Request sources
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   430   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   431  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   432  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   433      IfxVadc_RequestSource_queue      = 0, /**< \brief 8 stage Queue request */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   434      IfxVadc_RequestSource_scan       = 1, /**< \brief scan request */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   435      IfxVadc_RequestSource_background = 2  /**< \brief background scan request */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   436  } IfxVadc_RequestSource;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   437  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   438  /** \brief Enable/disable the sensitivity of the module to sleep signal\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   439   * Definition in Ifx_VADC.CLC.B.EDIS
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   440   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   441  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   442  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   443      IfxVadc_SleepMode_enable  = 0, /**< \brief enables sleep mode */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   444      IfxVadc_SleepMode_disable = 1  /**< \brief disables sleep mode */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   445  } IfxVadc_SleepMode;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   446  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   447  /** \brief Service Node defined in MODULE_VADC.G[x].SRACT.U(x= 0,1,..,11)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   448   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   449  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   450  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   451      IfxVadc_SrcNr_group0  = 0,  /**< \brief service request line 0 of group */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   452      IfxVadc_SrcNr_group1  = 1,  /**< \brief service request line 1 of group */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   453      IfxVadc_SrcNr_group2  = 2,  /**< \brief service request line 2 of group */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   454      IfxVadc_SrcNr_group3  = 3,  /**< \brief service request line 3 of group */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   455      IfxVadc_SrcNr_shared0 = 4,  /**< \brief Select shared service request line 0 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   456      IfxVadc_SrcNr_shared1 = 5,  /**< \brief Select shared service request line 1 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   457      IfxVadc_SrcNr_shared2 = 6,  /**< \brief Select shared service request line 2 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   458      IfxVadc_SrcNr_shared3 = 7   /**< \brief Select shared service request line 3 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   459  } IfxVadc_SrcNr;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   460  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   461  /** \brief API return values defined in
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   462   * MODULE_VADC.G[x].QSR0.U,MODULE_VADC.G[x].ASPND.U
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   463   * MODULE_VADC.BRSPND[x](x=0,1,...,11)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   464   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   465  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   466  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   467      IfxVadc_Status_noError              = 0, /**< \brief No error during api execution */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   468      IfxVadc_Status_notInitialised       = 1, /**< \brief Appropriate initialisation not done */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   469      IfxVadc_Status_invalidGroup         = 2, /**< \brief Invalid group number */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   470      IfxVadc_Status_invalidChannel       = 3, /**< \brief Invalid channel number */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   471      IfxVadc_Status_queueFull            = 4, /**< \brief Queue is full */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   472      IfxVadc_Status_noAccess             = 5, /**< \brief Access to the group/channel is disabled */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   473      IfxVadc_Status_channelsStillPending = 6  /**< \brief Conversion for some of the channels are still pending */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   474  } IfxVadc_Status;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   475  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   476  /** \brief trigger definition defined in MODULE_VADC.G[x].QCTRL0.XTMODE(x=0,1,..,11)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   477   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   478  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   479  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   480      IfxVadc_TriggerMode_noExternalTrigger = 0,  /**< \brief No external trigger */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   481      IfxVadc_TriggerMode_uponFallingEdge   = 1,  /**< \brief Trigger event upon a falling edge */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   482      IfxVadc_TriggerMode_uponRisingEdge    = 2,  /**< \brief Trigger event upon a rising edge */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   483      IfxVadc_TriggerMode_uponAnyEdge       = 3   /**< \brief Trigger event upon any edge */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   484  } IfxVadc_TriggerMode;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   485  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   486  /** \brief Trigger request source defined in MODULE_VADC.G[x].QCTRLy.XTSEL(x=0,1,..,11;y=0,1,..,7)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   487   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   488  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   489  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   490      IfxVadc_TriggerSource_0 = 0,      /**< \brief Input signal REQTRx_0  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   491      IfxVadc_TriggerSource_1,          /**< \brief Input signal REQTRx_1  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   492      IfxVadc_TriggerSource_2,          /**< \brief Input signal REQTRx_2  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   493      IfxVadc_TriggerSource_3,          /**< \brief Input signal REQTRx_3  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   494      IfxVadc_TriggerSource_4,          /**< \brief Input signal REQTRx_4  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   495      IfxVadc_TriggerSource_5,          /**< \brief Input signal REQTRx_5  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   496      IfxVadc_TriggerSource_6,          /**< \brief Input signal REQTRx_6  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   497      IfxVadc_TriggerSource_7,          /**< \brief Input signal REQTRx_7  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   498      IfxVadc_TriggerSource_8,          /**< \brief Input signal REQTRx_8  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   499      IfxVadc_TriggerSource_9,          /**< \brief Input signal REQTRx_9  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   500      IfxVadc_TriggerSource_10,         /**< \brief Input signal REQTRx_10  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   501      IfxVadc_TriggerSource_11,         /**< \brief Input signal REQTRx_11  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   502      IfxVadc_TriggerSource_12,         /**< \brief Input signal REQTRx_12  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   503      IfxVadc_TriggerSource_13,         /**< \brief Input signal REQTRx_13  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   504      IfxVadc_TriggerSource_14,         /**< \brief Input signal REQTRx_14  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   505      IfxVadc_TriggerSource_15          /**< \brief Input signal REQTRx_15  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   506  } IfxVadc_TriggerSource;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   507  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   508  /** \} */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   509  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   510  /** \addtogroup IfxLld_Vadc_Std_Background_Autoscan
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   511   * \{ */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   512  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   513  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   514  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   515  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   516  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   517  /** \brief access function to enable/disable  wait for read mode for result registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   518   * \param group pointer to the VADC group
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   519   * \param resultIdx result register index
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   520   * \param waitForRead wait for read mode enabled/disabled
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   521   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   522   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   523  IFX_INLINE void IfxVadc_configureWaitForReadMode(Ifx_VADC_G *group, uint32 resultIdx, boolean waitForRead);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   524  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   525  /** \brief access function to enable/disable  wait for read mode for global result register
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   526   * \param vadc pointer to the VADC
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   527   * \param waitForRead wait for read mode enabled/disabled
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   528   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   529   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   530  IFX_INLINE void IfxVadc_configureWaitForReadModeForGlobalResultRegister(Ifx_VADC *vadc, boolean waitForRead);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   531  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   532  /** \brief Enables the background sacn external trigger.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   533   * \param vadc pointer to the base of VADC registers.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   534   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   535   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   536  IFX_INLINE void IfxVadc_enableBackgroundScanSlotExternalTrigger(Ifx_VADC *vadc);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   537  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   538  /** \brief Gets the background scan gating mode.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   539   * \param vadc pointer to the base of VADC registers.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   540   * \return background scan gating mode.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   541   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   542  IFX_INLINE IfxVadc_GatingMode IfxVadc_getBackgroundScanGatingMode(Ifx_VADC *vadc);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   543  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   544  /** \brief Gets the gating input selection.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   545   * \param vadc pointer to the base of VADC registers.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   546   * \return background scan gating input selection.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   547   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   548  IFX_INLINE IfxVadc_GatingSource IfxVadc_getBackgroundScanGatingSource(Ifx_VADC *vadc);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   549  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   550  /** \brief Gets the requested background scan slot priority.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   551   * \param vadcG pointer to VADC group registers.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   552   * \return requested background scan slot priority.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   553   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   554  IFX_INLINE IfxVadc_RequestSlotPriority IfxVadc_getBackgroundScanSlotPriority(Ifx_VADC_G *vadcG);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   555  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   556  /** \brief Gets the requested background scan slot start mode.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   557   * \param vadcG pointer to VADC group registers.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   558   * \return requested background scan slot start mode.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   559   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   560  IFX_INLINE IfxVadc_RequestSlotStartMode IfxVadc_getBackgroundScanSlotStartMode(Ifx_VADC_G *vadcG);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   561  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   562  /** \brief Gets the background scan trigger input.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   563   * \param vadc pointer to the base of VADC registers.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   564   * \return Gets the background scan external trigger source.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   565   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   566  IFX_INLINE IfxVadc_TriggerSource IfxVadc_getBackgroundScanTriggerInput(Ifx_VADC *vadc);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   567  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   568  /** \brief Gets the background scan external trigger mode.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   569   * \param vadc pointer to the base of VADC registers.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   570   * \return background scan external trigger mode.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   571   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   572  IFX_INLINE IfxVadc_TriggerMode IfxVadc_getBackgroundScanTriggerMode(Ifx_VADC *vadc);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   573  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   574  /** \brief get global input class resolution
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   575   * \param vadc Pointer to the VADC Group
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   576   * \param inputClassNum global input class number
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   577   * \return ADC input class channel resolution.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   578   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   579  IFX_INLINE IfxVadc_ChannelResolution IfxVadc_getGlobalResolution(Ifx_VADC *vadc, uint8 inputClassNum);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   580  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   581  /** \brief return conversion result stored in the Global result Register
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   582   * \param vadc pointer to the VADC module
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   583   * \return global result register
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   584   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   585   * \code
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   586   * Ifx_VADC* vadc = &MODULE_VADC; // module pointer
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   587   * IfxVadc_GroupId groupId = IfxVadc_GroupId0; // for group 0
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   588   * uint32 channels = (1 << 5) | (1 << 2); // enable channel #5 and #2
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   589   * uint32 mask = (1 << 7) | (1 << 5) | (1 << 2); // modify the selection for channel #7, #5 and #2; channel #7 will be disabled
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   590   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   591   * //confiure wait for read mode for global result register
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   592   * IfxVadc_configureWaitForReadModeForGlobalResultRegister(vadc, TRUE);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   593   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   594   * // configure background scan
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   595   * IfxVadc_setBackgroundScan(vadc, groupId, channels, mask);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   596   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   597   * // enable auto scan
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   598   * IfxVadc_SetAutoBackgroundScan(vadc, TRUE);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   599   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   600   * // start the background scan
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   601   * IfxVadc_startBackgroundScan(vadc);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   602   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   603   * Ifx_VADC_GLOBRES result;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   604   * result = IfxVadc_getGlobalResult (vadc);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   605   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   606   * \endcode
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   607   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   608   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   609  IFX_INLINE Ifx_VADC_GLOBRES IfxVadc_getGlobalResult(Ifx_VADC *vadc);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   610  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   611  /** \brief get global input class sample time in sec
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   612   * \param vadc Pointer to the VADC Group Register space
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   613   * \param inputClassNum ADC input class number
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   614   * \param analogFrequency ADC module analog frequency in Hz.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   615   * \return ADC input class channel sample time in sec.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   616   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   617  IFX_INLINE float32 IfxVadc_getGlobalSampleTime(Ifx_VADC *vadc, uint8 inputClassNum, float32 analogFrequency);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   618  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   619  /** \brief Get conversion result for the group
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   620   * \param group pointer to the VADC group
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   621   * \param results pointer to scaled conversion results
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   622   * \param resultOffset offset for the first result
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   623   * \param numResults number of results
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   624   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   625   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   626   * \code
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   627   * Ifx_VADC* vadc = &MODULE_VADC
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   628   * Ifx_VADC_G* group = &MODULE_VADC.G[0]; // for group 0
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   629   * uint32 channels = (1 << 5) | (1 << 2); // enable channel #5 and #2
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   630   * uint32 mask = (1 << 7) | (1 << 5) | (1 << 2); // modify the selection for channel #7, #5 and #2; channel #7 will be disabled
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   631   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   632   * //confiure wait for read mode for global result register
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   633   * IfxVadc_configureWaitForReadMode(group,IfxVadc_ChannelResult0, TRUE);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   634   * IfxVadc_configureWaitForReadMode(group,IfxVadc_ChannelResult1, TRUE);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   635   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   636   * // configure scan
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   637   * IfxVadc_setScan(group, channels, mask);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   638   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   639   * // enable auto scan
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   640   * IfxVadc_setAutoScan(group, TRUE);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   641   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   642   * // start the scan
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   643   * IfxVadc_startScan(group);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   644   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   645   * // wait for conversion to finish
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   646   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   647   * // fetch the 2 results of conversion for group 0
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   648   * Ifx_VADC_RES results[10];
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   649   * result = IfxVadc_getGroupResult(group, results, 0, 2);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   650   * \endcode
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   651   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   652   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   653  IFX_INLINE void IfxVadc_getGroupResult(Ifx_VADC_G *group, Ifx_VADC_RES *results, uint32 resultOffset, uint32 numResults);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   654  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   655  /** \brief Get conversion result (Function does not care about the alignment)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   656   * value = raw * gain + offset.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   657   * \param group pointer to the VADC group
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   658   * \param resultIdx result register index
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   659   * \return scaled Conversion result
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   660   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   661   * \code
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   662   * Ifx_VADC_G* group = &MODULE_VADC.G[0]; // for group 0
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   663   * uint32 channels = (1 << 5) | (1 << 2); // enable channel #5 and #2
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   664   * uint32 mask = (1 << 7) | (1 << 5) | (1 << 2); // modify the selection for channel #7, #5 and #2; channel #7 will be disabled
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   665   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   666   * //confiure wait for read mode for global result register
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   667   * IfxVadc_configureWaitForReadMode(group,IfxVadc_ChannelResult0, TRUE);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   668   * IfxVadc_configureWaitForReadMode(group,IfxVadc_ChannelResult1, TRUE);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   669   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   670   * // configure scan
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   671   * IfxVadc_setScan(group, channels, mask);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   672   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   673   * // enable auto scan
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   674   * IfxVadc_setAutoScan(group, TRUE);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   675   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   676   * // start the scan
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   677   * IfxVadc_startScan(group);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   678   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   679   * // wait for conversion to finish
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   680   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   681   * // fetch the result of conversion from result register 0 for group 0
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   682   * Ifx_VADC_RES result;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   683   * result = IfxVadc_getResult(group, IfxVadc_ChannelResult0);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   684   * \endcode
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   685   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   686   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   687  IFX_INLINE Ifx_VADC_RES IfxVadc_getResult(Ifx_VADC_G *group, uint32 resultIdx);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   688  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   689  /** \brief Returns the auto background scan status.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   690   * \param vadc pointer to the base of VADC registers.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   691   * \return TRUE if enabled otherwise FALSE.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   692   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   693  IFX_INLINE boolean IfxVadc_isAutoBackgroundScanEnabled(Ifx_VADC *vadc);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   694  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   695  /** \brief Returns the background scan slot requested status.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   696   * \param vadcG pointer to VADC group registers.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   697   * \return background scan slot requested status.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   698   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   699  IFX_INLINE boolean IfxVadc_isRequestBackgroundScanSlotEnabled(Ifx_VADC_G *vadcG);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   700  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   701  /** \brief Enables/Disables continuous background auto scan
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   702   * \param vadc pointer to the base of VADC registers.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   703   * \param autoBackgroundScanEnable whether auto background scan enabled or not.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   704   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   705   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   706  IFX_INLINE void IfxVadc_setAutoBackgroundScan(Ifx_VADC *vadc, boolean autoBackgroundScanEnable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   707  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   708  /** \brief configures a background scan; can also stop autoscan if all channels are 0
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   709   * \param vadc pointer to the VADC module registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   710   * \param groupId group index
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   711   * \param channels specifies the channels which should be enabled/disabled
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   712   * \param mask specifies the channels which should be modified
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   713   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   714   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   715   * Background scan can be enabled/disabled for the given channels which are selected with the mask
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   716   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   717   * \code
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   718   * Ifx_VADC* vadc = &MODULE_VADC; // module pointer
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   719   * IfxVadc_GroupId groupId = IfxVadc_GroupId0; // for group 0
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   720   * uint32 channels = (1 << 5) | (1 << 2); // enable channel #5 and #2
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   721   * uint32 mask = (1 << 7) | (1 << 5) | (1 << 2); // modify the selection for channel #7, #5 and #2; channel #7 will be disabled
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   722   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   723   * //confiure wait for read mode for global result register
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   724   * IfxVadc_configureWaitForReadModeForGlobalResultRegister(vadc, TRUE);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   725   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   726   * // configure background scan
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   727   * IfxVadc_setBackgroundScan(vadc, groupId, channels, mask);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   728   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   729   * // enable auto scan
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   730   * IfxVadc_setAutoBackgroundScan(vadc, TRUE);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   731   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   732   * // start the background scan
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   733   * IfxVadc_startBackgroundScan(vadc);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   734   * \endcode
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   735   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   736   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   737  IFX_INLINE void IfxVadc_setBackgroundScan(Ifx_VADC *vadc, IfxVadc_GroupId groupId, uint32 channels, uint32 mask);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   738  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   739  /** \brief Sets the background scan slot gating configurations.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   740   * \param vadc pointer to the base of VADC registers.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   741   * \param gatingSource gate input for group.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   742   * \param gatingMode gating mode. High level, Low Level  or Gating disabled.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   743   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   744   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   745  IFX_INLINE void IfxVadc_setBackgroundScanSlotGatingConfig(Ifx_VADC *vadc, IfxVadc_GatingSource gatingSource, IfxVadc_GatingMode gatingMode);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   746  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   747  /** \brief Sets the background scan exteranal trigger operating configurations.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   748   * \param vadc pointer to the base of VADC registers.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   749   * \param triggerMode trigger mode. Rising, falling any edge leads to an trigger event.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   750   * \param triggerSource trigger input for group.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   751   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   752   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   753  IFX_INLINE void IfxVadc_setBackgroundScanSlotTriggerConfig(Ifx_VADC *vadc, IfxVadc_TriggerMode triggerMode, IfxVadc_TriggerSource triggerSource);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   754  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   755  /** \brief Starts a background scan
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   756   * \param vadc pointer to the VADC module
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   757   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   758   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   759   * \see IfxVadc_setBackgroundScan
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   760   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   761   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   762  IFX_INLINE void IfxVadc_startBackgroundScan(Ifx_VADC *vadc);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   763  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   764  /** \brief Get debug conversion result
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   765   * \param group pointer to the VADC group
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   766   * \param resultIdx result register index
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   767   * \return Debug conversion result.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   768   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   769  IFX_INLINE Ifx_VADC_RESD IfxVadc_getDebugResult(Ifx_VADC_G *group, uint32 resultIdx);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   770  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   771  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   772  /*-------------------------Global Function Prototypes-------------------------*/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   773  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   774  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   775  /** \brief Gives the background scan status for a group
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   776   * \param vadc pointer to the VADC module
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   777   * \return IfxVadc_Status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   778   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   779  IFX_EXTERN IfxVadc_Status IfxVadc_getBackgroundScanStatus(Ifx_VADC *vadc);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   780  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   781  /** \brief Get conversion result (Function does not care about the alignment)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   782   * value = raw * gain + offset.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   783   * \param vadc VADC module pointer
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   784   * \param group pointer to the VADC group
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   785   * \param channel channel Id
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   786   * \param sourceType type of request source
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   787   * \return scaled Conversion result
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   788   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   789   * \code
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   790   * Ifx_VADC vadc;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   791   * vadc.vadc = &MODULE_VADC;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   792   * Ifx_VADC_G* group = &MODULE_VADC.G[0]; // for group 0
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   793   * uint32 channels = (1 << 5) | (1 << 2); // enable channel #5 and #2
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   794   * uint32 mask = (1 << 7) | (1 << 5) | (1 << 2); // modify the selection for channel #7, #5 and #2; channel #7 will be disabled
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   795   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   796   * //confiure wait for read mode for global result register
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   797   * IfxVadc_configureWaitForReadMode(group,IfxVadc_ChannelResult0, TRUE);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   798   * IfxVadc_configureWaitForReadMode(group,IfxVadc_ChannelResult1, TRUE);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   799   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   800   * // configure scan
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   801   * IfxVadc_setScan(group, channels, mask);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   802   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   803   * // start the scan
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   804   * IfxVadc_startScan(group);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   805   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   806   * // wait for conversion to finish
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   807   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   808   * // fetch the result of conversion for channel 2 of group 0
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   809   * Ifx_VADC_RESresult2;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   810   * result = IfxVadc_getResultBasedOnRequestSource(&vadc, group, IfxVadc_ChannelId2, IfxVadc_RequestSource_scan);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   811   * Ifx_VADC_RESresult5;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   812   * result = IfxVadc_getResultBasedOnRequestSource(&vadc, group, IfxVadc_ChannelId5, IfxVadc_RequestSource_scan);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   813   * \endcode
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   814   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   815   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   816  IFX_EXTERN Ifx_VADC_RES IfxVadc_getResultBasedOnRequestSource(Ifx_VADC *vadc, Ifx_VADC_G *group, IfxVadc_ChannelId channel, IfxVadc_RequestSource sourceType);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   817  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   818  /** \} */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   819  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   820  /** \addtogroup IfxLld_Vadc_Std_ChannelScan
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   821   * \{ */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   822  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   823  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   824  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   825  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   826  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   827  /** \brief Disables the scan slot external trigger.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   828   * \param vadcG pointer to VADC group registers.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   829   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   830   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   831  IFX_INLINE void IfxVadc_disableScanSlotExternalTrigger(Ifx_VADC_G *vadcG);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   832  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   833  /** \brief Enables the scan slot external trigger.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   834   * \param vadcG pointer to VADC group registers.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   835   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   836   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   837  IFX_INLINE void IfxVadc_enableScanSlotExternalTrigger(Ifx_VADC_G *vadcG);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   838  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   839  /** \brief Gets the request scan slot gating mode.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   840   * \param vadcG pointer to VADC group registers.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   841   * \return requested scan slot gating mode.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   842   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   843  IFX_INLINE IfxVadc_GatingMode IfxVadc_getScanSlotGatingMode(Ifx_VADC_G *vadcG);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   844  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   845  /** \brief Gets the request scan slot gating input.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   846   * \param vadcG pointer to VADC group registers.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   847   * \return request scan slot gating input.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   848   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   849  IFX_INLINE IfxVadc_GatingSource IfxVadc_getScanSlotGatingSource(Ifx_VADC_G *vadcG);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   850  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   851  /** \brief Gets the request scan slot priority.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   852   * \param vadcG pointer to VADC group registers.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   853   * \return request scan slot priority.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   854   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   855  IFX_INLINE IfxVadc_RequestSlotPriority IfxVadc_getScanSlotPriority(Ifx_VADC_G *vadcG);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   856  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   857  /** \brief Gets the request scan slot start mode.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   858   * \param vadcG pointer to VADC group registers.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   859   * \return request scan slot start mode.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   860   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   861  IFX_INLINE IfxVadc_RequestSlotStartMode IfxVadc_getScanSlotStartMode(Ifx_VADC_G *vadcG);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   862  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   863  /** \brief Gets the requested scan slot trigger input.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   864   * \param vadcG pointer to VADC group registers.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   865   * \return requested scan slot trigger input.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   866   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   867  IFX_INLINE IfxVadc_TriggerSource IfxVadc_getScanSlotTriggerInput(Ifx_VADC_G *vadcG);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   868  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   869  /** \brief Gets the requested scan slot trigger mode.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   870   * \param vadcG pointer to VADC group registers.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   871   * \return requested scan slot trigger mode.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   872   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   873  IFX_INLINE IfxVadc_TriggerMode IfxVadc_getScanSlotTriggerMode(Ifx_VADC_G *vadcG);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   874  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   875  /** \brief Gets the auto scan enable status.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   876   * \param vadcG pointer to VADC group registers.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   877   * \return TRUE if auto scan enabled otherwise FALSE.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   878   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   879  IFX_INLINE boolean IfxVadc_isAutoScanEnabled(Ifx_VADC_G *vadcG);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   880  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   881  /** \brief Returns the scan slot requested status.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   882   * \param vadcG pointer to VADC group registers.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   883   * \return TRUE if scan slot request enabled otherwise FALSE.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   884   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   885  IFX_INLINE boolean IfxVadc_isRequestScanSlotEnabled(Ifx_VADC_G *vadcG);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   886  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   887  /** \brief Enables/Disables continuous auto scan
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   888   * \param vadcG pointer to VADC group registers.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   889   * \param autoscanEnable whether autoscan is enabled or not.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   890   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   891   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   892  IFX_INLINE void IfxVadc_setAutoScan(Ifx_VADC_G *vadcG, boolean autoscanEnable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   893  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   894  /** \brief Sets the scan slot gating configuration.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   895   * \param vadcG pointer to VADC group registers.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   896   * \param gatingSource gate input for group.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   897   * \param gatingMode gating mode. High level, Low Level  or Gating disabled.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   898   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   899   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   900  IFX_INLINE void IfxVadc_setScanSlotGatingConfig(Ifx_VADC_G *vadcG, IfxVadc_GatingSource gatingSource, IfxVadc_GatingMode gatingMode);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   901  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   902  /** \brief Sets the scan slot trigger operating configurations.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   903   * \param vadcG pointer to VADC group registers.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   904   * \param triggerMode trigger mode. Rising, falling any edge leads to an trigger event.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   905   * \param triggerSource trigger input for group.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   906   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   907   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   908  IFX_INLINE void IfxVadc_setScanSlotTriggerConfig(Ifx_VADC_G *vadcG, IfxVadc_TriggerMode triggerMode, IfxVadc_TriggerSource triggerSource);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   909  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   910  /** \brief Starts an autoscan on the specified group
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   911   * \param group pointer to the VADC group
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   912   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   913   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   914   * See \ref IfxVadc_setScan
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   915   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   916   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   917  IFX_INLINE void IfxVadc_startScan(Ifx_VADC_G *group);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   918  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   919  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   920  /*-------------------------Global Function Prototypes-------------------------*/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   921  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   922  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   923  /** \brief Gives the scan status for a group
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   924   * \param group pointer to the VADC group
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   925   * \return IfxVadc_Status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   926   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   927  IFX_EXTERN IfxVadc_Status IfxVadc_getScanStatus(Ifx_VADC_G *group);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   928  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   929  /** \brief Configures an (auto-)scan
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   930   * \param group pointer to the VADC group
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   931   * \param channels specifies the channels which should be enabled/disabled
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   932   * \param mask specifies the channels which should be modified
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   933   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   934   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   935   * (Auto-)Scan can be enabled/disabled for the given channels which are selected with the mask
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   936   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   937   * \code
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   938   * Ifx_VADC_G* group = &MODULE_VADC.G[0]; // for group 0
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   939   * uint32 channels = (1 << 5) | (1 << 2); // enable channel #5 and #2
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   940   * uint32 mask = (1 << 7) | (1 << 5) | (1 << 2); // modify the selection for channel #7, #5 and #2; channel #7 will be disabled
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   941   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   942   * // configure scan
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   943   * IfxVadc_setScan(group, channels, mask);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   944   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   945   * // enable Auto-Scan
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   946   * IfxVadc_setAutoScan(group, TRUE);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   947   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   948   * // start the scan
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   949   * IfxVadc_startScan(group);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   950   * \endcode
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   951   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   952   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   953  IFX_EXTERN void IfxVadc_setScan(Ifx_VADC_G *group, uint32 channels, uint32 mask);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   954  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   955  /** \} */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   956  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   957  /** \addtogroup IfxLld_Vadc_Std_QueueRequest
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   958   * \{ */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   959  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   960  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   961  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   962  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   963  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   964  /** \brief Add an entry to the queue of a group for the specified channel with the following options set:
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   965   * refill incase of aborted conversion
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   966   * source interrupt enable/disable
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   967   * external trigger control of the aborted conversion
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   968   * \param group pointer to the VADC group
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   969   * \param channel specifies channel Id
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   970   * \param options specifies the refill, source interrupt enable/disable and external trigger control selection
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   971   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   972   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   973   * \code
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   974   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   975   * Ifx_VADC_G* group = &MODULE_VADC.G[0]; // for group 0
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   976   * IfxVadc_ChannelId channel = 1; // for channel 1
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   977   * // Add channel 1 to queue of group 0 with the refill turned on
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   978   * IfxVadc_addToQueue(qroup, channel, (1<<IFX_VADC_G_QBUR0_RF_OFF));
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   979   * \endcode
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   980   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   981   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   982  IFX_INLINE void IfxVadc_addToQueue(Ifx_VADC_G *group, IfxVadc_ChannelId channel, uint32 options);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   983  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   984  /** \brief Clears all the queue entries including backup stage.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   985   * \param vadcG pointer to VADC group registers.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   986   * \param flushQueue Whether queue is cleared or not.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   987   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   988   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   989  IFX_INLINE void IfxVadc_clearQueue(Ifx_VADC_G *vadcG, boolean flushQueue);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   990  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   991  /** \brief Disables the external trigger.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   992   * \param vadcG pointer to VADC group registers.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   993   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   994   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   995  IFX_INLINE void IfxVadc_disableQueueSlotExternalTrigger(Ifx_VADC_G *vadcG);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   996  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   997  /** \brief Enables the external trigger.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   998   * \param vadcG pointer to VADC group registers.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	   999   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1000   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1001  IFX_INLINE void IfxVadc_enableQueueSlotExternalTrigger(Ifx_VADC_G *vadcG);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1002  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1003  /** \brief Gets the requested queue slot gating mode.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1004   * \param vadcG pointer to VADC group registers.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1005   * \return requested queue slot gating mode.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1006   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1007  IFX_INLINE IfxVadc_GatingMode IfxVadc_getQueueSlotGatingMode(Ifx_VADC_G *vadcG);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1008  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1009  /** \brief Gets the requested queue slot gating input.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1010   * \param vadcG pointer to VADC group registers.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1011   * \return requested queue slot gating input.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1012   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1013  IFX_INLINE IfxVadc_GatingSource IfxVadc_getQueueSlotGatingSource(Ifx_VADC_G *vadcG);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1014  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1015  /** \brief Gets the request queue slot priority.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1016   * \param vadcG pointer to VADC group registers.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1017   * \return requested queue slot priority.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1018   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1019  IFX_INLINE IfxVadc_RequestSlotPriority IfxVadc_getQueueSlotPriority(Ifx_VADC_G *vadcG);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1020  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1021  /** \brief Gets the requested queue slot start mode.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1022   * \param vadcG pointer to VADC group registers.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1023   * \return requested queue slot start mode.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1024   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1025  IFX_INLINE IfxVadc_RequestSlotStartMode IfxVadc_getQueueSlotStartMode(Ifx_VADC_G *vadcG);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1026  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1027  /** \brief Gets the requested queue slot trigger input.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1028   * \param vadcG pointer to VADC group registers.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1029   * \return requested queue slot trigger input.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1030   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1031  IFX_INLINE IfxVadc_TriggerSource IfxVadc_getQueueSlotTriggerInput(Ifx_VADC_G *vadcG);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1032  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1033  /** \brief Gets the requested queue slot trigger mode.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1034   * \param vadcG pointer to VADC group registers.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1035   * \return requested queue slot trigger mode.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1036   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1037  IFX_INLINE IfxVadc_TriggerMode IfxVadc_getQueueSlotTriggerMode(Ifx_VADC_G *vadcG);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1038  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1039  /** \brief Returns the queue slot requested status.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1040   * \param vadcG pointer to VADC group registers.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1041   * \return TRUE if queue slot request enabled otherwise FALSE.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1042   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1043  IFX_INLINE boolean IfxVadc_isRequestQueueSlotEnabled(Ifx_VADC_G *vadcG);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1044  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1045  /** \brief Sets the gating configurations.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1046   * \param vadcG pointer to VADC group registers.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1047   * \param gatingSource gate input for group.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1048   * \param gatingMode gating mode. High level, Low Level  or Gating disabled.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1049   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1050   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1051  IFX_INLINE void IfxVadc_setQueueSlotGatingConfig(Ifx_VADC_G *vadcG, IfxVadc_GatingSource gatingSource, IfxVadc_GatingMode gatingMode);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1052  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1053  /** \brief Sets the trigger operating configurations.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1054   * \param vadcG pointer to VADC group registers.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1055   * \param triggerMode trigger mode. Rising, falling any edge leads to an trigger event.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1056   * \param triggerSource trigger input for group.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1057   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1058   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1059  IFX_INLINE void IfxVadc_setQueueSlotTriggerOperatingConfig(Ifx_VADC_G *vadcG, IfxVadc_TriggerMode triggerMode, IfxVadc_TriggerSource triggerSource);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1060  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1061  /** \brief Starts a queue of a group by generating a trigger event through software
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1062   * \param group pointer to the VADC group
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1063   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1064   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1065  IFX_INLINE void IfxVadc_startQueue(Ifx_VADC_G *group);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1066  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1067  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1068  /*-------------------------Global Function Prototypes-------------------------*/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1069  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1070  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1071  /** \brief Gives the status of the Queue of a group by returning non zero value if the Queue is full
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1072   * \param group pointer to the VADC group
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1073   * \return status of the Queue
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1074   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1075   * \code
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1076   * Ifx_VADC_G* group = &MODULE_VADC.G[0]; // for group 0
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1077   * boolean queueFull = (IfxVadc_getQueueStatus(group)==IfxVadc_Status_queueFull)?TRUE:FALSE; // get Queue status for group 0
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1078   * \endcode
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1079   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1080   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1081  IFX_EXTERN IfxVadc_Status IfxVadc_getQueueStatus(Ifx_VADC_G *group);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1082  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1083  /** \} */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1084  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1085  /** \addtogroup IfxLld_Vadc_Std_IO
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1086   * \{ */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1087  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1088  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1089  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1090  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1091  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1092  /** \brief Initializes a EMUX output
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1093   * \param emux the Emux Pin which should be configured
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1094   * \param outputMode the pin output mode which should be configured
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1095   * \param padDriver the pad driver mode which should be configured
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1096   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1097   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1098  IFX_INLINE void IfxVadc_initEmuxPin(const IfxVadc_Emux_Out *emux, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1099  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1100  /** \brief Initializes a GxBFL output
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1101   * \param gxBfl the GxBFL Pin which should be configured
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1102   * \param outputMode the pin output mode which should be configured
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1103   * \param padDriver the pad driver mode which should be configured
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1104   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1105   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1106  IFX_INLINE void IfxVadc_initGxBflPin(const IfxVadc_GxBfl_Out *gxBfl, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1107  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1108  /** \} */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1109  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1110  /** \addtogroup IfxLld_Vadc_Std_Frequency
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1111   * \{ */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1112  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1113  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1114  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1115  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1116  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1117  /** \brief Calculate the time using analog frequency.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1118   * \param analogFrequency analog frequency in Hz.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1119   * \param sampleTime sample time in sec.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1120   * \return sample time in sec.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1121   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1122  IFX_INLINE uint32 IfxVadc_calculateSampleTime(float32 analogFrequency, float32 sampleTime);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1123  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1124  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1125  /*-------------------------Global Function Prototypes-------------------------*/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1126  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1127  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1128  /** \brief Returns the configured Fadci VADC analog clock frequency in Hz.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1129   * \param vadc pointer to the base of VADC registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1130   * \return Returns the configured Fadci VADC analog clock frequency in Hz.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1131   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1132  IFX_EXTERN float32 IfxVadc_getAdcAnalogFrequency(Ifx_VADC *vadc);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1133  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1134  /** \brief Returns the configured Fadcd VADC digital clock frequency in Hz.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1135   * \param vadc pointer to the base of VADC registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1136   * \return Returns the configured Fadcd VADC digital clock frequency in Hz.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1137   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1138  IFX_EXTERN float32 IfxVadc_getAdcDigitalFrequency(Ifx_VADC *vadc);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1139  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1140  /** \} */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1141  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1142  /** \addtogroup IfxLld_Vadc_Std_Group
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1143   * \{ */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1144  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1145  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1146  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1147  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1148  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1149  /** \brief Clears the all group requests.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1150   * \param vadcG pointer to VADC group registers.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1151   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1152   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1153  IFX_INLINE void IfxVadc_clearAllResultRequests(Ifx_VADC_G *vadcG);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1154  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1155  /** \brief Gets the ADC group arbitration round length.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1156   * \param vadcG pointer to VADC group registers.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1157   * \return ADC group arbitration round length.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1158   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1159  IFX_INLINE IfxVadc_ArbitrationRounds IfxVadc_getArbiterRoundLength(Ifx_VADC_G *vadcG);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1160  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1161  /** \brief Gets the channel esult service request node pointer 0.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1162   * \param vadcG pointer to VADC group registers.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1163   * \return channel result service request node pointer 0.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1164   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1165  IFX_INLINE Ifx_VADC_G_REVNP0 IfxVadc_getChannelResultServiceRequestNodePointer0(Ifx_VADC_G *vadcG);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1166  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1167  /** \brief Gets the channel esult service request node pointer 1.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1168   * \param vadcG pointer to VADC group registers.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1169   * \return channel result service request node pointer 1.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1170   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1171  IFX_INLINE Ifx_VADC_G_REVNP1 IfxVadc_getChannelResultServiceRequestNodePointer1(Ifx_VADC_G *vadcG);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1172  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1173  /** \brief Gets the channel service request node pointer.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1174   * \param vadcG pointer to VADC group registers.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1175   * \return channel service request node pointer.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1176   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1177  IFX_INLINE Ifx_VADC_G_CEVNP0 IfxVadc_getChannelServiceRequestNodePointer0(Ifx_VADC_G *vadcG);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1178  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1179  /** \brief Gets the configured master index.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1180   * \param vadcG pointer to VADC group registers.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1181   * \return configured master kernel index.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1182   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1183  IFX_INLINE uint8 IfxVadc_getMasterIndex(Ifx_VADC_G *vadcG);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1184  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1185  /** \brief Resets the ADC group.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1186   * \param vadcG pointer to VADC group registers.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1187   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1188   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1189  IFX_INLINE void IfxVadc_resetGroup(Ifx_VADC_G *vadcG);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1190  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1191  /** \brief Sets analog converter group number.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1192   * \param vadcG pointer to VADC group registers.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1193   * \param analogConverterMode group analog converter mode.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1194   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1195   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1196  IFX_INLINE void IfxVadc_setAnalogConvertControl(Ifx_VADC_G *vadcG, IfxVadc_AnalogConverterMode analogConverterMode);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1197  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1198  /** \brief Sets the arbiter round length.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1199   * \param vadcG pointer to VADC group registers.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1200   * \param arbiterRoundLength arbiter round length.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1201   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1202   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1203  IFX_INLINE void IfxVadc_setArbitrationRoundLength(Ifx_VADC_G *vadcG, IfxVadc_ArbitrationRounds arbiterRoundLength);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1204  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1205  /** \brief Sets the ADC input class channel resolution.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1206   * \param vadcG pointer to VADC group registers.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1207   * \param inputClassNum input class number.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1208   * \param resolution ADC input class channel resolution.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1209   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1210   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1211  IFX_INLINE void IfxVadc_setGroupResolution(Ifx_VADC_G *vadcG, uint8 inputClassNum, IfxVadc_ChannelResolution resolution);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1212  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1213  /** \brief Sets the ADC input class sample time.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1214   * \param vadcG pointer to VADC group registers.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1215   * \param inputClassNum input class number.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1216   * \param analogFrequency ADC analog frequency in Hz.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1217   * \param sampleTime request sample time in sec for input class.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1218   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1219   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1220  IFX_INLINE void IfxVadc_setGroupSampleTime(Ifx_VADC_G *vadcG, uint8 inputClassNum, float32 analogFrequency, float32 sampleTime);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1221  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1222  /** \brief Sets the master index.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1223   * \param vadcG pointer to VADC group registers.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1224   * \param masterIndex master index.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1225   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1226   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1227  IFX_INLINE void IfxVadc_setMasterIndex(Ifx_VADC_G *vadcG, uint8 masterIndex);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1228  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1229  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1230  /*-------------------------Global Function Prototypes-------------------------*/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1231  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1232  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1233  /** \brief Sets the Arbiter slot configurations.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1234   * \param vadcG pointer to VADC group registers.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1235   * \param slotEnable enable/disable of slot.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1236   * \param prio channel request priority.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1237   * \param mode Channel Slot start mode.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1238   * \param slot channel slot Request source.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1239   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1240   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1241  IFX_EXTERN void IfxVadc_setArbiterPriority(Ifx_VADC_G *vadcG, boolean slotEnable, IfxVadc_RequestSlotPriority prio, IfxVadc_RequestSlotStartMode mode, IfxVadc_RequestSource slot);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1242  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1243  /** \} */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1244  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1245  /** \addtogroup IfxLld_Vadc_Std_Module
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1246   * \{ */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1247  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1248  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1249  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1250  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1251  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1252  /** \brief Disable VADC Module
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1253   * \param vadc Pointer to VADC Module
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1254   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1255   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1256  IFX_INLINE void IfxVadc_disableModule(Ifx_VADC *vadc);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1257  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1258  /** \brief Enable VADC kernel.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1259   * \param vadc pointer to the base of VADC registers.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1260   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1261   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1262  IFX_INLINE void IfxVadc_enableModule(Ifx_VADC *vadc);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1263  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1264  /** \brief gets ADC Calibration Flag CAL status.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1265   * \param vadc pointer to VADC group registers.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1266   * \param adcCalGroupNum ADC CAL group number.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1267   * \return CAL group status.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1268   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1269  IFX_INLINE uint8 IfxVadc_getAdcCalibrationActiveState(Ifx_VADC *vadc, uint8 adcCalGroupNum);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1270  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1271  /** \brief Gets the global control configuration value.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1272   * \param vadc pointer to the base of VADC registers.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1273   * \return global control configuration value.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1274   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1275  IFX_INLINE Ifx_VADC_GLOBCFG IfxVadc_getGlobalConfigValue(Ifx_VADC *vadc);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1276  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1277  /** \brief get SUCAL bit field status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1278   * \param vadc Pointer to VADC Module
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1279   * \return Indicate the start-up calibration phase
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1280   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1281  IFX_INLINE boolean IfxVadc_getStartupCalibration(Ifx_VADC *vadc);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1282  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1283  /** \brief initiates the calibration pulse phase.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1284   * \param vadc pointer to the base of VADC registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1285   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1286   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1287  IFX_INLINE void IfxVadc_initiateStartupCalibration(Ifx_VADC *vadc);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1288  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1289  /** \brief Sets the channel conversion mode.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1290   * \param vadc pointer to VADC module registers.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1291   * \param inputClassNum global input class  number.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1292   * \param resolution ADC channel resolution.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1293   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1294   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1295  IFX_INLINE void IfxVadc_setGlobalResolution(Ifx_VADC *vadc, uint8 inputClassNum, IfxVadc_ChannelResolution resolution);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1296  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1297  /** \brief Sets the sample time of ADC global class.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1298   * \param vadc pointer to VADC module registers.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1299   * \param inputClassNum global input class  number.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1300   * \param analogFrequency ADC analog frequency in Hz.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1301   * \param sampleTime the requested sample time for input class in sec.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1302   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1303   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1304  IFX_INLINE void IfxVadc_setGlobalSampleTime(Ifx_VADC *vadc, uint8 inputClassNum, float32 analogFrequency, float32 sampleTime);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1305  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1306  /** \brief Sets the sensitivity of the module to sleep signal
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1307   * \param vadc pointer to VADC registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1308   * \param mode mode selection (enable/disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1309   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1310   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1311  IFX_INLINE void IfxVadc_setSleepMode(Ifx_VADC *vadc, IfxVadc_SleepMode mode);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1312  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1313  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1314  /*-------------------------Global Function Prototypes-------------------------*/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1315  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1316  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1317  /** \brief Disable write access to the VADC config/control registers.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1318   * \param vadc pointer to the base of VADC registers.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1319   * \param protectionSet Index of the bit in the ACCPROTx {x=0/1} for which write access is to be disabled.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1320   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1321   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1322  IFX_EXTERN void IfxVadc_disableAccess(Ifx_VADC *vadc, IfxVadc_Protection protectionSet);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1323  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1324  /** \brief Disables the post calibration.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1325   * \param vadc pointer to the base of VADC registers.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1326   * \param group Index of the group.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1327   * \param disable disable or not.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1328   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1329   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1330  IFX_EXTERN void IfxVadc_disablePostCalibration(Ifx_VADC *vadc, IfxVadc_GroupId group, boolean disable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1331  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1332  /** \brief Enable write access to the VADC config/control registers.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1333   * \param vadc pointer to the base of VADC registers.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1334   * \param protectionSet Index of the bit in the ACCPROTx {x=0/1} for which write access is to be enabled.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1335   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1336   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1337  IFX_EXTERN void IfxVadc_enableAccess(Ifx_VADC *vadc, IfxVadc_Protection protectionSet);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1338  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1339  /** \brief Enables the CCU6 based ADC group synchronisation as workaround for Erratum ADC_TC.068
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1340   * \param vadc pointer to the base of VADC registers.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1341   * \param ccu6Num selects CCU60 or CCU61
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1342   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1343   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1344  IFX_EXTERN void IfxVadc_enableGroupSync(Ifx_VADC *vadc, uint32 ccu6Num);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1345  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1346  /** \brief Module Frequency in Hz
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1347   * \return Module Frequency in Hz.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1348   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1349  IFX_EXTERN float32 IfxVadc_getAdcModuleFrequency(void);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1350  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1351  /** \brief Gives the SRC source address.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1352   * \param group Index of the group
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1353   * \param index SRC number
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1354   * \return SRC source address
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1355   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1356  IFX_EXTERN volatile Ifx_SRC_SRCR *IfxVadc_getSrcAddress(IfxVadc_GroupId group, IfxVadc_SrcNr index);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1357  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1358  /** \brief Initialises ADC arbiter clock.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1359   * \param vadc pointer to the base of VADC registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1360   * \param arbiterClockDivider ADC arbiter clock divider.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1361   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1362   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1363  IFX_EXTERN void IfxVadc_initialiseAdcArbiterClock(Ifx_VADC *vadc, uint32 arbiterClockDivider);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1364  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1365  /** \brief Initialises the ADC Converter clock.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1366   * \param vadc pointer to the base of VADC registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1367   * \param converterClockDivider ADC converter clock divider.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1368   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1369   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1370  IFX_EXTERN void IfxVadc_initialiseAdcConverterClock(Ifx_VADC *vadc, uint32 converterClockDivider);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1371  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1372  /** \brief Configure the FadcD vadc digital clock.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1373   * \param vadc pointer to the base of VADC registers.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1374   * \param fAdcD ADC digital clock frequency in Hz.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1375   * \return calculated ADC digital clock frequency in Hz.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1376   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1377  IFX_EXTERN uint32 IfxVadc_initializeFAdcD(Ifx_VADC *vadc, uint32 fAdcD);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1378  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1379  /** \brief Configure the ADC analog clock.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1380   * \param vadc pointer to the base of VADC registers.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1381   * \param fAdcI ADC analog clock clock frequency in Hz. Range = [5000000, 10000000].
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1382   * \return ADC analog clock frequency in Hz.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1383   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1384  IFX_EXTERN uint32 IfxVadc_initializeFAdcI(Ifx_VADC *vadc, uint32 fAdcI);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1385  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1386  /** \brief Return the post calibration status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1387   * \param vadc Pointer to VADC module
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1388   * \param group specifies Group ID
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1389   * \return TRUE if the post calibration is enabled for the group else false
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1390   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1391  IFX_EXTERN boolean IfxVadc_isPostCalibration(Ifx_VADC *vadc, IfxVadc_GroupId group);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1392  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1393  /** \brief Resets the kernel.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1394   * \param vadc pointer to the base of VADC registers.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1395   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1396   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1397  IFX_EXTERN void IfxVadc_resetKernel(Ifx_VADC *vadc);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1398  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1399  /** \brief Select Low Power Supply Voltage
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1400   * \param vadc Pointer to Module space
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1401   * \param supplyVoltage Select Supply Voltage
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1402   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1403   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1404  IFX_EXTERN void IfxVadc_selectPowerSupplyVoltage(Ifx_VADC *vadc, IfxVadc_LowSupplyVoltageSelect supplyVoltage);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1405  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1406  /** \brief Starts ADC calibration and wait for the end of the calibration process.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1407   * \param vadc pointer to the base of VADC registers.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1408   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1409   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1410  IFX_EXTERN void IfxVadc_startupCalibration(Ifx_VADC *vadc);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1411  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1412  /** \} */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1413  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1414  /** \addtogroup IfxLld_Vadc_Std_Channel
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1415   * \{ */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1416  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1417  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1418  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1419  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1420  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1421  /** \brief Clears the channel request.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1422   * \param vadcG pointer to VADC group registers.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1423   * \param channelId channel id whose request to be cleared.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1424   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1425   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1426  IFX_INLINE void IfxVadc_clearChannelRequest(Ifx_VADC_G *vadcG, IfxVadc_ChannelId channelId);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1427  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1428  /** \brief Enables the FIFO mode.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1429   * \param vadcG pointer to VADC group registers.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1430   * \param resultRegister channel result register.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1431   * \param fifoMode FIFO mode .
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1432   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1433   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1434  IFX_INLINE void IfxVadc_enableFifoMode(Ifx_VADC_G *vadcG, IfxVadc_ChannelResult resultRegister, IfxVadc_FifoMode fifoMode);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1435  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1436  /**
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1437   * \param vadcG pointer to VADC group registers.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1438   * \param resultRegister channel result register.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1439   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1440   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1441  IFX_INLINE void IfxVadc_enableServiceRequest(Ifx_VADC_G *vadcG, IfxVadc_ChannelResult resultRegister);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1442  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1443  /** \brief Gets the group's assigned channels.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1444   * \param vadcG pointer to VADC group registers.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1445   * \return group's assigned channels.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1446   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1447  IFX_INLINE Ifx_VADC_G_CHASS IfxVadc_getAssignedChannels(Ifx_VADC_G *vadcG);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1448  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1449  /** \brief Gets the current ADC channel control configurations.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1450   * \param vadcG pointer to VADC group registers.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1451   * \param channelIndex ADC channel number.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1452   * \return current ADC channel control configuration.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1453   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1454  IFX_INLINE Ifx_VADC_CHCTR IfxVadc_getChannelControlConfig(Ifx_VADC_G *vadcG, IfxVadc_ChannelId channelIndex);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1455  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1456  /** \brief Gets the channel input class
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1457   * \param vadcG pointer to VADC Group register space
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1458   * \param channelIndex specifies channel ID
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1459   * \return Input class
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1460   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1461  IFX_INLINE IfxVadc_InputClasses IfxVadc_getChannelInputClass(Ifx_VADC_G *vadcG, IfxVadc_ChannelId channelIndex);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1462  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1463  /** \brief Gets the ADC input class channel resolution.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1464   * \param vadcG pointer to VADC group registers.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1465   * \param inputClassNum ADC input class number.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1466   * \return ADC input class channel resolution.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1467   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1468  IFX_INLINE IfxVadc_ChannelResolution IfxVadc_getGroupResolution(Ifx_VADC_G *vadcG, uint8 inputClassNum);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1469  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1470  /** \brief Gets the ADC input class channel sample time.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1471   * \param vadcG pointer to VADC group registers.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1472   * \param inputClassNum ADC input class number.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1473   * \param analogFrequency ADC module analog frequency in Hz.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1474   * \return ADC input class channel sample time in sec.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1475   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1476  IFX_INLINE float32 IfxVadc_getGroupSampleTime(Ifx_VADC_G *vadcG, uint8 inputClassNum, float32 analogFrequency);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1477  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1478  /** \brief Sets the channels with low priority as background channel.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1479   * \param vadcG pointer to VADC group registers.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1480   * \param channelIndex group channel id.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1481   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1482   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1483  IFX_INLINE void IfxVadc_setBackgroundPriorityChannel(Ifx_VADC_G *vadcG, IfxVadc_ChannelId channelIndex);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1484  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1485  /** \brief Sets the target for result background source.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1486   * \param vadcG pointer to VADC group registers.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1487   * \param channelIndex group channel id.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1488   * \param globalResultUsage whether storage in global result register.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1489   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1490   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1491  IFX_INLINE void IfxVadc_setBackgroundResultTarget(Ifx_VADC_G *vadcG, IfxVadc_ChannelId channelIndex, boolean globalResultUsage);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1492  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1493  /** \brief Selects boundary extension.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1494   * \param vadcG pointer to VADC group registers.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1495   * \param channelIndex group channel id.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1496   * \param boundaryMode boundary extension mode.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1497   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1498   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1499  IFX_INLINE void IfxVadc_setBoundaryMode(Ifx_VADC_G *vadcG, IfxVadc_ChannelId channelIndex, IfxVadc_BoundaryExtension boundaryMode);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1500  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1501  /** \brief Sets the channel event service request line.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1502   * \param vadcG pointer to VADC group registers.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1503   * \param channelSrcNr channel event Service Node.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1504   * \param channel channel number.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1505   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1506   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1507  IFX_INLINE void IfxVadc_setChannelEventNodePointer0(Ifx_VADC_G *vadcG, IfxVadc_SrcNr channelSrcNr, IfxVadc_ChannelId channel);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1508  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1509  /** \brief Sets the channel input class.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1510   * \param vadcG pointer to VADC group registers.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1511   * \param channelIndex group channel id.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1512   * \param inputClass group input class.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1513   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1514   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1515  IFX_INLINE void IfxVadc_setChannelInputClass(Ifx_VADC_G *vadcG, IfxVadc_ChannelId channelIndex, IfxVadc_InputClasses inputClass);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1516  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1517  /** \brief Sets the channel event mode.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1518   * \param vadcG pointer to VADC group registers.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1519   * \param channelIndex group channel id.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1520   * \param limitCheck channel event mode.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1521   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1522   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1523  IFX_INLINE void IfxVadc_setChannelLimitCheckMode(Ifx_VADC_G *vadcG, IfxVadc_ChannelId channelIndex, IfxVadc_LimitCheck limitCheck);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1524  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1525  /** \brief Sets channel as priority channel with in the group.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1526   * \param vadcG pointer to VADC group registers.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1527   * \param channelIndex group channel id.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1528   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1529   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1530  IFX_INLINE void IfxVadc_setGroupPriorityChannel(Ifx_VADC_G *vadcG, IfxVadc_ChannelId channelIndex);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1531  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1532  /** \brief Sets group's lower boundary.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1533   * \param vadcG pointer to VADC group registers.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1534   * \param channelIndex group channel id.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1535   * \param lowerBoundary group lower boundary.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1536   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1537   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1538  IFX_INLINE void IfxVadc_setLowerBoundary(Ifx_VADC_G *vadcG, IfxVadc_ChannelId channelIndex, IfxVadc_BoundarySelection lowerBoundary);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1539  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1540  /** \brief Selects the refernce input.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1541   * \param vadcG pointer to VADC group registers.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1542   * \param channelIndex group channel id.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1543   * \param reference reference input.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1544   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1545   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1546  IFX_INLINE void IfxVadc_setReferenceInput(Ifx_VADC_G *vadcG, IfxVadc_ChannelId channelIndex, IfxVadc_ChannelReference reference);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1547  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1548  /** \brief Sets result event node pointer 0.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1549   * \param vadcG pointer to VADC group registers.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1550   * \param resultSrcNr channel result event service node.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1551   * \param resultRegister channel result register.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1552   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1553   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1554  IFX_INLINE void IfxVadc_setResultNodeEventPointer0(Ifx_VADC_G *vadcG, IfxVadc_SrcNr resultSrcNr, IfxVadc_ChannelResult resultRegister);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1555  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1556  /** \brief Sets result event node pointer 1.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1557   * \param vadcG pointer to VADC group registers.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1558   * \param resultSrcNr channel result event service node.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1559   * \param resultRegister channel result register.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1560   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1561   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1562  IFX_INLINE void IfxVadc_setResultNodeEventPointer1(Ifx_VADC_G *vadcG, IfxVadc_SrcNr resultSrcNr, IfxVadc_ChannelResult resultRegister);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1563  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1564  /** \brief Sets result store position.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1565   * \param vadcG pointer to VADC group registers.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1566   * \param channelIndex group channel id.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1567   * \param rightAlignedStorage result store position.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1568   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1569   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1570  IFX_INLINE void IfxVadc_setResultPosition(Ifx_VADC_G *vadcG, IfxVadc_ChannelId channelIndex, boolean rightAlignedStorage);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1571  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1572  /** \brief Sets channel synchronization request.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1573   * \param vadcG pointer to VADC group registers.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1574   * \param channelIndex group channel id.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1575   * \param synchonize whether channel synchronize or stand alone operation.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1576   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1577   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1578  IFX_INLINE void IfxVadc_setSyncRequest(Ifx_VADC_G *vadcG, IfxVadc_ChannelId channelIndex, boolean synchonize);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1579  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1580  /** \brief Sets group's upper boundary.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1581   * \param vadcG pointer to VADC group registers.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1582   * \param channelIndex group channel id.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1583   * \param upperBoundary group upper boundary.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1584   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1585   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1586  IFX_INLINE void IfxVadc_setUpperBoundary(Ifx_VADC_G *vadcG, IfxVadc_ChannelId channelIndex, IfxVadc_BoundarySelection upperBoundary);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1587  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1588  /** \brief Sets the group result register.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1589   * \param vadcG pointer to VADC group registers.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1590   * \param channelIndex group channel id.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1591   * \param resultRegister result register for group result storage.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1592   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1593   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1594  IFX_INLINE void IfxVadc_storeGroupResult(Ifx_VADC_G *vadcG, IfxVadc_ChannelId channelIndex, IfxVadc_ChannelResult resultRegister);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1595  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1596  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1597  /*-------------------------Global Function Prototypes-------------------------*/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1598  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1599  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1600  /** \brief get channel conversion timing
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1601   * \param vadc Pointer to VADC module
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1602   * \param group specifies the Group
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1603   * \param inputClass Input class used
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1604   * \param analogFrequency ADC module analog frequency fadci in Hz.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1605   * \param moduleFrequency ADC module frequency fvadc in Hz.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1606   * \param conversionMode specifies the conversion mode (Standard conversion mode)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1607   * \return Channel conversion Time in sec
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1608   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1609  IFX_EXTERN float32 IfxVadc_getChannelConversionTime(Ifx_VADC *vadc, IfxVadc_GroupId group, IfxVadc_InputClasses inputClass, float32 analogFrequency, float32 moduleFrequency, IfxVadc_ConversionType conversionMode);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1610  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1611  /** \} */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1612  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1613  /** \addtogroup IfxLld_Vadc_Std_Emux
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1614   * \{ */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1615  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1616  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1617  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1618  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1619  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1620  /** \brief get global input class resolution
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1621   * \param vadc Pointer to VADC Module space
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1622   * \param inputClassNum global input class number
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1623   * \return External channel resolution for global input class
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1624   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1625  IFX_INLINE IfxVadc_ChannelResolution IfxVadc_getEmuxGlobalResolution(Ifx_VADC *vadc, uint8 inputClassNum);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1626  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1627  /** \brief Get the sample time of ADC global class for external channel.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1628   * \param vadc pointer to VADC Module space
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1629   * \param inputClassNum Adc input class number
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1630   * \param analogFrequency ADC module analog frequency in Hz.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1631   * \return ADC input class external channel sample time in sec.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1632   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1633  IFX_INLINE float32 IfxVadc_getEmuxGlobalSampleTime(Ifx_VADC *vadc, uint8 inputClassNum, float32 analogFrequency);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1634  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1635  /** \brief get the external channel resolution
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1636   * \param vadcG Pointer to VADC group register space
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1637   * \param inputClassNum Adc input class number
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1638   * \return Adc input class External channel resolution
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1639   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1640  IFX_INLINE IfxVadc_ChannelResolution IfxVadc_getEmuxGroupResolution(Ifx_VADC_G *vadcG, uint8 inputClassNum);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1641  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1642  /** \brief Gets the ADC input class sample time of external channel.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1643   * \param vadcG Pointer to Register Group space
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1644   * \param inputClassNum ADC input class number
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1645   * \param analogFrequency ADC module analog frequency in Hz.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1646   * \return ADC input class external channel sample time in sec.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1647   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1648  IFX_INLINE float32 IfxVadc_getEmuxGroupSampleTime(Ifx_VADC_G *vadcG, uint8 inputClassNum, float32 analogFrequency);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1649  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1650  /** \brief set the external channel resolution of Global class
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1651   * \param vadc pointer to VADC Module space
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1652   * \param inputClassNum Global Input Class Number
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1653   * \param resolution External Channel resolution
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1654   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1655   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1656  IFX_INLINE void IfxVadc_setEmuxGlobalResolution(Ifx_VADC *vadc, uint8 inputClassNum, IfxVadc_ChannelResolution resolution);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1657  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1658  /** \brief Sets the sample time of ADC global class for external channel.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1659   * \param vadc Pointer to VADC Module space
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1660   * \param inputClassNum Adc input class number
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1661   * \param analogFrequency ADC analog Frequency in HZ
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1662   * \param sampleTime the requested sample time for input class in sec
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1663   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1664   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1665  IFX_INLINE void IfxVadc_setEmuxGlobalSampleTime(Ifx_VADC *vadc, uint8 inputClassNum, float32 analogFrequency, float32 sampleTime);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1666  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1667  /** \brief set the external channel resolution of ADC input class
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1668   * \param vadcG pointer to VADC Group Register space
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1669   * \param inputClassNum input class number
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1670   * \param resolution input class external channel resolution
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1671   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1672   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1673  IFX_INLINE void IfxVadc_setEmuxGroupResolution(Ifx_VADC_G *vadcG, uint8 inputClassNum, IfxVadc_ChannelResolution resolution);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1674  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1675  /** \brief Sets the ADC input class sample time for external channel.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1676   * \param vadcG Pointer to VADC Group Register Space
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1677   * \param inputClassNum input class number
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1678   * \param analogFrequency ADC analog frequency in Hz.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1679   * \param sampleTime request sample time in sec for input class.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1680   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1681   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1682  IFX_INLINE void IfxVadc_setEmuxGroupSampletime(Ifx_VADC_G *vadcG, uint8 inputClassNum, float32 analogFrequency, float32 sampleTime);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1683  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1684  /** \brief Sets the Emux Interface for a particular group
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1685   * \param vadc Pointer to VADC Module Space
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1686   * \param emuxInterface specifies the EmuxInterface
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1687   * \param group specifies the group ID
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1688   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1689   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1690  IFX_INLINE void IfxVadc_setEmuxInterfaceForGroup(Ifx_VADC *vadc, IfxVadc_EmuxInterface emuxInterface, IfxVadc_GroupId group);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1691  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1692  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1693  /*-------------------------Global Function Prototypes-------------------------*/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1694  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1695  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1696  /**
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1697   * \param vadc pointer to Module space
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1698   * \param vadcG Pointer to VADC group register space
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1699   * \param mode External Multiplexer mode
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1700   * \param channels Specifies channel Id
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1701   * \param startChannel specifies the external channel value from which conversion to be carried out
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1702   * \param code Output the channel number in binary code/gray code
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1703   * \param sampleTimeControl specifies when to use a sample time for external channel
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1704   * \param channelSelectionStyle External Multiplexer Channel Selection Style
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1705   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1706   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1707  IFX_EXTERN void IfxVadc_configExternalMultiplexerMode(Ifx_VADC *vadc, Ifx_VADC_G *vadcG, IfxVadc_ExternalMultiplexerMode mode, uint8 channels, IfxVadc_EmuxSelectValue startChannel, IfxVadc_EmuxCodingScheme code, IfxVadc_EmuxSampleTimeControl sampleTimeControl, IfxVadc_ChannelSelectionStyle channelSelectionStyle);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1708  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1709  /** \} */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1710  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1711  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1712  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1713  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1714  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1715  /** \brief get channel service request node pointer
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1716   * \param vadcG Pointer to VADC Group register space
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1717   * \return channel service request node pointer
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1718   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1719  IFX_INLINE Ifx_VADC_G_CEVNP1 IfxVadc_getChannelServiceRequestNodePointer1(Ifx_VADC_G *vadcG);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1720  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1721  /** \brief set channel event node pointer
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1722   * \param vadcG Pointer to the Vadc group register space
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1723   * \param channelSrcNr Service request
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1724   * \param channel specifies channel
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1725   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1726   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1727  IFX_INLINE void IfxVadc_setChannelEventNodePointer1(Ifx_VADC_G *vadcG, IfxVadc_SrcNr channelSrcNr, IfxVadc_ChannelId channel);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1728  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1729  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1730  /*---------------------Inline Function Implementations------------------------*/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1731  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1732  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1733  IFX_INLINE void IfxVadc_addToQueue(Ifx_VADC_G *group, IfxVadc_ChannelId channel, uint32 options)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1734  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1735      group->QINR0.U = channel | options;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1736  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1737  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1738  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1739  IFX_INLINE uint32 IfxVadc_calculateSampleTime(float32 analogFrequency, float32 sampleTime)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1740  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1741      uint32 ticks;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1742  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1743      ticks = (uint32)(sampleTime * analogFrequency) - 2;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1744  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1745      if (ticks > 31)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1746      {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1747          ticks = (ticks / 16) + 15;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1748      }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1749  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1750      ticks = __minu(ticks, 0xFFu);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1751  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1752      return ticks;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1753  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1754  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1755  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1756  IFX_INLINE void IfxVadc_clearAllResultRequests(Ifx_VADC_G *vadcG)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1757  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1758      vadcG->REFCLR.U = 0x0000FFFFu;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1759  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1760  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1761  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1762  IFX_INLINE void IfxVadc_clearChannelRequest(Ifx_VADC_G *vadcG, IfxVadc_ChannelId channelId)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1763  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1764      vadcG->CEFCLR.U = 1 << channelId;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1765  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1766  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1767  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1768  IFX_INLINE void IfxVadc_clearQueue(Ifx_VADC_G *vadcG, boolean flushQueue)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1769  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1770      vadcG->QMR0.B.FLUSH = flushQueue;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1771  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1772  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1773  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1774  IFX_INLINE void IfxVadc_configureWaitForReadMode(Ifx_VADC_G *group, uint32 resultIdx, boolean waitForRead)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1775  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1776      group->RCR[resultIdx].B.WFR = waitForRead;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1777  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1778  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1779  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1780  IFX_INLINE void IfxVadc_configureWaitForReadModeForGlobalResultRegister(Ifx_VADC *vadc, boolean waitForRead)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1781  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1782      vadc->GLOBRCR.B.WFR = waitForRead;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1783  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1784  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1785  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1786  IFX_INLINE void IfxVadc_disableModule(Ifx_VADC *vadc)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1787  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1788      uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1789      IfxScuWdt_clearCpuEndinit(passwd);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1790      vadc->CLC.B.DISR = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1791      IfxScuWdt_setCpuEndinit(passwd);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1792  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1793  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1794  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1795  IFX_INLINE void IfxVadc_disableQueueSlotExternalTrigger(Ifx_VADC_G *vadcG)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1796  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1797      vadcG->QMR0.B.ENTR = 0; /* disable external trigger */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1798  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1799  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1800  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1801  IFX_INLINE void IfxVadc_disableScanSlotExternalTrigger(Ifx_VADC_G *vadcG)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1802  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1803      vadcG->ASMR.B.ENTR = 0; /* disable external trigger */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1804  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1805  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1806  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1807  IFX_INLINE void IfxVadc_enableBackgroundScanSlotExternalTrigger(Ifx_VADC *vadc)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1808  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1809      vadc->BRSMR.B.ENTR = 1; /* enable external trigger */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1810  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1811  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1812  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1813  IFX_INLINE void IfxVadc_enableFifoMode(Ifx_VADC_G *vadcG, IfxVadc_ChannelResult resultRegister, IfxVadc_FifoMode fifoMode)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1814  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1815      vadcG->RCR[resultRegister].B.FEN = fifoMode;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1816  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1817  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1818  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1819  IFX_INLINE void IfxVadc_enableModule(Ifx_VADC *vadc)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1820  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1821      uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1822  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1823      IfxScuWdt_clearCpuEndinit(passwd);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1824      vadc->CLC.U = 0x00000000;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1825      IfxScuWdt_setCpuEndinit(passwd);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1826  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1827  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1828  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1829  IFX_INLINE void IfxVadc_enableQueueSlotExternalTrigger(Ifx_VADC_G *vadcG)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1830  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1831      vadcG->QMR0.B.ENTR = 1;     /* enable external trigger */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1832  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1833  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1834  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1835  IFX_INLINE void IfxVadc_enableScanSlotExternalTrigger(Ifx_VADC_G *vadcG)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1836  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1837      vadcG->ASMR.B.ENTR = 1; /* enable external trigger */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1838  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1839  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1840  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1841  IFX_INLINE void IfxVadc_enableServiceRequest(Ifx_VADC_G *vadcG, IfxVadc_ChannelResult resultRegister)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1842  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1843      vadcG->RCR[resultRegister].B.SRGEN = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1844  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1845  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1846  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1847  IFX_INLINE uint8 IfxVadc_getAdcCalibrationActiveState(Ifx_VADC *vadc, uint8 adcCalGroupNum)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1848  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1849      uint8 status;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.h	  1850      status = vadc->G[adcCalGroupNum].ARBCFG.B.CAL;
	extr.u	d15,d15,#4,#1
.L532:
	cmov	d0,d15,#1
	loop	a4,.L73
.L376:
	jne	d0,#0,.L72
.L763:

; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   591  }
	ret
.L365:
	
__IfxVadc_startupCalibration_function_end:
	.size	IfxVadc_startupCalibration,__IfxVadc_startupCalibration_function_end-IfxVadc_startupCalibration
.L240:
	; End of function
	
	.calls	'IfxVadc_configExternalMultiplexerMode','IfxVadc_enableAccess'
	.calls	'IfxVadc_configExternalMultiplexerMode','IfxVadc_disableAccess'
	.calls	'IfxVadc_disableAccess','IfxScuWdt_getSafetyWatchdogPassword'
	.calls	'IfxVadc_disableAccess','IfxScuWdt_clearSafetyEndinit'
	.calls	'IfxVadc_disableAccess','IfxScuWdt_setSafetyEndinit'
	.calls	'IfxVadc_disablePostCalibration','IfxVadc_enableAccess'
	.calls	'IfxVadc_disablePostCalibration','IfxVadc_disableAccess'
	.calls	'IfxVadc_enableAccess','IfxScuWdt_getSafetyWatchdogPassword'
	.calls	'IfxVadc_enableAccess','IfxScuWdt_clearSafetyEndinit'
	.calls	'IfxVadc_enableAccess','IfxScuWdt_setSafetyEndinit'
	.calls	'IfxVadc_enableGroupSync','IfxScuWdt_getCpuWatchdogPassword'
	.calls	'IfxVadc_enableGroupSync','IfxScuWdt_clearCpuEndinit'
	.calls	'IfxVadc_enableGroupSync','IfxVadc_enableAccess'
	.calls	'IfxVadc_enableGroupSync','IfxVadc_disableAccess'
	.calls	'IfxVadc_enableGroupSync','IfxScuWdt_setCpuEndinit'
	.calls	'IfxVadc_getAdcAnalogFrequency','IfxScuCcu_getSpbFrequency'
	.calls	'IfxVadc_getAdcDigitalFrequency','IfxScuCcu_getSpbFrequency'
	.calls	'IfxVadc_getAdcModuleFrequency','IfxScuCcu_getSpbFrequency'
	.calls	'IfxVadc_getChannelConversionTime','IfxVadc_isPostCalibration'
	.calls	'IfxVadc_initialiseAdcArbiterClock','IfxVadc_enableAccess'
	.calls	'IfxVadc_initialiseAdcArbiterClock','IfxVadc_disableAccess'
	.calls	'IfxVadc_initialiseAdcConverterClock','IfxVadc_enableAccess'
	.calls	'IfxVadc_initialiseAdcConverterClock','IfxVadc_disableAccess'
	.calls	'IfxVadc_initializeFAdcD','IfxScuCcu_getSpbFrequency'
	.calls	'IfxVadc_initializeFAdcD','IfxVadc_initialiseAdcArbiterClock'
	.calls	'IfxVadc_initializeFAdcI','IfxScuCcu_getSpbFrequency'
	.calls	'IfxVadc_initializeFAdcI','IfxVadc_initialiseAdcConverterClock'
	.calls	'IfxVadc_resetKernel','IfxScuWdt_getCpuWatchdogPassword'
	.calls	'IfxVadc_resetKernel','IfxScuWdt_clearCpuEndinit'
	.calls	'IfxVadc_resetKernel','IfxVadc_enableAccess'
	.calls	'IfxVadc_resetKernel','IfxScuWdt_setCpuEndinit'
	.calls	'IfxVadc_resetKernel','IfxVadc_disableAccess'
	.calls	'IfxVadc_selectPowerSupplyVoltage','IfxVadc_enableAccess'
	.calls	'IfxVadc_selectPowerSupplyVoltage','IfxVadc_disableAccess'
	.calls	'IfxVadc_startupCalibration','IfxVadc_enableAccess'
	.calls	'IfxVadc_startupCalibration','IfxVadc_disableAccess'
	.calls	'IfxVadc_disableAccess','.cocofun_2'
	.calls	'IfxVadc_disablePostCalibration','.cocofun_1'
	.calls	'IfxVadc_enableAccess','.cocofun_2'
	.calls	'IfxVadc_enableGroupSync','.cocofun_1'
	.calls	'IfxVadc_initialiseAdcArbiterClock','.cocofun_1'
	.calls	'IfxVadc_initialiseAdcConverterClock','.cocofun_1'
	.calls	'IfxVadc_resetKernel','.cocofun_1'
	.calls	'IfxVadc_selectPowerSupplyVoltage','.cocofun_1'
	.calls	'IfxVadc_startupCalibration','.cocofun_1'
	.calls	'IfxVadc_configExternalMultiplexerMode','',0
	.calls	'IfxVadc_disableAccess','',0
	.calls	'.cocofun_2','',0
	.calls	'IfxVadc_disablePostCalibration','',0
	.calls	'.cocofun_1','',0
	.calls	'IfxVadc_enableAccess','',0
	.calls	'IfxVadc_enableGroupSync','',0
	.calls	'IfxVadc_getAdcAnalogFrequency','',0
	.calls	'IfxVadc_getAdcDigitalFrequency','',0
	.calls	'IfxVadc_getAdcModuleFrequency','',0
	.calls	'IfxVadc_getBackgroundScanStatus','',0
	.calls	'IfxVadc_getChannelConversionTime','',0
	.calls	'IfxVadc_getQueueStatus','',0
	.calls	'IfxVadc_getResultBasedOnRequestSource','',0
	.calls	'IfxVadc_getScanStatus','',0
	.calls	'IfxVadc_getSrcAddress','',0
	.calls	'IfxVadc_initialiseAdcArbiterClock','',0
	.calls	'IfxVadc_initialiseAdcConverterClock','',0
	.calls	'IfxVadc_initializeFAdcD','',0
	.calls	'IfxVadc_initializeFAdcI','',0
	.calls	'IfxVadc_isPostCalibration','',0
	.calls	'IfxVadc_resetKernel','',0
	.calls	'IfxVadc_selectPowerSupplyVoltage','',0
	.calls	'IfxVadc_setArbiterPriority','',0
	.calls	'IfxVadc_setScan','',0
	.extern	IfxVadc_cfg_srcAddresses
	.extern	IfxScuWdt_clearCpuEndinit
	.extern	IfxScuWdt_clearSafetyEndinit
	.extern	IfxScuWdt_setCpuEndinit
	.extern	IfxScuWdt_setSafetyEndinit
	.extern	IfxScuWdt_getCpuWatchdogPassword
	.extern	IfxScuWdt_getSafetyWatchdogPassword
	.extern	IfxScuCcu_getSpbFrequency
	.calls	'IfxVadc_startupCalibration','',0
	.sdecl	'.debug_info',debug
	.sect	'.debug_info'
.L128:
	.word	119074
	.half	3
	.word	.L129
	.byte	4
.L127:
	.byte	1
	.byte	'..\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Vadc\\Std\\IfxVadc.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'E:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\Debug\\',0,12,1
	.word	.L130
	.byte	2,1,1,3
	.word	175
	.byte	4
	.byte	'Ifx__jump_and_link',0,3,1,61,17,1,1,5
	.byte	'fun',0,1,61,43
	.word	178
	.byte	6,0,7
	.byte	'__fract',0,4,128,1
.L288:
	.byte	7
	.byte	'float',0,4,4,8
	.byte	'Ifx__float_to_fract',0,3,1,152,2,18
	.word	223
	.byte	1,1,5
	.byte	'a',0,1,152,2,44
	.word	235
	.byte	6,0,4
	.byte	'Ifx__stopPerfCounters',0,3,1,172,2,17,1,1,6,0,7
	.byte	'unsigned long long int',0,8,7,9
	.byte	'void',0,3
	.word	347
	.byte	8
	.byte	'__ld64',0,3,2,135,1,19
	.word	321
	.byte	1,1,5
	.byte	'addr',0,2,135,1,32
	.word	353
	.byte	6,0,4
	.byte	'__st64',0,3,2,143,1,17,1,1,5
	.byte	'addr',0,2,143,1,30
	.word	353
	.byte	5
	.byte	'value',0,2,143,1,43
	.word	321
	.byte	6,0,7
	.byte	'unsigned int',0,4,7,7
	.byte	'int',0,4,5
.L265:
	.byte	7
	.byte	'unsigned char',0,1,8,10
	.byte	'_Ifx_SRC_SRCR_Bits',0,4,45,16,4,11
	.byte	'SRPN',0,1
	.word	462
	.byte	8,0,2,35,0,11
	.byte	'reserved_8',0,1
	.word	462
	.byte	2,6,2,35,1,11
	.byte	'SRE',0,1
	.word	462
	.byte	1,5,2,35,1,11
	.byte	'TOS',0,1
	.word	462
	.byte	2,3,2,35,1,11
	.byte	'reserved_13',0,1
	.word	462
	.byte	3,0,2,35,1,11
	.byte	'ECC',0,1
	.word	462
	.byte	6,2,2,35,2,11
	.byte	'reserved_22',0,1
	.word	462
	.byte	2,0,2,35,2,11
	.byte	'SRR',0,1
	.word	462
	.byte	1,7,2,35,3,11
	.byte	'CLRR',0,1
	.word	462
	.byte	1,6,2,35,3,11
	.byte	'SETR',0,1
	.word	462
	.byte	1,5,2,35,3,11
	.byte	'IOV',0,1
	.word	462
	.byte	1,4,2,35,3,11
	.byte	'IOVCLR',0,1
	.word	462
	.byte	1,3,2,35,3,11
	.byte	'SWS',0,1
	.word	462
	.byte	1,2,2,35,3,11
	.byte	'SWSCLR',0,1
	.word	462
	.byte	1,1,2,35,3,11
	.byte	'reserved_31',0,1
	.word	462
	.byte	1,0,2,35,3,0,12,4,70,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	479
	.byte	4,2,35,0,0,14
	.word	769
.L329:
	.byte	3
	.word	808
	.byte	4
	.byte	'IfxSrc_clearRequest',0,3,3,250,1,17,1,1,5
	.byte	'src',0,3,250,1,60
	.word	813
	.byte	6,0,7
	.byte	'unsigned int',0,4,7,10
	.byte	'_Ifx_SCU_WDTCPU_CON0_Bits',0,6,241,8,16,4,11
	.byte	'ENDINIT',0,4
	.word	861
	.byte	1,31,2,35,0,11
	.byte	'LCK',0,4
	.word	861
	.byte	1,30,2,35,0,11
	.byte	'PW',0,4
	.word	861
	.byte	14,16,2,35,0,11
	.byte	'REL',0,4
	.word	861
	.byte	16,0,2,35,0,0,12,6,247,14,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	877
	.byte	4,2,35,0,0
.L306:
	.byte	7
	.byte	'unsigned short int',0,2,7,10
	.byte	'_Ifx_SCU_WDTCPU_CON1_Bits',0,6,250,8,16,4,11
	.byte	'reserved_0',0,1
	.word	462
	.byte	2,6,2,35,0,11
	.byte	'IR0',0,1
	.word	462
	.byte	1,5,2,35,0,11
	.byte	'DR',0,1
	.word	462
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,1
	.word	462
	.byte	1,3,2,35,0,11
	.byte	'IR1',0,1
	.word	462
	.byte	1,2,2,35,0,11
	.byte	'UR',0,1
	.word	462
	.byte	1,1,2,35,0,11
	.byte	'PAR',0,1
	.word	462
	.byte	1,0,2,35,0,11
	.byte	'TCR',0,1
	.word	462
	.byte	1,7,2,35,1,11
	.byte	'TCTR',0,1
	.word	462
	.byte	7,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	1013
	.byte	16,0,2,35,2,0,12,6,255,14,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	1035
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_SCU_WDTCPU_SR_Bits',0,6,137,9,16,4,11
	.byte	'AE',0,1
	.word	462
	.byte	1,7,2,35,0,11
	.byte	'OE',0,1
	.word	462
	.byte	1,6,2,35,0,11
	.byte	'IS0',0,1
	.word	462
	.byte	1,5,2,35,0,11
	.byte	'DS',0,1
	.word	462
	.byte	1,4,2,35,0,11
	.byte	'TO',0,1
	.word	462
	.byte	1,3,2,35,0,11
	.byte	'IS1',0,1
	.word	462
	.byte	1,2,2,35,0,11
	.byte	'US',0,1
	.word	462
	.byte	1,1,2,35,0,11
	.byte	'PAS',0,1
	.word	462
	.byte	1,0,2,35,0,11
	.byte	'TCS',0,1
	.word	462
	.byte	1,7,2,35,1,11
	.byte	'TCT',0,1
	.word	462
	.byte	7,0,2,35,1,11
	.byte	'TIM',0,2
	.word	1013
	.byte	16,0,2,35,2,0,12,6,135,15,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	1279
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_SCU_WDTCPU',0,6,175,15,25,12,13
	.byte	'CON0',0
	.word	973
	.byte	4,2,35,0,13
	.byte	'CON1',0
	.word	1239
	.byte	4,2,35,4,13
	.byte	'SR',0
	.word	1470
	.byte	4,2,35,8,0,14
	.word	1510
	.byte	3
	.word	1573
	.byte	4
	.byte	'IfxScuWdt_clearCpuEndinitInline',0,3,5,181,3,17,1,1,5
	.byte	'watchdog',0,5,181,3,65
	.word	1578
	.byte	5
	.byte	'password',0,5,181,3,82
	.word	1013
	.byte	6,0,4
	.byte	'IfxScuWdt_setCpuEndinitInline',0,3,5,140,4,17,1,1,5
	.byte	'watchdog',0,5,140,4,63
	.word	1578
	.byte	5
	.byte	'password',0,5,140,4,80
	.word	1013
	.byte	6,0,8
	.byte	'IfxScuWdt_getCpuWatchdogPasswordInline',0,3,5,227,3,19
	.word	1013
	.byte	1,1,5
	.byte	'watchdog',0,5,227,3,74
	.word	1578
	.byte	6,0,10
	.byte	'_Ifx_P_OUT_Bits',0,8,143,3,16,4,11
	.byte	'P0',0,1
	.word	462
	.byte	1,7,2,35,0,11
	.byte	'P1',0,1
	.word	462
	.byte	1,6,2,35,0,11
	.byte	'P2',0,1
	.word	462
	.byte	1,5,2,35,0,11
	.byte	'P3',0,1
	.word	462
	.byte	1,4,2,35,0,11
	.byte	'P4',0,1
	.word	462
	.byte	1,3,2,35,0,11
	.byte	'P5',0,1
	.word	462
	.byte	1,2,2,35,0,11
	.byte	'P6',0,1
	.word	462
	.byte	1,1,2,35,0,11
	.byte	'P7',0,1
	.word	462
	.byte	1,0,2,35,0,11
	.byte	'P8',0,1
	.word	462
	.byte	1,7,2,35,1,11
	.byte	'P9',0,1
	.word	462
	.byte	1,6,2,35,1,11
	.byte	'P10',0,1
	.word	462
	.byte	1,5,2,35,1,11
	.byte	'P11',0,1
	.word	462
	.byte	1,4,2,35,1,11
	.byte	'P12',0,1
	.word	462
	.byte	1,3,2,35,1,11
	.byte	'P13',0,1
	.word	462
	.byte	1,2,2,35,1,11
	.byte	'P14',0,1
	.word	462
	.byte	1,1,2,35,1,11
	.byte	'P15',0,1
	.word	462
	.byte	1,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	1013
	.byte	16,0,2,35,2,0,12,8,181,5,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	1808
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_OMR_Bits',0,8,169,2,16,4,11
	.byte	'PS0',0,1
	.word	462
	.byte	1,7,2,35,0,11
	.byte	'PS1',0,1
	.word	462
	.byte	1,6,2,35,0,11
	.byte	'PS2',0,1
	.word	462
	.byte	1,5,2,35,0,11
	.byte	'PS3',0,1
	.word	462
	.byte	1,4,2,35,0,11
	.byte	'PS4',0,1
	.word	462
	.byte	1,3,2,35,0,11
	.byte	'PS5',0,1
	.word	462
	.byte	1,2,2,35,0,11
	.byte	'PS6',0,1
	.word	462
	.byte	1,1,2,35,0,11
	.byte	'PS7',0,1
	.word	462
	.byte	1,0,2,35,0,11
	.byte	'PS8',0,1
	.word	462
	.byte	1,7,2,35,1,11
	.byte	'PS9',0,1
	.word	462
	.byte	1,6,2,35,1,11
	.byte	'PS10',0,1
	.word	462
	.byte	1,5,2,35,1,11
	.byte	'PS11',0,1
	.word	462
	.byte	1,4,2,35,1,11
	.byte	'PS12',0,1
	.word	462
	.byte	1,3,2,35,1,11
	.byte	'PS13',0,1
	.word	462
	.byte	1,2,2,35,1,11
	.byte	'PS14',0,1
	.word	462
	.byte	1,1,2,35,1,11
	.byte	'PS15',0,1
	.word	462
	.byte	1,0,2,35,1,11
	.byte	'PCL0',0,1
	.word	462
	.byte	1,7,2,35,2,11
	.byte	'PCL1',0,1
	.word	462
	.byte	1,6,2,35,2,11
	.byte	'PCL2',0,1
	.word	462
	.byte	1,5,2,35,2,11
	.byte	'PCL3',0,1
	.word	462
	.byte	1,4,2,35,2,11
	.byte	'PCL4',0,1
	.word	462
	.byte	1,3,2,35,2,11
	.byte	'PCL5',0,1
	.word	462
	.byte	1,2,2,35,2,11
	.byte	'PCL6',0,1
	.word	462
	.byte	1,1,2,35,2,11
	.byte	'PCL7',0,1
	.word	462
	.byte	1,0,2,35,2,11
	.byte	'PCL8',0,1
	.word	462
	.byte	1,7,2,35,3,11
	.byte	'PCL9',0,1
	.word	462
	.byte	1,6,2,35,3,11
	.byte	'PCL10',0,1
	.word	462
	.byte	1,5,2,35,3,11
	.byte	'PCL11',0,1
	.word	462
	.byte	1,4,2,35,3,11
	.byte	'PCL12',0,1
	.word	462
	.byte	1,3,2,35,3,11
	.byte	'PCL13',0,1
	.word	462
	.byte	1,2,2,35,3,11
	.byte	'PCL14',0,1
	.word	462
	.byte	1,1,2,35,3,11
	.byte	'PCL15',0,1
	.word	462
	.byte	1,0,2,35,3,0,12,8,133,5,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	2124
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_ID_Bits',0,8,110,16,4,11
	.byte	'MODREV',0,1
	.word	462
	.byte	8,0,2,35,0,11
	.byte	'MODTYPE',0,1
	.word	462
	.byte	8,0,2,35,1,11
	.byte	'MODNUMBER',0,2
	.word	1013
	.byte	16,0,2,35,2,0,12,8,148,4,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	2695
	.byte	4,2,35,0,0,15,4
	.word	462
	.byte	16,3,0,10
	.byte	'_Ifx_P_IOCR0_Bits',0,8,140,1,16,4,11
	.byte	'reserved_0',0,1
	.word	462
	.byte	3,5,2,35,0,11
	.byte	'PC0',0,1
	.word	462
	.byte	5,0,2,35,0,11
	.byte	'reserved_8',0,1
	.word	462
	.byte	3,5,2,35,1,11
	.byte	'PC1',0,1
	.word	462
	.byte	5,0,2,35,1,11
	.byte	'reserved_16',0,1
	.word	462
	.byte	3,5,2,35,2,11
	.byte	'PC2',0,1
	.word	462
	.byte	5,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	462
	.byte	3,5,2,35,3,11
	.byte	'PC3',0,1
	.word	462
	.byte	5,0,2,35,3,0,12,8,164,4,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	2823
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_IOCR4_Bits',0,8,166,1,16,4,11
	.byte	'reserved_0',0,1
	.word	462
	.byte	3,5,2,35,0,11
	.byte	'PC4',0,1
	.word	462
	.byte	5,0,2,35,0,11
	.byte	'reserved_8',0,1
	.word	462
	.byte	3,5,2,35,1,11
	.byte	'PC5',0,1
	.word	462
	.byte	5,0,2,35,1,11
	.byte	'reserved_16',0,1
	.word	462
	.byte	3,5,2,35,2,11
	.byte	'PC6',0,1
	.word	462
	.byte	5,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	462
	.byte	3,5,2,35,3,11
	.byte	'PC7',0,1
	.word	462
	.byte	5,0,2,35,3,0,12,8,180,4,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	3038
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_IOCR8_Bits',0,8,179,1,16,4,11
	.byte	'reserved_0',0,1
	.word	462
	.byte	3,5,2,35,0,11
	.byte	'PC8',0,1
	.word	462
	.byte	5,0,2,35,0,11
	.byte	'reserved_8',0,1
	.word	462
	.byte	3,5,2,35,1,11
	.byte	'PC9',0,1
	.word	462
	.byte	5,0,2,35,1,11
	.byte	'reserved_16',0,1
	.word	462
	.byte	3,5,2,35,2,11
	.byte	'PC10',0,1
	.word	462
	.byte	5,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	462
	.byte	3,5,2,35,3,11
	.byte	'PC11',0,1
	.word	462
	.byte	5,0,2,35,3,0,12,8,188,4,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	3253
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_IOCR12_Bits',0,8,153,1,16,4,11
	.byte	'reserved_0',0,1
	.word	462
	.byte	3,5,2,35,0,11
	.byte	'PC12',0,1
	.word	462
	.byte	5,0,2,35,0,11
	.byte	'reserved_8',0,1
	.word	462
	.byte	3,5,2,35,1,11
	.byte	'PC13',0,1
	.word	462
	.byte	5,0,2,35,1,11
	.byte	'reserved_16',0,1
	.word	462
	.byte	3,5,2,35,2,11
	.byte	'PC14',0,1
	.word	462
	.byte	5,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	462
	.byte	3,5,2,35,3,11
	.byte	'PC15',0,1
	.word	462
	.byte	5,0,2,35,3,0,12,8,172,4,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	3470
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_IN_Bits',0,8,118,16,4,11
	.byte	'P0',0,1
	.word	462
	.byte	1,7,2,35,0,11
	.byte	'P1',0,1
	.word	462
	.byte	1,6,2,35,0,11
	.byte	'P2',0,1
	.word	462
	.byte	1,5,2,35,0,11
	.byte	'P3',0,1
	.word	462
	.byte	1,4,2,35,0,11
	.byte	'P4',0,1
	.word	462
	.byte	1,3,2,35,0,11
	.byte	'P5',0,1
	.word	462
	.byte	1,2,2,35,0,11
	.byte	'P6',0,1
	.word	462
	.byte	1,1,2,35,0,11
	.byte	'P7',0,1
	.word	462
	.byte	1,0,2,35,0,11
	.byte	'P8',0,1
	.word	462
	.byte	1,7,2,35,1,11
	.byte	'P9',0,1
	.word	462
	.byte	1,6,2,35,1,11
	.byte	'P10',0,1
	.word	462
	.byte	1,5,2,35,1,11
	.byte	'P11',0,1
	.word	462
	.byte	1,4,2,35,1,11
	.byte	'P12',0,1
	.word	462
	.byte	1,3,2,35,1,11
	.byte	'P13',0,1
	.word	462
	.byte	1,2,2,35,1,11
	.byte	'P14',0,1
	.word	462
	.byte	1,1,2,35,1,11
	.byte	'P15',0,1
	.word	462
	.byte	1,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	1013
	.byte	16,0,2,35,2,0,12,8,156,4,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	3690
	.byte	4,2,35,0,0,15,24
	.word	462
	.byte	16,23,0,10
	.byte	'_Ifx_P_PDR0_Bits',0,8,205,3,16,4,11
	.byte	'PD0',0,1
	.word	462
	.byte	3,5,2,35,0,11
	.byte	'PL0',0,1
	.word	462
	.byte	1,4,2,35,0,11
	.byte	'PD1',0,1
	.word	462
	.byte	3,1,2,35,0,11
	.byte	'PL1',0,1
	.word	462
	.byte	1,0,2,35,0,11
	.byte	'PD2',0,1
	.word	462
	.byte	3,5,2,35,1,11
	.byte	'PL2',0,1
	.word	462
	.byte	1,4,2,35,1,11
	.byte	'PD3',0,1
	.word	462
	.byte	3,1,2,35,1,11
	.byte	'PL3',0,1
	.word	462
	.byte	1,0,2,35,1,11
	.byte	'PD4',0,1
	.word	462
	.byte	3,5,2,35,2,11
	.byte	'PL4',0,1
	.word	462
	.byte	1,4,2,35,2,11
	.byte	'PD5',0,1
	.word	462
	.byte	3,1,2,35,2,11
	.byte	'PL5',0,1
	.word	462
	.byte	1,0,2,35,2,11
	.byte	'PD6',0,1
	.word	462
	.byte	3,5,2,35,3,11
	.byte	'PL6',0,1
	.word	462
	.byte	1,4,2,35,3,11
	.byte	'PD7',0,1
	.word	462
	.byte	3,1,2,35,3,11
	.byte	'PL7',0,1
	.word	462
	.byte	1,0,2,35,3,0,12,8,205,5,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	4013
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_PDR1_Bits',0,8,226,3,16,4,11
	.byte	'PD8',0,1
	.word	462
	.byte	3,5,2,35,0,11
	.byte	'PL8',0,1
	.word	462
	.byte	1,4,2,35,0,11
	.byte	'PD9',0,1
	.word	462
	.byte	3,1,2,35,0,11
	.byte	'PL9',0,1
	.word	462
	.byte	1,0,2,35,0,11
	.byte	'PD10',0,1
	.word	462
	.byte	3,5,2,35,1,11
	.byte	'PL10',0,1
	.word	462
	.byte	1,4,2,35,1,11
	.byte	'PD11',0,1
	.word	462
	.byte	3,1,2,35,1,11
	.byte	'PL11',0,1
	.word	462
	.byte	1,0,2,35,1,11
	.byte	'PD12',0,1
	.word	462
	.byte	3,5,2,35,2,11
	.byte	'PL12',0,1
	.word	462
	.byte	1,4,2,35,2,11
	.byte	'PD13',0,1
	.word	462
	.byte	3,1,2,35,2,11
	.byte	'PL13',0,1
	.word	462
	.byte	1,0,2,35,2,11
	.byte	'PD14',0,1
	.word	462
	.byte	3,5,2,35,3,11
	.byte	'PL14',0,1
	.word	462
	.byte	1,4,2,35,3,11
	.byte	'PD15',0,1
	.word	462
	.byte	3,1,2,35,3,11
	.byte	'PL15',0,1
	.word	462
	.byte	1,0,2,35,3,0,12,8,213,5,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	4317
	.byte	4,2,35,0,0,15,8
	.word	462
	.byte	16,7,0,10
	.byte	'_Ifx_P_ESR_Bits',0,8,88,16,4,11
	.byte	'EN0',0,1
	.word	462
	.byte	1,7,2,35,0,11
	.byte	'EN1',0,1
	.word	462
	.byte	1,6,2,35,0,11
	.byte	'EN2',0,1
	.word	462
	.byte	1,5,2,35,0,11
	.byte	'EN3',0,1
	.word	462
	.byte	1,4,2,35,0,11
	.byte	'EN4',0,1
	.word	462
	.byte	1,3,2,35,0,11
	.byte	'EN5',0,1
	.word	462
	.byte	1,2,2,35,0,11
	.byte	'EN6',0,1
	.word	462
	.byte	1,1,2,35,0,11
	.byte	'EN7',0,1
	.word	462
	.byte	1,0,2,35,0,11
	.byte	'EN8',0,1
	.word	462
	.byte	1,7,2,35,1,11
	.byte	'EN9',0,1
	.word	462
	.byte	1,6,2,35,1,11
	.byte	'EN10',0,1
	.word	462
	.byte	1,5,2,35,1,11
	.byte	'EN11',0,1
	.word	462
	.byte	1,4,2,35,1,11
	.byte	'EN12',0,1
	.word	462
	.byte	1,3,2,35,1,11
	.byte	'EN13',0,1
	.word	462
	.byte	1,2,2,35,1,11
	.byte	'EN14',0,1
	.word	462
	.byte	1,1,2,35,1,11
	.byte	'EN15',0,1
	.word	462
	.byte	1,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	1013
	.byte	16,0,2,35,2,0,12,8,140,4,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	4642
	.byte	4,2,35,0,0,15,12
	.word	462
	.byte	16,11,0,10
	.byte	'_Ifx_P_PDISC_Bits',0,8,183,3,16,4,11
	.byte	'PDIS0',0,1
	.word	462
	.byte	1,7,2,35,0,11
	.byte	'PDIS1',0,1
	.word	462
	.byte	1,6,2,35,0,11
	.byte	'PDIS2',0,1
	.word	462
	.byte	1,5,2,35,0,11
	.byte	'PDIS3',0,1
	.word	462
	.byte	1,4,2,35,0,11
	.byte	'PDIS4',0,1
	.word	462
	.byte	1,3,2,35,0,11
	.byte	'PDIS5',0,1
	.word	462
	.byte	1,2,2,35,0,11
	.byte	'PDIS6',0,1
	.word	462
	.byte	1,1,2,35,0,11
	.byte	'PDIS7',0,1
	.word	462
	.byte	1,0,2,35,0,11
	.byte	'PDIS8',0,1
	.word	462
	.byte	1,7,2,35,1,11
	.byte	'PDIS9',0,1
	.word	462
	.byte	1,6,2,35,1,11
	.byte	'PDIS10',0,1
	.word	462
	.byte	1,5,2,35,1,11
	.byte	'PDIS11',0,1
	.word	462
	.byte	1,4,2,35,1,11
	.byte	'PDIS12',0,1
	.word	462
	.byte	1,3,2,35,1,11
	.byte	'PDIS13',0,1
	.word	462
	.byte	1,2,2,35,1,11
	.byte	'PDIS14',0,1
	.word	462
	.byte	1,1,2,35,1,11
	.byte	'PDIS15',0,1
	.word	462
	.byte	1,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	1013
	.byte	16,0,2,35,2,0,12,8,197,5,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	4982
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_PCSR_Bits',0,8,165,3,16,4,11
	.byte	'SEL0',0,1
	.word	462
	.byte	1,7,2,35,0,11
	.byte	'SEL1',0,1
	.word	462
	.byte	1,6,2,35,0,11
	.byte	'SEL2',0,1
	.word	462
	.byte	1,5,2,35,0,11
	.byte	'SEL3',0,1
	.word	462
	.byte	1,4,2,35,0,11
	.byte	'SEL4',0,1
	.word	462
	.byte	1,3,2,35,0,11
	.byte	'SEL5',0,1
	.word	462
	.byte	1,2,2,35,0,11
	.byte	'SEL6',0,1
	.word	462
	.byte	1,1,2,35,0,11
	.byte	'SEL7',0,1
	.word	462
	.byte	1,0,2,35,0,11
	.byte	'reserved_8',0,1
	.word	462
	.byte	2,6,2,35,1,11
	.byte	'SEL10',0,1
	.word	462
	.byte	1,5,2,35,1,11
	.byte	'SEL11',0,1
	.word	462
	.byte	1,4,2,35,1,11
	.byte	'reserved_12',0,4
	.word	439
	.byte	19,1,2,35,0,11
	.byte	'LCK',0,1
	.word	462
	.byte	1,0,2,35,3,0,12,8,189,5,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	5348
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_OMSR0_Bits',0,8,206,2,16,4,11
	.byte	'PS0',0,1
	.word	462
	.byte	1,7,2,35,0,11
	.byte	'PS1',0,1
	.word	462
	.byte	1,6,2,35,0,11
	.byte	'PS2',0,1
	.word	462
	.byte	1,5,2,35,0,11
	.byte	'PS3',0,1
	.word	462
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,4
	.word	439
	.byte	28,0,2,35,0,0,12,8,149,5,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	5634
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_OMSR4_Bits',0,8,227,2,16,4,11
	.byte	'reserved_0',0,1
	.word	462
	.byte	4,4,2,35,0,11
	.byte	'PS4',0,1
	.word	462
	.byte	1,3,2,35,0,11
	.byte	'PS5',0,1
	.word	462
	.byte	1,2,2,35,0,11
	.byte	'PS6',0,1
	.word	462
	.byte	1,1,2,35,0,11
	.byte	'PS7',0,1
	.word	462
	.byte	1,0,2,35,0,11
	.byte	'reserved_8',0,4
	.word	439
	.byte	24,0,2,35,0,0,12,8,165,5,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	5781
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_OMSR8_Bits',0,8,238,2,16,4,11
	.byte	'reserved_0',0,1
	.word	462
	.byte	8,0,2,35,0,11
	.byte	'PS8',0,1
	.word	462
	.byte	1,7,2,35,1,11
	.byte	'PS9',0,1
	.word	462
	.byte	1,6,2,35,1,11
	.byte	'PS10',0,1
	.word	462
	.byte	1,5,2,35,1,11
	.byte	'PS11',0,1
	.word	462
	.byte	1,4,2,35,1,11
	.byte	'reserved_12',0,4
	.word	439
	.byte	20,0,2,35,0,0,12,8,173,5,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	5950
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_OMSR12_Bits',0,8,216,2,16,4,11
	.byte	'reserved_0',0,2
	.word	1013
	.byte	12,4,2,35,0,11
	.byte	'PS12',0,1
	.word	462
	.byte	1,3,2,35,1,11
	.byte	'PS13',0,1
	.word	462
	.byte	1,2,2,35,1,11
	.byte	'PS14',0,1
	.word	462
	.byte	1,1,2,35,1,11
	.byte	'PS15',0,1
	.word	462
	.byte	1,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	1013
	.byte	16,0,2,35,2,0,12,8,157,5,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	6122
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_OMCR0_Bits',0,8,232,1,16,4,11
	.byte	'reserved_0',0,2
	.word	1013
	.byte	16,0,2,35,0,11
	.byte	'PCL0',0,1
	.word	462
	.byte	1,7,2,35,2,11
	.byte	'PCL1',0,1
	.word	462
	.byte	1,6,2,35,2,11
	.byte	'PCL2',0,1
	.word	462
	.byte	1,5,2,35,2,11
	.byte	'PCL3',0,1
	.word	462
	.byte	1,4,2,35,2,11
	.byte	'reserved_20',0,2
	.word	1013
	.byte	12,0,2,35,2,0,12,8,229,4,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	6297
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_OMCR4_Bits',0,8,253,1,16,4,11
	.byte	'reserved_0',0,4
	.word	439
	.byte	20,12,2,35,0,11
	.byte	'PCL4',0,1
	.word	462
	.byte	1,3,2,35,2,11
	.byte	'PCL5',0,1
	.word	462
	.byte	1,2,2,35,2,11
	.byte	'PCL6',0,1
	.word	462
	.byte	1,1,2,35,2,11
	.byte	'PCL7',0,1
	.word	462
	.byte	1,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	462
	.byte	8,0,2,35,3,0,12,8,245,4,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	6471
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_OMCR8_Bits',0,8,136,2,16,4,11
	.byte	'reserved_0',0,4
	.word	439
	.byte	24,8,2,35,0,11
	.byte	'PCL8',0,1
	.word	462
	.byte	1,7,2,35,3,11
	.byte	'PCL9',0,1
	.word	462
	.byte	1,6,2,35,3,11
	.byte	'PCL10',0,1
	.word	462
	.byte	1,5,2,35,3,11
	.byte	'PCL11',0,1
	.word	462
	.byte	1,4,2,35,3,11
	.byte	'reserved_28',0,1
	.word	462
	.byte	4,0,2,35,3,0,12,8,253,4,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	6645
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_OMCR12_Bits',0,8,243,1,16,4,11
	.byte	'reserved_0',0,4
	.word	439
	.byte	28,4,2,35,0,11
	.byte	'PCL12',0,1
	.word	462
	.byte	1,3,2,35,3,11
	.byte	'PCL13',0,1
	.word	462
	.byte	1,2,2,35,3,11
	.byte	'PCL14',0,1
	.word	462
	.byte	1,1,2,35,3,11
	.byte	'PCL15',0,1
	.word	462
	.byte	1,0,2,35,3,0,12,8,237,4,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	6821
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_OMSR_Bits',0,8,249,2,16,4,11
	.byte	'PS0',0,1
	.word	462
	.byte	1,7,2,35,0,11
	.byte	'PS1',0,1
	.word	462
	.byte	1,6,2,35,0,11
	.byte	'PS2',0,1
	.word	462
	.byte	1,5,2,35,0,11
	.byte	'PS3',0,1
	.word	462
	.byte	1,4,2,35,0,11
	.byte	'PS4',0,1
	.word	462
	.byte	1,3,2,35,0,11
	.byte	'PS5',0,1
	.word	462
	.byte	1,2,2,35,0,11
	.byte	'PS6',0,1
	.word	462
	.byte	1,1,2,35,0,11
	.byte	'PS7',0,1
	.word	462
	.byte	1,0,2,35,0,11
	.byte	'PS8',0,1
	.word	462
	.byte	1,7,2,35,1,11
	.byte	'PS9',0,1
	.word	462
	.byte	1,6,2,35,1,11
	.byte	'PS10',0,1
	.word	462
	.byte	1,5,2,35,1,11
	.byte	'PS11',0,1
	.word	462
	.byte	1,4,2,35,1,11
	.byte	'PS12',0,1
	.word	462
	.byte	1,3,2,35,1,11
	.byte	'PS13',0,1
	.word	462
	.byte	1,2,2,35,1,11
	.byte	'PS14',0,1
	.word	462
	.byte	1,1,2,35,1,11
	.byte	'PS15',0,1
	.word	462
	.byte	1,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	1013
	.byte	16,0,2,35,2,0,12,8,141,5,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	6977
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_OMCR_Bits',0,8,147,2,16,4,11
	.byte	'reserved_0',0,2
	.word	1013
	.byte	16,0,2,35,0,11
	.byte	'PCL0',0,1
	.word	462
	.byte	1,7,2,35,2,11
	.byte	'PCL1',0,1
	.word	462
	.byte	1,6,2,35,2,11
	.byte	'PCL2',0,1
	.word	462
	.byte	1,5,2,35,2,11
	.byte	'PCL3',0,1
	.word	462
	.byte	1,4,2,35,2,11
	.byte	'PCL4',0,1
	.word	462
	.byte	1,3,2,35,2,11
	.byte	'PCL5',0,1
	.word	462
	.byte	1,2,2,35,2,11
	.byte	'PCL6',0,1
	.word	462
	.byte	1,1,2,35,2,11
	.byte	'PCL7',0,1
	.word	462
	.byte	1,0,2,35,2,11
	.byte	'PCL8',0,1
	.word	462
	.byte	1,7,2,35,3,11
	.byte	'PCL9',0,1
	.word	462
	.byte	1,6,2,35,3,11
	.byte	'PCL10',0,1
	.word	462
	.byte	1,5,2,35,3,11
	.byte	'PCL11',0,1
	.word	462
	.byte	1,4,2,35,3,11
	.byte	'PCL12',0,1
	.word	462
	.byte	1,3,2,35,3,11
	.byte	'PCL13',0,1
	.word	462
	.byte	1,2,2,35,3,11
	.byte	'PCL14',0,1
	.word	462
	.byte	1,1,2,35,3,11
	.byte	'PCL15',0,1
	.word	462
	.byte	1,0,2,35,3,0,12,8,221,4,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	7310
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_LPCR0_Bits',0,8,192,1,16,4,11
	.byte	'reserved_0',0,1
	.word	462
	.byte	1,7,2,35,0,11
	.byte	'PS1',0,1
	.word	462
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,4
	.word	439
	.byte	30,0,2,35,0,0,12,8,196,4,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	7658
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_LPCR1_Bits',0,8,200,1,16,4,11
	.byte	'reserved_0',0,1
	.word	462
	.byte	1,7,2,35,0,11
	.byte	'PS1',0,1
	.word	462
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,4
	.word	439
	.byte	30,0,2,35,0,0,10
	.byte	'_Ifx_P_LPCR1_P21_Bits',0,8,208,1,16,4,11
	.byte	'RDIS_CTRL',0,1
	.word	462
	.byte	1,7,2,35,0,11
	.byte	'RX_DIS',0,1
	.word	462
	.byte	1,6,2,35,0,11
	.byte	'TERM',0,1
	.word	462
	.byte	1,5,2,35,0,11
	.byte	'LRXTERM',0,1
	.word	462
	.byte	5,0,2,35,0,11
	.byte	'reserved_8',0,4
	.word	439
	.byte	24,0,2,35,0,0,12,8,204,4,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	7782
	.byte	4,2,35,0,13
	.byte	'B_P21',0
	.word	7866
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_LPCR2_Bits',0,8,218,1,16,4,11
	.byte	'reserved_0',0,1
	.word	462
	.byte	8,0,2,35,0,11
	.byte	'LVDSR',0,1
	.word	462
	.byte	1,7,2,35,1,11
	.byte	'LVDSRL',0,1
	.word	462
	.byte	1,6,2,35,1,11
	.byte	'reserved_10',0,1
	.word	462
	.byte	2,4,2,35,1,11
	.byte	'TDIS_CTRL',0,1
	.word	462
	.byte	1,3,2,35,1,11
	.byte	'TX_DIS',0,1
	.word	462
	.byte	1,2,2,35,1,11
	.byte	'TX_PD',0,1
	.word	462
	.byte	1,1,2,35,1,11
	.byte	'TX_PWDPD',0,1
	.word	462
	.byte	1,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	1013
	.byte	16,0,2,35,2,0,12,8,213,4,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	8046
	.byte	4,2,35,0,0,15,76
	.word	462
	.byte	16,75,0,10
	.byte	'_Ifx_P_ACCEN1_Bits',0,8,82,16,4,11
	.byte	'reserved_0',0,4
	.word	439
	.byte	32,0,2,35,0,0,12,8,132,4,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	8299
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_ACCEN0_Bits',0,8,45,16,4,11
	.byte	'EN0',0,1
	.word	462
	.byte	1,7,2,35,0,11
	.byte	'EN1',0,1
	.word	462
	.byte	1,6,2,35,0,11
	.byte	'EN2',0,1
	.word	462
	.byte	1,5,2,35,0,11
	.byte	'EN3',0,1
	.word	462
	.byte	1,4,2,35,0,11
	.byte	'EN4',0,1
	.word	462
	.byte	1,3,2,35,0,11
	.byte	'EN5',0,1
	.word	462
	.byte	1,2,2,35,0,11
	.byte	'EN6',0,1
	.word	462
	.byte	1,1,2,35,0,11
	.byte	'EN7',0,1
	.word	462
	.byte	1,0,2,35,0,11
	.byte	'EN8',0,1
	.word	462
	.byte	1,7,2,35,1,11
	.byte	'EN9',0,1
	.word	462
	.byte	1,6,2,35,1,11
	.byte	'EN10',0,1
	.word	462
	.byte	1,5,2,35,1,11
	.byte	'EN11',0,1
	.word	462
	.byte	1,4,2,35,1,11
	.byte	'EN12',0,1
	.word	462
	.byte	1,3,2,35,1,11
	.byte	'EN13',0,1
	.word	462
	.byte	1,2,2,35,1,11
	.byte	'EN14',0,1
	.word	462
	.byte	1,1,2,35,1,11
	.byte	'EN15',0,1
	.word	462
	.byte	1,0,2,35,1,11
	.byte	'EN16',0,1
	.word	462
	.byte	1,7,2,35,2,11
	.byte	'EN17',0,1
	.word	462
	.byte	1,6,2,35,2,11
	.byte	'EN18',0,1
	.word	462
	.byte	1,5,2,35,2,11
	.byte	'EN19',0,1
	.word	462
	.byte	1,4,2,35,2,11
	.byte	'EN20',0,1
	.word	462
	.byte	1,3,2,35,2,11
	.byte	'EN21',0,1
	.word	462
	.byte	1,2,2,35,2,11
	.byte	'EN22',0,1
	.word	462
	.byte	1,1,2,35,2,11
	.byte	'EN23',0,1
	.word	462
	.byte	1,0,2,35,2,11
	.byte	'EN24',0,1
	.word	462
	.byte	1,7,2,35,3,11
	.byte	'EN25',0,1
	.word	462
	.byte	1,6,2,35,3,11
	.byte	'EN26',0,1
	.word	462
	.byte	1,5,2,35,3,11
	.byte	'EN27',0,1
	.word	462
	.byte	1,4,2,35,3,11
	.byte	'EN28',0,1
	.word	462
	.byte	1,3,2,35,3,11
	.byte	'EN29',0,1
	.word	462
	.byte	1,2,2,35,3,11
	.byte	'EN30',0,1
	.word	462
	.byte	1,1,2,35,3,11
	.byte	'EN31',0,1
	.word	462
	.byte	1,0,2,35,3,0,12,8,252,3,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	8386
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P',0,8,229,5,25,128,2,13
	.byte	'OUT',0
	.word	2084
	.byte	4,2,35,0,13
	.byte	'OMR',0
	.word	2655
	.byte	4,2,35,4,13
	.byte	'ID',0
	.word	2774
	.byte	4,2,35,8,13
	.byte	'reserved_C',0
	.word	2814
	.byte	4,2,35,12,13
	.byte	'IOCR0',0
	.word	2998
	.byte	4,2,35,16,13
	.byte	'IOCR4',0
	.word	3213
	.byte	4,2,35,20,13
	.byte	'IOCR8',0
	.word	3430
	.byte	4,2,35,24,13
	.byte	'IOCR12',0
	.word	3650
	.byte	4,2,35,28,13
	.byte	'reserved_20',0
	.word	2814
	.byte	4,2,35,32,13
	.byte	'IN',0
	.word	3964
	.byte	4,2,35,36,13
	.byte	'reserved_28',0
	.word	4004
	.byte	24,2,35,40,13
	.byte	'PDR0',0
	.word	4277
	.byte	4,2,35,64,13
	.byte	'PDR1',0
	.word	4593
	.byte	4,2,35,68,13
	.byte	'reserved_48',0
	.word	4633
	.byte	8,2,35,72,13
	.byte	'ESR',0
	.word	4933
	.byte	4,2,35,80,13
	.byte	'reserved_54',0
	.word	4973
	.byte	12,2,35,84,13
	.byte	'PDISC',0
	.word	5308
	.byte	4,2,35,96,13
	.byte	'PCSR',0
	.word	5594
	.byte	4,2,35,100,13
	.byte	'reserved_68',0
	.word	4633
	.byte	8,2,35,104,13
	.byte	'OMSR0',0
	.word	5741
	.byte	4,2,35,112,13
	.byte	'OMSR4',0
	.word	5910
	.byte	4,2,35,116,13
	.byte	'OMSR8',0
	.word	6082
	.byte	4,2,35,120,13
	.byte	'OMSR12',0
	.word	6257
	.byte	4,2,35,124,13
	.byte	'OMCR0',0
	.word	6431
	.byte	4,3,35,128,1,13
	.byte	'OMCR4',0
	.word	6605
	.byte	4,3,35,132,1,13
	.byte	'OMCR8',0
	.word	6781
	.byte	4,3,35,136,1,13
	.byte	'OMCR12',0
	.word	6937
	.byte	4,3,35,140,1,13
	.byte	'OMSR',0
	.word	7270
	.byte	4,3,35,144,1,13
	.byte	'OMCR',0
	.word	7618
	.byte	4,3,35,148,1,13
	.byte	'reserved_98',0
	.word	4633
	.byte	8,3,35,152,1,13
	.byte	'LPCR0',0
	.word	7742
	.byte	4,3,35,160,1,13
	.byte	'LPCR1',0
	.word	7991
	.byte	4,3,35,164,1,13
	.byte	'LPCR2',0
	.word	8250
	.byte	4,3,35,168,1,13
	.byte	'reserved_A4',0
	.word	8290
	.byte	76,3,35,172,1,13
	.byte	'ACCEN1',0
	.word	8346
	.byte	4,3,35,248,1,13
	.byte	'ACCEN0',0
	.word	8913
	.byte	4,3,35,252,1,0,14
	.word	8953
	.byte	3
	.word	9556
	.byte	17,7,134,1,9,1,18
	.byte	'IfxPort_OutputMode_pushPull',0,128,1,18
	.byte	'IfxPort_OutputMode_openDrain',0,192,1,0,17,7,120,9,1,18
	.byte	'IfxPort_OutputIdx_general',0,128,1,18
	.byte	'IfxPort_OutputIdx_alt1',0,136,1,18
	.byte	'IfxPort_OutputIdx_alt2',0,144,1,18
	.byte	'IfxPort_OutputIdx_alt3',0,152,1,18
	.byte	'IfxPort_OutputIdx_alt4',0,160,1,18
	.byte	'IfxPort_OutputIdx_alt5',0,168,1,18
	.byte	'IfxPort_OutputIdx_alt6',0,176,1,18
	.byte	'IfxPort_OutputIdx_alt7',0,184,1,0,4
	.byte	'IfxPort_setPinModeOutput',0,3,7,202,4,17,1,1,5
	.byte	'port',0,7,202,4,49
	.word	9561
	.byte	5
	.byte	'pinIndex',0,7,202,4,61
	.word	462
	.byte	5
	.byte	'mode',0,7,202,4,90
	.word	9566
	.byte	5
	.byte	'index',0,7,202,4,114
	.word	9636
	.byte	6,0,17,7,172,1,9,4,18
	.byte	'IfxPort_State_notChanged',0,0,18
	.byte	'IfxPort_State_high',0,1,18
	.byte	'IfxPort_State_low',0,128,128,4,18
	.byte	'IfxPort_State_toggled',0,129,128,4,0,4
	.byte	'IfxPort_setPinState',0,3,7,208,4,17,1,1,5
	.byte	'port',0,7,208,4,44
	.word	9561
	.byte	5
	.byte	'pinIndex',0,7,208,4,56
	.word	462
	.byte	5
	.byte	'action',0,7,208,4,80
	.word	9949
	.byte	6,0,17,10,156,1,9,1,18
	.byte	'IfxCpu_ResourceCpu_0',0,0,18
	.byte	'IfxCpu_ResourceCpu_1',0,1,18
	.byte	'IfxCpu_ResourceCpu_none',0,2,0,8
	.byte	'IfxCpu_getCoreIndex',0,3,9,141,6,31
	.word	10130
	.byte	1,1,6,0,8
	.byte	'IfxCpu_areInterruptsEnabled',0,3,9,139,5,20
	.word	462
	.byte	1,1,6,0
.L283:
	.byte	7
	.byte	'unsigned long int',0,4,7,8
	.byte	'IfxCpu_getPerformanceCounter',0,3,9,161,6,19
	.word	10285
	.byte	1,1,5
	.byte	'address',0,9,161,6,55
	.word	1013
	.byte	6,0,8
	.byte	'IfxCpu_getPerformanceCounterStickyOverflow',0,3,9,190,6,20
	.word	462
	.byte	1,1,5
	.byte	'address',0,9,190,6,70
	.word	1013
	.byte	6,0,4
	.byte	'IfxCpu_updatePerformanceCounter',0,3,9,172,8,17,1,1,5
	.byte	'address',0,9,172,8,56
	.word	10285
	.byte	5
	.byte	'count',0,9,172,8,72
	.word	10285
	.byte	19,6,0,0,8
	.byte	'IfxVadc_calculateSampleTime',0,3,11,203,13,19
	.word	10285
	.byte	1,1,5
	.byte	'analogFrequency',0,11,203,13,55
	.word	235
	.byte	5
	.byte	'sampleTime',0,11,203,13,80
	.word	235
	.byte	6,0,10
	.byte	'_Ifx_VADC_CLC_Bits',0,12,164,1,16,4,11
	.byte	'DISR',0,1
	.word	462
	.byte	1,7,2,35,0,11
	.byte	'DISS',0,1
	.word	462
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	462
	.byte	1,5,2,35,0,11
	.byte	'EDIS',0,1
	.word	462
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,4
	.word	439
	.byte	28,0,2,35,0,0,12,12,215,7,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	10603
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_VADC_ID_Bits',0,12,239,6,16,4,11
	.byte	'MODREV',0,1
	.word	462
	.byte	8,0,2,35,0,11
	.byte	'MODTYPE',0,1
	.word	462
	.byte	8,0,2,35,1,11
	.byte	'MODNUMBER',0,2
	.word	1013
	.byte	16,0,2,35,2,0,12,12,231,10,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	10761
	.byte	4,2,35,0,0,15,28
	.word	462
	.byte	16,27,0,10
	.byte	'_Ifx_VADC_OCS_Bits',0,12,141,7,16,4,11
	.byte	'TGS',0,1
	.word	462
	.byte	2,6,2,35,0,11
	.byte	'TGB',0,1
	.word	462
	.byte	1,5,2,35,0,11
	.byte	'TG_P',0,1
	.word	462
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,4
	.word	439
	.byte	20,8,2,35,0,11
	.byte	'SUS',0,1
	.word	462
	.byte	4,4,2,35,3,11
	.byte	'SUS_P',0,1
	.word	462
	.byte	1,3,2,35,3,11
	.byte	'SUSSTA',0,1
	.word	462
	.byte	1,2,2,35,3,11
	.byte	'reserved_30',0,1
	.word	462
	.byte	2,0,2,35,3,0,12,12,135,11,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	10893
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_VADC_KRSTCLR_Bits',0,12,134,7,16,4,11
	.byte	'CLR',0,1
	.word	462
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,4
	.word	439
	.byte	31,0,2,35,0,0,12,12,255,10,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	11100
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_VADC_KRST1_Bits',0,12,255,6,16,4,11
	.byte	'RST',0,1
	.word	462
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,4
	.word	439
	.byte	31,0,2,35,0,0,12,12,247,10,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	11207
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_VADC_KRST0_Bits',0,12,247,6,16,4,11
	.byte	'RST',0,1
	.word	462
	.byte	1,7,2,35,0,11
	.byte	'RSTSTAT',0,1
	.word	462
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,4
	.word	439
	.byte	30,0,2,35,0,0,12,12,239,10,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	11312
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_VADC_ACCEN0_Bits',0,12,49,16,4,11
	.byte	'EN0',0,1
	.word	462
	.byte	1,7,2,35,0,11
	.byte	'EN1',0,1
	.word	462
	.byte	1,6,2,35,0,11
	.byte	'EN2',0,1
	.word	462
	.byte	1,5,2,35,0,11
	.byte	'EN3',0,1
	.word	462
	.byte	1,4,2,35,0,11
	.byte	'EN4',0,1
	.word	462
	.byte	1,3,2,35,0,11
	.byte	'EN5',0,1
	.word	462
	.byte	1,2,2,35,0,11
	.byte	'EN6',0,1
	.word	462
	.byte	1,1,2,35,0,11
	.byte	'EN7',0,1
	.word	462
	.byte	1,0,2,35,0,11
	.byte	'EN8',0,1
	.word	462
	.byte	1,7,2,35,1,11
	.byte	'EN9',0,1
	.word	462
	.byte	1,6,2,35,1,11
	.byte	'EN10',0,1
	.word	462
	.byte	1,5,2,35,1,11
	.byte	'EN11',0,1
	.word	462
	.byte	1,4,2,35,1,11
	.byte	'EN12',0,1
	.word	462
	.byte	1,3,2,35,1,11
	.byte	'EN13',0,1
	.word	462
	.byte	1,2,2,35,1,11
	.byte	'EN14',0,1
	.word	462
	.byte	1,1,2,35,1,11
	.byte	'EN15',0,1
	.word	462
	.byte	1,0,2,35,1,11
	.byte	'EN16',0,1
	.word	462
	.byte	1,7,2,35,2,11
	.byte	'EN17',0,1
	.word	462
	.byte	1,6,2,35,2,11
	.byte	'EN18',0,1
	.word	462
	.byte	1,5,2,35,2,11
	.byte	'EN19',0,1
	.word	462
	.byte	1,4,2,35,2,11
	.byte	'EN20',0,1
	.word	462
	.byte	1,3,2,35,2,11
	.byte	'EN21',0,1
	.word	462
	.byte	1,2,2,35,2,11
	.byte	'EN22',0,1
	.word	462
	.byte	1,1,2,35,2,11
	.byte	'EN23',0,1
	.word	462
	.byte	1,0,2,35,2,11
	.byte	'EN24',0,1
	.word	462
	.byte	1,7,2,35,3,11
	.byte	'EN25',0,1
	.word	462
	.byte	1,6,2,35,3,11
	.byte	'EN26',0,1
	.word	462
	.byte	1,5,2,35,3,11
	.byte	'EN27',0,1
	.word	462
	.byte	1,4,2,35,3,11
	.byte	'EN28',0,1
	.word	462
	.byte	1,3,2,35,3,11
	.byte	'EN29',0,1
	.word	462
	.byte	1,2,2,35,3,11
	.byte	'EN30',0,1
	.word	462
	.byte	1,1,2,35,3,11
	.byte	'EN31',0,1
	.word	462
	.byte	1,0,2,35,3,0,12,12,159,7,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	11436
	.byte	4,2,35,0,0,15,64
	.word	462
	.byte	16,63,0,10
	.byte	'_Ifx_VADC_GLOBCFG_Bits',0,12,132,6,16,4,11
	.byte	'DIVA',0,1
	.word	462
	.byte	5,3,2,35,0,11
	.byte	'reserved_5',0,1
	.word	462
	.byte	2,1,2,35,0,11
	.byte	'DCMSB',0,1
	.word	462
	.byte	1,0,2,35,0,11
	.byte	'DIVD',0,1
	.word	462
	.byte	2,6,2,35,1,11
	.byte	'reserved_10',0,1
	.word	462
	.byte	2,4,2,35,1,11
	.byte	'REFPC',0,1
	.word	462
	.byte	1,3,2,35,1,11
	.byte	'reserved_13',0,1
	.word	462
	.byte	1,2,2,35,1,11
	.byte	'LOSUP',0,1
	.word	462
	.byte	1,1,2,35,1,11
	.byte	'DIVWC',0,1
	.word	462
	.byte	1,0,2,35,1,11
	.byte	'DPCAL0',0,1
	.word	462
	.byte	1,7,2,35,2,11
	.byte	'DPCAL1',0,1
	.word	462
	.byte	1,6,2,35,2,11
	.byte	'DPCAL2',0,1
	.word	462
	.byte	1,5,2,35,2,11
	.byte	'DPCAL3',0,1
	.word	462
	.byte	1,4,2,35,2,11
	.byte	'reserved_20',0,2
	.word	1013
	.byte	11,1,2,35,2,11
	.byte	'SUCAL',0,1
	.word	462
	.byte	1,0,2,35,3,0
.L326:
	.byte	12,12,167,10,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	12015
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_VADC_ACCPROT0_Bits',0,12,86,16,4,11
	.byte	'APC0',0,1
	.word	462
	.byte	1,7,2,35,0,11
	.byte	'APC1',0,1
	.word	462
	.byte	1,6,2,35,0,11
	.byte	'APC2',0,1
	.word	462
	.byte	1,5,2,35,0,11
	.byte	'APC3',0,1
	.word	462
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,2
	.word	1013
	.byte	11,1,2,35,0,11
	.byte	'APEM',0,1
	.word	462
	.byte	1,0,2,35,1,11
	.byte	'API0',0,1
	.word	462
	.byte	1,7,2,35,2,11
	.byte	'API1',0,1
	.word	462
	.byte	1,6,2,35,2,11
	.byte	'API2',0,1
	.word	462
	.byte	1,5,2,35,2,11
	.byte	'API3',0,1
	.word	462
	.byte	1,4,2,35,2,11
	.byte	'reserved_20',0,2
	.word	1013
	.byte	11,1,2,35,2,11
	.byte	'APGC',0,1
	.word	462
	.byte	1,0,2,35,3,0,12,12,167,7,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	12365
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_VADC_ACCPROT1_Bits',0,12,103,16,4,11
	.byte	'APS0',0,1
	.word	462
	.byte	1,7,2,35,0,11
	.byte	'APS1',0,1
	.word	462
	.byte	1,6,2,35,0,11
	.byte	'APS2',0,1
	.word	462
	.byte	1,5,2,35,0,11
	.byte	'APS3',0,1
	.word	462
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,2
	.word	1013
	.byte	11,1,2,35,0,11
	.byte	'APTF',0,1
	.word	462
	.byte	1,0,2,35,1,11
	.byte	'APR0',0,1
	.word	462
	.byte	1,7,2,35,2,11
	.byte	'APR1',0,1
	.word	462
	.byte	1,6,2,35,2,11
	.byte	'APR2',0,1
	.word	462
	.byte	1,5,2,35,2,11
	.byte	'APR3',0,1
	.word	462
	.byte	1,4,2,35,2,11
	.byte	'reserved_20',0,2
	.word	1013
	.byte	12,0,2,35,2,0,12,12,175,7,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	12640
	.byte	4,2,35,0,0,15,16
	.word	462
	.byte	16,15,0,10
	.byte	'_Ifx_VADC_ICLASS_Bits',0,12,226,6,16,4,11
	.byte	'STCS',0,1
	.word	462
	.byte	5,3,2,35,0,11
	.byte	'reserved_5',0,1
	.word	462
	.byte	3,0,2,35,0,11
	.byte	'CMS',0,1
	.word	462
	.byte	3,5,2,35,1,11
	.byte	'reserved_11',0,1
	.word	462
	.byte	5,0,2,35,1,11
	.byte	'STCE',0,1
	.word	462
	.byte	5,3,2,35,2,11
	.byte	'reserved_21',0,1
	.word	462
	.byte	3,0,2,35,2,11
	.byte	'CME',0,1
	.word	462
	.byte	3,5,2,35,3,11
	.byte	'reserved_27',0,1
	.word	462
	.byte	5,0,2,35,3,0,12,12,223,10,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	12908
	.byte	4,2,35,0,0,15,8
	.word	13090
	.byte	16,1,0,10
	.byte	'_Ifx_VADC_GLOBBOUND_Bits',0,12,251,5,16,4,11
	.byte	'BOUNDARY0',0,2
	.word	1013
	.byte	12,4,2,35,0,11
	.byte	'reserved_12',0,1
	.word	462
	.byte	4,0,2,35,1,11
	.byte	'BOUNDARY1',0,2
	.word	1013
	.byte	12,4,2,35,2,11
	.byte	'reserved_28',0,1
	.word	462
	.byte	4,0,2,35,3,0,12,12,159,10,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	13139
	.byte	4,2,35,0,0,15,36
	.word	462
	.byte	16,35,0,10
	.byte	'_Ifx_VADC_GLOBEFLAG_Bits',0,12,152,6,16,4,11
	.byte	'SEVGLB',0,1
	.word	462
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,1
	.word	462
	.byte	7,0,2,35,0,11
	.byte	'REVGLB',0,1
	.word	462
	.byte	1,7,2,35,1,11
	.byte	'reserved_9',0,1
	.word	462
	.byte	7,0,2,35,1,11
	.byte	'SEVGLBCLR',0,1
	.word	462
	.byte	1,7,2,35,2,11
	.byte	'reserved_17',0,1
	.word	462
	.byte	7,0,2,35,2,11
	.byte	'REVGLBCLR',0,1
	.word	462
	.byte	1,7,2,35,3,11
	.byte	'reserved_25',0,1
	.word	462
	.byte	7,0,2,35,3,0,12,12,175,10,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	13308
	.byte	4,2,35,0,0,15,92
	.word	462
	.byte	16,91,0,10
	.byte	'_Ifx_VADC_GLOBEVNP_Bits',0,12,165,6,16,4,11
	.byte	'SEV0NP',0,1
	.word	462
	.byte	4,4,2,35,0,11
	.byte	'reserved_4',0,2
	.word	1013
	.byte	12,0,2,35,0,11
	.byte	'REV0NP',0,1
	.word	462
	.byte	4,4,2,35,2,11
	.byte	'reserved_20',0,2
	.word	1013
	.byte	12,0,2,35,2,0,12,12,183,10,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	13557
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_VADC_GLOBTF_Bits',0,12,209,6,16,4,11
	.byte	'CDCH',0,1
	.word	462
	.byte	4,4,2,35,0,11
	.byte	'CDGR',0,1
	.word	462
	.byte	4,0,2,35,0,11
	.byte	'CDEN',0,1
	.word	462
	.byte	1,7,2,35,1,11
	.byte	'CDSEL',0,1
	.word	462
	.byte	2,5,2,35,1,11
	.byte	'reserved_11',0,1
	.word	462
	.byte	4,1,2,35,1,11
	.byte	'CDWC',0,1
	.word	462
	.byte	1,0,2,35,1,11
	.byte	'PDD',0,1
	.word	462
	.byte	1,7,2,35,2,11
	.byte	'MDPD',0,1
	.word	462
	.byte	1,6,2,35,2,11
	.byte	'MDPU',0,1
	.word	462
	.byte	1,5,2,35,2,11
	.byte	'reserved_19',0,1
	.word	462
	.byte	4,1,2,35,2,11
	.byte	'MDWC',0,1
	.word	462
	.byte	1,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	462
	.byte	8,0,2,35,3,0,12,12,215,10,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	13709
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_VADC_BRSSEL_Bits',0,12,158,1,16,4,11
	.byte	'CHSELGy',0,4
	.word	439
	.byte	32,0,2,35,0,0,12,12,207,7,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	13991
	.byte	4,2,35,0,0,15,16
	.word	14039
	.byte	16,3,0,15,48
	.word	462
	.byte	16,47,0,10
	.byte	'_Ifx_VADC_BRSPND_Bits',0,12,152,1,16,4,11
	.byte	'CHPNDGy',0,4
	.word	439
	.byte	32,0,2,35,0,0,12,12,199,7,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	14097
	.byte	4,2,35,0,0,15,16
	.word	14145
	.byte	16,3,0,10
	.byte	'_Ifx_VADC_BRSCTRL_Bits',0,12,119,16,4,11
	.byte	'SRCRESREG',0,1
	.word	462
	.byte	4,4,2,35,0,11
	.byte	'reserved_4',0,1
	.word	462
	.byte	4,0,2,35,0,11
	.byte	'XTSEL',0,1
	.word	462
	.byte	4,4,2,35,1,11
	.byte	'XTLVL',0,1
	.word	462
	.byte	1,3,2,35,1,11
	.byte	'XTMODE',0,1
	.word	462
	.byte	2,1,2,35,1,11
	.byte	'XTWC',0,1
	.word	462
	.byte	1,0,2,35,1,11
	.byte	'GTSEL',0,1
	.word	462
	.byte	4,4,2,35,2,11
	.byte	'GTLVL',0,1
	.word	462
	.byte	1,3,2,35,2,11
	.byte	'reserved_21',0,1
	.word	462
	.byte	2,1,2,35,2,11
	.byte	'GTWC',0,1
	.word	462
	.byte	1,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	462
	.byte	8,0,2,35,3,0,12,12,183,7,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	14194
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_VADC_BRSMR_Bits',0,12,135,1,16,4,11
	.byte	'ENGT',0,1
	.word	462
	.byte	2,6,2,35,0,11
	.byte	'ENTR',0,1
	.word	462
	.byte	1,5,2,35,0,11
	.byte	'ENSI',0,1
	.word	462
	.byte	1,4,2,35,0,11
	.byte	'SCAN',0,1
	.word	462
	.byte	1,3,2,35,0,11
	.byte	'LDM',0,1
	.word	462
	.byte	1,2,2,35,0,11
	.byte	'reserved_6',0,1
	.word	462
	.byte	1,1,2,35,0,11
	.byte	'REQGT',0,1
	.word	462
	.byte	1,0,2,35,0,11
	.byte	'CLRPND',0,1
	.word	462
	.byte	1,7,2,35,1,11
	.byte	'LDEV',0,1
	.word	462
	.byte	1,6,2,35,1,11
	.byte	'reserved_10',0,1
	.word	462
	.byte	6,0,2,35,1,11
	.byte	'RPTDIS',0,1
	.word	462
	.byte	1,7,2,35,2,11
	.byte	'reserved_17',0,2
	.word	1013
	.byte	15,0,2,35,2,0,12,12,191,7,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	14470
	.byte	4,2,35,0,0,15,120
	.word	462
	.byte	16,119,0,10
	.byte	'_Ifx_VADC_GLOBRCR_Bits',0,12,174,6,16,4,11
	.byte	'reserved_0',0,2
	.word	1013
	.byte	16,0,2,35,0,11
	.byte	'DRCTR',0,1
	.word	462
	.byte	4,4,2,35,2,11
	.byte	'reserved_20',0,1
	.word	462
	.byte	4,0,2,35,2,11
	.byte	'WFR',0,1
	.word	462
	.byte	1,7,2,35,3,11
	.byte	'reserved_25',0,1
	.word	462
	.byte	6,1,2,35,3,11
	.byte	'SRGEN',0,1
	.word	462
	.byte	1,0,2,35,3,0,12,12,191,10,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	14763
	.byte	4,2,35,0,0,15,124
	.word	462
	.byte	16,123,0,10
	.byte	'_Ifx_VADC_GLOBRES_Bits',0,12,185,6,16,4,11
	.byte	'RESULT',0,2
	.word	1013
	.byte	16,0,2,35,0,11
	.byte	'GNR',0,1
	.word	462
	.byte	4,4,2,35,2,11
	.byte	'CHNR',0,2
	.word	1013
	.byte	5,7,2,35,2,11
	.byte	'EMUX',0,1
	.word	462
	.byte	3,4,2,35,3,11
	.byte	'CRS',0,1
	.word	462
	.byte	2,2,2,35,3,11
	.byte	'FCR',0,1
	.word	462
	.byte	1,1,2,35,3,11
	.byte	'VF',0,1
	.word	462
	.byte	1,0,2,35,3,0,12,12,199,10,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	14959
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_VADC_GLOBRESD_Bits',0,12,197,6,16,4,11
	.byte	'RESULT',0,2
	.word	1013
	.byte	16,0,2,35,0,11
	.byte	'GNR',0,1
	.word	462
	.byte	4,4,2,35,2,11
	.byte	'CHNR',0,2
	.word	1013
	.byte	5,7,2,35,2,11
	.byte	'EMUX',0,1
	.word	462
	.byte	3,4,2,35,3,11
	.byte	'CRS',0,1
	.word	462
	.byte	2,2,2,35,3,11
	.byte	'FCR',0,1
	.word	462
	.byte	1,1,2,35,3,11
	.byte	'VF',0,1
	.word	462
	.byte	1,0,2,35,3,0,12,12,207,10,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	15138
	.byte	4,2,35,0,0,15,108
	.word	462
	.byte	16,107,0,10
	.byte	'_Ifx_VADC_EMUXSEL_Bits',0,12,174,1,16,4,11
	.byte	'EMUXGRP0',0,1
	.word	462
	.byte	4,4,2,35,0,11
	.byte	'EMUXGRP1',0,1
	.word	462
	.byte	4,0,2,35,0,11
	.byte	'reserved_8',0,4
	.word	439
	.byte	24,0,2,35,0,0,12,12,223,7,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	15327
	.byte	4,2,35,0,0,15,140,1
	.word	462
	.byte	16,139,1,0,10
	.byte	'_Ifx_VADC_G_ARBCFG_Bits',0,12,191,1,16,4,11
	.byte	'ANONC',0,1
	.word	462
	.byte	2,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	462
	.byte	2,4,2,35,0,11
	.byte	'ARBRND',0,1
	.word	462
	.byte	2,2,2,35,0,11
	.byte	'reserved_6',0,1
	.word	462
	.byte	1,1,2,35,0,11
	.byte	'ARBM',0,1
	.word	462
	.byte	1,0,2,35,0,11
	.byte	'reserved_8',0,1
	.word	462
	.byte	8,0,2,35,1,11
	.byte	'ANONS',0,1
	.word	462
	.byte	2,6,2,35,2,11
	.byte	'CSRC',0,1
	.word	462
	.byte	2,4,2,35,2,11
	.byte	'CHNR',0,2
	.word	1013
	.byte	5,7,2,35,2,11
	.byte	'SYNRUN',0,1
	.word	462
	.byte	1,6,2,35,3,11
	.byte	'reserved_26',0,1
	.word	462
	.byte	2,4,2,35,3,11
	.byte	'CAL',0,1
	.word	462
	.byte	1,3,2,35,3,11
	.byte	'CALS',0,1
	.word	462
	.byte	1,2,2,35,3,11
	.byte	'BUSY',0,1
	.word	462
	.byte	1,1,2,35,3,11
	.byte	'SAMPLE',0,1
	.word	462
	.byte	1,0,2,35,3,0,12,12,239,7,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	15470
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_VADC_G_ARBPR_Bits',0,12,211,1,16,4,11
	.byte	'PRIO0',0,1
	.word	462
	.byte	2,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	462
	.byte	1,5,2,35,0,11
	.byte	'CSM0',0,1
	.word	462
	.byte	1,4,2,35,0,11
	.byte	'PRIO1',0,1
	.word	462
	.byte	2,2,2,35,0,11
	.byte	'reserved_6',0,1
	.word	462
	.byte	1,1,2,35,0,11
	.byte	'CSM1',0,1
	.word	462
	.byte	1,0,2,35,0,11
	.byte	'PRIO2',0,1
	.word	462
	.byte	2,6,2,35,1,11
	.byte	'reserved_10',0,1
	.word	462
	.byte	1,5,2,35,1,11
	.byte	'CSM2',0,1
	.word	462
	.byte	1,4,2,35,1,11
	.byte	'reserved_12',0,4
	.word	439
	.byte	12,8,2,35,0,11
	.byte	'ASEN0',0,1
	.word	462
	.byte	1,7,2,35,3,11
	.byte	'ASEN1',0,1
	.word	462
	.byte	1,6,2,35,3,11
	.byte	'ASEN2',0,1
	.word	462
	.byte	1,5,2,35,3,11
	.byte	'reserved_27',0,1
	.word	462
	.byte	5,0,2,35,3,0,12,12,247,7,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	15813
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_VADC_G_CHASS_Bits',0,12,156,3,16,4,11
	.byte	'ASSCH0',0,1
	.word	462
	.byte	1,7,2,35,0,11
	.byte	'ASSCH1',0,1
	.word	462
	.byte	1,6,2,35,0,11
	.byte	'ASSCH2',0,1
	.word	462
	.byte	1,5,2,35,0,11
	.byte	'ASSCH3',0,1
	.word	462
	.byte	1,4,2,35,0,11
	.byte	'ASSCH4',0,1
	.word	462
	.byte	1,3,2,35,0,11
	.byte	'ASSCH5',0,1
	.word	462
	.byte	1,2,2,35,0,11
	.byte	'ASSCH6',0,1
	.word	462
	.byte	1,1,2,35,0,11
	.byte	'ASSCH7',0,1
	.word	462
	.byte	1,0,2,35,0,11
	.byte	'ASSCH8',0,1
	.word	462
	.byte	1,7,2,35,1,11
	.byte	'ASSCH9',0,1
	.word	462
	.byte	1,6,2,35,1,11
	.byte	'ASSCH10',0,1
	.word	462
	.byte	1,5,2,35,1,11
	.byte	'ASSCH11',0,1
	.word	462
	.byte	1,4,2,35,1,11
	.byte	'ASSCH12',0,1
	.word	462
	.byte	1,3,2,35,1,11
	.byte	'ASSCH13',0,1
	.word	462
	.byte	1,2,2,35,1,11
	.byte	'ASSCH14',0,1
	.word	462
	.byte	1,1,2,35,1,11
	.byte	'ASSCH15',0,1
	.word	462
	.byte	1,0,2,35,1,11
	.byte	'ASSCH16',0,1
	.word	462
	.byte	1,7,2,35,2,11
	.byte	'ASSCH17',0,1
	.word	462
	.byte	1,6,2,35,2,11
	.byte	'ASSCH18',0,1
	.word	462
	.byte	1,5,2,35,2,11
	.byte	'ASSCH19',0,1
	.word	462
	.byte	1,4,2,35,2,11
	.byte	'ASSCH20',0,1
	.word	462
	.byte	1,3,2,35,2,11
	.byte	'ASSCH21',0,1
	.word	462
	.byte	1,2,2,35,2,11
	.byte	'ASSCH22',0,1
	.word	462
	.byte	1,1,2,35,2,11
	.byte	'ASSCH23',0,1
	.word	462
	.byte	1,0,2,35,2,11
	.byte	'ASSCH24',0,1
	.word	462
	.byte	1,7,2,35,3,11
	.byte	'ASSCH25',0,1
	.word	462
	.byte	1,6,2,35,3,11
	.byte	'ASSCH26',0,1
	.word	462
	.byte	1,5,2,35,3,11
	.byte	'ASSCH27',0,1
	.word	462
	.byte	1,4,2,35,3,11
	.byte	'ASSCH28',0,1
	.word	462
	.byte	1,3,2,35,3,11
	.byte	'ASSCH29',0,1
	.word	462
	.byte	1,2,2,35,3,11
	.byte	'ASSCH30',0,1
	.word	462
	.byte	1,1,2,35,3,11
	.byte	'ASSCH31',0,1
	.word	462
	.byte	1,0,2,35,3,0,12,12,231,8,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	16146
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_VADC_G_RRASS_Bits',0,12,157,5,16,4,11
	.byte	'ASSRR0',0,1
	.word	462
	.byte	1,7,2,35,0,11
	.byte	'ASSRR1',0,1
	.word	462
	.byte	1,6,2,35,0,11
	.byte	'ASSRR2',0,1
	.word	462
	.byte	1,5,2,35,0,11
	.byte	'ASSRR3',0,1
	.word	462
	.byte	1,4,2,35,0,11
	.byte	'ASSRR4',0,1
	.word	462
	.byte	1,3,2,35,0,11
	.byte	'ASSRR5',0,1
	.word	462
	.byte	1,2,2,35,0,11
	.byte	'ASSRR6',0,1
	.word	462
	.byte	1,1,2,35,0,11
	.byte	'ASSRR7',0,1
	.word	462
	.byte	1,0,2,35,0,11
	.byte	'ASSRR8',0,1
	.word	462
	.byte	1,7,2,35,1,11
	.byte	'ASSRR9',0,1
	.word	462
	.byte	1,6,2,35,1,11
	.byte	'ASSRR10',0,1
	.word	462
	.byte	1,5,2,35,1,11
	.byte	'ASSRR11',0,1
	.word	462
	.byte	1,4,2,35,1,11
	.byte	'ASSRR12',0,1
	.word	462
	.byte	1,3,2,35,1,11
	.byte	'ASSRR13',0,1
	.word	462
	.byte	1,2,2,35,1,11
	.byte	'ASSRR14',0,1
	.word	462
	.byte	1,1,2,35,1,11
	.byte	'ASSRR15',0,1
	.word	462
	.byte	1,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	1013
	.byte	16,0,2,35,2,0,12,12,231,9,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	16814
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_VADC_G_ALIAS_Bits',0,12,182,1,16,4,11
	.byte	'ALIAS0',0,1
	.word	462
	.byte	5,3,2,35,0,11
	.byte	'reserved_5',0,1
	.word	462
	.byte	3,0,2,35,0,11
	.byte	'ALIAS1',0,1
	.word	462
	.byte	5,3,2,35,1,11
	.byte	'reserved_13',0,4
	.word	439
	.byte	19,0,2,35,0,0,12,12,231,7,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	17201
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_VADC_G_BOUND_Bits',0,12,205,2,16,4,11
	.byte	'BOUNDARY0',0,2
	.word	1013
	.byte	12,4,2,35,0,11
	.byte	'reserved_12',0,1
	.word	462
	.byte	4,0,2,35,1,11
	.byte	'BOUNDARY1',0,2
	.word	1013
	.byte	12,4,2,35,2,11
	.byte	'reserved_28',0,1
	.word	462
	.byte	4,0,2,35,3,0,12,12,191,8,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	17352
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_VADC_G_SYNCTR_Bits',0,12,218,5,16,4,11
	.byte	'STSEL',0,1
	.word	462
	.byte	2,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	462
	.byte	2,4,2,35,0,11
	.byte	'EVALR1',0,1
	.word	462
	.byte	1,3,2,35,0,11
	.byte	'EVALR2',0,1
	.word	462
	.byte	1,2,2,35,0,11
	.byte	'EVALR3',0,1
	.word	462
	.byte	1,1,2,35,0,11
	.byte	'reserved_7',0,4
	.word	439
	.byte	25,0,2,35,0,0,12,12,143,10,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	17510
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_VADC_G_BFL_Bits',0,12,150,2,16,4,11
	.byte	'BFL0',0,1
	.word	462
	.byte	1,7,2,35,0,11
	.byte	'BFL1',0,1
	.word	462
	.byte	1,6,2,35,0,11
	.byte	'BFL2',0,1
	.word	462
	.byte	1,5,2,35,0,11
	.byte	'BFL3',0,1
	.word	462
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,1
	.word	462
	.byte	4,0,2,35,0,11
	.byte	'BFA0',0,1
	.word	462
	.byte	1,7,2,35,1,11
	.byte	'BFA1',0,1
	.word	462
	.byte	1,6,2,35,1,11
	.byte	'BFA2',0,1
	.word	462
	.byte	1,5,2,35,1,11
	.byte	'BFA3',0,1
	.word	462
	.byte	1,4,2,35,1,11
	.byte	'reserved_12',0,1
	.word	462
	.byte	4,0,2,35,1,11
	.byte	'BFI0',0,1
	.word	462
	.byte	1,7,2,35,2,11
	.byte	'BFI1',0,1
	.word	462
	.byte	1,6,2,35,2,11
	.byte	'BFI2',0,1
	.word	462
	.byte	1,5,2,35,2,11
	.byte	'BFI3',0,1
	.word	462
	.byte	1,4,2,35,2,11
	.byte	'reserved_20',0,2
	.word	1013
	.byte	12,0,2,35,2,0,12,12,159,8,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	17696
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_VADC_G_BFLS_Bits',0,12,190,2,16,4,11
	.byte	'BFC0',0,1
	.word	462
	.byte	1,7,2,35,0,11
	.byte	'BFC1',0,1
	.word	462
	.byte	1,6,2,35,0,11
	.byte	'BFC2',0,1
	.word	462
	.byte	1,5,2,35,0,11
	.byte	'BFC3',0,1
	.word	462
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,2
	.word	1013
	.byte	12,0,2,35,0,11
	.byte	'BFS0',0,1
	.word	462
	.byte	1,7,2,35,2,11
	.byte	'BFS1',0,1
	.word	462
	.byte	1,6,2,35,2,11
	.byte	'BFS2',0,1
	.word	462
	.byte	1,5,2,35,2,11
	.byte	'BFS3',0,1
	.word	462
	.byte	1,4,2,35,2,11
	.byte	'reserved_20',0,2
	.word	1013
	.byte	12,0,2,35,2,0,12,12,183,8,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	18024
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_VADC_G_BFLC_Bits',0,12,170,2,16,4,11
	.byte	'BFM0',0,1
	.word	462
	.byte	4,4,2,35,0,11
	.byte	'BFM1',0,1
	.word	462
	.byte	4,0,2,35,0,11
	.byte	'BFM2',0,1
	.word	462
	.byte	4,4,2,35,1,11
	.byte	'BFM3',0,1
	.word	462
	.byte	4,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	1013
	.byte	16,0,2,35,2,0,12,12,167,8,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	18266
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_VADC_G_BFLNP_Bits',0,12,180,2,16,4,11
	.byte	'BFL0NP',0,1
	.word	462
	.byte	4,4,2,35,0,11
	.byte	'BFL1NP',0,1
	.word	462
	.byte	4,0,2,35,0,11
	.byte	'BFL2NP',0,1
	.word	462
	.byte	4,4,2,35,1,11
	.byte	'BFL3NP',0,1
	.word	462
	.byte	4,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	1013
	.byte	16,0,2,35,2,0,12,12,175,8,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	18422
	.byte	4,2,35,0,0,15,40
	.word	462
	.byte	16,39,0,10
	.byte	'_Ifx_VADC_G_QCTRL0_Bits',0,12,250,3,16,4,11
	.byte	'SRCRESREG',0,1
	.word	462
	.byte	4,4,2,35,0,11
	.byte	'reserved_4',0,1
	.word	462
	.byte	4,0,2,35,0,11
	.byte	'XTSEL',0,1
	.word	462
	.byte	4,4,2,35,1,11
	.byte	'XTLVL',0,1
	.word	462
	.byte	1,3,2,35,1,11
	.byte	'XTMODE',0,1
	.word	462
	.byte	2,1,2,35,1,11
	.byte	'XTWC',0,1
	.word	462
	.byte	1,0,2,35,1,11
	.byte	'GTSEL',0,1
	.word	462
	.byte	4,4,2,35,2,11
	.byte	'GTLVL',0,1
	.word	462
	.byte	1,3,2,35,2,11
	.byte	'reserved_21',0,1
	.word	462
	.byte	2,1,2,35,2,11
	.byte	'GTWC',0,1
	.word	462
	.byte	1,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	462
	.byte	4,4,2,35,3,11
	.byte	'TMEN',0,1
	.word	462
	.byte	1,3,2,35,3,11
	.byte	'reserved_29',0,1
	.word	462
	.byte	2,1,2,35,3,11
	.byte	'TMWC',0,1
	.word	462
	.byte	1,0,2,35,3,0,12,12,143,9,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	18596
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_VADC_G_QMR0_Bits',0,12,151,4,16,4,11
	.byte	'ENGT',0,1
	.word	462
	.byte	2,6,2,35,0,11
	.byte	'ENTR',0,1
	.word	462
	.byte	1,5,2,35,0,11
	.byte	'reserved_3',0,1
	.word	462
	.byte	5,0,2,35,0,11
	.byte	'CLRV',0,1
	.word	462
	.byte	1,7,2,35,1,11
	.byte	'TREV',0,1
	.word	462
	.byte	1,6,2,35,1,11
	.byte	'FLUSH',0,1
	.word	462
	.byte	1,5,2,35,1,11
	.byte	'CEV',0,1
	.word	462
	.byte	1,4,2,35,1,11
	.byte	'reserved_12',0,1
	.word	462
	.byte	4,0,2,35,1,11
	.byte	'RPTDIS',0,1
	.word	462
	.byte	1,7,2,35,2,11
	.byte	'reserved_17',0,2
	.word	1013
	.byte	15,0,2,35,2,0,12,12,159,9,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	18929
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_VADC_G_QSR0_Bits',0,12,166,4,16,4,11
	.byte	'FILL',0,1
	.word	462
	.byte	4,4,2,35,0,11
	.byte	'reserved_4',0,1
	.word	462
	.byte	1,3,2,35,0,11
	.byte	'EMPTY',0,1
	.word	462
	.byte	1,2,2,35,0,11
	.byte	'reserved_6',0,1
	.word	462
	.byte	1,1,2,35,0,11
	.byte	'REQGT',0,1
	.word	462
	.byte	1,0,2,35,0,11
	.byte	'EV',0,1
	.word	462
	.byte	1,7,2,35,1,11
	.byte	'reserved_9',0,4
	.word	439
	.byte	23,0,2,35,0,0,12,12,167,9,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	19180
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_VADC_G_Q0R0_Bits',0,12,228,3,16,4,11
	.byte	'REQCHNR',0,1
	.word	462
	.byte	5,3,2,35,0,11
	.byte	'RF',0,1
	.word	462
	.byte	1,2,2,35,0,11
	.byte	'ENSI',0,1
	.word	462
	.byte	1,1,2,35,0,11
	.byte	'EXTR',0,1
	.word	462
	.byte	1,0,2,35,0,11
	.byte	'V',0,1
	.word	462
	.byte	1,7,2,35,1,11
	.byte	'reserved_9',0,4
	.word	439
	.byte	23,0,2,35,0,0,12,12,255,8,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	19379
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_VADC_G_QBUR0_Bits',0,12,239,3,16,4,11
	.byte	'REQCHNR',0,1
	.word	462
	.byte	5,3,2,35,0,11
	.byte	'RF',0,1
	.word	462
	.byte	1,2,2,35,0,11
	.byte	'ENSI',0,1
	.word	462
	.byte	1,1,2,35,0,11
	.byte	'EXTR',0,1
	.word	462
	.byte	1,0,2,35,0,11
	.byte	'V',0,1
	.word	462
	.byte	1,7,2,35,1,11
	.byte	'reserved_9',0,4
	.word	439
	.byte	23,0,2,35,0,0,12,12,135,9,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	19548
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_VADC_G_QINR0_Bits',0,12,141,4,16,4,11
	.byte	'REQCHNR',0,1
	.word	462
	.byte	5,3,2,35,0,11
	.byte	'RF',0,1
	.word	462
	.byte	1,2,2,35,0,11
	.byte	'ENSI',0,1
	.word	462
	.byte	1,1,2,35,0,11
	.byte	'EXTR',0,1
	.word	462
	.byte	1,0,2,35,0,11
	.byte	'reserved_8',0,4
	.word	439
	.byte	24,0,2,35,0,0,12,12,151,9,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	19718
	.byte	4,2,35,0,0,12,12,175,11,5,4,13
	.byte	'QBUR0',0
	.word	19678
	.byte	4,2,35,0,13
	.byte	'QINR0',0
	.word	19835
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_VADC_G_ASCTRL_Bits',0,12,230,1,16,4,11
	.byte	'SRCRESREG',0,1
	.word	462
	.byte	4,4,2,35,0,11
	.byte	'reserved_4',0,1
	.word	462
	.byte	4,0,2,35,0,11
	.byte	'XTSEL',0,1
	.word	462
	.byte	4,4,2,35,1,11
	.byte	'XTLVL',0,1
	.word	462
	.byte	1,3,2,35,1,11
	.byte	'XTMODE',0,1
	.word	462
	.byte	2,1,2,35,1,11
	.byte	'XTWC',0,1
	.word	462
	.byte	1,0,2,35,1,11
	.byte	'GTSEL',0,1
	.word	462
	.byte	4,4,2,35,2,11
	.byte	'GTLVL',0,1
	.word	462
	.byte	1,3,2,35,2,11
	.byte	'reserved_21',0,1
	.word	462
	.byte	2,1,2,35,2,11
	.byte	'GTWC',0,1
	.word	462
	.byte	1,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	462
	.byte	4,4,2,35,3,11
	.byte	'TMEN',0,1
	.word	462
	.byte	1,3,2,35,3,11
	.byte	'reserved_29',0,1
	.word	462
	.byte	2,1,2,35,3,11
	.byte	'TMWC',0,1
	.word	462
	.byte	1,0,2,35,3,0,12,12,255,7,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	19912
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_VADC_G_ASMR_Bits',0,12,249,1,16,4,11
	.byte	'ENGT',0,1
	.word	462
	.byte	2,6,2,35,0,11
	.byte	'ENTR',0,1
	.word	462
	.byte	1,5,2,35,0,11
	.byte	'ENSI',0,1
	.word	462
	.byte	1,4,2,35,0,11
	.byte	'SCAN',0,1
	.word	462
	.byte	1,3,2,35,0,11
	.byte	'LDM',0,1
	.word	462
	.byte	1,2,2,35,0,11
	.byte	'reserved_6',0,1
	.word	462
	.byte	1,1,2,35,0,11
	.byte	'REQGT',0,1
	.word	462
	.byte	1,0,2,35,0,11
	.byte	'CLRPND',0,1
	.word	462
	.byte	1,7,2,35,1,11
	.byte	'LDEV',0,1
	.word	462
	.byte	1,6,2,35,1,11
	.byte	'reserved_10',0,1
	.word	462
	.byte	6,0,2,35,1,11
	.byte	'RPTDIS',0,1
	.word	462
	.byte	1,7,2,35,2,11
	.byte	'reserved_17',0,2
	.word	1013
	.byte	15,0,2,35,2,0,12,12,135,8,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	20245
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_VADC_G_ASSEL_Bits',0,12,144,2,16,4,11
	.byte	'CHSEL',0,4
	.word	439
	.byte	32,0,2,35,0,0,12,12,151,8,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	20530
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_VADC_G_ASPND_Bits',0,12,138,2,16,4,11
	.byte	'CHPND',0,4
	.word	439
	.byte	32,0,2,35,0,0,12,12,143,8,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	20617
	.byte	4,2,35,0,0,15,80
	.word	462
	.byte	16,79,0,10
	.byte	'_Ifx_VADC_G_CEFLAG_Bits',0,12,236,2,16,4,11
	.byte	'CEV0',0,1
	.word	462
	.byte	1,7,2,35,0,11
	.byte	'CEV1',0,1
	.word	462
	.byte	1,6,2,35,0,11
	.byte	'CEV2',0,1
	.word	462
	.byte	1,5,2,35,0,11
	.byte	'CEV3',0,1
	.word	462
	.byte	1,4,2,35,0,11
	.byte	'CEV4',0,1
	.word	462
	.byte	1,3,2,35,0,11
	.byte	'CEV5',0,1
	.word	462
	.byte	1,2,2,35,0,11
	.byte	'CEV6',0,1
	.word	462
	.byte	1,1,2,35,0,11
	.byte	'CEV7',0,1
	.word	462
	.byte	1,0,2,35,0,11
	.byte	'CEV8',0,1
	.word	462
	.byte	1,7,2,35,1,11
	.byte	'CEV9',0,1
	.word	462
	.byte	1,6,2,35,1,11
	.byte	'CEV10',0,1
	.word	462
	.byte	1,5,2,35,1,11
	.byte	'CEV11',0,1
	.word	462
	.byte	1,4,2,35,1,11
	.byte	'CEV12',0,1
	.word	462
	.byte	1,3,2,35,1,11
	.byte	'CEV13',0,1
	.word	462
	.byte	1,2,2,35,1,11
	.byte	'CEV14',0,1
	.word	462
	.byte	1,1,2,35,1,11
	.byte	'CEV15',0,1
	.word	462
	.byte	1,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	1013
	.byte	16,0,2,35,2,0,12,12,207,8,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	20713
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_VADC_G_REFLAG_Bits',0,12,213,4,16,4,11
	.byte	'REV0',0,1
	.word	462
	.byte	1,7,2,35,0,11
	.byte	'REV1',0,1
	.word	462
	.byte	1,6,2,35,0,11
	.byte	'REV2',0,1
	.word	462
	.byte	1,5,2,35,0,11
	.byte	'REV3',0,1
	.word	462
	.byte	1,4,2,35,0,11
	.byte	'REV4',0,1
	.word	462
	.byte	1,3,2,35,0,11
	.byte	'REV5',0,1
	.word	462
	.byte	1,2,2,35,0,11
	.byte	'REV6',0,1
	.word	462
	.byte	1,1,2,35,0,11
	.byte	'REV7',0,1
	.word	462
	.byte	1,0,2,35,0,11
	.byte	'REV8',0,1
	.word	462
	.byte	1,7,2,35,1,11
	.byte	'REV9',0,1
	.word	462
	.byte	1,6,2,35,1,11
	.byte	'REV10',0,1
	.word	462
	.byte	1,5,2,35,1,11
	.byte	'REV11',0,1
	.word	462
	.byte	1,4,2,35,1,11
	.byte	'REV12',0,1
	.word	462
	.byte	1,3,2,35,1,11
	.byte	'REV13',0,1
	.word	462
	.byte	1,2,2,35,1,11
	.byte	'REV14',0,1
	.word	462
	.byte	1,1,2,35,1,11
	.byte	'REV15',0,1
	.word	462
	.byte	1,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	1013
	.byte	16,0,2,35,2,0,12,12,191,9,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	21069
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_VADC_G_SEFLAG_Bits',0,12,187,5,16,4,11
	.byte	'SEV0',0,1
	.word	462
	.byte	1,7,2,35,0,11
	.byte	'SEV1',0,1
	.word	462
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,4
	.word	439
	.byte	30,0,2,35,0,0,12,12,247,9,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	21425
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_VADC_G_CEFCLR_Bits',0,12,214,2,16,4,11
	.byte	'CEV0',0,1
	.word	462
	.byte	1,7,2,35,0,11
	.byte	'CEV1',0,1
	.word	462
	.byte	1,6,2,35,0,11
	.byte	'CEV2',0,1
	.word	462
	.byte	1,5,2,35,0,11
	.byte	'CEV3',0,1
	.word	462
	.byte	1,4,2,35,0,11
	.byte	'CEV4',0,1
	.word	462
	.byte	1,3,2,35,0,11
	.byte	'CEV5',0,1
	.word	462
	.byte	1,2,2,35,0,11
	.byte	'CEV6',0,1
	.word	462
	.byte	1,1,2,35,0,11
	.byte	'CEV7',0,1
	.word	462
	.byte	1,0,2,35,0,11
	.byte	'CEV8',0,1
	.word	462
	.byte	1,7,2,35,1,11
	.byte	'CEV9',0,1
	.word	462
	.byte	1,6,2,35,1,11
	.byte	'CEV10',0,1
	.word	462
	.byte	1,5,2,35,1,11
	.byte	'CEV11',0,1
	.word	462
	.byte	1,4,2,35,1,11
	.byte	'CEV12',0,1
	.word	462
	.byte	1,3,2,35,1,11
	.byte	'CEV13',0,1
	.word	462
	.byte	1,2,2,35,1,11
	.byte	'CEV14',0,1
	.word	462
	.byte	1,1,2,35,1,11
	.byte	'CEV15',0,1
	.word	462
	.byte	1,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	1013
	.byte	16,0,2,35,2,0,12,12,199,8,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	21550
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_VADC_G_REFCLR_Bits',0,12,191,4,16,4,11
	.byte	'REV0',0,1
	.word	462
	.byte	1,7,2,35,0,11
	.byte	'REV1',0,1
	.word	462
	.byte	1,6,2,35,0,11
	.byte	'REV2',0,1
	.word	462
	.byte	1,5,2,35,0,11
	.byte	'REV3',0,1
	.word	462
	.byte	1,4,2,35,0,11
	.byte	'REV4',0,1
	.word	462
	.byte	1,3,2,35,0,11
	.byte	'REV5',0,1
	.word	462
	.byte	1,2,2,35,0,11
	.byte	'REV6',0,1
	.word	462
	.byte	1,1,2,35,0,11
	.byte	'REV7',0,1
	.word	462
	.byte	1,0,2,35,0,11
	.byte	'REV8',0,1
	.word	462
	.byte	1,7,2,35,1,11
	.byte	'REV9',0,1
	.word	462
	.byte	1,6,2,35,1,11
	.byte	'REV10',0,1
	.word	462
	.byte	1,5,2,35,1,11
	.byte	'REV11',0,1
	.word	462
	.byte	1,4,2,35,1,11
	.byte	'REV12',0,1
	.word	462
	.byte	1,3,2,35,1,11
	.byte	'REV13',0,1
	.word	462
	.byte	1,2,2,35,1,11
	.byte	'REV14',0,1
	.word	462
	.byte	1,1,2,35,1,11
	.byte	'REV15',0,1
	.word	462
	.byte	1,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	1013
	.byte	16,0,2,35,2,0,12,12,183,9,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	21906
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_VADC_G_SEFCLR_Bits',0,12,179,5,16,4,11
	.byte	'SEV0',0,1
	.word	462
	.byte	1,7,2,35,0,11
	.byte	'SEV1',0,1
	.word	462
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,4
	.word	439
	.byte	30,0,2,35,0,0,12,12,239,9,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	22262
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_VADC_G_CEVNP0_Bits',0,12,130,3,16,4,11
	.byte	'CEV0NP',0,1
	.word	462
	.byte	4,4,2,35,0,11
	.byte	'CEV1NP',0,1
	.word	462
	.byte	4,0,2,35,0,11
	.byte	'CEV2NP',0,1
	.word	462
	.byte	4,4,2,35,1,11
	.byte	'CEV3NP',0,1
	.word	462
	.byte	4,0,2,35,1,11
	.byte	'CEV4NP',0,1
	.word	462
	.byte	4,4,2,35,2,11
	.byte	'CEV5NP',0,1
	.word	462
	.byte	4,0,2,35,2,11
	.byte	'CEV6NP',0,1
	.word	462
	.byte	4,4,2,35,3,11
	.byte	'CEV7NP',0,1
	.word	462
	.byte	4,0,2,35,3,0,12,12,215,8,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	22387
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_VADC_G_CEVNP1_Bits',0,12,143,3,16,4,11
	.byte	'CEV8NP',0,1
	.word	462
	.byte	4,4,2,35,0,11
	.byte	'CEV9NP',0,1
	.word	462
	.byte	4,0,2,35,0,11
	.byte	'CEV10NP',0,1
	.word	462
	.byte	4,4,2,35,1,11
	.byte	'CEV11NP',0,1
	.word	462
	.byte	4,0,2,35,1,11
	.byte	'CEV12NP',0,1
	.word	462
	.byte	4,4,2,35,2,11
	.byte	'CEV13NP',0,1
	.word	462
	.byte	4,0,2,35,2,11
	.byte	'CEV14NP',0,1
	.word	462
	.byte	4,4,2,35,3,11
	.byte	'CEV15NP',0,1
	.word	462
	.byte	4,0,2,35,3,0,12,12,223,8,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	22602
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_VADC_G_REVNP0_Bits',0,12,131,5,16,4,11
	.byte	'REV0NP',0,1
	.word	462
	.byte	4,4,2,35,0,11
	.byte	'REV1NP',0,1
	.word	462
	.byte	4,0,2,35,0,11
	.byte	'REV2NP',0,1
	.word	462
	.byte	4,4,2,35,1,11
	.byte	'REV3NP',0,1
	.word	462
	.byte	4,0,2,35,1,11
	.byte	'REV4NP',0,1
	.word	462
	.byte	4,4,2,35,2,11
	.byte	'REV5NP',0,1
	.word	462
	.byte	4,0,2,35,2,11
	.byte	'REV6NP',0,1
	.word	462
	.byte	4,4,2,35,3,11
	.byte	'REV7NP',0,1
	.word	462
	.byte	4,0,2,35,3,0,12,12,215,9,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	22823
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_VADC_G_REVNP1_Bits',0,12,144,5,16,4,11
	.byte	'REV8NP',0,1
	.word	462
	.byte	4,4,2,35,0,11
	.byte	'REV9NP',0,1
	.word	462
	.byte	4,0,2,35,0,11
	.byte	'REV10NP',0,1
	.word	462
	.byte	4,4,2,35,1,11
	.byte	'REV11NP',0,1
	.word	462
	.byte	4,0,2,35,1,11
	.byte	'REV12NP',0,1
	.word	462
	.byte	4,4,2,35,2,11
	.byte	'REV13NP',0,1
	.word	462
	.byte	4,0,2,35,2,11
	.byte	'REV14NP',0,1
	.word	462
	.byte	4,4,2,35,3,11
	.byte	'REV15NP',0,1
	.word	462
	.byte	4,0,2,35,3,0,12,12,223,9,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	23038
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_VADC_G_SEVNP_Bits',0,12,195,5,16,4,11
	.byte	'SEV0NP',0,1
	.word	462
	.byte	4,4,2,35,0,11
	.byte	'SEV1NP',0,1
	.word	462
	.byte	4,0,2,35,0,11
	.byte	'reserved_8',0,4
	.word	439
	.byte	24,0,2,35,0,0,12,12,255,9,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	23259
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_VADC_G_SRACT_Bits',0,12,203,5,16,4,11
	.byte	'AGSR0',0,1
	.word	462
	.byte	1,7,2,35,0,11
	.byte	'AGSR1',0,1
	.word	462
	.byte	1,6,2,35,0,11
	.byte	'AGSR2',0,1
	.word	462
	.byte	1,5,2,35,0,11
	.byte	'AGSR3',0,1
	.word	462
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,1
	.word	462
	.byte	4,0,2,35,0,11
	.byte	'ASSR0',0,1
	.word	462
	.byte	1,7,2,35,1,11
	.byte	'ASSR1',0,1
	.word	462
	.byte	1,6,2,35,1,11
	.byte	'ASSR2',0,1
	.word	462
	.byte	1,5,2,35,1,11
	.byte	'ASSR3',0,1
	.word	462
	.byte	1,4,2,35,1,11
	.byte	'reserved_12',0,4
	.word	439
	.byte	20,0,2,35,0,0,12,12,135,10,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	23387
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_VADC_G_EMUXCTR_Bits',0,12,213,3,16,4,11
	.byte	'EMUXSET',0,1
	.word	462
	.byte	3,5,2,35,0,11
	.byte	'reserved_3',0,1
	.word	462
	.byte	5,0,2,35,0,11
	.byte	'EMUXACT',0,1
	.word	462
	.byte	3,5,2,35,1,11
	.byte	'reserved_11',0,1
	.word	462
	.byte	5,0,2,35,1,11
	.byte	'EMUXCH',0,2
	.word	1013
	.byte	10,6,2,35,2,11
	.byte	'EMUXMODE',0,1
	.word	462
	.byte	2,4,2,35,3,11
	.byte	'EMXCOD',0,1
	.word	462
	.byte	1,3,2,35,3,11
	.byte	'EMXST',0,1
	.word	462
	.byte	1,2,2,35,3,11
	.byte	'EMXCSS',0,1
	.word	462
	.byte	1,1,2,35,3,11
	.byte	'EMXWC',0,1
	.word	462
	.byte	1,0,2,35,3,0
.L417:
	.byte	12,12,247,8,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	23638
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_VADC_G_VFR_Bits',0,12,229,5,16,4,11
	.byte	'VF0',0,1
	.word	462
	.byte	1,7,2,35,0,11
	.byte	'VF1',0,1
	.word	462
	.byte	1,6,2,35,0,11
	.byte	'VF2',0,1
	.word	462
	.byte	1,5,2,35,0,11
	.byte	'VF3',0,1
	.word	462
	.byte	1,4,2,35,0,11
	.byte	'VF4',0,1
	.word	462
	.byte	1,3,2,35,0,11
	.byte	'VF5',0,1
	.word	462
	.byte	1,2,2,35,0,11
	.byte	'VF6',0,1
	.word	462
	.byte	1,1,2,35,0,11
	.byte	'VF7',0,1
	.word	462
	.byte	1,0,2,35,0,11
	.byte	'VF8',0,1
	.word	462
	.byte	1,7,2,35,1,11
	.byte	'VF9',0,1
	.word	462
	.byte	1,6,2,35,1,11
	.byte	'VF10',0,1
	.word	462
	.byte	1,5,2,35,1,11
	.byte	'VF11',0,1
	.word	462
	.byte	1,4,2,35,1,11
	.byte	'VF12',0,1
	.word	462
	.byte	1,3,2,35,1,11
	.byte	'VF13',0,1
	.word	462
	.byte	1,2,2,35,1,11
	.byte	'VF14',0,1
	.word	462
	.byte	1,1,2,35,1,11
	.byte	'VF15',0,1
	.word	462
	.byte	1,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	1013
	.byte	16,0,2,35,2,0,12,12,151,10,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	23901
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_VADC_G_CHCTR_Bits',0,12,193,3,16,4,11
	.byte	'ICLSEL',0,1
	.word	462
	.byte	2,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	462
	.byte	2,4,2,35,0,11
	.byte	'BNDSELL',0,1
	.word	462
	.byte	2,2,2,35,0,11
	.byte	'BNDSELU',0,1
	.word	462
	.byte	2,0,2,35,0,11
	.byte	'CHEVMODE',0,1
	.word	462
	.byte	2,6,2,35,1,11
	.byte	'SYNC',0,1
	.word	462
	.byte	1,5,2,35,1,11
	.byte	'REFSEL',0,1
	.word	462
	.byte	1,4,2,35,1,11
	.byte	'BNDSELX',0,1
	.word	462
	.byte	4,0,2,35,1,11
	.byte	'RESREG',0,1
	.word	462
	.byte	4,4,2,35,2,11
	.byte	'RESTBS',0,1
	.word	462
	.byte	1,3,2,35,2,11
	.byte	'RESPOS',0,1
	.word	462
	.byte	1,2,2,35,2,11
	.byte	'reserved_22',0,2
	.word	1013
	.byte	6,4,2,35,2,11
	.byte	'BWDCH',0,1
	.word	462
	.byte	2,2,2,35,3,11
	.byte	'BWDEN',0,1
	.word	462
	.byte	1,1,2,35,3,11
	.byte	'reserved_31',0,1
	.word	462
	.byte	1,0,2,35,3,0,12,12,239,8,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	24238
	.byte	4,2,35,0,0,15,64
	.word	24553
	.byte	16,15,0,10
	.byte	'_Ifx_VADC_G_RCR_Bits',0,12,178,4,16,4,11
	.byte	'reserved_0',0,2
	.word	1013
	.byte	16,0,2,35,0,11
	.byte	'DRCTR',0,1
	.word	462
	.byte	4,4,2,35,2,11
	.byte	'DMM',0,1
	.word	462
	.byte	2,2,2,35,2,11
	.byte	'reserved_22',0,1
	.word	462
	.byte	2,0,2,35,2,11
	.byte	'WFR',0,1
	.word	462
	.byte	1,7,2,35,3,11
	.byte	'FEN',0,1
	.word	462
	.byte	2,5,2,35,3,11
	.byte	'reserved_27',0,1
	.word	462
	.byte	4,1,2,35,3,11
	.byte	'SRGEN',0,1
	.word	462
	.byte	1,0,2,35,3,0,12,12,175,9,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	24602
	.byte	4,2,35,0,0,15,64
	.word	24777
	.byte	16,15,0,10
	.byte	'_Ifx_VADC_G_RES_Bits',0,12,235,4,16,4,11
	.byte	'RESULT',0,2
	.word	1013
	.byte	16,0,2,35,0,11
	.byte	'DRC',0,1
	.word	462
	.byte	4,4,2,35,2,11
	.byte	'CHNR',0,2
	.word	1013
	.byte	5,7,2,35,2,11
	.byte	'EMUX',0,1
	.word	462
	.byte	3,4,2,35,3,11
	.byte	'CRS',0,1
	.word	462
	.byte	2,2,2,35,3,11
	.byte	'FCR',0,1
	.word	462
	.byte	1,1,2,35,3,11
	.byte	'VF',0,1
	.word	462
	.byte	1,0,2,35,3,0
.L267:
	.byte	12,12,199,9,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	24826
	.byte	4,2,35,0,0,15,64
	.word	24963
	.byte	16,15,0,10
	.byte	'_Ifx_VADC_G_RESD_Bits',0,12,247,4,16,4,11
	.byte	'RESULT',0,2
	.word	1013
	.byte	16,0,2,35,0,11
	.byte	'DRC',0,1
	.word	462
	.byte	4,4,2,35,2,11
	.byte	'CHNR',0,2
	.word	1013
	.byte	5,7,2,35,2,11
	.byte	'EMUX',0,1
	.word	462
	.byte	3,4,2,35,3,11
	.byte	'CRS',0,1
	.word	462
	.byte	2,2,2,35,3,11
	.byte	'FCR',0,1
	.word	462
	.byte	1,1,2,35,3,11
	.byte	'VF',0,1
	.word	462
	.byte	1,0,2,35,3,0,12,12,207,9,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	25012
	.byte	4,2,35,0,0,15,64
	.word	25150
	.byte	16,15,0,15,192,1
	.word	462
	.byte	16,191,1,0,10
	.byte	'_Ifx_VADC_G',0,12,151,11,25,128,8,13
	.byte	'ARBCFG',0
	.word	15773
	.byte	4,2,35,0,13
	.byte	'ARBPR',0
	.word	16106
	.byte	4,2,35,4,13
	.byte	'CHASS',0
	.word	16774
	.byte	4,2,35,8,13
	.byte	'RRASS',0
	.word	17161
	.byte	4,2,35,12,13
	.byte	'reserved_10',0
	.word	12899
	.byte	16,2,35,16,13
	.byte	'ICLASS',0
	.word	13130
	.byte	8,2,35,32,13
	.byte	'reserved_28',0
	.word	4633
	.byte	8,2,35,40,13
	.byte	'ALIAS',0
	.word	17312
	.byte	4,2,35,48,13
	.byte	'reserved_34',0
	.word	2814
	.byte	4,2,35,52,13
	.byte	'BOUND',0
	.word	17470
	.byte	4,2,35,56,13
	.byte	'reserved_3C',0
	.word	2814
	.byte	4,2,35,60,13
	.byte	'SYNCTR',0
	.word	17656
	.byte	4,2,35,64,13
	.byte	'reserved_44',0
	.word	2814
	.byte	4,2,35,68,13
	.byte	'BFL',0
	.word	17984
	.byte	4,2,35,72,13
	.byte	'BFLS',0
	.word	18226
	.byte	4,2,35,76,13
	.byte	'BFLC',0
	.word	18382
	.byte	4,2,35,80,13
	.byte	'BFLNP',0
	.word	18547
	.byte	4,2,35,84,13
	.byte	'reserved_58',0
	.word	18587
	.byte	40,2,35,88,13
	.byte	'QCTRL0',0
	.word	18889
	.byte	4,3,35,128,1,13
	.byte	'QMR0',0
	.word	19140
	.byte	4,3,35,132,1,13
	.byte	'QSR0',0
	.word	19339
	.byte	4,3,35,136,1,13
	.byte	'Q0R0',0
	.word	19508
	.byte	4,3,35,140,1,20
	.word	19875
	.byte	4,3,35,144,1,13
	.byte	'reserved_94',0
	.word	4973
	.byte	12,3,35,148,1,13
	.byte	'ASCTRL',0
	.word	20205
	.byte	4,3,35,160,1,13
	.byte	'ASMR',0
	.word	20490
	.byte	4,3,35,164,1,13
	.byte	'ASSEL',0
	.word	20577
	.byte	4,3,35,168,1,13
	.byte	'ASPND',0
	.word	20664
	.byte	4,3,35,172,1,13
	.byte	'reserved_B0',0
	.word	20704
	.byte	80,3,35,176,1,13
	.byte	'CEFLAG',0
	.word	21029
	.byte	4,3,35,128,2,13
	.byte	'REFLAG',0
	.word	21385
	.byte	4,3,35,132,2,13
	.byte	'SEFLAG',0
	.word	21510
	.byte	4,3,35,136,2,13
	.byte	'reserved_10C',0
	.word	2814
	.byte	4,3,35,140,2,13
	.byte	'CEFCLR',0
	.word	21866
	.byte	4,3,35,144,2,13
	.byte	'REFCLR',0
	.word	22222
	.byte	4,3,35,148,2,13
	.byte	'SEFCLR',0
	.word	22347
	.byte	4,3,35,152,2,13
	.byte	'reserved_11C',0
	.word	2814
	.byte	4,3,35,156,2,13
	.byte	'CEVNP0',0
	.word	22562
	.byte	4,3,35,160,2,13
	.byte	'CEVNP1',0
	.word	22783
	.byte	4,3,35,164,2,13
	.byte	'reserved_128',0
	.word	4633
	.byte	8,3,35,168,2,13
	.byte	'REVNP0',0
	.word	22998
	.byte	4,3,35,176,2,13
	.byte	'REVNP1',0
	.word	23219
	.byte	4,3,35,180,2,13
	.byte	'reserved_138',0
	.word	4633
	.byte	8,3,35,184,2,13
	.byte	'SEVNP',0
	.word	23347
	.byte	4,3,35,192,2,13
	.byte	'reserved_144',0
	.word	2814
	.byte	4,3,35,196,2,13
	.byte	'SRACT',0
	.word	23598
	.byte	4,3,35,200,2,13
	.byte	'reserved_14C',0
	.word	13299
	.byte	36,3,35,204,2,13
	.byte	'EMUXCTR',0
	.word	23861
	.byte	4,3,35,240,2,13
	.byte	'reserved_174',0
	.word	2814
	.byte	4,3,35,244,2,13
	.byte	'VFR',0
	.word	24198
	.byte	4,3,35,248,2,13
	.byte	'reserved_17C',0
	.word	2814
	.byte	4,3,35,252,2,13
	.byte	'CHCTR',0
	.word	24593
	.byte	64,3,35,128,3,13
	.byte	'reserved_1C0',0
	.word	12006
	.byte	64,3,35,192,3,13
	.byte	'RCR',0
	.word	24817
	.byte	64,3,35,128,4,13
	.byte	'reserved_240',0
	.word	12006
	.byte	64,3,35,192,4,13
	.byte	'RES',0
	.word	25003
	.byte	64,3,35,128,5,13
	.byte	'reserved_2C0',0
	.word	12006
	.byte	64,3,35,192,5,13
	.byte	'RESD',0
	.word	25190
	.byte	64,3,35,128,6,13
	.byte	'reserved_340',0
	.word	25199
	.byte	192,1,3,35,192,6,0,15,128,32
	.word	25210
	.byte	16,3,0,14
	.word	26285
	.byte	15,128,87
	.word	462
	.byte	16,255,86,0,10
	.byte	'_Ifx_VADC',0,12,230,11,25,128,128,1,13
	.byte	'CLC',0
	.word	10721
	.byte	4,2,35,0,13
	.byte	'reserved_4',0
	.word	2814
	.byte	4,2,35,4,13
	.byte	'ID',0
	.word	10844
	.byte	4,2,35,8,13
	.byte	'reserved_C',0
	.word	10884
	.byte	28,2,35,12,13
	.byte	'OCS',0
	.word	11060
	.byte	4,2,35,40,13
	.byte	'KRSTCLR',0
	.word	11167
	.byte	4,2,35,44,13
	.byte	'KRST1',0
	.word	11272
	.byte	4,2,35,48,13
	.byte	'KRST0',0
	.word	11396
	.byte	4,2,35,52,13
	.byte	'reserved_38',0
	.word	2814
	.byte	4,2,35,56,13
	.byte	'ACCEN0',0
	.word	11966
	.byte	4,2,35,60,13
	.byte	'reserved_40',0
	.word	12006
	.byte	64,2,35,64,13
	.byte	'GLOBCFG',0
	.word	12325
	.byte	4,3,35,128,1,13
	.byte	'reserved_84',0
	.word	2814
	.byte	4,3,35,132,1,13
	.byte	'ACCPROT0',0
	.word	12600
	.byte	4,3,35,136,1,13
	.byte	'ACCPROT1',0
	.word	12859
	.byte	4,3,35,140,1,13
	.byte	'reserved_90',0
	.word	12899
	.byte	16,3,35,144,1,13
	.byte	'GLOBICLASS',0
	.word	13130
	.byte	8,3,35,160,1,13
	.byte	'reserved_A8',0
	.word	12899
	.byte	16,3,35,168,1,13
	.byte	'GLOBBOUND',0
	.word	13259
	.byte	4,3,35,184,1,13
	.byte	'reserved_BC',0
	.word	13299
	.byte	36,3,35,188,1,13
	.byte	'GLOBEFLAG',0
	.word	13508
	.byte	4,3,35,224,1,13
	.byte	'reserved_E4',0
	.word	13548
	.byte	92,3,35,228,1,13
	.byte	'GLOBEVNP',0
	.word	13669
	.byte	4,3,35,192,2,13
	.byte	'reserved_144',0
	.word	10884
	.byte	28,3,35,196,2,13
	.byte	'GLOBTF',0
	.word	13951
	.byte	4,3,35,224,2,13
	.byte	'reserved_164',0
	.word	10884
	.byte	28,3,35,228,2,13
	.byte	'BRSSEL',0
	.word	14079
	.byte	16,3,35,128,3,13
	.byte	'reserved_190',0
	.word	14088
	.byte	48,3,35,144,3,13
	.byte	'BRSPND',0
	.word	14185
	.byte	16,3,35,192,3,13
	.byte	'reserved_1D0',0
	.word	14088
	.byte	48,3,35,208,3,13
	.byte	'BRSCTRL',0
	.word	14430
	.byte	4,3,35,128,4,13
	.byte	'BRSMR',0
	.word	14714
	.byte	4,3,35,132,4,13
	.byte	'reserved_208',0
	.word	14754
	.byte	120,3,35,136,4,13
	.byte	'GLOBRCR',0
	.word	14910
	.byte	4,3,35,128,5,13
	.byte	'reserved_284',0
	.word	14950
	.byte	124,3,35,132,5,13
	.byte	'GLOBRES',0
	.word	15098
	.byte	4,3,35,128,6,13
	.byte	'reserved_304',0
	.word	14950
	.byte	124,3,35,132,6,13
	.byte	'GLOBRESD',0
	.word	15278
	.byte	4,3,35,128,7,13
	.byte	'reserved_384',0
	.word	15318
	.byte	108,3,35,132,7,13
	.byte	'EMUXSEL',0
	.word	15419
	.byte	4,3,35,240,7,13
	.byte	'reserved_3F4',0
	.word	15459
	.byte	140,1,3,35,244,7,13
	.byte	'G',0
	.word	26295
	.byte	128,32,3,35,128,9,13
	.byte	'reserved_1480',0
	.word	26300
	.byte	128,87,3,35,128,41,0,14
	.word	26311
.L263:
	.byte	3
	.word	27163
.L375:
	.byte	8
	.byte	'IfxVadc_getAdcCalibrationActiveState',0,3,11,183,14,18
	.word	462
	.byte	1,1
.L377:
	.byte	5
	.byte	'vadc',0,11,183,14,65
	.word	27168
.L379:
	.byte	5
	.byte	'adcCalGroupNum',0,11,183,14,77
	.word	462
.L381:
	.byte	6,0
.L369:
	.byte	4
	.byte	'IfxVadc_initiateStartupCalibration',0,3,11,232,16,17,1,1
.L372:
	.byte	5
	.byte	'vadc',0,11,232,16,62
	.word	27168
.L374:
	.byte	6,0,21
	.word	455
	.byte	22
	.byte	'__c11_atomic_thread_fence',0,1,1,1,1,23
	.word	27321
	.byte	0,14
	.word	439
	.byte	3
	.word	439
	.byte	24
	.byte	'__cmpswapw',0
	.word	27363
	.byte	1,1,1,1,25
	.byte	'p',0
	.word	27368
	.byte	25
	.byte	'value',0
	.word	439
	.byte	25
	.byte	'compare',0
	.word	439
	.byte	0,24
	.byte	'__minu',0
	.word	439
	.byte	1,1,1,1,23
	.word	439
	.byte	23
	.word	439
	.byte	0,26
	.word	183
	.byte	27
	.word	209
	.byte	6,0,26
	.word	244
	.byte	27
	.word	276
	.byte	6,0,26
	.word	289
	.byte	6,0,26
	.word	358
	.byte	27
	.word	377
	.byte	6,0,26
	.word	393
	.byte	27
	.word	408
	.byte	27
	.word	422
	.byte	6,0,26
	.word	818
	.byte	27
	.word	846
	.byte	6,0,26
	.word	1583
	.byte	27
	.word	1623
	.byte	27
	.word	1641
	.byte	6,0,26
	.word	1661
	.byte	27
	.word	1699
	.byte	27
	.word	1717
	.byte	6,0,28
	.byte	'IfxScuWdt_clearCpuEndinit',0,5,217,1,17,1,1,1,1,5
	.byte	'password',0,5,217,1,50
	.word	1013
	.byte	0,28
	.byte	'IfxScuWdt_clearSafetyEndinit',0,5,229,1,17,1,1,1,1,5
	.byte	'password',0,5,229,1,53
	.word	1013
	.byte	0,28
	.byte	'IfxScuWdt_setCpuEndinit',0,5,239,1,17,1,1,1,1,5
	.byte	'password',0,5,239,1,48
	.word	1013
	.byte	0,28
	.byte	'IfxScuWdt_setSafetyEndinit',0,5,249,1,17,1,1,1,1,5
	.byte	'password',0,5,249,1,51
	.word	1013
	.byte	0,26
	.word	1737
	.byte	27
	.word	1788
	.byte	6,0,29
	.byte	'IfxScuWdt_getCpuWatchdogPassword',0,5,129,3,19
	.word	1013
	.byte	1,1,1,1,29
	.byte	'IfxScuWdt_getSafetyWatchdogPassword',0,5,143,3,19
	.word	1013
	.byte	1,1,1,1,26
	.word	9853
	.byte	27
	.word	9886
	.byte	27
	.word	9900
	.byte	27
	.word	9918
	.byte	27
	.word	9932
	.byte	6,0,26
	.word	10052
	.byte	27
	.word	10080
	.byte	27
	.word	10094
	.byte	27
	.word	10112
	.byte	6,0,26
	.word	10209
	.byte	6,0,26
	.word	10243
	.byte	6,0,26
	.word	10306
	.byte	27
	.word	10347
	.byte	6,0,26
	.word	10366
	.byte	27
	.word	10421
	.byte	6,0,26
	.word	10440
	.byte	27
	.word	10480
	.byte	27
	.word	10497
	.byte	19,6,0,0,29
	.byte	'IfxScuCcu_getSpbFrequency',0,13,179,7,20
	.word	235
	.byte	1,1,1,1
.L261:
	.byte	17,11,209,3,9,1,18
	.byte	'IfxVadc_Status_noError',0,0,18
	.byte	'IfxVadc_Status_notInitialised',0,1,18
	.byte	'IfxVadc_Status_invalidGroup',0,2,18
	.byte	'IfxVadc_Status_invalidChannel',0,3,18
	.byte	'IfxVadc_Status_queueFull',0,4,18
	.byte	'IfxVadc_Status_noAccess',0,5,18
	.byte	'IfxVadc_Status_channelsStillPending',0,6,0,14
	.word	25210
.L270:
	.byte	3
	.word	28245
.L272:
	.byte	17,11,142,1,9,1,18
	.byte	'IfxVadc_ChannelId_none',0,127,18
	.byte	'IfxVadc_ChannelId_0',0,0,18
	.byte	'IfxVadc_ChannelId_1',0,1,18
	.byte	'IfxVadc_ChannelId_2',0,2,18
	.byte	'IfxVadc_ChannelId_3',0,3,18
	.byte	'IfxVadc_ChannelId_4',0,4,18
	.byte	'IfxVadc_ChannelId_5',0,5,18
	.byte	'IfxVadc_ChannelId_6',0,6,18
	.byte	'IfxVadc_ChannelId_7',0,7,18
	.byte	'IfxVadc_ChannelId_8',0,8,18
	.byte	'IfxVadc_ChannelId_9',0,9,18
	.byte	'IfxVadc_ChannelId_10',0,10,18
	.byte	'IfxVadc_ChannelId_11',0,11,18
	.byte	'IfxVadc_ChannelId_12',0,12,18
	.byte	'IfxVadc_ChannelId_13',0,13,18
	.byte	'IfxVadc_ChannelId_14',0,14,18
	.byte	'IfxVadc_ChannelId_15',0,15,0
.L274:
	.byte	17,11,175,3,9,1,18
	.byte	'IfxVadc_RequestSource_queue',0,0,18
	.byte	'IfxVadc_RequestSource_scan',0,1,18
	.byte	'IfxVadc_RequestSource_background',0,2,0
.L276:
	.byte	7
	.byte	'long int',0,4,5,26
	.word	10516
	.byte	27
	.word	10556
	.byte	27
	.word	10581
	.byte	6,0
.L296:
	.byte	17,11,157,3,9,1,18
	.byte	'IfxVadc_RequestSlotPriority_lowest',0,0,18
	.byte	'IfxVadc_RequestSlotPriority_low',0,1,18
	.byte	'IfxVadc_RequestSlotPriority_high',0,2,18
	.byte	'IfxVadc_RequestSlotPriority_highest',0,3,0
.L298:
	.byte	17,11,167,3,9,1,18
	.byte	'IfxVadc_RequestSlotStartMode_waitForStart',0,0,18
	.byte	'IfxVadc_RequestSlotStartMode_cancelInjectRepeat',0,1,0,26
	.word	27173
	.byte	27
	.word	27222
	.byte	27
	.word	27236
	.byte	6,0,26
	.word	27262
	.byte	27
	.word	27305
	.byte	6,0
.L303:
	.byte	17,11,216,2,9,1,18
	.byte	'IfxVadc_Protection_channelControl0',0,0,18
	.byte	'IfxVadc_Protection_channelControl1',0,1,18
	.byte	'IfxVadc_Protection_channelControl2',0,2,18
	.byte	'IfxVadc_Protection_channelControl3',0,3,18
	.byte	'IfxVadc_Protection_channelControl4',0,4,18
	.byte	'IfxVadc_Protection_channelControl5',0,5,18
	.byte	'IfxVadc_Protection_channelControl6',0,6,18
	.byte	'IfxVadc_Protection_channelControl7',0,7,18
	.byte	'IfxVadc_Protection_channelControl8',0,8,18
	.byte	'IfxVadc_Protection_channelControl9',0,9,18
	.byte	'IfxVadc_Protection_channelControl10',0,10,18
	.byte	'IfxVadc_Protection_channelControl11',0,11,18
	.byte	'IfxVadc_Protection_channelControl12',0,12,18
	.byte	'IfxVadc_Protection_channelControl13',0,13,18
	.byte	'IfxVadc_Protection_channelControl14',0,14,18
	.byte	'IfxVadc_Protection_externalMultiplexer',0,15,18
	.byte	'IfxVadc_Protection_initGroup0',0,16,18
	.byte	'IfxVadc_Protection_initGroup1',0,17,18
	.byte	'IfxVadc_Protection_initGroup2',0,18,18
	.byte	'IfxVadc_Protection_initGroup3',0,19,18
	.byte	'IfxVadc_Protection_initGroup4',0,20,18
	.byte	'IfxVadc_Protection_initGroup5',0,21,18
	.byte	'IfxVadc_Protection_initGroup6',0,22,18
	.byte	'IfxVadc_Protection_initGroup7',0,23,18
	.byte	'IfxVadc_Protection_initGroup8',0,24,18
	.byte	'IfxVadc_Protection_initGroup9',0,25,18
	.byte	'IfxVadc_Protection_initGroup10',0,26,18
	.byte	'IfxVadc_Protection_initGroup11',0,27,18
	.byte	'IfxVadc_Protection_initGroup12',0,28,18
	.byte	'IfxVadc_Protection_initGroup13',0,29,18
	.byte	'IfxVadc_Protection_initGroup14',0,30,18
	.byte	'IfxVadc_Protection_globalConfig',0,31,18
	.byte	'IfxVadc_Protection_serviceGroup0',0,32,18
	.byte	'IfxVadc_Protection_serviceGroup1',0,33,18
	.byte	'IfxVadc_Protection_serviceGroup2',0,34,18
	.byte	'IfxVadc_Protection_serviceGroup3',0,35,18
	.byte	'IfxVadc_Protection_serviceGroup4',0,36,18
	.byte	'IfxVadc_Protection_serviceGroup5',0,37,18
	.byte	'IfxVadc_Protection_serviceGroup6',0,38,18
	.byte	'IfxVadc_Protection_serviceGroup7',0,39,18
	.byte	'IfxVadc_Protection_serviceGroup8',0,40,18
	.byte	'IfxVadc_Protection_serviceGroup9',0,41,18
	.byte	'IfxVadc_Protection_serviceGroup10',0,42,18
	.byte	'IfxVadc_Protection_serviceGroup11',0,43,18
	.byte	'IfxVadc_Protection_serviceGroup12',0,44,18
	.byte	'IfxVadc_Protection_serviceGroup13',0,45,18
	.byte	'IfxVadc_Protection_serviceGroup14',0,46,18
	.byte	'IfxVadc_Protection_testFunction',0,47,18
	.byte	'IfxVadc_Protection_resultRegisterGroup0',0,48,18
	.byte	'IfxVadc_Protection_resultRegisterGroup1',0,49,18
	.byte	'IfxVadc_Protection_resultRegisterGroup2',0,50,18
	.byte	'IfxVadc_Protection_resultRegisterGroup3',0,51,18
	.byte	'IfxVadc_Protection_resultRegisterGroup4',0,52,18
	.byte	'IfxVadc_Protection_resultRegisterGroup5',0,53,18
	.byte	'IfxVadc_Protection_resultRegisterGroup6',0,54,18
	.byte	'IfxVadc_Protection_resultRegisterGroup7',0,55,18
	.byte	'IfxVadc_Protection_resultRegisterGroup8',0,56,18
	.byte	'IfxVadc_Protection_resultRegisterGroup9',0,57,18
	.byte	'IfxVadc_Protection_resultRegisterGroup10',0,58,18
	.byte	'IfxVadc_Protection_resultRegisterGroup11',0,59,18
	.byte	'IfxVadc_Protection_resultRegisterGroup12',0,60,18
	.byte	'IfxVadc_Protection_resultRegisterGroup13',0,61,18
	.byte	'IfxVadc_Protection_resultRegisterGroup14',0,62,0
.L310:
	.byte	17,14,119,9,1,18
	.byte	'IfxVadc_GroupId_0',0,0,18
	.byte	'IfxVadc_GroupId_1',0,1,18
	.byte	'IfxVadc_GroupId_2',0,2,18
	.byte	'IfxVadc_GroupId_3',0,3,18
	.byte	'IfxVadc_GroupId_global0',0,4,18
	.byte	'IfxVadc_GroupId_global1',0,5,0
.L332:
	.byte	17,11,193,3,9,1,18
	.byte	'IfxVadc_SrcNr_group0',0,0,18
	.byte	'IfxVadc_SrcNr_group1',0,1,18
	.byte	'IfxVadc_SrcNr_group2',0,2,18
	.byte	'IfxVadc_SrcNr_group3',0,3,18
	.byte	'IfxVadc_SrcNr_shared0',0,4,18
	.byte	'IfxVadc_SrcNr_shared1',0,5,18
	.byte	'IfxVadc_SrcNr_shared2',0,6,18
	.byte	'IfxVadc_SrcNr_shared3',0,7,0
.L362:
	.byte	17,11,208,2,9,1,18
	.byte	'IfxVadc_LowSupplyVoltageSelect_5V',0,0,18
	.byte	'IfxVadc_LowSupplyVoltageSelect_3V',0,1,0
.L386:
	.byte	17,11,188,2,9,1,18
	.byte	'IfxVadc_InputClasses_group0',0,0,18
	.byte	'IfxVadc_InputClasses_group1',0,1,18
	.byte	'IfxVadc_InputClasses_global0',0,2,18
	.byte	'IfxVadc_InputClasses_global1',0,3,0
.L390:
	.byte	17,11,215,1,9,1,18
	.byte	'IfxVadc_ConversionType_Compatible',0,0,0
.L395:
	.byte	17,11,173,1,9,1,18
	.byte	'IfxVadc_ChannelResolution_12bit',0,0,18
	.byte	'IfxVadc_ChannelResolution_10bit',0,1,18
	.byte	'IfxVadc_ChannelResolution_8bit',0,2,18
	.byte	'IfxVadc_ChannelResolution_10bitFast',0,5,0
.L406:
	.byte	17,11,136,2,9,1,18
	.byte	'IfxVadc_ExternalMultiplexerMode_softwareControl',0,0,18
	.byte	'IfxVadc_ExternalMultiplexerMode_steady',0,1,18
	.byte	'IfxVadc_ExternalMultiplexerMode_singleStep',0,2,18
	.byte	'IfxVadc_ExternalMultiplexerMode_sequence',0,3,0
.L409:
	.byte	17,11,249,1,9,1,18
	.byte	'IfxVadc_EmuxSelectValue_0',0,0,18
	.byte	'IfxVadc_EmuxSelectValue_1',0,1,18
	.byte	'IfxVadc_EmuxSelectValue_2',0,2,18
	.byte	'IfxVadc_EmuxSelectValue_3',0,3,18
	.byte	'IfxVadc_EmuxSelectValue_4',0,4,18
	.byte	'IfxVadc_EmuxSelectValue_5',0,5,18
	.byte	'IfxVadc_EmuxSelectValue_6',0,6,18
	.byte	'IfxVadc_EmuxSelectValue_7',0,7,0
.L411:
	.byte	17,11,223,1,9,1,18
	.byte	'IfxVadc_EmuxCodingScheme_binary',0,0,18
	.byte	'IfxVadc_EmuxCodingScheme_gray',0,1,0
.L413:
	.byte	17,11,240,1,9,1,18
	.byte	'IfxVadc_EmuxSampleTimeControl_settingChanges',0,0,18
	.byte	'IfxVadc_EmuxSampleTimeControl_always',0,1,0
.L415:
	.byte	17,11,206,1,9,1,18
	.byte	'IfxVadc_ChannelSelectionStyle_channelNumber',0,0,18
	.byte	'IfxVadc_ChannelSelectionStyle_binary',0,1,0,7
	.byte	'short int',0,2,5,30
	.byte	'__wchar_t',0,15,1,1
	.word	32787
	.byte	30
	.byte	'__size_t',0,15,1,1
	.word	439
	.byte	30
	.byte	'__ptrdiff_t',0,15,1,1
	.word	455
	.byte	31,1,3
	.word	32855
	.byte	30
	.byte	'__codeptr',0,15,1,1
	.word	32857
	.byte	17,16,69,9,1,18
	.byte	'IfxSrc_Tos_cpu0',0,0,18
	.byte	'IfxSrc_Tos_cpu1',0,1,18
	.byte	'IfxSrc_Tos_dma',0,3,0,30
	.byte	'IfxSrc_Tos',0,16,74,3
	.word	32880
	.byte	30
	.byte	'boolean',0,17,101,29
	.word	462
	.byte	30
	.byte	'uint8',0,17,105,29
	.word	462
	.byte	30
	.byte	'uint16',0,17,109,29
	.word	1013
	.byte	30
	.byte	'uint32',0,17,113,29
	.word	10285
	.byte	30
	.byte	'uint64',0,17,118,29
	.word	321
	.byte	30
	.byte	'sint16',0,17,126,29
	.word	32787
	.byte	30
	.byte	'sint32',0,17,131,1,29
	.word	28746
	.byte	7
	.byte	'long long int',0,8,5,30
	.byte	'sint64',0,17,139,1,29
	.word	33064
	.byte	30
	.byte	'float32',0,17,168,1,29
	.word	235
	.byte	30
	.byte	'pvoid',0,18,57,28
	.word	353
	.byte	30
	.byte	'Ifx_TickTime',0,18,79,28
	.word	33064
	.byte	30
	.byte	'Ifx_Priority',0,18,103,16
	.word	1013
	.byte	17,18,130,1,9,1,18
	.byte	'Ifx_RxSel_a',0,0,18
	.byte	'Ifx_RxSel_b',0,1,18
	.byte	'Ifx_RxSel_c',0,2,18
	.byte	'Ifx_RxSel_d',0,3,18
	.byte	'Ifx_RxSel_e',0,4,18
	.byte	'Ifx_RxSel_f',0,5,18
	.byte	'Ifx_RxSel_g',0,6,18
	.byte	'Ifx_RxSel_h',0,7,0,30
	.byte	'Ifx_RxSel',0,18,140,1,3
	.word	33170
	.byte	30
	.byte	'Ifx_SRC_SRCR_Bits',0,4,62,3
	.word	479
	.byte	30
	.byte	'Ifx_SRC_SRCR',0,4,75,3
	.word	769
	.byte	10
	.byte	'_Ifx_SRC_AGBT',0,4,86,25,4,13
	.byte	'SR',0
	.word	769
	.byte	4,2,35,0,0,14
	.word	33355
	.byte	30
	.byte	'Ifx_SRC_AGBT',0,4,89,3
	.word	33387
	.byte	10
	.byte	'_Ifx_SRC_ASCLIN',0,4,92,25,12,13
	.byte	'TX',0
	.word	769
	.byte	4,2,35,0,13
	.byte	'RX',0
	.word	769
	.byte	4,2,35,4,13
	.byte	'ERR',0
	.word	769
	.byte	4,2,35,8,0,14
	.word	33413
	.byte	30
	.byte	'Ifx_SRC_ASCLIN',0,4,97,3
	.word	33472
	.byte	10
	.byte	'_Ifx_SRC_BCUSPB',0,4,100,25,4,13
	.byte	'SBSRC',0
	.word	769
	.byte	4,2,35,0,0,14
	.word	33500
	.byte	30
	.byte	'Ifx_SRC_BCUSPB',0,4,103,3
	.word	33537
	.byte	15,64
	.word	769
	.byte	16,15,0,10
	.byte	'_Ifx_SRC_CAN',0,4,106,25,64,13
	.byte	'INT',0
	.word	33565
	.byte	64,2,35,0,0,14
	.word	33574
	.byte	30
	.byte	'Ifx_SRC_CAN',0,4,109,3
	.word	33606
	.byte	10
	.byte	'_Ifx_SRC_CCU6',0,4,112,25,16,13
	.byte	'SR0',0
	.word	769
	.byte	4,2,35,0,13
	.byte	'SR1',0
	.word	769
	.byte	4,2,35,4,13
	.byte	'SR2',0
	.word	769
	.byte	4,2,35,8,13
	.byte	'SR3',0
	.word	769
	.byte	4,2,35,12,0,14
	.word	33631
	.byte	30
	.byte	'Ifx_SRC_CCU6',0,4,118,3
	.word	33703
	.byte	15,8
	.word	769
	.byte	16,1,0,10
	.byte	'_Ifx_SRC_CERBERUS',0,4,121,25,8,13
	.byte	'SR',0
	.word	33729
	.byte	8,2,35,0,0,14
	.word	33738
	.byte	30
	.byte	'Ifx_SRC_CERBERUS',0,4,124,3
	.word	33774
	.byte	10
	.byte	'_Ifx_SRC_CIF',0,4,127,25,16,13
	.byte	'MI',0
	.word	769
	.byte	4,2,35,0,13
	.byte	'MIEP',0
	.word	769
	.byte	4,2,35,4,13
	.byte	'ISP',0
	.word	769
	.byte	4,2,35,8,13
	.byte	'MJPEG',0
	.word	769
	.byte	4,2,35,12,0,14
	.word	33804
	.byte	30
	.byte	'Ifx_SRC_CIF',0,4,133,1,3
	.word	33877
	.byte	10
	.byte	'_Ifx_SRC_CPU',0,4,136,1,25,4,13
	.byte	'SBSRC',0
	.word	769
	.byte	4,2,35,0,0,14
	.word	33903
	.byte	30
	.byte	'Ifx_SRC_CPU',0,4,139,1,3
	.word	33938
	.byte	15,192,1
	.word	769
	.byte	16,47,0,10
	.byte	'_Ifx_SRC_DMA',0,4,142,1,25,208,1,13
	.byte	'ERR',0
	.word	769
	.byte	4,2,35,0,13
	.byte	'reserved_4',0
	.word	4973
	.byte	12,2,35,4,13
	.byte	'CH',0
	.word	33964
	.byte	192,1,2,35,16,0,14
	.word	33974
	.byte	30
	.byte	'Ifx_SRC_DMA',0,4,147,1,3
	.word	34041
	.byte	10
	.byte	'_Ifx_SRC_DSADC',0,4,150,1,25,8,13
	.byte	'SRM',0
	.word	769
	.byte	4,2,35,0,13
	.byte	'SRA',0
	.word	769
	.byte	4,2,35,4,0,14
	.word	34067
	.byte	30
	.byte	'Ifx_SRC_DSADC',0,4,154,1,3
	.word	34115
	.byte	10
	.byte	'_Ifx_SRC_EMEM',0,4,157,1,25,4,13
	.byte	'SR',0
	.word	769
	.byte	4,2,35,0,0,14
	.word	34143
	.byte	30
	.byte	'Ifx_SRC_EMEM',0,4,160,1,3
	.word	34176
	.byte	10
	.byte	'_Ifx_SRC_ERAY',0,4,163,1,25,80,13
	.byte	'INT',0
	.word	33729
	.byte	8,2,35,0,13
	.byte	'TINT',0
	.word	33729
	.byte	8,2,35,8,13
	.byte	'NDAT',0
	.word	33729
	.byte	8,2,35,16,13
	.byte	'MBSC',0
	.word	33729
	.byte	8,2,35,24,13
	.byte	'OBUSY',0
	.word	769
	.byte	4,2,35,32,13
	.byte	'IBUSY',0
	.word	769
	.byte	4,2,35,36,13
	.byte	'reserved_28',0
	.word	18587
	.byte	40,2,35,40,0,14
	.word	34203
	.byte	30
	.byte	'Ifx_SRC_ERAY',0,4,172,1,3
	.word	34330
	.byte	10
	.byte	'_Ifx_SRC_ETH',0,4,175,1,25,4,13
	.byte	'SR',0
	.word	769
	.byte	4,2,35,0,0,14
	.word	34357
	.byte	30
	.byte	'Ifx_SRC_ETH',0,4,178,1,3
	.word	34389
	.byte	10
	.byte	'_Ifx_SRC_FCE',0,4,181,1,25,4,13
	.byte	'SR',0
	.word	769
	.byte	4,2,35,0,0,14
	.word	34415
	.byte	30
	.byte	'Ifx_SRC_FCE',0,4,184,1,3
	.word	34447
	.byte	10
	.byte	'_Ifx_SRC_FFT',0,4,187,1,25,12,13
	.byte	'DONE',0
	.word	769
	.byte	4,2,35,0,13
	.byte	'ERR',0
	.word	769
	.byte	4,2,35,4,13
	.byte	'RFS',0
	.word	769
	.byte	4,2,35,8,0,14
	.word	34473
	.byte	30
	.byte	'Ifx_SRC_FFT',0,4,192,1,3
	.word	34533
	.byte	10
	.byte	'_Ifx_SRC_GPSR',0,4,195,1,25,32,13
	.byte	'SR0',0
	.word	769
	.byte	4,2,35,0,13
	.byte	'SR1',0
	.word	769
	.byte	4,2,35,4,13
	.byte	'SR2',0
	.word	769
	.byte	4,2,35,8,13
	.byte	'SR3',0
	.word	769
	.byte	4,2,35,12,13
	.byte	'reserved_10',0
	.word	12899
	.byte	16,2,35,16,0,14
	.word	34559
	.byte	30
	.byte	'Ifx_SRC_GPSR',0,4,202,1,3
	.word	34653
	.byte	10
	.byte	'_Ifx_SRC_GPT12',0,4,205,1,25,48,13
	.byte	'CIRQ',0
	.word	769
	.byte	4,2,35,0,13
	.byte	'T2',0
	.word	769
	.byte	4,2,35,4,13
	.byte	'T3',0
	.word	769
	.byte	4,2,35,8,13
	.byte	'T4',0
	.word	769
	.byte	4,2,35,12,13
	.byte	'T5',0
	.word	769
	.byte	4,2,35,16,13
	.byte	'T6',0
	.word	769
	.byte	4,2,35,20,13
	.byte	'reserved_18',0
	.word	4004
	.byte	24,2,35,24,0,14
	.word	34680
	.byte	30
	.byte	'Ifx_SRC_GPT12',0,4,214,1,3
	.word	34797
	.byte	15,12
	.word	769
	.byte	16,2,0,15,32
	.word	769
	.byte	16,7,0,15,32
	.word	34834
	.byte	16,0,0,15,88
	.word	462
	.byte	16,87,0,15,108
	.word	769
	.byte	16,26,0,15,96
	.word	462
	.byte	16,95,0,15,96
	.word	34834
	.byte	16,2,0,15,160,3
	.word	462
	.byte	16,159,3,0,15,64
	.word	34834
	.byte	16,1,0,15,192,3
	.word	462
	.byte	16,191,3,0,15,16
	.word	769
	.byte	16,3,0,15,64
	.word	34919
	.byte	16,3,0,15,192,2
	.word	462
	.byte	16,191,2,0,15,52
	.word	462
	.byte	16,51,0,10
	.byte	'_Ifx_SRC_GTM',0,4,217,1,25,204,18,13
	.byte	'AEIIRQ',0
	.word	769
	.byte	4,2,35,0,13
	.byte	'ARUIRQ',0
	.word	34825
	.byte	12,2,35,4,13
	.byte	'reserved_10',0
	.word	2814
	.byte	4,2,35,16,13
	.byte	'BRCIRQ',0
	.word	769
	.byte	4,2,35,20,13
	.byte	'CMPIRQ',0
	.word	769
	.byte	4,2,35,24,13
	.byte	'SPEIRQ',0
	.word	33729
	.byte	8,2,35,28,13
	.byte	'reserved_24',0
	.word	4633
	.byte	8,2,35,36,13
	.byte	'PSM',0
	.word	34843
	.byte	32,2,35,44,13
	.byte	'reserved_4C',0
	.word	34852
	.byte	88,2,35,76,13
	.byte	'DPLL',0
	.word	34861
	.byte	108,3,35,164,1,13
	.byte	'reserved_110',0
	.word	34870
	.byte	96,3,35,144,2,13
	.byte	'ERR',0
	.word	769
	.byte	4,3,35,240,2,13
	.byte	'reserved_174',0
	.word	4973
	.byte	12,3,35,244,2,13
	.byte	'TIM',0
	.word	34879
	.byte	96,3,35,128,3,13
	.byte	'reserved_1E0',0
	.word	34888
	.byte	160,3,3,35,224,3,13
	.byte	'MCS',0
	.word	34879
	.byte	96,3,35,128,7,13
	.byte	'reserved_3E0',0
	.word	34888
	.byte	160,3,3,35,224,7,13
	.byte	'TOM',0
	.word	34899
	.byte	64,3,35,128,11,13
	.byte	'reserved_5C0',0
	.word	34908
	.byte	192,3,3,35,192,11,13
	.byte	'ATOM',0
	.word	34928
	.byte	64,3,35,128,15,13
	.byte	'reserved_7C0',0
	.word	34937
	.byte	192,2,3,35,192,15,13
	.byte	'MCSW0',0
	.word	34825
	.byte	12,3,35,128,18,13
	.byte	'reserved_90C',0
	.word	34948
	.byte	52,3,35,140,18,13
	.byte	'MCSW1',0
	.word	34825
	.byte	12,3,35,192,18,0,14
	.word	34957
	.byte	30
	.byte	'Ifx_SRC_GTM',0,4,243,1,3
	.word	35417
	.byte	10
	.byte	'_Ifx_SRC_HSCT',0,4,246,1,25,4,13
	.byte	'SR',0
	.word	769
	.byte	4,2,35,0,0,14
	.word	35443
	.byte	30
	.byte	'Ifx_SRC_HSCT',0,4,249,1,3
	.word	35476
	.byte	10
	.byte	'_Ifx_SRC_HSSL',0,4,252,1,25,16,13
	.byte	'COK',0
	.word	769
	.byte	4,2,35,0,13
	.byte	'RDI',0
	.word	769
	.byte	4,2,35,4,13
	.byte	'ERR',0
	.word	769
	.byte	4,2,35,8,13
	.byte	'TRG',0
	.word	769
	.byte	4,2,35,12,0,14
	.word	35503
	.byte	30
	.byte	'Ifx_SRC_HSSL',0,4,130,2,3
	.word	35576
	.byte	15,56
	.word	462
	.byte	16,55,0,10
	.byte	'_Ifx_SRC_I2C',0,4,133,2,25,80,13
	.byte	'BREQ',0
	.word	769
	.byte	4,2,35,0,13
	.byte	'LBREQ',0
	.word	769
	.byte	4,2,35,4,13
	.byte	'SREQ',0
	.word	769
	.byte	4,2,35,8,13
	.byte	'LSREQ',0
	.word	769
	.byte	4,2,35,12,13
	.byte	'ERR',0
	.word	769
	.byte	4,2,35,16,13
	.byte	'P',0
	.word	769
	.byte	4,2,35,20,13
	.byte	'reserved_18',0
	.word	35603
	.byte	56,2,35,24,0,14
	.word	35612
	.byte	30
	.byte	'Ifx_SRC_I2C',0,4,142,2,3
	.word	35735
	.byte	10
	.byte	'_Ifx_SRC_LMU',0,4,145,2,25,4,13
	.byte	'SR',0
	.word	769
	.byte	4,2,35,0,0,14
	.word	35761
	.byte	30
	.byte	'Ifx_SRC_LMU',0,4,148,2,3
	.word	35793
	.byte	10
	.byte	'_Ifx_SRC_MSC',0,4,151,2,25,20,13
	.byte	'SR0',0
	.word	769
	.byte	4,2,35,0,13
	.byte	'SR1',0
	.word	769
	.byte	4,2,35,4,13
	.byte	'SR2',0
	.word	769
	.byte	4,2,35,8,13
	.byte	'SR3',0
	.word	769
	.byte	4,2,35,12,13
	.byte	'SR4',0
	.word	769
	.byte	4,2,35,16,0,14
	.word	35819
	.byte	30
	.byte	'Ifx_SRC_MSC',0,4,158,2,3
	.word	35904
	.byte	10
	.byte	'_Ifx_SRC_PMU',0,4,161,2,25,4,13
	.byte	'SR',0
	.word	769
	.byte	4,2,35,0,0,14
	.word	35930
	.byte	30
	.byte	'Ifx_SRC_PMU',0,4,164,2,3
	.word	35962
	.byte	10
	.byte	'_Ifx_SRC_PSI5',0,4,167,2,25,32,13
	.byte	'SR',0
	.word	34834
	.byte	32,2,35,0,0,14
	.word	35988
	.byte	30
	.byte	'Ifx_SRC_PSI5',0,4,170,2,3
	.word	36021
	.byte	10
	.byte	'_Ifx_SRC_PSI5S',0,4,173,2,25,32,13
	.byte	'SR',0
	.word	34834
	.byte	32,2,35,0,0,14
	.word	36048
	.byte	30
	.byte	'Ifx_SRC_PSI5S',0,4,176,2,3
	.word	36082
	.byte	10
	.byte	'_Ifx_SRC_QSPI',0,4,179,2,25,24,13
	.byte	'TX',0
	.word	769
	.byte	4,2,35,0,13
	.byte	'RX',0
	.word	769
	.byte	4,2,35,4,13
	.byte	'ERR',0
	.word	769
	.byte	4,2,35,8,13
	.byte	'PT',0
	.word	769
	.byte	4,2,35,12,13
	.byte	'HC',0
	.word	769
	.byte	4,2,35,16,13
	.byte	'U',0
	.word	769
	.byte	4,2,35,20,0,14
	.word	36110
	.byte	30
	.byte	'Ifx_SRC_QSPI',0,4,187,2,3
	.word	36203
	.byte	10
	.byte	'_Ifx_SRC_SCR',0,4,190,2,25,4,13
	.byte	'SR',0
	.word	769
	.byte	4,2,35,0,0,14
	.word	36230
	.byte	30
	.byte	'Ifx_SRC_SCR',0,4,193,2,3
	.word	36262
	.byte	10
	.byte	'_Ifx_SRC_SCU',0,4,196,2,25,20,13
	.byte	'DTS',0
	.word	769
	.byte	4,2,35,0,13
	.byte	'ERU',0
	.word	34919
	.byte	16,2,35,4,0,14
	.word	36288
	.byte	30
	.byte	'Ifx_SRC_SCU',0,4,200,2,3
	.word	36334
	.byte	15,24
	.word	769
	.byte	16,5,0,10
	.byte	'_Ifx_SRC_SENT',0,4,203,2,25,24,13
	.byte	'SR',0
	.word	36360
	.byte	24,2,35,0,0,14
	.word	36369
	.byte	30
	.byte	'Ifx_SRC_SENT',0,4,206,2,3
	.word	36402
	.byte	10
	.byte	'_Ifx_SRC_SMU',0,4,209,2,25,12,13
	.byte	'SR',0
	.word	34825
	.byte	12,2,35,0,0,14
	.word	36429
	.byte	30
	.byte	'Ifx_SRC_SMU',0,4,212,2,3
	.word	36461
	.byte	10
	.byte	'_Ifx_SRC_STM',0,4,215,2,25,8,13
	.byte	'SR0',0
	.word	769
	.byte	4,2,35,0,13
	.byte	'SR1',0
	.word	769
	.byte	4,2,35,4,0,14
	.word	36487
	.byte	30
	.byte	'Ifx_SRC_STM',0,4,219,2,3
	.word	36533
	.byte	10
	.byte	'_Ifx_SRC_VADCCG',0,4,222,2,25,16,13
	.byte	'SR0',0
	.word	769
	.byte	4,2,35,0,13
	.byte	'SR1',0
	.word	769
	.byte	4,2,35,4,13
	.byte	'SR2',0
	.word	769
	.byte	4,2,35,8,13
	.byte	'SR3',0
	.word	769
	.byte	4,2,35,12,0,14
	.word	36559
	.byte	30
	.byte	'Ifx_SRC_VADCCG',0,4,228,2,3
	.word	36634
	.byte	10
	.byte	'_Ifx_SRC_VADCG',0,4,231,2,25,16,13
	.byte	'SR0',0
	.word	769
	.byte	4,2,35,0,13
	.byte	'SR1',0
	.word	769
	.byte	4,2,35,4,13
	.byte	'SR2',0
	.word	769
	.byte	4,2,35,8,13
	.byte	'SR3',0
	.word	769
	.byte	4,2,35,12,0,14
	.word	36663
	.byte	30
	.byte	'Ifx_SRC_VADCG',0,4,237,2,3
	.word	36737
	.byte	10
	.byte	'_Ifx_SRC_XBAR',0,4,240,2,25,4,13
	.byte	'SRC',0
	.word	769
	.byte	4,2,35,0,0,14
	.word	36765
	.byte	30
	.byte	'Ifx_SRC_XBAR',0,4,243,2,3
	.word	36799
	.byte	15,4
	.word	33355
	.byte	16,0,0,14
	.word	36826
	.byte	10
	.byte	'_Ifx_SRC_GAGBT',0,4,128,3,25,4,13
	.byte	'AGBT',0
	.word	36835
	.byte	4,2,35,0,0,14
	.word	36840
	.byte	30
	.byte	'Ifx_SRC_GAGBT',0,4,131,3,3
	.word	36876
	.byte	15,48
	.word	33413
	.byte	16,3,0,14
	.word	36904
	.byte	10
	.byte	'_Ifx_SRC_GASCLIN',0,4,134,3,25,48,13
	.byte	'ASCLIN',0
	.word	36913
	.byte	48,2,35,0,0,14
	.word	36918
	.byte	30
	.byte	'Ifx_SRC_GASCLIN',0,4,137,3,3
	.word	36958
	.byte	14
	.word	33500
	.byte	10
	.byte	'_Ifx_SRC_GBCU',0,4,140,3,25,4,13
	.byte	'SPB',0
	.word	36988
	.byte	4,2,35,0,0,14
	.word	36993
	.byte	30
	.byte	'Ifx_SRC_GBCU',0,4,143,3,3
	.word	37027
	.byte	15,64
	.word	33574
	.byte	16,0,0,14
	.word	37054
	.byte	10
	.byte	'_Ifx_SRC_GCAN',0,4,146,3,25,64,13
	.byte	'CAN',0
	.word	37063
	.byte	64,2,35,0,0,14
	.word	37068
	.byte	30
	.byte	'Ifx_SRC_GCAN',0,4,149,3,3
	.word	37102
	.byte	15,32
	.word	33631
	.byte	16,1,0,14
	.word	37129
	.byte	10
	.byte	'_Ifx_SRC_GCCU6',0,4,152,3,25,32,13
	.byte	'CCU6',0
	.word	37138
	.byte	32,2,35,0,0,14
	.word	37143
	.byte	30
	.byte	'Ifx_SRC_GCCU6',0,4,155,3,3
	.word	37179
	.byte	14
	.word	33738
	.byte	10
	.byte	'_Ifx_SRC_GCERBERUS',0,4,158,3,25,8,13
	.byte	'CERBERUS',0
	.word	37207
	.byte	8,2,35,0,0,14
	.word	37212
	.byte	30
	.byte	'Ifx_SRC_GCERBERUS',0,4,161,3,3
	.word	37256
	.byte	15,16
	.word	33804
	.byte	16,0,0,14
	.word	37288
	.byte	10
	.byte	'_Ifx_SRC_GCIF',0,4,164,3,25,16,13
	.byte	'CIF',0
	.word	37297
	.byte	16,2,35,0,0,14
	.word	37302
	.byte	30
	.byte	'Ifx_SRC_GCIF',0,4,167,3,3
	.word	37336
	.byte	15,8
	.word	33903
	.byte	16,1,0,14
	.word	37363
	.byte	10
	.byte	'_Ifx_SRC_GCPU',0,4,170,3,25,8,13
	.byte	'CPU',0
	.word	37372
	.byte	8,2,35,0,0,14
	.word	37377
	.byte	30
	.byte	'Ifx_SRC_GCPU',0,4,173,3,3
	.word	37411
	.byte	15,208,1
	.word	33974
	.byte	16,0,0,14
	.word	37438
	.byte	10
	.byte	'_Ifx_SRC_GDMA',0,4,176,3,25,208,1,13
	.byte	'DMA',0
	.word	37448
	.byte	208,1,2,35,0,0,14
	.word	37453
	.byte	30
	.byte	'Ifx_SRC_GDMA',0,4,179,3,3
	.word	37489
	.byte	14
	.word	34067
	.byte	14
	.word	34067
	.byte	14
	.word	34067
	.byte	10
	.byte	'_Ifx_SRC_GDSADC',0,4,182,3,25,32,13
	.byte	'DSADC0',0
	.word	37516
	.byte	8,2,35,0,13
	.byte	'reserved_8',0
	.word	4633
	.byte	8,2,35,8,13
	.byte	'DSADC2',0
	.word	37521
	.byte	8,2,35,16,13
	.byte	'DSADC3',0
	.word	37526
	.byte	8,2,35,24,0,14
	.word	37531
	.byte	30
	.byte	'Ifx_SRC_GDSADC',0,4,188,3,3
	.word	37622
	.byte	15,4
	.word	34143
	.byte	16,0,0,14
	.word	37651
	.byte	10
	.byte	'_Ifx_SRC_GEMEM',0,4,191,3,25,4,13
	.byte	'EMEM',0
	.word	37660
	.byte	4,2,35,0,0,14
	.word	37665
	.byte	30
	.byte	'Ifx_SRC_GEMEM',0,4,194,3,3
	.word	37701
	.byte	15,80
	.word	34203
	.byte	16,0,0,14
	.word	37729
	.byte	10
	.byte	'_Ifx_SRC_GERAY',0,4,197,3,25,80,13
	.byte	'ERAY',0
	.word	37738
	.byte	80,2,35,0,0,14
	.word	37743
	.byte	30
	.byte	'Ifx_SRC_GERAY',0,4,200,3,3
	.word	37779
	.byte	15,4
	.word	34357
	.byte	16,0,0,14
	.word	37807
	.byte	10
	.byte	'_Ifx_SRC_GETH',0,4,203,3,25,4,13
	.byte	'ETH',0
	.word	37816
	.byte	4,2,35,0,0,14
	.word	37821
	.byte	30
	.byte	'Ifx_SRC_GETH',0,4,206,3,3
	.word	37855
	.byte	15,4
	.word	34415
	.byte	16,0,0,14
	.word	37882
	.byte	10
	.byte	'_Ifx_SRC_GFCE',0,4,209,3,25,4,13
	.byte	'FCE',0
	.word	37891
	.byte	4,2,35,0,0,14
	.word	37896
	.byte	30
	.byte	'Ifx_SRC_GFCE',0,4,212,3,3
	.word	37930
	.byte	15,12
	.word	34473
	.byte	16,0,0,14
	.word	37957
	.byte	10
	.byte	'_Ifx_SRC_GFFT',0,4,215,3,25,12,13
	.byte	'FFT',0
	.word	37966
	.byte	12,2,35,0,0,14
	.word	37971
	.byte	30
	.byte	'Ifx_SRC_GFFT',0,4,218,3,3
	.word	38005
	.byte	15,64
	.word	34559
	.byte	16,1,0,14
	.word	38032
	.byte	10
	.byte	'_Ifx_SRC_GGPSR',0,4,221,3,25,64,13
	.byte	'GPSR',0
	.word	38041
	.byte	64,2,35,0,0,14
	.word	38046
	.byte	30
	.byte	'Ifx_SRC_GGPSR',0,4,224,3,3
	.word	38082
	.byte	15,48
	.word	34680
	.byte	16,0,0,14
	.word	38110
	.byte	10
	.byte	'_Ifx_SRC_GGPT12',0,4,227,3,25,48,13
	.byte	'GPT12',0
	.word	38119
	.byte	48,2,35,0,0,14
	.word	38124
	.byte	30
	.byte	'Ifx_SRC_GGPT12',0,4,230,3,3
	.word	38162
	.byte	15,204,18
	.word	34957
	.byte	16,0,0,14
	.word	38191
	.byte	10
	.byte	'_Ifx_SRC_GGTM',0,4,233,3,25,204,18,13
	.byte	'GTM',0
	.word	38201
	.byte	204,18,2,35,0,0,14
	.word	38206
	.byte	30
	.byte	'Ifx_SRC_GGTM',0,4,236,3,3
	.word	38242
	.byte	15,4
	.word	35443
	.byte	16,0,0,14
	.word	38269
	.byte	10
	.byte	'_Ifx_SRC_GHSCT',0,4,239,3,25,4,13
	.byte	'HSCT',0
	.word	38278
	.byte	4,2,35,0,0,14
	.word	38283
	.byte	30
	.byte	'Ifx_SRC_GHSCT',0,4,242,3,3
	.word	38319
	.byte	15,64
	.word	35503
	.byte	16,3,0,14
	.word	38347
	.byte	10
	.byte	'_Ifx_SRC_GHSSL',0,4,245,3,25,68,13
	.byte	'HSSL',0
	.word	38356
	.byte	64,2,35,0,13
	.byte	'EXI',0
	.word	769
	.byte	4,2,35,64,0,14
	.word	38361
	.byte	30
	.byte	'Ifx_SRC_GHSSL',0,4,249,3,3
	.word	38410
	.byte	15,80
	.word	35612
	.byte	16,0,0,14
	.word	38438
	.byte	10
	.byte	'_Ifx_SRC_GI2C',0,4,252,3,25,80,13
	.byte	'I2C',0
	.word	38447
	.byte	80,2,35,0,0,14
	.word	38452
	.byte	30
	.byte	'Ifx_SRC_GI2C',0,4,255,3,3
	.word	38486
	.byte	15,4
	.word	35761
	.byte	16,0,0,14
	.word	38513
	.byte	10
	.byte	'_Ifx_SRC_GLMU',0,4,130,4,25,4,13
	.byte	'LMU',0
	.word	38522
	.byte	4,2,35,0,0,14
	.word	38527
	.byte	30
	.byte	'Ifx_SRC_GLMU',0,4,133,4,3
	.word	38561
	.byte	15,40
	.word	35819
	.byte	16,1,0,14
	.word	38588
	.byte	10
	.byte	'_Ifx_SRC_GMSC',0,4,136,4,25,40,13
	.byte	'MSC',0
	.word	38597
	.byte	40,2,35,0,0,14
	.word	38602
	.byte	30
	.byte	'Ifx_SRC_GMSC',0,4,139,4,3
	.word	38636
	.byte	15,8
	.word	35930
	.byte	16,1,0,14
	.word	38663
	.byte	10
	.byte	'_Ifx_SRC_GPMU',0,4,142,4,25,8,13
	.byte	'PMU',0
	.word	38672
	.byte	8,2,35,0,0,14
	.word	38677
	.byte	30
	.byte	'Ifx_SRC_GPMU',0,4,145,4,3
	.word	38711
	.byte	15,32
	.word	35988
	.byte	16,0,0,14
	.word	38738
	.byte	10
	.byte	'_Ifx_SRC_GPSI5',0,4,148,4,25,32,13
	.byte	'PSI5',0
	.word	38747
	.byte	32,2,35,0,0,14
	.word	38752
	.byte	30
	.byte	'Ifx_SRC_GPSI5',0,4,151,4,3
	.word	38788
	.byte	15,32
	.word	36048
	.byte	16,0,0,14
	.word	38816
	.byte	10
	.byte	'_Ifx_SRC_GPSI5S',0,4,154,4,25,32,13
	.byte	'PSI5S',0
	.word	38825
	.byte	32,2,35,0,0,14
	.word	38830
	.byte	30
	.byte	'Ifx_SRC_GPSI5S',0,4,157,4,3
	.word	38868
	.byte	15,96
	.word	36110
	.byte	16,3,0,14
	.word	38897
	.byte	10
	.byte	'_Ifx_SRC_GQSPI',0,4,160,4,25,96,13
	.byte	'QSPI',0
	.word	38906
	.byte	96,2,35,0,0,14
	.word	38911
	.byte	30
	.byte	'Ifx_SRC_GQSPI',0,4,163,4,3
	.word	38947
	.byte	15,4
	.word	36230
	.byte	16,0,0,14
	.word	38975
	.byte	10
	.byte	'_Ifx_SRC_GSCR',0,4,166,4,25,4,13
	.byte	'SCR',0
	.word	38984
	.byte	4,2,35,0,0,14
	.word	38989
	.byte	30
	.byte	'Ifx_SRC_GSCR',0,4,169,4,3
	.word	39023
	.byte	14
	.word	36288
	.byte	10
	.byte	'_Ifx_SRC_GSCU',0,4,172,4,25,20,13
	.byte	'SCU',0
	.word	39050
	.byte	20,2,35,0,0,14
	.word	39055
	.byte	30
	.byte	'Ifx_SRC_GSCU',0,4,175,4,3
	.word	39089
	.byte	15,24
	.word	36369
	.byte	16,0,0,14
	.word	39116
	.byte	10
	.byte	'_Ifx_SRC_GSENT',0,4,178,4,25,24,13
	.byte	'SENT',0
	.word	39125
	.byte	24,2,35,0,0,14
	.word	39130
	.byte	30
	.byte	'Ifx_SRC_GSENT',0,4,181,4,3
	.word	39166
	.byte	15,12
	.word	36429
	.byte	16,0,0,14
	.word	39194
	.byte	10
	.byte	'_Ifx_SRC_GSMU',0,4,184,4,25,12,13
	.byte	'SMU',0
	.word	39203
	.byte	12,2,35,0,0,14
	.word	39208
	.byte	30
	.byte	'Ifx_SRC_GSMU',0,4,187,4,3
	.word	39242
	.byte	15,16
	.word	36487
	.byte	16,1,0,14
	.word	39269
	.byte	10
	.byte	'_Ifx_SRC_GSTM',0,4,190,4,25,16,13
	.byte	'STM',0
	.word	39278
	.byte	16,2,35,0,0,14
	.word	39283
	.byte	30
	.byte	'Ifx_SRC_GSTM',0,4,193,4,3
	.word	39317
	.byte	15,64
	.word	36663
	.byte	16,3,0,14
	.word	39344
	.byte	15,224,1
	.word	462
	.byte	16,223,1,0,15,32
	.word	36559
	.byte	16,1,0,14
	.word	39369
	.byte	10
	.byte	'_Ifx_SRC_GVADC',0,4,196,4,25,192,2,13
	.byte	'G',0
	.word	39353
	.byte	64,2,35,0,13
	.byte	'reserved_40',0
	.word	39358
	.byte	224,1,2,35,64,13
	.byte	'CG',0
	.word	39378
	.byte	32,3,35,160,2,0,14
	.word	39383
	.byte	30
	.byte	'Ifx_SRC_GVADC',0,4,201,4,3
	.word	39452
	.byte	14
	.word	36765
	.byte	10
	.byte	'_Ifx_SRC_GXBAR',0,4,204,4,25,4,13
	.byte	'XBAR',0
	.word	39480
	.byte	4,2,35,0,0,14
	.word	39485
	.byte	30
	.byte	'Ifx_SRC_GXBAR',0,4,207,4,3
	.word	39521
	.byte	30
	.byte	'IfxVadc_GroupId',0,14,127,3
	.word	31382
	.byte	15,96
	.word	10285
	.byte	16,23,0,21
	.word	39573
	.byte	32
	.byte	'IfxVadc_cfg_srcAddresses',0,14,134,1,29
	.word	39582
	.byte	1,1,30
	.byte	'Ifx_VADC_ACCEN0_Bits',0,12,83,3
	.word	11436
	.byte	30
	.byte	'Ifx_VADC_ACCPROT0_Bits',0,12,100,3
	.word	12365
	.byte	30
	.byte	'Ifx_VADC_ACCPROT1_Bits',0,12,116,3
	.word	12640
	.byte	30
	.byte	'Ifx_VADC_BRSCTRL_Bits',0,12,132,1,3
	.word	14194
	.byte	30
	.byte	'Ifx_VADC_BRSMR_Bits',0,12,149,1,3
	.word	14470
	.byte	30
	.byte	'Ifx_VADC_BRSPND_Bits',0,12,155,1,3
	.word	14097
	.byte	30
	.byte	'Ifx_VADC_BRSSEL_Bits',0,12,161,1,3
	.word	13991
	.byte	30
	.byte	'Ifx_VADC_CLC_Bits',0,12,171,1,3
	.word	10603
	.byte	30
	.byte	'Ifx_VADC_EMUXSEL_Bits',0,12,179,1,3
	.word	15327
	.byte	30
	.byte	'Ifx_VADC_G_ALIAS_Bits',0,12,188,1,3
	.word	17201
	.byte	30
	.byte	'Ifx_VADC_G_ARBCFG_Bits',0,12,208,1,3
	.word	15470
	.byte	30
	.byte	'Ifx_VADC_G_ARBPR_Bits',0,12,227,1,3
	.word	15813
	.byte	30
	.byte	'Ifx_VADC_G_ASCTRL_Bits',0,12,246,1,3
	.word	19912
	.byte	30
	.byte	'Ifx_VADC_G_ASMR_Bits',0,12,135,2,3
	.word	20245
	.byte	30
	.byte	'Ifx_VADC_G_ASPND_Bits',0,12,141,2,3
	.word	20617
	.byte	30
	.byte	'Ifx_VADC_G_ASSEL_Bits',0,12,147,2,3
	.word	20530
	.byte	30
	.byte	'Ifx_VADC_G_BFL_Bits',0,12,167,2,3
	.word	17696
	.byte	30
	.byte	'Ifx_VADC_G_BFLC_Bits',0,12,177,2,3
	.word	18266
	.byte	30
	.byte	'Ifx_VADC_G_BFLNP_Bits',0,12,187,2,3
	.word	18422
	.byte	30
	.byte	'Ifx_VADC_G_BFLS_Bits',0,12,202,2,3
	.word	18024
	.byte	30
	.byte	'Ifx_VADC_G_BOUND_Bits',0,12,211,2,3
	.word	17352
	.byte	30
	.byte	'Ifx_VADC_G_CEFCLR_Bits',0,12,233,2,3
	.word	21550
	.byte	30
	.byte	'Ifx_VADC_G_CEFLAG_Bits',0,12,255,2,3
	.word	20713
	.byte	30
	.byte	'Ifx_VADC_G_CEVNP0_Bits',0,12,140,3,3
	.word	22387
	.byte	30
	.byte	'Ifx_VADC_G_CEVNP1_Bits',0,12,153,3,3
	.word	22602
	.byte	30
	.byte	'Ifx_VADC_G_CHASS_Bits',0,12,190,3,3
	.word	16146
	.byte	30
	.byte	'Ifx_VADC_G_CHCTR_Bits',0,12,210,3,3
	.word	24238
	.byte	30
	.byte	'Ifx_VADC_G_EMUXCTR_Bits',0,12,225,3,3
	.word	23638
	.byte	30
	.byte	'Ifx_VADC_G_Q0R0_Bits',0,12,236,3,3
	.word	19379
	.byte	30
	.byte	'Ifx_VADC_G_QBUR0_Bits',0,12,247,3,3
	.word	19548
	.byte	30
	.byte	'Ifx_VADC_G_QCTRL0_Bits',0,12,138,4,3
	.word	18596
	.byte	30
	.byte	'Ifx_VADC_G_QINR0_Bits',0,12,148,4,3
	.word	19718
	.byte	30
	.byte	'Ifx_VADC_G_QMR0_Bits',0,12,163,4,3
	.word	18929
	.byte	30
	.byte	'Ifx_VADC_G_QSR0_Bits',0,12,175,4,3
	.word	19180
	.byte	30
	.byte	'Ifx_VADC_G_RCR_Bits',0,12,188,4,3
	.word	24602
	.byte	30
	.byte	'Ifx_VADC_G_REFCLR_Bits',0,12,210,4,3
	.word	21906
	.byte	30
	.byte	'Ifx_VADC_G_REFLAG_Bits',0,12,232,4,3
	.word	21069
	.byte	30
	.byte	'Ifx_VADC_G_RES_Bits',0,12,244,4,3
	.word	24826
	.byte	30
	.byte	'Ifx_VADC_G_RESD_Bits',0,12,128,5,3
	.word	25012
	.byte	30
	.byte	'Ifx_VADC_G_REVNP0_Bits',0,12,141,5,3
	.word	22823
	.byte	30
	.byte	'Ifx_VADC_G_REVNP1_Bits',0,12,154,5,3
	.word	23038
	.byte	30
	.byte	'Ifx_VADC_G_RRASS_Bits',0,12,176,5,3
	.word	16814
	.byte	30
	.byte	'Ifx_VADC_G_SEFCLR_Bits',0,12,184,5,3
	.word	22262
	.byte	30
	.byte	'Ifx_VADC_G_SEFLAG_Bits',0,12,192,5,3
	.word	21425
	.byte	30
	.byte	'Ifx_VADC_G_SEVNP_Bits',0,12,200,5,3
	.word	23259
	.byte	30
	.byte	'Ifx_VADC_G_SRACT_Bits',0,12,215,5,3
	.word	23387
	.byte	30
	.byte	'Ifx_VADC_G_SYNCTR_Bits',0,12,226,5,3
	.word	17510
	.byte	30
	.byte	'Ifx_VADC_G_VFR_Bits',0,12,248,5,3
	.word	23901
	.byte	30
	.byte	'Ifx_VADC_GLOBBOUND_Bits',0,12,129,6,3
	.word	13139
	.byte	30
	.byte	'Ifx_VADC_GLOBCFG_Bits',0,12,149,6,3
	.word	12015
	.byte	30
	.byte	'Ifx_VADC_GLOBEFLAG_Bits',0,12,162,6,3
	.word	13308
	.byte	30
	.byte	'Ifx_VADC_GLOBEVNP_Bits',0,12,171,6,3
	.word	13557
	.byte	30
	.byte	'Ifx_VADC_GLOBRCR_Bits',0,12,182,6,3
	.word	14763
	.byte	30
	.byte	'Ifx_VADC_GLOBRES_Bits',0,12,194,6,3
	.word	14959
	.byte	30
	.byte	'Ifx_VADC_GLOBRESD_Bits',0,12,206,6,3
	.word	15138
	.byte	30
	.byte	'Ifx_VADC_GLOBTF_Bits',0,12,223,6,3
	.word	13709
	.byte	30
	.byte	'Ifx_VADC_ICLASS_Bits',0,12,236,6,3
	.word	12908
	.byte	30
	.byte	'Ifx_VADC_ID_Bits',0,12,244,6,3
	.word	10761
	.byte	30
	.byte	'Ifx_VADC_KRST0_Bits',0,12,252,6,3
	.word	11312
	.byte	30
	.byte	'Ifx_VADC_KRST1_Bits',0,12,131,7,3
	.word	11207
	.byte	30
	.byte	'Ifx_VADC_KRSTCLR_Bits',0,12,138,7,3
	.word	11100
	.byte	30
	.byte	'Ifx_VADC_OCS_Bits',0,12,151,7,3
	.word	10893
	.byte	30
	.byte	'Ifx_VADC_ACCEN0',0,12,164,7,3
	.word	11966
	.byte	30
	.byte	'Ifx_VADC_ACCPROT0',0,12,172,7,3
	.word	12600
	.byte	30
	.byte	'Ifx_VADC_ACCPROT1',0,12,180,7,3
	.word	12859
	.byte	30
	.byte	'Ifx_VADC_BRSCTRL',0,12,188,7,3
	.word	14430
	.byte	30
	.byte	'Ifx_VADC_BRSMR',0,12,196,7,3
	.word	14714
	.byte	30
	.byte	'Ifx_VADC_BRSPND',0,12,204,7,3
	.word	14145
	.byte	30
	.byte	'Ifx_VADC_BRSSEL',0,12,212,7,3
	.word	14039
	.byte	30
	.byte	'Ifx_VADC_CLC',0,12,220,7,3
	.word	10721
	.byte	30
	.byte	'Ifx_VADC_EMUXSEL',0,12,228,7,3
	.word	15419
	.byte	30
	.byte	'Ifx_VADC_G_ALIAS',0,12,236,7,3
	.word	17312
	.byte	30
	.byte	'Ifx_VADC_G_ARBCFG',0,12,244,7,3
	.word	15773
	.byte	30
	.byte	'Ifx_VADC_G_ARBPR',0,12,252,7,3
	.word	16106
	.byte	30
	.byte	'Ifx_VADC_G_ASCTRL',0,12,132,8,3
	.word	20205
	.byte	30
	.byte	'Ifx_VADC_G_ASMR',0,12,140,8,3
	.word	20490
	.byte	30
	.byte	'Ifx_VADC_G_ASPND',0,12,148,8,3
	.word	20664
	.byte	30
	.byte	'Ifx_VADC_G_ASSEL',0,12,156,8,3
	.word	20577
	.byte	30
	.byte	'Ifx_VADC_G_BFL',0,12,164,8,3
	.word	17984
	.byte	30
	.byte	'Ifx_VADC_G_BFLC',0,12,172,8,3
	.word	18382
	.byte	30
	.byte	'Ifx_VADC_G_BFLNP',0,12,180,8,3
	.word	18547
	.byte	30
	.byte	'Ifx_VADC_G_BFLS',0,12,188,8,3
	.word	18226
	.byte	30
	.byte	'Ifx_VADC_G_BOUND',0,12,196,8,3
	.word	17470
	.byte	30
	.byte	'Ifx_VADC_G_CEFCLR',0,12,204,8,3
	.word	21866
	.byte	30
	.byte	'Ifx_VADC_G_CEFLAG',0,12,212,8,3
	.word	21029
	.byte	30
	.byte	'Ifx_VADC_G_CEVNP0',0,12,220,8,3
	.word	22562
	.byte	30
	.byte	'Ifx_VADC_G_CEVNP1',0,12,228,8,3
	.word	22783
	.byte	30
	.byte	'Ifx_VADC_G_CHASS',0,12,236,8,3
	.word	16774
	.byte	30
	.byte	'Ifx_VADC_G_CHCTR',0,12,244,8,3
	.word	24553
	.byte	30
	.byte	'Ifx_VADC_G_EMUXCTR',0,12,252,8,3
	.word	23861
	.byte	30
	.byte	'Ifx_VADC_G_Q0R0',0,12,132,9,3
	.word	19508
	.byte	30
	.byte	'Ifx_VADC_G_QBUR0',0,12,140,9,3
	.word	19678
	.byte	30
	.byte	'Ifx_VADC_G_QCTRL0',0,12,148,9,3
	.word	18889
	.byte	30
	.byte	'Ifx_VADC_G_QINR0',0,12,156,9,3
	.word	19835
	.byte	30
	.byte	'Ifx_VADC_G_QMR0',0,12,164,9,3
	.word	19140
	.byte	30
	.byte	'Ifx_VADC_G_QSR0',0,12,172,9,3
	.word	19339
	.byte	30
	.byte	'Ifx_VADC_G_RCR',0,12,180,9,3
	.word	24777
	.byte	30
	.byte	'Ifx_VADC_G_REFCLR',0,12,188,9,3
	.word	22222
	.byte	30
	.byte	'Ifx_VADC_G_REFLAG',0,12,196,9,3
	.word	21385
	.byte	30
	.byte	'Ifx_VADC_G_RES',0,12,204,9,3
	.word	24963
	.byte	30
	.byte	'Ifx_VADC_G_RESD',0,12,212,9,3
	.word	25150
	.byte	30
	.byte	'Ifx_VADC_G_REVNP0',0,12,220,9,3
	.word	22998
	.byte	30
	.byte	'Ifx_VADC_G_REVNP1',0,12,228,9,3
	.word	23219
	.byte	30
	.byte	'Ifx_VADC_G_RRASS',0,12,236,9,3
	.word	17161
	.byte	30
	.byte	'Ifx_VADC_G_SEFCLR',0,12,244,9,3
	.word	22347
	.byte	30
	.byte	'Ifx_VADC_G_SEFLAG',0,12,252,9,3
	.word	21510
	.byte	30
	.byte	'Ifx_VADC_G_SEVNP',0,12,132,10,3
	.word	23347
	.byte	30
	.byte	'Ifx_VADC_G_SRACT',0,12,140,10,3
	.word	23598
	.byte	30
	.byte	'Ifx_VADC_G_SYNCTR',0,12,148,10,3
	.word	17656
	.byte	30
	.byte	'Ifx_VADC_G_VFR',0,12,156,10,3
	.word	24198
	.byte	30
	.byte	'Ifx_VADC_GLOBBOUND',0,12,164,10,3
	.word	13259
	.byte	30
	.byte	'Ifx_VADC_GLOBCFG',0,12,172,10,3
	.word	12325
	.byte	30
	.byte	'Ifx_VADC_GLOBEFLAG',0,12,180,10,3
	.word	13508
	.byte	30
	.byte	'Ifx_VADC_GLOBEVNP',0,12,188,10,3
	.word	13669
	.byte	30
	.byte	'Ifx_VADC_GLOBRCR',0,12,196,10,3
	.word	14910
	.byte	30
	.byte	'Ifx_VADC_GLOBRES',0,12,204,10,3
	.word	15098
	.byte	30
	.byte	'Ifx_VADC_GLOBRESD',0,12,212,10,3
	.word	15278
	.byte	30
	.byte	'Ifx_VADC_GLOBTF',0,12,220,10,3
	.word	13951
	.byte	30
	.byte	'Ifx_VADC_ICLASS',0,12,228,10,3
	.word	13090
	.byte	30
	.byte	'Ifx_VADC_ID',0,12,236,10,3
	.word	10844
	.byte	30
	.byte	'Ifx_VADC_KRST0',0,12,244,10,3
	.word	11396
	.byte	30
	.byte	'Ifx_VADC_KRST1',0,12,252,10,3
	.word	11272
	.byte	30
	.byte	'Ifx_VADC_KRSTCLR',0,12,132,11,3
	.word	11167
	.byte	30
	.byte	'Ifx_VADC_OCS',0,12,140,11,3
	.word	11060
	.byte	14
	.word	25210
	.byte	30
	.byte	'Ifx_VADC_G',0,12,217,11,3
	.word	43124
	.byte	14
	.word	26311
	.byte	30
	.byte	'Ifx_VADC',0,12,147,12,3
	.word	43149
	.byte	30
	.byte	'Ifx_P_ACCEN0_Bits',0,8,79,3
	.word	8386
	.byte	30
	.byte	'Ifx_P_ACCEN1_Bits',0,8,85,3
	.word	8299
	.byte	30
	.byte	'Ifx_P_ESR_Bits',0,8,107,3
	.word	4642
	.byte	30
	.byte	'Ifx_P_ID_Bits',0,8,115,3
	.word	2695
	.byte	30
	.byte	'Ifx_P_IN_Bits',0,8,137,1,3
	.word	3690
	.byte	30
	.byte	'Ifx_P_IOCR0_Bits',0,8,150,1,3
	.word	2823
	.byte	30
	.byte	'Ifx_P_IOCR12_Bits',0,8,163,1,3
	.word	3470
	.byte	30
	.byte	'Ifx_P_IOCR4_Bits',0,8,176,1,3
	.word	3038
	.byte	30
	.byte	'Ifx_P_IOCR8_Bits',0,8,189,1,3
	.word	3253
	.byte	30
	.byte	'Ifx_P_LPCR0_Bits',0,8,197,1,3
	.word	7658
	.byte	30
	.byte	'Ifx_P_LPCR1_Bits',0,8,205,1,3
	.word	7782
	.byte	30
	.byte	'Ifx_P_LPCR1_P21_Bits',0,8,215,1,3
	.word	7866
	.byte	30
	.byte	'Ifx_P_LPCR2_Bits',0,8,229,1,3
	.word	8046
	.byte	30
	.byte	'Ifx_P_OMCR0_Bits',0,8,240,1,3
	.word	6297
	.byte	30
	.byte	'Ifx_P_OMCR12_Bits',0,8,250,1,3
	.word	6821
	.byte	30
	.byte	'Ifx_P_OMCR4_Bits',0,8,133,2,3
	.word	6471
	.byte	30
	.byte	'Ifx_P_OMCR8_Bits',0,8,144,2,3
	.word	6645
	.byte	30
	.byte	'Ifx_P_OMCR_Bits',0,8,166,2,3
	.word	7310
	.byte	30
	.byte	'Ifx_P_OMR_Bits',0,8,203,2,3
	.word	2124
	.byte	30
	.byte	'Ifx_P_OMSR0_Bits',0,8,213,2,3
	.word	5634
	.byte	30
	.byte	'Ifx_P_OMSR12_Bits',0,8,224,2,3
	.word	6122
	.byte	30
	.byte	'Ifx_P_OMSR4_Bits',0,8,235,2,3
	.word	5781
	.byte	30
	.byte	'Ifx_P_OMSR8_Bits',0,8,246,2,3
	.word	5950
	.byte	30
	.byte	'Ifx_P_OMSR_Bits',0,8,140,3,3
	.word	6977
	.byte	30
	.byte	'Ifx_P_OUT_Bits',0,8,162,3,3
	.word	1808
	.byte	30
	.byte	'Ifx_P_PCSR_Bits',0,8,180,3,3
	.word	5348
	.byte	30
	.byte	'Ifx_P_PDISC_Bits',0,8,202,3,3
	.word	4982
	.byte	30
	.byte	'Ifx_P_PDR0_Bits',0,8,223,3,3
	.word	4013
	.byte	30
	.byte	'Ifx_P_PDR1_Bits',0,8,244,3,3
	.word	4317
	.byte	30
	.byte	'Ifx_P_ACCEN0',0,8,129,4,3
	.word	8913
	.byte	30
	.byte	'Ifx_P_ACCEN1',0,8,137,4,3
	.word	8346
	.byte	30
	.byte	'Ifx_P_ESR',0,8,145,4,3
	.word	4933
	.byte	30
	.byte	'Ifx_P_ID',0,8,153,4,3
	.word	2774
	.byte	30
	.byte	'Ifx_P_IN',0,8,161,4,3
	.word	3964
	.byte	30
	.byte	'Ifx_P_IOCR0',0,8,169,4,3
	.word	2998
	.byte	30
	.byte	'Ifx_P_IOCR12',0,8,177,4,3
	.word	3650
	.byte	30
	.byte	'Ifx_P_IOCR4',0,8,185,4,3
	.word	3213
	.byte	30
	.byte	'Ifx_P_IOCR8',0,8,193,4,3
	.word	3430
	.byte	30
	.byte	'Ifx_P_LPCR0',0,8,201,4,3
	.word	7742
	.byte	30
	.byte	'Ifx_P_LPCR1',0,8,210,4,3
	.word	7991
	.byte	30
	.byte	'Ifx_P_LPCR2',0,8,218,4,3
	.word	8250
	.byte	30
	.byte	'Ifx_P_OMCR',0,8,226,4,3
	.word	7618
	.byte	30
	.byte	'Ifx_P_OMCR0',0,8,234,4,3
	.word	6431
	.byte	30
	.byte	'Ifx_P_OMCR12',0,8,242,4,3
	.word	6937
	.byte	30
	.byte	'Ifx_P_OMCR4',0,8,250,4,3
	.word	6605
	.byte	30
	.byte	'Ifx_P_OMCR8',0,8,130,5,3
	.word	6781
	.byte	30
	.byte	'Ifx_P_OMR',0,8,138,5,3
	.word	2655
	.byte	30
	.byte	'Ifx_P_OMSR',0,8,146,5,3
	.word	7270
	.byte	30
	.byte	'Ifx_P_OMSR0',0,8,154,5,3
	.word	5741
	.byte	30
	.byte	'Ifx_P_OMSR12',0,8,162,5,3
	.word	6257
	.byte	30
	.byte	'Ifx_P_OMSR4',0,8,170,5,3
	.word	5910
	.byte	30
	.byte	'Ifx_P_OMSR8',0,8,178,5,3
	.word	6082
	.byte	30
	.byte	'Ifx_P_OUT',0,8,186,5,3
	.word	2084
	.byte	30
	.byte	'Ifx_P_PCSR',0,8,194,5,3
	.word	5594
	.byte	30
	.byte	'Ifx_P_PDISC',0,8,202,5,3
	.word	5308
	.byte	30
	.byte	'Ifx_P_PDR0',0,8,210,5,3
	.word	4277
	.byte	30
	.byte	'Ifx_P_PDR1',0,8,218,5,3
	.word	4593
	.byte	14
	.word	8953
	.byte	30
	.byte	'Ifx_P',0,8,139,6,3
	.word	44490
	.byte	17,19,236,10,9,1,18
	.byte	'IfxScu_CCUCON0_CLKSEL_fBack',0,0,18
	.byte	'IfxScu_CCUCON0_CLKSEL_fPll',0,1,0,30
	.byte	'IfxScu_CCUCON0_CLKSEL',0,19,240,10,3
	.word	44510
	.byte	17,19,250,10,9,1,18
	.byte	'IfxScu_WDTCON1_IR_divBy16384',0,0,18
	.byte	'IfxScu_WDTCON1_IR_divBy256',0,1,18
	.byte	'IfxScu_WDTCON1_IR_divBy64',0,2,0,30
	.byte	'IfxScu_WDTCON1_IR',0,19,255,10,3
	.word	44607
	.byte	10
	.byte	'_Ifx_SCU_ACCEN0_Bits',0,6,45,16,4,11
	.byte	'EN0',0,1
	.word	462
	.byte	1,7,2,35,0,11
	.byte	'EN1',0,1
	.word	462
	.byte	1,6,2,35,0,11
	.byte	'EN2',0,1
	.word	462
	.byte	1,5,2,35,0,11
	.byte	'EN3',0,1
	.word	462
	.byte	1,4,2,35,0,11
	.byte	'EN4',0,1
	.word	462
	.byte	1,3,2,35,0,11
	.byte	'EN5',0,1
	.word	462
	.byte	1,2,2,35,0,11
	.byte	'EN6',0,1
	.word	462
	.byte	1,1,2,35,0,11
	.byte	'EN7',0,1
	.word	462
	.byte	1,0,2,35,0,11
	.byte	'EN8',0,1
	.word	462
	.byte	1,7,2,35,1,11
	.byte	'EN9',0,1
	.word	462
	.byte	1,6,2,35,1,11
	.byte	'EN10',0,1
	.word	462
	.byte	1,5,2,35,1,11
	.byte	'EN11',0,1
	.word	462
	.byte	1,4,2,35,1,11
	.byte	'EN12',0,1
	.word	462
	.byte	1,3,2,35,1,11
	.byte	'EN13',0,1
	.word	462
	.byte	1,2,2,35,1,11
	.byte	'EN14',0,1
	.word	462
	.byte	1,1,2,35,1,11
	.byte	'EN15',0,1
	.word	462
	.byte	1,0,2,35,1,11
	.byte	'EN16',0,1
	.word	462
	.byte	1,7,2,35,2,11
	.byte	'EN17',0,1
	.word	462
	.byte	1,6,2,35,2,11
	.byte	'EN18',0,1
	.word	462
	.byte	1,5,2,35,2,11
	.byte	'EN19',0,1
	.word	462
	.byte	1,4,2,35,2,11
	.byte	'EN20',0,1
	.word	462
	.byte	1,3,2,35,2,11
	.byte	'EN21',0,1
	.word	462
	.byte	1,2,2,35,2,11
	.byte	'EN22',0,1
	.word	462
	.byte	1,1,2,35,2,11
	.byte	'EN23',0,1
	.word	462
	.byte	1,0,2,35,2,11
	.byte	'EN24',0,1
	.word	462
	.byte	1,7,2,35,3,11
	.byte	'EN25',0,1
	.word	462
	.byte	1,6,2,35,3,11
	.byte	'EN26',0,1
	.word	462
	.byte	1,5,2,35,3,11
	.byte	'EN27',0,1
	.word	462
	.byte	1,4,2,35,3,11
	.byte	'EN28',0,1
	.word	462
	.byte	1,3,2,35,3,11
	.byte	'EN29',0,1
	.word	462
	.byte	1,2,2,35,3,11
	.byte	'EN30',0,1
	.word	462
	.byte	1,1,2,35,3,11
	.byte	'EN31',0,1
	.word	462
	.byte	1,0,2,35,3,0,30
	.byte	'Ifx_SCU_ACCEN0_Bits',0,6,79,3
	.word	44729
	.byte	10
	.byte	'_Ifx_SCU_ACCEN1_Bits',0,6,82,16,4,11
	.byte	'reserved_0',0,4
	.word	439
	.byte	32,0,2,35,0,0,30
	.byte	'Ifx_SCU_ACCEN1_Bits',0,6,85,3
	.word	45286
	.byte	10
	.byte	'_Ifx_SCU_ARSTDIS_Bits',0,6,88,16,4,11
	.byte	'STM0DIS',0,1
	.word	462
	.byte	1,7,2,35,0,11
	.byte	'STM1DIS',0,1
	.word	462
	.byte	1,6,2,35,0,11
	.byte	'STM2DIS',0,1
	.word	462
	.byte	1,5,2,35,0,11
	.byte	'reserved_3',0,4
	.word	439
	.byte	29,0,2,35,0,0,30
	.byte	'Ifx_SCU_ARSTDIS_Bits',0,6,94,3
	.word	45363
	.byte	10
	.byte	'_Ifx_SCU_CCUCON0_Bits',0,6,97,16,4,11
	.byte	'BAUD1DIV',0,1
	.word	462
	.byte	4,4,2,35,0,11
	.byte	'BAUD2DIV',0,1
	.word	462
	.byte	4,0,2,35,0,11
	.byte	'SRIDIV',0,1
	.word	462
	.byte	4,4,2,35,1,11
	.byte	'LPDIV',0,1
	.word	462
	.byte	4,0,2,35,1,11
	.byte	'SPBDIV',0,1
	.word	462
	.byte	4,4,2,35,2,11
	.byte	'FSI2DIV',0,1
	.word	462
	.byte	2,2,2,35,2,11
	.byte	'reserved_22',0,1
	.word	462
	.byte	2,0,2,35,2,11
	.byte	'FSIDIV',0,1
	.word	462
	.byte	2,6,2,35,3,11
	.byte	'reserved_26',0,1
	.word	462
	.byte	2,4,2,35,3,11
	.byte	'CLKSEL',0,1
	.word	462
	.byte	2,2,2,35,3,11
	.byte	'UP',0,1
	.word	462
	.byte	1,1,2,35,3,11
	.byte	'LCK',0,1
	.word	462
	.byte	1,0,2,35,3,0,30
	.byte	'Ifx_SCU_CCUCON0_Bits',0,6,111,3
	.word	45499
	.byte	10
	.byte	'_Ifx_SCU_CCUCON1_Bits',0,6,114,16,4,11
	.byte	'CANDIV',0,1
	.word	462
	.byte	4,4,2,35,0,11
	.byte	'ERAYDIV',0,1
	.word	462
	.byte	4,0,2,35,0,11
	.byte	'STMDIV',0,1
	.word	462
	.byte	4,4,2,35,1,11
	.byte	'GTMDIV',0,1
	.word	462
	.byte	4,0,2,35,1,11
	.byte	'ETHDIV',0,1
	.word	462
	.byte	4,4,2,35,2,11
	.byte	'ASCLINFDIV',0,1
	.word	462
	.byte	4,0,2,35,2,11
	.byte	'ASCLINSDIV',0,1
	.word	462
	.byte	4,4,2,35,3,11
	.byte	'INSEL',0,1
	.word	462
	.byte	2,2,2,35,3,11
	.byte	'UP',0,1
	.word	462
	.byte	1,1,2,35,3,11
	.byte	'LCK',0,1
	.word	462
	.byte	1,0,2,35,3,0,30
	.byte	'Ifx_SCU_CCUCON1_Bits',0,6,126,3
	.word	45779
	.byte	10
	.byte	'_Ifx_SCU_CCUCON2_Bits',0,6,129,1,16,4,11
	.byte	'BBBDIV',0,1
	.word	462
	.byte	4,4,2,35,0,11
	.byte	'reserved_4',0,4
	.word	439
	.byte	26,2,2,35,0,11
	.byte	'UP',0,1
	.word	462
	.byte	1,1,2,35,3,11
	.byte	'LCK',0,1
	.word	462
	.byte	1,0,2,35,3,0,30
	.byte	'Ifx_SCU_CCUCON2_Bits',0,6,135,1,3
	.word	46017
	.byte	10
	.byte	'_Ifx_SCU_CCUCON3_Bits',0,6,138,1,16,4,11
	.byte	'PLLDIV',0,1
	.word	462
	.byte	6,2,2,35,0,11
	.byte	'PLLSEL',0,1
	.word	462
	.byte	2,0,2,35,0,11
	.byte	'PLLERAYDIV',0,1
	.word	462
	.byte	6,2,2,35,1,11
	.byte	'PLLERAYSEL',0,1
	.word	462
	.byte	2,0,2,35,1,11
	.byte	'SRIDIV',0,1
	.word	462
	.byte	6,2,2,35,2,11
	.byte	'SRISEL',0,1
	.word	462
	.byte	2,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	462
	.byte	5,3,2,35,3,11
	.byte	'SLCK',0,1
	.word	462
	.byte	1,2,2,35,3,11
	.byte	'UP',0,1
	.word	462
	.byte	1,1,2,35,3,11
	.byte	'LCK',0,1
	.word	462
	.byte	1,0,2,35,3,0,30
	.byte	'Ifx_SCU_CCUCON3_Bits',0,6,150,1,3
	.word	46145
	.byte	10
	.byte	'_Ifx_SCU_CCUCON4_Bits',0,6,153,1,16,4,11
	.byte	'SPBDIV',0,1
	.word	462
	.byte	6,2,2,35,0,11
	.byte	'SPBSEL',0,1
	.word	462
	.byte	2,0,2,35,0,11
	.byte	'GTMDIV',0,1
	.word	462
	.byte	6,2,2,35,1,11
	.byte	'GTMSEL',0,1
	.word	462
	.byte	2,0,2,35,1,11
	.byte	'STMDIV',0,1
	.word	462
	.byte	6,2,2,35,2,11
	.byte	'STMSEL',0,1
	.word	462
	.byte	2,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	462
	.byte	5,3,2,35,3,11
	.byte	'SLCK',0,1
	.word	462
	.byte	1,2,2,35,3,11
	.byte	'UP',0,1
	.word	462
	.byte	1,1,2,35,3,11
	.byte	'LCK',0,1
	.word	462
	.byte	1,0,2,35,3,0,30
	.byte	'Ifx_SCU_CCUCON4_Bits',0,6,165,1,3
	.word	46388
	.byte	10
	.byte	'_Ifx_SCU_CCUCON5_Bits',0,6,168,1,16,4,11
	.byte	'MAXDIV',0,1
	.word	462
	.byte	4,4,2,35,0,11
	.byte	'reserved_4',0,4
	.word	439
	.byte	26,2,2,35,0,11
	.byte	'UP',0,1
	.word	462
	.byte	1,1,2,35,3,11
	.byte	'LCK',0,1
	.word	462
	.byte	1,0,2,35,3,0,30
	.byte	'Ifx_SCU_CCUCON5_Bits',0,6,174,1,3
	.word	46623
	.byte	10
	.byte	'_Ifx_SCU_CCUCON6_Bits',0,6,177,1,16,4,11
	.byte	'CPU0DIV',0,1
	.word	462
	.byte	6,2,2,35,0,11
	.byte	'reserved_6',0,4
	.word	439
	.byte	26,0,2,35,0,0,30
	.byte	'Ifx_SCU_CCUCON6_Bits',0,6,181,1,3
	.word	46751
	.byte	10
	.byte	'_Ifx_SCU_CCUCON7_Bits',0,6,184,1,16,4,11
	.byte	'CPU1DIV',0,1
	.word	462
	.byte	6,2,2,35,0,11
	.byte	'reserved_6',0,4
	.word	439
	.byte	26,0,2,35,0,0,30
	.byte	'Ifx_SCU_CCUCON7_Bits',0,6,188,1,3
	.word	46851
	.byte	10
	.byte	'_Ifx_SCU_CHIPID_Bits',0,6,191,1,16,4,11
	.byte	'CHREV',0,1
	.word	462
	.byte	6,2,2,35,0,11
	.byte	'CHTEC',0,1
	.word	462
	.byte	2,0,2,35,0,11
	.byte	'CHID',0,1
	.word	462
	.byte	8,0,2,35,1,11
	.byte	'EEA',0,1
	.word	462
	.byte	1,7,2,35,2,11
	.byte	'UCODE',0,1
	.word	462
	.byte	7,0,2,35,2,11
	.byte	'FSIZE',0,1
	.word	462
	.byte	4,4,2,35,3,11
	.byte	'SP',0,1
	.word	462
	.byte	2,2,2,35,3,11
	.byte	'SEC',0,1
	.word	462
	.byte	1,1,2,35,3,11
	.byte	'reserved_31',0,1
	.word	462
	.byte	1,0,2,35,3,0,30
	.byte	'Ifx_SCU_CHIPID_Bits',0,6,202,1,3
	.word	46951
	.byte	10
	.byte	'_Ifx_SCU_DTSCON_Bits',0,6,205,1,16,4,11
	.byte	'PWD',0,1
	.word	462
	.byte	1,7,2,35,0,11
	.byte	'START',0,1
	.word	462
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	462
	.byte	2,4,2,35,0,11
	.byte	'CAL',0,4
	.word	439
	.byte	20,8,2,35,0,11
	.byte	'reserved_24',0,1
	.word	462
	.byte	7,1,2,35,3,11
	.byte	'SLCK',0,1
	.word	462
	.byte	1,0,2,35,3,0,30
	.byte	'Ifx_SCU_DTSCON_Bits',0,6,213,1,3
	.word	47159
	.byte	10
	.byte	'_Ifx_SCU_DTSLIM_Bits',0,6,216,1,16,4,11
	.byte	'LOWER',0,2
	.word	1013
	.byte	10,6,2,35,0,11
	.byte	'reserved_10',0,1
	.word	462
	.byte	5,1,2,35,1,11
	.byte	'LLU',0,1
	.word	462
	.byte	1,0,2,35,1,11
	.byte	'UPPER',0,2
	.word	1013
	.byte	10,6,2,35,2,11
	.byte	'reserved_26',0,1
	.word	462
	.byte	4,2,2,35,3,11
	.byte	'SLCK',0,1
	.word	462
	.byte	1,1,2,35,3,11
	.byte	'UOF',0,1
	.word	462
	.byte	1,0,2,35,3,0,30
	.byte	'Ifx_SCU_DTSLIM_Bits',0,6,225,1,3
	.word	47324
	.byte	10
	.byte	'_Ifx_SCU_DTSSTAT_Bits',0,6,228,1,16,4,11
	.byte	'RESULT',0,2
	.word	1013
	.byte	10,6,2,35,0,11
	.byte	'reserved_10',0,1
	.word	462
	.byte	4,2,2,35,1,11
	.byte	'RDY',0,1
	.word	462
	.byte	1,1,2,35,1,11
	.byte	'BUSY',0,1
	.word	462
	.byte	1,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	1013
	.byte	16,0,2,35,2,0,30
	.byte	'Ifx_SCU_DTSSTAT_Bits',0,6,235,1,3
	.word	47507
	.byte	10
	.byte	'_Ifx_SCU_EICR_Bits',0,6,238,1,16,4,11
	.byte	'reserved_0',0,1
	.word	462
	.byte	4,4,2,35,0,11
	.byte	'EXIS0',0,1
	.word	462
	.byte	3,1,2,35,0,11
	.byte	'reserved_7',0,1
	.word	462
	.byte	1,0,2,35,0,11
	.byte	'FEN0',0,1
	.word	462
	.byte	1,7,2,35,1,11
	.byte	'REN0',0,1
	.word	462
	.byte	1,6,2,35,1,11
	.byte	'LDEN0',0,1
	.word	462
	.byte	1,5,2,35,1,11
	.byte	'EIEN0',0,1
	.word	462
	.byte	1,4,2,35,1,11
	.byte	'INP0',0,1
	.word	462
	.byte	3,1,2,35,1,11
	.byte	'reserved_15',0,4
	.word	439
	.byte	5,12,2,35,0,11
	.byte	'EXIS1',0,1
	.word	462
	.byte	3,1,2,35,2,11
	.byte	'reserved_23',0,1
	.word	462
	.byte	1,0,2,35,2,11
	.byte	'FEN1',0,1
	.word	462
	.byte	1,7,2,35,3,11
	.byte	'REN1',0,1
	.word	462
	.byte	1,6,2,35,3,11
	.byte	'LDEN1',0,1
	.word	462
	.byte	1,5,2,35,3,11
	.byte	'EIEN1',0,1
	.word	462
	.byte	1,4,2,35,3,11
	.byte	'INP1',0,1
	.word	462
	.byte	3,1,2,35,3,11
	.byte	'reserved_31',0,1
	.word	462
	.byte	1,0,2,35,3,0,30
	.byte	'Ifx_SCU_EICR_Bits',0,6,129,2,3
	.word	47661
	.byte	10
	.byte	'_Ifx_SCU_EIFR_Bits',0,6,132,2,16,4,11
	.byte	'INTF0',0,1
	.word	462
	.byte	1,7,2,35,0,11
	.byte	'INTF1',0,1
	.word	462
	.byte	1,6,2,35,0,11
	.byte	'INTF2',0,1
	.word	462
	.byte	1,5,2,35,0,11
	.byte	'INTF3',0,1
	.word	462
	.byte	1,4,2,35,0,11
	.byte	'INTF4',0,1
	.word	462
	.byte	1,3,2,35,0,11
	.byte	'INTF5',0,1
	.word	462
	.byte	1,2,2,35,0,11
	.byte	'INTF6',0,1
	.word	462
	.byte	1,1,2,35,0,11
	.byte	'INTF7',0,1
	.word	462
	.byte	1,0,2,35,0,11
	.byte	'reserved_8',0,4
	.word	439
	.byte	24,0,2,35,0,0,30
	.byte	'Ifx_SCU_EIFR_Bits',0,6,143,2,3
	.word	48025
	.byte	10
	.byte	'_Ifx_SCU_EMSR_Bits',0,6,146,2,16,4,11
	.byte	'POL',0,1
	.word	462
	.byte	1,7,2,35,0,11
	.byte	'MODE',0,1
	.word	462
	.byte	1,6,2,35,0,11
	.byte	'ENON',0,1
	.word	462
	.byte	1,5,2,35,0,11
	.byte	'PSEL',0,1
	.word	462
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,2
	.word	1013
	.byte	12,0,2,35,0,11
	.byte	'EMSF',0,1
	.word	462
	.byte	1,7,2,35,2,11
	.byte	'SEMSF',0,1
	.word	462
	.byte	1,6,2,35,2,11
	.byte	'reserved_18',0,1
	.word	462
	.byte	6,0,2,35,2,11
	.byte	'EMSFM',0,1
	.word	462
	.byte	2,6,2,35,3,11
	.byte	'SEMSFM',0,1
	.word	462
	.byte	2,4,2,35,3,11
	.byte	'reserved_28',0,1
	.word	462
	.byte	4,0,2,35,3,0,30
	.byte	'Ifx_SCU_EMSR_Bits',0,6,159,2,3
	.word	48236
	.byte	10
	.byte	'_Ifx_SCU_ESRCFG_Bits',0,6,162,2,16,4,11
	.byte	'reserved_0',0,1
	.word	462
	.byte	7,1,2,35,0,11
	.byte	'EDCON',0,2
	.word	1013
	.byte	2,7,2,35,0,11
	.byte	'reserved_9',0,4
	.word	439
	.byte	23,0,2,35,0,0,30
	.byte	'Ifx_SCU_ESRCFG_Bits',0,6,167,2,3
	.word	48488
	.byte	10
	.byte	'_Ifx_SCU_ESROCFG_Bits',0,6,170,2,16,4,11
	.byte	'ARI',0,1
	.word	462
	.byte	1,7,2,35,0,11
	.byte	'ARC',0,1
	.word	462
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,4
	.word	439
	.byte	30,0,2,35,0,0,30
	.byte	'Ifx_SCU_ESROCFG_Bits',0,6,175,2,3
	.word	48606
	.byte	10
	.byte	'_Ifx_SCU_EVR13CON_Bits',0,6,178,2,16,4,11
	.byte	'reserved_0',0,4
	.word	439
	.byte	28,4,2,35,0,11
	.byte	'EVR13OFF',0,1
	.word	462
	.byte	1,3,2,35,3,11
	.byte	'BPEVR13OFF',0,1
	.word	462
	.byte	1,2,2,35,3,11
	.byte	'reserved_30',0,1
	.word	462
	.byte	1,1,2,35,3,11
	.byte	'LCK',0,1
	.word	462
	.byte	1,0,2,35,3,0,30
	.byte	'Ifx_SCU_EVR13CON_Bits',0,6,185,2,3
	.word	48717
	.byte	10
	.byte	'_Ifx_SCU_EVR33CON_Bits',0,6,188,2,16,4,11
	.byte	'reserved_0',0,4
	.word	439
	.byte	28,4,2,35,0,11
	.byte	'EVR33OFF',0,1
	.word	462
	.byte	1,3,2,35,3,11
	.byte	'BPEVR33OFF',0,1
	.word	462
	.byte	1,2,2,35,3,11
	.byte	'reserved_30',0,1
	.word	462
	.byte	1,1,2,35,3,11
	.byte	'LCK',0,1
	.word	462
	.byte	1,0,2,35,3,0,30
	.byte	'Ifx_SCU_EVR33CON_Bits',0,6,195,2,3
	.word	48880
	.byte	10
	.byte	'_Ifx_SCU_EVRADCSTAT_Bits',0,6,198,2,16,4,11
	.byte	'ADC13V',0,1
	.word	462
	.byte	8,0,2,35,0,11
	.byte	'ADC33V',0,1
	.word	462
	.byte	8,0,2,35,1,11
	.byte	'ADCSWDV',0,1
	.word	462
	.byte	8,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	462
	.byte	7,1,2,35,3,11
	.byte	'VAL',0,1
	.word	462
	.byte	1,0,2,35,3,0,30
	.byte	'Ifx_SCU_EVRADCSTAT_Bits',0,6,205,2,3
	.word	49043
	.byte	10
	.byte	'_Ifx_SCU_EVRDVSTAT_Bits',0,6,208,2,16,4,11
	.byte	'DVS13TRIM',0,1
	.word	462
	.byte	8,0,2,35,0,11
	.byte	'reserved_8',0,1
	.word	462
	.byte	8,0,2,35,1,11
	.byte	'DVS33TRIM',0,1
	.word	462
	.byte	8,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	462
	.byte	7,1,2,35,3,11
	.byte	'VAL',0,1
	.word	462
	.byte	1,0,2,35,3,0,30
	.byte	'Ifx_SCU_EVRDVSTAT_Bits',0,6,215,2,3
	.word	49201
	.byte	10
	.byte	'_Ifx_SCU_EVRMONCTRL_Bits',0,6,218,2,16,4,11
	.byte	'EVR13OVMOD',0,1
	.word	462
	.byte	2,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	462
	.byte	2,4,2,35,0,11
	.byte	'EVR13UVMOD',0,1
	.word	462
	.byte	2,2,2,35,0,11
	.byte	'reserved_6',0,1
	.word	462
	.byte	2,0,2,35,0,11
	.byte	'EVR33OVMOD',0,1
	.word	462
	.byte	2,6,2,35,1,11
	.byte	'reserved_10',0,1
	.word	462
	.byte	2,4,2,35,1,11
	.byte	'EVR33UVMOD',0,1
	.word	462
	.byte	2,2,2,35,1,11
	.byte	'reserved_14',0,1
	.word	462
	.byte	2,0,2,35,1,11
	.byte	'SWDOVMOD',0,1
	.word	462
	.byte	2,6,2,35,2,11
	.byte	'reserved_18',0,1
	.word	462
	.byte	2,4,2,35,2,11
	.byte	'SWDUVMOD',0,1
	.word	462
	.byte	2,2,2,35,2,11
	.byte	'reserved_22',0,2
	.word	1013
	.byte	10,0,2,35,2,0,30
	.byte	'Ifx_SCU_EVRMONCTRL_Bits',0,6,232,2,3
	.word	49366
	.byte	10
	.byte	'_Ifx_SCU_EVROSCCTRL_Bits',0,6,235,2,16,4,11
	.byte	'OSCTRIM',0,2
	.word	1013
	.byte	10,6,2,35,0,11
	.byte	'OSCPTAT',0,1
	.word	462
	.byte	6,0,2,35,1,11
	.byte	'OSCANASEL',0,1
	.word	462
	.byte	4,4,2,35,2,11
	.byte	'HPBGTRIM',0,2
	.word	1013
	.byte	7,5,2,35,2,11
	.byte	'HPBGCLKEN',0,1
	.word	462
	.byte	1,4,2,35,3,11
	.byte	'OSC3V3',0,1
	.word	462
	.byte	1,3,2,35,3,11
	.byte	'reserved_29',0,1
	.word	462
	.byte	2,1,2,35,3,11
	.byte	'LCK',0,1
	.word	462
	.byte	1,0,2,35,3,0,30
	.byte	'Ifx_SCU_EVROSCCTRL_Bits',0,6,245,2,3
	.word	49695
	.byte	10
	.byte	'_Ifx_SCU_EVROVMON_Bits',0,6,248,2,16,4,11
	.byte	'EVR13OVVAL',0,1
	.word	462
	.byte	8,0,2,35,0,11
	.byte	'EVR33OVVAL',0,1
	.word	462
	.byte	8,0,2,35,1,11
	.byte	'SWDOVVAL',0,1
	.word	462
	.byte	8,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	462
	.byte	7,1,2,35,3,11
	.byte	'LCK',0,1
	.word	462
	.byte	1,0,2,35,3,0,30
	.byte	'Ifx_SCU_EVROVMON_Bits',0,6,255,2,3
	.word	49916
	.byte	10
	.byte	'_Ifx_SCU_EVRRSTCON_Bits',0,6,130,3,16,4,11
	.byte	'RST13TRIM',0,1
	.word	462
	.byte	8,0,2,35,0,11
	.byte	'reserved_8',0,4
	.word	439
	.byte	16,8,2,35,0,11
	.byte	'RST13OFF',0,1
	.word	462
	.byte	1,7,2,35,3,11
	.byte	'BPRST13OFF',0,1
	.word	462
	.byte	1,6,2,35,3,11
	.byte	'RST33OFF',0,1
	.word	462
	.byte	1,5,2,35,3,11
	.byte	'BPRST33OFF',0,1
	.word	462
	.byte	1,4,2,35,3,11
	.byte	'RSTSWDOFF',0,1
	.word	462
	.byte	1,3,2,35,3,11
	.byte	'BPRSTSWDOFF',0,1
	.word	462
	.byte	1,2,2,35,3,11
	.byte	'reserved_30',0,1
	.word	462
	.byte	1,1,2,35,3,11
	.byte	'LCK',0,1
	.word	462
	.byte	1,0,2,35,3,0,30
	.byte	'Ifx_SCU_EVRRSTCON_Bits',0,6,142,3,3
	.word	50079
	.byte	10
	.byte	'_Ifx_SCU_EVRSDCOEFF1_Bits',0,6,145,3,16,4,11
	.byte	'SD5P',0,1
	.word	462
	.byte	8,0,2,35,0,11
	.byte	'SD5I',0,1
	.word	462
	.byte	8,0,2,35,1,11
	.byte	'SD5D',0,1
	.word	462
	.byte	8,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	462
	.byte	7,1,2,35,3,11
	.byte	'LCK',0,1
	.word	462
	.byte	1,0,2,35,3,0,30
	.byte	'Ifx_SCU_EVRSDCOEFF1_Bits',0,6,152,3,3
	.word	50351
	.byte	10
	.byte	'_Ifx_SCU_EVRSDCOEFF2_Bits',0,6,155,3,16,4,11
	.byte	'SD33P',0,1
	.word	462
	.byte	8,0,2,35,0,11
	.byte	'SD33I',0,1
	.word	462
	.byte	8,0,2,35,1,11
	.byte	'SD33D',0,1
	.word	462
	.byte	8,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	462
	.byte	7,1,2,35,3,11
	.byte	'LCK',0,1
	.word	462
	.byte	1,0,2,35,3,0,30
	.byte	'Ifx_SCU_EVRSDCOEFF2_Bits',0,6,162,3,3
	.word	50504
	.byte	10
	.byte	'_Ifx_SCU_EVRSDCOEFF3_Bits',0,6,165,3,16,4,11
	.byte	'CT5REG0',0,1
	.word	462
	.byte	8,0,2,35,0,11
	.byte	'CT5REG1',0,1
	.word	462
	.byte	8,0,2,35,1,11
	.byte	'CT5REG2',0,1
	.word	462
	.byte	8,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	462
	.byte	7,1,2,35,3,11
	.byte	'LCK',0,1
	.word	462
	.byte	1,0,2,35,3,0,30
	.byte	'Ifx_SCU_EVRSDCOEFF3_Bits',0,6,172,3,3
	.word	50660
	.byte	10
	.byte	'_Ifx_SCU_EVRSDCOEFF4_Bits',0,6,175,3,16,4,11
	.byte	'CT5REG3',0,1
	.word	462
	.byte	8,0,2,35,0,11
	.byte	'CT5REG4',0,1
	.word	462
	.byte	8,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	1013
	.byte	15,1,2,35,2,11
	.byte	'LCK',0,1
	.word	462
	.byte	1,0,2,35,3,0,30
	.byte	'Ifx_SCU_EVRSDCOEFF4_Bits',0,6,181,3,3
	.word	50822
	.byte	10
	.byte	'_Ifx_SCU_EVRSDCOEFF5_Bits',0,6,184,3,16,4,11
	.byte	'CT33REG0',0,1
	.word	462
	.byte	8,0,2,35,0,11
	.byte	'CT33REG1',0,1
	.word	462
	.byte	8,0,2,35,1,11
	.byte	'CT33REG2',0,1
	.word	462
	.byte	8,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	462
	.byte	7,1,2,35,3,11
	.byte	'LCK',0,1
	.word	462
	.byte	1,0,2,35,3,0,30
	.byte	'Ifx_SCU_EVRSDCOEFF5_Bits',0,6,191,3,3
	.word	50965
	.byte	10
	.byte	'_Ifx_SCU_EVRSDCOEFF6_Bits',0,6,194,3,16,4,11
	.byte	'CT33REG3',0,1
	.word	462
	.byte	8,0,2,35,0,11
	.byte	'CT33REG4',0,1
	.word	462
	.byte	8,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	1013
	.byte	15,1,2,35,2,11
	.byte	'LCK',0,1
	.word	462
	.byte	1,0,2,35,3,0,30
	.byte	'Ifx_SCU_EVRSDCOEFF6_Bits',0,6,200,3,3
	.word	51130
	.byte	10
	.byte	'_Ifx_SCU_EVRSDCTRL1_Bits',0,6,203,3,16,4,11
	.byte	'SDFREQSPRD',0,2
	.word	1013
	.byte	16,0,2,35,0,11
	.byte	'SDFREQ',0,1
	.word	462
	.byte	8,0,2,35,2,11
	.byte	'SDSTEP',0,1
	.word	462
	.byte	4,4,2,35,3,11
	.byte	'reserved_28',0,1
	.word	462
	.byte	2,2,2,35,3,11
	.byte	'SDSAMPLE',0,1
	.word	462
	.byte	1,1,2,35,3,11
	.byte	'LCK',0,1
	.word	462
	.byte	1,0,2,35,3,0,30
	.byte	'Ifx_SCU_EVRSDCTRL1_Bits',0,6,211,3,3
	.word	51275
	.byte	10
	.byte	'_Ifx_SCU_EVRSDCTRL2_Bits',0,6,214,3,16,4,11
	.byte	'DRVP',0,1
	.word	462
	.byte	8,0,2,35,0,11
	.byte	'SDMINMAXDC',0,1
	.word	462
	.byte	8,0,2,35,1,11
	.byte	'DRVN',0,1
	.word	462
	.byte	8,0,2,35,2,11
	.byte	'SDLUT',0,1
	.word	462
	.byte	6,2,2,35,3,11
	.byte	'reserved_30',0,1
	.word	462
	.byte	1,1,2,35,3,11
	.byte	'LCK',0,1
	.word	462
	.byte	1,0,2,35,3,0,30
	.byte	'Ifx_SCU_EVRSDCTRL2_Bits',0,6,222,3,3
	.word	51456
	.byte	10
	.byte	'_Ifx_SCU_EVRSDCTRL3_Bits',0,6,225,3,16,4,11
	.byte	'SDPWMPRE',0,1
	.word	462
	.byte	8,0,2,35,0,11
	.byte	'SDPID',0,1
	.word	462
	.byte	8,0,2,35,1,11
	.byte	'SDVOKLVL',0,1
	.word	462
	.byte	8,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	462
	.byte	7,1,2,35,3,11
	.byte	'LCK',0,1
	.word	462
	.byte	1,0,2,35,3,0,30
	.byte	'Ifx_SCU_EVRSDCTRL3_Bits',0,6,232,3,3
	.word	51630
	.byte	10
	.byte	'_Ifx_SCU_EVRSDCTRL4_Bits',0,6,235,3,16,4,11
	.byte	'reserved_0',0,1
	.word	462
	.byte	8,0,2,35,0,11
	.byte	'SYNCDIV',0,1
	.word	462
	.byte	3,5,2,35,1,11
	.byte	'reserved_11',0,4
	.word	439
	.byte	20,1,2,35,0,11
	.byte	'LCK',0,1
	.word	462
	.byte	1,0,2,35,3,0,30
	.byte	'Ifx_SCU_EVRSDCTRL4_Bits',0,6,241,3,3
	.word	51790
	.byte	10
	.byte	'_Ifx_SCU_EVRSTAT_Bits',0,6,244,3,16,4,11
	.byte	'EVR13',0,1
	.word	462
	.byte	1,7,2,35,0,11
	.byte	'OV13',0,1
	.word	462
	.byte	1,6,2,35,0,11
	.byte	'EVR33',0,1
	.word	462
	.byte	1,5,2,35,0,11
	.byte	'OV33',0,1
	.word	462
	.byte	1,4,2,35,0,11
	.byte	'OVSWD',0,1
	.word	462
	.byte	1,3,2,35,0,11
	.byte	'UV13',0,1
	.word	462
	.byte	1,2,2,35,0,11
	.byte	'UV33',0,1
	.word	462
	.byte	1,1,2,35,0,11
	.byte	'UVSWD',0,1
	.word	462
	.byte	1,0,2,35,0,11
	.byte	'EXTPASS13',0,1
	.word	462
	.byte	1,7,2,35,1,11
	.byte	'EXTPASS33',0,1
	.word	462
	.byte	1,6,2,35,1,11
	.byte	'BGPROK',0,1
	.word	462
	.byte	1,5,2,35,1,11
	.byte	'reserved_11',0,4
	.word	439
	.byte	21,0,2,35,0,0,30
	.byte	'Ifx_SCU_EVRSTAT_Bits',0,6,130,4,3
	.word	51934
	.byte	10
	.byte	'_Ifx_SCU_EVRTRIM_Bits',0,6,133,4,16,4,11
	.byte	'EVR13TRIM',0,1
	.word	462
	.byte	8,0,2,35,0,11
	.byte	'SDVOUTSEL',0,1
	.word	462
	.byte	8,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	1013
	.byte	15,1,2,35,2,11
	.byte	'LCK',0,1
	.word	462
	.byte	1,0,2,35,3,0,30
	.byte	'Ifx_SCU_EVRTRIM_Bits',0,6,139,4,3
	.word	52208
	.byte	10
	.byte	'_Ifx_SCU_EVRUVMON_Bits',0,6,142,4,16,4,11
	.byte	'EVR13UVVAL',0,1
	.word	462
	.byte	8,0,2,35,0,11
	.byte	'EVR33UVVAL',0,1
	.word	462
	.byte	8,0,2,35,1,11
	.byte	'SWDUVVAL',0,1
	.word	462
	.byte	8,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	462
	.byte	7,1,2,35,3,11
	.byte	'LCK',0,1
	.word	462
	.byte	1,0,2,35,3,0,30
	.byte	'Ifx_SCU_EVRUVMON_Bits',0,6,149,4,3
	.word	52347
	.byte	10
	.byte	'_Ifx_SCU_EXTCON_Bits',0,6,152,4,16,4,11
	.byte	'EN0',0,1
	.word	462
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,1
	.word	462
	.byte	1,6,2,35,0,11
	.byte	'SEL0',0,1
	.word	462
	.byte	4,2,2,35,0,11
	.byte	'reserved_6',0,2
	.word	1013
	.byte	10,0,2,35,0,11
	.byte	'EN1',0,1
	.word	462
	.byte	1,7,2,35,2,11
	.byte	'NSEL',0,1
	.word	462
	.byte	1,6,2,35,2,11
	.byte	'SEL1',0,1
	.word	462
	.byte	4,2,2,35,2,11
	.byte	'reserved_22',0,1
	.word	462
	.byte	2,0,2,35,2,11
	.byte	'DIV1',0,1
	.word	462
	.byte	8,0,2,35,3,0,30
	.byte	'Ifx_SCU_EXTCON_Bits',0,6,163,4,3
	.word	52510
	.byte	10
	.byte	'_Ifx_SCU_FDR_Bits',0,6,166,4,16,4,11
	.byte	'STEP',0,2
	.word	1013
	.byte	10,6,2,35,0,11
	.byte	'reserved_10',0,1
	.word	462
	.byte	4,2,2,35,1,11
	.byte	'DM',0,1
	.word	462
	.byte	2,0,2,35,1,11
	.byte	'RESULT',0,2
	.word	1013
	.byte	10,6,2,35,2,11
	.byte	'reserved_26',0,1
	.word	462
	.byte	5,1,2,35,3,11
	.byte	'DISCLK',0,1
	.word	462
	.byte	1,0,2,35,3,0,30
	.byte	'Ifx_SCU_FDR_Bits',0,6,174,4,3
	.word	52728
	.byte	10
	.byte	'_Ifx_SCU_FMR_Bits',0,6,177,4,16,4,11
	.byte	'FS0',0,1
	.word	462
	.byte	1,7,2,35,0,11
	.byte	'FS1',0,1
	.word	462
	.byte	1,6,2,35,0,11
	.byte	'FS2',0,1
	.word	462
	.byte	1,5,2,35,0,11
	.byte	'FS3',0,1
	.word	462
	.byte	1,4,2,35,0,11
	.byte	'FS4',0,1
	.word	462
	.byte	1,3,2,35,0,11
	.byte	'FS5',0,1
	.word	462
	.byte	1,2,2,35,0,11
	.byte	'FS6',0,1
	.word	462
	.byte	1,1,2,35,0,11
	.byte	'FS7',0,1
	.word	462
	.byte	1,0,2,35,0,11
	.byte	'reserved_8',0,1
	.word	462
	.byte	8,0,2,35,1,11
	.byte	'FC0',0,1
	.word	462
	.byte	1,7,2,35,2,11
	.byte	'FC1',0,1
	.word	462
	.byte	1,6,2,35,2,11
	.byte	'FC2',0,1
	.word	462
	.byte	1,5,2,35,2,11
	.byte	'FC3',0,1
	.word	462
	.byte	1,4,2,35,2,11
	.byte	'FC4',0,1
	.word	462
	.byte	1,3,2,35,2,11
	.byte	'FC5',0,1
	.word	462
	.byte	1,2,2,35,2,11
	.byte	'FC6',0,1
	.word	462
	.byte	1,1,2,35,2,11
	.byte	'FC7',0,1
	.word	462
	.byte	1,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	462
	.byte	8,0,2,35,3,0,30
	.byte	'Ifx_SCU_FMR_Bits',0,6,197,4,3
	.word	52891
	.byte	10
	.byte	'_Ifx_SCU_ID_Bits',0,6,200,4,16,4,11
	.byte	'MODREV',0,1
	.word	462
	.byte	8,0,2,35,0,11
	.byte	'MODTYPE',0,1
	.word	462
	.byte	8,0,2,35,1,11
	.byte	'MODNUMBER',0,2
	.word	1013
	.byte	16,0,2,35,2,0,30
	.byte	'Ifx_SCU_ID_Bits',0,6,205,4,3
	.word	53227
	.byte	10
	.byte	'_Ifx_SCU_IGCR_Bits',0,6,208,4,16,4,11
	.byte	'IPEN00',0,1
	.word	462
	.byte	1,7,2,35,0,11
	.byte	'IPEN01',0,1
	.word	462
	.byte	1,6,2,35,0,11
	.byte	'IPEN02',0,1
	.word	462
	.byte	1,5,2,35,0,11
	.byte	'IPEN03',0,1
	.word	462
	.byte	1,4,2,35,0,11
	.byte	'IPEN04',0,1
	.word	462
	.byte	1,3,2,35,0,11
	.byte	'IPEN05',0,1
	.word	462
	.byte	1,2,2,35,0,11
	.byte	'IPEN06',0,1
	.word	462
	.byte	1,1,2,35,0,11
	.byte	'IPEN07',0,1
	.word	462
	.byte	1,0,2,35,0,11
	.byte	'reserved_8',0,1
	.word	462
	.byte	5,3,2,35,1,11
	.byte	'GEEN0',0,1
	.word	462
	.byte	1,2,2,35,1,11
	.byte	'IGP0',0,1
	.word	462
	.byte	2,0,2,35,1,11
	.byte	'IPEN10',0,1
	.word	462
	.byte	1,7,2,35,2,11
	.byte	'IPEN11',0,1
	.word	462
	.byte	1,6,2,35,2,11
	.byte	'IPEN12',0,1
	.word	462
	.byte	1,5,2,35,2,11
	.byte	'IPEN13',0,1
	.word	462
	.byte	1,4,2,35,2,11
	.byte	'IPEN14',0,1
	.word	462
	.byte	1,3,2,35,2,11
	.byte	'IPEN15',0,1
	.word	462
	.byte	1,2,2,35,2,11
	.byte	'IPEN16',0,1
	.word	462
	.byte	1,1,2,35,2,11
	.byte	'IPEN17',0,1
	.word	462
	.byte	1,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	462
	.byte	5,3,2,35,3,11
	.byte	'GEEN1',0,1
	.word	462
	.byte	1,2,2,35,3,11
	.byte	'IGP1',0,1
	.word	462
	.byte	2,0,2,35,3,0,30
	.byte	'Ifx_SCU_IGCR_Bits',0,6,232,4,3
	.word	53334
	.byte	10
	.byte	'_Ifx_SCU_IN_Bits',0,6,235,4,16,4,11
	.byte	'P0',0,1
	.word	462
	.byte	1,7,2,35,0,11
	.byte	'P1',0,1
	.word	462
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,4
	.word	439
	.byte	30,0,2,35,0,0,30
	.byte	'Ifx_SCU_IN_Bits',0,6,240,4,3
	.word	53786
	.byte	10
	.byte	'_Ifx_SCU_IOCR_Bits',0,6,243,4,16,4,11
	.byte	'reserved_0',0,1
	.word	462
	.byte	4,4,2,35,0,11
	.byte	'PC0',0,1
	.word	462
	.byte	4,0,2,35,0,11
	.byte	'reserved_8',0,1
	.word	462
	.byte	4,4,2,35,1,11
	.byte	'PC1',0,1
	.word	462
	.byte	4,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	1013
	.byte	16,0,2,35,2,0,30
	.byte	'Ifx_SCU_IOCR_Bits',0,6,250,4,3
	.word	53885
	.byte	10
	.byte	'_Ifx_SCU_LBISTCTRL0_Bits',0,6,253,4,16,4,11
	.byte	'LBISTREQ',0,1
	.word	462
	.byte	1,7,2,35,0,11
	.byte	'LBISTREQP',0,1
	.word	462
	.byte	1,6,2,35,0,11
	.byte	'PATTERNS',0,2
	.word	1013
	.byte	14,0,2,35,0,11
	.byte	'reserved_16',0,2
	.word	1013
	.byte	16,0,2,35,2,0,30
	.byte	'Ifx_SCU_LBISTCTRL0_Bits',0,6,131,5,3
	.word	54035
	.byte	10
	.byte	'_Ifx_SCU_LBISTCTRL1_Bits',0,6,134,5,16,4,11
	.byte	'SEED',0,4
	.word	439
	.byte	23,9,2,35,0,11
	.byte	'reserved_23',0,1
	.word	462
	.byte	1,0,2,35,2,11
	.byte	'SPLITSH',0,1
	.word	462
	.byte	3,5,2,35,3,11
	.byte	'BODY',0,1
	.word	462
	.byte	1,4,2,35,3,11
	.byte	'LBISTFREQU',0,1
	.word	462
	.byte	4,0,2,35,3,0,30
	.byte	'Ifx_SCU_LBISTCTRL1_Bits',0,6,141,5,3
	.word	54184
	.byte	10
	.byte	'_Ifx_SCU_LBISTCTRL2_Bits',0,6,144,5,16,4,11
	.byte	'SIGNATURE',0,4
	.word	439
	.byte	24,8,2,35,0,11
	.byte	'reserved_24',0,1
	.word	462
	.byte	7,1,2,35,3,11
	.byte	'LBISTDONE',0,1
	.word	462
	.byte	1,0,2,35,3,0,30
	.byte	'Ifx_SCU_LBISTCTRL2_Bits',0,6,149,5,3
	.word	54345
	.byte	10
	.byte	'_Ifx_SCU_LCLCON_Bits',0,6,152,5,16,4,11
	.byte	'reserved_0',0,2
	.word	1013
	.byte	16,0,2,35,0,11
	.byte	'LS',0,1
	.word	462
	.byte	1,7,2,35,2,11
	.byte	'reserved_17',0,2
	.word	1013
	.byte	14,1,2,35,2,11
	.byte	'LSEN',0,1
	.word	462
	.byte	1,0,2,35,3,0,30
	.byte	'Ifx_SCU_LCLCON_Bits',0,6,158,5,3
	.word	54475
	.byte	10
	.byte	'_Ifx_SCU_LCLTEST_Bits',0,6,161,5,16,4,11
	.byte	'LCLT0',0,1
	.word	462
	.byte	1,7,2,35,0,11
	.byte	'LCLT1',0,1
	.word	462
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,4
	.word	439
	.byte	30,0,2,35,0,0,30
	.byte	'Ifx_SCU_LCLTEST_Bits',0,6,166,5,3
	.word	54607
	.byte	10
	.byte	'_Ifx_SCU_MANID_Bits',0,6,169,5,16,4,11
	.byte	'DEPT',0,1
	.word	462
	.byte	5,3,2,35,0,11
	.byte	'MANUF',0,2
	.word	1013
	.byte	11,0,2,35,0,11
	.byte	'reserved_16',0,2
	.word	1013
	.byte	16,0,2,35,2,0,30
	.byte	'Ifx_SCU_MANID_Bits',0,6,174,5,3
	.word	54722
	.byte	10
	.byte	'_Ifx_SCU_OMR_Bits',0,6,177,5,16,4,11
	.byte	'PS0',0,1
	.word	462
	.byte	1,7,2,35,0,11
	.byte	'PS1',0,1
	.word	462
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,2
	.word	1013
	.byte	14,0,2,35,0,11
	.byte	'PCL0',0,1
	.word	462
	.byte	1,7,2,35,2,11
	.byte	'PCL1',0,1
	.word	462
	.byte	1,6,2,35,2,11
	.byte	'reserved_18',0,2
	.word	1013
	.byte	14,0,2,35,2,0,30
	.byte	'Ifx_SCU_OMR_Bits',0,6,185,5,3
	.word	54833
	.byte	10
	.byte	'_Ifx_SCU_OSCCON_Bits',0,6,188,5,16,4,11
	.byte	'reserved_0',0,1
	.word	462
	.byte	1,7,2,35,0,11
	.byte	'PLLLV',0,1
	.word	462
	.byte	1,6,2,35,0,11
	.byte	'OSCRES',0,1
	.word	462
	.byte	1,5,2,35,0,11
	.byte	'GAINSEL',0,1
	.word	462
	.byte	2,3,2,35,0,11
	.byte	'MODE',0,1
	.word	462
	.byte	2,1,2,35,0,11
	.byte	'SHBY',0,1
	.word	462
	.byte	1,0,2,35,0,11
	.byte	'PLLHV',0,1
	.word	462
	.byte	1,7,2,35,1,11
	.byte	'reserved_9',0,1
	.word	462
	.byte	1,6,2,35,1,11
	.byte	'X1D',0,1
	.word	462
	.byte	1,5,2,35,1,11
	.byte	'X1DEN',0,1
	.word	462
	.byte	1,4,2,35,1,11
	.byte	'reserved_12',0,1
	.word	462
	.byte	4,0,2,35,1,11
	.byte	'OSCVAL',0,1
	.word	462
	.byte	5,3,2,35,2,11
	.byte	'reserved_21',0,1
	.word	462
	.byte	2,1,2,35,2,11
	.byte	'APREN',0,1
	.word	462
	.byte	1,0,2,35,2,11
	.byte	'CAP0EN',0,1
	.word	462
	.byte	1,7,2,35,3,11
	.byte	'CAP1EN',0,1
	.word	462
	.byte	1,6,2,35,3,11
	.byte	'CAP2EN',0,1
	.word	462
	.byte	1,5,2,35,3,11
	.byte	'CAP3EN',0,1
	.word	462
	.byte	1,4,2,35,3,11
	.byte	'reserved_28',0,1
	.word	462
	.byte	4,0,2,35,3,0,30
	.byte	'Ifx_SCU_OSCCON_Bits',0,6,209,5,3
	.word	54991
	.byte	10
	.byte	'_Ifx_SCU_OUT_Bits',0,6,212,5,16,4,11
	.byte	'P0',0,1
	.word	462
	.byte	1,7,2,35,0,11
	.byte	'P1',0,1
	.word	462
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,4
	.word	439
	.byte	30,0,2,35,0,0,30
	.byte	'Ifx_SCU_OUT_Bits',0,6,217,5,3
	.word	55403
	.byte	10
	.byte	'_Ifx_SCU_OVCCON_Bits',0,6,220,5,16,4,11
	.byte	'CSEL0',0,1
	.word	462
	.byte	1,7,2,35,0,11
	.byte	'CSEL1',0,1
	.word	462
	.byte	1,6,2,35,0,11
	.byte	'CSEL2',0,1
	.word	462
	.byte	1,5,2,35,0,11
	.byte	'reserved_3',0,2
	.word	1013
	.byte	13,0,2,35,0,11
	.byte	'OVSTRT',0,1
	.word	462
	.byte	1,7,2,35,2,11
	.byte	'OVSTP',0,1
	.word	462
	.byte	1,6,2,35,2,11
	.byte	'DCINVAL',0,1
	.word	462
	.byte	1,5,2,35,2,11
	.byte	'reserved_19',0,1
	.word	462
	.byte	5,0,2,35,2,11
	.byte	'OVCONF',0,1
	.word	462
	.byte	1,7,2,35,3,11
	.byte	'POVCONF',0,1
	.word	462
	.byte	1,6,2,35,3,11
	.byte	'reserved_26',0,1
	.word	462
	.byte	6,0,2,35,3,0,30
	.byte	'Ifx_SCU_OVCCON_Bits',0,6,233,5,3
	.word	55504
	.byte	10
	.byte	'_Ifx_SCU_OVCENABLE_Bits',0,6,236,5,16,4,11
	.byte	'OVEN0',0,1
	.word	462
	.byte	1,7,2,35,0,11
	.byte	'OVEN1',0,1
	.word	462
	.byte	1,6,2,35,0,11
	.byte	'OVEN2',0,1
	.word	462
	.byte	1,5,2,35,0,11
	.byte	'reserved_3',0,4
	.word	439
	.byte	29,0,2,35,0,0,30
	.byte	'Ifx_SCU_OVCENABLE_Bits',0,6,242,5,3
	.word	55771
	.byte	10
	.byte	'_Ifx_SCU_PDISC_Bits',0,6,245,5,16,4,11
	.byte	'PDIS0',0,1
	.word	462
	.byte	1,7,2,35,0,11
	.byte	'PDIS1',0,1
	.word	462
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,4
	.word	439
	.byte	30,0,2,35,0,0,30
	.byte	'Ifx_SCU_PDISC_Bits',0,6,250,5,3
	.word	55907
	.byte	10
	.byte	'_Ifx_SCU_PDR_Bits',0,6,253,5,16,4,11
	.byte	'PD0',0,1
	.word	462
	.byte	3,5,2,35,0,11
	.byte	'PL0',0,1
	.word	462
	.byte	1,4,2,35,0,11
	.byte	'PD1',0,1
	.word	462
	.byte	3,1,2,35,0,11
	.byte	'PL1',0,1
	.word	462
	.byte	1,0,2,35,0,11
	.byte	'reserved_8',0,4
	.word	439
	.byte	24,0,2,35,0,0,30
	.byte	'Ifx_SCU_PDR_Bits',0,6,132,6,3
	.word	56018
	.byte	10
	.byte	'_Ifx_SCU_PDRR_Bits',0,6,135,6,16,4,11
	.byte	'PDR0',0,1
	.word	462
	.byte	1,7,2,35,0,11
	.byte	'PDR1',0,1
	.word	462
	.byte	1,6,2,35,0,11
	.byte	'PDR2',0,1
	.word	462
	.byte	1,5,2,35,0,11
	.byte	'PDR3',0,1
	.word	462
	.byte	1,4,2,35,0,11
	.byte	'PDR4',0,1
	.word	462
	.byte	1,3,2,35,0,11
	.byte	'PDR5',0,1
	.word	462
	.byte	1,2,2,35,0,11
	.byte	'PDR6',0,1
	.word	462
	.byte	1,1,2,35,0,11
	.byte	'PDR7',0,1
	.word	462
	.byte	1,0,2,35,0,11
	.byte	'reserved_8',0,4
	.word	439
	.byte	24,0,2,35,0,0,30
	.byte	'Ifx_SCU_PDRR_Bits',0,6,146,6,3
	.word	56151
	.byte	10
	.byte	'_Ifx_SCU_PLLCON0_Bits',0,6,149,6,16,4,11
	.byte	'VCOBYP',0,1
	.word	462
	.byte	1,7,2,35,0,11
	.byte	'VCOPWD',0,1
	.word	462
	.byte	1,6,2,35,0,11
	.byte	'MODEN',0,1
	.word	462
	.byte	1,5,2,35,0,11
	.byte	'reserved_3',0,1
	.word	462
	.byte	1,4,2,35,0,11
	.byte	'SETFINDIS',0,1
	.word	462
	.byte	1,3,2,35,0,11
	.byte	'CLRFINDIS',0,1
	.word	462
	.byte	1,2,2,35,0,11
	.byte	'OSCDISCDIS',0,1
	.word	462
	.byte	1,1,2,35,0,11
	.byte	'reserved_7',0,2
	.word	1013
	.byte	2,7,2,35,0,11
	.byte	'NDIV',0,1
	.word	462
	.byte	7,0,2,35,1,11
	.byte	'PLLPWD',0,1
	.word	462
	.byte	1,7,2,35,2,11
	.byte	'reserved_17',0,1
	.word	462
	.byte	1,6,2,35,2,11
	.byte	'RESLD',0,1
	.word	462
	.byte	1,5,2,35,2,11
	.byte	'reserved_19',0,1
	.word	462
	.byte	5,0,2,35,2,11
	.byte	'PDIV',0,1
	.word	462
	.byte	4,4,2,35,3,11
	.byte	'reserved_28',0,1
	.word	462
	.byte	4,0,2,35,3,0,30
	.byte	'Ifx_SCU_PLLCON0_Bits',0,6,166,6,3
	.word	56354
	.byte	10
	.byte	'_Ifx_SCU_PLLCON1_Bits',0,6,169,6,16,4,11
	.byte	'K2DIV',0,1
	.word	462
	.byte	7,1,2,35,0,11
	.byte	'reserved_7',0,1
	.word	462
	.byte	1,0,2,35,0,11
	.byte	'K3DIV',0,1
	.word	462
	.byte	7,1,2,35,1,11
	.byte	'reserved_15',0,1
	.word	462
	.byte	1,0,2,35,1,11
	.byte	'K1DIV',0,1
	.word	462
	.byte	7,1,2,35,2,11
	.byte	'reserved_23',0,2
	.word	1013
	.byte	9,0,2,35,2,0,30
	.byte	'Ifx_SCU_PLLCON1_Bits',0,6,177,6,3
	.word	56710
	.byte	10
	.byte	'_Ifx_SCU_PLLCON2_Bits',0,6,180,6,16,4,11
	.byte	'MODCFG',0,2
	.word	1013
	.byte	16,0,2,35,0,11
	.byte	'reserved_16',0,2
	.word	1013
	.byte	16,0,2,35,2,0,30
	.byte	'Ifx_SCU_PLLCON2_Bits',0,6,184,6,3
	.word	56888
	.byte	10
	.byte	'_Ifx_SCU_PLLERAYCON0_Bits',0,6,187,6,16,4,11
	.byte	'VCOBYP',0,1
	.word	462
	.byte	1,7,2,35,0,11
	.byte	'VCOPWD',0,1
	.word	462
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	462
	.byte	2,4,2,35,0,11
	.byte	'SETFINDIS',0,1
	.word	462
	.byte	1,3,2,35,0,11
	.byte	'CLRFINDIS',0,1
	.word	462
	.byte	1,2,2,35,0,11
	.byte	'OSCDISCDIS',0,1
	.word	462
	.byte	1,1,2,35,0,11
	.byte	'reserved_7',0,2
	.word	1013
	.byte	2,7,2,35,0,11
	.byte	'NDIV',0,1
	.word	462
	.byte	5,2,2,35,1,11
	.byte	'reserved_14',0,1
	.word	462
	.byte	2,0,2,35,1,11
	.byte	'PLLPWD',0,1
	.word	462
	.byte	1,7,2,35,2,11
	.byte	'reserved_17',0,1
	.word	462
	.byte	1,6,2,35,2,11
	.byte	'RESLD',0,1
	.word	462
	.byte	1,5,2,35,2,11
	.byte	'reserved_19',0,1
	.word	462
	.byte	5,0,2,35,2,11
	.byte	'PDIV',0,1
	.word	462
	.byte	4,4,2,35,3,11
	.byte	'reserved_28',0,1
	.word	462
	.byte	4,0,2,35,3,0,30
	.byte	'Ifx_SCU_PLLERAYCON0_Bits',0,6,204,6,3
	.word	56988
	.byte	10
	.byte	'_Ifx_SCU_PLLERAYCON1_Bits',0,6,207,6,16,4,11
	.byte	'K2DIV',0,1
	.word	462
	.byte	7,1,2,35,0,11
	.byte	'reserved_7',0,1
	.word	462
	.byte	1,0,2,35,0,11
	.byte	'K3DIV',0,1
	.word	462
	.byte	4,4,2,35,1,11
	.byte	'reserved_12',0,1
	.word	462
	.byte	4,0,2,35,1,11
	.byte	'K1DIV',0,1
	.word	462
	.byte	7,1,2,35,2,11
	.byte	'reserved_23',0,2
	.word	1013
	.byte	9,0,2,35,2,0,30
	.byte	'Ifx_SCU_PLLERAYCON1_Bits',0,6,215,6,3
	.word	57358
	.byte	10
	.byte	'_Ifx_SCU_PLLERAYSTAT_Bits',0,6,218,6,16,4,11
	.byte	'VCOBYST',0,1
	.word	462
	.byte	1,7,2,35,0,11
	.byte	'PWDSTAT',0,1
	.word	462
	.byte	1,6,2,35,0,11
	.byte	'VCOLOCK',0,1
	.word	462
	.byte	1,5,2,35,0,11
	.byte	'FINDIS',0,1
	.word	462
	.byte	1,4,2,35,0,11
	.byte	'K1RDY',0,1
	.word	462
	.byte	1,3,2,35,0,11
	.byte	'K2RDY',0,1
	.word	462
	.byte	1,2,2,35,0,11
	.byte	'reserved_6',0,4
	.word	439
	.byte	26,0,2,35,0,0,30
	.byte	'Ifx_SCU_PLLERAYSTAT_Bits',0,6,227,6,3
	.word	57544
	.byte	10
	.byte	'_Ifx_SCU_PLLSTAT_Bits',0,6,230,6,16,4,11
	.byte	'VCOBYST',0,1
	.word	462
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,1
	.word	462
	.byte	1,6,2,35,0,11
	.byte	'VCOLOCK',0,1
	.word	462
	.byte	1,5,2,35,0,11
	.byte	'FINDIS',0,1
	.word	462
	.byte	1,4,2,35,0,11
	.byte	'K1RDY',0,1
	.word	462
	.byte	1,3,2,35,0,11
	.byte	'K2RDY',0,1
	.word	462
	.byte	1,2,2,35,0,11
	.byte	'reserved_6',0,1
	.word	462
	.byte	1,1,2,35,0,11
	.byte	'MODRUN',0,1
	.word	462
	.byte	1,0,2,35,0,11
	.byte	'reserved_8',0,4
	.word	439
	.byte	24,0,2,35,0,0,30
	.byte	'Ifx_SCU_PLLSTAT_Bits',0,6,241,6,3
	.word	57742
	.byte	10
	.byte	'_Ifx_SCU_PMCSR_Bits',0,6,244,6,16,4,11
	.byte	'REQSLP',0,1
	.word	462
	.byte	2,6,2,35,0,11
	.byte	'SMUSLP',0,1
	.word	462
	.byte	1,5,2,35,0,11
	.byte	'reserved_3',0,1
	.word	462
	.byte	5,0,2,35,0,11
	.byte	'PMST',0,1
	.word	462
	.byte	3,5,2,35,1,11
	.byte	'reserved_11',0,4
	.word	439
	.byte	21,0,2,35,0,0,30
	.byte	'Ifx_SCU_PMCSR_Bits',0,6,251,6,3
	.word	57975
	.byte	10
	.byte	'_Ifx_SCU_PMSWCR0_Bits',0,6,254,6,16,4,11
	.byte	'reserved_0',0,1
	.word	462
	.byte	1,7,2,35,0,11
	.byte	'ESR1WKEN',0,1
	.word	462
	.byte	1,6,2,35,0,11
	.byte	'PINAWKEN',0,1
	.word	462
	.byte	1,5,2,35,0,11
	.byte	'PINBWKEN',0,1
	.word	462
	.byte	1,4,2,35,0,11
	.byte	'ESR0DFEN',0,1
	.word	462
	.byte	1,3,2,35,0,11
	.byte	'ESR0EDCON',0,1
	.word	462
	.byte	2,1,2,35,0,11
	.byte	'ESR1DFEN',0,1
	.word	462
	.byte	1,0,2,35,0,11
	.byte	'ESR1EDCON',0,1
	.word	462
	.byte	2,6,2,35,1,11
	.byte	'PINADFEN',0,1
	.word	462
	.byte	1,5,2,35,1,11
	.byte	'PINAEDCON',0,1
	.word	462
	.byte	2,3,2,35,1,11
	.byte	'PINBDFEN',0,1
	.word	462
	.byte	1,2,2,35,1,11
	.byte	'PINBEDCON',0,1
	.word	462
	.byte	2,0,2,35,1,11
	.byte	'SCREN',0,1
	.word	462
	.byte	1,7,2,35,2,11
	.byte	'STBYRAMSEL',0,1
	.word	462
	.byte	2,5,2,35,2,11
	.byte	'SCRCLKSEL',0,1
	.word	462
	.byte	1,4,2,35,2,11
	.byte	'SCRWKEN',0,1
	.word	462
	.byte	1,3,2,35,2,11
	.byte	'TRISTEN',0,1
	.word	462
	.byte	1,2,2,35,2,11
	.byte	'TRISTREQ',0,1
	.word	462
	.byte	1,1,2,35,2,11
	.byte	'PORSTDF',0,1
	.word	462
	.byte	1,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	462
	.byte	1,7,2,35,3,11
	.byte	'DCDCSYNC',0,1
	.word	462
	.byte	1,6,2,35,3,11
	.byte	'reserved_26',0,1
	.word	462
	.byte	3,3,2,35,3,11
	.byte	'ESR0TRIST',0,1
	.word	462
	.byte	1,2,2,35,3,11
	.byte	'reserved_30',0,1
	.word	462
	.byte	1,1,2,35,3,11
	.byte	'LCK',0,1
	.word	462
	.byte	1,0,2,35,3,0,30
	.byte	'Ifx_SCU_PMSWCR0_Bits',0,6,153,7,3
	.word	58127
	.byte	10
	.byte	'_Ifx_SCU_PMSWCR1_Bits',0,6,156,7,16,4,11
	.byte	'SCRSTEN',0,1
	.word	462
	.byte	1,7,2,35,0,11
	.byte	'SCRSTREQ',0,1
	.word	462
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	462
	.byte	6,0,2,35,0,11
	.byte	'CPUIDLSEL',0,1
	.word	462
	.byte	3,5,2,35,1,11
	.byte	'reserved_11',0,1
	.word	462
	.byte	1,4,2,35,1,11
	.byte	'IRADIS',0,1
	.word	462
	.byte	1,3,2,35,1,11
	.byte	'reserved_13',0,1
	.word	462
	.byte	3,0,2,35,1,11
	.byte	'SCRCFG',0,1
	.word	462
	.byte	8,0,2,35,2,11
	.byte	'CPUSEL',0,1
	.word	462
	.byte	3,5,2,35,3,11
	.byte	'STBYEVEN',0,1
	.word	462
	.byte	1,4,2,35,3,11
	.byte	'STBYEV',0,1
	.word	462
	.byte	3,1,2,35,3,11
	.byte	'LCK',0,1
	.word	462
	.byte	1,0,2,35,3,0,30
	.byte	'Ifx_SCU_PMSWCR1_Bits',0,6,170,7,3
	.word	58694
	.byte	10
	.byte	'_Ifx_SCU_PMSWCR2_Bits',0,6,173,7,16,4,11
	.byte	'SCRINT',0,1
	.word	462
	.byte	8,0,2,35,0,11
	.byte	'BUSY',0,1
	.word	462
	.byte	1,7,2,35,1,11
	.byte	'SCRECC',0,1
	.word	462
	.byte	1,6,2,35,1,11
	.byte	'SCRWDT',0,1
	.word	462
	.byte	1,5,2,35,1,11
	.byte	'SCRRST',0,1
	.word	462
	.byte	1,4,2,35,1,11
	.byte	'reserved_12',0,1
	.word	462
	.byte	4,0,2,35,1,11
	.byte	'TCINT',0,1
	.word	462
	.byte	8,0,2,35,2,11
	.byte	'TCINTREQ',0,1
	.word	462
	.byte	1,7,2,35,3,11
	.byte	'SMURST',0,1
	.word	462
	.byte	1,6,2,35,3,11
	.byte	'RST',0,1
	.word	462
	.byte	1,5,2,35,3,11
	.byte	'reserved_27',0,1
	.word	462
	.byte	4,1,2,35,3,11
	.byte	'LCK',0,1
	.word	462
	.byte	1,0,2,35,3,0,30
	.byte	'Ifx_SCU_PMSWCR2_Bits',0,6,187,7,3
	.word	58988
	.byte	10
	.byte	'_Ifx_SCU_PMSWSTAT_Bits',0,6,190,7,16,4,11
	.byte	'reserved_0',0,1
	.word	462
	.byte	2,6,2,35,0,11
	.byte	'ESR1WKP',0,1
	.word	462
	.byte	1,5,2,35,0,11
	.byte	'ESR1OVRUN',0,1
	.word	462
	.byte	1,4,2,35,0,11
	.byte	'PINAWKP',0,1
	.word	462
	.byte	1,3,2,35,0,11
	.byte	'PINAOVRUN',0,1
	.word	462
	.byte	1,2,2,35,0,11
	.byte	'PINBWKP',0,1
	.word	462
	.byte	1,1,2,35,0,11
	.byte	'PINBOVRUN',0,1
	.word	462
	.byte	1,0,2,35,0,11
	.byte	'reserved_8',0,1
	.word	462
	.byte	1,7,2,35,1,11
	.byte	'PORSTDF',0,1
	.word	462
	.byte	1,6,2,35,1,11
	.byte	'HWCFGEVR',0,1
	.word	462
	.byte	3,3,2,35,1,11
	.byte	'STBYRAM',0,1
	.word	462
	.byte	2,1,2,35,1,11
	.byte	'TRIST',0,1
	.word	462
	.byte	1,0,2,35,1,11
	.byte	'SCRST',0,1
	.word	462
	.byte	1,7,2,35,2,11
	.byte	'SCRWKP',0,1
	.word	462
	.byte	1,6,2,35,2,11
	.byte	'SCR',0,1
	.word	462
	.byte	1,5,2,35,2,11
	.byte	'SCRWKEN',0,1
	.word	462
	.byte	1,4,2,35,2,11
	.byte	'ESR1WKEN',0,1
	.word	462
	.byte	1,3,2,35,2,11
	.byte	'PINAWKEN',0,1
	.word	462
	.byte	1,2,2,35,2,11
	.byte	'PINBWKEN',0,1
	.word	462
	.byte	1,1,2,35,2,11
	.byte	'reserved_23',0,2
	.word	1013
	.byte	4,5,2,35,2,11
	.byte	'ESR0TRIST',0,1
	.word	462
	.byte	1,4,2,35,3,11
	.byte	'reserved_28',0,1
	.word	462
	.byte	4,0,2,35,3,0,30
	.byte	'Ifx_SCU_PMSWSTAT_Bits',0,6,214,7,3
	.word	59266
	.byte	10
	.byte	'_Ifx_SCU_PMSWSTATCLR_Bits',0,6,217,7,16,4,11
	.byte	'reserved_0',0,1
	.word	462
	.byte	2,6,2,35,0,11
	.byte	'ESR1WKPCLR',0,1
	.word	462
	.byte	1,5,2,35,0,11
	.byte	'ESR1OVRUNCLR',0,1
	.word	462
	.byte	1,4,2,35,0,11
	.byte	'PINAWKPCLR',0,1
	.word	462
	.byte	1,3,2,35,0,11
	.byte	'PINAOVRUNCLR',0,1
	.word	462
	.byte	1,2,2,35,0,11
	.byte	'PINBWKPCLR',0,1
	.word	462
	.byte	1,1,2,35,0,11
	.byte	'PINBOVRUNCLR',0,1
	.word	462
	.byte	1,0,2,35,0,11
	.byte	'reserved_8',0,1
	.word	462
	.byte	8,0,2,35,1,11
	.byte	'SCRSTCLR',0,1
	.word	462
	.byte	1,7,2,35,2,11
	.byte	'SCRWKPCLR',0,1
	.word	462
	.byte	1,6,2,35,2,11
	.byte	'reserved_18',0,2
	.word	1013
	.byte	14,0,2,35,2,0,30
	.byte	'Ifx_SCU_PMSWSTATCLR_Bits',0,6,230,7,3
	.word	59762
	.byte	10
	.byte	'_Ifx_SCU_RSTCON2_Bits',0,6,233,7,16,4,11
	.byte	'reserved_0',0,1
	.word	462
	.byte	1,7,2,35,0,11
	.byte	'CLRC',0,1
	.word	462
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,2
	.word	1013
	.byte	10,4,2,35,0,11
	.byte	'CSS0',0,1
	.word	462
	.byte	1,3,2,35,1,11
	.byte	'CSS1',0,1
	.word	462
	.byte	1,2,2,35,1,11
	.byte	'CSS2',0,1
	.word	462
	.byte	1,1,2,35,1,11
	.byte	'reserved_15',0,1
	.word	462
	.byte	1,0,2,35,1,11
	.byte	'USRINFO',0,2
	.word	1013
	.byte	16,0,2,35,2,0,30
	.byte	'Ifx_SCU_RSTCON2_Bits',0,6,243,7,3
	.word	60075
	.byte	10
	.byte	'_Ifx_SCU_RSTCON_Bits',0,6,246,7,16,4,11
	.byte	'ESR0',0,1
	.word	462
	.byte	2,6,2,35,0,11
	.byte	'ESR1',0,1
	.word	462
	.byte	2,4,2,35,0,11
	.byte	'reserved_4',0,1
	.word	462
	.byte	2,2,2,35,0,11
	.byte	'SMU',0,1
	.word	462
	.byte	2,0,2,35,0,11
	.byte	'SW',0,1
	.word	462
	.byte	2,6,2,35,1,11
	.byte	'STM0',0,1
	.word	462
	.byte	2,4,2,35,1,11
	.byte	'STM1',0,1
	.word	462
	.byte	2,2,2,35,1,11
	.byte	'STM2',0,1
	.word	462
	.byte	2,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	1013
	.byte	16,0,2,35,2,0,30
	.byte	'Ifx_SCU_RSTCON_Bits',0,6,129,8,3
	.word	60284
	.byte	10
	.byte	'_Ifx_SCU_RSTSTAT_Bits',0,6,132,8,16,4,11
	.byte	'ESR0',0,1
	.word	462
	.byte	1,7,2,35,0,11
	.byte	'ESR1',0,1
	.word	462
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	462
	.byte	1,5,2,35,0,11
	.byte	'SMU',0,1
	.word	462
	.byte	1,4,2,35,0,11
	.byte	'SW',0,1
	.word	462
	.byte	1,3,2,35,0,11
	.byte	'STM0',0,1
	.word	462
	.byte	1,2,2,35,0,11
	.byte	'STM1',0,1
	.word	462
	.byte	1,1,2,35,0,11
	.byte	'STM2',0,1
	.word	462
	.byte	1,0,2,35,0,11
	.byte	'reserved_8',0,1
	.word	462
	.byte	8,0,2,35,1,11
	.byte	'PORST',0,1
	.word	462
	.byte	1,7,2,35,2,11
	.byte	'reserved_17',0,1
	.word	462
	.byte	1,6,2,35,2,11
	.byte	'CB0',0,1
	.word	462
	.byte	1,5,2,35,2,11
	.byte	'CB1',0,1
	.word	462
	.byte	1,4,2,35,2,11
	.byte	'CB3',0,1
	.word	462
	.byte	1,3,2,35,2,11
	.byte	'reserved_21',0,1
	.word	462
	.byte	2,1,2,35,2,11
	.byte	'EVR13',0,1
	.word	462
	.byte	1,0,2,35,2,11
	.byte	'EVR33',0,1
	.word	462
	.byte	1,7,2,35,3,11
	.byte	'SWD',0,1
	.word	462
	.byte	1,6,2,35,3,11
	.byte	'reserved_26',0,1
	.word	462
	.byte	2,4,2,35,3,11
	.byte	'STBYR',0,1
	.word	462
	.byte	1,3,2,35,3,11
	.byte	'reserved_29',0,1
	.word	462
	.byte	3,0,2,35,3,0,30
	.byte	'Ifx_SCU_RSTSTAT_Bits',0,6,155,8,3
	.word	60495
	.byte	10
	.byte	'_Ifx_SCU_SAFECON_Bits',0,6,158,8,16,4,11
	.byte	'HBT',0,1
	.word	462
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,4
	.word	439
	.byte	31,0,2,35,0,0,30
	.byte	'Ifx_SCU_SAFECON_Bits',0,6,162,8,3
	.word	60927
	.byte	10
	.byte	'_Ifx_SCU_STSTAT_Bits',0,6,165,8,16,4,11
	.byte	'HWCFG',0,1
	.word	462
	.byte	8,0,2,35,0,11
	.byte	'FTM',0,1
	.word	462
	.byte	7,1,2,35,1,11
	.byte	'MODE',0,1
	.word	462
	.byte	1,0,2,35,1,11
	.byte	'FCBAE',0,1
	.word	462
	.byte	1,7,2,35,2,11
	.byte	'LUDIS',0,1
	.word	462
	.byte	1,6,2,35,2,11
	.byte	'reserved_18',0,1
	.word	462
	.byte	1,5,2,35,2,11
	.byte	'TRSTL',0,1
	.word	462
	.byte	1,4,2,35,2,11
	.byte	'SPDEN',0,1
	.word	462
	.byte	1,3,2,35,2,11
	.byte	'reserved_21',0,1
	.word	462
	.byte	3,0,2,35,2,11
	.byte	'RAMINT',0,1
	.word	462
	.byte	1,7,2,35,3,11
	.byte	'reserved_25',0,1
	.word	462
	.byte	7,0,2,35,3,0,30
	.byte	'Ifx_SCU_STSTAT_Bits',0,6,178,8,3
	.word	61023
	.byte	10
	.byte	'_Ifx_SCU_SWRSTCON_Bits',0,6,181,8,16,4,11
	.byte	'reserved_0',0,1
	.word	462
	.byte	1,7,2,35,0,11
	.byte	'SWRSTREQ',0,1
	.word	462
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,4
	.word	439
	.byte	30,0,2,35,0,0,30
	.byte	'Ifx_SCU_SWRSTCON_Bits',0,6,186,8,3
	.word	61283
	.byte	10
	.byte	'_Ifx_SCU_SYSCON_Bits',0,6,189,8,16,4,11
	.byte	'CCTRIG0',0,1
	.word	462
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,1
	.word	462
	.byte	1,6,2,35,0,11
	.byte	'RAMINTM',0,1
	.word	462
	.byte	2,4,2,35,0,11
	.byte	'SETLUDIS',0,1
	.word	462
	.byte	1,3,2,35,0,11
	.byte	'reserved_5',0,1
	.word	462
	.byte	3,0,2,35,0,11
	.byte	'DATM',0,1
	.word	462
	.byte	1,7,2,35,1,11
	.byte	'reserved_9',0,4
	.word	439
	.byte	23,0,2,35,0,0,30
	.byte	'Ifx_SCU_SYSCON_Bits',0,6,198,8,3
	.word	61408
	.byte	10
	.byte	'_Ifx_SCU_TRAPCLR_Bits',0,6,201,8,16,4,11
	.byte	'ESR0T',0,1
	.word	462
	.byte	1,7,2,35,0,11
	.byte	'ESR1T',0,1
	.word	462
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	462
	.byte	1,5,2,35,0,11
	.byte	'SMUT',0,1
	.word	462
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,4
	.word	439
	.byte	28,0,2,35,0,0,30
	.byte	'Ifx_SCU_TRAPCLR_Bits',0,6,208,8,3
	.word	61605
	.byte	10
	.byte	'_Ifx_SCU_TRAPDIS_Bits',0,6,211,8,16,4,11
	.byte	'ESR0T',0,1
	.word	462
	.byte	1,7,2,35,0,11
	.byte	'ESR1T',0,1
	.word	462
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	462
	.byte	1,5,2,35,0,11
	.byte	'SMUT',0,1
	.word	462
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,4
	.word	439
	.byte	28,0,2,35,0,0,30
	.byte	'Ifx_SCU_TRAPDIS_Bits',0,6,218,8,3
	.word	61758
	.byte	10
	.byte	'_Ifx_SCU_TRAPSET_Bits',0,6,221,8,16,4,11
	.byte	'ESR0T',0,1
	.word	462
	.byte	1,7,2,35,0,11
	.byte	'ESR1T',0,1
	.word	462
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	462
	.byte	1,5,2,35,0,11
	.byte	'SMUT',0,1
	.word	462
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,4
	.word	439
	.byte	28,0,2,35,0,0,30
	.byte	'Ifx_SCU_TRAPSET_Bits',0,6,228,8,3
	.word	61911
	.byte	10
	.byte	'_Ifx_SCU_TRAPSTAT_Bits',0,6,231,8,16,4,11
	.byte	'ESR0T',0,1
	.word	462
	.byte	1,7,2,35,0,11
	.byte	'ESR1T',0,1
	.word	462
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	462
	.byte	1,5,2,35,0,11
	.byte	'SMUT',0,1
	.word	462
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,4
	.word	439
	.byte	28,0,2,35,0,0,30
	.byte	'Ifx_SCU_TRAPSTAT_Bits',0,6,238,8,3
	.word	62064
	.byte	30
	.byte	'Ifx_SCU_WDTCPU_CON0_Bits',0,6,247,8,3
	.word	877
	.byte	30
	.byte	'Ifx_SCU_WDTCPU_CON1_Bits',0,6,134,9,3
	.word	1035
	.byte	30
	.byte	'Ifx_SCU_WDTCPU_SR_Bits',0,6,150,9,3
	.word	1279
	.byte	10
	.byte	'_Ifx_SCU_WDTS_CON0_Bits',0,6,153,9,16,4,11
	.byte	'ENDINIT',0,4
	.word	861
	.byte	1,31,2,35,0,11
	.byte	'LCK',0,4
	.word	861
	.byte	1,30,2,35,0,11
	.byte	'PW',0,4
	.word	861
	.byte	14,16,2,35,0,11
	.byte	'REL',0,4
	.word	861
	.byte	16,0,2,35,0,0,30
	.byte	'Ifx_SCU_WDTS_CON0_Bits',0,6,159,9,3
	.word	62319
	.byte	10
	.byte	'_Ifx_SCU_WDTS_CON1_Bits',0,6,162,9,16,4,11
	.byte	'CLRIRF',0,1
	.word	462
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,1
	.word	462
	.byte	1,6,2,35,0,11
	.byte	'IR0',0,1
	.word	462
	.byte	1,5,2,35,0,11
	.byte	'DR',0,1
	.word	462
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,1
	.word	462
	.byte	1,3,2,35,0,11
	.byte	'IR1',0,1
	.word	462
	.byte	1,2,2,35,0,11
	.byte	'UR',0,1
	.word	462
	.byte	1,1,2,35,0,11
	.byte	'PAR',0,1
	.word	462
	.byte	1,0,2,35,0,11
	.byte	'TCR',0,1
	.word	462
	.byte	1,7,2,35,1,11
	.byte	'TCTR',0,1
	.word	462
	.byte	7,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	1013
	.byte	16,0,2,35,2,0,30
	.byte	'Ifx_SCU_WDTS_CON1_Bits',0,6,175,9,3
	.word	62445
	.byte	10
	.byte	'_Ifx_SCU_WDTS_SR_Bits',0,6,178,9,16,4,11
	.byte	'AE',0,1
	.word	462
	.byte	1,7,2,35,0,11
	.byte	'OE',0,1
	.word	462
	.byte	1,6,2,35,0,11
	.byte	'IS0',0,1
	.word	462
	.byte	1,5,2,35,0,11
	.byte	'DS',0,1
	.word	462
	.byte	1,4,2,35,0,11
	.byte	'TO',0,1
	.word	462
	.byte	1,3,2,35,0,11
	.byte	'IS1',0,1
	.word	462
	.byte	1,2,2,35,0,11
	.byte	'US',0,1
	.word	462
	.byte	1,1,2,35,0,11
	.byte	'PAS',0,1
	.word	462
	.byte	1,0,2,35,0,11
	.byte	'TCS',0,1
	.word	462
	.byte	1,7,2,35,1,11
	.byte	'TCT',0,1
	.word	462
	.byte	7,0,2,35,1,11
	.byte	'TIM',0,2
	.word	1013
	.byte	16,0,2,35,2,0,30
	.byte	'Ifx_SCU_WDTS_SR_Bits',0,6,191,9,3
	.word	62697
	.byte	12,6,199,9,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	44729
	.byte	4,2,35,0,0,30
	.byte	'Ifx_SCU_ACCEN0',0,6,204,9,3
	.word	62916
	.byte	12,6,207,9,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	45286
	.byte	4,2,35,0,0,30
	.byte	'Ifx_SCU_ACCEN1',0,6,212,9,3
	.word	62980
	.byte	12,6,215,9,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	45363
	.byte	4,2,35,0,0,30
	.byte	'Ifx_SCU_ARSTDIS',0,6,220,9,3
	.word	63044
	.byte	12,6,223,9,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	45499
	.byte	4,2,35,0,0,30
	.byte	'Ifx_SCU_CCUCON0',0,6,228,9,3
	.word	63109
	.byte	12,6,231,9,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	45779
	.byte	4,2,35,0,0,30
	.byte	'Ifx_SCU_CCUCON1',0,6,236,9,3
	.word	63174
	.byte	12,6,239,9,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	46017
	.byte	4,2,35,0,0,30
	.byte	'Ifx_SCU_CCUCON2',0,6,244,9,3
	.word	63239
	.byte	12,6,247,9,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	46145
	.byte	4,2,35,0,0,30
	.byte	'Ifx_SCU_CCUCON3',0,6,252,9,3
	.word	63304
	.byte	12,6,255,9,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	46388
	.byte	4,2,35,0,0,30
	.byte	'Ifx_SCU_CCUCON4',0,6,132,10,3
	.word	63369
	.byte	12,6,135,10,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	46623
	.byte	4,2,35,0,0,30
	.byte	'Ifx_SCU_CCUCON5',0,6,140,10,3
	.word	63434
	.byte	12,6,143,10,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	46751
	.byte	4,2,35,0,0,30
	.byte	'Ifx_SCU_CCUCON6',0,6,148,10,3
	.word	63499
	.byte	12,6,151,10,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	46851
	.byte	4,2,35,0,0,30
	.byte	'Ifx_SCU_CCUCON7',0,6,156,10,3
	.word	63564
	.byte	12,6,159,10,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	46951
	.byte	4,2,35,0,0,30
	.byte	'Ifx_SCU_CHIPID',0,6,164,10,3
	.word	63629
	.byte	12,6,167,10,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	47159
	.byte	4,2,35,0,0,30
	.byte	'Ifx_SCU_DTSCON',0,6,172,10,3
	.word	63693
	.byte	12,6,175,10,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	47324
	.byte	4,2,35,0,0,30
	.byte	'Ifx_SCU_DTSLIM',0,6,180,10,3
	.word	63757
	.byte	12,6,183,10,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	47507
	.byte	4,2,35,0,0,30
	.byte	'Ifx_SCU_DTSSTAT',0,6,188,10,3
	.word	63821
	.byte	12,6,191,10,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	47661
	.byte	4,2,35,0,0,30
	.byte	'Ifx_SCU_EICR',0,6,196,10,3
	.word	63886
	.byte	12,6,199,10,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	48025
	.byte	4,2,35,0,0,30
	.byte	'Ifx_SCU_EIFR',0,6,204,10,3
	.word	63948
	.byte	12,6,207,10,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	48236
	.byte	4,2,35,0,0,30
	.byte	'Ifx_SCU_EMSR',0,6,212,10,3
	.word	64010
	.byte	12,6,215,10,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	48488
	.byte	4,2,35,0,0,30
	.byte	'Ifx_SCU_ESRCFG',0,6,220,10,3
	.word	64072
	.byte	12,6,223,10,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	48606
	.byte	4,2,35,0,0,30
	.byte	'Ifx_SCU_ESROCFG',0,6,228,10,3
	.word	64136
	.byte	12,6,231,10,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	48717
	.byte	4,2,35,0,0,30
	.byte	'Ifx_SCU_EVR13CON',0,6,236,10,3
	.word	64201
	.byte	12,6,239,10,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	48880
	.byte	4,2,35,0,0,30
	.byte	'Ifx_SCU_EVR33CON',0,6,244,10,3
	.word	64267
	.byte	12,6,247,10,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	49043
	.byte	4,2,35,0,0,30
	.byte	'Ifx_SCU_EVRADCSTAT',0,6,252,10,3
	.word	64333
	.byte	12,6,255,10,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	49201
	.byte	4,2,35,0,0,30
	.byte	'Ifx_SCU_EVRDVSTAT',0,6,132,11,3
	.word	64401
	.byte	12,6,135,11,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	49366
	.byte	4,2,35,0,0,30
	.byte	'Ifx_SCU_EVRMONCTRL',0,6,140,11,3
	.word	64468
	.byte	12,6,143,11,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	49695
	.byte	4,2,35,0,0,30
	.byte	'Ifx_SCU_EVROSCCTRL',0,6,148,11,3
	.word	64536
	.byte	12,6,151,11,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	49916
	.byte	4,2,35,0,0,30
	.byte	'Ifx_SCU_EVROVMON',0,6,156,11,3
	.word	64604
	.byte	12,6,159,11,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	50079
	.byte	4,2,35,0,0,30
	.byte	'Ifx_SCU_EVRRSTCON',0,6,164,11,3
	.word	64670
	.byte	12,6,167,11,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	50351
	.byte	4,2,35,0,0,30
	.byte	'Ifx_SCU_EVRSDCOEFF1',0,6,172,11,3
	.word	64737
	.byte	12,6,175,11,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	50504
	.byte	4,2,35,0,0,30
	.byte	'Ifx_SCU_EVRSDCOEFF2',0,6,180,11,3
	.word	64806
	.byte	12,6,183,11,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	50660
	.byte	4,2,35,0,0,30
	.byte	'Ifx_SCU_EVRSDCOEFF3',0,6,188,11,3
	.word	64875
	.byte	12,6,191,11,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	50822
	.byte	4,2,35,0,0,30
	.byte	'Ifx_SCU_EVRSDCOEFF4',0,6,196,11,3
	.word	64944
	.byte	12,6,199,11,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	50965
	.byte	4,2,35,0,0,30
	.byte	'Ifx_SCU_EVRSDCOEFF5',0,6,204,11,3
	.word	65013
	.byte	12,6,207,11,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	51130
	.byte	4,2,35,0,0,30
	.byte	'Ifx_SCU_EVRSDCOEFF6',0,6,212,11,3
	.word	65082
	.byte	12,6,215,11,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	51275
	.byte	4,2,35,0,0,30
	.byte	'Ifx_SCU_EVRSDCTRL1',0,6,220,11,3
	.word	65151
	.byte	12,6,223,11,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	51456
	.byte	4,2,35,0,0,30
	.byte	'Ifx_SCU_EVRSDCTRL2',0,6,228,11,3
	.word	65219
	.byte	12,6,231,11,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	51630
	.byte	4,2,35,0,0,30
	.byte	'Ifx_SCU_EVRSDCTRL3',0,6,236,11,3
	.word	65287
	.byte	12,6,239,11,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	51790
	.byte	4,2,35,0,0,30
	.byte	'Ifx_SCU_EVRSDCTRL4',0,6,244,11,3
	.word	65355
	.byte	12,6,247,11,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	51934
	.byte	4,2,35,0,0,30
	.byte	'Ifx_SCU_EVRSTAT',0,6,252,11,3
	.word	65423
	.byte	12,6,255,11,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	52208
	.byte	4,2,35,0,0,30
	.byte	'Ifx_SCU_EVRTRIM',0,6,132,12,3
	.word	65488
	.byte	12,6,135,12,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	52347
	.byte	4,2,35,0,0,30
	.byte	'Ifx_SCU_EVRUVMON',0,6,140,12,3
	.word	65553
	.byte	12,6,143,12,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	52510
	.byte	4,2,35,0,0,30
	.byte	'Ifx_SCU_EXTCON',0,6,148,12,3
	.word	65619
	.byte	12,6,151,12,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	52728
	.byte	4,2,35,0,0,30
	.byte	'Ifx_SCU_FDR',0,6,156,12,3
	.word	65683
	.byte	12,6,159,12,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	52891
	.byte	4,2,35,0,0,30
	.byte	'Ifx_SCU_FMR',0,6,164,12,3
	.word	65744
	.byte	12,6,167,12,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	53227
	.byte	4,2,35,0,0,30
	.byte	'Ifx_SCU_ID',0,6,172,12,3
	.word	65805
	.byte	12,6,175,12,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	53334
	.byte	4,2,35,0,0,30
	.byte	'Ifx_SCU_IGCR',0,6,180,12,3
	.word	65865
	.byte	12,6,183,12,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	53786
	.byte	4,2,35,0,0,30
	.byte	'Ifx_SCU_IN',0,6,188,12,3
	.word	65927
	.byte	12,6,191,12,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	53885
	.byte	4,2,35,0,0,30
	.byte	'Ifx_SCU_IOCR',0,6,196,12,3
	.word	65987
	.byte	12,6,199,12,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	54035
	.byte	4,2,35,0,0,30
	.byte	'Ifx_SCU_LBISTCTRL0',0,6,204,12,3
	.word	66049
	.byte	12,6,207,12,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	54184
	.byte	4,2,35,0,0,30
	.byte	'Ifx_SCU_LBISTCTRL1',0,6,212,12,3
	.word	66117
	.byte	12,6,215,12,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	54345
	.byte	4,2,35,0,0,30
	.byte	'Ifx_SCU_LBISTCTRL2',0,6,220,12,3
	.word	66185
	.byte	12,6,223,12,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	54475
	.byte	4,2,35,0,0,30
	.byte	'Ifx_SCU_LCLCON',0,6,228,12,3
	.word	66253
	.byte	12,6,231,12,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	54607
	.byte	4,2,35,0,0,30
	.byte	'Ifx_SCU_LCLTEST',0,6,236,12,3
	.word	66317
	.byte	12,6,239,12,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	54722
	.byte	4,2,35,0,0,30
	.byte	'Ifx_SCU_MANID',0,6,244,12,3
	.word	66382
	.byte	12,6,247,12,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	54833
	.byte	4,2,35,0,0,30
	.byte	'Ifx_SCU_OMR',0,6,252,12,3
	.word	66445
	.byte	12,6,255,12,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	54991
	.byte	4,2,35,0,0,30
	.byte	'Ifx_SCU_OSCCON',0,6,132,13,3
	.word	66506
	.byte	12,6,135,13,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	55403
	.byte	4,2,35,0,0,30
	.byte	'Ifx_SCU_OUT',0,6,140,13,3
	.word	66570
	.byte	12,6,143,13,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	55504
	.byte	4,2,35,0,0,30
	.byte	'Ifx_SCU_OVCCON',0,6,148,13,3
	.word	66631
	.byte	12,6,151,13,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	55771
	.byte	4,2,35,0,0,30
	.byte	'Ifx_SCU_OVCENABLE',0,6,156,13,3
	.word	66695
	.byte	12,6,159,13,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	55907
	.byte	4,2,35,0,0,30
	.byte	'Ifx_SCU_PDISC',0,6,164,13,3
	.word	66762
	.byte	12,6,167,13,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	56018
	.byte	4,2,35,0,0,30
	.byte	'Ifx_SCU_PDR',0,6,172,13,3
	.word	66825
	.byte	12,6,175,13,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	56151
	.byte	4,2,35,0,0,30
	.byte	'Ifx_SCU_PDRR',0,6,180,13,3
	.word	66886
	.byte	12,6,183,13,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	56354
	.byte	4,2,35,0,0,30
	.byte	'Ifx_SCU_PLLCON0',0,6,188,13,3
	.word	66948
	.byte	12,6,191,13,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	56710
	.byte	4,2,35,0,0,30
	.byte	'Ifx_SCU_PLLCON1',0,6,196,13,3
	.word	67013
	.byte	12,6,199,13,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	56888
	.byte	4,2,35,0,0,30
	.byte	'Ifx_SCU_PLLCON2',0,6,204,13,3
	.word	67078
	.byte	12,6,207,13,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	56988
	.byte	4,2,35,0,0,30
	.byte	'Ifx_SCU_PLLERAYCON0',0,6,212,13,3
	.word	67143
	.byte	12,6,215,13,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	57358
	.byte	4,2,35,0,0,30
	.byte	'Ifx_SCU_PLLERAYCON1',0,6,220,13,3
	.word	67212
	.byte	12,6,223,13,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	57544
	.byte	4,2,35,0,0,30
	.byte	'Ifx_SCU_PLLERAYSTAT',0,6,228,13,3
	.word	67281
	.byte	12,6,231,13,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	57742
	.byte	4,2,35,0,0,30
	.byte	'Ifx_SCU_PLLSTAT',0,6,236,13,3
	.word	67350
	.byte	12,6,239,13,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	57975
	.byte	4,2,35,0,0,30
	.byte	'Ifx_SCU_PMCSR',0,6,244,13,3
	.word	67415
	.byte	12,6,247,13,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	58127
	.byte	4,2,35,0,0,30
	.byte	'Ifx_SCU_PMSWCR0',0,6,252,13,3
	.word	67478
	.byte	12,6,255,13,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	58694
	.byte	4,2,35,0,0,30
	.byte	'Ifx_SCU_PMSWCR1',0,6,132,14,3
	.word	67543
	.byte	12,6,135,14,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	58988
	.byte	4,2,35,0,0,30
	.byte	'Ifx_SCU_PMSWCR2',0,6,140,14,3
	.word	67608
	.byte	12,6,143,14,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	59266
	.byte	4,2,35,0,0,30
	.byte	'Ifx_SCU_PMSWSTAT',0,6,148,14,3
	.word	67673
	.byte	12,6,151,14,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	59762
	.byte	4,2,35,0,0,30
	.byte	'Ifx_SCU_PMSWSTATCLR',0,6,156,14,3
	.word	67739
	.byte	12,6,159,14,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	60284
	.byte	4,2,35,0,0,30
	.byte	'Ifx_SCU_RSTCON',0,6,164,14,3
	.word	67808
	.byte	12,6,167,14,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	60075
	.byte	4,2,35,0,0,30
	.byte	'Ifx_SCU_RSTCON2',0,6,172,14,3
	.word	67872
	.byte	12,6,175,14,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	60495
	.byte	4,2,35,0,0,30
	.byte	'Ifx_SCU_RSTSTAT',0,6,180,14,3
	.word	67937
	.byte	12,6,183,14,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	60927
	.byte	4,2,35,0,0,30
	.byte	'Ifx_SCU_SAFECON',0,6,188,14,3
	.word	68002
	.byte	12,6,191,14,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	61023
	.byte	4,2,35,0,0,30
	.byte	'Ifx_SCU_STSTAT',0,6,196,14,3
	.word	68067
	.byte	12,6,199,14,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	61283
	.byte	4,2,35,0,0,30
	.byte	'Ifx_SCU_SWRSTCON',0,6,204,14,3
	.word	68131
	.byte	12,6,207,14,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	61408
	.byte	4,2,35,0,0,30
	.byte	'Ifx_SCU_SYSCON',0,6,212,14,3
	.word	68197
	.byte	12,6,215,14,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	61605
	.byte	4,2,35,0,0,30
	.byte	'Ifx_SCU_TRAPCLR',0,6,220,14,3
	.word	68261
	.byte	12,6,223,14,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	61758
	.byte	4,2,35,0,0,30
	.byte	'Ifx_SCU_TRAPDIS',0,6,228,14,3
	.word	68326
	.byte	12,6,231,14,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	61911
	.byte	4,2,35,0,0,30
	.byte	'Ifx_SCU_TRAPSET',0,6,236,14,3
	.word	68391
	.byte	12,6,239,14,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	62064
	.byte	4,2,35,0,0,30
	.byte	'Ifx_SCU_TRAPSTAT',0,6,244,14,3
	.word	68456
	.byte	30
	.byte	'Ifx_SCU_WDTCPU_CON0',0,6,252,14,3
	.word	973
	.byte	30
	.byte	'Ifx_SCU_WDTCPU_CON1',0,6,132,15,3
	.word	1239
	.byte	30
	.byte	'Ifx_SCU_WDTCPU_SR',0,6,140,15,3
	.word	1470
	.byte	12,6,143,15,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	62319
	.byte	4,2,35,0,0,30
	.byte	'Ifx_SCU_WDTS_CON0',0,6,148,15,3
	.word	68607
	.byte	12,6,151,15,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	62445
	.byte	4,2,35,0,0,30
	.byte	'Ifx_SCU_WDTS_CON1',0,6,156,15,3
	.word	68674
	.byte	12,6,159,15,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	62697
	.byte	4,2,35,0,0,30
	.byte	'Ifx_SCU_WDTS_SR',0,6,164,15,3
	.word	68741
	.byte	14
	.word	1510
	.byte	30
	.byte	'Ifx_SCU_WDTCPU',0,6,180,15,3
	.word	68806
	.byte	10
	.byte	'_Ifx_SCU_WDTS',0,6,183,15,25,12,13
	.byte	'CON0',0
	.word	68607
	.byte	4,2,35,0,13
	.byte	'CON1',0
	.word	68674
	.byte	4,2,35,4,13
	.byte	'SR',0
	.word	68741
	.byte	4,2,35,8,0,14
	.word	68835
	.byte	30
	.byte	'Ifx_SCU_WDTS',0,6,188,15,3
	.word	68896
	.byte	15,8
	.word	64072
	.byte	16,1,0,15,20
	.word	462
	.byte	16,19,0,15,8
	.word	67415
	.byte	16,1,0,14
	.word	68835
	.byte	15,24
	.word	1510
	.byte	16,1,0,14
	.word	68955
	.byte	15,16
	.word	63886
	.byte	16,3,0,15,16
	.word	65865
	.byte	16,3,0,15,180,3
	.word	462
	.byte	16,179,3,0,10
	.byte	'_Ifx_SCU',0,6,201,15,25,128,8,13
	.byte	'reserved_0',0
	.word	4633
	.byte	8,2,35,0,13
	.byte	'ID',0
	.word	65805
	.byte	4,2,35,8,13
	.byte	'reserved_C',0
	.word	2814
	.byte	4,2,35,12,13
	.byte	'OSCCON',0
	.word	66506
	.byte	4,2,35,16,13
	.byte	'PLLSTAT',0
	.word	67350
	.byte	4,2,35,20,13
	.byte	'PLLCON0',0
	.word	66948
	.byte	4,2,35,24,13
	.byte	'PLLCON1',0
	.word	67013
	.byte	4,2,35,28,13
	.byte	'PLLCON2',0
	.word	67078
	.byte	4,2,35,32,13
	.byte	'PLLERAYSTAT',0
	.word	67281
	.byte	4,2,35,36,13
	.byte	'PLLERAYCON0',0
	.word	67143
	.byte	4,2,35,40,13
	.byte	'PLLERAYCON1',0
	.word	67212
	.byte	4,2,35,44,13
	.byte	'CCUCON0',0
	.word	63109
	.byte	4,2,35,48,13
	.byte	'CCUCON1',0
	.word	63174
	.byte	4,2,35,52,13
	.byte	'FDR',0
	.word	65683
	.byte	4,2,35,56,13
	.byte	'EXTCON',0
	.word	65619
	.byte	4,2,35,60,13
	.byte	'CCUCON2',0
	.word	63239
	.byte	4,2,35,64,13
	.byte	'CCUCON3',0
	.word	63304
	.byte	4,2,35,68,13
	.byte	'CCUCON4',0
	.word	63369
	.byte	4,2,35,72,13
	.byte	'CCUCON5',0
	.word	63434
	.byte	4,2,35,76,13
	.byte	'RSTSTAT',0
	.word	67937
	.byte	4,2,35,80,13
	.byte	'reserved_54',0
	.word	2814
	.byte	4,2,35,84,13
	.byte	'RSTCON',0
	.word	67808
	.byte	4,2,35,88,13
	.byte	'ARSTDIS',0
	.word	63044
	.byte	4,2,35,92,13
	.byte	'SWRSTCON',0
	.word	68131
	.byte	4,2,35,96,13
	.byte	'RSTCON2',0
	.word	67872
	.byte	4,2,35,100,13
	.byte	'reserved_68',0
	.word	2814
	.byte	4,2,35,104,13
	.byte	'EVRRSTCON',0
	.word	64670
	.byte	4,2,35,108,13
	.byte	'ESRCFG',0
	.word	68923
	.byte	8,2,35,112,13
	.byte	'ESROCFG',0
	.word	64136
	.byte	4,2,35,120,13
	.byte	'SYSCON',0
	.word	68197
	.byte	4,2,35,124,13
	.byte	'CCUCON6',0
	.word	63499
	.byte	4,3,35,128,1,13
	.byte	'CCUCON7',0
	.word	63564
	.byte	4,3,35,132,1,13
	.byte	'reserved_88',0
	.word	68932
	.byte	20,3,35,136,1,13
	.byte	'PDR',0
	.word	66825
	.byte	4,3,35,156,1,13
	.byte	'IOCR',0
	.word	65987
	.byte	4,3,35,160,1,13
	.byte	'OUT',0
	.word	66570
	.byte	4,3,35,164,1,13
	.byte	'OMR',0
	.word	66445
	.byte	4,3,35,168,1,13
	.byte	'IN',0
	.word	65927
	.byte	4,3,35,172,1,13
	.byte	'EVRSTAT',0
	.word	65423
	.byte	4,3,35,176,1,13
	.byte	'EVRDVSTAT',0
	.word	64401
	.byte	4,3,35,180,1,13
	.byte	'EVR13CON',0
	.word	64201
	.byte	4,3,35,184,1,13
	.byte	'EVR33CON',0
	.word	64267
	.byte	4,3,35,188,1,13
	.byte	'STSTAT',0
	.word	68067
	.byte	4,3,35,192,1,13
	.byte	'reserved_C4',0
	.word	2814
	.byte	4,3,35,196,1,13
	.byte	'PMSWCR0',0
	.word	67478
	.byte	4,3,35,200,1,13
	.byte	'PMSWSTAT',0
	.word	67673
	.byte	4,3,35,204,1,13
	.byte	'PMSWSTATCLR',0
	.word	67739
	.byte	4,3,35,208,1,13
	.byte	'PMCSR',0
	.word	68941
	.byte	8,3,35,212,1,13
	.byte	'reserved_DC',0
	.word	2814
	.byte	4,3,35,220,1,13
	.byte	'DTSSTAT',0
	.word	63821
	.byte	4,3,35,224,1,13
	.byte	'DTSCON',0
	.word	63693
	.byte	4,3,35,228,1,13
	.byte	'PMSWCR1',0
	.word	67543
	.byte	4,3,35,232,1,13
	.byte	'PMSWCR2',0
	.word	67608
	.byte	4,3,35,236,1,13
	.byte	'WDTS',0
	.word	68950
	.byte	12,3,35,240,1,13
	.byte	'EMSR',0
	.word	64010
	.byte	4,3,35,252,1,13
	.byte	'WDTCPU',0
	.word	68964
	.byte	24,3,35,128,2,13
	.byte	'reserved_118',0
	.word	4973
	.byte	12,3,35,152,2,13
	.byte	'TRAPSTAT',0
	.word	68456
	.byte	4,3,35,164,2,13
	.byte	'TRAPSET',0
	.word	68391
	.byte	4,3,35,168,2,13
	.byte	'TRAPCLR',0
	.word	68261
	.byte	4,3,35,172,2,13
	.byte	'TRAPDIS',0
	.word	68326
	.byte	4,3,35,176,2,13
	.byte	'reserved_134',0
	.word	2814
	.byte	4,3,35,180,2,13
	.byte	'LCLCON1',0
	.word	66253
	.byte	4,3,35,184,2,13
	.byte	'LCLTEST',0
	.word	66317
	.byte	4,3,35,188,2,13
	.byte	'CHIPID',0
	.word	63629
	.byte	4,3,35,192,2,13
	.byte	'MANID',0
	.word	66382
	.byte	4,3,35,196,2,13
	.byte	'reserved_148',0
	.word	4633
	.byte	8,3,35,200,2,13
	.byte	'SAFECON',0
	.word	68002
	.byte	4,3,35,208,2,13
	.byte	'reserved_154',0
	.word	12899
	.byte	16,3,35,212,2,13
	.byte	'LBISTCTRL0',0
	.word	66049
	.byte	4,3,35,228,2,13
	.byte	'LBISTCTRL1',0
	.word	66117
	.byte	4,3,35,232,2,13
	.byte	'LBISTCTRL2',0
	.word	66185
	.byte	4,3,35,236,2,13
	.byte	'reserved_170',0
	.word	10884
	.byte	28,3,35,240,2,13
	.byte	'PDISC',0
	.word	66762
	.byte	4,3,35,140,3,13
	.byte	'reserved_190',0
	.word	4633
	.byte	8,3,35,144,3,13
	.byte	'EVRTRIM',0
	.word	65488
	.byte	4,3,35,152,3,13
	.byte	'EVRADCSTAT',0
	.word	64333
	.byte	4,3,35,156,3,13
	.byte	'EVRUVMON',0
	.word	65553
	.byte	4,3,35,160,3,13
	.byte	'EVROVMON',0
	.word	64604
	.byte	4,3,35,164,3,13
	.byte	'EVRMONCTRL',0
	.word	64468
	.byte	4,3,35,168,3,13
	.byte	'reserved_1AC',0
	.word	2814
	.byte	4,3,35,172,3,13
	.byte	'EVRSDCTRL1',0
	.word	65151
	.byte	4,3,35,176,3,13
	.byte	'EVRSDCTRL2',0
	.word	65219
	.byte	4,3,35,180,3,13
	.byte	'EVRSDCTRL3',0
	.word	65287
	.byte	4,3,35,184,3,13
	.byte	'EVRSDCTRL4',0
	.word	65355
	.byte	4,3,35,188,3,13
	.byte	'EVRSDCOEFF1',0
	.word	64737
	.byte	4,3,35,192,3,13
	.byte	'EVRSDCOEFF2',0
	.word	64806
	.byte	4,3,35,196,3,13
	.byte	'EVRSDCOEFF3',0
	.word	64875
	.byte	4,3,35,200,3,13
	.byte	'EVRSDCOEFF4',0
	.word	64944
	.byte	4,3,35,204,3,13
	.byte	'EVRSDCOEFF5',0
	.word	65013
	.byte	4,3,35,208,3,13
	.byte	'EVRSDCOEFF6',0
	.word	65082
	.byte	4,3,35,212,3,13
	.byte	'EVROSCCTRL',0
	.word	64536
	.byte	4,3,35,216,3,13
	.byte	'reserved_1DC',0
	.word	2814
	.byte	4,3,35,220,3,13
	.byte	'OVCENABLE',0
	.word	66695
	.byte	4,3,35,224,3,13
	.byte	'OVCCON',0
	.word	66631
	.byte	4,3,35,228,3,13
	.byte	'reserved_1E8',0
	.word	18587
	.byte	40,3,35,232,3,13
	.byte	'EICR',0
	.word	68969
	.byte	16,3,35,144,4,13
	.byte	'EIFR',0
	.word	63948
	.byte	4,3,35,160,4,13
	.byte	'FMR',0
	.word	65744
	.byte	4,3,35,164,4,13
	.byte	'PDRR',0
	.word	66886
	.byte	4,3,35,168,4,13
	.byte	'IGCR',0
	.word	68978
	.byte	16,3,35,172,4,13
	.byte	'reserved_23C',0
	.word	2814
	.byte	4,3,35,188,4,13
	.byte	'DTSLIM',0
	.word	63757
	.byte	4,3,35,192,4,13
	.byte	'reserved_244',0
	.word	68987
	.byte	180,3,3,35,196,4,13
	.byte	'ACCEN1',0
	.word	62980
	.byte	4,3,35,248,7,13
	.byte	'ACCEN0',0
	.word	62916
	.byte	4,3,35,252,7,0,14
	.word	68998
	.byte	30
	.byte	'Ifx_SCU',0,6,181,16,3
	.word	70988
	.byte	17,7,83,9,1,18
	.byte	'IfxPort_InputMode_undefined',0,127,18
	.byte	'IfxPort_InputMode_noPullDevice',0,0,18
	.byte	'IfxPort_InputMode_pullDown',0,8,18
	.byte	'IfxPort_InputMode_pullUp',0,16,0,30
	.byte	'IfxPort_InputMode',0,7,89,3
	.word	71010
	.byte	30
	.byte	'IfxPort_OutputIdx',0,7,130,1,3
	.word	9636
	.byte	30
	.byte	'IfxPort_OutputMode',0,7,138,1,3
	.word	9566
	.byte	17,7,144,1,9,1,18
	.byte	'IfxPort_PadDriver_cmosAutomotiveSpeed1',0,0,18
	.byte	'IfxPort_PadDriver_cmosAutomotiveSpeed2',0,1,18
	.byte	'IfxPort_PadDriver_cmosAutomotiveSpeed3',0,2,18
	.byte	'IfxPort_PadDriver_cmosAutomotiveSpeed4',0,3,18
	.byte	'IfxPort_PadDriver_lvdsSpeed1',0,4,18
	.byte	'IfxPort_PadDriver_lvdsSpeed2',0,5,18
	.byte	'IfxPort_PadDriver_lvdsSpeed3',0,6,18
	.byte	'IfxPort_PadDriver_lvdsSpeed4',0,7,18
	.byte	'IfxPort_PadDriver_ttlSpeed1',0,8,18
	.byte	'IfxPort_PadDriver_ttlSpeed2',0,9,18
	.byte	'IfxPort_PadDriver_ttlSpeed3',0,10,18
	.byte	'IfxPort_PadDriver_ttlSpeed4',0,11,0,30
	.byte	'IfxPort_PadDriver',0,7,158,1,3
	.word	71216
	.byte	30
	.byte	'IfxPort_State',0,7,178,1,3
	.word	9949
	.byte	33,7,190,1,9,8,13
	.byte	'port',0
	.word	9561
	.byte	4,2,35,0,13
	.byte	'pinIndex',0
	.word	462
	.byte	1,2,35,4,0,30
	.byte	'IfxPort_Pin',0,7,194,1,3
	.word	71681
	.byte	33,20,59,15,20,13
	.byte	'module',0
	.word	27168
	.byte	4,2,35,0,13
	.byte	'groupId',0
	.word	31382
	.byte	1,2,35,4,13
	.byte	'pin',0
	.word	71681
	.byte	8,2,35,8,13
	.byte	'select',0
	.word	9636
	.byte	1,2,35,16,0,21
	.word	71741
	.byte	30
	.byte	'IfxVadc_GxBfl_Out',0,20,65,3
	.word	71809
	.byte	33,20,68,15,16,13
	.byte	'module',0
	.word	27168
	.byte	4,2,35,0,13
	.byte	'pin',0
	.word	71681
	.byte	8,2,35,4,13
	.byte	'select',0
	.word	9636
	.byte	1,2,35,12,0,21
	.word	71840
	.byte	30
	.byte	'IfxVadc_Emux_Out',0,20,73,3
	.word	71891
	.byte	10
	.byte	'_Ifx_CPU_A_Bits',0,21,45,16,4,11
	.byte	'ADDR',0,4
	.word	861
	.byte	32,0,2,35,0,0,30
	.byte	'Ifx_CPU_A_Bits',0,21,48,3
	.word	71921
	.byte	10
	.byte	'_Ifx_CPU_BIV_Bits',0,21,51,16,4,11
	.byte	'VSS',0,4
	.word	861
	.byte	1,31,2,35,0,11
	.byte	'BIV',0,4
	.word	861
	.byte	31,0,2,35,0,0,30
	.byte	'Ifx_CPU_BIV_Bits',0,21,55,3
	.word	71982
	.byte	10
	.byte	'_Ifx_CPU_BTV_Bits',0,21,58,16,4,11
	.byte	'reserved_0',0,4
	.word	861
	.byte	1,31,2,35,0,11
	.byte	'BTV',0,4
	.word	861
	.byte	31,0,2,35,0,0,30
	.byte	'Ifx_CPU_BTV_Bits',0,21,62,3
	.word	72061
	.byte	10
	.byte	'_Ifx_CPU_CCNT_Bits',0,21,65,16,4,11
	.byte	'CountValue',0,4
	.word	861
	.byte	31,1,2,35,0,11
	.byte	'SOvf',0,4
	.word	861
	.byte	1,0,2,35,0,0,30
	.byte	'Ifx_CPU_CCNT_Bits',0,21,69,3
	.word	72147
	.byte	10
	.byte	'_Ifx_CPU_CCTRL_Bits',0,21,72,16,4,11
	.byte	'CM',0,4
	.word	861
	.byte	1,31,2,35,0,11
	.byte	'CE',0,4
	.word	861
	.byte	1,30,2,35,0,11
	.byte	'M1',0,4
	.word	861
	.byte	3,27,2,35,0,11
	.byte	'M2',0,4
	.word	861
	.byte	3,24,2,35,0,11
	.byte	'M3',0,4
	.word	861
	.byte	3,21,2,35,0,11
	.byte	'reserved_11',0,4
	.word	861
	.byte	21,0,2,35,0,0,30
	.byte	'Ifx_CPU_CCTRL_Bits',0,21,80,3
	.word	72236
	.byte	10
	.byte	'_Ifx_CPU_COMPAT_Bits',0,21,83,16,4,11
	.byte	'reserved_0',0,4
	.word	861
	.byte	3,29,2,35,0,11
	.byte	'RM',0,4
	.word	861
	.byte	1,28,2,35,0,11
	.byte	'SP',0,4
	.word	861
	.byte	1,27,2,35,0,11
	.byte	'reserved_5',0,4
	.word	861
	.byte	27,0,2,35,0,0,30
	.byte	'Ifx_CPU_COMPAT_Bits',0,21,89,3
	.word	72382
	.byte	10
	.byte	'_Ifx_CPU_CORE_ID_Bits',0,21,92,16,4,11
	.byte	'CORE_ID',0,4
	.word	861
	.byte	3,29,2,35,0,11
	.byte	'reserved_3',0,4
	.word	861
	.byte	29,0,2,35,0,0,30
	.byte	'Ifx_CPU_CORE_ID_Bits',0,21,96,3
	.word	72509
	.byte	10
	.byte	'_Ifx_CPU_CPR_L_Bits',0,21,99,16,4,11
	.byte	'reserved_0',0,4
	.word	861
	.byte	3,29,2,35,0,11
	.byte	'LOWBND',0,4
	.word	861
	.byte	29,0,2,35,0,0,30
	.byte	'Ifx_CPU_CPR_L_Bits',0,21,103,3
	.word	72607
	.byte	10
	.byte	'_Ifx_CPU_CPR_U_Bits',0,21,106,16,4,11
	.byte	'reserved_0',0,4
	.word	861
	.byte	3,29,2,35,0,11
	.byte	'UPPBND',0,4
	.word	861
	.byte	29,0,2,35,0,0,30
	.byte	'Ifx_CPU_CPR_U_Bits',0,21,110,3
	.word	72700
	.byte	10
	.byte	'_Ifx_CPU_CPU_ID_Bits',0,21,113,16,4,11
	.byte	'MODREV',0,4
	.word	861
	.byte	8,24,2,35,0,11
	.byte	'MOD_32B',0,4
	.word	861
	.byte	8,16,2,35,0,11
	.byte	'MOD',0,4
	.word	861
	.byte	16,0,2,35,0,0,30
	.byte	'Ifx_CPU_CPU_ID_Bits',0,21,118,3
	.word	72793
	.byte	10
	.byte	'_Ifx_CPU_CPXE_Bits',0,21,121,16,4,11
	.byte	'XE',0,4
	.word	861
	.byte	8,24,2,35,0,11
	.byte	'reserved_8',0,4
	.word	861
	.byte	24,0,2,35,0,0,30
	.byte	'Ifx_CPU_CPXE_Bits',0,21,125,3
	.word	72900
	.byte	10
	.byte	'_Ifx_CPU_CREVT_Bits',0,21,128,1,16,4,11
	.byte	'EVTA',0,4
	.word	861
	.byte	3,29,2,35,0,11
	.byte	'BBM',0,4
	.word	861
	.byte	1,28,2,35,0,11
	.byte	'BOD',0,4
	.word	861
	.byte	1,27,2,35,0,11
	.byte	'SUSP',0,4
	.word	861
	.byte	1,26,2,35,0,11
	.byte	'CNT',0,4
	.word	861
	.byte	2,24,2,35,0,11
	.byte	'reserved_8',0,4
	.word	861
	.byte	24,0,2,35,0,0,30
	.byte	'Ifx_CPU_CREVT_Bits',0,21,136,1,3
	.word	72987
	.byte	10
	.byte	'_Ifx_CPU_CUS_ID_Bits',0,21,139,1,16,4,11
	.byte	'CID',0,4
	.word	861
	.byte	3,29,2,35,0,11
	.byte	'reserved_3',0,4
	.word	861
	.byte	29,0,2,35,0,0,30
	.byte	'Ifx_CPU_CUS_ID_Bits',0,21,143,1,3
	.word	73141
	.byte	10
	.byte	'_Ifx_CPU_D_Bits',0,21,146,1,16,4,11
	.byte	'DATA',0,4
	.word	861
	.byte	32,0,2,35,0,0,30
	.byte	'Ifx_CPU_D_Bits',0,21,149,1,3
	.word	73235
	.byte	10
	.byte	'_Ifx_CPU_DATR_Bits',0,21,152,1,16,4,11
	.byte	'reserved_0',0,4
	.word	861
	.byte	3,29,2,35,0,11
	.byte	'SBE',0,4
	.word	861
	.byte	1,28,2,35,0,11
	.byte	'reserved_4',0,4
	.word	861
	.byte	5,23,2,35,0,11
	.byte	'CWE',0,4
	.word	861
	.byte	1,22,2,35,0,11
	.byte	'CFE',0,4
	.word	861
	.byte	1,21,2,35,0,11
	.byte	'reserved_11',0,4
	.word	861
	.byte	3,18,2,35,0,11
	.byte	'SOE',0,4
	.word	861
	.byte	1,17,2,35,0,11
	.byte	'SME',0,4
	.word	861
	.byte	1,16,2,35,0,11
	.byte	'reserved_16',0,4
	.word	861
	.byte	16,0,2,35,0,0,30
	.byte	'Ifx_CPU_DATR_Bits',0,21,163,1,3
	.word	73298
	.byte	10
	.byte	'_Ifx_CPU_DBGSR_Bits',0,21,166,1,16,4,11
	.byte	'DE',0,4
	.word	861
	.byte	1,31,2,35,0,11
	.byte	'HALT',0,4
	.word	861
	.byte	2,29,2,35,0,11
	.byte	'SIH',0,4
	.word	861
	.byte	1,28,2,35,0,11
	.byte	'SUSP',0,4
	.word	861
	.byte	1,27,2,35,0,11
	.byte	'reserved_5',0,4
	.word	861
	.byte	1,26,2,35,0,11
	.byte	'PREVSUSP',0,4
	.word	861
	.byte	1,25,2,35,0,11
	.byte	'PEVT',0,4
	.word	861
	.byte	1,24,2,35,0,11
	.byte	'EVTSRC',0,4
	.word	861
	.byte	5,19,2,35,0,11
	.byte	'reserved_13',0,4
	.word	861
	.byte	19,0,2,35,0,0,30
	.byte	'Ifx_CPU_DBGSR_Bits',0,21,177,1,3
	.word	73516
	.byte	10
	.byte	'_Ifx_CPU_DBGTCR_Bits',0,21,180,1,16,4,11
	.byte	'DTA',0,4
	.word	861
	.byte	1,31,2,35,0,11
	.byte	'reserved_1',0,4
	.word	861
	.byte	31,0,2,35,0,0,30
	.byte	'Ifx_CPU_DBGTCR_Bits',0,21,184,1,3
	.word	73731
	.byte	10
	.byte	'_Ifx_CPU_DCON0_Bits',0,21,187,1,16,4,11
	.byte	'reserved_0',0,4
	.word	861
	.byte	1,31,2,35,0,11
	.byte	'DCBYP',0,4
	.word	861
	.byte	1,30,2,35,0,11
	.byte	'reserved_2',0,4
	.word	861
	.byte	30,0,2,35,0,0,30
	.byte	'Ifx_CPU_DCON0_Bits',0,21,192,1,3
	.word	73825
	.byte	10
	.byte	'_Ifx_CPU_DCON2_Bits',0,21,195,1,16,4,11
	.byte	'DCACHE_SZE',0,4
	.word	861
	.byte	16,16,2,35,0,11
	.byte	'DSCRATCH_SZE',0,4
	.word	861
	.byte	16,0,2,35,0,0,30
	.byte	'Ifx_CPU_DCON2_Bits',0,21,199,1,3
	.word	73941
	.byte	10
	.byte	'_Ifx_CPU_DCX_Bits',0,21,202,1,16,4,11
	.byte	'reserved_0',0,4
	.word	861
	.byte	6,26,2,35,0,11
	.byte	'DCXValue',0,4
	.word	861
	.byte	26,0,2,35,0,0,30
	.byte	'Ifx_CPU_DCX_Bits',0,21,206,1,3
	.word	74042
	.byte	10
	.byte	'_Ifx_CPU_DEADD_Bits',0,21,209,1,16,4,11
	.byte	'ERROR_ADDRESS',0,4
	.word	861
	.byte	32,0,2,35,0,0,30
	.byte	'Ifx_CPU_DEADD_Bits',0,21,212,1,3
	.word	74135
	.byte	10
	.byte	'_Ifx_CPU_DIEAR_Bits',0,21,215,1,16,4,11
	.byte	'TA',0,4
	.word	861
	.byte	32,0,2,35,0,0,30
	.byte	'Ifx_CPU_DIEAR_Bits',0,21,218,1,3
	.word	74215
	.byte	10
	.byte	'_Ifx_CPU_DIETR_Bits',0,21,221,1,16,4,11
	.byte	'IED',0,4
	.word	861
	.byte	1,31,2,35,0,11
	.byte	'IE_T',0,4
	.word	861
	.byte	1,30,2,35,0,11
	.byte	'IE_C',0,4
	.word	861
	.byte	1,29,2,35,0,11
	.byte	'IE_S',0,4
	.word	861
	.byte	1,28,2,35,0,11
	.byte	'IE_BI',0,4
	.word	861
	.byte	1,27,2,35,0,11
	.byte	'E_INFO',0,4
	.word	861
	.byte	6,21,2,35,0,11
	.byte	'IE_DUAL',0,4
	.word	861
	.byte	1,20,2,35,0,11
	.byte	'IE_SP',0,4
	.word	861
	.byte	1,19,2,35,0,11
	.byte	'IE_BS',0,4
	.word	861
	.byte	1,18,2,35,0,11
	.byte	'reserved_14',0,4
	.word	861
	.byte	18,0,2,35,0,0,30
	.byte	'Ifx_CPU_DIETR_Bits',0,21,233,1,3
	.word	74284
	.byte	10
	.byte	'_Ifx_CPU_DMS_Bits',0,21,236,1,16,4,11
	.byte	'reserved_0',0,4
	.word	861
	.byte	1,31,2,35,0,11
	.byte	'DMSValue',0,4
	.word	861
	.byte	31,0,2,35,0,0,30
	.byte	'Ifx_CPU_DMS_Bits',0,21,240,1,3
	.word	74513
	.byte	10
	.byte	'_Ifx_CPU_DPR_L_Bits',0,21,243,1,16,4,11
	.byte	'reserved_0',0,4
	.word	861
	.byte	3,29,2,35,0,11
	.byte	'LOWBND',0,4
	.word	861
	.byte	29,0,2,35,0,0,30
	.byte	'Ifx_CPU_DPR_L_Bits',0,21,247,1,3
	.word	74606
	.byte	10
	.byte	'_Ifx_CPU_DPR_U_Bits',0,21,250,1,16,4,11
	.byte	'reserved_0',0,4
	.word	861
	.byte	3,29,2,35,0,11
	.byte	'UPPBND',0,4
	.word	861
	.byte	29,0,2,35,0,0,30
	.byte	'Ifx_CPU_DPR_U_Bits',0,21,254,1,3
	.word	74701
	.byte	10
	.byte	'_Ifx_CPU_DPRE_Bits',0,21,129,2,16,4,11
	.byte	'RE',0,4
	.word	861
	.byte	16,16,2,35,0,11
	.byte	'reserved_16',0,4
	.word	861
	.byte	16,0,2,35,0,0,30
	.byte	'Ifx_CPU_DPRE_Bits',0,21,133,2,3
	.word	74796
	.byte	10
	.byte	'_Ifx_CPU_DPWE_Bits',0,21,136,2,16,4,11
	.byte	'WE',0,4
	.word	861
	.byte	16,16,2,35,0,11
	.byte	'reserved_16',0,4
	.word	861
	.byte	16,0,2,35,0,0,30
	.byte	'Ifx_CPU_DPWE_Bits',0,21,140,2,3
	.word	74886
	.byte	10
	.byte	'_Ifx_CPU_DSTR_Bits',0,21,143,2,16,4,11
	.byte	'SRE',0,4
	.word	861
	.byte	1,31,2,35,0,11
	.byte	'GAE',0,4
	.word	861
	.byte	1,30,2,35,0,11
	.byte	'LBE',0,4
	.word	861
	.byte	1,29,2,35,0,11
	.byte	'reserved_3',0,4
	.word	861
	.byte	3,26,2,35,0,11
	.byte	'CRE',0,4
	.word	861
	.byte	1,25,2,35,0,11
	.byte	'reserved_7',0,4
	.word	861
	.byte	7,18,2,35,0,11
	.byte	'DTME',0,4
	.word	861
	.byte	1,17,2,35,0,11
	.byte	'LOE',0,4
	.word	861
	.byte	1,16,2,35,0,11
	.byte	'SDE',0,4
	.word	861
	.byte	1,15,2,35,0,11
	.byte	'SCE',0,4
	.word	861
	.byte	1,14,2,35,0,11
	.byte	'CAC',0,4
	.word	861
	.byte	1,13,2,35,0,11
	.byte	'MPE',0,4
	.word	861
	.byte	1,12,2,35,0,11
	.byte	'CLE',0,4
	.word	861
	.byte	1,11,2,35,0,11
	.byte	'reserved_21',0,4
	.word	861
	.byte	3,8,2,35,0,11
	.byte	'ALN',0,4
	.word	861
	.byte	1,7,2,35,0,11
	.byte	'reserved_25',0,4
	.word	861
	.byte	7,0,2,35,0,0,30
	.byte	'Ifx_CPU_DSTR_Bits',0,21,161,2,3
	.word	74976
	.byte	10
	.byte	'_Ifx_CPU_EXEVT_Bits',0,21,164,2,16,4,11
	.byte	'EVTA',0,4
	.word	861
	.byte	3,29,2,35,0,11
	.byte	'BBM',0,4
	.word	861
	.byte	1,28,2,35,0,11
	.byte	'BOD',0,4
	.word	861
	.byte	1,27,2,35,0,11
	.byte	'SUSP',0,4
	.word	861
	.byte	1,26,2,35,0,11
	.byte	'CNT',0,4
	.word	861
	.byte	2,24,2,35,0,11
	.byte	'reserved_8',0,4
	.word	861
	.byte	24,0,2,35,0,0,30
	.byte	'Ifx_CPU_EXEVT_Bits',0,21,172,2,3
	.word	75300
	.byte	10
	.byte	'_Ifx_CPU_FCX_Bits',0,21,175,2,16,4,11
	.byte	'FCXO',0,4
	.word	861
	.byte	16,16,2,35,0,11
	.byte	'FCXS',0,4
	.word	861
	.byte	4,12,2,35,0,11
	.byte	'reserved_20',0,4
	.word	861
	.byte	12,0,2,35,0,0,30
	.byte	'Ifx_CPU_FCX_Bits',0,21,180,2,3
	.word	75454
	.byte	10
	.byte	'_Ifx_CPU_FPU_TRAP_CON_Bits',0,21,183,2,16,4,11
	.byte	'TST',0,4
	.word	861
	.byte	1,31,2,35,0,11
	.byte	'TCL',0,4
	.word	861
	.byte	1,30,2,35,0,11
	.byte	'reserved_2',0,4
	.word	861
	.byte	6,24,2,35,0,11
	.byte	'RM',0,4
	.word	861
	.byte	2,22,2,35,0,11
	.byte	'reserved_10',0,4
	.word	861
	.byte	8,14,2,35,0,11
	.byte	'FXE',0,4
	.word	861
	.byte	1,13,2,35,0,11
	.byte	'FUE',0,4
	.word	861
	.byte	1,12,2,35,0,11
	.byte	'FZE',0,4
	.word	861
	.byte	1,11,2,35,0,11
	.byte	'FVE',0,4
	.word	861
	.byte	1,10,2,35,0,11
	.byte	'FIE',0,4
	.word	861
	.byte	1,9,2,35,0,11
	.byte	'reserved_23',0,4
	.word	861
	.byte	3,6,2,35,0,11
	.byte	'FX',0,4
	.word	861
	.byte	1,5,2,35,0,11
	.byte	'FU',0,4
	.word	861
	.byte	1,4,2,35,0,11
	.byte	'FZ',0,4
	.word	861
	.byte	1,3,2,35,0,11
	.byte	'FV',0,4
	.word	861
	.byte	1,2,2,35,0,11
	.byte	'FI',0,4
	.word	861
	.byte	1,1,2,35,0,11
	.byte	'reserved_31',0,4
	.word	861
	.byte	1,0,2,35,0,0,30
	.byte	'Ifx_CPU_FPU_TRAP_CON_Bits',0,21,202,2,3
	.word	75560
	.byte	10
	.byte	'_Ifx_CPU_FPU_TRAP_OPC_Bits',0,21,205,2,16,4,11
	.byte	'OPC',0,4
	.word	861
	.byte	8,24,2,35,0,11
	.byte	'FMT',0,4
	.word	861
	.byte	1,23,2,35,0,11
	.byte	'reserved_9',0,4
	.word	861
	.byte	7,16,2,35,0,11
	.byte	'DREG',0,4
	.word	861
	.byte	4,12,2,35,0,11
	.byte	'reserved_20',0,4
	.word	861
	.byte	12,0,2,35,0,0,30
	.byte	'Ifx_CPU_FPU_TRAP_OPC_Bits',0,21,212,2,3
	.word	75909
	.byte	10
	.byte	'_Ifx_CPU_FPU_TRAP_PC_Bits',0,21,215,2,16,4,11
	.byte	'PC',0,4
	.word	861
	.byte	32,0,2,35,0,0,30
	.byte	'Ifx_CPU_FPU_TRAP_PC_Bits',0,21,218,2,3
	.word	76069
	.byte	10
	.byte	'_Ifx_CPU_FPU_TRAP_SRC1_Bits',0,21,221,2,16,4,11
	.byte	'SRC1',0,4
	.word	861
	.byte	32,0,2,35,0,0,30
	.byte	'Ifx_CPU_FPU_TRAP_SRC1_Bits',0,21,224,2,3
	.word	76150
	.byte	10
	.byte	'_Ifx_CPU_FPU_TRAP_SRC2_Bits',0,21,227,2,16,4,11
	.byte	'SRC2',0,4
	.word	861
	.byte	32,0,2,35,0,0,30
	.byte	'Ifx_CPU_FPU_TRAP_SRC2_Bits',0,21,230,2,3
	.word	76237
	.byte	10
	.byte	'_Ifx_CPU_FPU_TRAP_SRC3_Bits',0,21,233,2,16,4,11
	.byte	'SRC3',0,4
	.word	861
	.byte	32,0,2,35,0,0,30
	.byte	'Ifx_CPU_FPU_TRAP_SRC3_Bits',0,21,236,2,3
	.word	76324
	.byte	10
	.byte	'_Ifx_CPU_ICNT_Bits',0,21,239,2,16,4,11
	.byte	'CountValue',0,4
	.word	861
	.byte	31,1,2,35,0,11
	.byte	'SOvf',0,4
	.word	861
	.byte	1,0,2,35,0,0,30
	.byte	'Ifx_CPU_ICNT_Bits',0,21,243,2,3
	.word	76411
	.byte	10
	.byte	'_Ifx_CPU_ICR_Bits',0,21,246,2,16,4,11
	.byte	'CCPN',0,4
	.word	861
	.byte	10,22,2,35,0,11
	.byte	'reserved_10',0,4
	.word	861
	.byte	5,17,2,35,0,11
	.byte	'IE',0,4
	.word	861
	.byte	1,16,2,35,0,11
	.byte	'PIPN',0,4
	.word	861
	.byte	10,6,2,35,0,11
	.byte	'reserved_26',0,4
	.word	861
	.byte	6,0,2,35,0,0,30
	.byte	'Ifx_CPU_ICR_Bits',0,21,253,2,3
	.word	76502
	.byte	10
	.byte	'_Ifx_CPU_ISP_Bits',0,21,128,3,16,4,11
	.byte	'ISP',0,4
	.word	861
	.byte	32,0,2,35,0,0,30
	.byte	'Ifx_CPU_ISP_Bits',0,21,131,3,3
	.word	76645
	.byte	10
	.byte	'_Ifx_CPU_LCX_Bits',0,21,134,3,16,4,11
	.byte	'LCXO',0,4
	.word	861
	.byte	16,16,2,35,0,11
	.byte	'LCXS',0,4
	.word	861
	.byte	4,12,2,35,0,11
	.byte	'reserved_20',0,4
	.word	861
	.byte	12,0,2,35,0,0,30
	.byte	'Ifx_CPU_LCX_Bits',0,21,139,3,3
	.word	76711
	.byte	10
	.byte	'_Ifx_CPU_M1CNT_Bits',0,21,142,3,16,4,11
	.byte	'CountValue',0,4
	.word	861
	.byte	31,1,2,35,0,11
	.byte	'SOvf',0,4
	.word	861
	.byte	1,0,2,35,0,0,30
	.byte	'Ifx_CPU_M1CNT_Bits',0,21,146,3,3
	.word	76817
	.byte	10
	.byte	'_Ifx_CPU_M2CNT_Bits',0,21,149,3,16,4,11
	.byte	'CountValue',0,4
	.word	861
	.byte	31,1,2,35,0,11
	.byte	'SOvf',0,4
	.word	861
	.byte	1,0,2,35,0,0,30
	.byte	'Ifx_CPU_M2CNT_Bits',0,21,153,3,3
	.word	76910
	.byte	10
	.byte	'_Ifx_CPU_M3CNT_Bits',0,21,156,3,16,4,11
	.byte	'CountValue',0,4
	.word	861
	.byte	31,1,2,35,0,11
	.byte	'SOvf',0,4
	.word	861
	.byte	1,0,2,35,0,0,30
	.byte	'Ifx_CPU_M3CNT_Bits',0,21,160,3,3
	.word	77003
	.byte	10
	.byte	'_Ifx_CPU_PC_Bits',0,21,163,3,16,4,11
	.byte	'reserved_0',0,4
	.word	861
	.byte	1,31,2,35,0,11
	.byte	'PC',0,4
	.word	861
	.byte	31,0,2,35,0,0,30
	.byte	'Ifx_CPU_PC_Bits',0,21,167,3,3
	.word	77096
	.byte	10
	.byte	'_Ifx_CPU_PCON0_Bits',0,21,170,3,16,4,11
	.byte	'reserved_0',0,4
	.word	861
	.byte	1,31,2,35,0,11
	.byte	'PCBYP',0,4
	.word	861
	.byte	1,30,2,35,0,11
	.byte	'reserved_2',0,4
	.word	861
	.byte	30,0,2,35,0,0,30
	.byte	'Ifx_CPU_PCON0_Bits',0,21,175,3,3
	.word	77181
	.byte	10
	.byte	'_Ifx_CPU_PCON1_Bits',0,21,178,3,16,4,11
	.byte	'PCINV',0,4
	.word	861
	.byte	1,31,2,35,0,11
	.byte	'PBINV',0,4
	.word	861
	.byte	1,30,2,35,0,11
	.byte	'reserved_2',0,4
	.word	861
	.byte	30,0,2,35,0,0,30
	.byte	'Ifx_CPU_PCON1_Bits',0,21,183,3,3
	.word	77297
	.byte	10
	.byte	'_Ifx_CPU_PCON2_Bits',0,21,186,3,16,4,11
	.byte	'PCACHE_SZE',0,4
	.word	861
	.byte	16,16,2,35,0,11
	.byte	'PSCRATCH_SZE',0,4
	.word	861
	.byte	16,0,2,35,0,0,30
	.byte	'Ifx_CPU_PCON2_Bits',0,21,190,3,3
	.word	77408
	.byte	10
	.byte	'_Ifx_CPU_PCXI_Bits',0,21,193,3,16,4,11
	.byte	'PCXO',0,4
	.word	861
	.byte	16,16,2,35,0,11
	.byte	'PCXS',0,4
	.word	861
	.byte	4,12,2,35,0,11
	.byte	'UL',0,4
	.word	861
	.byte	1,11,2,35,0,11
	.byte	'PIE',0,4
	.word	861
	.byte	1,10,2,35,0,11
	.byte	'PCPN',0,4
	.word	861
	.byte	10,0,2,35,0,0,30
	.byte	'Ifx_CPU_PCXI_Bits',0,21,200,3,3
	.word	77509
	.byte	10
	.byte	'_Ifx_CPU_PIEAR_Bits',0,21,203,3,16,4,11
	.byte	'TA',0,4
	.word	861
	.byte	32,0,2,35,0,0,30
	.byte	'Ifx_CPU_PIEAR_Bits',0,21,206,3,3
	.word	77639
	.byte	10
	.byte	'_Ifx_CPU_PIETR_Bits',0,21,209,3,16,4,11
	.byte	'IED',0,4
	.word	861
	.byte	1,31,2,35,0,11
	.byte	'IE_T',0,4
	.word	861
	.byte	1,30,2,35,0,11
	.byte	'IE_C',0,4
	.word	861
	.byte	1,29,2,35,0,11
	.byte	'IE_S',0,4
	.word	861
	.byte	1,28,2,35,0,11
	.byte	'IE_BI',0,4
	.word	861
	.byte	1,27,2,35,0,11
	.byte	'E_INFO',0,4
	.word	861
	.byte	6,21,2,35,0,11
	.byte	'IE_DUAL',0,4
	.word	861
	.byte	1,20,2,35,0,11
	.byte	'IE_SP',0,4
	.word	861
	.byte	1,19,2,35,0,11
	.byte	'IE_BS',0,4
	.word	861
	.byte	1,18,2,35,0,11
	.byte	'reserved_14',0,4
	.word	861
	.byte	18,0,2,35,0,0,30
	.byte	'Ifx_CPU_PIETR_Bits',0,21,221,3,3
	.word	77708
	.byte	10
	.byte	'_Ifx_CPU_PMA0_Bits',0,21,224,3,16,4,11
	.byte	'reserved_0',0,4
	.word	861
	.byte	13,19,2,35,0,11
	.byte	'DAC',0,4
	.word	861
	.byte	3,16,2,35,0,11
	.byte	'reserved_16',0,4
	.word	861
	.byte	16,0,2,35,0,0,30
	.byte	'Ifx_CPU_PMA0_Bits',0,21,229,3,3
	.word	77937
	.byte	10
	.byte	'_Ifx_CPU_PMA1_Bits',0,21,232,3,16,4,11
	.byte	'reserved_0',0,4
	.word	861
	.byte	14,18,2,35,0,11
	.byte	'CAC',0,4
	.word	861
	.byte	2,16,2,35,0,11
	.byte	'reserved_16',0,4
	.word	861
	.byte	16,0,2,35,0,0,30
	.byte	'Ifx_CPU_PMA1_Bits',0,21,237,3,3
	.word	78050
	.byte	10
	.byte	'_Ifx_CPU_PMA2_Bits',0,21,240,3,16,4,11
	.byte	'PSI',0,4
	.word	861
	.byte	16,16,2,35,0,11
	.byte	'reserved_16',0,4
	.word	861
	.byte	16,0,2,35,0,0,30
	.byte	'Ifx_CPU_PMA2_Bits',0,21,244,3,3
	.word	78163
	.byte	10
	.byte	'_Ifx_CPU_PSTR_Bits',0,21,247,3,16,4,11
	.byte	'FRE',0,4
	.word	861
	.byte	1,31,2,35,0,11
	.byte	'reserved_1',0,4
	.word	861
	.byte	1,30,2,35,0,11
	.byte	'FBE',0,4
	.word	861
	.byte	1,29,2,35,0,11
	.byte	'reserved_3',0,4
	.word	861
	.byte	9,20,2,35,0,11
	.byte	'FPE',0,4
	.word	861
	.byte	1,19,2,35,0,11
	.byte	'reserved_13',0,4
	.word	861
	.byte	1,18,2,35,0,11
	.byte	'FME',0,4
	.word	861
	.byte	1,17,2,35,0,11
	.byte	'reserved_15',0,4
	.word	861
	.byte	17,0,2,35,0,0,30
	.byte	'Ifx_CPU_PSTR_Bits',0,21,129,4,3
	.word	78254
	.byte	10
	.byte	'_Ifx_CPU_PSW_Bits',0,21,132,4,16,4,11
	.byte	'CDC',0,4
	.word	861
	.byte	7,25,2,35,0,11
	.byte	'CDE',0,4
	.word	861
	.byte	1,24,2,35,0,11
	.byte	'GW',0,4
	.word	861
	.byte	1,23,2,35,0,11
	.byte	'IS',0,4
	.word	861
	.byte	1,22,2,35,0,11
	.byte	'IO',0,4
	.word	861
	.byte	2,20,2,35,0,11
	.byte	'PRS',0,4
	.word	861
	.byte	2,18,2,35,0,11
	.byte	'S',0,4
	.word	861
	.byte	1,17,2,35,0,11
	.byte	'reserved_15',0,4
	.word	861
	.byte	12,5,2,35,0,11
	.byte	'SAV',0,4
	.word	861
	.byte	1,4,2,35,0,11
	.byte	'AV',0,4
	.word	861
	.byte	1,3,2,35,0,11
	.byte	'SV',0,4
	.word	861
	.byte	1,2,2,35,0,11
	.byte	'V',0,4
	.word	861
	.byte	1,1,2,35,0,11
	.byte	'C',0,4
	.word	861
	.byte	1,0,2,35,0,0,30
	.byte	'Ifx_CPU_PSW_Bits',0,21,147,4,3
	.word	78457
	.byte	10
	.byte	'_Ifx_CPU_SEGEN_Bits',0,21,150,4,16,4,11
	.byte	'ADFLIP',0,4
	.word	861
	.byte	8,24,2,35,0,11
	.byte	'ADTYPE',0,4
	.word	861
	.byte	2,22,2,35,0,11
	.byte	'reserved_10',0,4
	.word	861
	.byte	21,1,2,35,0,11
	.byte	'AE',0,4
	.word	861
	.byte	1,0,2,35,0,0,30
	.byte	'Ifx_CPU_SEGEN_Bits',0,21,156,4,3
	.word	78700
	.byte	10
	.byte	'_Ifx_CPU_SMACON_Bits',0,21,159,4,16,4,11
	.byte	'PC',0,4
	.word	861
	.byte	1,31,2,35,0,11
	.byte	'reserved_1',0,4
	.word	861
	.byte	1,30,2,35,0,11
	.byte	'PT',0,4
	.word	861
	.byte	1,29,2,35,0,11
	.byte	'reserved_3',0,4
	.word	861
	.byte	5,24,2,35,0,11
	.byte	'DC',0,4
	.word	861
	.byte	1,23,2,35,0,11
	.byte	'reserved_9',0,4
	.word	861
	.byte	1,22,2,35,0,11
	.byte	'DT',0,4
	.word	861
	.byte	1,21,2,35,0,11
	.byte	'reserved_11',0,4
	.word	861
	.byte	13,8,2,35,0,11
	.byte	'IODT',0,4
	.word	861
	.byte	1,7,2,35,0,11
	.byte	'reserved_25',0,4
	.word	861
	.byte	7,0,2,35,0,0,30
	.byte	'Ifx_CPU_SMACON_Bits',0,21,171,4,3
	.word	78828
	.byte	10
	.byte	'_Ifx_CPU_SPROT_ACCENA_Bits',0,21,174,4,16,4,11
	.byte	'EN',0,4
	.word	439
	.byte	32,0,2,35,0,0,30
	.byte	'Ifx_CPU_SPROT_ACCENA_Bits',0,21,177,4,3
	.word	79069
	.byte	10
	.byte	'_Ifx_CPU_SPROT_ACCENB_Bits',0,21,180,4,16,4,11
	.byte	'reserved_0',0,4
	.word	439
	.byte	32,0,2,35,0,0,30
	.byte	'Ifx_CPU_SPROT_ACCENB_Bits',0,21,183,4,3
	.word	79152
	.byte	10
	.byte	'_Ifx_CPU_SPROT_RGN_ACCENA_Bits',0,21,186,4,16,4,11
	.byte	'EN',0,4
	.word	439
	.byte	32,0,2,35,0,0,30
	.byte	'Ifx_CPU_SPROT_RGN_ACCENA_Bits',0,21,189,4,3
	.word	79243
	.byte	10
	.byte	'_Ifx_CPU_SPROT_RGN_ACCENB_Bits',0,21,192,4,16,4,11
	.byte	'reserved_0',0,4
	.word	439
	.byte	32,0,2,35,0,0,30
	.byte	'Ifx_CPU_SPROT_RGN_ACCENB_Bits',0,21,195,4,3
	.word	79334
	.byte	10
	.byte	'_Ifx_CPU_SPROT_RGN_LA_Bits',0,21,198,4,16,4,11
	.byte	'reserved_0',0,1
	.word	462
	.byte	5,3,2,35,0,11
	.byte	'ADDR',0,4
	.word	439
	.byte	27,0,2,35,0,0,30
	.byte	'Ifx_CPU_SPROT_RGN_LA_Bits',0,21,202,4,3
	.word	79433
	.byte	10
	.byte	'_Ifx_CPU_SPROT_RGN_UA_Bits',0,21,205,4,16,4,11
	.byte	'reserved_0',0,1
	.word	462
	.byte	5,3,2,35,0,11
	.byte	'ADDR',0,4
	.word	439
	.byte	27,0,2,35,0,0,30
	.byte	'Ifx_CPU_SPROT_RGN_UA_Bits',0,21,209,4,3
	.word	79540
	.byte	10
	.byte	'_Ifx_CPU_SWEVT_Bits',0,21,212,4,16,4,11
	.byte	'EVTA',0,4
	.word	861
	.byte	3,29,2,35,0,11
	.byte	'BBM',0,4
	.word	861
	.byte	1,28,2,35,0,11
	.byte	'BOD',0,4
	.word	861
	.byte	1,27,2,35,0,11
	.byte	'SUSP',0,4
	.word	861
	.byte	1,26,2,35,0,11
	.byte	'CNT',0,4
	.word	861
	.byte	2,24,2,35,0,11
	.byte	'reserved_8',0,4
	.word	861
	.byte	24,0,2,35,0,0,30
	.byte	'Ifx_CPU_SWEVT_Bits',0,21,220,4,3
	.word	79647
	.byte	10
	.byte	'_Ifx_CPU_SYSCON_Bits',0,21,223,4,16,4,11
	.byte	'FCDSF',0,4
	.word	861
	.byte	1,31,2,35,0,11
	.byte	'PROTEN',0,4
	.word	861
	.byte	1,30,2,35,0,11
	.byte	'TPROTEN',0,4
	.word	861
	.byte	1,29,2,35,0,11
	.byte	'IS',0,4
	.word	861
	.byte	1,28,2,35,0,11
	.byte	'IT',0,4
	.word	861
	.byte	1,27,2,35,0,11
	.byte	'reserved_5',0,4
	.word	861
	.byte	27,0,2,35,0,0,30
	.byte	'Ifx_CPU_SYSCON_Bits',0,21,231,4,3
	.word	79801
	.byte	10
	.byte	'_Ifx_CPU_TASK_ASI_Bits',0,21,234,4,16,4,11
	.byte	'ASI',0,4
	.word	861
	.byte	5,27,2,35,0,11
	.byte	'reserved_5',0,4
	.word	861
	.byte	27,0,2,35,0,0,30
	.byte	'Ifx_CPU_TASK_ASI_Bits',0,21,238,4,3
	.word	79962
	.byte	10
	.byte	'_Ifx_CPU_TPS_CON_Bits',0,21,241,4,16,4,11
	.byte	'TEXP0',0,4
	.word	861
	.byte	1,31,2,35,0,11
	.byte	'TEXP1',0,4
	.word	861
	.byte	1,30,2,35,0,11
	.byte	'TEXP2',0,4
	.word	861
	.byte	1,29,2,35,0,11
	.byte	'reserved_3',0,4
	.word	861
	.byte	13,16,2,35,0,11
	.byte	'TTRAP',0,4
	.word	861
	.byte	1,15,2,35,0,11
	.byte	'reserved_17',0,4
	.word	861
	.byte	15,0,2,35,0,0,30
	.byte	'Ifx_CPU_TPS_CON_Bits',0,21,249,4,3
	.word	80060
	.byte	10
	.byte	'_Ifx_CPU_TPS_TIMER_Bits',0,21,252,4,16,4,11
	.byte	'Timer',0,4
	.word	861
	.byte	32,0,2,35,0,0,30
	.byte	'Ifx_CPU_TPS_TIMER_Bits',0,21,255,4,3
	.word	80232
	.byte	10
	.byte	'_Ifx_CPU_TR_ADR_Bits',0,21,130,5,16,4,11
	.byte	'ADDR',0,4
	.word	861
	.byte	32,0,2,35,0,0,30
	.byte	'Ifx_CPU_TR_ADR_Bits',0,21,133,5,3
	.word	80312
	.byte	10
	.byte	'_Ifx_CPU_TR_EVT_Bits',0,21,136,5,16,4,11
	.byte	'EVTA',0,4
	.word	861
	.byte	3,29,2,35,0,11
	.byte	'BBM',0,4
	.word	861
	.byte	1,28,2,35,0,11
	.byte	'BOD',0,4
	.word	861
	.byte	1,27,2,35,0,11
	.byte	'SUSP',0,4
	.word	861
	.byte	1,26,2,35,0,11
	.byte	'CNT',0,4
	.word	861
	.byte	2,24,2,35,0,11
	.byte	'reserved_8',0,4
	.word	861
	.byte	4,20,2,35,0,11
	.byte	'TYP',0,4
	.word	861
	.byte	1,19,2,35,0,11
	.byte	'RNG',0,4
	.word	861
	.byte	1,18,2,35,0,11
	.byte	'reserved_14',0,4
	.word	861
	.byte	1,17,2,35,0,11
	.byte	'ASI_EN',0,4
	.word	861
	.byte	1,16,2,35,0,11
	.byte	'ASI',0,4
	.word	861
	.byte	5,11,2,35,0,11
	.byte	'reserved_21',0,4
	.word	861
	.byte	6,5,2,35,0,11
	.byte	'AST',0,4
	.word	861
	.byte	1,4,2,35,0,11
	.byte	'ALD',0,4
	.word	861
	.byte	1,3,2,35,0,11
	.byte	'reserved_29',0,4
	.word	861
	.byte	3,0,2,35,0,0,30
	.byte	'Ifx_CPU_TR_EVT_Bits',0,21,153,5,3
	.word	80385
	.byte	10
	.byte	'_Ifx_CPU_TRIG_ACC_Bits',0,21,156,5,16,4,11
	.byte	'T0',0,4
	.word	861
	.byte	1,31,2,35,0,11
	.byte	'T1',0,4
	.word	861
	.byte	1,30,2,35,0,11
	.byte	'T2',0,4
	.word	861
	.byte	1,29,2,35,0,11
	.byte	'T3',0,4
	.word	861
	.byte	1,28,2,35,0,11
	.byte	'T4',0,4
	.word	861
	.byte	1,27,2,35,0,11
	.byte	'T5',0,4
	.word	861
	.byte	1,26,2,35,0,11
	.byte	'T6',0,4
	.word	861
	.byte	1,25,2,35,0,11
	.byte	'T7',0,4
	.word	861
	.byte	1,24,2,35,0,11
	.byte	'reserved_8',0,4
	.word	861
	.byte	24,0,2,35,0,0,30
	.byte	'Ifx_CPU_TRIG_ACC_Bits',0,21,167,5,3
	.word	80703
	.byte	12,21,175,5,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	71921
	.byte	4,2,35,0,0,30
	.byte	'Ifx_CPU_A',0,21,180,5,3
	.word	80898
	.byte	12,21,183,5,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	71982
	.byte	4,2,35,0,0,30
	.byte	'Ifx_CPU_BIV',0,21,188,5,3
	.word	80957
	.byte	12,21,191,5,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	72061
	.byte	4,2,35,0,0,30
	.byte	'Ifx_CPU_BTV',0,21,196,5,3
	.word	81018
	.byte	12,21,199,5,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	72147
	.byte	4,2,35,0,0,30
	.byte	'Ifx_CPU_CCNT',0,21,204,5,3
	.word	81079
	.byte	12,21,207,5,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	72236
	.byte	4,2,35,0,0,30
	.byte	'Ifx_CPU_CCTRL',0,21,212,5,3
	.word	81141
	.byte	12,21,215,5,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	72382
	.byte	4,2,35,0,0,30
	.byte	'Ifx_CPU_COMPAT',0,21,220,5,3
	.word	81204
	.byte	12,21,223,5,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	72509
	.byte	4,2,35,0,0,30
	.byte	'Ifx_CPU_CORE_ID',0,21,228,5,3
	.word	81268
	.byte	12,21,231,5,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	72607
	.byte	4,2,35,0,0,30
	.byte	'Ifx_CPU_CPR_L',0,21,236,5,3
	.word	81333
	.byte	12,21,239,5,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	72700
	.byte	4,2,35,0,0,30
	.byte	'Ifx_CPU_CPR_U',0,21,244,5,3
	.word	81396
	.byte	12,21,247,5,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	72793
	.byte	4,2,35,0,0,30
	.byte	'Ifx_CPU_CPU_ID',0,21,252,5,3
	.word	81459
	.byte	12,21,255,5,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	72900
	.byte	4,2,35,0,0,30
	.byte	'Ifx_CPU_CPXE',0,21,132,6,3
	.word	81523
	.byte	12,21,135,6,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	72987
	.byte	4,2,35,0,0,30
	.byte	'Ifx_CPU_CREVT',0,21,140,6,3
	.word	81585
	.byte	12,21,143,6,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	73141
	.byte	4,2,35,0,0,30
	.byte	'Ifx_CPU_CUS_ID',0,21,148,6,3
	.word	81648
	.byte	12,21,151,6,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	73235
	.byte	4,2,35,0,0,30
	.byte	'Ifx_CPU_D',0,21,156,6,3
	.word	81712
	.byte	12,21,159,6,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	73298
	.byte	4,2,35,0,0,30
	.byte	'Ifx_CPU_DATR',0,21,164,6,3
	.word	81771
	.byte	12,21,167,6,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	73516
	.byte	4,2,35,0,0,30
	.byte	'Ifx_CPU_DBGSR',0,21,172,6,3
	.word	81833
	.byte	12,21,175,6,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	73731
	.byte	4,2,35,0,0,30
	.byte	'Ifx_CPU_DBGTCR',0,21,180,6,3
	.word	81896
	.byte	12,21,183,6,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	73825
	.byte	4,2,35,0,0,30
	.byte	'Ifx_CPU_DCON0',0,21,188,6,3
	.word	81960
	.byte	12,21,191,6,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	73941
	.byte	4,2,35,0,0,30
	.byte	'Ifx_CPU_DCON2',0,21,196,6,3
	.word	82023
	.byte	12,21,199,6,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	74042
	.byte	4,2,35,0,0,30
	.byte	'Ifx_CPU_DCX',0,21,204,6,3
	.word	82086
	.byte	12,21,207,6,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	74135
	.byte	4,2,35,0,0,30
	.byte	'Ifx_CPU_DEADD',0,21,212,6,3
	.word	82147
	.byte	12,21,215,6,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	74215
	.byte	4,2,35,0,0,30
	.byte	'Ifx_CPU_DIEAR',0,21,220,6,3
	.word	82210
	.byte	12,21,223,6,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	74284
	.byte	4,2,35,0,0,30
	.byte	'Ifx_CPU_DIETR',0,21,228,6,3
	.word	82273
	.byte	12,21,231,6,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	74513
	.byte	4,2,35,0,0,30
	.byte	'Ifx_CPU_DMS',0,21,236,6,3
	.word	82336
	.byte	12,21,239,6,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	74606
	.byte	4,2,35,0,0,30
	.byte	'Ifx_CPU_DPR_L',0,21,244,6,3
	.word	82397
	.byte	12,21,247,6,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	74701
	.byte	4,2,35,0,0,30
	.byte	'Ifx_CPU_DPR_U',0,21,252,6,3
	.word	82460
	.byte	12,21,255,6,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	74796
	.byte	4,2,35,0,0,30
	.byte	'Ifx_CPU_DPRE',0,21,132,7,3
	.word	82523
	.byte	12,21,135,7,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	74886
	.byte	4,2,35,0,0,30
	.byte	'Ifx_CPU_DPWE',0,21,140,7,3
	.word	82585
	.byte	12,21,143,7,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	74976
	.byte	4,2,35,0,0,30
	.byte	'Ifx_CPU_DSTR',0,21,148,7,3
	.word	82647
	.byte	12,21,151,7,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	75300
	.byte	4,2,35,0,0,30
	.byte	'Ifx_CPU_EXEVT',0,21,156,7,3
	.word	82709
	.byte	12,21,159,7,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	75454
	.byte	4,2,35,0,0,30
	.byte	'Ifx_CPU_FCX',0,21,164,7,3
	.word	82772
	.byte	12,21,167,7,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	75560
	.byte	4,2,35,0,0,30
	.byte	'Ifx_CPU_FPU_TRAP_CON',0,21,172,7,3
	.word	82833
	.byte	12,21,175,7,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	75909
	.byte	4,2,35,0,0,30
	.byte	'Ifx_CPU_FPU_TRAP_OPC',0,21,180,7,3
	.word	82903
	.byte	12,21,183,7,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	76069
	.byte	4,2,35,0,0,30
	.byte	'Ifx_CPU_FPU_TRAP_PC',0,21,188,7,3
	.word	82973
	.byte	12,21,191,7,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	76150
	.byte	4,2,35,0,0,30
	.byte	'Ifx_CPU_FPU_TRAP_SRC1',0,21,196,7,3
	.word	83042
	.byte	12,21,199,7,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	76237
	.byte	4,2,35,0,0,30
	.byte	'Ifx_CPU_FPU_TRAP_SRC2',0,21,204,7,3
	.word	83113
	.byte	12,21,207,7,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	76324
	.byte	4,2,35,0,0,30
	.byte	'Ifx_CPU_FPU_TRAP_SRC3',0,21,212,7,3
	.word	83184
	.byte	12,21,215,7,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	76411
	.byte	4,2,35,0,0,30
	.byte	'Ifx_CPU_ICNT',0,21,220,7,3
	.word	83255
	.byte	12,21,223,7,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	76502
	.byte	4,2,35,0,0,30
	.byte	'Ifx_CPU_ICR',0,21,228,7,3
	.word	83317
	.byte	12,21,231,7,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	76645
	.byte	4,2,35,0,0,30
	.byte	'Ifx_CPU_ISP',0,21,236,7,3
	.word	83378
	.byte	12,21,239,7,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	76711
	.byte	4,2,35,0,0,30
	.byte	'Ifx_CPU_LCX',0,21,244,7,3
	.word	83439
	.byte	12,21,247,7,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	76817
	.byte	4,2,35,0,0,30
	.byte	'Ifx_CPU_M1CNT',0,21,252,7,3
	.word	83500
	.byte	12,21,255,7,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	76910
	.byte	4,2,35,0,0,30
	.byte	'Ifx_CPU_M2CNT',0,21,132,8,3
	.word	83563
	.byte	12,21,135,8,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	77003
	.byte	4,2,35,0,0,30
	.byte	'Ifx_CPU_M3CNT',0,21,140,8,3
	.word	83626
	.byte	12,21,143,8,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	77096
	.byte	4,2,35,0,0,30
	.byte	'Ifx_CPU_PC',0,21,148,8,3
	.word	83689
	.byte	12,21,151,8,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	77181
	.byte	4,2,35,0,0,30
	.byte	'Ifx_CPU_PCON0',0,21,156,8,3
	.word	83749
	.byte	12,21,159,8,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	77297
	.byte	4,2,35,0,0,30
	.byte	'Ifx_CPU_PCON1',0,21,164,8,3
	.word	83812
	.byte	12,21,167,8,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	77408
	.byte	4,2,35,0,0,30
	.byte	'Ifx_CPU_PCON2',0,21,172,8,3
	.word	83875
	.byte	12,21,175,8,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	77509
	.byte	4,2,35,0,0,30
	.byte	'Ifx_CPU_PCXI',0,21,180,8,3
	.word	83938
	.byte	12,21,183,8,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	77639
	.byte	4,2,35,0,0,30
	.byte	'Ifx_CPU_PIEAR',0,21,188,8,3
	.word	84000
	.byte	12,21,191,8,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	77708
	.byte	4,2,35,0,0,30
	.byte	'Ifx_CPU_PIETR',0,21,196,8,3
	.word	84063
	.byte	12,21,199,8,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	77937
	.byte	4,2,35,0,0,30
	.byte	'Ifx_CPU_PMA0',0,21,204,8,3
	.word	84126
	.byte	12,21,207,8,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	78050
	.byte	4,2,35,0,0,30
	.byte	'Ifx_CPU_PMA1',0,21,212,8,3
	.word	84188
	.byte	12,21,215,8,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	78163
	.byte	4,2,35,0,0,30
	.byte	'Ifx_CPU_PMA2',0,21,220,8,3
	.word	84250
	.byte	12,21,223,8,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	78254
	.byte	4,2,35,0,0,30
	.byte	'Ifx_CPU_PSTR',0,21,228,8,3
	.word	84312
	.byte	12,21,231,8,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	78457
	.byte	4,2,35,0,0,30
	.byte	'Ifx_CPU_PSW',0,21,236,8,3
	.word	84374
	.byte	12,21,239,8,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	78700
	.byte	4,2,35,0,0,30
	.byte	'Ifx_CPU_SEGEN',0,21,244,8,3
	.word	84435
	.byte	12,21,247,8,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	78828
	.byte	4,2,35,0,0,30
	.byte	'Ifx_CPU_SMACON',0,21,252,8,3
	.word	84498
	.byte	12,21,255,8,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	79069
	.byte	4,2,35,0,0,30
	.byte	'Ifx_CPU_SPROT_ACCENA',0,21,132,9,3
	.word	84562
	.byte	12,21,135,9,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	79152
	.byte	4,2,35,0,0,30
	.byte	'Ifx_CPU_SPROT_ACCENB',0,21,140,9,3
	.word	84632
	.byte	12,21,143,9,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	79243
	.byte	4,2,35,0,0,30
	.byte	'Ifx_CPU_SPROT_RGN_ACCENA',0,21,148,9,3
	.word	84702
	.byte	12,21,151,9,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	79334
	.byte	4,2,35,0,0,30
	.byte	'Ifx_CPU_SPROT_RGN_ACCENB',0,21,156,9,3
	.word	84776
	.byte	12,21,159,9,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	79433
	.byte	4,2,35,0,0,30
	.byte	'Ifx_CPU_SPROT_RGN_LA',0,21,164,9,3
	.word	84850
	.byte	12,21,167,9,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	79540
	.byte	4,2,35,0,0,30
	.byte	'Ifx_CPU_SPROT_RGN_UA',0,21,172,9,3
	.word	84920
	.byte	12,21,175,9,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	79647
	.byte	4,2,35,0,0,30
	.byte	'Ifx_CPU_SWEVT',0,21,180,9,3
	.word	84990
	.byte	12,21,183,9,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	79801
	.byte	4,2,35,0,0,30
	.byte	'Ifx_CPU_SYSCON',0,21,188,9,3
	.word	85053
	.byte	12,21,191,9,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	79962
	.byte	4,2,35,0,0,30
	.byte	'Ifx_CPU_TASK_ASI',0,21,196,9,3
	.word	85117
	.byte	12,21,199,9,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	80060
	.byte	4,2,35,0,0,30
	.byte	'Ifx_CPU_TPS_CON',0,21,204,9,3
	.word	85183
	.byte	12,21,207,9,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	80232
	.byte	4,2,35,0,0,30
	.byte	'Ifx_CPU_TPS_TIMER',0,21,212,9,3
	.word	85248
	.byte	12,21,215,9,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	80312
	.byte	4,2,35,0,0,30
	.byte	'Ifx_CPU_TR_ADR',0,21,220,9,3
	.word	85315
	.byte	12,21,223,9,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	80385
	.byte	4,2,35,0,0,30
	.byte	'Ifx_CPU_TR_EVT',0,21,228,9,3
	.word	85379
	.byte	12,21,231,9,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	80703
	.byte	4,2,35,0,0,30
	.byte	'Ifx_CPU_TRIG_ACC',0,21,236,9,3
	.word	85443
	.byte	10
	.byte	'_Ifx_CPU_CPR',0,21,247,9,25,8,13
	.byte	'L',0
	.word	81333
	.byte	4,2,35,0,13
	.byte	'U',0
	.word	81396
	.byte	4,2,35,4,0,14
	.word	85509
	.byte	30
	.byte	'Ifx_CPU_CPR',0,21,251,9,3
	.word	85551
	.byte	10
	.byte	'_Ifx_CPU_DPR',0,21,254,9,25,8,13
	.byte	'L',0
	.word	82397
	.byte	4,2,35,0,13
	.byte	'U',0
	.word	82460
	.byte	4,2,35,4,0,14
	.word	85577
	.byte	30
	.byte	'Ifx_CPU_DPR',0,21,130,10,3
	.word	85619
	.byte	10
	.byte	'_Ifx_CPU_SPROT_RGN',0,21,133,10,25,16,13
	.byte	'LA',0
	.word	84850
	.byte	4,2,35,0,13
	.byte	'UA',0
	.word	84920
	.byte	4,2,35,4,13
	.byte	'ACCENA',0
	.word	84702
	.byte	4,2,35,8,13
	.byte	'ACCENB',0
	.word	84776
	.byte	4,2,35,12,0,14
	.word	85645
	.byte	30
	.byte	'Ifx_CPU_SPROT_RGN',0,21,139,10,3
	.word	85727
	.byte	15,12
	.word	85248
	.byte	16,2,0,10
	.byte	'_Ifx_CPU_TPS',0,21,142,10,25,16,13
	.byte	'CON',0
	.word	85183
	.byte	4,2,35,0,13
	.byte	'TIMER',0
	.word	85759
	.byte	12,2,35,4,0,14
	.word	85768
	.byte	30
	.byte	'Ifx_CPU_TPS',0,21,146,10,3
	.word	85816
	.byte	10
	.byte	'_Ifx_CPU_TR',0,21,149,10,25,8,13
	.byte	'EVT',0
	.word	85379
	.byte	4,2,35,0,13
	.byte	'ADR',0
	.word	85315
	.byte	4,2,35,4,0,14
	.word	85842
	.byte	30
	.byte	'Ifx_CPU_TR',0,21,153,10,3
	.word	85887
	.byte	15,176,32
	.word	462
	.byte	16,175,32,0,15,208,223,1
	.word	462
	.byte	16,207,223,1,0,15,248,1
	.word	462
	.byte	16,247,1,0,15,244,29
	.word	462
	.byte	16,243,29,0,15,188,3
	.word	462
	.byte	16,187,3,0,15,232,3
	.word	462
	.byte	16,231,3,0,15,252,23
	.word	462
	.byte	16,251,23,0,15,228,63
	.word	462
	.byte	16,227,63,0,15,128,1
	.word	85577
	.byte	16,15,0,14
	.word	86002
	.byte	15,128,31
	.word	462
	.byte	16,255,30,0,15,64
	.word	85509
	.byte	16,7,0,14
	.word	86028
	.byte	15,192,31
	.word	462
	.byte	16,191,31,0,15,16
	.word	81523
	.byte	16,3,0,15,16
	.word	82523
	.byte	16,3,0,15,16
	.word	82585
	.byte	16,3,0,15,208,7
	.word	462
	.byte	16,207,7,0,14
	.word	85768
	.byte	15,240,23
	.word	462
	.byte	16,239,23,0,15,64
	.word	85842
	.byte	16,7,0,14
	.word	86107
	.byte	15,192,23
	.word	462
	.byte	16,191,23,0,15,232,1
	.word	462
	.byte	16,231,1,0,15,180,1
	.word	462
	.byte	16,179,1,0,15,172,1
	.word	462
	.byte	16,171,1,0,15,64
	.word	81712
	.byte	16,15,0,15,64
	.word	80898
	.byte	16,15,0,10
	.byte	'_Ifx_CPU',0,21,166,10,25,128,128,4,13
	.byte	'reserved_0',0
	.word	85912
	.byte	176,32,2,35,0,13
	.byte	'SEGEN',0
	.word	84435
	.byte	4,3,35,176,32,13
	.byte	'reserved_1034',0
	.word	85923
	.byte	208,223,1,3,35,180,32,13
	.byte	'TASK_ASI',0
	.word	85117
	.byte	4,4,35,132,128,2,13
	.byte	'reserved_8008',0
	.word	85936
	.byte	248,1,4,35,136,128,2,13
	.byte	'PMA0',0
	.word	84126
	.byte	4,4,35,128,130,2,13
	.byte	'PMA1',0
	.word	84188
	.byte	4,4,35,132,130,2,13
	.byte	'PMA2',0
	.word	84250
	.byte	4,4,35,136,130,2,13
	.byte	'reserved_810C',0
	.word	85947
	.byte	244,29,4,35,140,130,2,13
	.byte	'DCON2',0
	.word	82023
	.byte	4,4,35,128,160,2,13
	.byte	'reserved_9004',0
	.word	4633
	.byte	8,4,35,132,160,2,13
	.byte	'SMACON',0
	.word	84498
	.byte	4,4,35,140,160,2,13
	.byte	'DSTR',0
	.word	82647
	.byte	4,4,35,144,160,2,13
	.byte	'reserved_9014',0
	.word	2814
	.byte	4,4,35,148,160,2,13
	.byte	'DATR',0
	.word	81771
	.byte	4,4,35,152,160,2,13
	.byte	'DEADD',0
	.word	82147
	.byte	4,4,35,156,160,2,13
	.byte	'DIEAR',0
	.word	82210
	.byte	4,4,35,160,160,2,13
	.byte	'DIETR',0
	.word	82273
	.byte	4,4,35,164,160,2,13
	.byte	'reserved_9028',0
	.word	4004
	.byte	24,4,35,168,160,2,13
	.byte	'DCON0',0
	.word	81960
	.byte	4,4,35,192,160,2,13
	.byte	'reserved_9044',0
	.word	85958
	.byte	188,3,4,35,196,160,2,13
	.byte	'PSTR',0
	.word	84312
	.byte	4,4,35,128,164,2,13
	.byte	'PCON1',0
	.word	83812
	.byte	4,4,35,132,164,2,13
	.byte	'PCON2',0
	.word	83875
	.byte	4,4,35,136,164,2,13
	.byte	'PCON0',0
	.word	83749
	.byte	4,4,35,140,164,2,13
	.byte	'PIEAR',0
	.word	84000
	.byte	4,4,35,144,164,2,13
	.byte	'PIETR',0
	.word	84063
	.byte	4,4,35,148,164,2,13
	.byte	'reserved_9218',0
	.word	85969
	.byte	232,3,4,35,152,164,2,13
	.byte	'COMPAT',0
	.word	81204
	.byte	4,4,35,128,168,2,13
	.byte	'reserved_9404',0
	.word	85980
	.byte	252,23,4,35,132,168,2,13
	.byte	'FPU_TRAP_CON',0
	.word	82833
	.byte	4,4,35,128,192,2,13
	.byte	'FPU_TRAP_PC',0
	.word	82973
	.byte	4,4,35,132,192,2,13
	.byte	'FPU_TRAP_OPC',0
	.word	82903
	.byte	4,4,35,136,192,2,13
	.byte	'reserved_A00C',0
	.word	2814
	.byte	4,4,35,140,192,2,13
	.byte	'FPU_TRAP_SRC1',0
	.word	83042
	.byte	4,4,35,144,192,2,13
	.byte	'FPU_TRAP_SRC2',0
	.word	83113
	.byte	4,4,35,148,192,2,13
	.byte	'FPU_TRAP_SRC3',0
	.word	83184
	.byte	4,4,35,152,192,2,13
	.byte	'reserved_A01C',0
	.word	85991
	.byte	228,63,4,35,156,192,2,13
	.byte	'DPR',0
	.word	86012
	.byte	128,1,4,35,128,128,3,13
	.byte	'reserved_C080',0
	.word	86017
	.byte	128,31,4,35,128,129,3,13
	.byte	'CPR',0
	.word	86037
	.byte	64,4,35,128,160,3,13
	.byte	'reserved_D040',0
	.word	86042
	.byte	192,31,4,35,192,160,3,13
	.byte	'CPXE',0
	.word	86053
	.byte	16,4,35,128,192,3,13
	.byte	'DPRE',0
	.word	86062
	.byte	16,4,35,144,192,3,13
	.byte	'DPWE',0
	.word	86071
	.byte	16,4,35,160,192,3,13
	.byte	'reserved_E030',0
	.word	86080
	.byte	208,7,4,35,176,192,3,13
	.byte	'TPS',0
	.word	86091
	.byte	16,4,35,128,200,3,13
	.byte	'reserved_E410',0
	.word	86096
	.byte	240,23,4,35,144,200,3,13
	.byte	'TR',0
	.word	86116
	.byte	64,4,35,128,224,3,13
	.byte	'reserved_F040',0
	.word	86121
	.byte	192,23,4,35,192,224,3,13
	.byte	'CCTRL',0
	.word	81141
	.byte	4,4,35,128,248,3,13
	.byte	'CCNT',0
	.word	81079
	.byte	4,4,35,132,248,3,13
	.byte	'ICNT',0
	.word	83255
	.byte	4,4,35,136,248,3,13
	.byte	'M1CNT',0
	.word	83500
	.byte	4,4,35,140,248,3,13
	.byte	'M2CNT',0
	.word	83563
	.byte	4,4,35,144,248,3,13
	.byte	'M3CNT',0
	.word	83626
	.byte	4,4,35,148,248,3,13
	.byte	'reserved_FC18',0
	.word	86132
	.byte	232,1,4,35,152,248,3,13
	.byte	'DBGSR',0
	.word	81833
	.byte	4,4,35,128,250,3,13
	.byte	'reserved_FD04',0
	.word	2814
	.byte	4,4,35,132,250,3,13
	.byte	'EXEVT',0
	.word	82709
	.byte	4,4,35,136,250,3,13
	.byte	'CREVT',0
	.word	81585
	.byte	4,4,35,140,250,3,13
	.byte	'SWEVT',0
	.word	84990
	.byte	4,4,35,144,250,3,13
	.byte	'reserved_FD14',0
	.word	10884
	.byte	28,4,35,148,250,3,13
	.byte	'TRIG_ACC',0
	.word	85443
	.byte	4,4,35,176,250,3,13
	.byte	'reserved_FD34',0
	.word	4973
	.byte	12,4,35,180,250,3,13
	.byte	'DMS',0
	.word	82336
	.byte	4,4,35,192,250,3,13
	.byte	'DCX',0
	.word	82086
	.byte	4,4,35,196,250,3,13
	.byte	'DBGTCR',0
	.word	81896
	.byte	4,4,35,200,250,3,13
	.byte	'reserved_FD4C',0
	.word	86143
	.byte	180,1,4,35,204,250,3,13
	.byte	'PCXI',0
	.word	83938
	.byte	4,4,35,128,252,3,13
	.byte	'PSW',0
	.word	84374
	.byte	4,4,35,132,252,3,13
	.byte	'PC',0
	.word	83689
	.byte	4,4,35,136,252,3,13
	.byte	'reserved_FE0C',0
	.word	4633
	.byte	8,4,35,140,252,3,13
	.byte	'SYSCON',0
	.word	85053
	.byte	4,4,35,148,252,3,13
	.byte	'CPU_ID',0
	.word	81459
	.byte	4,4,35,152,252,3,13
	.byte	'CORE_ID',0
	.word	81268
	.byte	4,4,35,156,252,3,13
	.byte	'BIV',0
	.word	80957
	.byte	4,4,35,160,252,3,13
	.byte	'BTV',0
	.word	81018
	.byte	4,4,35,164,252,3,13
	.byte	'ISP',0
	.word	83378
	.byte	4,4,35,168,252,3,13
	.byte	'ICR',0
	.word	83317
	.byte	4,4,35,172,252,3,13
	.byte	'reserved_FE30',0
	.word	4633
	.byte	8,4,35,176,252,3,13
	.byte	'FCX',0
	.word	82772
	.byte	4,4,35,184,252,3,13
	.byte	'LCX',0
	.word	83439
	.byte	4,4,35,188,252,3,13
	.byte	'reserved_FE40',0
	.word	12899
	.byte	16,4,35,192,252,3,13
	.byte	'CUS_ID',0
	.word	81648
	.byte	4,4,35,208,252,3,13
	.byte	'reserved_FE54',0
	.word	86154
	.byte	172,1,4,35,212,252,3,13
	.byte	'D',0
	.word	86165
	.byte	64,4,35,128,254,3,13
	.byte	'reserved_FF40',0
	.word	12006
	.byte	64,4,35,192,254,3,13
	.byte	'A',0
	.word	86174
	.byte	64,4,35,128,255,3,13
	.byte	'reserved_FFC0',0
	.word	12006
	.byte	64,4,35,192,255,3,0,14
	.word	86183
	.byte	30
	.byte	'Ifx_CPU',0,21,130,11,3
	.word	87974
	.byte	17,10,127,9,1,18
	.byte	'IfxCpu_Id_0',0,0,18
	.byte	'IfxCpu_Id_1',0,1,18
	.byte	'IfxCpu_Id_none',0,2,0,30
	.byte	'IfxCpu_Id',0,10,132,1,3
	.word	87996
	.byte	30
	.byte	'IfxCpu_ResourceCpu',0,10,161,1,3
	.word	10130
	.byte	10
	.byte	'_Ifx_STM_ACCEN0_Bits',0,22,45,16,4,11
	.byte	'EN0',0,1
	.word	462
	.byte	1,7,2,35,0,11
	.byte	'EN1',0,1
	.word	462
	.byte	1,6,2,35,0,11
	.byte	'EN2',0,1
	.word	462
	.byte	1,5,2,35,0,11
	.byte	'EN3',0,1
	.word	462
	.byte	1,4,2,35,0,11
	.byte	'EN4',0,1
	.word	462
	.byte	1,3,2,35,0,11
	.byte	'EN5',0,1
	.word	462
	.byte	1,2,2,35,0,11
	.byte	'EN6',0,1
	.word	462
	.byte	1,1,2,35,0,11
	.byte	'EN7',0,1
	.word	462
	.byte	1,0,2,35,0,11
	.byte	'EN8',0,1
	.word	462
	.byte	1,7,2,35,1,11
	.byte	'EN9',0,1
	.word	462
	.byte	1,6,2,35,1,11
	.byte	'EN10',0,1
	.word	462
	.byte	1,5,2,35,1,11
	.byte	'EN11',0,1
	.word	462
	.byte	1,4,2,35,1,11
	.byte	'EN12',0,1
	.word	462
	.byte	1,3,2,35,1,11
	.byte	'EN13',0,1
	.word	462
	.byte	1,2,2,35,1,11
	.byte	'EN14',0,1
	.word	462
	.byte	1,1,2,35,1,11
	.byte	'EN15',0,1
	.word	462
	.byte	1,0,2,35,1,11
	.byte	'EN16',0,1
	.word	462
	.byte	1,7,2,35,2,11
	.byte	'EN17',0,1
	.word	462
	.byte	1,6,2,35,2,11
	.byte	'EN18',0,1
	.word	462
	.byte	1,5,2,35,2,11
	.byte	'EN19',0,1
	.word	462
	.byte	1,4,2,35,2,11
	.byte	'EN20',0,1
	.word	462
	.byte	1,3,2,35,2,11
	.byte	'EN21',0,1
	.word	462
	.byte	1,2,2,35,2,11
	.byte	'EN22',0,1
	.word	462
	.byte	1,1,2,35,2,11
	.byte	'EN23',0,1
	.word	462
	.byte	1,0,2,35,2,11
	.byte	'EN24',0,1
	.word	462
	.byte	1,7,2,35,3,11
	.byte	'EN25',0,1
	.word	462
	.byte	1,6,2,35,3,11
	.byte	'EN26',0,1
	.word	462
	.byte	1,5,2,35,3,11
	.byte	'EN27',0,1
	.word	462
	.byte	1,4,2,35,3,11
	.byte	'EN28',0,1
	.word	462
	.byte	1,3,2,35,3,11
	.byte	'EN29',0,1
	.word	462
	.byte	1,2,2,35,3,11
	.byte	'EN30',0,1
	.word	462
	.byte	1,1,2,35,3,11
	.byte	'EN31',0,1
	.word	462
	.byte	1,0,2,35,3,0,30
	.byte	'Ifx_STM_ACCEN0_Bits',0,22,79,3
	.word	88094
	.byte	10
	.byte	'_Ifx_STM_ACCEN1_Bits',0,22,82,16,4,11
	.byte	'reserved_0',0,4
	.word	439
	.byte	32,0,2,35,0,0,30
	.byte	'Ifx_STM_ACCEN1_Bits',0,22,85,3
	.word	88651
	.byte	10
	.byte	'_Ifx_STM_CAP_Bits',0,22,88,16,4,11
	.byte	'STMCAP63_32',0,4
	.word	439
	.byte	32,0,2,35,0,0,30
	.byte	'Ifx_STM_CAP_Bits',0,22,91,3
	.word	88728
	.byte	10
	.byte	'_Ifx_STM_CAPSV_Bits',0,22,94,16,4,11
	.byte	'STMCAP63_32',0,4
	.word	439
	.byte	32,0,2,35,0,0,30
	.byte	'Ifx_STM_CAPSV_Bits',0,22,97,3
	.word	88800
	.byte	10
	.byte	'_Ifx_STM_CLC_Bits',0,22,100,16,4,11
	.byte	'DISR',0,1
	.word	462
	.byte	1,7,2,35,0,11
	.byte	'DISS',0,1
	.word	462
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	462
	.byte	1,5,2,35,0,11
	.byte	'EDIS',0,1
	.word	462
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,4
	.word	439
	.byte	28,0,2,35,0,0,30
	.byte	'Ifx_STM_CLC_Bits',0,22,107,3
	.word	88876
	.byte	10
	.byte	'_Ifx_STM_CMCON_Bits',0,22,110,16,4,11
	.byte	'MSIZE0',0,1
	.word	462
	.byte	5,3,2,35,0,11
	.byte	'reserved_5',0,1
	.word	462
	.byte	3,0,2,35,0,11
	.byte	'MSTART0',0,1
	.word	462
	.byte	5,3,2,35,1,11
	.byte	'reserved_13',0,1
	.word	462
	.byte	3,0,2,35,1,11
	.byte	'MSIZE1',0,1
	.word	462
	.byte	5,3,2,35,2,11
	.byte	'reserved_21',0,1
	.word	462
	.byte	3,0,2,35,2,11
	.byte	'MSTART1',0,1
	.word	462
	.byte	5,3,2,35,3,11
	.byte	'reserved_29',0,1
	.word	462
	.byte	3,0,2,35,3,0,30
	.byte	'Ifx_STM_CMCON_Bits',0,22,120,3
	.word	89017
	.byte	10
	.byte	'_Ifx_STM_CMP_Bits',0,22,123,16,4,11
	.byte	'CMPVAL',0,4
	.word	439
	.byte	32,0,2,35,0,0,30
	.byte	'Ifx_STM_CMP_Bits',0,22,126,3
	.word	89235
	.byte	10
	.byte	'_Ifx_STM_ICR_Bits',0,22,129,1,16,4,11
	.byte	'CMP0EN',0,1
	.word	462
	.byte	1,7,2,35,0,11
	.byte	'CMP0IR',0,1
	.word	462
	.byte	1,6,2,35,0,11
	.byte	'CMP0OS',0,1
	.word	462
	.byte	1,5,2,35,0,11
	.byte	'reserved_3',0,1
	.word	462
	.byte	1,4,2,35,0,11
	.byte	'CMP1EN',0,1
	.word	462
	.byte	1,3,2,35,0,11
	.byte	'CMP1IR',0,1
	.word	462
	.byte	1,2,2,35,0,11
	.byte	'CMP1OS',0,1
	.word	462
	.byte	1,1,2,35,0,11
	.byte	'reserved_7',0,4
	.word	439
	.byte	25,0,2,35,0,0,30
	.byte	'Ifx_STM_ICR_Bits',0,22,139,1,3
	.word	89302
	.byte	10
	.byte	'_Ifx_STM_ID_Bits',0,22,142,1,16,4,11
	.byte	'MODREV',0,1
	.word	462
	.byte	8,0,2,35,0,11
	.byte	'MODTYPE',0,1
	.word	462
	.byte	8,0,2,35,1,11
	.byte	'MODNUMBER',0,2
	.word	1013
	.byte	16,0,2,35,2,0,30
	.byte	'Ifx_STM_ID_Bits',0,22,147,1,3
	.word	89505
	.byte	10
	.byte	'_Ifx_STM_ISCR_Bits',0,22,150,1,16,4,11
	.byte	'CMP0IRR',0,1
	.word	462
	.byte	1,7,2,35,0,11
	.byte	'CMP0IRS',0,1
	.word	462
	.byte	1,6,2,35,0,11
	.byte	'CMP1IRR',0,1
	.word	462
	.byte	1,5,2,35,0,11
	.byte	'CMP1IRS',0,1
	.word	462
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,4
	.word	439
	.byte	28,0,2,35,0,0,30
	.byte	'Ifx_STM_ISCR_Bits',0,22,157,1,3
	.word	89612
	.byte	10
	.byte	'_Ifx_STM_KRST0_Bits',0,22,160,1,16,4,11
	.byte	'RST',0,1
	.word	462
	.byte	1,7,2,35,0,11
	.byte	'RSTSTAT',0,1
	.word	462
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,4
	.word	439
	.byte	30,0,2,35,0,0,30
	.byte	'Ifx_STM_KRST0_Bits',0,22,165,1,3
	.word	89763
	.byte	10
	.byte	'_Ifx_STM_KRST1_Bits',0,22,168,1,16,4,11
	.byte	'RST',0,1
	.word	462
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,4
	.word	439
	.byte	31,0,2,35,0,0,30
	.byte	'Ifx_STM_KRST1_Bits',0,22,172,1,3
	.word	89874
	.byte	10
	.byte	'_Ifx_STM_KRSTCLR_Bits',0,22,175,1,16,4,11
	.byte	'CLR',0,1
	.word	462
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,4
	.word	439
	.byte	31,0,2,35,0,0,30
	.byte	'Ifx_STM_KRSTCLR_Bits',0,22,179,1,3
	.word	89966
	.byte	10
	.byte	'_Ifx_STM_OCS_Bits',0,22,182,1,16,4,11
	.byte	'reserved_0',0,4
	.word	439
	.byte	24,8,2,35,0,11
	.byte	'SUS',0,1
	.word	462
	.byte	4,4,2,35,3,11
	.byte	'SUS_P',0,1
	.word	462
	.byte	1,3,2,35,3,11
	.byte	'SUSSTA',0,1
	.word	462
	.byte	1,2,2,35,3,11
	.byte	'reserved_30',0,1
	.word	462
	.byte	2,0,2,35,3,0,30
	.byte	'Ifx_STM_OCS_Bits',0,22,189,1,3
	.word	90062
	.byte	10
	.byte	'_Ifx_STM_TIM0_Bits',0,22,192,1,16,4,11
	.byte	'STM31_0',0,4
	.word	439
	.byte	32,0,2,35,0,0,30
	.byte	'Ifx_STM_TIM0_Bits',0,22,195,1,3
	.word	90208
	.byte	10
	.byte	'_Ifx_STM_TIM0SV_Bits',0,22,198,1,16,4,11
	.byte	'STM31_0',0,4
	.word	439
	.byte	32,0,2,35,0,0,30
	.byte	'Ifx_STM_TIM0SV_Bits',0,22,201,1,3
	.word	90280
	.byte	10
	.byte	'_Ifx_STM_TIM1_Bits',0,22,204,1,16,4,11
	.byte	'STM35_4',0,4
	.word	439
	.byte	32,0,2,35,0,0,30
	.byte	'Ifx_STM_TIM1_Bits',0,22,207,1,3
	.word	90356
	.byte	10
	.byte	'_Ifx_STM_TIM2_Bits',0,22,210,1,16,4,11
	.byte	'STM39_8',0,4
	.word	439
	.byte	32,0,2,35,0,0,30
	.byte	'Ifx_STM_TIM2_Bits',0,22,213,1,3
	.word	90428
	.byte	10
	.byte	'_Ifx_STM_TIM3_Bits',0,22,216,1,16,4,11
	.byte	'STM43_12',0,4
	.word	439
	.byte	32,0,2,35,0,0,30
	.byte	'Ifx_STM_TIM3_Bits',0,22,219,1,3
	.word	90500
	.byte	10
	.byte	'_Ifx_STM_TIM4_Bits',0,22,222,1,16,4,11
	.byte	'STM47_16',0,4
	.word	439
	.byte	32,0,2,35,0,0,30
	.byte	'Ifx_STM_TIM4_Bits',0,22,225,1,3
	.word	90573
	.byte	10
	.byte	'_Ifx_STM_TIM5_Bits',0,22,228,1,16,4,11
	.byte	'STM51_20',0,4
	.word	439
	.byte	32,0,2,35,0,0,30
	.byte	'Ifx_STM_TIM5_Bits',0,22,231,1,3
	.word	90646
	.byte	10
	.byte	'_Ifx_STM_TIM6_Bits',0,22,234,1,16,4,11
	.byte	'STM63_32',0,4
	.word	439
	.byte	32,0,2,35,0,0,30
	.byte	'Ifx_STM_TIM6_Bits',0,22,237,1,3
	.word	90719
	.byte	12,22,245,1,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	88094
	.byte	4,2,35,0,0,30
	.byte	'Ifx_STM_ACCEN0',0,22,250,1,3
	.word	90792
	.byte	12,22,253,1,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	88651
	.byte	4,2,35,0,0,30
	.byte	'Ifx_STM_ACCEN1',0,22,130,2,3
	.word	90856
	.byte	12,22,133,2,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	88728
	.byte	4,2,35,0,0,30
	.byte	'Ifx_STM_CAP',0,22,138,2,3
	.word	90920
	.byte	12,22,141,2,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	88800
	.byte	4,2,35,0,0,30
	.byte	'Ifx_STM_CAPSV',0,22,146,2,3
	.word	90981
	.byte	12,22,149,2,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	88876
	.byte	4,2,35,0,0,30
	.byte	'Ifx_STM_CLC',0,22,154,2,3
	.word	91044
	.byte	12,22,157,2,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	89017
	.byte	4,2,35,0,0,30
	.byte	'Ifx_STM_CMCON',0,22,162,2,3
	.word	91105
	.byte	12,22,165,2,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	89235
	.byte	4,2,35,0,0,30
	.byte	'Ifx_STM_CMP',0,22,170,2,3
	.word	91168
	.byte	12,22,173,2,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	89302
	.byte	4,2,35,0,0,30
	.byte	'Ifx_STM_ICR',0,22,178,2,3
	.word	91229
	.byte	12,22,181,2,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	89505
	.byte	4,2,35,0,0,30
	.byte	'Ifx_STM_ID',0,22,186,2,3
	.word	91290
	.byte	12,22,189,2,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	89612
	.byte	4,2,35,0,0,30
	.byte	'Ifx_STM_ISCR',0,22,194,2,3
	.word	91350
	.byte	12,22,197,2,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	89763
	.byte	4,2,35,0,0,30
	.byte	'Ifx_STM_KRST0',0,22,202,2,3
	.word	91412
	.byte	12,22,205,2,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	89874
	.byte	4,2,35,0,0,30
	.byte	'Ifx_STM_KRST1',0,22,210,2,3
	.word	91475
	.byte	12,22,213,2,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	89966
	.byte	4,2,35,0,0,30
	.byte	'Ifx_STM_KRSTCLR',0,22,218,2,3
	.word	91538
	.byte	12,22,221,2,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	90062
	.byte	4,2,35,0,0,30
	.byte	'Ifx_STM_OCS',0,22,226,2,3
	.word	91603
	.byte	12,22,229,2,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	90208
	.byte	4,2,35,0,0,30
	.byte	'Ifx_STM_TIM0',0,22,234,2,3
	.word	91664
	.byte	12,22,237,2,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	90280
	.byte	4,2,35,0,0,30
	.byte	'Ifx_STM_TIM0SV',0,22,242,2,3
	.word	91726
	.byte	12,22,245,2,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	90356
	.byte	4,2,35,0,0,30
	.byte	'Ifx_STM_TIM1',0,22,250,2,3
	.word	91790
	.byte	12,22,253,2,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	90428
	.byte	4,2,35,0,0,30
	.byte	'Ifx_STM_TIM2',0,22,130,3,3
	.word	91852
	.byte	12,22,133,3,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	90500
	.byte	4,2,35,0,0,30
	.byte	'Ifx_STM_TIM3',0,22,138,3,3
	.word	91914
	.byte	12,22,141,3,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	90573
	.byte	4,2,35,0,0,30
	.byte	'Ifx_STM_TIM4',0,22,146,3,3
	.word	91976
	.byte	12,22,149,3,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	90646
	.byte	4,2,35,0,0,30
	.byte	'Ifx_STM_TIM5',0,22,154,3,3
	.word	92038
	.byte	12,22,157,3,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	90719
	.byte	4,2,35,0,0,30
	.byte	'Ifx_STM_TIM6',0,22,162,3,3
	.word	92100
	.byte	17,9,144,1,9,1,18
	.byte	'IfxCpu_CounterMode_normal',0,0,18
	.byte	'IfxCpu_CounterMode_task',0,1,0,30
	.byte	'IfxCpu_CounterMode',0,9,148,1,3
	.word	92162
	.byte	33,9,160,1,9,6,13
	.byte	'counter',0
	.word	10285
	.byte	4,2,35,0,13
	.byte	'overlfow',0
	.word	462
	.byte	1,2,35,4,0,30
	.byte	'IfxCpu_Counter',0,9,164,1,3
	.word	92251
	.byte	33,9,172,1,9,32,13
	.byte	'instruction',0
	.word	92251
	.byte	6,2,35,0,13
	.byte	'clock',0
	.word	92251
	.byte	6,2,35,6,13
	.byte	'counter1',0
	.word	92251
	.byte	6,2,35,12,13
	.byte	'counter2',0
	.word	92251
	.byte	6,2,35,18,13
	.byte	'counter3',0
	.word	92251
	.byte	6,2,35,24,0,30
	.byte	'IfxCpu_Perf',0,9,179,1,3
	.word	92317
	.byte	10
	.byte	'_Ifx_FLASH_ACCEN0_Bits',0,23,45,16,4,11
	.byte	'EN0',0,1
	.word	462
	.byte	1,7,2,35,0,11
	.byte	'EN1',0,1
	.word	462
	.byte	1,6,2,35,0,11
	.byte	'EN2',0,1
	.word	462
	.byte	1,5,2,35,0,11
	.byte	'EN3',0,1
	.word	462
	.byte	1,4,2,35,0,11
	.byte	'EN4',0,1
	.word	462
	.byte	1,3,2,35,0,11
	.byte	'EN5',0,1
	.word	462
	.byte	1,2,2,35,0,11
	.byte	'EN6',0,1
	.word	462
	.byte	1,1,2,35,0,11
	.byte	'EN7',0,1
	.word	462
	.byte	1,0,2,35,0,11
	.byte	'EN8',0,1
	.word	462
	.byte	1,7,2,35,1,11
	.byte	'EN9',0,1
	.word	462
	.byte	1,6,2,35,1,11
	.byte	'EN10',0,1
	.word	462
	.byte	1,5,2,35,1,11
	.byte	'EN11',0,1
	.word	462
	.byte	1,4,2,35,1,11
	.byte	'EN12',0,1
	.word	462
	.byte	1,3,2,35,1,11
	.byte	'EN13',0,1
	.word	462
	.byte	1,2,2,35,1,11
	.byte	'EN14',0,1
	.word	462
	.byte	1,1,2,35,1,11
	.byte	'EN15',0,1
	.word	462
	.byte	1,0,2,35,1,11
	.byte	'EN16',0,1
	.word	462
	.byte	1,7,2,35,2,11
	.byte	'EN17',0,1
	.word	462
	.byte	1,6,2,35,2,11
	.byte	'EN18',0,1
	.word	462
	.byte	1,5,2,35,2,11
	.byte	'EN19',0,1
	.word	462
	.byte	1,4,2,35,2,11
	.byte	'EN20',0,1
	.word	462
	.byte	1,3,2,35,2,11
	.byte	'EN21',0,1
	.word	462
	.byte	1,2,2,35,2,11
	.byte	'EN22',0,1
	.word	462
	.byte	1,1,2,35,2,11
	.byte	'EN23',0,1
	.word	462
	.byte	1,0,2,35,2,11
	.byte	'EN24',0,1
	.word	462
	.byte	1,7,2,35,3,11
	.byte	'EN25',0,1
	.word	462
	.byte	1,6,2,35,3,11
	.byte	'EN26',0,1
	.word	462
	.byte	1,5,2,35,3,11
	.byte	'EN27',0,1
	.word	462
	.byte	1,4,2,35,3,11
	.byte	'EN28',0,1
	.word	462
	.byte	1,3,2,35,3,11
	.byte	'EN29',0,1
	.word	462
	.byte	1,2,2,35,3,11
	.byte	'EN30',0,1
	.word	462
	.byte	1,1,2,35,3,11
	.byte	'EN31',0,1
	.word	462
	.byte	1,0,2,35,3,0,30
	.byte	'Ifx_FLASH_ACCEN0_Bits',0,23,79,3
	.word	92435
	.byte	10
	.byte	'_Ifx_FLASH_ACCEN1_Bits',0,23,82,16,4,11
	.byte	'reserved_0',0,4
	.word	439
	.byte	32,0,2,35,0,0,30
	.byte	'Ifx_FLASH_ACCEN1_Bits',0,23,85,3
	.word	92996
	.byte	10
	.byte	'_Ifx_FLASH_CBAB_CFG_Bits',0,23,88,16,4,11
	.byte	'SEL',0,1
	.word	462
	.byte	6,2,2,35,0,11
	.byte	'reserved_6',0,1
	.word	462
	.byte	2,0,2,35,0,11
	.byte	'CLR',0,1
	.word	462
	.byte	1,7,2,35,1,11
	.byte	'DIS',0,1
	.word	462
	.byte	1,6,2,35,1,11
	.byte	'reserved_10',0,4
	.word	439
	.byte	22,0,2,35,0,0,30
	.byte	'Ifx_FLASH_CBAB_CFG_Bits',0,23,95,3
	.word	93077
	.byte	10
	.byte	'_Ifx_FLASH_CBAB_STAT_Bits',0,23,98,16,4,11
	.byte	'VLD0',0,1
	.word	462
	.byte	1,7,2,35,0,11
	.byte	'VLD1',0,1
	.word	462
	.byte	1,6,2,35,0,11
	.byte	'VLD2',0,1
	.word	462
	.byte	1,5,2,35,0,11
	.byte	'VLD3',0,1
	.word	462
	.byte	1,4,2,35,0,11
	.byte	'VLD4',0,1
	.word	462
	.byte	1,3,2,35,0,11
	.byte	'VLD5',0,1
	.word	462
	.byte	1,2,2,35,0,11
	.byte	'VLD6',0,1
	.word	462
	.byte	1,1,2,35,0,11
	.byte	'VLD7',0,1
	.word	462
	.byte	1,0,2,35,0,11
	.byte	'VLD8',0,1
	.word	462
	.byte	1,7,2,35,1,11
	.byte	'VLD9',0,1
	.word	462
	.byte	1,6,2,35,1,11
	.byte	'reserved_10',0,4
	.word	439
	.byte	22,0,2,35,0,0,30
	.byte	'Ifx_FLASH_CBAB_STAT_Bits',0,23,111,3
	.word	93230
	.byte	10
	.byte	'_Ifx_FLASH_CBAB_TOP_Bits',0,23,114,16,4,11
	.byte	'reserved_0',0,1
	.word	462
	.byte	5,3,2,35,0,11
	.byte	'ADDR',0,4
	.word	439
	.byte	19,8,2,35,0,11
	.byte	'ERR',0,1
	.word	462
	.byte	6,2,2,35,3,11
	.byte	'VLD',0,1
	.word	462
	.byte	1,1,2,35,3,11
	.byte	'CLR',0,1
	.word	462
	.byte	1,0,2,35,3,0,30
	.byte	'Ifx_FLASH_CBAB_TOP_Bits',0,23,121,3
	.word	93478
	.byte	10
	.byte	'_Ifx_FLASH_COMM0_Bits',0,23,124,16,4,11
	.byte	'STATUS',0,1
	.word	462
	.byte	8,0,2,35,0,11
	.byte	'reserved_8',0,4
	.word	439
	.byte	24,0,2,35,0,0,30
	.byte	'Ifx_FLASH_COMM0_Bits',0,23,128,1,3
	.word	93624
	.byte	10
	.byte	'_Ifx_FLASH_COMM1_Bits',0,23,131,1,16,4,11
	.byte	'STATUS',0,1
	.word	462
	.byte	8,0,2,35,0,11
	.byte	'DATA',0,1
	.word	462
	.byte	8,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	1013
	.byte	16,0,2,35,2,0,30
	.byte	'Ifx_FLASH_COMM1_Bits',0,23,136,1,3
	.word	93722
	.byte	10
	.byte	'_Ifx_FLASH_COMM2_Bits',0,23,139,1,16,4,11
	.byte	'STATUS',0,1
	.word	462
	.byte	8,0,2,35,0,11
	.byte	'DATA',0,1
	.word	462
	.byte	8,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	1013
	.byte	16,0,2,35,2,0,30
	.byte	'Ifx_FLASH_COMM2_Bits',0,23,144,1,3
	.word	93838
	.byte	10
	.byte	'_Ifx_FLASH_ECCRD_Bits',0,23,147,1,16,4,11
	.byte	'RCODE',0,4
	.word	439
	.byte	22,10,2,35,0,11
	.byte	'reserved_22',0,2
	.word	1013
	.byte	8,2,2,35,2,11
	.byte	'EDCERRINJ',0,1
	.word	462
	.byte	1,1,2,35,3,11
	.byte	'ECCORDIS',0,1
	.word	462
	.byte	1,0,2,35,3,0,30
	.byte	'Ifx_FLASH_ECCRD_Bits',0,23,153,1,3
	.word	93954
	.byte	10
	.byte	'_Ifx_FLASH_ECCRP_Bits',0,23,156,1,16,4,11
	.byte	'RCODE',0,4
	.word	439
	.byte	22,10,2,35,0,11
	.byte	'reserved_22',0,2
	.word	1013
	.byte	8,2,2,35,2,11
	.byte	'EDCERRINJ',0,1
	.word	462
	.byte	1,1,2,35,3,11
	.byte	'ECCORDIS',0,1
	.word	462
	.byte	1,0,2,35,3,0,30
	.byte	'Ifx_FLASH_ECCRP_Bits',0,23,162,1,3
	.word	94094
	.byte	10
	.byte	'_Ifx_FLASH_ECCW_Bits',0,23,165,1,16,4,11
	.byte	'WCODE',0,4
	.word	439
	.byte	22,10,2,35,0,11
	.byte	'reserved_22',0,2
	.word	1013
	.byte	8,2,2,35,2,11
	.byte	'DECENCDIS',0,1
	.word	462
	.byte	1,1,2,35,3,11
	.byte	'PECENCDIS',0,1
	.word	462
	.byte	1,0,2,35,3,0,30
	.byte	'Ifx_FLASH_ECCW_Bits',0,23,171,1,3
	.word	94234
	.byte	10
	.byte	'_Ifx_FLASH_FCON_Bits',0,23,174,1,16,4,11
	.byte	'WSPFLASH',0,1
	.word	462
	.byte	4,4,2,35,0,11
	.byte	'WSECPF',0,1
	.word	462
	.byte	2,2,2,35,0,11
	.byte	'WSDFLASH',0,2
	.word	1013
	.byte	6,4,2,35,0,11
	.byte	'WSECDF',0,1
	.word	462
	.byte	3,1,2,35,1,11
	.byte	'IDLE',0,1
	.word	462
	.byte	1,0,2,35,1,11
	.byte	'ESLDIS',0,1
	.word	462
	.byte	1,7,2,35,2,11
	.byte	'SLEEP',0,1
	.word	462
	.byte	1,6,2,35,2,11
	.byte	'NSAFECC',0,1
	.word	462
	.byte	1,5,2,35,2,11
	.byte	'STALL',0,1
	.word	462
	.byte	1,4,2,35,2,11
	.byte	'RES21',0,1
	.word	462
	.byte	2,2,2,35,2,11
	.byte	'RES23',0,1
	.word	462
	.byte	2,0,2,35,2,11
	.byte	'VOPERM',0,1
	.word	462
	.byte	1,7,2,35,3,11
	.byte	'SQERM',0,1
	.word	462
	.byte	1,6,2,35,3,11
	.byte	'PROERM',0,1
	.word	462
	.byte	1,5,2,35,3,11
	.byte	'reserved_27',0,1
	.word	462
	.byte	3,2,2,35,3,11
	.byte	'PR5V',0,1
	.word	462
	.byte	1,1,2,35,3,11
	.byte	'EOBM',0,1
	.word	462
	.byte	1,0,2,35,3,0,30
	.byte	'Ifx_FLASH_FCON_Bits',0,23,193,1,3
	.word	94373
	.byte	10
	.byte	'_Ifx_FLASH_FPRO_Bits',0,23,196,1,16,4,11
	.byte	'PROINP',0,1
	.word	462
	.byte	1,7,2,35,0,11
	.byte	'PRODISP',0,1
	.word	462
	.byte	1,6,2,35,0,11
	.byte	'PROIND',0,1
	.word	462
	.byte	1,5,2,35,0,11
	.byte	'PRODISD',0,1
	.word	462
	.byte	1,4,2,35,0,11
	.byte	'PROINHSMCOTP',0,1
	.word	462
	.byte	1,3,2,35,0,11
	.byte	'RES5',0,1
	.word	462
	.byte	1,2,2,35,0,11
	.byte	'PROINOTP',0,1
	.word	462
	.byte	1,1,2,35,0,11
	.byte	'RES7',0,1
	.word	462
	.byte	1,0,2,35,0,11
	.byte	'PROINDBG',0,1
	.word	462
	.byte	1,7,2,35,1,11
	.byte	'PRODISDBG',0,1
	.word	462
	.byte	1,6,2,35,1,11
	.byte	'PROINHSM',0,1
	.word	462
	.byte	1,5,2,35,1,11
	.byte	'reserved_11',0,1
	.word	462
	.byte	5,0,2,35,1,11
	.byte	'DCFP',0,1
	.word	462
	.byte	1,7,2,35,2,11
	.byte	'DDFP',0,1
	.word	462
	.byte	1,6,2,35,2,11
	.byte	'DDFPX',0,1
	.word	462
	.byte	1,5,2,35,2,11
	.byte	'reserved_19',0,1
	.word	462
	.byte	1,4,2,35,2,11
	.byte	'DDFD',0,1
	.word	462
	.byte	1,3,2,35,2,11
	.byte	'reserved_21',0,1
	.word	462
	.byte	1,2,2,35,2,11
	.byte	'ENPE',0,1
	.word	462
	.byte	2,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	462
	.byte	8,0,2,35,3,0,30
	.byte	'Ifx_FLASH_FPRO_Bits',0,23,218,1,3
	.word	94735
	.byte	10
	.byte	'_Ifx_FLASH_FSR_Bits',0,23,221,1,16,4,11
	.byte	'FABUSY',0,1
	.word	462
	.byte	1,7,2,35,0,11
	.byte	'D0BUSY',0,1
	.word	462
	.byte	1,6,2,35,0,11
	.byte	'RES1',0,1
	.word	462
	.byte	1,5,2,35,0,11
	.byte	'P0BUSY',0,1
	.word	462
	.byte	1,4,2,35,0,11
	.byte	'P1BUSY',0,1
	.word	462
	.byte	1,3,2,35,0,11
	.byte	'RES5',0,1
	.word	462
	.byte	1,2,2,35,0,11
	.byte	'RES6',0,1
	.word	462
	.byte	1,1,2,35,0,11
	.byte	'PROG',0,1
	.word	462
	.byte	1,0,2,35,0,11
	.byte	'ERASE',0,1
	.word	462
	.byte	1,7,2,35,1,11
	.byte	'PFPAGE',0,1
	.word	462
	.byte	1,6,2,35,1,11
	.byte	'DFPAGE',0,1
	.word	462
	.byte	1,5,2,35,1,11
	.byte	'OPER',0,1
	.word	462
	.byte	1,4,2,35,1,11
	.byte	'SQER',0,1
	.word	462
	.byte	1,3,2,35,1,11
	.byte	'PROER',0,1
	.word	462
	.byte	1,2,2,35,1,11
	.byte	'PFSBER',0,1
	.word	462
	.byte	1,1,2,35,1,11
	.byte	'PFDBER',0,1
	.word	462
	.byte	1,0,2,35,1,11
	.byte	'PFMBER',0,1
	.word	462
	.byte	1,7,2,35,2,11
	.byte	'RES17',0,1
	.word	462
	.byte	1,6,2,35,2,11
	.byte	'DFSBER',0,1
	.word	462
	.byte	1,5,2,35,2,11
	.byte	'DFDBER',0,1
	.word	462
	.byte	1,4,2,35,2,11
	.byte	'DFTBER',0,1
	.word	462
	.byte	1,3,2,35,2,11
	.byte	'DFMBER',0,1
	.word	462
	.byte	1,2,2,35,2,11
	.byte	'SRIADDERR',0,1
	.word	462
	.byte	1,1,2,35,2,11
	.byte	'reserved_23',0,2
	.word	1013
	.byte	2,7,2,35,2,11
	.byte	'PVER',0,1
	.word	462
	.byte	1,6,2,35,3,11
	.byte	'EVER',0,1
	.word	462
	.byte	1,5,2,35,3,11
	.byte	'SPND',0,1
	.word	462
	.byte	1,4,2,35,3,11
	.byte	'SLM',0,1
	.word	462
	.byte	1,3,2,35,3,11
	.byte	'reserved_29',0,1
	.word	462
	.byte	1,2,2,35,3,11
	.byte	'ORIER',0,1
	.word	462
	.byte	1,1,2,35,3,11
	.byte	'reserved_31',0,1
	.word	462
	.byte	1,0,2,35,3,0,30
	.byte	'Ifx_FLASH_FSR_Bits',0,23,254,1,3
	.word	95176
	.byte	10
	.byte	'_Ifx_FLASH_ID_Bits',0,23,129,2,16,4,11
	.byte	'MODREV',0,1
	.word	462
	.byte	8,0,2,35,0,11
	.byte	'MODTYPE',0,1
	.word	462
	.byte	8,0,2,35,1,11
	.byte	'MODNUMBER',0,2
	.word	1013
	.byte	16,0,2,35,2,0,30
	.byte	'Ifx_FLASH_ID_Bits',0,23,134,2,3
	.word	95782
	.byte	10
	.byte	'_Ifx_FLASH_MARD_Bits',0,23,137,2,16,4,11
	.byte	'HMARGIN',0,1
	.word	462
	.byte	1,7,2,35,0,11
	.byte	'SELD0',0,1
	.word	462
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	462
	.byte	1,5,2,35,0,11
	.byte	'SPND',0,1
	.word	462
	.byte	1,4,2,35,0,11
	.byte	'SPNDERR',0,1
	.word	462
	.byte	1,3,2,35,0,11
	.byte	'reserved_5',0,2
	.word	1013
	.byte	10,1,2,35,0,11
	.byte	'TRAPDIS',0,1
	.word	462
	.byte	1,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	1013
	.byte	16,0,2,35,2,0,30
	.byte	'Ifx_FLASH_MARD_Bits',0,23,147,2,3
	.word	95893
	.byte	10
	.byte	'_Ifx_FLASH_MARP_Bits',0,23,150,2,16,4,11
	.byte	'SELP0',0,1
	.word	462
	.byte	1,7,2,35,0,11
	.byte	'SELP1',0,1
	.word	462
	.byte	1,6,2,35,0,11
	.byte	'RES2',0,1
	.word	462
	.byte	1,5,2,35,0,11
	.byte	'RES3',0,1
	.word	462
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,2
	.word	1013
	.byte	11,1,2,35,0,11
	.byte	'TRAPDIS',0,1
	.word	462
	.byte	1,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	1013
	.byte	16,0,2,35,2,0,30
	.byte	'Ifx_FLASH_MARP_Bits',0,23,159,2,3
	.word	96107
	.byte	10
	.byte	'_Ifx_FLASH_PROCOND_Bits',0,23,162,2,16,4,11
	.byte	'L',0,1
	.word	462
	.byte	1,7,2,35,0,11
	.byte	'NSAFECC',0,1
	.word	462
	.byte	1,6,2,35,0,11
	.byte	'RAMIN',0,1
	.word	462
	.byte	2,4,2,35,0,11
	.byte	'RAMINSEL',0,1
	.word	462
	.byte	4,0,2,35,0,11
	.byte	'OSCCFG',0,1
	.word	462
	.byte	1,7,2,35,1,11
	.byte	'MODE',0,1
	.word	462
	.byte	2,5,2,35,1,11
	.byte	'APREN',0,1
	.word	462
	.byte	1,4,2,35,1,11
	.byte	'CAP0EN',0,1
	.word	462
	.byte	1,3,2,35,1,11
	.byte	'CAP1EN',0,1
	.word	462
	.byte	1,2,2,35,1,11
	.byte	'CAP2EN',0,1
	.word	462
	.byte	1,1,2,35,1,11
	.byte	'CAP3EN',0,1
	.word	462
	.byte	1,0,2,35,1,11
	.byte	'ESR0CNT',0,2
	.word	1013
	.byte	12,4,2,35,2,11
	.byte	'RES29',0,1
	.word	462
	.byte	2,2,2,35,3,11
	.byte	'RES30',0,1
	.word	462
	.byte	1,1,2,35,3,11
	.byte	'RPRO',0,1
	.word	462
	.byte	1,0,2,35,3,0,30
	.byte	'Ifx_FLASH_PROCOND_Bits',0,23,179,2,3
	.word	96294
	.byte	10
	.byte	'_Ifx_FLASH_PROCONDBG_Bits',0,23,182,2,16,4,11
	.byte	'OCDSDIS',0,1
	.word	462
	.byte	1,7,2,35,0,11
	.byte	'DBGIFLCK',0,1
	.word	462
	.byte	1,6,2,35,0,11
	.byte	'EDM',0,1
	.word	462
	.byte	2,4,2,35,0,11
	.byte	'reserved_4',0,4
	.word	439
	.byte	28,0,2,35,0,0,30
	.byte	'Ifx_FLASH_PROCONDBG_Bits',0,23,188,2,3
	.word	96618
	.byte	10
	.byte	'_Ifx_FLASH_PROCONHSM_Bits',0,23,191,2,16,4,11
	.byte	'HSMDBGDIS',0,1
	.word	462
	.byte	1,7,2,35,0,11
	.byte	'DBGIFLCK',0,1
	.word	462
	.byte	1,6,2,35,0,11
	.byte	'TSTIFLCK',0,1
	.word	462
	.byte	1,5,2,35,0,11
	.byte	'HSMTSTDIS',0,1
	.word	462
	.byte	1,4,2,35,0,11
	.byte	'RES15',0,2
	.word	1013
	.byte	12,0,2,35,0,11
	.byte	'reserved_16',0,2
	.word	1013
	.byte	16,0,2,35,2,0,30
	.byte	'Ifx_FLASH_PROCONHSM_Bits',0,23,199,2,3
	.word	96761
	.byte	10
	.byte	'_Ifx_FLASH_PROCONHSMCOTP_Bits',0,23,202,2,16,4,11
	.byte	'HSMBOOTEN',0,1
	.word	462
	.byte	1,7,2,35,0,11
	.byte	'SSWWAIT',0,1
	.word	462
	.byte	1,6,2,35,0,11
	.byte	'HSMDX',0,1
	.word	462
	.byte	1,5,2,35,0,11
	.byte	'HSM6X',0,1
	.word	462
	.byte	1,4,2,35,0,11
	.byte	'HSM16X',0,1
	.word	462
	.byte	1,3,2,35,0,11
	.byte	'HSM17X',0,1
	.word	462
	.byte	1,2,2,35,0,11
	.byte	'S6ROM',0,1
	.word	462
	.byte	1,1,2,35,0,11
	.byte	'HSMENPINS',0,2
	.word	1013
	.byte	2,7,2,35,0,11
	.byte	'HSMENRES',0,1
	.word	462
	.byte	2,5,2,35,1,11
	.byte	'DESTDBG',0,1
	.word	462
	.byte	2,3,2,35,1,11
	.byte	'BLKFLAN',0,1
	.word	462
	.byte	1,2,2,35,1,11
	.byte	'reserved_14',0,1
	.word	462
	.byte	2,0,2,35,1,11
	.byte	'S16ROM',0,1
	.word	462
	.byte	1,7,2,35,2,11
	.byte	'S17ROM',0,1
	.word	462
	.byte	1,6,2,35,2,11
	.byte	'reserved_18',0,2
	.word	1013
	.byte	14,0,2,35,2,0,30
	.byte	'Ifx_FLASH_PROCONHSMCOTP_Bits',0,23,219,2,3
	.word	96950
	.byte	10
	.byte	'_Ifx_FLASH_PROCONOTP_Bits',0,23,222,2,16,4,11
	.byte	'S0ROM',0,1
	.word	462
	.byte	1,7,2,35,0,11
	.byte	'S1ROM',0,1
	.word	462
	.byte	1,6,2,35,0,11
	.byte	'S2ROM',0,1
	.word	462
	.byte	1,5,2,35,0,11
	.byte	'S3ROM',0,1
	.word	462
	.byte	1,4,2,35,0,11
	.byte	'S4ROM',0,1
	.word	462
	.byte	1,3,2,35,0,11
	.byte	'S5ROM',0,1
	.word	462
	.byte	1,2,2,35,0,11
	.byte	'S6ROM',0,1
	.word	462
	.byte	1,1,2,35,0,11
	.byte	'S7ROM',0,1
	.word	462
	.byte	1,0,2,35,0,11
	.byte	'S8ROM',0,1
	.word	462
	.byte	1,7,2,35,1,11
	.byte	'S9ROM',0,1
	.word	462
	.byte	1,6,2,35,1,11
	.byte	'S10ROM',0,1
	.word	462
	.byte	1,5,2,35,1,11
	.byte	'S11ROM',0,1
	.word	462
	.byte	1,4,2,35,1,11
	.byte	'S12ROM',0,1
	.word	462
	.byte	1,3,2,35,1,11
	.byte	'S13ROM',0,1
	.word	462
	.byte	1,2,2,35,1,11
	.byte	'S14ROM',0,1
	.word	462
	.byte	1,1,2,35,1,11
	.byte	'S15ROM',0,1
	.word	462
	.byte	1,0,2,35,1,11
	.byte	'S16ROM',0,1
	.word	462
	.byte	1,7,2,35,2,11
	.byte	'S17ROM',0,1
	.word	462
	.byte	1,6,2,35,2,11
	.byte	'S18ROM',0,1
	.word	462
	.byte	1,5,2,35,2,11
	.byte	'S19ROM',0,1
	.word	462
	.byte	1,4,2,35,2,11
	.byte	'S20ROM',0,1
	.word	462
	.byte	1,3,2,35,2,11
	.byte	'S21ROM',0,1
	.word	462
	.byte	1,2,2,35,2,11
	.byte	'S22ROM',0,1
	.word	462
	.byte	1,1,2,35,2,11
	.byte	'S23ROM',0,1
	.word	462
	.byte	1,0,2,35,2,11
	.byte	'S24ROM',0,1
	.word	462
	.byte	1,7,2,35,3,11
	.byte	'S25ROM',0,1
	.word	462
	.byte	1,6,2,35,3,11
	.byte	'S26ROM',0,1
	.word	462
	.byte	1,5,2,35,3,11
	.byte	'reserved_27',0,1
	.word	462
	.byte	2,3,2,35,3,11
	.byte	'BML',0,1
	.word	462
	.byte	2,1,2,35,3,11
	.byte	'TP',0,1
	.word	462
	.byte	1,0,2,35,3,0,30
	.byte	'Ifx_FLASH_PROCONOTP_Bits',0,23,254,2,3
	.word	97313
	.byte	10
	.byte	'_Ifx_FLASH_PROCONP_Bits',0,23,129,3,16,4,11
	.byte	'S0L',0,1
	.word	462
	.byte	1,7,2,35,0,11
	.byte	'S1L',0,1
	.word	462
	.byte	1,6,2,35,0,11
	.byte	'S2L',0,1
	.word	462
	.byte	1,5,2,35,0,11
	.byte	'S3L',0,1
	.word	462
	.byte	1,4,2,35,0,11
	.byte	'S4L',0,1
	.word	462
	.byte	1,3,2,35,0,11
	.byte	'S5L',0,1
	.word	462
	.byte	1,2,2,35,0,11
	.byte	'S6L',0,1
	.word	462
	.byte	1,1,2,35,0,11
	.byte	'S7L',0,1
	.word	462
	.byte	1,0,2,35,0,11
	.byte	'S8L',0,1
	.word	462
	.byte	1,7,2,35,1,11
	.byte	'S9L',0,1
	.word	462
	.byte	1,6,2,35,1,11
	.byte	'S10L',0,1
	.word	462
	.byte	1,5,2,35,1,11
	.byte	'S11L',0,1
	.word	462
	.byte	1,4,2,35,1,11
	.byte	'S12L',0,1
	.word	462
	.byte	1,3,2,35,1,11
	.byte	'S13L',0,1
	.word	462
	.byte	1,2,2,35,1,11
	.byte	'S14L',0,1
	.word	462
	.byte	1,1,2,35,1,11
	.byte	'S15L',0,1
	.word	462
	.byte	1,0,2,35,1,11
	.byte	'S16L',0,1
	.word	462
	.byte	1,7,2,35,2,11
	.byte	'S17L',0,1
	.word	462
	.byte	1,6,2,35,2,11
	.byte	'S18L',0,1
	.word	462
	.byte	1,5,2,35,2,11
	.byte	'S19L',0,1
	.word	462
	.byte	1,4,2,35,2,11
	.byte	'S20L',0,1
	.word	462
	.byte	1,3,2,35,2,11
	.byte	'S21L',0,1
	.word	462
	.byte	1,2,2,35,2,11
	.byte	'S22L',0,1
	.word	462
	.byte	1,1,2,35,2,11
	.byte	'S23L',0,1
	.word	462
	.byte	1,0,2,35,2,11
	.byte	'S24L',0,1
	.word	462
	.byte	1,7,2,35,3,11
	.byte	'S25L',0,1
	.word	462
	.byte	1,6,2,35,3,11
	.byte	'S26L',0,1
	.word	462
	.byte	1,5,2,35,3,11
	.byte	'reserved_27',0,1
	.word	462
	.byte	4,1,2,35,3,11
	.byte	'RPRO',0,1
	.word	462
	.byte	1,0,2,35,3,0,30
	.byte	'Ifx_FLASH_PROCONP_Bits',0,23,160,3,3
	.word	97908
	.byte	10
	.byte	'_Ifx_FLASH_PROCONWOP_Bits',0,23,163,3,16,4,11
	.byte	'S0WOP',0,1
	.word	462
	.byte	1,7,2,35,0,11
	.byte	'S1WOP',0,1
	.word	462
	.byte	1,6,2,35,0,11
	.byte	'S2WOP',0,1
	.word	462
	.byte	1,5,2,35,0,11
	.byte	'S3WOP',0,1
	.word	462
	.byte	1,4,2,35,0,11
	.byte	'S4WOP',0,1
	.word	462
	.byte	1,3,2,35,0,11
	.byte	'S5WOP',0,1
	.word	462
	.byte	1,2,2,35,0,11
	.byte	'S6WOP',0,1
	.word	462
	.byte	1,1,2,35,0,11
	.byte	'S7WOP',0,1
	.word	462
	.byte	1,0,2,35,0,11
	.byte	'S8WOP',0,1
	.word	462
	.byte	1,7,2,35,1,11
	.byte	'S9WOP',0,1
	.word	462
	.byte	1,6,2,35,1,11
	.byte	'S10WOP',0,1
	.word	462
	.byte	1,5,2,35,1,11
	.byte	'S11WOP',0,1
	.word	462
	.byte	1,4,2,35,1,11
	.byte	'S12WOP',0,1
	.word	462
	.byte	1,3,2,35,1,11
	.byte	'S13WOP',0,1
	.word	462
	.byte	1,2,2,35,1,11
	.byte	'S14WOP',0,1
	.word	462
	.byte	1,1,2,35,1,11
	.byte	'S15WOP',0,1
	.word	462
	.byte	1,0,2,35,1,11
	.byte	'S16WOP',0,1
	.word	462
	.byte	1,7,2,35,2,11
	.byte	'S17WOP',0,1
	.word	462
	.byte	1,6,2,35,2,11
	.byte	'S18WOP',0,1
	.word	462
	.byte	1,5,2,35,2,11
	.byte	'S19WOP',0,1
	.word	462
	.byte	1,4,2,35,2,11
	.byte	'S20WOP',0,1
	.word	462
	.byte	1,3,2,35,2,11
	.byte	'S21WOP',0,1
	.word	462
	.byte	1,2,2,35,2,11
	.byte	'S22WOP',0,1
	.word	462
	.byte	1,1,2,35,2,11
	.byte	'S23WOP',0,1
	.word	462
	.byte	1,0,2,35,2,11
	.byte	'S24WOP',0,1
	.word	462
	.byte	1,7,2,35,3,11
	.byte	'S25WOP',0,1
	.word	462
	.byte	1,6,2,35,3,11
	.byte	'S26WOP',0,1
	.word	462
	.byte	1,5,2,35,3,11
	.byte	'reserved_27',0,1
	.word	462
	.byte	4,1,2,35,3,11
	.byte	'DATM',0,1
	.word	462
	.byte	1,0,2,35,3,0,30
	.byte	'Ifx_FLASH_PROCONWOP_Bits',0,23,194,3,3
	.word	98432
	.byte	10
	.byte	'_Ifx_FLASH_RDB_CFG0_Bits',0,23,197,3,16,4,11
	.byte	'TAG',0,1
	.word	462
	.byte	6,2,2,35,0,11
	.byte	'reserved_6',0,4
	.word	439
	.byte	26,0,2,35,0,0,30
	.byte	'Ifx_FLASH_RDB_CFG0_Bits',0,23,201,3,3
	.word	99014
	.byte	10
	.byte	'_Ifx_FLASH_RDB_CFG1_Bits',0,23,204,3,16,4,11
	.byte	'TAG',0,1
	.word	462
	.byte	6,2,2,35,0,11
	.byte	'reserved_6',0,4
	.word	439
	.byte	26,0,2,35,0,0,30
	.byte	'Ifx_FLASH_RDB_CFG1_Bits',0,23,208,3,3
	.word	99116
	.byte	10
	.byte	'_Ifx_FLASH_RDB_CFG2_Bits',0,23,211,3,16,4,11
	.byte	'TAG',0,1
	.word	462
	.byte	6,2,2,35,0,11
	.byte	'reserved_6',0,4
	.word	439
	.byte	26,0,2,35,0,0,30
	.byte	'Ifx_FLASH_RDB_CFG2_Bits',0,23,215,3,3
	.word	99218
	.byte	10
	.byte	'_Ifx_FLASH_RRAD_Bits',0,23,218,3,16,4,11
	.byte	'reserved_0',0,1
	.word	462
	.byte	3,5,2,35,0,11
	.byte	'ADD',0,4
	.word	439
	.byte	29,0,2,35,0,0,30
	.byte	'Ifx_FLASH_RRAD_Bits',0,23,222,3,3
	.word	99320
	.byte	10
	.byte	'_Ifx_FLASH_RRCT_Bits',0,23,225,3,16,4,11
	.byte	'STRT',0,1
	.word	462
	.byte	1,7,2,35,0,11
	.byte	'STP',0,1
	.word	462
	.byte	1,6,2,35,0,11
	.byte	'BUSY',0,1
	.word	462
	.byte	1,5,2,35,0,11
	.byte	'DONE',0,1
	.word	462
	.byte	1,4,2,35,0,11
	.byte	'ERR',0,1
	.word	462
	.byte	1,3,2,35,0,11
	.byte	'reserved_5',0,1
	.word	462
	.byte	3,0,2,35,0,11
	.byte	'EOBM',0,1
	.word	462
	.byte	1,7,2,35,1,11
	.byte	'reserved_9',0,1
	.word	462
	.byte	7,0,2,35,1,11
	.byte	'CNT',0,2
	.word	1013
	.byte	16,0,2,35,2,0,30
	.byte	'Ifx_FLASH_RRCT_Bits',0,23,236,3,3
	.word	99414
	.byte	10
	.byte	'_Ifx_FLASH_RRD0_Bits',0,23,239,3,16,4,11
	.byte	'DATA',0,4
	.word	439
	.byte	32,0,2,35,0,0,30
	.byte	'Ifx_FLASH_RRD0_Bits',0,23,242,3,3
	.word	99624
	.byte	10
	.byte	'_Ifx_FLASH_RRD1_Bits',0,23,245,3,16,4,11
	.byte	'DATA',0,4
	.word	439
	.byte	32,0,2,35,0,0,30
	.byte	'Ifx_FLASH_RRD1_Bits',0,23,248,3,3
	.word	99697
	.byte	10
	.byte	'_Ifx_FLASH_UBAB_CFG_Bits',0,23,251,3,16,4,11
	.byte	'SEL',0,1
	.word	462
	.byte	6,2,2,35,0,11
	.byte	'reserved_6',0,1
	.word	462
	.byte	2,0,2,35,0,11
	.byte	'CLR',0,1
	.word	462
	.byte	1,7,2,35,1,11
	.byte	'DIS',0,1
	.word	462
	.byte	1,6,2,35,1,11
	.byte	'reserved_10',0,4
	.word	439
	.byte	22,0,2,35,0,0,30
	.byte	'Ifx_FLASH_UBAB_CFG_Bits',0,23,130,4,3
	.word	99770
	.byte	10
	.byte	'_Ifx_FLASH_UBAB_STAT_Bits',0,23,133,4,16,4,11
	.byte	'VLD0',0,1
	.word	462
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,4
	.word	439
	.byte	31,0,2,35,0,0,30
	.byte	'Ifx_FLASH_UBAB_STAT_Bits',0,23,137,4,3
	.word	99925
	.byte	10
	.byte	'_Ifx_FLASH_UBAB_TOP_Bits',0,23,140,4,16,4,11
	.byte	'reserved_0',0,1
	.word	462
	.byte	5,3,2,35,0,11
	.byte	'ADDR',0,4
	.word	439
	.byte	19,8,2,35,0,11
	.byte	'ERR',0,1
	.word	462
	.byte	6,2,2,35,3,11
	.byte	'VLD',0,1
	.word	462
	.byte	1,1,2,35,3,11
	.byte	'CLR',0,1
	.word	462
	.byte	1,0,2,35,3,0,30
	.byte	'Ifx_FLASH_UBAB_TOP_Bits',0,23,147,4,3
	.word	100030
	.byte	12,23,155,4,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	92435
	.byte	4,2,35,0,0,30
	.byte	'Ifx_FLASH_ACCEN0',0,23,160,4,3
	.word	100178
	.byte	12,23,163,4,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	92996
	.byte	4,2,35,0,0,30
	.byte	'Ifx_FLASH_ACCEN1',0,23,168,4,3
	.word	100244
	.byte	12,23,171,4,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	93077
	.byte	4,2,35,0,0,30
	.byte	'Ifx_FLASH_CBAB_CFG',0,23,176,4,3
	.word	100310
	.byte	12,23,179,4,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	93230
	.byte	4,2,35,0,0,30
	.byte	'Ifx_FLASH_CBAB_STAT',0,23,184,4,3
	.word	100378
	.byte	12,23,187,4,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	93478
	.byte	4,2,35,0,0,30
	.byte	'Ifx_FLASH_CBAB_TOP',0,23,192,4,3
	.word	100447
	.byte	12,23,195,4,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	93624
	.byte	4,2,35,0,0,30
	.byte	'Ifx_FLASH_COMM0',0,23,200,4,3
	.word	100515
	.byte	12,23,203,4,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	93722
	.byte	4,2,35,0,0,30
	.byte	'Ifx_FLASH_COMM1',0,23,208,4,3
	.word	100580
	.byte	12,23,211,4,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	93838
	.byte	4,2,35,0,0,30
	.byte	'Ifx_FLASH_COMM2',0,23,216,4,3
	.word	100645
	.byte	12,23,219,4,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	93954
	.byte	4,2,35,0,0,30
	.byte	'Ifx_FLASH_ECCRD',0,23,224,4,3
	.word	100710
	.byte	12,23,227,4,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	94094
	.byte	4,2,35,0,0,30
	.byte	'Ifx_FLASH_ECCRP',0,23,232,4,3
	.word	100775
	.byte	12,23,235,4,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	94234
	.byte	4,2,35,0,0,30
	.byte	'Ifx_FLASH_ECCW',0,23,240,4,3
	.word	100840
	.byte	12,23,243,4,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	94373
	.byte	4,2,35,0,0,30
	.byte	'Ifx_FLASH_FCON',0,23,248,4,3
	.word	100904
	.byte	12,23,251,4,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	94735
	.byte	4,2,35,0,0,30
	.byte	'Ifx_FLASH_FPRO',0,23,128,5,3
	.word	100968
	.byte	12,23,131,5,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	95176
	.byte	4,2,35,0,0,30
	.byte	'Ifx_FLASH_FSR',0,23,136,5,3
	.word	101032
	.byte	12,23,139,5,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	95782
	.byte	4,2,35,0,0,30
	.byte	'Ifx_FLASH_ID',0,23,144,5,3
	.word	101095
	.byte	12,23,147,5,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	95893
	.byte	4,2,35,0,0,30
	.byte	'Ifx_FLASH_MARD',0,23,152,5,3
	.word	101157
	.byte	12,23,155,5,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	96107
	.byte	4,2,35,0,0,30
	.byte	'Ifx_FLASH_MARP',0,23,160,5,3
	.word	101221
	.byte	12,23,163,5,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	96294
	.byte	4,2,35,0,0,30
	.byte	'Ifx_FLASH_PROCOND',0,23,168,5,3
	.word	101285
	.byte	12,23,171,5,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	96618
	.byte	4,2,35,0,0,30
	.byte	'Ifx_FLASH_PROCONDBG',0,23,176,5,3
	.word	101352
	.byte	12,23,179,5,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	96761
	.byte	4,2,35,0,0,30
	.byte	'Ifx_FLASH_PROCONHSM',0,23,184,5,3
	.word	101421
	.byte	12,23,187,5,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	96950
	.byte	4,2,35,0,0,30
	.byte	'Ifx_FLASH_PROCONHSMCOTP',0,23,192,5,3
	.word	101490
	.byte	12,23,195,5,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	97313
	.byte	4,2,35,0,0,30
	.byte	'Ifx_FLASH_PROCONOTP',0,23,200,5,3
	.word	101563
	.byte	12,23,203,5,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	97908
	.byte	4,2,35,0,0,30
	.byte	'Ifx_FLASH_PROCONP',0,23,208,5,3
	.word	101632
	.byte	12,23,211,5,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	98432
	.byte	4,2,35,0,0,30
	.byte	'Ifx_FLASH_PROCONWOP',0,23,216,5,3
	.word	101699
	.byte	12,23,219,5,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	99014
	.byte	4,2,35,0,0,30
	.byte	'Ifx_FLASH_RDB_CFG0',0,23,224,5,3
	.word	101768
	.byte	12,23,227,5,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	99116
	.byte	4,2,35,0,0,30
	.byte	'Ifx_FLASH_RDB_CFG1',0,23,232,5,3
	.word	101836
	.byte	12,23,235,5,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	99218
	.byte	4,2,35,0,0,30
	.byte	'Ifx_FLASH_RDB_CFG2',0,23,240,5,3
	.word	101904
	.byte	12,23,243,5,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	99320
	.byte	4,2,35,0,0,30
	.byte	'Ifx_FLASH_RRAD',0,23,248,5,3
	.word	101972
	.byte	12,23,251,5,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	99414
	.byte	4,2,35,0,0,30
	.byte	'Ifx_FLASH_RRCT',0,23,128,6,3
	.word	102036
	.byte	12,23,131,6,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	99624
	.byte	4,2,35,0,0,30
	.byte	'Ifx_FLASH_RRD0',0,23,136,6,3
	.word	102100
	.byte	12,23,139,6,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	99697
	.byte	4,2,35,0,0,30
	.byte	'Ifx_FLASH_RRD1',0,23,144,6,3
	.word	102164
	.byte	12,23,147,6,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	99770
	.byte	4,2,35,0,0,30
	.byte	'Ifx_FLASH_UBAB_CFG',0,23,152,6,3
	.word	102228
	.byte	12,23,155,6,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	99925
	.byte	4,2,35,0,0,30
	.byte	'Ifx_FLASH_UBAB_STAT',0,23,160,6,3
	.word	102296
	.byte	12,23,163,6,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	100030
	.byte	4,2,35,0,0,30
	.byte	'Ifx_FLASH_UBAB_TOP',0,23,168,6,3
	.word	102365
	.byte	10
	.byte	'_Ifx_FLASH_CBAB',0,23,179,6,25,12,13
	.byte	'CFG',0
	.word	100310
	.byte	4,2,35,0,13
	.byte	'STAT',0
	.word	100378
	.byte	4,2,35,4,13
	.byte	'TOP',0
	.word	100447
	.byte	4,2,35,8,0,14
	.word	102433
	.byte	30
	.byte	'Ifx_FLASH_CBAB',0,23,184,6,3
	.word	102496
	.byte	10
	.byte	'_Ifx_FLASH_RDB',0,23,187,6,25,12,13
	.byte	'CFG0',0
	.word	101768
	.byte	4,2,35,0,13
	.byte	'CFG1',0
	.word	101836
	.byte	4,2,35,4,13
	.byte	'CFG2',0
	.word	101904
	.byte	4,2,35,8,0,14
	.word	102525
	.byte	30
	.byte	'Ifx_FLASH_RDB',0,23,192,6,3
	.word	102589
	.byte	10
	.byte	'_Ifx_FLASH_UBAB',0,23,195,6,25,12,13
	.byte	'CFG',0
	.word	102228
	.byte	4,2,35,0,13
	.byte	'STAT',0
	.word	102296
	.byte	4,2,35,4,13
	.byte	'TOP',0
	.word	102365
	.byte	4,2,35,8,0,14
	.word	102617
	.byte	30
	.byte	'Ifx_FLASH_UBAB',0,23,200,6,3
	.word	102680
	.byte	30
	.byte	'IfxScuCcu_PllStepsFunctionHook',0,13,148,1,16
	.word	178
	.byte	33,13,212,5,9,8,13
	.byte	'value',0
	.word	10285
	.byte	4,2,35,0,13
	.byte	'mask',0
	.word	10285
	.byte	4,2,35,4,0,30
	.byte	'IfxScuCcu_CcuconRegConfig',0,13,216,5,3
	.word	102749
	.byte	33,13,221,5,9,8,13
	.byte	'pDivider',0
	.word	462
	.byte	1,2,35,0,13
	.byte	'nDivider',0
	.word	462
	.byte	1,2,35,1,13
	.byte	'k2Initial',0
	.word	462
	.byte	1,2,35,2,13
	.byte	'waitTime',0
	.word	235
	.byte	4,2,35,4,0,30
	.byte	'IfxScuCcu_InitialStepConfig',0,13,227,5,3
	.word	102820
	.byte	33,13,231,5,9,12,13
	.byte	'k2Step',0
	.word	462
	.byte	1,2,35,0,13
	.byte	'waitTime',0
	.word	235
	.byte	4,2,35,2,13
	.byte	'hookFunction',0
	.word	102709
	.byte	4,2,35,8,0,30
	.byte	'IfxScuCcu_PllStepsConfig',0,13,236,5,3
	.word	102937
	.byte	3
	.word	175
	.byte	33,13,244,5,9,48,13
	.byte	'ccucon0',0
	.word	102749
	.byte	8,2,35,0,13
	.byte	'ccucon1',0
	.word	102749
	.byte	8,2,35,8,13
	.byte	'ccucon2',0
	.word	102749
	.byte	8,2,35,16,13
	.byte	'ccucon5',0
	.word	102749
	.byte	8,2,35,24,13
	.byte	'ccucon6',0
	.word	102749
	.byte	8,2,35,32,13
	.byte	'ccucon7',0
	.word	102749
	.byte	8,2,35,40,0,30
	.byte	'IfxScuCcu_ClockDistributionConfig',0,13,252,5,3
	.word	103039
	.byte	33,13,128,6,9,8,13
	.byte	'value',0
	.word	10285
	.byte	4,2,35,0,13
	.byte	'mask',0
	.word	10285
	.byte	4,2,35,4,0,30
	.byte	'IfxScuCcu_FlashWaitstateConfig',0,13,132,6,3
	.word	103191
	.byte	3
	.word	102937
	.byte	33,13,137,6,9,16,13
	.byte	'numOfPllDividerSteps',0
	.word	462
	.byte	1,2,35,0,13
	.byte	'pllDividerStep',0
	.word	103267
	.byte	4,2,35,4,13
	.byte	'pllInitialStep',0
	.word	102820
	.byte	8,2,35,8,0,30
	.byte	'IfxScuCcu_SysPllConfig',0,13,142,6,3
	.word	103272
	.byte	10
	.byte	'_Ifx_CCU6_ACCEN0_Bits',0,24,45,16,4,11
	.byte	'EN0',0,1
	.word	462
	.byte	1,7,2,35,0,11
	.byte	'EN1',0,1
	.word	462
	.byte	1,6,2,35,0,11
	.byte	'EN2',0,1
	.word	462
	.byte	1,5,2,35,0,11
	.byte	'EN3',0,1
	.word	462
	.byte	1,4,2,35,0,11
	.byte	'EN4',0,1
	.word	462
	.byte	1,3,2,35,0,11
	.byte	'EN5',0,1
	.word	462
	.byte	1,2,2,35,0,11
	.byte	'EN6',0,1
	.word	462
	.byte	1,1,2,35,0,11
	.byte	'EN7',0,1
	.word	462
	.byte	1,0,2,35,0,11
	.byte	'EN8',0,1
	.word	462
	.byte	1,7,2,35,1,11
	.byte	'EN9',0,1
	.word	462
	.byte	1,6,2,35,1,11
	.byte	'EN10',0,1
	.word	462
	.byte	1,5,2,35,1,11
	.byte	'EN11',0,1
	.word	462
	.byte	1,4,2,35,1,11
	.byte	'EN12',0,1
	.word	462
	.byte	1,3,2,35,1,11
	.byte	'EN13',0,1
	.word	462
	.byte	1,2,2,35,1,11
	.byte	'EN14',0,1
	.word	462
	.byte	1,1,2,35,1,11
	.byte	'EN15',0,1
	.word	462
	.byte	1,0,2,35,1,11
	.byte	'EN16',0,1
	.word	462
	.byte	1,7,2,35,2,11
	.byte	'EN17',0,1
	.word	462
	.byte	1,6,2,35,2,11
	.byte	'EN18',0,1
	.word	462
	.byte	1,5,2,35,2,11
	.byte	'EN19',0,1
	.word	462
	.byte	1,4,2,35,2,11
	.byte	'EN20',0,1
	.word	462
	.byte	1,3,2,35,2,11
	.byte	'EN21',0,1
	.word	462
	.byte	1,2,2,35,2,11
	.byte	'EN22',0,1
	.word	462
	.byte	1,1,2,35,2,11
	.byte	'EN23',0,1
	.word	462
	.byte	1,0,2,35,2,11
	.byte	'EN24',0,1
	.word	462
	.byte	1,7,2,35,3,11
	.byte	'EN25',0,1
	.word	462
	.byte	1,6,2,35,3,11
	.byte	'EN26',0,1
	.word	462
	.byte	1,5,2,35,3,11
	.byte	'EN27',0,1
	.word	462
	.byte	1,4,2,35,3,11
	.byte	'EN28',0,1
	.word	462
	.byte	1,3,2,35,3,11
	.byte	'EN29',0,1
	.word	462
	.byte	1,2,2,35,3,11
	.byte	'EN30',0,1
	.word	462
	.byte	1,1,2,35,3,11
	.byte	'EN31',0,1
	.word	462
	.byte	1,0,2,35,3,0,30
	.byte	'Ifx_CCU6_ACCEN0_Bits',0,24,79,3
	.word	103389
	.byte	10
	.byte	'_Ifx_CCU6_ACCEN1_Bits',0,24,82,16,4,11
	.byte	'reserved_0',0,4
	.word	439
	.byte	32,0,2,35,0,0,30
	.byte	'Ifx_CCU6_ACCEN1_Bits',0,24,85,3
	.word	103948
	.byte	10
	.byte	'_Ifx_CCU6_CC60R_Bits',0,24,88,16,4,11
	.byte	'CCV',0,2
	.word	1013
	.byte	16,0,2,35,0,11
	.byte	'reserved_16',0,2
	.word	1013
	.byte	16,0,2,35,2,0,30
	.byte	'Ifx_CCU6_CC60R_Bits',0,24,92,3
	.word	104027
	.byte	10
	.byte	'_Ifx_CCU6_CC60SR_Bits',0,24,95,16,4,11
	.byte	'CCS',0,2
	.word	1013
	.byte	16,0,2,35,0,11
	.byte	'reserved_16',0,2
	.word	1013
	.byte	16,0,2,35,2,0,30
	.byte	'Ifx_CCU6_CC60SR_Bits',0,24,99,3
	.word	104120
	.byte	10
	.byte	'_Ifx_CCU6_CC61R_Bits',0,24,102,16,4,11
	.byte	'CCV',0,2
	.word	1013
	.byte	16,0,2,35,0,11
	.byte	'reserved_16',0,2
	.word	1013
	.byte	16,0,2,35,2,0,30
	.byte	'Ifx_CCU6_CC61R_Bits',0,24,106,3
	.word	104215
	.byte	10
	.byte	'_Ifx_CCU6_CC61SR_Bits',0,24,109,16,4,11
	.byte	'CCS',0,2
	.word	1013
	.byte	16,0,2,35,0,11
	.byte	'reserved_16',0,2
	.word	1013
	.byte	16,0,2,35,2,0,30
	.byte	'Ifx_CCU6_CC61SR_Bits',0,24,113,3
	.word	104308
	.byte	10
	.byte	'_Ifx_CCU6_CC62R_Bits',0,24,116,16,4,11
	.byte	'CCV',0,2
	.word	1013
	.byte	16,0,2,35,0,11
	.byte	'reserved_16',0,2
	.word	1013
	.byte	16,0,2,35,2,0,30
	.byte	'Ifx_CCU6_CC62R_Bits',0,24,120,3
	.word	104403
	.byte	10
	.byte	'_Ifx_CCU6_CC62SR_Bits',0,24,123,16,4,11
	.byte	'CCS',0,2
	.word	1013
	.byte	16,0,2,35,0,11
	.byte	'reserved_16',0,2
	.word	1013
	.byte	16,0,2,35,2,0,30
	.byte	'Ifx_CCU6_CC62SR_Bits',0,24,127,3
	.word	104496
	.byte	10
	.byte	'_Ifx_CCU6_CC63R_Bits',0,24,130,1,16,4,11
	.byte	'CCV',0,2
	.word	1013
	.byte	16,0,2,35,0,11
	.byte	'reserved_16',0,2
	.word	1013
	.byte	16,0,2,35,2,0,30
	.byte	'Ifx_CCU6_CC63R_Bits',0,24,134,1,3
	.word	104591
	.byte	10
	.byte	'_Ifx_CCU6_CC63SR_Bits',0,24,137,1,16,4,11
	.byte	'CCS',0,2
	.word	1013
	.byte	16,0,2,35,0,11
	.byte	'reserved_16',0,2
	.word	1013
	.byte	16,0,2,35,2,0,30
	.byte	'Ifx_CCU6_CC63SR_Bits',0,24,141,1,3
	.word	104686
	.byte	10
	.byte	'_Ifx_CCU6_CLC_Bits',0,24,144,1,16,4,11
	.byte	'DISR',0,1
	.word	462
	.byte	1,7,2,35,0,11
	.byte	'DISS',0,1
	.word	462
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	462
	.byte	1,5,2,35,0,11
	.byte	'EDIS',0,1
	.word	462
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,4
	.word	439
	.byte	28,0,2,35,0,0,30
	.byte	'Ifx_CCU6_CLC_Bits',0,24,151,1,3
	.word	104783
	.byte	10
	.byte	'_Ifx_CCU6_CMPMODIF_Bits',0,24,154,1,16,4,11
	.byte	'MCC60S',0,1
	.word	462
	.byte	1,7,2,35,0,11
	.byte	'MCC61S',0,1
	.word	462
	.byte	1,6,2,35,0,11
	.byte	'MCC62S',0,1
	.word	462
	.byte	1,5,2,35,0,11
	.byte	'reserved_3',0,1
	.word	462
	.byte	3,2,2,35,0,11
	.byte	'MCC63S',0,1
	.word	462
	.byte	1,1,2,35,0,11
	.byte	'reserved_7',0,1
	.word	462
	.byte	1,0,2,35,0,11
	.byte	'MCC60R',0,1
	.word	462
	.byte	1,7,2,35,1,11
	.byte	'MCC61R',0,1
	.word	462
	.byte	1,6,2,35,1,11
	.byte	'MCC62R',0,1
	.word	462
	.byte	1,5,2,35,1,11
	.byte	'reserved_11',0,1
	.word	462
	.byte	3,2,2,35,1,11
	.byte	'MCC63R',0,1
	.word	462
	.byte	1,1,2,35,1,11
	.byte	'reserved_15',0,4
	.word	439
	.byte	17,0,2,35,0,0,30
	.byte	'Ifx_CCU6_CMPMODIF_Bits',0,24,168,1,3
	.word	104928
	.byte	10
	.byte	'_Ifx_CCU6_CMPSTAT_Bits',0,24,171,1,16,4,11
	.byte	'CC60ST',0,1
	.word	462
	.byte	1,7,2,35,0,11
	.byte	'CC61ST',0,1
	.word	462
	.byte	1,6,2,35,0,11
	.byte	'CC62ST',0,1
	.word	462
	.byte	1,5,2,35,0,11
	.byte	'CCPOS60',0,1
	.word	462
	.byte	1,4,2,35,0,11
	.byte	'CCPOS61',0,1
	.word	462
	.byte	1,3,2,35,0,11
	.byte	'CCPOS62',0,1
	.word	462
	.byte	1,2,2,35,0,11
	.byte	'CC63ST',0,1
	.word	462
	.byte	1,1,2,35,0,11
	.byte	'reserved_7',0,1
	.word	462
	.byte	1,0,2,35,0,11
	.byte	'CC60PS',0,1
	.word	462
	.byte	1,7,2,35,1,11
	.byte	'COUT60PS',0,1
	.word	462
	.byte	1,6,2,35,1,11
	.byte	'CC61PS',0,1
	.word	462
	.byte	1,5,2,35,1,11
	.byte	'COUT61PS',0,1
	.word	462
	.byte	1,4,2,35,1,11
	.byte	'CC62PS',0,1
	.word	462
	.byte	1,3,2,35,1,11
	.byte	'COUT62PS',0,1
	.word	462
	.byte	1,2,2,35,1,11
	.byte	'COUT63PS',0,1
	.word	462
	.byte	1,1,2,35,1,11
	.byte	'T13IM',0,1
	.word	462
	.byte	1,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	1013
	.byte	16,0,2,35,2,0,30
	.byte	'Ifx_CCU6_CMPSTAT_Bits',0,24,190,1,3
	.word	105225
	.byte	10
	.byte	'_Ifx_CCU6_ID_Bits',0,24,193,1,16,4,11
	.byte	'MODREV',0,1
	.word	462
	.byte	8,0,2,35,0,11
	.byte	'MODNUMBER',0,1
	.word	462
	.byte	8,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	1013
	.byte	16,0,2,35,2,0,30
	.byte	'Ifx_CCU6_ID_Bits',0,24,198,1,3
	.word	105611
	.byte	10
	.byte	'_Ifx_CCU6_IEN_Bits',0,24,201,1,16,4,11
	.byte	'ENCC60R',0,1
	.word	462
	.byte	1,7,2,35,0,11
	.byte	'ENCC60F',0,1
	.word	462
	.byte	1,6,2,35,0,11
	.byte	'ENCC61R',0,1
	.word	462
	.byte	1,5,2,35,0,11
	.byte	'ENCC61F',0,1
	.word	462
	.byte	1,4,2,35,0,11
	.byte	'ENCC62R',0,1
	.word	462
	.byte	1,3,2,35,0,11
	.byte	'ENCC62F',0,1
	.word	462
	.byte	1,2,2,35,0,11
	.byte	'ENT12OM',0,1
	.word	462
	.byte	1,1,2,35,0,11
	.byte	'ENT12PM',0,1
	.word	462
	.byte	1,0,2,35,0,11
	.byte	'ENT13CM',0,1
	.word	462
	.byte	1,7,2,35,1,11
	.byte	'ENT13PM',0,1
	.word	462
	.byte	1,6,2,35,1,11
	.byte	'ENTRPF',0,1
	.word	462
	.byte	1,5,2,35,1,11
	.byte	'reserved_11',0,1
	.word	462
	.byte	1,4,2,35,1,11
	.byte	'ENCHE',0,1
	.word	462
	.byte	1,3,2,35,1,11
	.byte	'ENWHE',0,1
	.word	462
	.byte	1,2,2,35,1,11
	.byte	'ENIDLE',0,1
	.word	462
	.byte	1,1,2,35,1,11
	.byte	'ENSTR',0,1
	.word	462
	.byte	1,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	1013
	.byte	16,0,2,35,2,0,30
	.byte	'Ifx_CCU6_IEN_Bits',0,24,220,1,3
	.word	105724
	.byte	10
	.byte	'_Ifx_CCU6_IMON_Bits',0,24,223,1,16,4,11
	.byte	'LBE',0,1
	.word	462
	.byte	1,7,2,35,0,11
	.byte	'CCPOS0I',0,1
	.word	462
	.byte	1,6,2,35,0,11
	.byte	'CCPOS1I',0,1
	.word	462
	.byte	1,5,2,35,0,11
	.byte	'CCPOS2I',0,1
	.word	462
	.byte	1,4,2,35,0,11
	.byte	'CC60INI',0,1
	.word	462
	.byte	1,3,2,35,0,11
	.byte	'CC61INI',0,1
	.word	462
	.byte	1,2,2,35,0,11
	.byte	'CC62INI',0,1
	.word	462
	.byte	1,1,2,35,0,11
	.byte	'CTRAPI',0,1
	.word	462
	.byte	1,0,2,35,0,11
	.byte	'T12HRI',0,1
	.word	462
	.byte	1,7,2,35,1,11
	.byte	'T13HRI',0,1
	.word	462
	.byte	1,6,2,35,1,11
	.byte	'reserved_10',0,4
	.word	439
	.byte	22,0,2,35,0,0,30
	.byte	'Ifx_CCU6_IMON_Bits',0,24,236,1,3
	.word	106100
	.byte	10
	.byte	'_Ifx_CCU6_INP_Bits',0,24,239,1,16,4,11
	.byte	'INPCC60',0,1
	.word	462
	.byte	2,6,2,35,0,11
	.byte	'INPCC61',0,1
	.word	462
	.byte	2,4,2,35,0,11
	.byte	'INPCC62',0,1
	.word	462
	.byte	2,2,2,35,0,11
	.byte	'INPCHE',0,1
	.word	462
	.byte	2,0,2,35,0,11
	.byte	'INPERR',0,1
	.word	462
	.byte	2,6,2,35,1,11
	.byte	'INPT12',0,1
	.word	462
	.byte	2,4,2,35,1,11
	.byte	'INPT13',0,1
	.word	462
	.byte	2,2,2,35,1,11
	.byte	'reserved_14',0,4
	.word	439
	.byte	18,0,2,35,0,0,30
	.byte	'Ifx_CCU6_INP_Bits',0,24,249,1,3
	.word	106361
	.byte	10
	.byte	'_Ifx_CCU6_IS_Bits',0,24,252,1,16,4,11
	.byte	'ICC60R',0,1
	.word	462
	.byte	1,7,2,35,0,11
	.byte	'ICC60F',0,1
	.word	462
	.byte	1,6,2,35,0,11
	.byte	'ICC61R',0,1
	.word	462
	.byte	1,5,2,35,0,11
	.byte	'ICC61F',0,1
	.word	462
	.byte	1,4,2,35,0,11
	.byte	'ICC62R',0,1
	.word	462
	.byte	1,3,2,35,0,11
	.byte	'ICC62F',0,1
	.word	462
	.byte	1,2,2,35,0,11
	.byte	'T12OM',0,1
	.word	462
	.byte	1,1,2,35,0,11
	.byte	'T12PM',0,1
	.word	462
	.byte	1,0,2,35,0,11
	.byte	'T13CM',0,1
	.word	462
	.byte	1,7,2,35,1,11
	.byte	'T13PM',0,1
	.word	462
	.byte	1,6,2,35,1,11
	.byte	'TRPF',0,1
	.word	462
	.byte	1,5,2,35,1,11
	.byte	'TRPS',0,1
	.word	462
	.byte	1,4,2,35,1,11
	.byte	'CHE',0,1
	.word	462
	.byte	1,3,2,35,1,11
	.byte	'WHE',0,1
	.word	462
	.byte	1,2,2,35,1,11
	.byte	'IDLE',0,1
	.word	462
	.byte	1,1,2,35,1,11
	.byte	'STR',0,1
	.word	462
	.byte	1,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	1013
	.byte	16,0,2,35,2,0,30
	.byte	'Ifx_CCU6_IS_Bits',0,24,143,2,3
	.word	106566
	.byte	10
	.byte	'_Ifx_CCU6_ISR_Bits',0,24,146,2,16,4,11
	.byte	'RCC60R',0,1
	.word	462
	.byte	1,7,2,35,0,11
	.byte	'RCC60F',0,1
	.word	462
	.byte	1,6,2,35,0,11
	.byte	'RCC61R',0,1
	.word	462
	.byte	1,5,2,35,0,11
	.byte	'RCC61F',0,1
	.word	462
	.byte	1,4,2,35,0,11
	.byte	'RCC62R',0,1
	.word	462
	.byte	1,3,2,35,0,11
	.byte	'RCC62F',0,1
	.word	462
	.byte	1,2,2,35,0,11
	.byte	'RT12OM',0,1
	.word	462
	.byte	1,1,2,35,0,11
	.byte	'RT12PM',0,1
	.word	462
	.byte	1,0,2,35,0,11
	.byte	'RT13CM',0,1
	.word	462
	.byte	1,7,2,35,1,11
	.byte	'RT13PM',0,1
	.word	462
	.byte	1,6,2,35,1,11
	.byte	'RTRPF',0,1
	.word	462
	.byte	1,5,2,35,1,11
	.byte	'reserved_11',0,1
	.word	462
	.byte	1,4,2,35,1,11
	.byte	'RCHE',0,1
	.word	462
	.byte	1,3,2,35,1,11
	.byte	'RWHE',0,1
	.word	462
	.byte	1,2,2,35,1,11
	.byte	'RIDLE',0,1
	.word	462
	.byte	1,1,2,35,1,11
	.byte	'RSTR',0,1
	.word	462
	.byte	1,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	1013
	.byte	16,0,2,35,2,0,30
	.byte	'Ifx_CCU6_ISR_Bits',0,24,165,2,3
	.word	106909
	.byte	10
	.byte	'_Ifx_CCU6_ISS_Bits',0,24,168,2,16,4,11
	.byte	'SCC60R',0,1
	.word	462
	.byte	1,7,2,35,0,11
	.byte	'SCC60F',0,1
	.word	462
	.byte	1,6,2,35,0,11
	.byte	'SCC61R',0,1
	.word	462
	.byte	1,5,2,35,0,11
	.byte	'SCC61F',0,1
	.word	462
	.byte	1,4,2,35,0,11
	.byte	'SCC62R',0,1
	.word	462
	.byte	1,3,2,35,0,11
	.byte	'SCC62F',0,1
	.word	462
	.byte	1,2,2,35,0,11
	.byte	'ST12OM',0,1
	.word	462
	.byte	1,1,2,35,0,11
	.byte	'ST12PM',0,1
	.word	462
	.byte	1,0,2,35,0,11
	.byte	'ST13CM',0,1
	.word	462
	.byte	1,7,2,35,1,11
	.byte	'ST13PM',0,1
	.word	462
	.byte	1,6,2,35,1,11
	.byte	'STRPF',0,1
	.word	462
	.byte	1,5,2,35,1,11
	.byte	'SWHC',0,1
	.word	462
	.byte	1,4,2,35,1,11
	.byte	'SCHE',0,1
	.word	462
	.byte	1,3,2,35,1,11
	.byte	'SWHE',0,1
	.word	462
	.byte	1,2,2,35,1,11
	.byte	'SIDLE',0,1
	.word	462
	.byte	1,1,2,35,1,11
	.byte	'SSTR',0,1
	.word	462
	.byte	1,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	1013
	.byte	16,0,2,35,2,0,30
	.byte	'Ifx_CCU6_ISS_Bits',0,24,187,2,3
	.word	107270
	.byte	10
	.byte	'_Ifx_CCU6_KRST0_Bits',0,24,190,2,16,4,11
	.byte	'RST',0,1
	.word	462
	.byte	1,7,2,35,0,11
	.byte	'RSTSTAT',0,1
	.word	462
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,4
	.word	439
	.byte	30,0,2,35,0,0,30
	.byte	'Ifx_CCU6_KRST0_Bits',0,24,195,2,3
	.word	107624
	.byte	10
	.byte	'_Ifx_CCU6_KRST1_Bits',0,24,198,2,16,4,11
	.byte	'RST',0,1
	.word	462
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,4
	.word	439
	.byte	31,0,2,35,0,0,30
	.byte	'Ifx_CCU6_KRST1_Bits',0,24,202,2,3
	.word	107737
	.byte	10
	.byte	'_Ifx_CCU6_KRSTCLR_Bits',0,24,205,2,16,4,11
	.byte	'CLR',0,1
	.word	462
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,4
	.word	439
	.byte	31,0,2,35,0,0,30
	.byte	'Ifx_CCU6_KRSTCLR_Bits',0,24,209,2,3
	.word	107831
	.byte	10
	.byte	'_Ifx_CCU6_KSCSR_Bits',0,24,212,2,16,4,11
	.byte	'SB0',0,1
	.word	462
	.byte	1,7,2,35,0,11
	.byte	'SB1',0,1
	.word	462
	.byte	1,6,2,35,0,11
	.byte	'SB2',0,1
	.word	462
	.byte	1,5,2,35,0,11
	.byte	'SB3',0,1
	.word	462
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,4
	.word	439
	.byte	28,0,2,35,0,0,30
	.byte	'Ifx_CCU6_KSCSR_Bits',0,24,219,2,3
	.word	107929
	.byte	10
	.byte	'_Ifx_CCU6_LI_Bits',0,24,222,2,16,4,11
	.byte	'reserved_0',0,1
	.word	462
	.byte	1,7,2,35,0,11
	.byte	'CCPOS0EN',0,1
	.word	462
	.byte	1,6,2,35,0,11
	.byte	'CCPOS1EN',0,1
	.word	462
	.byte	1,5,2,35,0,11
	.byte	'CCPOS2EN',0,1
	.word	462
	.byte	1,4,2,35,0,11
	.byte	'CC60INEN',0,1
	.word	462
	.byte	1,3,2,35,0,11
	.byte	'CC61INEN',0,1
	.word	462
	.byte	1,2,2,35,0,11
	.byte	'CC62INEN',0,1
	.word	462
	.byte	1,1,2,35,0,11
	.byte	'CTRAPEN',0,1
	.word	462
	.byte	1,0,2,35,0,11
	.byte	'T12HREN',0,1
	.word	462
	.byte	1,7,2,35,1,11
	.byte	'T13HREN',0,1
	.word	462
	.byte	1,6,2,35,1,11
	.byte	'reserved_10',0,1
	.word	462
	.byte	3,3,2,35,1,11
	.byte	'LBEEN',0,1
	.word	462
	.byte	1,2,2,35,1,11
	.byte	'INPLBE',0,1
	.word	462
	.byte	2,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	1013
	.byte	16,0,2,35,2,0,30
	.byte	'Ifx_CCU6_LI_Bits',0,24,238,2,3
	.word	108068
	.byte	10
	.byte	'_Ifx_CCU6_MCFG_Bits',0,24,241,2,16,4,11
	.byte	'T12',0,1
	.word	462
	.byte	1,7,2,35,0,11
	.byte	'T13',0,1
	.word	462
	.byte	1,6,2,35,0,11
	.byte	'MCM',0,1
	.word	462
	.byte	1,5,2,35,0,11
	.byte	'reserved_3',0,4
	.word	439
	.byte	29,0,2,35,0,0,30
	.byte	'Ifx_CCU6_MCFG_Bits',0,24,247,2,3
	.word	108399
	.byte	10
	.byte	'_Ifx_CCU6_MCMCTR_Bits',0,24,250,2,16,4,11
	.byte	'SWSEL',0,1
	.word	462
	.byte	3,5,2,35,0,11
	.byte	'reserved_3',0,1
	.word	462
	.byte	1,4,2,35,0,11
	.byte	'SWSYN',0,1
	.word	462
	.byte	2,2,2,35,0,11
	.byte	'reserved_6',0,1
	.word	462
	.byte	2,0,2,35,0,11
	.byte	'STE12U',0,1
	.word	462
	.byte	1,7,2,35,1,11
	.byte	'STE12D',0,1
	.word	462
	.byte	1,6,2,35,1,11
	.byte	'STE13U',0,1
	.word	462
	.byte	1,5,2,35,1,11
	.byte	'reserved_11',0,4
	.word	439
	.byte	21,0,2,35,0,0,30
	.byte	'Ifx_CCU6_MCMCTR_Bits',0,24,132,3,3
	.word	108521
	.byte	10
	.byte	'_Ifx_CCU6_MCMOUT_Bits',0,24,135,3,16,4,11
	.byte	'MCMP',0,1
	.word	462
	.byte	6,2,2,35,0,11
	.byte	'R',0,1
	.word	462
	.byte	1,1,2,35,0,11
	.byte	'reserved_7',0,1
	.word	462
	.byte	1,0,2,35,0,11
	.byte	'EXPH',0,1
	.word	462
	.byte	3,5,2,35,1,11
	.byte	'CURH',0,1
	.word	462
	.byte	3,2,2,35,1,11
	.byte	'reserved_14',0,4
	.word	439
	.byte	18,0,2,35,0,0,30
	.byte	'Ifx_CCU6_MCMOUT_Bits',0,24,143,3,3
	.word	108735
	.byte	10
	.byte	'_Ifx_CCU6_MCMOUTS_Bits',0,24,146,3,16,4,11
	.byte	'MCMPS',0,1
	.word	462
	.byte	6,2,2,35,0,11
	.byte	'reserved_6',0,1
	.word	462
	.byte	1,1,2,35,0,11
	.byte	'STRMCM',0,1
	.word	462
	.byte	1,0,2,35,0,11
	.byte	'EXPHS',0,1
	.word	462
	.byte	3,5,2,35,1,11
	.byte	'CURHS',0,1
	.word	462
	.byte	3,2,2,35,1,11
	.byte	'reserved_14',0,1
	.word	462
	.byte	1,1,2,35,1,11
	.byte	'STRHP',0,1
	.word	462
	.byte	1,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	1013
	.byte	16,0,2,35,2,0,30
	.byte	'Ifx_CCU6_MCMOUTS_Bits',0,24,156,3,3
	.word	108900
	.byte	10
	.byte	'_Ifx_CCU6_MODCTR_Bits',0,24,159,3,16,4,11
	.byte	'T12MODEN',0,1
	.word	462
	.byte	6,2,2,35,0,11
	.byte	'reserved_6',0,1
	.word	462
	.byte	1,1,2,35,0,11
	.byte	'MCMEN',0,1
	.word	462
	.byte	1,0,2,35,0,11
	.byte	'T13MODEN',0,1
	.word	462
	.byte	6,2,2,35,1,11
	.byte	'reserved_14',0,1
	.word	462
	.byte	1,1,2,35,1,11
	.byte	'ECT13O',0,1
	.word	462
	.byte	1,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	1013
	.byte	16,0,2,35,2,0,30
	.byte	'Ifx_CCU6_MODCTR_Bits',0,24,168,3,3
	.word	109115
	.byte	10
	.byte	'_Ifx_CCU6_MOSEL_Bits',0,24,171,3,16,4,11
	.byte	'TRIG0SEL',0,1
	.word	462
	.byte	3,5,2,35,0,11
	.byte	'TRIG1SEL',0,1
	.word	462
	.byte	3,2,2,35,0,11
	.byte	'TRIG2SEL',0,2
	.word	1013
	.byte	3,7,2,35,0,11
	.byte	'reserved_9',0,4
	.word	439
	.byte	23,0,2,35,0,0,30
	.byte	'Ifx_CCU6_MOSEL_Bits',0,24,177,3,3
	.word	109317
	.byte	10
	.byte	'_Ifx_CCU6_OCS_Bits',0,24,180,3,16,4,11
	.byte	'TGS',0,1
	.word	462
	.byte	2,6,2,35,0,11
	.byte	'TGB',0,1
	.word	462
	.byte	1,5,2,35,0,11
	.byte	'TG_P',0,1
	.word	462
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,4
	.word	439
	.byte	20,8,2,35,0,11
	.byte	'SUS',0,1
	.word	462
	.byte	4,4,2,35,3,11
	.byte	'SUS_P',0,1
	.word	462
	.byte	1,3,2,35,3,11
	.byte	'SUSSTA',0,1
	.word	462
	.byte	1,2,2,35,3,11
	.byte	'reserved_30',0,1
	.word	462
	.byte	2,0,2,35,3,0,30
	.byte	'Ifx_CCU6_OCS_Bits',0,24,190,3,3
	.word	109456
	.byte	10
	.byte	'_Ifx_CCU6_PISEL0_Bits',0,24,193,3,16,4,11
	.byte	'ISCC60',0,1
	.word	462
	.byte	2,6,2,35,0,11
	.byte	'ISCC61',0,1
	.word	462
	.byte	2,4,2,35,0,11
	.byte	'ISCC62',0,1
	.word	462
	.byte	2,2,2,35,0,11
	.byte	'ISTRP',0,1
	.word	462
	.byte	2,0,2,35,0,11
	.byte	'ISPOS0',0,1
	.word	462
	.byte	2,6,2,35,1,11
	.byte	'ISPOS1',0,1
	.word	462
	.byte	2,4,2,35,1,11
	.byte	'ISPOS2',0,1
	.word	462
	.byte	2,2,2,35,1,11
	.byte	'IST12HR',0,1
	.word	462
	.byte	2,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	1013
	.byte	16,0,2,35,2,0,30
	.byte	'Ifx_CCU6_PISEL0_Bits',0,24,204,3,3
	.word	109650
	.byte	10
	.byte	'_Ifx_CCU6_PISEL2_Bits',0,24,207,3,16,4,11
	.byte	'IST13HR',0,1
	.word	462
	.byte	2,6,2,35,0,11
	.byte	'ISCNT12',0,1
	.word	462
	.byte	2,4,2,35,0,11
	.byte	'ISCNT13',0,1
	.word	462
	.byte	2,2,2,35,0,11
	.byte	'T12EXT',0,1
	.word	462
	.byte	1,1,2,35,0,11
	.byte	'T13EXT',0,1
	.word	462
	.byte	1,0,2,35,0,11
	.byte	'reserved_8',0,4
	.word	439
	.byte	24,0,2,35,0,0,30
	.byte	'Ifx_CCU6_PISEL2_Bits',0,24,215,3,3
	.word	109876
	.byte	10
	.byte	'_Ifx_CCU6_PSLR_Bits',0,24,218,3,16,4,11
	.byte	'PSL',0,1
	.word	462
	.byte	6,2,2,35,0,11
	.byte	'reserved_6',0,1
	.word	462
	.byte	1,1,2,35,0,11
	.byte	'PSL63',0,1
	.word	462
	.byte	1,0,2,35,0,11
	.byte	'reserved_8',0,4
	.word	439
	.byte	24,0,2,35,0,0,30
	.byte	'Ifx_CCU6_PSLR_Bits',0,24,224,3,3
	.word	110050
	.byte	10
	.byte	'_Ifx_CCU6_T12_Bits',0,24,227,3,16,4,11
	.byte	'T12CV',0,2
	.word	1013
	.byte	16,0,2,35,0,11
	.byte	'reserved_16',0,2
	.word	1013
	.byte	16,0,2,35,2,0,30
	.byte	'Ifx_CCU6_T12_Bits',0,24,231,3,3
	.word	110181
	.byte	10
	.byte	'_Ifx_CCU6_T12DTC_Bits',0,24,234,3,16,4,11
	.byte	'DTM',0,1
	.word	462
	.byte	8,0,2,35,0,11
	.byte	'DTE0',0,1
	.word	462
	.byte	1,7,2,35,1,11
	.byte	'DTE1',0,1
	.word	462
	.byte	1,6,2,35,1,11
	.byte	'DTE2',0,1
	.word	462
	.byte	1,5,2,35,1,11
	.byte	'reserved_11',0,1
	.word	462
	.byte	1,4,2,35,1,11
	.byte	'DTR0',0,1
	.word	462
	.byte	1,3,2,35,1,11
	.byte	'DTR1',0,1
	.word	462
	.byte	1,2,2,35,1,11
	.byte	'DTR2',0,1
	.word	462
	.byte	1,1,2,35,1,11
	.byte	'reserved_15',0,4
	.word	439
	.byte	17,0,2,35,0,0,30
	.byte	'Ifx_CCU6_T12DTC_Bits',0,24,245,3,3
	.word	110274
	.byte	10
	.byte	'_Ifx_CCU6_T12MSEL_Bits',0,24,248,3,16,4,11
	.byte	'MSEL60',0,1
	.word	462
	.byte	4,4,2,35,0,11
	.byte	'MSEL61',0,1
	.word	462
	.byte	4,0,2,35,0,11
	.byte	'MSEL62',0,1
	.word	462
	.byte	4,4,2,35,1,11
	.byte	'HSYNC',0,1
	.word	462
	.byte	3,1,2,35,1,11
	.byte	'DBYP',0,1
	.word	462
	.byte	1,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	1013
	.byte	16,0,2,35,2,0,30
	.byte	'Ifx_CCU6_T12MSEL_Bits',0,24,128,4,3
	.word	110490
	.byte	10
	.byte	'_Ifx_CCU6_T12PR_Bits',0,24,131,4,16,4,11
	.byte	'T12PV',0,2
	.word	1013
	.byte	16,0,2,35,0,11
	.byte	'reserved_16',0,2
	.word	1013
	.byte	16,0,2,35,2,0,30
	.byte	'Ifx_CCU6_T12PR_Bits',0,24,135,4,3
	.word	110661
	.byte	10
	.byte	'_Ifx_CCU6_T13_Bits',0,24,138,4,16,4,11
	.byte	'T13CV',0,2
	.word	1013
	.byte	16,0,2,35,0,11
	.byte	'reserved_16',0,2
	.word	1013
	.byte	16,0,2,35,2,0,30
	.byte	'Ifx_CCU6_T13_Bits',0,24,142,4,3
	.word	110758
	.byte	10
	.byte	'_Ifx_CCU6_T13PR_Bits',0,24,145,4,16,4,11
	.byte	'T13PV',0,2
	.word	1013
	.byte	16,0,2,35,0,11
	.byte	'reserved_16',0,2
	.word	1013
	.byte	16,0,2,35,2,0,30
	.byte	'Ifx_CCU6_T13PR_Bits',0,24,149,4,3
	.word	110851
	.byte	10
	.byte	'_Ifx_CCU6_TCTR0_Bits',0,24,152,4,16,4,11
	.byte	'T12CLK',0,1
	.word	462
	.byte	3,5,2,35,0,11
	.byte	'T12PRE',0,1
	.word	462
	.byte	1,4,2,35,0,11
	.byte	'T12R',0,1
	.word	462
	.byte	1,3,2,35,0,11
	.byte	'STE12',0,1
	.word	462
	.byte	1,2,2,35,0,11
	.byte	'CDIR',0,1
	.word	462
	.byte	1,1,2,35,0,11
	.byte	'CTM',0,1
	.word	462
	.byte	1,0,2,35,0,11
	.byte	'T13CLK',0,1
	.word	462
	.byte	3,5,2,35,1,11
	.byte	'T13PRE',0,1
	.word	462
	.byte	1,4,2,35,1,11
	.byte	'T13R',0,1
	.word	462
	.byte	1,3,2,35,1,11
	.byte	'STE13',0,1
	.word	462
	.byte	1,2,2,35,1,11
	.byte	'reserved_14',0,4
	.word	439
	.byte	18,0,2,35,0,0,30
	.byte	'Ifx_CCU6_TCTR0_Bits',0,24,165,4,3
	.word	110948
	.byte	10
	.byte	'_Ifx_CCU6_TCTR2_Bits',0,24,168,4,16,4,11
	.byte	'T12SSC',0,1
	.word	462
	.byte	1,7,2,35,0,11
	.byte	'T13SSC',0,1
	.word	462
	.byte	1,6,2,35,0,11
	.byte	'T13TEC',0,1
	.word	462
	.byte	3,3,2,35,0,11
	.byte	'T13TED',0,1
	.word	462
	.byte	2,1,2,35,0,11
	.byte	'reserved_7',0,1
	.word	462
	.byte	1,0,2,35,0,11
	.byte	'T12RSEL',0,1
	.word	462
	.byte	2,6,2,35,1,11
	.byte	'T13RSEL',0,1
	.word	462
	.byte	2,4,2,35,1,11
	.byte	'reserved_12',0,4
	.word	439
	.byte	20,0,2,35,0,0,30
	.byte	'Ifx_CCU6_TCTR2_Bits',0,24,178,4,3
	.word	111197
	.byte	10
	.byte	'_Ifx_CCU6_TCTR4_Bits',0,24,181,4,16,4,11
	.byte	'T12RR',0,1
	.word	462
	.byte	1,7,2,35,0,11
	.byte	'T12RS',0,1
	.word	462
	.byte	1,6,2,35,0,11
	.byte	'T12RES',0,1
	.word	462
	.byte	1,5,2,35,0,11
	.byte	'DTRES',0,1
	.word	462
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,1
	.word	462
	.byte	1,3,2,35,0,11
	.byte	'T12CNT',0,1
	.word	462
	.byte	1,2,2,35,0,11
	.byte	'T12STR',0,1
	.word	462
	.byte	1,1,2,35,0,11
	.byte	'T12STD',0,1
	.word	462
	.byte	1,0,2,35,0,11
	.byte	'T13RR',0,1
	.word	462
	.byte	1,7,2,35,1,11
	.byte	'T13RS',0,1
	.word	462
	.byte	1,6,2,35,1,11
	.byte	'T13RES',0,1
	.word	462
	.byte	1,5,2,35,1,11
	.byte	'reserved_11',0,1
	.word	462
	.byte	2,3,2,35,1,11
	.byte	'T13CNT',0,1
	.word	462
	.byte	1,2,2,35,1,11
	.byte	'T13STR',0,1
	.word	462
	.byte	1,1,2,35,1,11
	.byte	'T13STD',0,1
	.word	462
	.byte	1,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	1013
	.byte	16,0,2,35,2,0,30
	.byte	'Ifx_CCU6_TCTR4_Bits',0,24,199,4,3
	.word	111409
	.byte	10
	.byte	'_Ifx_CCU6_TRPCTR_Bits',0,24,202,4,16,4,11
	.byte	'TRPM0',0,1
	.word	462
	.byte	1,7,2,35,0,11
	.byte	'TRPM1',0,1
	.word	462
	.byte	1,6,2,35,0,11
	.byte	'TRPM2',0,1
	.word	462
	.byte	1,5,2,35,0,11
	.byte	'reserved_3',0,1
	.word	462
	.byte	5,0,2,35,0,11
	.byte	'TRPEN',0,1
	.word	462
	.byte	6,2,2,35,1,11
	.byte	'TRPEN13',0,1
	.word	462
	.byte	1,1,2,35,1,11
	.byte	'TRPPEN',0,1
	.word	462
	.byte	1,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	1013
	.byte	16,0,2,35,2,0,30
	.byte	'Ifx_CCU6_TRPCTR_Bits',0,24,212,4,3
	.word	111763
	.byte	12,24,220,4,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	103389
	.byte	4,2,35,0,0,30
	.byte	'Ifx_CCU6_ACCEN0',0,24,225,4,3
	.word	111972
	.byte	12,24,228,4,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	103948
	.byte	4,2,35,0,0,30
	.byte	'Ifx_CCU6_ACCEN1',0,24,233,4,3
	.word	112037
	.byte	12,24,236,4,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	104027
	.byte	4,2,35,0,0,30
	.byte	'Ifx_CCU6_CC60R',0,24,241,4,3
	.word	112102
	.byte	12,24,244,4,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	104120
	.byte	4,2,35,0,0,30
	.byte	'Ifx_CCU6_CC60SR',0,24,249,4,3
	.word	112166
	.byte	12,24,252,4,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	104215
	.byte	4,2,35,0,0,30
	.byte	'Ifx_CCU6_CC61R',0,24,129,5,3
	.word	112231
	.byte	12,24,132,5,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	104308
	.byte	4,2,35,0,0,30
	.byte	'Ifx_CCU6_CC61SR',0,24,137,5,3
	.word	112295
	.byte	12,24,140,5,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	104403
	.byte	4,2,35,0,0,30
	.byte	'Ifx_CCU6_CC62R',0,24,145,5,3
	.word	112360
	.byte	12,24,148,5,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	104496
	.byte	4,2,35,0,0,30
	.byte	'Ifx_CCU6_CC62SR',0,24,153,5,3
	.word	112424
	.byte	12,24,156,5,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	104591
	.byte	4,2,35,0,0,30
	.byte	'Ifx_CCU6_CC63R',0,24,161,5,3
	.word	112489
	.byte	12,24,164,5,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	104686
	.byte	4,2,35,0,0,30
	.byte	'Ifx_CCU6_CC63SR',0,24,169,5,3
	.word	112553
	.byte	12,24,172,5,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	104783
	.byte	4,2,35,0,0,30
	.byte	'Ifx_CCU6_CLC',0,24,177,5,3
	.word	112618
	.byte	12,24,180,5,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	104928
	.byte	4,2,35,0,0,30
	.byte	'Ifx_CCU6_CMPMODIF',0,24,185,5,3
	.word	112680
	.byte	12,24,188,5,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	105225
	.byte	4,2,35,0,0,30
	.byte	'Ifx_CCU6_CMPSTAT',0,24,193,5,3
	.word	112747
	.byte	12,24,196,5,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	105611
	.byte	4,2,35,0,0,30
	.byte	'Ifx_CCU6_ID',0,24,201,5,3
	.word	112813
	.byte	12,24,204,5,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	105724
	.byte	4,2,35,0,0,30
	.byte	'Ifx_CCU6_IEN',0,24,209,5,3
	.word	112874
	.byte	12,24,212,5,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	106100
	.byte	4,2,35,0,0,30
	.byte	'Ifx_CCU6_IMON',0,24,217,5,3
	.word	112936
	.byte	12,24,220,5,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	106361
	.byte	4,2,35,0,0,30
	.byte	'Ifx_CCU6_INP',0,24,225,5,3
	.word	112999
	.byte	12,24,228,5,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	106566
	.byte	4,2,35,0,0,30
	.byte	'Ifx_CCU6_IS',0,24,233,5,3
	.word	113061
	.byte	12,24,236,5,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	106909
	.byte	4,2,35,0,0,30
	.byte	'Ifx_CCU6_ISR',0,24,241,5,3
	.word	113122
	.byte	12,24,244,5,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	107270
	.byte	4,2,35,0,0,30
	.byte	'Ifx_CCU6_ISS',0,24,249,5,3
	.word	113184
	.byte	12,24,252,5,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	107624
	.byte	4,2,35,0,0,30
	.byte	'Ifx_CCU6_KRST0',0,24,129,6,3
	.word	113246
	.byte	12,24,132,6,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	107737
	.byte	4,2,35,0,0,30
	.byte	'Ifx_CCU6_KRST1',0,24,137,6,3
	.word	113310
	.byte	12,24,140,6,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	107831
	.byte	4,2,35,0,0,30
	.byte	'Ifx_CCU6_KRSTCLR',0,24,145,6,3
	.word	113374
	.byte	12,24,148,6,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	107929
	.byte	4,2,35,0,0,30
	.byte	'Ifx_CCU6_KSCSR',0,24,153,6,3
	.word	113440
	.byte	12,24,156,6,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	108068
	.byte	4,2,35,0,0,30
	.byte	'Ifx_CCU6_LI',0,24,161,6,3
	.word	113504
	.byte	12,24,164,6,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	108399
	.byte	4,2,35,0,0,30
	.byte	'Ifx_CCU6_MCFG',0,24,169,6,3
	.word	113565
	.byte	12,24,172,6,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	108521
	.byte	4,2,35,0,0,30
	.byte	'Ifx_CCU6_MCMCTR',0,24,177,6,3
	.word	113628
	.byte	12,24,180,6,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	108735
	.byte	4,2,35,0,0,30
	.byte	'Ifx_CCU6_MCMOUT',0,24,185,6,3
	.word	113693
	.byte	12,24,188,6,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	108900
	.byte	4,2,35,0,0,30
	.byte	'Ifx_CCU6_MCMOUTS',0,24,193,6,3
	.word	113758
	.byte	12,24,196,6,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	109115
	.byte	4,2,35,0,0,30
	.byte	'Ifx_CCU6_MODCTR',0,24,201,6,3
	.word	113824
	.byte	12,24,204,6,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	109317
	.byte	4,2,35,0,0,30
	.byte	'Ifx_CCU6_MOSEL',0,24,209,6,3
	.word	113889
	.byte	12,24,212,6,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	109456
	.byte	4,2,35,0,0,30
	.byte	'Ifx_CCU6_OCS',0,24,217,6,3
	.word	113953
	.byte	12,24,220,6,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	109650
	.byte	4,2,35,0,0,30
	.byte	'Ifx_CCU6_PISEL0',0,24,225,6,3
	.word	114015
	.byte	12,24,228,6,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	109876
	.byte	4,2,35,0,0,30
	.byte	'Ifx_CCU6_PISEL2',0,24,233,6,3
	.word	114080
	.byte	12,24,236,6,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	110050
	.byte	4,2,35,0,0,30
	.byte	'Ifx_CCU6_PSLR',0,24,241,6,3
	.word	114145
	.byte	12,24,244,6,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	110181
	.byte	4,2,35,0,0,30
	.byte	'Ifx_CCU6_T12',0,24,249,6,3
	.word	114208
	.byte	12,24,252,6,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	110274
	.byte	4,2,35,0,0,30
	.byte	'Ifx_CCU6_T12DTC',0,24,129,7,3
	.word	114270
	.byte	12,24,132,7,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	110490
	.byte	4,2,35,0,0,30
	.byte	'Ifx_CCU6_T12MSEL',0,24,137,7,3
	.word	114335
	.byte	12,24,140,7,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	110661
	.byte	4,2,35,0,0,30
	.byte	'Ifx_CCU6_T12PR',0,24,145,7,3
	.word	114401
	.byte	12,24,148,7,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	110758
	.byte	4,2,35,0,0,30
	.byte	'Ifx_CCU6_T13',0,24,153,7,3
	.word	114465
	.byte	12,24,156,7,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	110851
	.byte	4,2,35,0,0,30
	.byte	'Ifx_CCU6_T13PR',0,24,161,7,3
	.word	114527
	.byte	12,24,164,7,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	110948
	.byte	4,2,35,0,0,30
	.byte	'Ifx_CCU6_TCTR0',0,24,169,7,3
	.word	114591
	.byte	12,24,172,7,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	111197
	.byte	4,2,35,0,0,30
	.byte	'Ifx_CCU6_TCTR2',0,24,177,7,3
	.word	114655
	.byte	12,24,180,7,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	111409
	.byte	4,2,35,0,0,30
	.byte	'Ifx_CCU6_TCTR4',0,24,185,7,3
	.word	114719
	.byte	12,24,188,7,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	111763
	.byte	4,2,35,0,0,30
	.byte	'Ifx_CCU6_TRPCTR',0,24,193,7,3
	.word	114783
	.byte	17,11,90,9,1,18
	.byte	'IfxVadc_AnalogConverterMode_off',0,0,18
	.byte	'IfxVadc_AnalogConverterMode_slowStandby',0,1,18
	.byte	'IfxVadc_AnalogConverterMode_fastStandby',0,2,18
	.byte	'IfxVadc_AnalogConverterMode_normalOperation',0,3,0,30
	.byte	'IfxVadc_AnalogConverterMode',0,11,96,3
	.word	114848
	.byte	17,11,100,9,1,18
	.byte	'IfxVadc_ArbitrationRounds_4_slots',0,0,18
	.byte	'IfxVadc_ArbitrationRounds_8_slots',0,1,18
	.byte	'IfxVadc_ArbitrationRounds_16_slots',0,2,18
	.byte	'IfxVadc_ArbitrationRounds_20_slots',0,3,0,30
	.byte	'IfxVadc_ArbitrationRounds',0,11,106,3
	.word	115054
	.byte	17,11,110,9,1,18
	.byte	'IfxVadc_BoundaryExtension_standard',0,0,18
	.byte	'IfxVadc_BoundaryExtension_fastCompareResult1',0,1,18
	.byte	'IfxVadc_BoundaryExtension_fastCompareResult2',0,2,18
	.byte	'IfxVadc_BoundaryExtension_fastCompareResult3',0,3,18
	.byte	'IfxVadc_BoundaryExtension_fastCompareResult4',0,4,18
	.byte	'IfxVadc_BoundaryExtension_fastCompareResult5',0,5,18
	.byte	'IfxVadc_BoundaryExtension_fastCompareResult6',0,6,18
	.byte	'IfxVadc_BoundaryExtension_fastCompareResult7',0,7,18
	.byte	'IfxVadc_BoundaryExtension_fastCompareResult8',0,8,18
	.byte	'IfxVadc_BoundaryExtension_fastCompareResult9',0,9,18
	.byte	'IfxVadc_BoundaryExtension_fastCompareResult10',0,10,18
	.byte	'IfxVadc_BoundaryExtension_fastCompareResult11',0,11,18
	.byte	'IfxVadc_BoundaryExtension_fastCompareResult12',0,12,18
	.byte	'IfxVadc_BoundaryExtension_fastCompareResult13',0,13,18
	.byte	'IfxVadc_BoundaryExtension_fastCompareResult14',0,14,18
	.byte	'IfxVadc_BoundaryExtension_fastCompareResult15',0,15,0,30
	.byte	'IfxVadc_BoundaryExtension',0,11,128,1,3
	.word	115240
	.byte	17,11,132,1,9,1,18
	.byte	'IfxVadc_BoundarySelection_group0',0,0,18
	.byte	'IfxVadc_BoundarySelection_group1',0,1,18
	.byte	'IfxVadc_BoundarySelection_global0',0,2,18
	.byte	'IfxVadc_BoundarySelection_global1',0,3,0,30
	.byte	'IfxVadc_BoundarySelection',0,11,138,1,3
	.word	116029
	.byte	30
	.byte	'IfxVadc_ChannelId',0,11,161,1,3
	.word	28255
	.byte	17,11,165,1,9,1,18
	.byte	'IfxVadc_ChannelReference_standard',0,0,18
	.byte	'IfxVadc_ChannelReference_channel0',0,1,0,30
	.byte	'IfxVadc_ChannelReference',0,11,169,1,3
	.word	116240
	.byte	30
	.byte	'IfxVadc_ChannelResolution',0,11,179,1,3
	.word	31966
	.byte	17,11,183,1,9,1,18
	.byte	'IfxVadc_ChannelResult_0',0,0,18
	.byte	'IfxVadc_ChannelResult_1',0,1,18
	.byte	'IfxVadc_ChannelResult_2',0,2,18
	.byte	'IfxVadc_ChannelResult_3',0,3,18
	.byte	'IfxVadc_ChannelResult_4',0,4,18
	.byte	'IfxVadc_ChannelResult_5',0,5,18
	.byte	'IfxVadc_ChannelResult_6',0,6,18
	.byte	'IfxVadc_ChannelResult_7',0,7,18
	.byte	'IfxVadc_ChannelResult_8',0,8,18
	.byte	'IfxVadc_ChannelResult_9',0,9,18
	.byte	'IfxVadc_ChannelResult_10',0,10,18
	.byte	'IfxVadc_ChannelResult_11',0,11,18
	.byte	'IfxVadc_ChannelResult_12',0,12,18
	.byte	'IfxVadc_ChannelResult_13',0,13,18
	.byte	'IfxVadc_ChannelResult_14',0,14,18
	.byte	'IfxVadc_ChannelResult_15',0,15,0,30
	.byte	'IfxVadc_ChannelResult',0,11,201,1,3
	.word	116388
	.byte	30
	.byte	'IfxVadc_ChannelSelectionStyle',0,11,211,1,3
	.word	32695
	.byte	30
	.byte	'IfxVadc_ConversionType',0,11,218,1,3
	.word	31923
	.byte	30
	.byte	'IfxVadc_EmuxCodingScheme',0,11,227,1,3
	.word	32529
	.byte	17,11,231,1,9,1,18
	.byte	'IfxVadc_EmuxInterface_0',0,0,18
	.byte	'IfxVadc_EmuxInterface_1',0,1,0,30
	.byte	'IfxVadc_EmuxInterface',0,11,235,1,3
	.word	116953
	.byte	30
	.byte	'IfxVadc_EmuxSampleTimeControl',0,11,244,1,3
	.word	32602
	.byte	30
	.byte	'IfxVadc_EmuxSelectValue',0,11,131,2,3
	.word	32298
	.byte	30
	.byte	'IfxVadc_ExternalMultiplexerMode',0,11,142,2,3
	.word	32112
	.byte	17,11,146,2,9,1,18
	.byte	'IfxVadc_FifoMode_seperateResultRegister',0,0,18
	.byte	'IfxVadc_FifoMode_fifoStructure',0,1,18
	.byte	'IfxVadc_FifoMode_maximumMode',0,2,18
	.byte	'IfxVadc_FifoMode_minimumMode',0,3,0,30
	.byte	'IfxVadc_FifoMode',0,11,152,2,3
	.word	117156
	.byte	17,11,156,2,9,1,18
	.byte	'IfxVadc_GatingMode_disabled',0,0,18
	.byte	'IfxVadc_GatingMode_always',0,1,18
	.byte	'IfxVadc_GatingMode_gatingHigh',0,2,18
	.byte	'IfxVadc_GatingMode_gatingLow',0,3,0,30
	.byte	'IfxVadc_GatingMode',0,11,162,2,3
	.word	117326
	.byte	17,11,166,2,9,1,18
	.byte	'IfxVadc_GatingSource_0',0,0,18
	.byte	'IfxVadc_GatingSource_1',0,1,18
	.byte	'IfxVadc_GatingSource_2',0,2,18
	.byte	'IfxVadc_GatingSource_3',0,3,18
	.byte	'IfxVadc_GatingSource_4',0,4,18
	.byte	'IfxVadc_GatingSource_5',0,5,18
	.byte	'IfxVadc_GatingSource_6',0,6,18
	.byte	'IfxVadc_GatingSource_7',0,7,18
	.byte	'IfxVadc_GatingSource_8',0,8,18
	.byte	'IfxVadc_GatingSource_9',0,9,18
	.byte	'IfxVadc_GatingSource_10',0,10,18
	.byte	'IfxVadc_GatingSource_11',0,11,18
	.byte	'IfxVadc_GatingSource_12',0,12,18
	.byte	'IfxVadc_GatingSource_13',0,13,18
	.byte	'IfxVadc_GatingSource_14',0,14,18
	.byte	'IfxVadc_GatingSource_15',0,15,0,30
	.byte	'IfxVadc_GatingSource',0,11,184,2,3
	.word	117482
	.byte	30
	.byte	'IfxVadc_InputClasses',0,11,194,2,3
	.word	31794
	.byte	17,11,198,2,9,1,18
	.byte	'IfxVadc_LimitCheck_noCheck',0,0,18
	.byte	'IfxVadc_LimitCheck_eventIfInArea',0,1,18
	.byte	'IfxVadc_LimitCheck_eventIfOutsideArea',0,2,18
	.byte	'IfxVadc_LimitCheck_always',0,3,0,30
	.byte	'IfxVadc_LimitCheck',0,11,204,2,3
	.word	117955
	.byte	30
	.byte	'IfxVadc_LowSupplyVoltageSelect',0,11,212,2,3
	.word	31715
	.byte	30
	.byte	'IfxVadc_Protection',0,11,153,3,3
	.word	29056
	.byte	30
	.byte	'IfxVadc_RequestSlotPriority',0,11,163,3,3
	.word	28775
	.byte	30
	.byte	'IfxVadc_RequestSlotStartMode',0,11,171,3,3
	.word	28926
	.byte	30
	.byte	'IfxVadc_RequestSource',0,11,180,3,3
	.word	28645
	.byte	17,11,185,3,9,1,18
	.byte	'IfxVadc_SleepMode_enable',0,0,18
	.byte	'IfxVadc_SleepMode_disable',0,1,0,30
	.byte	'IfxVadc_SleepMode',0,11,189,3,3
	.word	118296
	.byte	30
	.byte	'IfxVadc_SrcNr',0,11,203,3,3
	.word	31520
	.byte	30
	.byte	'IfxVadc_Status',0,11,218,3,3
	.word	28028
	.byte	17,11,222,3,9,1,18
	.byte	'IfxVadc_TriggerMode_noExternalTrigger',0,0,18
	.byte	'IfxVadc_TriggerMode_uponFallingEdge',0,1,18
	.byte	'IfxVadc_TriggerMode_uponRisingEdge',0,2,18
	.byte	'IfxVadc_TriggerMode_uponAnyEdge',0,3,0,30
	.byte	'IfxVadc_TriggerMode',0,11,228,3,3
	.word	118432
	.byte	17,11,232,3,9,1,18
	.byte	'IfxVadc_TriggerSource_0',0,0,18
	.byte	'IfxVadc_TriggerSource_1',0,1,18
	.byte	'IfxVadc_TriggerSource_2',0,2,18
	.byte	'IfxVadc_TriggerSource_3',0,3,18
	.byte	'IfxVadc_TriggerSource_4',0,4,18
	.byte	'IfxVadc_TriggerSource_5',0,5,18
	.byte	'IfxVadc_TriggerSource_6',0,6,18
	.byte	'IfxVadc_TriggerSource_7',0,7,18
	.byte	'IfxVadc_TriggerSource_8',0,8,18
	.byte	'IfxVadc_TriggerSource_9',0,9,18
	.byte	'IfxVadc_TriggerSource_10',0,10,18
	.byte	'IfxVadc_TriggerSource_11',0,11,18
	.byte	'IfxVadc_TriggerSource_12',0,12,18
	.byte	'IfxVadc_TriggerSource_13',0,13,18
	.byte	'IfxVadc_TriggerSource_14',0,14,18
	.byte	'IfxVadc_TriggerSource_15',0,15,0,30
	.byte	'IfxVadc_TriggerSource',0,11,250,3,3
	.word	118617
	.byte	0
	.sdecl	'.debug_abbrev',debug
	.sect	'.debug_abbrev'
.L129:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,16,6,0,0,2,21,0,54,15,39,12,0,0,3,15,0,73,19,0,0,4,46,1,3,8,32,13
	.byte	58,15,59,15,57,15,54,15,39,12,0,0,5,5,0,3,8,58,15,59,15,57,15,73,19,0,0,6,11,0,0,0,7,36,0,3,8,11,15,62
	.byte	15,0,0,8,46,1,3,8,32,13,58,15,59,15,57,15,73,19,54,15,39,12,0,0,9,59,0,3,8,0,0,10,19,1,3,8,58,15,59,15
	.byte	57,15,11,15,0,0,11,13,0,3,8,11,15,73,19,13,15,12,15,56,9,0,0,12,23,1,58,15,59,15,57,15,11,15,0,0,13,13
	.byte	0,3,8,73,19,11,15,56,9,0,0,14,53,0,73,19,0,0,15,1,1,11,15,73,19,0,0,16,33,0,47,15,0,0,17,4,1,58,15,59
	.byte	15,57,15,11,15,0,0,18,40,0,3,8,28,13,0,0,19,11,1,0,0,20,13,0,73,19,11,15,56,9,0,0,21,38,0,73,19,0,0,22
	.byte	46,1,3,8,54,15,39,12,63,12,60,12,0,0,23,5,0,73,19,0,0,24,46,1,3,8,73,19,54,15,39,12,63,12,60,12,0,0,25
	.byte	5,0,3,8,73,19,0,0,26,46,1,49,19,0,0,27,5,0,49,19,0,0,28,46,1,3,8,58,15,59,15,57,15,54,15,39,12,63,12,60
	.byte	12,0,0,29,46,0,3,8,58,15,59,15,57,15,73,19,54,15,39,12,63,12,60,12,0,0,30,22,0,3,8,58,15,59,15,57,15,73
	.byte	19,0,0,31,21,0,54,15,0,0,32,52,0,3,8,58,15,59,15,57,15,73,19,63,12,60,12,0,0,33,19,1,58,15,59,15,57,15
	.byte	11,15,0,0,0
	.sdecl	'.debug_line',debug
	.sect	'.debug_line'
.L130:
	.word	.L534-.L533
.L533:
	.half	3
	.word	.L536-.L535
.L535:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1
	.byte	'E:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Cpu\\Std',0
	.byte	'E:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Src\\Std',0
	.byte	'E:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\Infra\\Sfr\\TC26B\\_Reg',0
	.byte	'E:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Scu\\Std',0
	.byte	'E:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Port\\Std',0
	.byte	'E:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\_Impl',0
	.byte	'E:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\_PinMap',0
	.byte	0
	.byte	'IfxCpu_IntrinsicsTasking.h',0,1,0,0
	.byte	'IfxCpu_Intrinsics.h',0,1,0,0
	.byte	'IfxSrc.h',0,2,0,0
	.byte	'IfxSrc_regdef.h',0,3,0,0
	.byte	'IfxScuWdt.h',0,4,0,0
	.byte	'IfxScu_regdef.h',0,3,0,0
	.byte	'IfxPort.h',0,5,0,0
	.byte	'IfxPort_regdef.h',0,3,0,0
	.byte	'IfxCpu.h',0,1,0,0
	.byte	'IfxCpu_cfg.h',0,6,0,0
	.byte	'..\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Vadc\\Std\\IfxVadc.h',0,0,0,0
	.byte	'IfxVadc_regdef.h',0,3,0,0
	.byte	'IfxScuCcu.h',0,4,0,0
	.byte	'IfxVadc_cfg.h',0,6,0,0
	.byte	'..\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Vadc\\Std\\IfxVadc.c',0,0,0,0
	.byte	'IfxSrc_cfg.h',0,6,0,0
	.byte	'Platform_Types.h',0,1,0,0
	.byte	'Ifx_Types.h',0,1,0,0
	.byte	'IfxScu_cfg.h',0,6,0,0
	.byte	'IfxVadc_PinMap.h',0,7,0,0
	.byte	'IfxCpu_regdef.h',0,3,0,0
	.byte	'IfxStm_regdef.h',0,3,0,0
	.byte	'IfxFlash_regdef.h',0,3,0,0
	.byte	'IfxCcu6_regdef.h',0,3,0,0,0
.L536:
.L534:
	.sdecl	'.debug_info',debug,cluster('IfxVadc_getBackgroundScanStatus')
	.sect	'.debug_info'
.L131:
	.word	281
	.half	3
	.word	.L132
	.byte	4,1
	.byte	'..\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Vadc\\Std\\IfxVadc.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'E:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\Debug\\',0,12,1
	.word	.L134,.L133
	.byte	2
	.word	.L127
	.byte	3
	.byte	'IfxVadc_getBackgroundScanStatus',0,1,201,1,16
	.word	.L261
	.byte	1,1,1
	.word	.L96,.L262,.L95
	.byte	4
	.byte	'vadc',0,1,201,1,58
	.word	.L263,.L264
	.byte	5
	.word	.L96,.L262
	.byte	6
	.byte	'i',0,1,204,1,20
	.word	.L265,.L266
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxVadc_getBackgroundScanStatus')
	.sect	'.debug_abbrev'
.L132:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxVadc_getBackgroundScanStatus')
	.sect	'.debug_line'
.L133:
	.word	.L538-.L537
.L537:
	.half	3
	.word	.L540-.L539
.L539:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Vadc\\Std\\IfxVadc.c',0,0,0,0,0
.L540:
	.byte	5,17,7,0,5,2
	.word	.L96
	.byte	3,207,1,1,5,43,9
	.half	.L541-.L96
	.byte	3,126,1,5,28,9
	.half	.L15-.L541
	.byte	3,2,1,5,9,9
	.half	.L542-.L15
	.byte	1,5,20,7,9
	.half	.L543-.L542
	.byte	3,2,1,5,1,3,9,1,5,46,7,9
	.half	.L16-.L543
	.byte	3,115,1,5,43,1,5,12,7,9
	.half	.L544-.L16
	.byte	3,12,1,5,1,3,1,1,7,9
	.half	.L135-.L544
	.byte	0,1,1
.L538:
	.sdecl	'.debug_ranges',debug,cluster('IfxVadc_getBackgroundScanStatus')
	.sect	'.debug_ranges'
.L134:
	.word	-1,.L96,0,.L135-.L96,0,0
	.sdecl	'.debug_info',debug,cluster('IfxVadc_getResultBasedOnRequestSource')
	.sect	'.debug_info'
.L136:
	.word	394
	.half	3
	.word	.L137
	.byte	4,1
	.byte	'..\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Vadc\\Std\\IfxVadc.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'E:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\Debug\\',0,12,1
	.word	.L139,.L138
	.byte	2
	.word	.L127
	.byte	3
	.byte	'IfxVadc_getResultBasedOnRequestSource',0,1,177,2,14
	.word	.L267
	.byte	1,1,1
	.word	.L102,.L268,.L101
	.byte	4
	.byte	'vadc',0,1,177,2,62
	.word	.L263,.L269
	.byte	4
	.byte	'group',0,1,177,2,80
	.word	.L270,.L271
	.byte	4
	.byte	'channel',0,1,177,2,105
	.word	.L272,.L273
	.byte	4
	.byte	'sourceType',0,1,177,2,136,1
	.word	.L274,.L275
	.byte	5
	.word	.L102,.L268
	.byte	6
	.byte	'sourceResultRegister',0,1,179,2,18
	.word	.L276,.L277
	.byte	6
	.byte	'tmpResult',0,1,180,2,18
	.word	.L267,.L278
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxVadc_getResultBasedOnRequestSource')
	.sect	'.debug_abbrev'
.L137:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxVadc_getResultBasedOnRequestSource')
	.sect	'.debug_line'
.L138:
	.word	.L546-.L545
.L545:
	.half	3
	.word	.L548-.L547
.L547:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Vadc\\Std\\IfxVadc.c',0,0,0,0,0
.L548:
	.byte	5,39,7,0,5,2
	.word	.L102
	.byte	3,178,2,1,5,10,9
	.half	.L476-.L102
	.byte	3,5,1,7,9
	.half	.L549-.L476
	.byte	3,4,1,7,9
	.half	.L550-.L549
	.byte	3,4,1,7,9
	.half	.L551-.L550
	.byte	1,5,47,9
	.half	.L35-.L551
	.byte	3,121,1,5,9,9
	.half	.L477-.L35
	.byte	3,1,1,5,47,9
	.half	.L36-.L477
	.byte	3,3,1,5,9,9
	.half	.L478-.L36
	.byte	3,1,1,5,47,9
	.half	.L37-.L478
	.byte	3,3,1,5,5,9
	.half	.L38-.L37
	.byte	3,4,1,5,13,7,9
	.half	.L552-.L38
	.byte	3,8,1,5,78,7,9
	.half	.L553-.L552
	.byte	1,5,89,9
	.half	.L554-.L553
	.byte	1,5,97,9
	.half	.L479-.L554
	.byte	1,5,49,7,9
	.half	.L555-.L479
	.byte	3,2,1,5,32,9
	.half	.L480-.L555
	.byte	1,5,49,3,1,1,5,32,9
	.half	.L556-.L480
	.byte	1,5,49,3,1,1,5,32,9
	.half	.L557-.L556
	.byte	1,5,49,3,1,1,5,32,9
	.half	.L558-.L557
	.byte	1,5,49,3,1,1,5,32,9
	.half	.L559-.L558
	.byte	1,5,49,3,1,1,5,32,9
	.half	.L560-.L559
	.byte	1,5,49,3,1,1,5,32,9
	.half	.L561-.L560
	.byte	1,5,1,3,11,1,5,50,7,9
	.half	.L43-.L561
	.byte	3,123,1,5,61,9
	.half	.L562-.L43
	.byte	1,5,37,9
	.half	.L42-.L562
	.byte	1,5,69,9
	.half	.L563-.L42
	.byte	1,5,1,9
	.half	.L481-.L563
	.byte	3,5,1,7,9
	.half	.L140-.L481
	.byte	0,1,1
.L546:
	.sdecl	'.debug_ranges',debug,cluster('IfxVadc_getResultBasedOnRequestSource')
	.sect	'.debug_ranges'
.L139:
	.word	-1,.L102,0,.L140-.L102,0,0
	.sdecl	'.debug_info',debug,cluster('IfxVadc_getScanStatus')
	.sect	'.debug_info'
.L141:
	.word	256
	.half	3
	.word	.L142
	.byte	4,1
	.byte	'..\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Vadc\\Std\\IfxVadc.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'E:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\Debug\\',0,12,1
	.word	.L144,.L143
	.byte	2
	.word	.L127
	.byte	3
	.byte	'IfxVadc_getScanStatus',0,1,227,2,16
	.word	.L261
	.byte	1,1,1
	.word	.L104,.L279,.L103
	.byte	4
	.byte	'group',0,1,227,2,50
	.word	.L270,.L280
	.byte	5
	.word	.L104,.L279
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxVadc_getScanStatus')
	.sect	'.debug_abbrev'
.L142:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxVadc_getScanStatus')
	.sect	'.debug_line'
.L143:
	.word	.L565-.L564
.L564:
	.half	3
	.word	.L567-.L566
.L566:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Vadc\\Std\\IfxVadc.c',0,0,0,0,0
.L567:
	.byte	5,21,7,0,5,2
	.word	.L104
	.byte	3,230,2,1,5,16,9
	.half	.L568-.L104
	.byte	3,2,1,5,1,9
	.half	.L569-.L568
	.byte	3,6,1,7,9
	.half	.L145-.L569
	.byte	0,1,1
.L565:
	.sdecl	'.debug_ranges',debug,cluster('IfxVadc_getScanStatus')
	.sect	'.debug_ranges'
.L144:
	.word	-1,.L104,0,.L145-.L104,0,0
	.sdecl	'.debug_info',debug,cluster('IfxVadc_setScan')
	.sect	'.debug_info'
.L146:
	.word	286
	.half	3
	.word	.L147
	.byte	4,1
	.byte	'..\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Vadc\\Std\\IfxVadc.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'E:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\Debug\\',0,12,1
	.word	.L149,.L148
	.byte	2
	.word	.L127
	.byte	3
	.byte	'IfxVadc_setScan',0,1,170,4,6,1,1,1
	.word	.L124,.L281,.L123
	.byte	4
	.byte	'group',0,1,170,4,34
	.word	.L270,.L282
	.byte	4
	.byte	'channels',0,1,170,4,48
	.word	.L283,.L284
	.byte	4
	.byte	'mask',0,1,170,4,65
	.word	.L283,.L285
	.byte	5
	.word	.L124,.L281
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxVadc_setScan')
	.sect	'.debug_abbrev'
.L147:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxVadc_setScan')
	.sect	'.debug_line'
.L148:
	.word	.L571-.L570
.L570:
	.half	3
	.word	.L573-.L572
.L572:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Vadc\\Std\\IfxVadc.c',0,0,0,0,0
.L573:
	.byte	5,40,7,0,5,2
	.word	.L124
	.byte	3,173,4,1,5,35,1,5,40,9
	.half	.L574-.L124
	.byte	1,5,38,9
	.half	.L575-.L574
	.byte	1,5,59,9
	.half	.L576-.L575
	.byte	1,5,47,9
	.half	.L528-.L576
	.byte	1,5,20,1,5,1,9
	.half	.L577-.L528
	.byte	3,1,1,7,9
	.half	.L150-.L577
	.byte	0,1,1
.L571:
	.sdecl	'.debug_ranges',debug,cluster('IfxVadc_setScan')
	.sect	'.debug_ranges'
.L149:
	.word	-1,.L124,0,.L150-.L124,0,0
	.sdecl	'.debug_info',debug,cluster('IfxVadc_getQueueStatus')
	.sect	'.debug_info'
.L151:
	.word	257
	.half	3
	.word	.L152
	.byte	4,1
	.byte	'..\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Vadc\\Std\\IfxVadc.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'E:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\Debug\\',0,12,1
	.word	.L154,.L153
	.byte	2
	.word	.L127
	.byte	3
	.byte	'IfxVadc_getQueueStatus',0,1,159,2,16
	.word	.L261
	.byte	1,1,1
	.word	.L100,.L286,.L99
	.byte	4
	.byte	'group',0,1,159,2,51
	.word	.L270,.L287
	.byte	5
	.word	.L100,.L286
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxVadc_getQueueStatus')
	.sect	'.debug_abbrev'
.L152:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxVadc_getQueueStatus')
	.sect	'.debug_line'
.L153:
	.word	.L579-.L578
.L578:
	.half	3
	.word	.L581-.L580
.L580:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Vadc\\Std\\IfxVadc.c',0,0,0,0,0
.L581:
	.byte	5,29,7,0,5,2
	.word	.L100
	.byte	3,163,2,1,5,13,9
	.half	.L582-.L100
	.byte	1,5,1,9
	.half	.L583-.L582
	.byte	3,10,1,7,9
	.half	.L155-.L583
	.byte	0,1,1
.L579:
	.sdecl	'.debug_ranges',debug,cluster('IfxVadc_getQueueStatus')
	.sect	'.debug_ranges'
.L154:
	.word	-1,.L100,0,.L155-.L100,0,0
	.sdecl	'.debug_info',debug,cluster('IfxVadc_getAdcAnalogFrequency')
	.sect	'.debug_info'
.L156:
	.word	263
	.half	3
	.word	.L157
	.byte	4,1
	.byte	'..\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Vadc\\Std\\IfxVadc.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'E:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\Debug\\',0,12,1
	.word	.L159,.L158
	.byte	2
	.word	.L127
	.byte	3
	.byte	'IfxVadc_getAdcAnalogFrequency',0,1,183,1,9
	.word	.L288
	.byte	1,1,1
	.word	.L90,.L289,.L89
	.byte	4
	.byte	'vadc',0,1,183,1,49
	.word	.L263,.L290
	.byte	5
	.word	.L90,.L289
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxVadc_getAdcAnalogFrequency')
	.sect	'.debug_abbrev'
.L157:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxVadc_getAdcAnalogFrequency')
	.sect	'.debug_line'
.L158:
	.word	.L585-.L584
.L584:
	.half	3
	.word	.L587-.L586
.L586:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Vadc\\Std\\IfxVadc.c',0,0,0,0,0
.L587:
	.byte	5,9,7,0,5,2
	.word	.L90
	.byte	3,182,1,1,5,37,9
	.half	.L459-.L90
	.byte	3,2,1,5,63,9
	.half	.L458-.L459
	.byte	1,5,46,9
	.half	.L588-.L458
	.byte	1,5,40,9
	.half	.L589-.L588
	.byte	1,5,1,3,1,1,7,9
	.half	.L160-.L589
	.byte	0,1,1
.L585:
	.sdecl	'.debug_ranges',debug,cluster('IfxVadc_getAdcAnalogFrequency')
	.sect	'.debug_ranges'
.L159:
	.word	-1,.L90,0,.L160-.L90,0,0
	.sdecl	'.debug_info',debug,cluster('IfxVadc_getAdcDigitalFrequency')
	.sect	'.debug_info'
.L161:
	.word	264
	.half	3
	.word	.L162
	.byte	4,1
	.byte	'..\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Vadc\\Std\\IfxVadc.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'E:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\Debug\\',0,12,1
	.word	.L164,.L163
	.byte	2
	.word	.L127
	.byte	3
	.byte	'IfxVadc_getAdcDigitalFrequency',0,1,189,1,9
	.word	.L288
	.byte	1,1,1
	.word	.L92,.L291,.L91
	.byte	4
	.byte	'vadc',0,1,189,1,50
	.word	.L263,.L292
	.byte	5
	.word	.L92,.L291
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxVadc_getAdcDigitalFrequency')
	.sect	'.debug_abbrev'
.L162:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxVadc_getAdcDigitalFrequency')
	.sect	'.debug_line'
.L163:
	.word	.L591-.L590
.L590:
	.half	3
	.word	.L593-.L592
.L592:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Vadc\\Std\\IfxVadc.c',0,0,0,0,0
.L593:
	.byte	5,9,7,0,5,2
	.word	.L92
	.byte	3,188,1,1,5,37,9
	.half	.L461-.L92
	.byte	3,2,1,5,63,9
	.half	.L460-.L461
	.byte	1,5,46,9
	.half	.L594-.L460
	.byte	1,5,40,9
	.half	.L595-.L594
	.byte	1,5,1,3,1,1,7,9
	.half	.L165-.L595
	.byte	0,1,1
.L591:
	.sdecl	'.debug_ranges',debug,cluster('IfxVadc_getAdcDigitalFrequency')
	.sect	'.debug_ranges'
.L164:
	.word	-1,.L92,0,.L165-.L92,0,0
	.sdecl	'.debug_info',debug,cluster('IfxVadc_setArbiterPriority')
	.sect	'.debug_info'
.L166:
	.word	337
	.half	3
	.word	.L167
	.byte	4,1
	.byte	'..\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Vadc\\Std\\IfxVadc.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'E:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\Debug\\',0,12,1
	.word	.L169,.L168
	.byte	2
	.word	.L127
	.byte	3
	.byte	'IfxVadc_setArbiterPriority',0,1,146,4,6,1,1,1
	.word	.L122,.L293,.L121
	.byte	4
	.byte	'vadcG',0,1,146,4,45
	.word	.L270,.L294
	.byte	4
	.byte	'slotEnable',0,1,146,4,60
	.word	.L265,.L295
	.byte	4
	.byte	'prio',0,1,146,4,100
	.word	.L296,.L297
	.byte	4
	.byte	'mode',0,1,146,4,135,1
	.word	.L298,.L299
	.byte	4
	.byte	'slot',0,1,146,4,163,1
	.word	.L274,.L300
	.byte	5
	.word	.L122,.L293
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxVadc_setArbiterPriority')
	.sect	'.debug_abbrev'
.L167:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxVadc_setArbiterPriority')
	.sect	'.debug_line'
.L168:
	.word	.L597-.L596
.L596:
	.half	3
	.word	.L599-.L598
.L598:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Vadc\\Std\\IfxVadc.c',0,0,0,0,0
.L599:
	.byte	5,69,7,0,5,2
	.word	.L122
	.byte	3,149,4,1,5,5,9
	.half	.L600-.L122
	.byte	3,126,1,5,38,7,9
	.half	.L601-.L600
	.byte	3,2,1,5,21,1,5,60,9
	.half	.L527-.L601
	.byte	3,1,1,5,24,9
	.half	.L526-.L527
	.byte	3,127,1,5,29,9
	.half	.L602-.L526
	.byte	3,1,1,5,21,9
	.half	.L603-.L602
	.byte	1,5,56,9
	.half	.L604-.L603
	.byte	1,5,27,9
	.half	.L605-.L604
	.byte	1,5,24,9
	.half	.L606-.L605
	.byte	1,5,31,9
	.half	.L607-.L606
	.byte	3,5,1,5,21,9
	.half	.L608-.L607
	.byte	3,124,1,5,33,9
	.half	.L609-.L608
	.byte	1,5,66,9
	.half	.L525-.L609
	.byte	3,4,1,5,24,9
	.half	.L610-.L525
	.byte	3,124,1,5,36,9
	.half	.L611-.L610
	.byte	3,4,1,5,9,9
	.half	.L612-.L611
	.byte	3,126,1,5,25,7,9
	.half	.L613-.L612
	.byte	3,2,1,5,28,9
	.half	.L614-.L613
	.byte	1,5,80,1,5,25,9
	.half	.L69-.L614
	.byte	3,4,1,5,31,9
	.half	.L615-.L69
	.byte	1,5,28,9
	.half	.L616-.L615
	.byte	1,5,9,3,126,1,5,29,9
	.half	.L68-.L616
	.byte	3,7,1,5,21,1,5,56,9
	.half	.L617-.L68
	.byte	1,5,27,9
	.half	.L618-.L617
	.byte	1,5,24,9
	.half	.L619-.L618
	.byte	1,5,1,9
	.half	.L620-.L619
	.byte	3,2,1,7,9
	.half	.L170-.L620
	.byte	0,1,1
.L597:
	.sdecl	'.debug_ranges',debug,cluster('IfxVadc_setArbiterPriority')
	.sect	'.debug_ranges'
.L169:
	.word	-1,.L122,0,.L170-.L122,0,0
	.sdecl	'.debug_info',debug,cluster('IfxVadc_disableAccess')
	.sect	'.debug_info'
.L171:
	.word	291
	.half	3
	.word	.L172
	.byte	4,1
	.byte	'..\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Vadc\\Std\\IfxVadc.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'E:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\Debug\\',0,12,1
	.word	.L174,.L173
	.byte	2
	.word	.L127
	.byte	3
	.byte	'IfxVadc_disableAccess',0,1,74,6,1,1,1
	.word	.L78,.L301,.L77
	.byte	4
	.byte	'vadc',0,1,74,38
	.word	.L263,.L302
	.byte	4
	.byte	'protectionSet',0,1,74,63
	.word	.L303,.L304
	.byte	5
	.word	.L305
	.byte	6
	.byte	'passwd',0,1,76,12
	.word	.L306,.L307
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxVadc_disableAccess')
	.sect	'.debug_abbrev'
.L172:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,85,6,0,0,6,52,0,3,8,58
	.byte	15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxVadc_disableAccess')
	.sect	'.debug_line'
.L173:
	.word	.L622-.L621
.L621:
	.half	3
	.word	.L624-.L623
.L623:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Vadc\\Std\\IfxVadc.c',0,0,0,0,0
.L624:
	.byte	5,6,7,0,5,2
	.word	.L78
	.byte	3,201,0,1,5,56,9
	.half	.L430-.L78
	.byte	3,2,1,5,19,9
	.half	.L429-.L430
	.byte	1,5,34,9
	.half	.L433-.L429
	.byte	3,1,1,5,25,9
	.half	.L432-.L433
	.byte	3,2,1,5,5,9
	.half	.L625-.L432
	.byte	1,5,30,7,9
	.half	.L626-.L625
	.byte	3,2,1,5,23,1,5,41,9
	.half	.L627-.L626
	.byte	1,5,26,9
	.half	.L628-.L627
	.byte	1,5,58,9
	.half	.L629-.L628
	.byte	1,5,23,9
	.half	.L2-.L629
	.byte	3,4,1,5,26,9
	.half	.L431-.L2
	.byte	1,5,32,9
	.half	.L3-.L431
	.byte	3,3,1,5,1,9
	.half	.L175-.L3
	.byte	3,1,0,1,1
.L622:
	.sdecl	'.debug_ranges',debug,cluster('IfxVadc_disableAccess')
	.sect	'.debug_ranges'
.L174:
	.word	-1,.L78,0,.L175-.L78,0,0
.L305:
	.word	-1,.L78,0,.L301-.L78,-1,.L80,0,.L260-.L80,0,0
	.sdecl	'.debug_info',debug,cluster('IfxVadc_disablePostCalibration')
	.sect	'.debug_info'
.L176:
	.word	320
	.half	3
	.word	.L177
	.byte	4,1
	.byte	'..\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Vadc\\Std\\IfxVadc.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'E:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\Debug\\',0,12,1
	.word	.L179,.L178
	.byte	2
	.word	.L127
	.byte	3
	.byte	'IfxVadc_disablePostCalibration',0,1,92,6,1,1,1
	.word	.L82,.L308,.L81
	.byte	4
	.byte	'vadc',0,1,92,47
	.word	.L263,.L309
	.byte	4
	.byte	'group',0,1,92,69
	.word	.L310,.L311
	.byte	4
	.byte	'disable',0,1,92,84
	.word	.L265,.L312
	.byte	5
	.word	.L82,.L308
	.byte	6
	.word	.L313
	.byte	7
	.byte	'mask',0,1,98,16
	.word	.L283,.L315
	.byte	0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxVadc_disablePostCalibration')
	.sect	'.debug_abbrev'
.L177:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,11,1,85
	.byte	6,0,0,7,52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxVadc_disablePostCalibration')
	.sect	'.debug_line'
.L178:
	.word	.L631-.L630
.L630:
	.half	3
	.word	.L633-.L632
.L632:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Vadc\\Std\\IfxVadc.c',0,0,0,0,0
.L633:
	.byte	5,6,7,0,5,2
	.word	.L82
	.byte	3,219,0,1,5,5,9
	.half	.L435-.L82
	.byte	3,2,1,5,36,7,9
	.half	.L634-.L435
	.byte	3,2,1,5,23,9
	.half	.L314-.L634
	.byte	3,2,1,5,57,9
	.half	.L635-.L314
	.byte	1,5,25,9
	.half	.L636-.L635
	.byte	1,5,9,9
	.half	.L437-.L636
	.byte	3,2,1,5,26,7,9
	.half	.L637-.L437
	.byte	3,2,1,5,29,9
	.half	.L436-.L637
	.byte	1,5,36,1,5,1,9
	.half	.L4-.L436
	.byte	3,9,1,5,32,7,9
	.half	.L5-.L4
	.byte	3,123,1,5,26,1,5,32,9
	.half	.L438-.L5
	.byte	1,5,29,9
	.half	.L439-.L438
	.byte	1,5,37,9
	.half	.L638-.L439
	.byte	3,3,1,5,1,9
	.half	.L180-.L638
	.byte	3,2,0,1,1
.L631:
	.sdecl	'.debug_ranges',debug,cluster('IfxVadc_disablePostCalibration')
	.sect	'.debug_ranges'
.L179:
	.word	-1,.L82,0,.L180-.L82,0,0
.L313:
	.word	-1,.L82,.L314-.L82,.L4-.L82,.L5-.L82,.L308-.L82,-1,.L84,0,.L255-.L84,0,0
	.sdecl	'.debug_info',debug,cluster('IfxVadc_enableAccess')
	.sect	'.debug_info'
.L181:
	.word	294
	.half	3
	.word	.L182
	.byte	4,1
	.byte	'..\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Vadc\\Std\\IfxVadc.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'E:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\Debug\\',0,12,1
	.word	.L184,.L183
	.byte	2
	.word	.L127
	.byte	3
	.byte	'IfxVadc_enableAccess',0,1,114,6,1,1,1
	.word	.L86,.L316,.L85
	.byte	4
	.byte	'vadc',0,1,114,37
	.word	.L263,.L317
	.byte	4
	.byte	'protectionSet',0,1,114,62
	.word	.L303,.L318
	.byte	5
	.word	.L86,.L316
	.byte	6
	.byte	'passwd',0,1,116,12
	.word	.L306,.L319
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxVadc_enableAccess')
	.sect	'.debug_abbrev'
.L182:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3
	.byte	8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxVadc_enableAccess')
	.sect	'.debug_line'
.L183:
	.word	.L640-.L639
.L639:
	.half	3
	.word	.L642-.L641
.L641:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Vadc\\Std\\IfxVadc.c',0,0,0,0,0
.L642:
	.byte	5,6,7,0,5,2
	.word	.L86
	.byte	3,241,0,1,5,56,9
	.half	.L446-.L86
	.byte	3,2,1,5,19,9
	.half	.L443-.L446
	.byte	1,5,34,9
	.half	.L445-.L443
	.byte	3,1,1,5,25,9
	.half	.L444-.L445
	.byte	3,2,1,5,5,9
	.half	.L643-.L444
	.byte	1,5,31,7,9
	.half	.L644-.L643
	.byte	3,2,1,5,23,1,5,42,9
	.half	.L645-.L644
	.byte	1,5,29,9
	.half	.L646-.L645
	.byte	1,5,26,9
	.half	.L647-.L646
	.byte	1,5,59,9
	.half	.L648-.L647
	.byte	1,5,23,9
	.half	.L7-.L648
	.byte	3,4,1,5,29,9
	.half	.L649-.L7
	.byte	1,5,26,9
	.half	.L650-.L649
	.byte	1,5,32,9
	.half	.L8-.L650
	.byte	3,3,1,5,1,9
	.half	.L185-.L8
	.byte	3,1,0,1,1
.L640:
	.sdecl	'.debug_ranges',debug,cluster('IfxVadc_enableAccess')
	.sect	'.debug_ranges'
.L184:
	.word	-1,.L86,0,.L185-.L86,0,0
	.sdecl	'.debug_info',debug,cluster('IfxVadc_enableGroupSync')
	.sect	'.debug_info'
.L186:
	.word	330
	.half	3
	.word	.L187
	.byte	4,1
	.byte	'..\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Vadc\\Std\\IfxVadc.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'E:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\Debug\\',0,12,1
	.word	.L189,.L188
	.byte	2
	.word	.L127
	.byte	3
	.byte	'IfxVadc_enableGroupSync',0,1,132,1,6,1,1,1
	.word	.L88,.L320,.L87
	.byte	4
	.byte	'vadc',0,1,132,1,40
	.word	.L263,.L321
	.byte	4
	.byte	'ccu6Num',0,1,132,1,53
	.word	.L283,.L322
	.byte	5
	.word	.L88,.L320
	.byte	6
	.byte	'passwd',0,1,134,1,12
	.word	.L306,.L323
	.byte	5
	.word	.L324,.L325
	.byte	6
	.byte	'vadcGlobCfg',0,1,139,1,26
	.word	.L326,.L327
	.byte	0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxVadc_enableGroupSync')
	.sect	'.debug_abbrev'
.L187:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3
	.byte	8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxVadc_enableGroupSync')
	.sect	'.debug_line'
.L188:
	.word	.L652-.L651
.L651:
	.half	3
	.word	.L654-.L653
.L653:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Vadc\\Std\\IfxVadc.c',0,0,0,0,0
.L654:
	.byte	5,6,7,0,5,2
	.word	.L88
	.byte	3,131,1,1,5,53,9
	.half	.L453-.L88
	.byte	3,2,1,5,19,9
	.half	.L448-.L453
	.byte	1,5,31,9
	.half	.L452-.L448
	.byte	3,1,1,5,44,9
	.half	.L324-.L452
	.byte	3,5,1,5,29,9
	.half	.L455-.L324
	.byte	3,1,1,9
	.half	.L655-.L455
	.byte	3,1,1,5,36,3,2,1,5,25,9
	.half	.L450-.L655
	.byte	3,1,1,5,37,9
	.half	.L656-.L450
	.byte	3,1,1,5,5,9
	.half	.L325-.L656
	.byte	3,3,1,5,21,7,9
	.half	.L657-.L325
	.byte	3,3,1,5,22,9
	.half	.L658-.L657
	.byte	3,2,1,5,34,9
	.half	.L451-.L658
	.byte	3,3,1,5,32,9
	.half	.L659-.L451
	.byte	1,9
	.half	.L660-.L659
	.byte	3,1,1,5,23,9
	.half	.L661-.L660
	.byte	3,1,1,5,32,9
	.half	.L662-.L661
	.byte	1,5,67,9
	.half	.L663-.L662
	.byte	3,1,1,5,32,1,5,22,9
	.half	.L664-.L663
	.byte	3,1,1,5,32,9
	.half	.L665-.L664
	.byte	1,5,35,3,124,1,5,10,9
	.half	.L9-.L665
	.byte	3,6,1,5,23,7,9
	.half	.L666-.L9
	.byte	3,3,1,5,21,1,9
	.half	.L456-.L666
	.byte	3,1,1,5,22,9
	.half	.L667-.L456
	.byte	3,2,1,5,34,9
	.half	.L668-.L667
	.byte	3,3,1,5,32,9
	.half	.L669-.L668
	.byte	1,9
	.half	.L670-.L669
	.byte	3,1,1,5,23,9
	.half	.L671-.L670
	.byte	3,1,1,5,32,9
	.half	.L672-.L671
	.byte	1,5,67,9
	.half	.L673-.L672
	.byte	3,1,1,5,32,1,5,22,9
	.half	.L674-.L673
	.byte	3,1,1,5,32,9
	.half	.L675-.L674
	.byte	1,5,29,9
	.half	.L11-.L675
	.byte	3,3,1,5,1,9
	.half	.L190-.L11
	.byte	3,1,0,1,1
.L652:
	.sdecl	'.debug_ranges',debug,cluster('IfxVadc_enableGroupSync')
	.sect	'.debug_ranges'
.L189:
	.word	-1,.L88,0,.L190-.L88,0,0
	.sdecl	'.debug_info',debug,cluster('IfxVadc_getAdcModuleFrequency')
	.sect	'.debug_info'
.L191:
	.word	245
	.half	3
	.word	.L192
	.byte	4,1
	.byte	'..\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Vadc\\Std\\IfxVadc.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'E:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\Debug\\',0,12,1
	.word	.L194,.L193
	.byte	2
	.word	.L127
	.byte	3
	.byte	'IfxVadc_getAdcModuleFrequency',0,1,195,1,9
	.word	.L288
	.byte	1,1,1
	.word	.L94,.L328,.L93
	.byte	4
	.word	.L94,.L328
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxVadc_getAdcModuleFrequency')
	.sect	'.debug_abbrev'
.L192:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxVadc_getAdcModuleFrequency')
	.sect	'.debug_line'
.L193:
	.word	.L677-.L676
.L676:
	.half	3
	.word	.L679-.L678
.L678:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Vadc\\Std\\IfxVadc.c',0,0,0,0,0
.L679:
	.byte	5,37,7,0,5,2
	.word	.L94
	.byte	3,196,1,1,5,1,7,9
	.half	.L195-.L94
	.byte	3,1,0,1,1
.L677:
	.sdecl	'.debug_ranges',debug,cluster('IfxVadc_getAdcModuleFrequency')
	.sect	'.debug_ranges'
.L194:
	.word	-1,.L94,0,.L195-.L94,0,0
	.sdecl	'.debug_info',debug,cluster('IfxVadc_getSrcAddress')
	.sect	'.debug_info'
.L196:
	.word	275
	.half	3
	.word	.L197
	.byte	4,1
	.byte	'..\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Vadc\\Std\\IfxVadc.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'E:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\Debug\\',0,12,1
	.word	.L199,.L198
	.byte	2
	.word	.L127
	.byte	3
	.byte	'IfxVadc_getSrcAddress',0,1,242,2,24
	.word	.L329
	.byte	1,1,1
	.word	.L106,.L330,.L105
	.byte	4
	.byte	'group',0,1,242,2,62
	.word	.L310,.L331
	.byte	4
	.byte	'index',0,1,242,2,83
	.word	.L332,.L333
	.byte	5
	.word	.L106,.L330
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxVadc_getSrcAddress')
	.sect	'.debug_abbrev'
.L197:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxVadc_getSrcAddress')
	.sect	'.debug_line'
.L198:
	.word	.L681-.L680
.L680:
	.half	3
	.word	.L683-.L682
.L682:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Vadc\\Std\\IfxVadc.c',0,0,0,0,0
.L683:
	.byte	5,5,7,0,5,2
	.word	.L106
	.byte	3,245,2,1,5,15,7,9
	.half	.L684-.L106
	.byte	3,2,1,5,20,9
	.half	.L685-.L684
	.byte	3,2,1,5,27,9
	.half	.L686-.L685
	.byte	1,5,54,9
	.half	.L50-.L686
	.byte	3,14,1,5,28,1,5,65,9
	.half	.L482-.L50
	.byte	1,5,28,1,5,52,9
	.half	.L483-.L482
	.byte	1,5,18,9
	.half	.L687-.L483
	.byte	3,2,1,5,1,9
	.half	.L688-.L687
	.byte	3,1,1,7,9
	.half	.L200-.L688
	.byte	0,1,1
.L681:
	.sdecl	'.debug_ranges',debug,cluster('IfxVadc_getSrcAddress')
	.sect	'.debug_ranges'
.L199:
	.word	-1,.L106,0,.L200-.L106,0,0
	.sdecl	'.debug_info',debug,cluster('IfxVadc_initialiseAdcArbiterClock')
	.sect	'.debug_info'
.L201:
	.word	322
	.half	3
	.word	.L202
	.byte	4,1
	.byte	'..\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Vadc\\Std\\IfxVadc.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'E:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\Debug\\',0,12,1
	.word	.L204,.L203
	.byte	2
	.word	.L127
	.byte	3
	.byte	'IfxVadc_initialiseAdcArbiterClock',0,1,142,3,6,1,1,1
	.word	.L108,.L334,.L107
	.byte	4
	.byte	'vadc',0,1,142,3,50
	.word	.L263,.L335
	.byte	4
	.byte	'arbiterClockDivider',0,1,142,3,63
	.word	.L283,.L336
	.byte	5
	.word	.L108,.L334
	.byte	6
	.byte	'tempGLOBCFG',0,1,144,3,22
	.word	.L326,.L337
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxVadc_initialiseAdcArbiterClock')
	.sect	'.debug_abbrev'
.L202:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3
	.byte	8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxVadc_initialiseAdcArbiterClock')
	.sect	'.debug_line'
.L203:
	.word	.L690-.L689
.L689:
	.half	3
	.word	.L692-.L691
.L691:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Vadc\\Std\\IfxVadc.c',0,0,0,0,0
.L692:
	.byte	5,6,7,0,5,2
	.word	.L108
	.byte	3,141,3,1,5,40,9
	.half	.L487-.L108
	.byte	3,3,1,5,18,9
	.half	.L486-.L487
	.byte	3,1,1,5,25,9
	.half	.L693-.L486
	.byte	1,5,32,9
	.half	.L694-.L693
	.byte	3,2,1,5,25,9
	.half	.L484-.L694
	.byte	3,127,1,5,32,9
	.half	.L695-.L484
	.byte	3,1,1,5,25,9
	.half	.L485-.L695
	.byte	3,1,1,5,33,9
	.half	.L696-.L485
	.byte	3,1,1,5,1,9
	.half	.L205-.L696
	.byte	3,1,0,1,1
.L690:
	.sdecl	'.debug_ranges',debug,cluster('IfxVadc_initialiseAdcArbiterClock')
	.sect	'.debug_ranges'
.L204:
	.word	-1,.L108,0,.L205-.L108,0,0
	.sdecl	'.debug_info',debug,cluster('IfxVadc_initialiseAdcConverterClock')
	.sect	'.debug_info'
.L206:
	.word	326
	.half	3
	.word	.L207
	.byte	4,1
	.byte	'..\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Vadc\\Std\\IfxVadc.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'E:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\Debug\\',0,12,1
	.word	.L209,.L208
	.byte	2
	.word	.L127
	.byte	3
	.byte	'IfxVadc_initialiseAdcConverterClock',0,1,154,3,6,1,1,1
	.word	.L110,.L338,.L109
	.byte	4
	.byte	'vadc',0,1,154,3,52
	.word	.L263,.L339
	.byte	4
	.byte	'converterClockDivider',0,1,154,3,65
	.word	.L283,.L340
	.byte	5
	.word	.L110,.L338
	.byte	6
	.byte	'tempGLOBCFG',0,1,156,3,22
	.word	.L326,.L341
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxVadc_initialiseAdcConverterClock')
	.sect	'.debug_abbrev'
.L207:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3
	.byte	8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxVadc_initialiseAdcConverterClock')
	.sect	'.debug_line'
.L208:
	.word	.L698-.L697
.L697:
	.half	3
	.word	.L700-.L699
.L699:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Vadc\\Std\\IfxVadc.c',0,0,0,0,0
.L700:
	.byte	5,6,7,0,5,2
	.word	.L110
	.byte	3,153,3,1,5,40,9
	.half	.L492-.L110
	.byte	3,3,1,5,25,9
	.half	.L491-.L492
	.byte	3,1,1,5,32,9
	.half	.L701-.L491
	.byte	3,2,1,5,25,9
	.half	.L489-.L701
	.byte	3,127,1,5,32,3,1,1,5,25,9
	.half	.L490-.L489
	.byte	3,1,1,5,33,9
	.half	.L702-.L490
	.byte	3,1,1,5,1,9
	.half	.L210-.L702
	.byte	3,1,0,1,1
.L698:
	.sdecl	'.debug_ranges',debug,cluster('IfxVadc_initialiseAdcConverterClock')
	.sect	'.debug_ranges'
.L209:
	.word	-1,.L110,0,.L210-.L110,0,0
	.sdecl	'.debug_info',debug,cluster('IfxVadc_initializeFAdcD')
	.sect	'.debug_info'
.L211:
	.word	313
	.half	3
	.word	.L212
	.byte	4,1
	.byte	'..\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Vadc\\Std\\IfxVadc.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'E:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\Debug\\',0,12,1
	.word	.L214,.L213
	.byte	2
	.word	.L127
	.byte	3
	.byte	'IfxVadc_initializeFAdcD',0,1,166,3,8
	.word	.L283
	.byte	1,1,1
	.word	.L112,.L342,.L111
	.byte	4
	.byte	'vadc',0,1,166,3,42
	.word	.L263,.L343
	.byte	4
	.byte	'fAdcD',0,1,166,3,55
	.word	.L283,.L344
	.byte	5
	.word	.L112,.L342
	.byte	6
	.byte	'divD',0,1,168,3,12
	.word	.L283,.L345
	.byte	6
	.byte	'fadc',0,1,170,3,12
	.word	.L283,.L346
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxVadc_initializeFAdcD')
	.sect	'.debug_abbrev'
.L212:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxVadc_initializeFAdcD')
	.sect	'.debug_line'
.L213:
	.word	.L704-.L703
.L703:
	.half	3
	.word	.L706-.L705
.L705:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Vadc\\Std\\IfxVadc.c',0,0,0,0,0
.L706:
	.byte	5,8,7,0,5,2
	.word	.L112
	.byte	3,165,3,1,5,44,9
	.half	.L495-.L112
	.byte	3,4,1,5,20,9
	.half	.L497-.L495
	.byte	3,2,1,5,28,9
	.half	.L707-.L497
	.byte	1,5,20,9
	.half	.L496-.L707
	.byte	3,2,1,5,45,3,3,1,5,27,9
	.half	.L500-.L496
	.byte	3,127,1,5,19,9
	.half	.L499-.L500
	.byte	1,5,1,3,3,1,7,9
	.half	.L215-.L499
	.byte	0,1,1
.L704:
	.sdecl	'.debug_ranges',debug,cluster('IfxVadc_initializeFAdcD')
	.sect	'.debug_ranges'
.L214:
	.word	-1,.L112,0,.L215-.L112,0,0
	.sdecl	'.debug_info',debug,cluster('IfxVadc_initializeFAdcI')
	.sect	'.debug_info'
.L216:
	.word	333
	.half	3
	.word	.L217
	.byte	4,1
	.byte	'..\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Vadc\\Std\\IfxVadc.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'E:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\Debug\\',0,12,1
	.word	.L219,.L218
	.byte	2
	.word	.L127
	.byte	3
	.byte	'IfxVadc_initializeFAdcI',0,1,182,3,8
	.word	.L283
	.byte	1,1,1
	.word	.L114,.L347,.L113
	.byte	4
	.byte	'vadc',0,1,182,3,42
	.word	.L263,.L348
	.byte	4
	.byte	'fAdcI',0,1,182,3,55
	.word	.L283,.L349
	.byte	5
	.word	.L114,.L347
	.byte	6
	.byte	'divA',0,1,184,3,12
	.word	.L283,.L350
	.byte	6
	.byte	'result',0,1,185,3,12
	.word	.L283,.L351
	.byte	6
	.byte	'fadc',0,1,186,3,12
	.word	.L283,.L352
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxVadc_initializeFAdcI')
	.sect	'.debug_abbrev'
.L217:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxVadc_initializeFAdcI')
	.sect	'.debug_line'
.L218:
	.word	.L709-.L708
.L708:
	.half	3
	.word	.L711-.L710
.L710:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Vadc\\Std\\IfxVadc.c',0,0,0,0,0
.L711:
	.byte	5,8,7,0,5,2
	.word	.L114
	.byte	3,181,3,1,5,44,9
	.half	.L502-.L114
	.byte	3,4,1,5,20,9
	.half	.L504-.L502
	.byte	3,3,1,5,26,9
	.half	.L712-.L504
	.byte	1,5,20,9
	.half	.L713-.L712
	.byte	3,2,1,5,25,9
	.half	.L503-.L713
	.byte	1,5,26,9
	.half	.L714-.L503
	.byte	3,1,1,5,20,9
	.half	.L715-.L714
	.byte	1,5,27,9
	.half	.L506-.L715
	.byte	3,1,1,5,19,9
	.half	.L716-.L506
	.byte	1,5,18,9
	.half	.L507-.L716
	.byte	3,2,1,5,5,9
	.half	.L717-.L507
	.byte	1,5,24,7,9
	.half	.L718-.L717
	.byte	3,2,1,5,31,9
	.half	.L719-.L718
	.byte	3,2,1,5,23,9
	.half	.L720-.L719
	.byte	1,5,16,9
	.half	.L505-.L720
	.byte	1,5,22,9
	.half	.L53-.L505
	.byte	3,7,1,5,56,9
	.half	.L721-.L53
	.byte	1,5,66,9
	.half	.L722-.L721
	.byte	1,5,63,9
	.half	.L723-.L722
	.byte	1,5,16,7,9
	.half	.L724-.L723
	.byte	3,2,1,5,19,1,5,51,9
	.half	.L54-.L724
	.byte	3,4,1,5,5,9
	.half	.L55-.L54
	.byte	3,3,1,5,1,3,1,1,7,9
	.half	.L220-.L55
	.byte	0,1,1
.L709:
	.sdecl	'.debug_ranges',debug,cluster('IfxVadc_initializeFAdcI')
	.sect	'.debug_ranges'
.L219:
	.word	-1,.L114,0,.L220-.L114,0,0
	.sdecl	'.debug_info',debug,cluster('IfxVadc_isPostCalibration')
	.sect	'.debug_info'
.L221:
	.word	302
	.half	3
	.word	.L222
	.byte	4,1
	.byte	'..\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Vadc\\Std\\IfxVadc.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'E:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\Debug\\',0,12,1
	.word	.L224,.L223
	.byte	2
	.word	.L127
	.byte	3
	.byte	'IfxVadc_isPostCalibration',0,1,219,3,9
	.word	.L265
	.byte	1,1,1
	.word	.L116,.L353,.L115
	.byte	4
	.byte	'vadc',0,1,219,3,45
	.word	.L263,.L354
	.byte	4
	.byte	'group',0,1,219,3,67
	.word	.L310,.L355
	.byte	5
	.word	.L116,.L353
	.byte	6
	.byte	'pcEnabled',0,1,221,3,13
	.word	.L265,.L356
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxVadc_isPostCalibration')
	.sect	'.debug_abbrev'
.L222:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxVadc_isPostCalibration')
	.sect	'.debug_line'
.L223:
	.word	.L726-.L725
.L725:
	.half	3
	.word	.L728-.L727
.L727:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Vadc\\Std\\IfxVadc.c',0,0,0,0,0
.L728:
	.byte	5,10,7,0,5,2
	.word	.L116
	.byte	3,224,3,1,7,9
	.half	.L729-.L116
	.byte	3,2,1,7,9
	.half	.L730-.L729
	.byte	3,2,1,7,9
	.half	.L731-.L730
	.byte	3,2,1,7,9
	.half	.L732-.L731
	.byte	1,5,56,9
	.half	.L57-.L732
	.byte	3,122,1,5,9,9
	.half	.L733-.L57
	.byte	3,1,1,5,56,9
	.half	.L58-.L733
	.byte	3,1,1,5,9,9
	.half	.L734-.L58
	.byte	3,1,1,5,56,9
	.half	.L59-.L734
	.byte	3,1,1,5,9,9
	.half	.L735-.L59
	.byte	3,1,1,5,56,9
	.half	.L60-.L735
	.byte	3,1,1,5,64,9
	.half	.L62-.L60
	.byte	1,5,1,3,7,1,5,39,7,9
	.half	.L61-.L62
	.byte	3,123,1,5,1,3,5,1,7,9
	.half	.L225-.L61
	.byte	0,1,1
.L726:
	.sdecl	'.debug_ranges',debug,cluster('IfxVadc_isPostCalibration')
	.sect	'.debug_ranges'
.L224:
	.word	-1,.L116,0,.L225-.L116,0,0
	.sdecl	'.debug_info',debug,cluster('IfxVadc_resetKernel')
	.sect	'.debug_info'
.L226:
	.word	270
	.half	3
	.word	.L227
	.byte	4,1
	.byte	'..\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Vadc\\Std\\IfxVadc.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'E:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\Debug\\',0,12,1
	.word	.L229,.L228
	.byte	2
	.word	.L127
	.byte	3
	.byte	'IfxVadc_resetKernel',0,1,241,3,6,1,1,1
	.word	.L118,.L357,.L117
	.byte	4
	.byte	'vadc',0,1,241,3,36
	.word	.L263,.L358
	.byte	5
	.word	.L118,.L357
	.byte	6
	.byte	'passwd',0,1,243,3,12
	.word	.L306,.L359
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxVadc_resetKernel')
	.sect	'.debug_abbrev'
.L227:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3
	.byte	8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxVadc_resetKernel')
	.sect	'.debug_line'
.L228:
	.word	.L737-.L736
.L736:
	.half	3
	.word	.L739-.L738
.L738:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Vadc\\Std\\IfxVadc.c',0,0,0,0,0
.L739:
	.byte	5,6,7,0,5,2
	.word	.L118
	.byte	3,240,3,1,5,53,9
	.half	.L510-.L118
	.byte	3,2,1,5,19,9
	.half	.L509-.L510
	.byte	1,5,31,9
	.half	.L512-.L509
	.byte	3,2,1,5,32,9
	.half	.L511-.L512
	.byte	3,1,1,5,18,9
	.half	.L515-.L511
	.byte	3,1,1,5,29,9
	.half	.L740-.L515
	.byte	3,2,1,5,23,9
	.half	.L516-.L740
	.byte	3,126,1,5,18,9
	.half	.L741-.L516
	.byte	3,1,1,5,23,9
	.half	.L742-.L741
	.byte	1,5,29,9
	.half	.L743-.L742
	.byte	3,1,1,5,25,9
	.half	.L67-.L743
	.byte	3,2,1,5,38,9
	.half	.L744-.L67
	.byte	1,5,31,7,9
	.half	.L745-.L744
	.byte	3,4,1,5,20,9
	.half	.L746-.L745
	.byte	3,1,1,5,25,9
	.half	.L747-.L746
	.byte	1,5,33,9
	.half	.L514-.L747
	.byte	3,1,1,5,29,9
	.half	.L518-.L514
	.byte	3,1,1,5,1,9
	.half	.L230-.L518
	.byte	3,1,0,1,1
.L737:
	.sdecl	'.debug_ranges',debug,cluster('IfxVadc_resetKernel')
	.sect	'.debug_ranges'
.L229:
	.word	-1,.L118,0,.L230-.L118,0,0
	.sdecl	'.debug_info',debug,cluster('IfxVadc_selectPowerSupplyVoltage')
	.sect	'.debug_info'
.L231:
	.word	315
	.half	3
	.word	.L232
	.byte	4,1
	.byte	'..\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Vadc\\Std\\IfxVadc.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'E:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\Debug\\',0,12,1
	.word	.L234,.L233
	.byte	2
	.word	.L127
	.byte	3
	.byte	'IfxVadc_selectPowerSupplyVoltage',0,1,134,4,6,1,1,1
	.word	.L120,.L360,.L119
	.byte	4
	.byte	'vadc',0,1,134,4,49
	.word	.L263,.L361
	.byte	4
	.byte	'supplyVoltage',0,1,134,4,86
	.word	.L362,.L363
	.byte	5
	.word	.L120,.L360
	.byte	6
	.byte	'tempGLOBCFG',0,1,136,4,22
	.word	.L326,.L364
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxVadc_selectPowerSupplyVoltage')
	.sect	'.debug_abbrev'
.L232:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3
	.byte	8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxVadc_selectPowerSupplyVoltage')
	.sect	'.debug_line'
.L233:
	.word	.L749-.L748
.L748:
	.half	3
	.word	.L751-.L750
.L750:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Vadc\\Std\\IfxVadc.c',0,0,0,0,0
.L751:
	.byte	5,6,7,0,5,2
	.word	.L120
	.byte	3,133,4,1,5,40,9
	.half	.L523-.L120
	.byte	3,3,1,5,18,9
	.half	.L522-.L523
	.byte	3,1,1,5,25,9
	.half	.L752-.L522
	.byte	1,5,32,9
	.half	.L753-.L752
	.byte	3,2,1,5,25,9
	.half	.L520-.L753
	.byte	3,127,1,5,32,9
	.half	.L754-.L520
	.byte	3,1,1,5,25,9
	.half	.L521-.L754
	.byte	3,1,1,5,33,9
	.half	.L755-.L521
	.byte	3,1,1,5,1,9
	.half	.L235-.L755
	.byte	3,1,0,1,1
.L749:
	.sdecl	'.debug_ranges',debug,cluster('IfxVadc_selectPowerSupplyVoltage')
	.sect	'.debug_ranges'
.L234:
	.word	-1,.L120,0,.L235-.L120,0,0
	.sdecl	'.debug_info',debug,cluster('IfxVadc_startupCalibration')
	.sect	'.debug_info'
.L236:
	.word	419
	.half	3
	.word	.L237
	.byte	4,1
	.byte	'..\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Vadc\\Std\\IfxVadc.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'E:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\Debug\\',0,12,1
	.word	.L239,.L238
	.byte	2
	.word	.L127
	.byte	3
	.byte	'IfxVadc_startupCalibration',0,1,178,4,6,1,1,1
	.word	.L126,.L365,.L125
	.byte	4
	.byte	'vadc',0,1,178,4,43
	.word	.L263,.L366
	.byte	5
	.word	.L126,.L365
	.byte	6
	.byte	'calibrationRunning',0,1,180,4,13
	.word	.L265,.L367
	.byte	6
	.byte	'adcCalGroupNum',0,1,181,4,13
	.word	.L265,.L368
	.byte	7
	.word	.L369,.L370,.L371
	.byte	8
	.word	.L372,.L373
	.byte	9
	.word	.L374,.L370,.L371
	.byte	0,7
	.word	.L375,.L73,.L376
	.byte	8
	.word	.L377,.L378
	.byte	8
	.word	.L379,.L380
	.byte	10
	.word	.L381,.L73,.L376
	.byte	6
	.byte	'status',0,2,185,14,11
	.word	.L265,.L382
	.byte	0,0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxVadc_startupCalibration')
	.sect	'.debug_abbrev'
.L237:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3
	.byte	8,58,15,59,15,57,15,73,16,2,6,0,0,7,29,1,49,16,17,1,18,1,0,0,8,5,0,49,16,2,6,0,0,9,11,0,49,16,17,1,18
	.byte	1,0,0,10,11,1,49,16,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxVadc_startupCalibration')
	.sect	'.debug_line'
.L238:
	.word	.L757-.L756
.L756:
	.half	3
	.word	.L759-.L758
.L758:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Vadc\\Std\\IfxVadc.c',0,0,0,0
	.byte	'..\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Vadc\\Std\\IfxVadc.h',0,0,0,0,0
.L759:
	.byte	5,6,7,0,5,2
	.word	.L126
	.byte	3,177,4,1,5,32,9
	.half	.L529-.L126
	.byte	3,6,1,4,2,5,20,9
	.half	.L370-.L529
	.byte	3,178,12,1,5,27,9
	.half	.L760-.L370
	.byte	1,4,1,5,33,9
	.half	.L371-.L760
	.byte	3,209,115,1,5,28,9
	.half	.L72-.L371
	.byte	3,6,1,4,2,5,18,3,249,9,1,4,1,5,77,9
	.half	.L531-.L72
	.byte	3,137,118,1,4,2,5,46,9
	.half	.L73-.L531
	.byte	3,247,9,1,4,1,5,93,9
	.half	.L761-.L73
	.byte	3,137,118,1,4,2,5,46,9
	.half	.L762-.L761
	.byte	3,247,9,1,4,1,5,36,9
	.half	.L532-.L762
	.byte	3,141,118,1,5,77,3,124,1,5,41,7,9
	.half	.L376-.L532
	.byte	3,11,1,5,1,7,9
	.half	.L763-.L376
	.byte	3,1,1,7,9
	.half	.L240-.L763
	.byte	0,1,1
.L757:
	.sdecl	'.debug_ranges',debug,cluster('IfxVadc_startupCalibration')
	.sect	'.debug_ranges'
.L239:
	.word	-1,.L126,0,.L240-.L126,0,0
	.sdecl	'.debug_info',debug,cluster('IfxVadc_getChannelConversionTime')
	.sect	'.debug_info'
.L241:
	.word	534
	.half	3
	.word	.L242
	.byte	4,1
	.byte	'..\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Vadc\\Std\\IfxVadc.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'E:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\Debug\\',0,12,1
	.word	.L244,.L243
	.byte	2
	.word	.L127
	.byte	3
	.byte	'IfxVadc_getChannelConversionTime',0,1,222,1,9
	.word	.L288
	.byte	1,1,1
	.word	.L98,.L383,.L97
	.byte	4
	.byte	'vadc',0,1,222,1,52
	.word	.L263,.L384
	.byte	4
	.byte	'group',0,1,222,1,74
	.word	.L310,.L385
	.byte	4
	.byte	'inputClass',0,1,222,1,102
	.word	.L386,.L387
	.byte	4
	.byte	'analogFrequency',0,1,222,1,122
	.word	.L288,.L388
	.byte	4
	.byte	'moduleFrequency',0,1,222,1,147,1
	.word	.L288,.L389
	.byte	4
	.byte	'conversionMode',0,1,222,1,187,1
	.word	.L390,.L391
	.byte	5
	.word	.L98,.L383
	.byte	6
	.byte	'conversionTime',0,1,224,1,31
	.word	.L288,.L392
	.byte	6
	.byte	'vadcG',0,1,225,1,31
	.word	.L270,.L393
	.byte	6
	.byte	'stcs',0,1,226,1,31
	.word	.L283,.L394
	.byte	6
	.byte	'resolution',0,1,227,1,31
	.word	.L395,.L396
	.byte	6
	.byte	'n',0,1,228,1,31
	.word	.L283,.L397
	.byte	6
	.byte	'inputClassNum',0,1,230,1,31
	.word	.L283,.L398
	.byte	7
	.word	.L399
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxVadc_getChannelConversionTime')
	.sect	'.debug_abbrev'
.L242:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,7,11,0,85,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxVadc_getChannelConversionTime')
	.sect	'.debug_line'
.L243:
	.word	.L765-.L764
.L764:
	.half	3
	.word	.L767-.L766
.L766:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Vadc\\Std\\IfxVadc.c',0,0,0,0,0
.L767:
	.byte	5,57,7,0,5,2
	.word	.L98
	.byte	3,224,1,1,5,9,3,125,1,5,56,9
	.half	.L463-.L98
	.byte	3,3,1,5,9,9
	.half	.L768-.L463
	.byte	3,125,1,5,56,9
	.half	.L464-.L768
	.byte	3,3,1,5,9,9
	.half	.L466-.L464
	.byte	3,125,1,5,46,9
	.half	.L468-.L466
	.byte	3,2,1,5,5,9
	.half	.L469-.L468
	.byte	3,8,1,5,38,7,9
	.half	.L769-.L469
	.byte	3,3,1,5,55,9
	.half	.L467-.L769
	.byte	1,5,82,9
	.half	.L465-.L467
	.byte	3,1,1,5,35,9
	.half	.L470-.L465
	.byte	3,126,1,5,36,9
	.half	.L19-.L470
	.byte	3,6,1,5,41,9
	.half	.L471-.L19
	.byte	3,1,1,5,58,9
	.half	.L473-.L471
	.byte	1,5,85,9
	.half	.L472-.L473
	.byte	3,1,1,5,16,9
	.half	.L770-.L472
	.byte	3,3,1,5,5,9
	.half	.L771-.L770
	.byte	1,5,22,7,9
	.half	.L772-.L771
	.byte	3,2,1,5,10,9
	.half	.L21-.L772
	.byte	3,5,1,7,9
	.half	.L773-.L21
	.byte	3,2,1,7,9
	.half	.L774-.L773
	.byte	3,2,1,7,9
	.half	.L775-.L774
	.byte	3,2,1,7,9
	.half	.L776-.L775
	.byte	1,5,49,9
	.half	.L22-.L776
	.byte	3,122,1,5,9,3,1,1,5,49,9
	.half	.L24-.L22
	.byte	3,3,1,5,9,3,1,1,5,49,9
	.half	.L23-.L24
	.byte	3,1,1,5,9,3,1,1,5,49,9
	.half	.L26-.L23
	.byte	3,1,1,5,5,9
	.half	.L27-.L26
	.byte	3,4,1,5,79,7,9
	.half	.L400-.L27
	.byte	3,6,1,5,83,9
	.half	.L777-.L400
	.byte	1,5,9,9
	.half	.L401-.L777
	.byte	3,124,1,5,57,7,9
	.half	.L402-.L401
	.byte	3,3,1,5,49,9
	.half	.L462-.L402
	.byte	3,1,1,5,53,9
	.half	.L475-.L462
	.byte	1,5,42,9
	.half	.L778-.L475
	.byte	1,5,23,3,127,1,5,44,9
	.half	.L31-.L778
	.byte	3,6,1,5,30,9
	.half	.L32-.L31
	.byte	1,5,54,9
	.half	.L474-.L32
	.byte	1,5,72,9
	.half	.L779-.L474
	.byte	1,5,1,9
	.half	.L30-.L779
	.byte	3,9,1,7,9
	.half	.L245-.L30
	.byte	0,1,1
.L765:
	.sdecl	'.debug_ranges',debug,cluster('IfxVadc_getChannelConversionTime')
	.sect	'.debug_ranges'
.L244:
	.word	-1,.L98,0,.L245-.L98,0,0
.L399:
	.word	-1,.L98,.L400-.L98,.L401-.L98,.L402-.L98,.L31-.L98,0,0
	.sdecl	'.debug_info',debug,cluster('IfxVadc_configExternalMultiplexerMode')
	.sect	'.debug_info'
.L246:
	.word	452
	.half	3
	.word	.L247
	.byte	4,1
	.byte	'..\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Vadc\\Std\\IfxVadc.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'E:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\Debug\\',0,12,1
	.word	.L249,.L248
	.byte	2
	.word	.L127
	.byte	3
	.byte	'IfxVadc_configExternalMultiplexerMode',0,1,55,6,1,1,1
	.word	.L76,.L403,.L75
	.byte	4
	.byte	'vadc',0,1,55,54
	.word	.L263,.L404
	.byte	4
	.byte	'vadcG',0,1,55,72
	.word	.L270,.L405
	.byte	4
	.byte	'mode',0,1,55,111
	.word	.L406,.L407
	.byte	4
	.byte	'channels',0,1,55,123
	.word	.L265,.L408
	.byte	4
	.byte	'startChannel',0,1,55,157,1
	.word	.L409,.L410
	.byte	4
	.byte	'code',0,1,55,196,1
	.word	.L411,.L412
	.byte	4
	.byte	'sampleTimeControl',0,1,55,232,1
	.word	.L413,.L414
	.byte	4
	.byte	'channelSelectionStyle',0,1,55,153,2
	.word	.L415,.L416
	.byte	5
	.word	.L76,.L403
	.byte	6
	.byte	'emuxctr',0,1,57,24
	.word	.L417,.L418
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxVadc_configExternalMultiplexerMode')
	.sect	'.debug_abbrev'
.L247:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3
	.byte	8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxVadc_configExternalMultiplexerMode')
	.sect	'.debug_line'
.L248:
	.word	.L781-.L780
.L780:
	.half	3
	.word	.L783-.L782
.L782:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Vadc\\Std\\IfxVadc.c',0,0,0,0,0
.L783:
	.byte	5,14,7,0,5,2
	.word	.L76
	.byte	3,58,1,5,6,3,124,1,5,24,9
	.half	.L425-.L76
	.byte	3,4,1,5,6,3,124,1,5,24,9
	.half	.L426-.L425
	.byte	3,5,1,5,32,9
	.half	.L784-.L426
	.byte	3,6,1,5,24,9
	.half	.L421-.L784
	.byte	3,123,1,9
	.half	.L785-.L421
	.byte	3,1,1,9
	.half	.L786-.L785
	.byte	3,1,1,5,14,9
	.half	.L787-.L786
	.byte	3,1,1,5,24,9
	.half	.L422-.L787
	.byte	1,9
	.half	.L788-.L422
	.byte	3,1,1,5,32,9
	.half	.L424-.L788
	.byte	3,1,1,5,33,9
	.half	.L419-.L424
	.byte	3,4,1,5,24,3,125,1,9
	.half	.L789-.L419
	.byte	3,1,1,5,33,3,2,1,5,24,9
	.half	.L428-.L789
	.byte	3,127,1,5,33,9
	.half	.L790-.L428
	.byte	3,1,1,5,1,7,9
	.half	.L250-.L790
	.byte	3,1,0,1,1
.L781:
	.sdecl	'.debug_ranges',debug,cluster('IfxVadc_configExternalMultiplexerMode')
	.sect	'.debug_ranges'
.L249:
	.word	-1,.L76,0,.L250-.L76,0,0
	.sdecl	'.debug_info',debug,cluster('.cocofun_1')
	.sect	'.debug_info'
.L251:
	.word	209
	.half	3
	.word	.L252
	.byte	4,1
	.byte	'..\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Vadc\\Std\\IfxVadc.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'E:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\Debug\\',0,12,1
	.word	.L254,.L253
	.byte	2
	.word	.L127
	.byte	3
	.byte	'.cocofun_1',0,1,92,6,1
	.word	.L84,.L255,.L83
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('.cocofun_1')
	.sect	'.debug_abbrev'
.L252:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,0,3,8,58,15,59,15,57,15,54,15
	.byte	17,1,18,1,64,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('.cocofun_1')
	.sect	'.debug_line'
.L253:
	.word	.L792-.L791
.L791:
	.half	3
	.word	.L794-.L793
.L793:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Vadc\\Std\\IfxVadc.c',0,0,0,0,0
.L794:
	.byte	5,37,7,0,5,2
	.word	.L84
	.byte	3,236,0,1,9
	.half	.L255-.L84
	.byte	0,1,1,5,36,0,5,2
	.word	.L84
	.byte	3,143,1,1,5,37,9
	.half	.L440-.L84
	.byte	3,93,1,7,9
	.half	.L255-.L440
	.byte	0,1,1,5,37,0,5,2
	.word	.L84
	.byte	3,145,1,1,9
	.half	.L440-.L84
	.byte	3,91,1,7,9
	.half	.L255-.L440
	.byte	0,1,1,5,33,0,5,2
	.word	.L84
	.byte	3,149,3,1,5,37,9
	.half	.L440-.L84
	.byte	3,215,125,1,7,9
	.half	.L255-.L440
	.byte	0,1,1,5,33,0,5,2
	.word	.L84
	.byte	3,161,3,1,5,37,9
	.half	.L440-.L84
	.byte	3,203,125,1,7,9
	.half	.L255-.L440
	.byte	0,1,1,5,32,0,5,2
	.word	.L84
	.byte	3,245,3,1,5,37,9
	.half	.L440-.L84
	.byte	3,247,124,1,7,9
	.half	.L255-.L440
	.byte	0,1,1,5,33,0,5,2
	.word	.L84
	.byte	3,128,4,1,5,37,9
	.half	.L440-.L84
	.byte	3,236,124,1,7,9
	.half	.L255-.L440
	.byte	0,1,1,5,33,0,5,2
	.word	.L84
	.byte	3,141,4,1,5,37,9
	.half	.L440-.L84
	.byte	3,223,124,1,7,9
	.half	.L255-.L440
	.byte	0,1,1,5,33,0,5,2
	.word	.L84
	.byte	3,186,4,1,5,37,9
	.half	.L440-.L84
	.byte	3,178,124,1,7,9
	.half	.L255-.L440
	.byte	0,1,1
.L792:
	.sdecl	'.debug_ranges',debug,cluster('.cocofun_1')
	.sect	'.debug_ranges'
.L254:
	.word	-1,.L84,0,.L255-.L84,0,0
	.sdecl	'.debug_info',debug,cluster('.cocofun_2')
	.sect	'.debug_info'
.L256:
	.word	209
	.half	3
	.word	.L257
	.byte	4,1
	.byte	'..\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Vadc\\Std\\IfxVadc.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'E:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\Debug\\',0,12,1
	.word	.L259,.L258
	.byte	2
	.word	.L127
	.byte	3
	.byte	'.cocofun_2',0,1,74,6,1
	.word	.L80,.L260,.L79
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('.cocofun_2')
	.sect	'.debug_abbrev'
.L257:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,0,3,8,58,15,59,15,57,15,54,15
	.byte	17,1,18,1,64,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('.cocofun_2')
	.sect	'.debug_line'
.L258:
	.word	.L796-.L795
.L795:
	.half	3
	.word	.L798-.L797
.L797:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Vadc\\Std\\IfxVadc.c',0,0,0,0,0
.L798:
	.byte	5,59,7,0,5,2
	.word	.L80
	.byte	3,212,0,1,5,23,1,5,30,9
	.half	.L799-.L80
	.byte	1,5,41,9
	.half	.L800-.L799
	.byte	1,9
	.half	.L260-.L800
	.byte	0,1,1,5,60,0,5,2
	.word	.L80
	.byte	3,252,0,1,5,23,1,5,31,9
	.half	.L799-.L80
	.byte	1,5,42,9
	.half	.L800-.L799
	.byte	1,5,41,3,88,1,7,9
	.half	.L260-.L800
	.byte	0,1,1
.L796:
	.sdecl	'.debug_ranges',debug,cluster('.cocofun_2')
	.sect	'.debug_ranges'
.L259:
	.word	-1,.L80,0,.L260-.L80,0,0
	.sdecl	'.debug_loc',debug,cluster('.cocofun_1')
	.sect	'.debug_loc'
.L83:
	.word	-1,.L84,0,.L255-.L84
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('.cocofun_2')
	.sect	'.debug_loc'
.L79:
	.word	-1,.L80,0,.L260-.L80
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxVadc_configExternalMultiplexerMode')
	.sect	'.debug_loc'
.L75:
	.word	-1,.L76,0,.L403-.L76
	.half	2
	.byte	138,0
	.word	0,0
.L416:
	.word	-1,.L76,0,.L403-.L76
	.half	2
	.byte	145,4
	.word	.L420-.L76,.L422-.L76
	.half	1
	.byte	81
	.word	0,0
.L408:
	.word	-1,.L76,0,.L419-.L76
	.half	1
	.byte	85
	.word	0,0
.L412:
	.word	-1,.L76,0,.L419-.L76
	.half	1
	.byte	87
	.word	0,0
.L418:
	.word	-1,.L76,0,.L420-.L76
	.half	1
	.byte	95
	.word	.L427-.L76,.L403-.L76
	.half	1
	.byte	95
	.word	0,0
.L407:
	.word	-1,.L76,0,.L421-.L76
	.half	1
	.byte	84
	.word	0,0
.L414:
	.word	-1,.L76,0,.L403-.L76
	.half	2
	.byte	145,0
	.word	.L423-.L76,.L424-.L76
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
.L410:
	.word	-1,.L76,0,.L419-.L76
	.half	1
	.byte	86
	.word	0,0
.L404:
	.word	-1,.L76,0,.L419-.L76
	.half	1
	.byte	100
	.word	.L425-.L76,.L403-.L76
	.half	1
	.byte	111
	.word	.L428-.L76,.L403-.L76
	.half	1
	.byte	100
	.word	0,0
.L405:
	.word	-1,.L76,0,.L419-.L76
	.half	1
	.byte	101
	.word	.L426-.L76,.L403-.L76
	.half	1
	.byte	108
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxVadc_disableAccess')
	.sect	'.debug_loc'
.L77:
	.word	-1,.L78,0,.L301-.L78
	.half	2
	.byte	138,0
	.word	0,0
.L307:
	.word	-1,.L78,.L429-.L78,.L432-.L78
	.half	1
	.byte	82
	.word	.L433-.L78,.L431-.L78
	.half	1
	.byte	89
	.word	.L80-.L78,.L260-.L78
	.half	1
	.byte	89
	.word	.L3-.L78,.L301-.L78
	.half	1
	.byte	89
	.word	.L434-.L78,.L301-.L78
	.half	1
	.byte	84
	.word	0,0
.L304:
	.word	-1,.L78,0,.L429-.L78
	.half	1
	.byte	84
	.word	.L429-.L78,.L431-.L78
	.half	1
	.byte	88
	.word	.L80-.L78,.L260-.L78
	.half	1
	.byte	88
	.word	.L3-.L78,.L301-.L78
	.half	1
	.byte	88
	.word	0,0
.L302:
	.word	-1,.L78,0,.L429-.L78
	.half	1
	.byte	100
	.word	.L430-.L78,.L431-.L78
	.half	1
	.byte	111
	.word	.L80-.L78,.L260-.L78
	.half	1
	.byte	111
	.word	.L3-.L78,.L301-.L78
	.half	1
	.byte	111
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxVadc_disablePostCalibration')
	.sect	'.debug_loc'
.L81:
	.word	-1,.L82,0,.L308-.L82
	.half	2
	.byte	138,0
	.word	0,0
.L312:
	.word	-1,.L82,0,.L314-.L82
	.half	1
	.byte	85
	.word	.L435-.L82,.L436-.L82
	.half	1
	.byte	95
	.word	.L4-.L82,.L5-.L82
	.half	1
	.byte	85
	.word	.L4-.L82,.L438-.L82
	.half	1
	.byte	95
	.word	0,0
.L311:
	.word	-1,.L82,0,.L314-.L82
	.half	1
	.byte	84
	.word	.L4-.L82,.L5-.L82
	.half	1
	.byte	84
	.word	.L84-.L82,.L440-.L82
	.half	1
	.byte	88
	.word	.L441-.L82,.L308-.L82
	.half	1
	.byte	88
	.word	0,0
.L315:
	.word	-1,.L82,.L437-.L82,.L4-.L82
	.half	5
	.byte	144,32,157,32,0
	.word	.L5-.L82,.L439-.L82
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
.L309:
	.word	-1,.L82,0,.L314-.L82
	.half	1
	.byte	100
	.word	.L4-.L82,.L5-.L82
	.half	1
	.byte	100
	.word	.L84-.L82,.L440-.L82
	.half	1
	.byte	111
	.word	.L441-.L82,.L308-.L82
	.half	1
	.byte	111
	.word	.L442-.L82,.L308-.L82
	.half	1
	.byte	100
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxVadc_enableAccess')
	.sect	'.debug_loc'
.L85:
	.word	-1,.L86,0,.L316-.L86
	.half	2
	.byte	138,0
	.word	0,0
.L319:
	.word	-1,.L86,.L443-.L86,.L444-.L86
	.half	1
	.byte	82
	.word	.L80-.L86,.L260-.L86
	.half	1
	.byte	89
	.word	.L445-.L86,.L316-.L86
	.half	1
	.byte	89
	.word	.L447-.L86,.L316-.L86
	.half	1
	.byte	84
	.word	0,0
.L318:
	.word	-1,.L86,0,.L443-.L86
	.half	1
	.byte	84
	.word	.L80-.L86,.L260-.L86
	.half	1
	.byte	88
	.word	.L443-.L86,.L316-.L86
	.half	1
	.byte	88
	.word	0,0
.L317:
	.word	-1,.L86,0,.L443-.L86
	.half	1
	.byte	100
	.word	.L80-.L86,.L260-.L86
	.half	1
	.byte	111
	.word	.L446-.L86,.L316-.L86
	.half	1
	.byte	111
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxVadc_enableGroupSync')
	.sect	'.debug_loc'
.L87:
	.word	-1,.L88,0,.L320-.L88
	.half	2
	.byte	138,0
	.word	0,0
.L322:
	.word	-1,.L88,0,.L448-.L88
	.half	1
	.byte	84
	.word	.L84-.L88,.L255-.L88
	.half	1
	.byte	95
	.word	.L448-.L88,.L451-.L88
	.half	1
	.byte	95
	.word	.L9-.L88,.L456-.L88
	.half	1
	.byte	95
	.word	0,0
.L323:
	.word	-1,.L88,.L448-.L88,.L324-.L88
	.half	1
	.byte	82
	.word	.L84-.L88,.L255-.L88
	.half	1
	.byte	89
	.word	.L452-.L88,.L320-.L88
	.half	1
	.byte	89
	.word	.L457-.L88,.L320-.L88
	.half	1
	.byte	84
	.word	0,0
.L321:
	.word	-1,.L88,0,.L448-.L88
	.half	1
	.byte	100
	.word	.L84-.L88,.L255-.L88
	.half	1
	.byte	111
	.word	.L440-.L88,.L255-.L88
	.half	1
	.byte	100
	.word	.L449-.L88,.L450-.L88
	.half	1
	.byte	100
	.word	.L453-.L88,.L320-.L88
	.half	1
	.byte	111
	.word	.L454-.L88,.L325-.L88
	.half	1
	.byte	100
	.word	0,0
.L327:
	.word	-1,.L88,.L84-.L88,.L255-.L88
	.half	1
	.byte	88
	.word	.L455-.L88,.L320-.L88
	.half	1
	.byte	88
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxVadc_getAdcAnalogFrequency')
	.sect	'.debug_loc'
.L89:
	.word	-1,.L90,0,.L289-.L90
	.half	2
	.byte	138,0
	.word	0,0
.L290:
	.word	-1,.L90,0,.L458-.L90
	.half	1
	.byte	100
	.word	.L459-.L90,.L289-.L90
	.half	1
	.byte	111
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxVadc_getAdcDigitalFrequency')
	.sect	'.debug_loc'
.L91:
	.word	-1,.L92,0,.L291-.L92
	.half	2
	.byte	138,0
	.word	0,0
.L292:
	.word	-1,.L92,0,.L460-.L92
	.half	1
	.byte	100
	.word	.L461-.L92,.L291-.L92
	.half	1
	.byte	111
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxVadc_getAdcModuleFrequency')
	.sect	'.debug_loc'
.L93:
	.word	-1,.L94,0,.L328-.L94
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxVadc_getBackgroundScanStatus')
	.sect	'.debug_loc'
.L95:
	.word	-1,.L96,0,.L262-.L96
	.half	2
	.byte	138,0
	.word	0,0
.L266:
	.word	0,0
.L264:
	.word	-1,.L96,0,.L262-.L96
	.half	1
	.byte	100
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxVadc_getChannelConversionTime')
	.sect	'.debug_loc'
.L97:
	.word	-1,.L98,0,.L383-.L98
	.half	2
	.byte	138,0
	.word	0,0
.L388:
	.word	-1,.L98,0,.L462-.L98
	.half	1
	.byte	86
	.word	.L468-.L98,.L383-.L98
	.half	1
	.byte	88
	.word	.L31-.L98,.L32-.L98
	.half	1
	.byte	86
	.word	0,0
.L391:
	.word	-1,.L98,0,.L383-.L98
	.half	2
	.byte	145,0
	.word	.L463-.L98,.L462-.L98
	.half	1
	.byte	81
	.word	.L31-.L98,.L32-.L98
	.half	1
	.byte	81
	.word	0,0
.L392:
	.word	-1,.L98,.L469-.L98,.L462-.L98
	.half	1
	.byte	82
	.word	.L31-.L98,.L32-.L98
	.half	1
	.byte	82
	.word	.L30-.L98,.L383-.L98
	.half	1
	.byte	82
	.word	0,0
.L385:
	.word	-1,.L98,0,.L462-.L98
	.half	1
	.byte	84
	.word	.L31-.L98,.L32-.L98
	.half	1
	.byte	84
	.word	0,0
.L387:
	.word	-1,.L98,0,.L462-.L98
	.half	1
	.byte	85
	.word	.L464-.L98,.L465-.L98
	.half	1
	.byte	95
	.word	.L19-.L98,.L471-.L98
	.half	1
	.byte	95
	.word	.L31-.L98,.L32-.L98
	.half	1
	.byte	85
	.word	0,0
.L398:
	.word	-1,.L98,.L19-.L98,.L472-.L98
	.half	1
	.byte	95
	.word	0,0
.L389:
	.word	-1,.L98,0,.L462-.L98
	.half	1
	.byte	87
	.word	.L31-.L98,.L32-.L98
	.half	1
	.byte	87
	.word	0,0
.L397:
	.word	-1,.L98,.L27-.L98,.L383-.L98
	.half	1
	.byte	90
	.word	0,0
.L396:
	.word	-1,.L98,.L20-.L98,.L474-.L98
	.half	1
	.byte	95
	.word	0,0
.L394:
	.word	-1,.L98,.L470-.L98,.L19-.L98
	.half	1
	.byte	89
	.word	.L20-.L98,.L475-.L98
	.half	1
	.byte	89
	.word	.L31-.L98,.L32-.L98
	.half	1
	.byte	89
	.word	0,0
.L384:
	.word	-1,.L98,0,.L462-.L98
	.half	1
	.byte	100
	.word	.L31-.L98,.L32-.L98
	.half	1
	.byte	100
	.word	0,0
.L393:
	.word	-1,.L98,.L466-.L98,.L467-.L98
	.half	1
	.byte	111
	.word	.L19-.L98,.L473-.L98
	.half	1
	.byte	111
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxVadc_getQueueStatus')
	.sect	'.debug_loc'
.L99:
	.word	-1,.L100,0,.L286-.L100
	.half	2
	.byte	138,0
	.word	0,0
.L287:
	.word	-1,.L100,0,.L286-.L100
	.half	1
	.byte	100
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxVadc_getResultBasedOnRequestSource')
	.sect	'.debug_loc'
.L101:
	.word	-1,.L102,0,.L268-.L102
	.half	2
	.byte	138,0
	.word	0,0
.L273:
	.word	-1,.L102,0,.L268-.L102
	.half	1
	.byte	84
	.word	0,0
.L271:
	.word	-1,.L102,0,.L268-.L102
	.half	1
	.byte	101
	.word	0,0
.L277:
	.word	-1,.L102,.L476-.L102,.L477-.L102
	.half	1
	.byte	95
	.word	.L36-.L102,.L478-.L102
	.half	1
	.byte	95
	.word	.L37-.L102,.L479-.L102
	.half	1
	.byte	95
	.word	0,0
.L275:
	.word	-1,.L102,0,.L268-.L102
	.half	1
	.byte	85
	.word	0,0
.L278:
	.word	-1,.L102,.L480-.L102,.L43-.L102
	.half	1
	.byte	82
	.word	.L481-.L102,.L268-.L102
	.half	1
	.byte	82
	.word	0,0
.L269:
	.word	-1,.L102,0,.L268-.L102
	.half	1
	.byte	100
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxVadc_getScanStatus')
	.sect	'.debug_loc'
.L103:
	.word	-1,.L104,0,.L279-.L104
	.half	2
	.byte	138,0
	.word	0,0
.L280:
	.word	-1,.L104,0,.L279-.L104
	.half	1
	.byte	100
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxVadc_getSrcAddress')
	.sect	'.debug_loc'
.L105:
	.word	-1,.L106,0,.L330-.L106
	.half	2
	.byte	138,0
	.word	0,0
.L331:
	.word	-1,.L106,0,.L482-.L106
	.half	1
	.byte	84
	.word	0,0
.L333:
	.word	-1,.L106,0,.L483-.L106
	.half	1
	.byte	85
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxVadc_initialiseAdcArbiterClock')
	.sect	'.debug_loc'
.L107:
	.word	-1,.L108,0,.L334-.L108
	.half	2
	.byte	138,0
	.word	0,0
.L336:
	.word	-1,.L108,0,.L484-.L108
	.half	1
	.byte	84
	.word	0,0
.L337:
	.word	-1,.L108,.L84-.L108,.L255-.L108
	.half	1
	.byte	88
	.word	.L486-.L108,.L334-.L108
	.half	1
	.byte	88
	.word	0,0
.L335:
	.word	-1,.L108,0,.L485-.L108
	.half	1
	.byte	100
	.word	.L84-.L108,.L255-.L108
	.half	1
	.byte	111
	.word	.L487-.L108,.L334-.L108
	.half	1
	.byte	111
	.word	.L440-.L108,.L255-.L108
	.half	1
	.byte	100
	.word	.L488-.L108,.L334-.L108
	.half	1
	.byte	100
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxVadc_initialiseAdcConverterClock')
	.sect	'.debug_loc'
.L109:
	.word	-1,.L110,0,.L338-.L110
	.half	2
	.byte	138,0
	.word	0,0
.L340:
	.word	-1,.L110,0,.L489-.L110
	.half	1
	.byte	84
	.word	0,0
.L341:
	.word	-1,.L110,.L84-.L110,.L255-.L110
	.half	1
	.byte	95
	.word	.L491-.L110,.L338-.L110
	.half	1
	.byte	95
	.word	0,0
.L339:
	.word	-1,.L110,0,.L490-.L110
	.half	1
	.byte	100
	.word	.L84-.L110,.L255-.L110
	.half	1
	.byte	111
	.word	.L492-.L110,.L338-.L110
	.half	1
	.byte	111
	.word	.L440-.L110,.L255-.L110
	.half	1
	.byte	100
	.word	.L493-.L110,.L338-.L110
	.half	1
	.byte	100
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxVadc_initializeFAdcD')
	.sect	'.debug_loc'
.L111:
	.word	-1,.L112,0,.L342-.L112
	.half	2
	.byte	138,0
	.word	0,0
.L345:
	.word	-1,.L112,.L498-.L112,.L499-.L112
	.half	1
	.byte	95
	.word	0,0
.L344:
	.word	-1,.L112,0,.L494-.L112
	.half	1
	.byte	84
	.word	.L494-.L112,.L496-.L112
	.half	1
	.byte	95
	.word	0,0
.L346:
	.word	-1,.L112,.L497-.L112,.L342-.L112
	.half	1
	.byte	88
	.word	0,0
.L343:
	.word	-1,.L112,0,.L494-.L112
	.half	1
	.byte	100
	.word	.L495-.L112,.L342-.L112
	.half	1
	.byte	111
	.word	.L498-.L112,.L500-.L112
	.half	1
	.byte	100
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxVadc_initializeFAdcI')
	.sect	'.debug_loc'
.L113:
	.word	-1,.L114,0,.L347-.L114
	.half	2
	.byte	138,0
	.word	0,0
.L350:
	.word	-1,.L114,.L506-.L114,.L55-.L114
	.half	1
	.byte	84
	.word	0,0
.L349:
	.word	-1,.L114,0,.L501-.L114
	.half	1
	.byte	84
	.word	.L501-.L114,.L503-.L114
	.half	1
	.byte	95
	.word	0,0
.L352:
	.word	-1,.L114,.L504-.L114,.L505-.L114
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
.L351:
	.word	-1,.L114,.L507-.L114,.L347-.L114
	.half	1
	.byte	88
	.word	0,0
.L348:
	.word	-1,.L114,0,.L501-.L114
	.half	1
	.byte	100
	.word	.L502-.L114,.L347-.L114
	.half	1
	.byte	111
	.word	.L508-.L114,.L55-.L114
	.half	1
	.byte	100
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxVadc_isPostCalibration')
	.sect	'.debug_loc'
.L115:
	.word	-1,.L116,0,.L353-.L116
	.half	2
	.byte	138,0
	.word	0,0
.L355:
	.word	-1,.L116,0,.L353-.L116
	.half	1
	.byte	84
	.word	0,0
.L356:
	.word	0,0
.L354:
	.word	-1,.L116,0,.L353-.L116
	.half	1
	.byte	100
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxVadc_resetKernel')
	.sect	'.debug_loc'
.L117:
	.word	-1,.L118,0,.L357-.L118
	.half	2
	.byte	138,0
	.word	0,0
.L359:
	.word	-1,.L118,.L509-.L118,.L511-.L118
	.half	1
	.byte	82
	.word	.L512-.L118,.L511-.L118
	.half	1
	.byte	88
	.word	.L84-.L118,.L255-.L118
	.half	1
	.byte	88
	.word	.L513-.L118,.L514-.L118
	.half	1
	.byte	88
	.word	.L516-.L118,.L67-.L118
	.half	1
	.byte	84
	.word	.L517-.L118,.L357-.L118
	.half	1
	.byte	88
	.word	.L519-.L118,.L357-.L118
	.half	1
	.byte	84
	.word	0,0
.L358:
	.word	-1,.L118,0,.L509-.L118
	.half	1
	.byte	100
	.word	.L510-.L118,.L511-.L118
	.half	1
	.byte	111
	.word	.L84-.L118,.L255-.L118
	.half	1
	.byte	111
	.word	.L513-.L118,.L514-.L118
	.half	1
	.byte	111
	.word	.L440-.L118,.L255-.L118
	.half	1
	.byte	100
	.word	.L513-.L118,.L515-.L118
	.half	1
	.byte	100
	.word	.L517-.L118,.L357-.L118
	.half	1
	.byte	111
	.word	.L517-.L118,.L518-.L118
	.half	1
	.byte	100
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxVadc_selectPowerSupplyVoltage')
	.sect	'.debug_loc'
.L119:
	.word	-1,.L120,0,.L360-.L120
	.half	2
	.byte	138,0
	.word	0,0
.L363:
	.word	-1,.L120,0,.L520-.L120
	.half	1
	.byte	84
	.word	0,0
.L364:
	.word	-1,.L120,.L84-.L120,.L255-.L120
	.half	1
	.byte	88
	.word	.L522-.L120,.L360-.L120
	.half	1
	.byte	88
	.word	0,0
.L361:
	.word	-1,.L120,0,.L521-.L120
	.half	1
	.byte	100
	.word	.L84-.L120,.L255-.L120
	.half	1
	.byte	111
	.word	.L523-.L120,.L360-.L120
	.half	1
	.byte	111
	.word	.L440-.L120,.L255-.L120
	.half	1
	.byte	100
	.word	.L524-.L120,.L360-.L120
	.half	1
	.byte	100
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxVadc_setArbiterPriority')
	.sect	'.debug_loc'
.L121:
	.word	-1,.L122,0,.L293-.L122
	.half	2
	.byte	138,0
	.word	0,0
.L299:
	.word	-1,.L122,0,.L293-.L122
	.half	1
	.byte	86
	.word	0,0
.L297:
	.word	-1,.L122,0,.L525-.L122
	.half	1
	.byte	85
	.word	.L68-.L122,.L71-.L122
	.half	1
	.byte	85
	.word	0,0
.L300:
	.word	-1,.L122,0,.L526-.L122
	.half	1
	.byte	87
	.word	.L68-.L122,.L71-.L122
	.half	1
	.byte	87
	.word	0,0
.L295:
	.word	-1,.L122,0,.L527-.L122
	.half	1
	.byte	84
	.word	.L68-.L122,.L71-.L122
	.half	1
	.byte	84
	.word	0,0
.L294:
	.word	-1,.L122,0,.L293-.L122
	.half	1
	.byte	100
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxVadc_setScan')
	.sect	'.debug_loc'
.L123:
	.word	-1,.L124,0,.L281-.L124
	.half	2
	.byte	138,0
	.word	0,0
.L284:
	.word	-1,.L124,0,.L528-.L124
	.half	1
	.byte	84
	.word	0,0
.L282:
	.word	-1,.L124,0,.L281-.L124
	.half	1
	.byte	100
	.word	0,0
.L285:
	.word	-1,.L124,0,.L281-.L124
	.half	1
	.byte	85
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxVadc_startupCalibration')
	.sect	'.debug_loc'
.L125:
	.word	-1,.L126,0,.L365-.L126
	.half	2
	.byte	138,0
	.word	0,0
.L368:
	.word	0,0
.L380:
	.word	0,0
.L367:
	.word	-1,.L126,.L531-.L126,.L365-.L126
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
.L382:
	.word	-1,.L126,.L532-.L126,.L365-.L126
	.half	1
	.byte	95
	.word	0,0
.L366:
	.word	-1,.L126,0,.L370-.L126
	.half	1
	.byte	100
	.word	.L529-.L126,.L371-.L126
	.half	1
	.byte	111
	.word	.L84-.L126,.L255-.L126
	.half	1
	.byte	111
	.word	.L530-.L126,.L365-.L126
	.half	1
	.byte	111
	.word	.L440-.L126,.L255-.L126
	.half	1
	.byte	100
	.word	.L530-.L126,.L72-.L126
	.half	1
	.byte	100
	.word	0,0
.L378:
	.word	0,0
.L373:
	.word	0,0
	.sdecl	'.debug_frame',debug
	.sect	'.debug_frame'
.L801:
	.word	48
	.word	-1
	.byte	3,0,2,1,27,12,26,0,8,27,8,26,8,28,8,29,8,30,8,31,8,34,8,35,8,32,8,33,8,16,8,17,8,24,8,25,8,36,8,37,8,38
	.byte	8,39
	.sdecl	'.debug_frame',debug,cluster('IfxVadc_configExternalMultiplexerMode')
	.sect	'.debug_frame'
	.word	12
	.word	.L801,.L76,.L403-.L76
	.sdecl	'.debug_frame',debug,cluster('IfxVadc_disableAccess')
	.sect	'.debug_frame'
	.word	12
	.word	.L801,.L78,.L301-.L78
	.sdecl	'.debug_frame',debug,cluster('IfxVadc_disablePostCalibration')
	.sect	'.debug_frame'
	.word	12
	.word	.L801,.L82,.L308-.L82
	.sdecl	'.debug_frame',debug,cluster('IfxVadc_enableAccess')
	.sect	'.debug_frame'
	.word	12
	.word	.L801,.L86,.L316-.L86
	.sdecl	'.debug_frame',debug,cluster('IfxVadc_enableGroupSync')
	.sect	'.debug_frame'
	.word	12
	.word	.L801,.L88,.L320-.L88
	.sdecl	'.debug_frame',debug,cluster('IfxVadc_getAdcAnalogFrequency')
	.sect	'.debug_frame'
	.word	12
	.word	.L801,.L90,.L289-.L90
	.sdecl	'.debug_frame',debug,cluster('IfxVadc_getAdcDigitalFrequency')
	.sect	'.debug_frame'
	.word	12
	.word	.L801,.L92,.L291-.L92
	.sdecl	'.debug_frame',debug,cluster('IfxVadc_getAdcModuleFrequency')
	.sect	'.debug_frame'
	.word	12
	.word	.L801,.L94,.L328-.L94
	.sdecl	'.debug_frame',debug,cluster('IfxVadc_getBackgroundScanStatus')
	.sect	'.debug_frame'
	.word	20
	.word	.L801,.L96,.L262-.L96
	.byte	8,19,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('IfxVadc_getChannelConversionTime')
	.sect	'.debug_frame'
	.word	12
	.word	.L801,.L98,.L383-.L98
	.sdecl	'.debug_frame',debug,cluster('IfxVadc_getQueueStatus')
	.sect	'.debug_frame'
	.word	24
	.word	.L801,.L100,.L286-.L100
	.byte	8,18,8,19,8,21,8,22,8,23,0,0
	.sdecl	'.debug_frame',debug,cluster('IfxVadc_getResultBasedOnRequestSource')
	.sect	'.debug_frame'
	.word	20
	.word	.L801,.L102,.L268-.L102
	.byte	8,18,8,19,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('IfxVadc_getScanStatus')
	.sect	'.debug_frame'
	.word	24
	.word	.L801,.L104,.L279-.L104
	.byte	8,18,8,19,8,21,8,22,8,23,0,0
	.sdecl	'.debug_frame',debug,cluster('IfxVadc_getSrcAddress')
	.sect	'.debug_frame'
	.word	24
	.word	.L801,.L106,.L330-.L106
	.byte	8,19,8,20,8,21,8,22,8,23,0,0
	.sdecl	'.debug_frame',debug,cluster('IfxVadc_initialiseAdcArbiterClock')
	.sect	'.debug_frame'
	.word	12
	.word	.L801,.L108,.L334-.L108
	.sdecl	'.debug_frame',debug,cluster('IfxVadc_initialiseAdcConverterClock')
	.sect	'.debug_frame'
	.word	12
	.word	.L801,.L110,.L338-.L110
	.sdecl	'.debug_frame',debug,cluster('IfxVadc_initializeFAdcD')
	.sect	'.debug_frame'
	.word	12
	.word	.L801,.L112,.L342-.L112
	.sdecl	'.debug_frame',debug,cluster('IfxVadc_initializeFAdcI')
	.sect	'.debug_frame'
	.word	12
	.word	.L801,.L114,.L347-.L114
	.sdecl	'.debug_frame',debug,cluster('IfxVadc_isPostCalibration')
	.sect	'.debug_frame'
	.word	24
	.word	.L801,.L116,.L353-.L116
	.byte	8,18,8,19,8,21,8,22,8,23,0,0
	.sdecl	'.debug_frame',debug,cluster('IfxVadc_resetKernel')
	.sect	'.debug_frame'
	.word	12
	.word	.L801,.L118,.L357-.L118
	.sdecl	'.debug_frame',debug,cluster('IfxVadc_selectPowerSupplyVoltage')
	.sect	'.debug_frame'
	.word	12
	.word	.L801,.L120,.L360-.L120
	.sdecl	'.debug_frame',debug,cluster('IfxVadc_setArbiterPriority')
	.sect	'.debug_frame'
	.word	24
	.word	.L801,.L122,.L293-.L122
	.byte	8,18,8,19,8,21,8,22,8,23,0,0
	.sdecl	'.debug_frame',debug,cluster('IfxVadc_setScan')
	.sect	'.debug_frame'
	.word	24
	.word	.L801,.L124,.L281-.L124
	.byte	8,18,8,19,8,21,8,22,8,23,0,0
	.sdecl	'.debug_frame',debug,cluster('IfxVadc_startupCalibration')
	.sect	'.debug_frame'
	.word	12
	.word	.L801,.L126,.L365-.L126
	.sdecl	'.debug_frame',debug
	.sect	'.debug_frame'
.L802:
	.word	52
	.word	-1
	.byte	3,0,2,1,40,12,26,0,9,40,27,155,0,7,26,8,28,8,29,8,30,8,31,8,34,8,35,8,32,8,33,8,16,8,17,8,24,8,25,8,36
	.byte	8,37,8,38,8,39,0
	.sdecl	'.debug_frame',debug,cluster('.cocofun_2')
	.sect	'.debug_frame'
	.word	24
	.word	.L802,.L80,.L260-.L80
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('.cocofun_1')
	.sect	'.debug_frame'
	.word	24
	.word	.L802,.L84,.L255-.L84
	.byte	8,18,8,19,8,20,8,21,8,22,8,23

; ..\src\BaseSw\iLLD\TC26B\Tricore\Vadc\Std\IfxVadc.c	   592      } while (calibrationRunning == TRUE); /* wait until calibration of all calibrated kernels are done */
	; Module end
