	; Module start
	.compiler_version	"TASKING VX-toolset for TriCore: C compiler v6.3r1 Build 19041558 SN 99293038"
	.compiler_invocation	"ctc --dep-file=src\\BaseSw\\iLLD\\TC26B\\Tricore\\Asclin\\Std\\.IfxAsclin.o.d --fp-model=c,f,l,n,r,S,T,z -D__CPU__=tc26x -D__CPU_TC26X__ --core=tc1.6.x --iso=99 -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512 -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\AppSw\\Tricore -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\AppSw\\Tricore\\APP -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\AppSw\\Tricore\\Main -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Cpu -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Cpu\\CStart -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Cpu\\Irq -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Cpu\\Std -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Cpu\\Trap -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\AppSw -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\iLLD -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\iLLD\\TC26B -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\iLLD\\TC26B\\Tricore -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\_Build -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\_Impl -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\_Lib -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\_Lib\\DataHandling -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\_Lib\\InternalMux -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\_PinMap -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Asclin -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Ccu6 -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Cif -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Cpu -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Dma -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Dsadc -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Dts -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Emem -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Eray -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Eth -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Fce -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Fft -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Flash -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Gpt12 -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Gtm -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Hssl -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\I2c -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Iom -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Msc -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Mtu -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Multican -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Port -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Psi5 -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Psi5s -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Qspi -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Scu -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Sent -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Smu -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Src -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Stm -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Vadc -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\Infra -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\Infra\\Platform -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\Infra\\Platform\\Tricore -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\Infra\\Platform\\Tricore\\Compilers -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\Infra\\Sfr -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\Infra\\Sfr\\TC26B -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\Infra\\Sfr\\TC26B\\_Reg -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\Service -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\Service\\CpuGeneric -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\Service\\CpuGeneric\\_Utilities -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\Service\\CpuGeneric\\If -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\Service\\CpuGeneric\\If\\Ccu6If -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\Service\\CpuGeneric\\StdIf -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\Service\\CpuGeneric\\SysSe -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\Service\\CpuGeneric\\SysSe\\Bsp -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\Service\\CpuGeneric\\SysSe\\Comm -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\Service\\CpuGeneric\\SysSe\\General -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\Service\\CpuGeneric\\SysSe\\Math -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\Service\\CpuGeneric\\SysSe\\Time -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\AppSw\\Tricore\\User -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\AppSw -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\AppSw\\Tricore\\APP -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\AppSw\\Tricore\\Main -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\AppSw\\Tricore\\Driver -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\iLLD -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\iLLD\\TC26B -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\iLLD\\TC26B\\Tricore -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\_Build -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\_Impl -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\_Lib -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\_Lib\\DataHandling -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\_Lib\\InternalMux -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\_PinMap -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Asclin -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Asclin\\Asc -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Asclin\\Lin -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Asclin\\Spi -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Asclin\\Std -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Ccu6 -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Ccu6\\Icu -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Ccu6\\PwmBc -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Ccu6\\PwmHl -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Ccu6\\Std -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Ccu6\\Timer -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Ccu6\\TimerWithTrigger -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Ccu6\\TPwm -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Cif -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Cif\\Cam -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Cif\\Std -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Cpu -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Cpu\\CStart -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Cpu\\Irq -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Cpu\\Std -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Cpu\\Trap -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Dma -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Dma\\Dma -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Dma\\Std -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Dsadc -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Dsadc\\Dsadc -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Dsadc\\Rdc -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Dsadc\\Std -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Dts -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Dts\\Dts -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Dts\\Std -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Emem -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Emem\\Std -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Eray -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Eray\\Eray -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Eray\\Std -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Eth -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Eth\\Phy_Pef7071 -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Eth\\Std -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Fce -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Fce\\Crc -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Fce\\Std -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Fft -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Fft\\Fft -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Fft\\Std -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Flash -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Flash\\Std -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Gpt12 -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Gpt12\\IncrEnc -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Gpt12\\Std -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Gtm -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Gtm\\Atom -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Gtm\\Atom\\Pwm -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Gtm\\Atom\\PwmHl -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Gtm\\Atom\\Timer -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Gtm\\Std -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Gtm\\Tim -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Gtm\\Tim\\In -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Gtm\\Tom -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Gtm\\Tom\\Pwm -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Gtm\\Tom\\PwmHl -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Gtm\\Tom\\Timer -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Gtm\\Trig -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Hssl -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Hssl\\Hssl -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Hssl\\Std -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\I2c -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\I2c\\I2c -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\I2c\\Std -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Iom -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Iom\\Driver -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Iom\\Std -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Msc -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Msc\\Msc -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Msc\\Std -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Mtu -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Mtu\\Std -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Multican -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Multican\\Can -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Multican\\Std -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Port -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Port\\Io -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Port\\Std -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Psi5 -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Psi5\\Psi5 -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Psi5\\Std -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Psi5s -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Psi5s\\Psi5s -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Psi5s\\Std -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Qspi -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Qspi\\SpiMaster -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Qspi\\SpiSlave -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Qspi\\Std -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Scu -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Scu\\Std -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Sent -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Sent\\Sent -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Sent\\Std -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Smu -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Smu\\Std -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Src -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Src\\Std -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Stm -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Stm\\Std -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Stm\\Timer -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Vadc -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Vadc\\Adc -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Vadc\\Std -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\Infra -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\Infra\\Platform -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\Infra\\Platform\\Tricore -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\Infra\\Platform\\Tricore\\Compilers -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\Infra\\Sfr -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\Infra\\Sfr\\TC26B -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\Infra\\Sfr\\TC26B\\_Reg -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\Service -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\Service\\CpuGeneric -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\Service\\CpuGeneric\\_Utilities -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\Service\\CpuGeneric\\If -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\Service\\CpuGeneric\\If\\Ccu6If -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\Service\\CpuGeneric\\StdIf -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\Service\\CpuGeneric\\SysSe -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\Service\\CpuGeneric\\SysSe\\Bsp -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\Service\\CpuGeneric\\SysSe\\Comm -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\Service\\CpuGeneric\\SysSe\\General -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\Service\\CpuGeneric\\SysSe\\Math -IE:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\Service\\CpuGeneric\\SysSe\\Time -g2 --make-target=src\\BaseSw\\iLLD\\TC26B\\Tricore\\Asclin\\Std\\IfxAsclin.o -t4 --language=-gcc,-volatile,+strings,-kanji --default-near-size=0 -O2 --default-a1-size=0 --default-a0-size=0 --source --align=0 --compact-max-size=200 --switch=auto --error-limit=42 -o src\\BaseSw\\iLLD\\TC26B\\Tricore\\Asclin\\Std\\IfxAsclin.src ..\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Asclin\\Std\\IfxAsclin.c"
	.compiler_name		"ctc"
	;source	'..\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Asclin\\Std\\IfxAsclin.c'

	
$TC16X
	
	.sdecl	'.text.IfxAsclin.IfxAsclin_disableModule',code,cluster('IfxAsclin_disableModule')
	.sect	'.text.IfxAsclin.IfxAsclin_disableModule'
	.align	2
	
	.global	IfxAsclin_disableModule

; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	     1  /**
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	     2   * \file IfxAsclin.c
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	     3   * \brief ASCLIN  basic functionality
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	     4   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	     5   * \version iLLD_1_0_1_11_0
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	     6   * \copyright Copyright (c) 2019 Infineon Technologies AG. All rights reserved.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	     7   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	     8   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	     9   *                                 IMPORTANT NOTICE
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	    10   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	    11   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	    12   * Use of this file is subject to the terms of use agreed between (i) you or 
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	    13   * the company in which ordinary course of business you are acting and (ii) 
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	    14   * Infineon Technologies AG or its licensees. If and as long as no such 
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	    15   * terms of use are agreed, use of this file is subject to following:
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	    16  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	    17  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	    18   * Boost Software License - Version 1.0 - August 17th, 2003
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	    19  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	    20   * Permission is hereby granted, free of charge, to any person or 
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	    21   * organization obtaining a copy of the software and accompanying 
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	    22   * documentation covered by this license (the "Software") to use, reproduce,
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	    23   * display, distribute, execute, and transmit the Software, and to prepare
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	    24   * derivative works of the Software, and to permit third-parties to whom the 
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	    25   * Software is furnished to do so, all subject to the following:
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	    26  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	    27   * The copyright notices in the Software and this entire statement, including
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	    28   * the above license grant, this restriction and the following disclaimer, must
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	    29   * be included in all copies of the Software, in whole or in part, and all
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	    30   * derivative works of the Software, unless such copies or derivative works are
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	    31   * solely in the form of machine-executable object code generated by a source
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	    32   * language processor.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	    33  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	    34   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR 
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	    35   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	    36   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	    37   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE 
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	    38   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	    39   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	    40   * DEALINGS IN THE SOFTWARE.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	    41  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	    42   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	    43   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	    44  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	    45  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	    46  /*----------------------------------Includes----------------------------------*/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	    47  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	    48  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	    49  #include "IfxAsclin.h"
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	    50  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	    51  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	    52  /*-------------------------Function Implementations---------------------------*/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	    53  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	    54  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	    55  void IfxAsclin_disableModule(Ifx_ASCLIN *asclin)
; Function IfxAsclin_disableModule
.L66:
IfxAsclin_disableModule:	.type	func
	mov.aa	a15,a4
.L448:

; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	    56  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	    57      uint16 psw = IfxScuWdt_getCpuWatchdogPassword();
	call	IfxScuWdt_getCpuWatchdogPassword
.L447:
	mov	d8,d2
.L450:

; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	    58      IfxScuWdt_clearCpuEndinit(psw);            /* clears the endinit protection*/
	mov	d4,d8
	call	IfxScuWdt_clearCpuEndinit
.L449:

; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	    59      IfxAsclin_setDisableModuleRequest(asclin); /* disables the module*/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	    60      IfxScuWdt_setCpuEndinit(psw);              /* sets the endinit protection back on*/
	mov	d4,d8

; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	     1  /**
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	     2   * \file IfxAsclin.h
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	     3   * \brief ASCLIN  basic functionality
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	     4   * \ingroup IfxLld_Asclin
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	     5   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	     6   * \version iLLD_1_0_1_11_0
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	     7   * \copyright Copyright (c) 2018 Infineon Technologies AG. All rights reserved.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	     8   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	     9   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    10   *                                 IMPORTANT NOTICE
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    11   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    12   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    13   * Use of this file is subject to the terms of use agreed between (i) you or 
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    14   * the company in which ordinary course of business you are acting and (ii) 
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    15   * Infineon Technologies AG or its licensees. If and as long as no such 
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    16   * terms of use are agreed, use of this file is subject to following:
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    17  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    18  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    19   * Boost Software License - Version 1.0 - August 17th, 2003
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    20  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    21   * Permission is hereby granted, free of charge, to any person or 
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    22   * organization obtaining a copy of the software and accompanying 
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    23   * documentation covered by this license (the "Software") to use, reproduce,
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    24   * display, distribute, execute, and transmit the Software, and to prepare
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    25   * derivative works of the Software, and to permit third-parties to whom the 
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    26   * Software is furnished to do so, all subject to the following:
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    27  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    28   * The copyright notices in the Software and this entire statement, including
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    29   * the above license grant, this restriction and the following disclaimer, must
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    30   * be included in all copies of the Software, in whole or in part, and all
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    31   * derivative works of the Software, unless such copies or derivative works are
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    32   * solely in the form of machine-executable object code generated by a source
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    33   * language processor.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    34  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    35   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR 
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    36   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    37   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    38   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE 
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    39   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    40   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    41   * DEALINGS IN THE SOFTWARE.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    42  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    43   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    44   * \defgroup IfxLld_Asclin_Std_Enumerations Enumerations
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    45   * \ingroup IfxLld_Asclin_Std
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    46   * \defgroup IfxLld_Asclin_Std_Operative Operative Functions
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    47   * \ingroup IfxLld_Asclin_Std
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    48   * \defgroup IfxLld_Asclin_Std_Utility Utility Functions
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    49   * \ingroup IfxLld_Asclin_Std
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    50   * \defgroup IfxLld_Asclin_Std_Configuration Configuration Functions
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    51   * \ingroup IfxLld_Asclin_Std
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    52   * \defgroup IfxLld_Asclin_Std_External External Functions
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    53   * \ingroup IfxLld_Asclin_Std
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    54   * \defgroup IfxLld_Asclin_Std_IO IO Pin Configuration Functions
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    55   * \ingroup IfxLld_Asclin_Std
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    56   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    57  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    58  #ifndef IFXASCLIN_H
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    59  #define IFXASCLIN_H 1
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    60  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    61  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    62  /*----------------------------------Includes----------------------------------*/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    63  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    64  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    65  #include "_Impl/IfxAsclin_cfg.h"
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    66  #include "Scu/Std/IfxScuCcu.h"
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    67  #include "Scu/Std/IfxScuWdt.h"
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    68  #include "Cpu/Std/IfxCpu_Intrinsics.h"
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    69  #include "IfxAsclin_reg.h"
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    70  #include "Src/Std/IfxSrc.h"
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    71  #include "_PinMap/IfxAsclin_PinMap.h"
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    72  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    73  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    74  /*--------------------------------Enumerations--------------------------------*/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    75  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    76  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    77  /** \addtogroup IfxLld_Asclin_Std_Enumerations
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    78   * \{ */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    79  /** \brief Defines if the classic or the enhanced checksum will be calculated by the checksum block.\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    80   * Definition in Ifx_ASCLIN.DATCON.B.CSM
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    81   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    82  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    83  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    84      IfxAsclin_Checksum_classic  = 0, /**< \brief classic checksum */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    85      IfxAsclin_Checksum_enhanced = 1  /**< \brief enhanced checksum */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    86  } IfxAsclin_Checksum;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    87  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    88  /** \brief Defines if the received checksum byte is written into the RXFifo or not.\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    89   * Definition in Ifx_ASCLIN.LIN.CON.B.CSI
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    90   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    91  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    92  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    93      IfxAsclin_ChecksumInjection_notWritten = 0,  /**< \brief checksum byte is not written */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    94      IfxAsclin_ChecksumInjection_written    = 1   /**< \brief checksum byte is written */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    95  } IfxAsclin_ChecksumInjection;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    96  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    97  /** \brief CPOL defines the idle level of the clock signal in the SPI mode.\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    98   * Idle level is the level outside the data transmission time intervals.\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    99   * Definition in Ifx_ASCLIN.IOCR.B.CPOL
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   100   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   101  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   102  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   103      IfxAsclin_ClockPolarity_idleLow  = 0, /**< \brief idle low */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   104      IfxAsclin_ClockPolarity_idleHigh = 1  /**< \brief idle high */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   105  } IfxAsclin_ClockPolarity;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   106  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   107  /** \brief Selection of clock source\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   108   * Definition in Ifx_ASCLIN.CSR.B.CLKSEL
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   109   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   110  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   111  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   112      IfxAsclin_ClockSource_noClock         = 0,  /**< \brief no clock will be supplied */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   113      IfxAsclin_ClockSource_kernelClock     = 1,  /**< \brief f clc will be supplied */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   114      IfxAsclin_ClockSource_oscillatorClock = 2,  /**< \brief XTAL oscillator clock foso0 will be supplied */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   115      IfxAsclin_ClockSource_flexRayClock    = 4,  /**< \brief f eray will be supplied */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   116      IfxAsclin_ClockSource_ascFastClock    = 8,  /**< \brief f asclinf wiil be supplied */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   117      IfxAsclin_ClockSource_ascSlowClock    = 16  /**< \brief f asclins will be supplied */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   118  } IfxAsclin_ClockSource;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   119  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   120  /** \brief CTS input pin selection\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   121   * Definition in Ifx_ASCLIN.IOCR.B.CTS
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   122   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   123  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   124  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   125      IfxAsclin_CtsInputSelect_0,     /**< \brief CTS input pin 0  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   126      IfxAsclin_CtsInputSelect_1,     /**< \brief CTS input pin 1  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   127      IfxAsclin_CtsInputSelect_2,     /**< \brief CTS input pin 2  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   128      IfxAsclin_CtsInputSelect_3      /**< \brief CTS input pin 3  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   129  } IfxAsclin_CtsInputSelect;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   130  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   131  /** \brief Number of bits per transfer\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   132   * Definition in Ifx_ASCLIN.FRAMECON.B.DATALEN
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   133   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   134  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   135  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   136      IfxAsclin_DataLength_1 = 0,      /**< \brief number of bits per transfer 0  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   137      IfxAsclin_DataLength_2,          /**< \brief number of bits per transfer 1  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   138      IfxAsclin_DataLength_3,          /**< \brief number of bits per transfer 2  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   139      IfxAsclin_DataLength_4,          /**< \brief number of bits per transfer 3  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   140      IfxAsclin_DataLength_5,          /**< \brief number of bits per transfer 4  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   141      IfxAsclin_DataLength_6,          /**< \brief number of bits per transfer 5  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   142      IfxAsclin_DataLength_7,          /**< \brief number of bits per transfer 6  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   143      IfxAsclin_DataLength_8,          /**< \brief number of bits per transfer 7  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   144      IfxAsclin_DataLength_9,          /**< \brief number of bits per transfer 8  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   145      IfxAsclin_DataLength_10,         /**< \brief number of bits per transfer 9  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   146      IfxAsclin_DataLength_11,         /**< \brief number of bits per transfer 10  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   147      IfxAsclin_DataLength_12,         /**< \brief number of bits per transfer 11  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   148      IfxAsclin_DataLength_13,         /**< \brief number of bits per transfer 12  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   149      IfxAsclin_DataLength_14,         /**< \brief number of bits per transfer 13  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   150      IfxAsclin_DataLength_15,         /**< \brief number of bits per transfer 14  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   151      IfxAsclin_DataLength_16          /**< \brief number of bits per transfer 15  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   152  } IfxAsclin_DataLength;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   153  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   154  /** \brief Defines the basic operating mode of the module. Changing the mode must be done by switching first to initialize mode, and then to the other mode.\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   155   * Definition in Ifx_ASCLIN.FRAMECON.B.MODE
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   156   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   157  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   158  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   159      IfxAsclin_FrameMode_initialise = 0,  /**< \brief initialise mode */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   160      IfxAsclin_FrameMode_asc        = 1,  /**< \brief asc mode */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   161      IfxAsclin_FrameMode_spi        = 2,  /**< \brief spi mode */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   162      IfxAsclin_FrameMode_lin        = 3   /**< \brief lin mode */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   163  } IfxAsclin_FrameMode;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   164  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   165  /** \brief Defines if LIN frame shall consist of a header and response or of a header only.\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   166   * Definition in Ifx_ASCLIN.DATCON.B.HO
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   167   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   168  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   169  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   170      IfxAsclin_HeaderResponseSelect_headerAndResponse = 0,  /**< \brief header and response expected */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   171      IfxAsclin_HeaderResponseSelect_headerOnly        = 1   /**< \brief header only expected */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   172  } IfxAsclin_HeaderResponseSelect;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   173  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   174  /** \brief Defines the duration of the IDLE delay in bit times.\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   175   * SPI mode: this is the idle time between the frames.\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   176   * ASC and LIN mode: this is the pause inserted between transmission of bytes.\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   177   * Definition in Ifx_ASCLIN.FRAMECON.B.IDLE
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   178   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   179  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   180  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   181      IfxAsclin_IdleDelay_0,     /**< \brief idle delay in 0 bit times  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   182      IfxAsclin_IdleDelay_1,     /**< \brief idle delay in 1 bit times  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   183      IfxAsclin_IdleDelay_2,     /**< \brief idle delay in 2 bit times  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   184      IfxAsclin_IdleDelay_3,     /**< \brief idle delay in 3 bit times  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   185      IfxAsclin_IdleDelay_4,     /**< \brief idle delay in 4 bit times  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   186      IfxAsclin_IdleDelay_5,     /**< \brief idle delay in 5 bit times  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   187      IfxAsclin_IdleDelay_6,     /**< \brief idle delay in 6 bit times  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   188      IfxAsclin_IdleDelay_7      /**< \brief idle delay in 7 bit times  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   189  } IfxAsclin_IdleDelay;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   190  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   191  /** \brief Defines the leading delay in bit times in SPI mode. ASC mode: not applicable.\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   192   * LIN mode: delay between the end of the break and the start of the sync character.\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   193   * Definition in Ifx_ASCLIN.FRAMECON.B.LEAD
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   194   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   195  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   196  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   197      IfxAsclin_LeadDelay_0,     /**< \brief lead delay in 0 bit times  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   198      IfxAsclin_LeadDelay_1,     /**< \brief lead delay in 1 bit times  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   199      IfxAsclin_LeadDelay_2,     /**< \brief lead delay in 2 bit times  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   200      IfxAsclin_LeadDelay_3,     /**< \brief lead delay in 3 bit times  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   201      IfxAsclin_LeadDelay_4,     /**< \brief lead delay in 4 bit times  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   202      IfxAsclin_LeadDelay_5,     /**< \brief lead delay in 5 bit times  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   203      IfxAsclin_LeadDelay_6,     /**< \brief lead delay in 6 bit times  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   204      IfxAsclin_LeadDelay_7      /**< \brief lead delay in 7 bit times  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   205  } IfxAsclin_LeadDelay;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   206  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   207  /** \brief Configures if the module in LIN mode operates as master or slave\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   208   * Definition in Ifx_ASCLIN.LIN.CON.B.MS
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   209   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   210  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   211  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   212      IfxAsclin_LinMode_slave  = 0, /**< \brief operates in slave mode */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   213      IfxAsclin_LinMode_master = 1  /**< \brief operates in master mode */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   214  } IfxAsclin_LinMode;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   215  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   216  /** \brief Defines the timeout threshold of RESPOSE bit is for LIN response timeout or LIN frame timeout.\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   217   * Definition in Ifx_ASCLIN.DATCON.B.RM
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   218   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   219  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   220  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   221      IfxAsclin_LinResponseTimeoutMode_frameTimeout    = 0, /**< \brief timeout threshold is for frame */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   222      IfxAsclin_LinResponseTimeoutMode_responseTimeout = 1  /**< \brief timeout threshold is for reponse */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   223  } IfxAsclin_LinResponseTimeoutMode;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   224  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   225  /** \brief Defines the bit length in ticks in the range of 1 to 16. The lengths of 1 to 3 are not allowed\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   226   * Definition in Ifx_ASCLIN.BITCON.B.OVERSAMPLING
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   227   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   228  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   229  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   230      IfxAsclin_OversamplingFactor_4  = 3,   /**< \brief oversampling factor 4 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   231      IfxAsclin_OversamplingFactor_5  = 4,   /**< \brief oversampling factor 5 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   232      IfxAsclin_OversamplingFactor_6  = 5,   /**< \brief oversampling factor 6 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   233      IfxAsclin_OversamplingFactor_7  = 6,   /**< \brief oversampling factor 7 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   234      IfxAsclin_OversamplingFactor_8  = 7,   /**< \brief oversampling factor 8 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   235      IfxAsclin_OversamplingFactor_9  = 8,   /**< \brief oversampling factor 9 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   236      IfxAsclin_OversamplingFactor_10 = 9,   /**< \brief oversampling factor 10 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   237      IfxAsclin_OversamplingFactor_11 = 10,  /**< \brief oversampling factor 11 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   238      IfxAsclin_OversamplingFactor_12 = 11,  /**< \brief oversampling factor 12 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   239      IfxAsclin_OversamplingFactor_13 = 12,  /**< \brief oversampling factor 13 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   240      IfxAsclin_OversamplingFactor_14 = 13,  /**< \brief oversampling factor 14 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   241      IfxAsclin_OversamplingFactor_15 = 14,  /**< \brief oversampling factor 15 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   242      IfxAsclin_OversamplingFactor_16 = 15   /**< \brief oversampling factor 16 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   243  } IfxAsclin_OversamplingFactor;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   244  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   245  /** \brief Type of parity bit attached to data bits\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   246   * Definition in Ifx_ASCLIN.FRAMECON.B.ODD
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   247   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   248  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   249  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   250      IfxAsclin_ParityType_even = 0,  /**< \brief even parity */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   251      IfxAsclin_ParityType_odd  = 1   /**< \brief odd parity */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   252  } IfxAsclin_ParityType;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   253  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   254  /** \brief Receive buffer mode\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   255   * Definition in Ifx_ASCLIN.RXFIFOCON.B.BUF
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   256   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   257  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   258  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   259      IfxAsclin_ReceiveBufferMode_rxFifo   = 0, /**< \brief RxFIFO mode */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   260      IfxAsclin_ReceiveBufferMode_rxBuffer = 1  /**< \brief single stage Rx buffer */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   261  } IfxAsclin_ReceiveBufferMode;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   262  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   263  /** \brief Polarity of the RTS and CTS signals\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   264   * Definition in Ifx_ASCLIN.IOCR.B.RCPOL
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   265   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   266  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   267  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   268      IfxAsclin_RtsCtsPolarity_activeHigh = 0,  /**< \brief ready/clear are active-high */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   269      IfxAsclin_RtsCtsPolarity_activeLow  = 1   /**< \brief ready/clear are active-low */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   270  } IfxAsclin_RtsCtsPolarity;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   271  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   272  /** \brief Defines the filling level that triggers a drain (RX) interrupt or DMA access\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   273   * Definition in Ifx_ASCLIN.RXFIFOCON.B.INTLEVEL
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   274   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   275  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   276  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   277      IfxAsclin_RxFifoInterruptLevel_1,     /**< \brief RX FIFO level 1  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   278      IfxAsclin_RxFifoInterruptLevel_2,     /**< \brief RX FIFO level 2  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   279      IfxAsclin_RxFifoInterruptLevel_3,     /**< \brief RX FIFO level 3  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   280      IfxAsclin_RxFifoInterruptLevel_4,     /**< \brief RX FIFO level 4  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   281      IfxAsclin_RxFifoInterruptLevel_5,     /**< \brief RX FIFO level 5  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   282      IfxAsclin_RxFifoInterruptLevel_6,     /**< \brief RX FIFO level 6  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   283      IfxAsclin_RxFifoInterruptLevel_7,     /**< \brief RX FIFO level 7  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   284      IfxAsclin_RxFifoInterruptLevel_8,     /**< \brief RX FIFO level 8  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   285      IfxAsclin_RxFifoInterruptLevel_9,     /**< \brief RX FIFO level 9  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   286      IfxAsclin_RxFifoInterruptLevel_10,    /**< \brief RX FIFO level 10  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   287      IfxAsclin_RxFifoInterruptLevel_11,    /**< \brief RX FIFO level 11  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   288      IfxAsclin_RxFifoInterruptLevel_12,    /**< \brief RX FIFO level 12  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   289      IfxAsclin_RxFifoInterruptLevel_13,    /**< \brief RX FIFO level 13  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   290      IfxAsclin_RxFifoInterruptLevel_14,    /**< \brief RX FIFO level 14  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   291      IfxAsclin_RxFifoInterruptLevel_15,    /**< \brief RX FIFO level 15  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   292      IfxAsclin_RxFifoInterruptLevel_16     /**< \brief RX FIFO level 16  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   293  } IfxAsclin_RxFifoInterruptLevel;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   294  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   295  /** \brief Defines the number of bytes read from the Rx FIFO with one FPI bus read\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   296   * Definition in Ifx_ASCLIN.RXFIFOCON.B.OUTW
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   297   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   298  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   299  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   300      IfxAsclin_RxFifoOutletWidth_0,     /**< \brief number of bytes 0  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   301      IfxAsclin_RxFifoOutletWidth_1,     /**< \brief number of bytes 1  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   302      IfxAsclin_RxFifoOutletWidth_2,     /**< \brief number of bytes 2  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   303      IfxAsclin_RxFifoOutletWidth_3      /**< \brief number of bytes 3  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   304  } IfxAsclin_RxFifoOutletWidth;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   305  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   306  /** \brief Alternate input selection for Rx signal.\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   307   * Definition in Ifx_ASCLIN.IOCR.B.ALTI
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   308   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   309  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   310  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   311      IfxAsclin_RxInputSelect_0,     /**< \brief alternate input selection 0  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   312      IfxAsclin_RxInputSelect_1,     /**< \brief alternate input selection 1  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   313      IfxAsclin_RxInputSelect_2,     /**< \brief alternate input selection 2  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   314      IfxAsclin_RxInputSelect_3,     /**< \brief alternate input selection 3  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   315      IfxAsclin_RxInputSelect_4,     /**< \brief alternate input selection 4  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   316      IfxAsclin_RxInputSelect_5,     /**< \brief alternate input selection 5  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   317      IfxAsclin_RxInputSelect_6,     /**< \brief alternate input selection 6  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   318      IfxAsclin_RxInputSelect_7      /**< \brief alternate input selection 7  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   319  } IfxAsclin_RxInputSelect;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   320  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   321  /** \brief Sample point position\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   322   * Definition in Ifx_ASCLIN.BITCON.B.SAMPLEPOINT
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   323   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   324  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   325  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   326      IfxAsclin_SamplePointPosition_1  = 1,   /**< \brief sample point position at 1 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   327      IfxAsclin_SamplePointPosition_2  = 2,   /**< \brief sample point position at 2 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   328      IfxAsclin_SamplePointPosition_3  = 3,   /**< \brief sample point position at 3 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   329      IfxAsclin_SamplePointPosition_4  = 4,   /**< \brief sample point position at 4 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   330      IfxAsclin_SamplePointPosition_5  = 5,   /**< \brief sample point position at 5 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   331      IfxAsclin_SamplePointPosition_6  = 6,   /**< \brief sample point position at 6 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   332      IfxAsclin_SamplePointPosition_7  = 7,   /**< \brief sample point position at 7 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   333      IfxAsclin_SamplePointPosition_8  = 8,   /**< \brief sample point position at 8 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   334      IfxAsclin_SamplePointPosition_9  = 9,   /**< \brief sample point position at 9 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   335      IfxAsclin_SamplePointPosition_10 = 10,  /**< \brief sample point position at 10 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   336      IfxAsclin_SamplePointPosition_11 = 11,  /**< \brief sample point position at 11 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   337      IfxAsclin_SamplePointPosition_12 = 12,  /**< \brief sample point position at 12 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   338      IfxAsclin_SamplePointPosition_13 = 13,  /**< \brief sample point position at 13 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   339      IfxAsclin_SamplePointPosition_14 = 14,  /**< \brief sample point position at 14 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   340      IfxAsclin_SamplePointPosition_15 = 15   /**< \brief sample point position at 15 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   341  } IfxAsclin_SamplePointPosition;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   342  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   343  /** \brief Number of samples per bit, sample mode/medianfilter\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   344   * Definition in Ifx_ASCLIN.BITCON.B.SM
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   345   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   346  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   347  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   348      IfxAsclin_SamplesPerBit_one   = 0, /**< \brief one sample per bit */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   349      IfxAsclin_SamplesPerBit_three = 1  /**< \brief three samples per bit */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   350  } IfxAsclin_SamplesPerBit;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   351  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   352  /** \brief SPI mode: defines the shift direction of the shift register.\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   353   * ASC and LIN mode: should be set to 0.\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   354   * Definition in Ifx_ASCLIN.FRAMECON.B.MSB
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   355   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   356  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   357  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   358      IfxAsclin_ShiftDirection_lsbFirst = 0,  /**< \brief LSB first */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   359      IfxAsclin_ShiftDirection_msbFirst = 1   /**< \brief MSB first */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   360  } IfxAsclin_ShiftDirection;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   361  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   362  /** \brief Defines the idle level of the SLSO signal, which is the level.\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   363   * Outside the data transmission, leading and trailing time intervals.\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   364   * Definition in Ifx_ASCLIN.IOCR.B.SPOL
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   365   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   366  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   367  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   368      IfxAsclin_SlavePolarity_idleLow  = 0, /**< \brief idle low */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   369      IfxAsclin_SlavePolarity_idlehigh = 1  /**< \brief idle high */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   370  } IfxAsclin_SlavePolarity;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   371  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   372  /** \brief Enable/disable the sensitivity of the module to sleep signal\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   373   * Definition in Ifx_ASCLIN.CLC.B.EDIS
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   374   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   375  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   376  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   377      IfxAsclin_SleepMode_enable  = 0, /**< \brief enables sleep mode */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   378      IfxAsclin_SleepMode_disable = 1  /**< \brief disables sleep mode */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   379  } IfxAsclin_SleepMode;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   380  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   381  /** \brief Error status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   382   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   383  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   384  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   385      IfxAsclin_Status_configurationError = 0,  /**< \brief Configuration error */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   386      IfxAsclin_Status_noError            = 1   /**< \brief No error */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   387  } IfxAsclin_Status;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   388  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   389  /** \brief ASC and LIN mode: number of stop bits (0 is not allowed), SPI mode: trailing delay.\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   390   * Definition in Ifx_ASCLIN.FRAMECON.B.STOP
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   391   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   392  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   393  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   394      IfxAsclin_StopBit_0,     /**< \brief number of stop bits 0  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   395      IfxAsclin_StopBit_1,     /**< \brief number of stop bits 1  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   396      IfxAsclin_StopBit_2,     /**< \brief number of stop bits 2  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   397      IfxAsclin_StopBit_3,     /**< \brief number of stop bits 3  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   398      IfxAsclin_StopBit_4,     /**< \brief number of stop bits 4  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   399      IfxAsclin_StopBit_5,     /**< \brief number of stop bits 5  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   400      IfxAsclin_StopBit_6,     /**< \brief number of stop bits 6  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   401      IfxAsclin_StopBit_7      /**< \brief number of stop bits 7  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   402  } IfxAsclin_StopBit;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   403  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   404  /** \brief OCDS Suspend Control (OCDS.SUS)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   405   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   406  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   407  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   408      IfxAsclin_SuspendMode_none = 0,  /**< \brief No suspend */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   409      IfxAsclin_SuspendMode_hard = 1,  /**< \brief Hard Suspend */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   410      IfxAsclin_SuspendMode_soft = 2   /**< \brief Soft Suspend */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   411  } IfxAsclin_SuspendMode;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   412  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   413  /** \brief Defines the number of bytes written to the Tx FIFO with one FPI bus write\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   414   * Definition in Ifx_ASCLIN.TXFIFOCON.B.INW
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   415   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   416  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   417  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   418      IfxAsclin_TxFifoInletWidth_0,     /**< \brief number of bytes 0  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   419      IfxAsclin_TxFifoInletWidth_1,     /**< \brief number of bytes 1  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   420      IfxAsclin_TxFifoInletWidth_2,     /**< \brief number of bytes 2  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   421      IfxAsclin_TxFifoInletWidth_3      /**< \brief number of bytes 3  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   422  } IfxAsclin_TxFifoInletWidth;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   423  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   424  /** \brief Defines the filling level that triggers a refill (TX) interrupt or DMA access\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   425   * Definition in Ifx_ASCLIN.TXFIFOCON.B.INTLEVEL
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   426   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   427  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   428  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   429      IfxAsclin_TxFifoInterruptLevel_0,     /**< \brief TX FIFO level 0  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   430      IfxAsclin_TxFifoInterruptLevel_1,     /**< \brief TX FIFO level 1  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   431      IfxAsclin_TxFifoInterruptLevel_2,     /**< \brief TX FIFO level 2  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   432      IfxAsclin_TxFifoInterruptLevel_3,     /**< \brief TX FIFO level 3  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   433      IfxAsclin_TxFifoInterruptLevel_4,     /**< \brief TX FIFO level 4  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   434      IfxAsclin_TxFifoInterruptLevel_5,     /**< \brief TX FIFO level 5  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   435      IfxAsclin_TxFifoInterruptLevel_6,     /**< \brief TX FIFO level 6  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   436      IfxAsclin_TxFifoInterruptLevel_7,     /**< \brief TX FIFO level 7  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   437      IfxAsclin_TxFifoInterruptLevel_8,     /**< \brief TX FIFO level 8  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   438      IfxAsclin_TxFifoInterruptLevel_9,     /**< \brief TX FIFO level 9  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   439      IfxAsclin_TxFifoInterruptLevel_10,    /**< \brief TX FIFO level 10  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   440      IfxAsclin_TxFifoInterruptLevel_11,    /**< \brief TX FIFO level 11  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   441      IfxAsclin_TxFifoInterruptLevel_12,    /**< \brief TX FIFO level 12  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   442      IfxAsclin_TxFifoInterruptLevel_13,    /**< \brief TX FIFO level 13  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   443      IfxAsclin_TxFifoInterruptLevel_14,    /**< \brief TX FIFO level 14  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   444      IfxAsclin_TxFifoInterruptLevel_15     /**< \brief TX FIFO level 15  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   445  } IfxAsclin_TxFifoInterruptLevel;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   446  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   447  /** \} */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   448  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   449  /** \addtogroup IfxLld_Asclin_Std_Operative
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   450   * \{ */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   451  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   452  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   453  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   454  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   455  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   456  /** \brief clears all the flags
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   457   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   458   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   459   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   460  IFX_INLINE void IfxAsclin_clearAllFlags(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   461  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   462  /** \brief Clears the break detected flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   463   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   464   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   465   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   466  IFX_INLINE void IfxAsclin_clearBreakDetectedFlag(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   467  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   468  /** \brief Clears the collision detection error flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   469   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   470   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   471   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   472  IFX_INLINE void IfxAsclin_clearCollisionDetectionErrorFlag(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   473  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   474  /** \brief Clears the falling edge detected flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   475   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   476   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   477   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   478  IFX_INLINE void IfxAsclin_clearFallingEdgeDetectedFlag(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   479  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   480  /** \brief Clears the frame error flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   481   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   482   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   483   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   484  IFX_INLINE void IfxAsclin_clearFrameErrorFlag(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   485  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   486  /** \brief Clears the header timeout flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   487   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   488   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   489   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   490  IFX_INLINE void IfxAsclin_clearHeaderTimeoutFlag(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   491  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   492  /** \brief Clears the kernel reset status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   493   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   494   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   495   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   496  IFX_INLINE void IfxAsclin_clearKernelResetStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   497  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   498  /** \brief Clears the auto baudrate detection error flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   499   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   500   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   501   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   502  IFX_INLINE void IfxAsclin_clearLinAutoBaudDetectionErrorFlag(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   503  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   504  /** \brief Clears the LIN checksum error flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   505   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   506   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   507   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   508  IFX_INLINE void IfxAsclin_clearLinChecksumErrorFlag(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   509  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   510  /** \brief Clears the LIN parity error flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   511   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   512   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   513   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   514  IFX_INLINE void IfxAsclin_clearLinParityErrorFlag(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   515  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   516  /** \brief Clears the parity error flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   517   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   518   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   519   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   520  IFX_INLINE void IfxAsclin_clearParityErrorFlag(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   521  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   522  /** \brief Clears the raising edge detected flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   523   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   524   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   525   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   526  IFX_INLINE void IfxAsclin_clearRaisingEdgeDetectedFlag(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   527  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   528  /** \brief Clears the response timeout flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   529   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   530   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   531   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   532  IFX_INLINE void IfxAsclin_clearResponseTimeoutFlag(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   533  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   534  /** \brief Clears the Rx FIFO level flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   535   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   536   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   537   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   538  IFX_INLINE void IfxAsclin_clearRxFifoFillLevelFlag(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   539  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   540  /** \brief Clears the Rx FIFO overflow flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   541   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   542   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   543   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   544  IFX_INLINE void IfxAsclin_clearRxFifoOverflowFlag(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   545  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   546  /** \brief Clears the Rx FIFO underflow flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   547   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   548   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   549   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   550  IFX_INLINE void IfxAsclin_clearRxFifoUnderflowFlag(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   551  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   552  /** \brief Clears the receive header end flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   553   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   554   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   555   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   556  IFX_INLINE void IfxAsclin_clearRxHeaderEndFlag(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   557  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   558  /** \brief Clears the receive response end flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   559   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   560   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   561   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   562  IFX_INLINE void IfxAsclin_clearRxResponseEndFlag(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   563  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   564  /** \brief Clears the transmission pending flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   565   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   566   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   567   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   568  IFX_INLINE void IfxAsclin_clearTransmissionCompletedFlag(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   569  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   570  /** \brief Clears the Tx FIFO level flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   571   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   572   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   573   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   574  IFX_INLINE void IfxAsclin_clearTxFifoFillLevelFlag(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   575  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   576  /** \brief Clears the Tx FIFO overflow flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   577   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   578   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   579   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   580  IFX_INLINE void IfxAsclin_clearTxFifoOverflowFlag(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   581  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   582  /** \brief Clears the transmit header end flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   583   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   584   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   585   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   586  IFX_INLINE void IfxAsclin_clearTxHeaderEndFlag(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   587  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   588  /** \brief Clears the transmit response end flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   589   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   590   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   591   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   592  IFX_INLINE void IfxAsclin_clearTxResponseEndFlag(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   593  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   594  /** \brief Flushes (empties) the Rx FIFO
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   595   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   596   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   597   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   598  IFX_INLINE void IfxAsclin_flushRxFifo(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   599  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   600  /** \brief Flushes (empties) the Tx FIFO
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   601   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   602   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   603   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   604  IFX_INLINE void IfxAsclin_flushTxFifo(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   605  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   606  /** \brief Sets the baudrate detection's lower limit
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   607   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   608   * \param limit value of the lower limit
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   609   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   610   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   611  IFX_INLINE void IfxAsclin_setBrdLowerlimt(Ifx_ASCLIN *asclin, uint8 limit);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   612  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   613  /** \brief Sets the baudrate detection's upper limit
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   614   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   615   * \param limit value of the upper limit
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   616   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   617   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   618  IFX_INLINE void IfxAsclin_setBrdUpperlimt(Ifx_ASCLIN *asclin, uint8 limit);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   619  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   620  /** \brief Sets the checksum injection
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   621   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   622   * \param csi checksum injection selection (not written / written)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   623   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   624   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   625  IFX_INLINE void IfxAsclin_setChecksumInjection(Ifx_ASCLIN *asclin, IfxAsclin_ChecksumInjection csi);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   626  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   627  /** \brief Sets the checksum mode
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   628   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   629   * \param mode checksum mode selection (classic / enhanced)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   630   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   631   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   632  IFX_INLINE void IfxAsclin_setChecksumMode(Ifx_ASCLIN *asclin, IfxAsclin_Checksum mode);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   633  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   634  /** \brief Sets the data length (number of bits per transfer)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   635   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   636   * \param length data length selection
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   637   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   638   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   639  IFX_INLINE void IfxAsclin_setDataLength(Ifx_ASCLIN *asclin, IfxAsclin_DataLength length);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   640  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   641  /** \brief Sets the denominator of the fractional divider
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   642   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   643   * \param denominator value of the denominator
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   644   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   645   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   646  IFX_INLINE void IfxAsclin_setDenominator(Ifx_ASCLIN *asclin, uint16 denominator);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   647  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   648  /** \brief Sets the disable module request
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   649   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   650   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   651   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   652  IFX_INLINE void IfxAsclin_setDisableModuleRequest(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   653  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   654  /** \brief Sets the enable module request
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   655   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   656   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   657   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   658  IFX_INLINE void IfxAsclin_setEnableModuleRequest(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   659  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   660  /** \brief Sets digital glitch filter depth
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   661   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   662   * \param depth digital glitch filter depth selection (1 to 63)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   663   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   664   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   665  IFX_INLINE void IfxAsclin_setFilterDepth(Ifx_ASCLIN *asclin, uint8 depth);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   666  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   667  /** \brief Sets the header response selection
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   668   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   669   * \param type type of selection (header and response or header only)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   670   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   671   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   672  IFX_INLINE void IfxAsclin_setHeaderResponseSelect(Ifx_ASCLIN *asclin, IfxAsclin_HeaderResponseSelect type);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   673  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   674  /** \brief Sets the idle delay
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   675   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   676   * \param delay idle delay selection
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   677   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   678   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   679  IFX_INLINE void IfxAsclin_setIdleDelay(Ifx_ASCLIN *asclin, IfxAsclin_IdleDelay delay);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   680  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   681  /** \brief Sets the kernal reset of the KRST1
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   682   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   683   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   684   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   685  IFX_INLINE void IfxAsclin_setKernelResetOne(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   686  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   687  /** \brief Sets the kernel reset of the KRST0
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   688   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   689   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   690   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   691  IFX_INLINE void IfxAsclin_setKernelResetZero(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   692  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   693  /** \brief Sets the lead delay
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   694   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   695   * \param delay lead delay selection
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   696   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   697   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   698  IFX_INLINE void IfxAsclin_setLeadDelay(Ifx_ASCLIN *asclin, IfxAsclin_LeadDelay delay);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   699  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   700  /** \brief Sets the LIN break length
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   701   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   702   * \param length value of the break length
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   703   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   704   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   705  IFX_INLINE void IfxAsclin_setLinBreakLength(Ifx_ASCLIN *asclin, uint8 length);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   706  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   707  /** \brief Sets the LIN header timeout
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   708   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   709   * \param timeout value of the header timeout
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   710   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   711   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   712  IFX_INLINE void IfxAsclin_setLinHeaderTimeout(Ifx_ASCLIN *asclin, uint8 timeout);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   713  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   714  /** \brief Sets the LIN mode of operation
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   715   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   716   * \param mode mode selection (slave / master)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   717   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   718   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   719  IFX_INLINE void IfxAsclin_setLinMode(Ifx_ASCLIN *asclin, IfxAsclin_LinMode mode);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   720  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   721  /** \brief Sets the LIN response timeout mode
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   722   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   723   * \param mode LIN response timeout mode selection
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   724   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   725   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   726  IFX_INLINE void IfxAsclin_setLinResponseTimeoutMode(Ifx_ASCLIN *asclin, IfxAsclin_LinResponseTimeoutMode mode);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   727  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   728  /** \brief Sets the LIN response timeout threshold
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   729   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   730   * \param threshold value of the tomeout threshold (1 to 256 bit times)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   731   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   732   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   733  IFX_INLINE void IfxAsclin_setLinResponseTimeoutThreshold(Ifx_ASCLIN *asclin, uint16 threshold);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   734  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   735  /** \brief Sets the numerator of the fractional divider
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   736   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   737   * \param numerator value of the numerator
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   738   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   739   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   740  IFX_INLINE void IfxAsclin_setNumerator(Ifx_ASCLIN *asclin, uint16 numerator);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   741  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   742  /** \brief Sets the division ratio of the baudrate post divider
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   743   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   744   * \param ovsFactor value of oversampling factor
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   745   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   746   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   747  IFX_INLINE void IfxAsclin_setOversampling(Ifx_ASCLIN *asclin, IfxAsclin_OversamplingFactor ovsFactor);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   748  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   749  /** \brief Sets the parity type
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   750   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   751   * \param type parity type selction (even / odd)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   752   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   753   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   754  IFX_INLINE void IfxAsclin_setParityType(Ifx_ASCLIN *asclin, IfxAsclin_ParityType type);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   755  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   756  /** \brief Sets the division ratio of the predivider (prescaler)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   757   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   758   * \param prescaler value of prescaler
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   759   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   760   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   761  IFX_INLINE void IfxAsclin_setPrescaler(Ifx_ASCLIN *asclin, uint16 prescaler);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   762  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   763  /** \brief Sets the receive buffer mode
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   764   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   765   * \param mode receive buffer mode selection (Rx FIFO or single stage Rx buffer)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   766   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   767   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   768  IFX_INLINE void IfxAsclin_setRxBufferMode(Ifx_ASCLIN *asclin, IfxAsclin_ReceiveBufferMode mode);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   769  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   770  /** \brief Sets the Tx FIFO interrupt level
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   771   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   772   * \param level interrupt level selection
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   773   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   774   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   775  IFX_INLINE void IfxAsclin_setRxFifoInterruptLevel(Ifx_ASCLIN *asclin, IfxAsclin_RxFifoInterruptLevel level);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   776  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   777  /** \brief Sets the receive FIFO outlet width
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   778   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   779   * \param width number of bytes read to the Rx FIFO with one FPI bus read
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   780   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   781   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   782  IFX_INLINE void IfxAsclin_setRxFifoOutletWidth(Ifx_ASCLIN *asclin, IfxAsclin_RxFifoOutletWidth width);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   783  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   784  /** \brief Sets the sample mode (number of samples per bit / median filter)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   785   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   786   * \param medianFilter value of the median filter
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   787   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   788   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   789  IFX_INLINE void IfxAsclin_setSampleMode(Ifx_ASCLIN *asclin, IfxAsclin_SamplesPerBit medianFilter);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   790  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   791  /** \brief Sets the sampling point position
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   792   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   793   * \param spPosition sample point position selection
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   794   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   795   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   796  IFX_INLINE void IfxAsclin_setSamplePointPosition(Ifx_ASCLIN *asclin, IfxAsclin_SamplePointPosition spPosition);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   797  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   798  /** \brief Sets the shift direction
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   799   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   800   * \param dir shift direction selection (LSB / MSB first)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   801   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   802   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   803  IFX_INLINE void IfxAsclin_setShiftDirection(Ifx_ASCLIN *asclin, IfxAsclin_ShiftDirection dir);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   804  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   805  /** \brief Sets the number of stop bits
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   806   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   807   * \param stopBit number of stop bits selection
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   808   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   809   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   810  IFX_INLINE void IfxAsclin_setStopBit(Ifx_ASCLIN *asclin, IfxAsclin_StopBit stopBit);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   811  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   812  /** \brief Sets the transmit header request flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   813   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   814   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   815   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   816  IFX_INLINE void IfxAsclin_setTransmitHeaderRequestFlag(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   817  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   818  /** \brief Sets the transmit response request flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   819   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   820   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   821   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   822  IFX_INLINE void IfxAsclin_setTransmitResponseRequestFlag(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   823  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   824  /** \brief Sets the transmission wake request flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   825   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   826   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   827   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   828  IFX_INLINE void IfxAsclin_setTransmitWakeRequestFlag(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   829  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   830  /** \brief Sets the transmit FIFO inlet width
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   831   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   832   * \param width number of bytes written to the Tx FIFO with one FPI bus write
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   833   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   834   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   835  IFX_INLINE void IfxAsclin_setTxFifoInletWidth(Ifx_ASCLIN *asclin, IfxAsclin_TxFifoInletWidth width);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   836  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   837  /** \brief Sets the Tx FIFO interrupt level
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   838   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   839   * \param level interrupt level selection
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   840   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   841   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   842  IFX_INLINE void IfxAsclin_setTxFifoInterruptLevel(Ifx_ASCLIN *asclin, IfxAsclin_TxFifoInterruptLevel level);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   843  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   844  /** \} */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   845  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   846  /** \addtogroup IfxLld_Asclin_Std_Utility
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   847   * \{ */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   848  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   849  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   850  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   851  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   852  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   853  /** \brief Returns the break detected flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   854   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   855   * \return break detected flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   856   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   857  IFX_INLINE boolean IfxAsclin_getBreakDetectedFlagStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   858  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   859  /** \brief Returns the clock source
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   860   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   861   * \return clock source
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   862   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   863  IFX_INLINE uint8 IfxAsclin_getClockSource(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   864  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   865  /** \brief Returns the clock status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   866   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   867   * \return clock status (off / on)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   868   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   869  IFX_INLINE boolean IfxAsclin_getClockStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   870  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   871  /** \brief Returns the collision detection error flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   872   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   873   * \return collision detection error flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   874   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   875  IFX_INLINE boolean IfxAsclin_getCollisionDetectionErrorFlagStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   876  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   877  /** \brief Returns  the falling edge detected flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   878   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   879   * \return falling edge detected flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   880   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   881  IFX_INLINE boolean IfxAsclin_getFallingEdgeDetectedFlagStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   882  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   883  /** \brief Returns the frame error flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   884   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   885   * \return frame error flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   886   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   887  IFX_INLINE boolean IfxAsclin_getFrameErrorFlagStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   888  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   889  /** \brief Returns the header timeout flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   890   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   891   * \return header timeout flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   892   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   893  IFX_INLINE boolean IfxAsclin_getHeaderTimeoutFlagStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   894  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   895  /** \brief Returns the kernel reset status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   896   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   897   * \return kernel reset status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   898   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   899  IFX_INLINE boolean IfxAsclin_getKernelResetStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   900  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   901  /** \brief Returns the LIN auto baudrate detection error flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   902   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   903   * \return LIN auto baudrate detection error flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   904   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   905  IFX_INLINE boolean IfxAsclin_getLinAutoBaudDetectionErrorFlagStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   906  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   907  /** \brief Returns the LIN checksum error flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   908   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   909   * \return LIN checksum error flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   910   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   911  IFX_INLINE boolean IfxAsclin_getLinChecksumErrorFlagStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   912  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   913  /** \brief Returns the LIN parity error flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   914   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   915   * \return LIN parity error flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   916   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   917  IFX_INLINE boolean IfxAsclin_getLinParityErrorFlagStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   918  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   919  /** \brief Returns the module status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   920   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   921   * \return module status (enabled / disabled)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   922   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   923  IFX_INLINE boolean IfxAsclin_getModuleStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   924  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   925  /** \brief Returns the parity error flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   926   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   927   * \return parity error flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   928   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   929  IFX_INLINE boolean IfxAsclin_getParityErrorFlagStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   930  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   931  /** \brief Returns the division ratio of the predivider (prescaler)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   932   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   933   * \return value of prescaler
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   934   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   935  IFX_INLINE uint16 IfxAsclin_getPrescaler(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   936  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   937  /** \brief Returns the raising edge detected flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   938   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   939   * \return raising edge detected flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   940   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   941  IFX_INLINE boolean IfxAsclin_getRaisingEdgeDetectedFlagStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   942  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   943  /** \brief Returns the received signal status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   944   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   945   * \return received signal status (0 is low & 1 is high)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   946   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   947  IFX_INLINE boolean IfxAsclin_getReceiveSignalStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   948  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   949  /** \brief Returns the response timeout flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   950   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   951   * \return response timeout flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   952   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   953  IFX_INLINE boolean IfxAsclin_getResponseTimeoutFlagStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   954  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   955  /** \brief Returns the current filling level of Tx FIFO
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   956   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   957   * \return current filling level of Rx FIFO
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   958   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   959  IFX_INLINE uint8 IfxAsclin_getRxFifoFillLevel(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   960  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   961  /** \brief Returns the Rx FIFO level flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   962   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   963   * \return Rx FIFO level flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   964   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   965  IFX_INLINE boolean IfxAsclin_getRxFifoFillLevelFlagStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   966  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   967  /** \brief Returns the receive FIFO inlet width
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   968   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   969   * \return number of bytes read to the Rx FIFO with one FPI bus read
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   970   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   971  IFX_INLINE uint8 IfxAsclin_getRxFifoOutletWidth(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   972  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   973  /** \brief Returns the Rx FIFO overflow flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   974   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   975   * \return Rx FIFO overflow flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   976   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   977  IFX_INLINE boolean IfxAsclin_getRxFifoOverflowFlagStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   978  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   979  /** \brief Returns the Rx FIFO underflow flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   980   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   981   * \return Rx FIFO underflow flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   982   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   983  IFX_INLINE boolean IfxAsclin_getRxFifoUnderflowFlagStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   984  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   985  /** \brief Returns the receive header end flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   986   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   987   * \return receive header end flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   988   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   989  IFX_INLINE boolean IfxAsclin_getRxHeaderEndFlagStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   990  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   991  /** \brief Returns the receive response end flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   992   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   993   * \return receive response end flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   994   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   995  IFX_INLINE boolean IfxAsclin_getRxResponseEndFlagStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   996  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   997  /** \brief Returns the transmission pending flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   998   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   999   * \return transmission pending flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1000   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1001  IFX_INLINE boolean IfxAsclin_getTransmissionCompletedFlagStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1002  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1003  /** \brief Returns the transmit signal status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1004   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1005   * \return transmit signal status (0 is low & 1 is high)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1006   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1007  IFX_INLINE boolean IfxAsclin_getTransmitSignalStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1008  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1009  /** \brief Returns the current filling level of Tx FIFO
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1010   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1011   * \return current filling level of Tx FIFO
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1012   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1013  IFX_INLINE uint8 IfxAsclin_getTxFifoFillLevel(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1014  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1015  /** \brief Returns the Tx FIFO level flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1016   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1017   * \return Tx FIFO level flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1018   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1019  IFX_INLINE boolean IfxAsclin_getTxFifoFillLevelFlagStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1020  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1021  /** \brief Returns the transmit FIFO inlet width
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1022   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1023   * \return number of bytes written to the Tx FIFO with one FPI bus write
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1024   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1025  IFX_INLINE uint8 IfxAsclin_getTxFifoInletWidth(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1026  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1027  /** \brief Returns the Tx FIFO overflow flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1028   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1029   * \return Tx FIFO overflow flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1030   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1031  IFX_INLINE boolean IfxAsclin_getTxFifoOverflowFlagStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1032  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1033  /** \brief Returns the transmit header end flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1034   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1035   * \return transmit header end flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1036   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1037  IFX_INLINE boolean IfxAsclin_getTxHeaderEndFlagStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1038  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1039  /** \brief Returns the transmit response end flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1040   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1041   * \return transmit response end flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1042   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1043  IFX_INLINE boolean IfxAsclin_getTxResponseEndFlagStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1044  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1045  /** \brief Sets the sensitivity of the module to sleep signal
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1046   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1047   * \param mode mode selection (enable / disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1048   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1049   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1050  IFX_INLINE void IfxAsclin_setSleepMode(Ifx_ASCLIN *asclin, IfxAsclin_SleepMode mode);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1051  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1052  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1053  /*-------------------------Global Function Prototypes-------------------------*/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1054  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1055  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1056  /** \brief API to get the address for ASCLIN HW module register memory map
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1057   * \param asclin Resource index of the ASCLIN
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1058   * \return ASCLIN module register address
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1059   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1060  IFX_EXTERN Ifx_ASCLIN *IfxAsclin_getAddress(IfxAsclin_Index asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1061  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1062  /** \brief Returns the ASCLIN module FA frequency in Hz
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1063   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1064   * \return Returns the ASCLIN module FA frequency in Hz
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1065   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1066  IFX_EXTERN float32 IfxAsclin_getFaFrequency(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1067  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1068  /** \brief API to get the resource index of the ASCLIN specified.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1069   * \return asclin resource index
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1070   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1071  IFX_EXTERN IfxAsclin_Index IfxAsclin_getIndex(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1072  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1073  /** \brief Returns the OVS frequency
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1074   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1075   * \return Returns the ASCLIN module OVS frequency in Hz
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1076   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1077  IFX_EXTERN float32 IfxAsclin_getOvsFrequency(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1078  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1079  /** \brief Returns the PD frequency
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1080   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1081   * \return Returns the ASCLIN module PD frequency in Hz
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1082   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1083  IFX_EXTERN float32 IfxAsclin_getPdFrequency(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1084  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1085  /** \brief Returns the SHIFT frequency
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1086   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1087   * \return Returns the ASCLIN module SHIFT frequency in Hz
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1088   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1089  IFX_EXTERN float32 IfxAsclin_getShiftFrequency(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1090  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1091  /** \brief resets Asclin kernel
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1092   * \param asclin pointer to ASCLIN resgisters
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1093   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1094   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1095  IFX_EXTERN void IfxAsclin_resetModule(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1096  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1097  /** \} */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1098  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1099  /** \addtogroup IfxLld_Asclin_Std_Configuration
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1100   * \{ */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1101  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1102  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1103  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1104  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1105  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1106  /** \brief disables all flags
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1107   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1108   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1109   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1110  IFX_INLINE void IfxAsclin_disableAllFlags(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1111  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1112  /** \brief Enables/disables the auto baudrate detection
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1113   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1114   * \param enable choice (enable / disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1115   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1116   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1117  IFX_INLINE void IfxAsclin_enableAutoBaudrateDetection(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1118  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1119  /** \brief Enables/disables break detected flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1120   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1121   * \param enable choice (enable / disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1122   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1123   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1124  IFX_INLINE void IfxAsclin_enableBreakDetectedFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1125  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1126  /** \brief Enables/disables the collision detection
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1127   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1128   * \param enable choice (enable/disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1129   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1130   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1131  IFX_INLINE void IfxAsclin_enableCollisionDetection(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1132  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1133  /** \brief Enables/disables LIN collision detection error flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1134   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1135   * \param enable choice (enable / disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1136   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1137   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1138  IFX_INLINE void IfxAsclin_enableCollisionDetectionErrorFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1139  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1140  /** \brief Enables/disables CTS
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1141   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1142   * \param enable choice (enable/disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1143   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1144   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1145  IFX_INLINE void IfxAsclin_enableCts(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1146  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1147  /** \brief Enables/disables falling edge detected flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1148   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1149   * \param enable choice (enable / disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1150   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1151   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1152  IFX_INLINE void IfxAsclin_enableFallingEdgeDetectedFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1153  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1154  /** \brief Enables/disables frame error flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1155   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1156   * \param enable choice (enable / disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1157   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1158   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1159  IFX_INLINE void IfxAsclin_enableFrameErrorFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1160  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1161  /** \brief Enables/disables the hardware checksum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1162   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1163   * \param enable choice (enable / disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1164   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1165   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1166  IFX_INLINE void IfxAsclin_enableHardwareChecksum(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1167  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1168  /** \brief Enables/disables header timeout flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1169   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1170   * \param enable choice (enable / disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1171   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1172   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1173  IFX_INLINE void IfxAsclin_enableHeaderTimeoutFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1174  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1175  /** \brief Enables/disables LIN auto baudrate detection error flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1176   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1177   * \param enable choice (enable / disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1178   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1179   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1180  IFX_INLINE void IfxAsclin_enableLinAutoBaudDetectionErrorFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1181  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1182  /** \brief Enables/disables LIN checksum error flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1183   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1184   * \param enable choice (enable / disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1185   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1186   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1187  IFX_INLINE void IfxAsclin_enableLinChecksumErrorFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1188  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1189  /** \brief Enables/disables LIN parity error flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1190   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1191   * \param enable choice (enable / disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1192   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1193   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1194  IFX_INLINE void IfxAsclin_enableLinParityErrorFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1195  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1196  /** \brief Enables/disables the loop back mode
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1197   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1198   * \param enable choice (enable/disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1199   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1200   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1201  IFX_INLINE void IfxAsclin_enableLoopBackMode(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1202  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1203  /** \brief Enables/disables the parity bit attachment to tha data bits
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1204   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1205   * \param enable choice (enable/disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1206   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1207   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1208  IFX_INLINE void IfxAsclin_enableParity(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1209  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1210  /** \brief Enables/disables parity error flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1211   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1212   * \param enable choice (enable / disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1213   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1214   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1215  IFX_INLINE void IfxAsclin_enableParityErrorFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1216  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1217  /** \brief Enables/disables raising edge detected flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1218   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1219   * \param enable choice (enable / disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1220   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1221   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1222  IFX_INLINE void IfxAsclin_enableRaisingEdgeDetectedFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1223  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1224  /** \brief Enables/disables response timeout flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1225   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1226   * \param enable choice (enable / disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1227   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1228   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1229  IFX_INLINE void IfxAsclin_enableResponseTimeoutFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1230  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1231  /** \brief Enables/disables Rx FIFO level flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1232   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1233   * \param enable choice (enable / disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1234   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1235   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1236  IFX_INLINE void IfxAsclin_enableRxFifoFillLevelFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1237  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1238  /** \brief Enables/disables the receive FIFO outlet to allow filling of Rx FIFO through shift register
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1239   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1240   * \param enable choice (enable/disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1241   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1242   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1243  IFX_INLINE void IfxAsclin_enableRxFifoInlet(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1244  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1245  /** \brief Enables/disables Rx FIFO overflow flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1246   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1247   * \param enable choice (enable / disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1248   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1249   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1250  IFX_INLINE void IfxAsclin_enableRxFifoOverflowFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1251  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1252  /** \brief Enables/disables Rx FIFO underflow flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1253   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1254   * \param enable choice (enable / disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1255   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1256   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1257  IFX_INLINE void IfxAsclin_enableRxFifoUnderflowFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1258  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1259  /** \brief Enables/disables receive header end flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1260   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1261   * \param enable choice (enable / disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1262   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1263   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1264  IFX_INLINE void IfxAsclin_enableRxHeaderEndFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1265  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1266  /** \brief Enables/disables receive response end flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1267   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1268   * \param enable choice (enable / disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1269   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1270   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1271  IFX_INLINE void IfxAsclin_enableRxResponseEndFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1272  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1273  /** \brief Enables/disables transmission completed flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1274   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1275   * \param enable choice (enable / disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1276   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1277   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1278  IFX_INLINE void IfxAsclin_enableTransmissionCompletedFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1279  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1280  /** \brief Enables/disables Tx FIFO level flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1281   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1282   * \param enable choice (enable / disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1283   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1284   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1285  IFX_INLINE void IfxAsclin_enableTxFifoFillLevelFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1286  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1287  /** \brief Enables/disables the transmit FIFO outlet to allow transmission
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1288   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1289   * \param enable choice (enable/disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1290   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1291   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1292  IFX_INLINE void IfxAsclin_enableTxFifoOutlet(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1293  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1294  /** \brief Enables/disables Tx FIFO overflow flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1295   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1296   * \param enable choice (enable / disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1297   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1298   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1299  IFX_INLINE void IfxAsclin_enableTxFifoOverflowFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1300  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1301  /** \brief Enables/disables transmit header end flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1302   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1303   * \param enable choice (enable / disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1304   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1305   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1306  IFX_INLINE void IfxAsclin_enableTxHeaderEndFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1307  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1308  /** \brief Enables/disables transmit response end flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1309   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1310   * \param enable choice (enable / disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1311   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1312   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1313  IFX_INLINE void IfxAsclin_enableTxResponseEndFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1314  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1315  /** \brief Returns the module's suspend state.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1316   * TRUE :if module is suspended.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1317   * FALSE:if module is not yet suspended.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1318   * \param asclin Pointer to ASCLIN module registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1319   * \return Suspend status (TRUE / FALSE)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1320   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1321  IFX_INLINE boolean IfxAsclin_isModuleSuspended(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1322  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1323  /** \brief Selects the clock polarity
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1324   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1325   * \param cpol CPOL selection
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1326   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1327   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1328  IFX_INLINE void IfxAsclin_setClockPolarity(Ifx_ASCLIN *asclin, IfxAsclin_ClockPolarity cpol);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1329  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1330  /** \brief Selects the CTS input pin
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1331   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1332   * \param ctsi CTS input pin selection
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1333   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1334   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1335  IFX_INLINE void IfxAsclin_setCtsInput(Ifx_ASCLIN *asclin, IfxAsclin_CtsInputSelect ctsi);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1336  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1337  /** \brief Selects the module's mode of operation
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1338   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1339   * \param mode mode selction
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1340   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1341   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1342  IFX_INLINE void IfxAsclin_setFrameMode(Ifx_ASCLIN *asclin, IfxAsclin_FrameMode mode);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1343  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1344  /** \brief Selects the RTS/CTS polarity
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1345   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1346   * \param rcpol RCPOL selection
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1347   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1348   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1349  IFX_INLINE void IfxAsclin_setRtsCtsPolarity(Ifx_ASCLIN *asclin, IfxAsclin_RtsCtsPolarity rcpol);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1350  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1351  /** \brief Selects the alternate input for Rx signal
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1352   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1353   * \param alti alternate input selection of Rx signal
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1354   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1355   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1356  IFX_INLINE void IfxAsclin_setRxInput(Ifx_ASCLIN *asclin, IfxAsclin_RxInputSelect alti);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1357  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1358  /** \brief Selects the slave polarity
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1359   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1360   * \param spol SPOL selection
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1361   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1362   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1363  IFX_INLINE void IfxAsclin_setSlavePolarity(Ifx_ASCLIN *asclin, IfxAsclin_SlavePolarity spol);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1364  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1365  /** \brief Configure the Module to Hard/Soft suspend mode.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1366   * Note: The api works only when the OCDS is enabled and in Supervisor Mode. When OCDS is disabled the OCS suspend control is ineffective.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1367   * \param asclin Pointer to ASCLIN module registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1368   * \param mode Module suspend mode
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1369   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1370   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1371  IFX_INLINE void IfxAsclin_setSuspendMode(Ifx_ASCLIN *asclin, IfxAsclin_SuspendMode mode);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1372  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1373  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1374  /*-------------------------Global Function Prototypes-------------------------*/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1375  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1376  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1377  /** \brief Set the bit timing
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1378   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1379   * \note this function required FA source and the PD frequency to be set to their final values
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1380   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1381   * \param baudrate Required baudrate
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1382   * \param oversampling The oversampling factor
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1383   * \param samplepoint The sample point position
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1384   * \param medianFilter Number of samples per bit (median filter)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1385   * \return TRUE if configuration was successfull
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1386   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1387  IFX_EXTERN boolean IfxAsclin_setBitTiming(Ifx_ASCLIN *asclin, float32 baudrate, IfxAsclin_OversamplingFactor oversampling, IfxAsclin_SamplePointPosition samplepoint, IfxAsclin_SamplesPerBit medianFilter);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1388  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1389  /** \} */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1390  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1391  /** \addtogroup IfxLld_Asclin_Std_External
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1392   * \{ */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1393  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1394  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1395  /*-------------------------Global Function Prototypes-------------------------*/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1396  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1397  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1398  /** \brief Disables the module
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1399   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1400   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1401   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1402  IFX_EXTERN void IfxAsclin_disableModule(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1403  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1404  /** \brief Enables the ASC error interrupt Flags
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1405   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1406   * \param parEnable parity error
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1407   * \param rfoEnable Rx FIFO overflow error
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1408   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1409   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1410  IFX_EXTERN void IfxAsclin_enableAscErrorFlags(Ifx_ASCLIN *asclin, boolean parEnable, boolean rfoEnable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1411  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1412  /** \brief Enables the module
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1413   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1414   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1415   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1416  IFX_EXTERN void IfxAsclin_enableModule(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1417  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1418  /** \brief Returns the SRC pointer for ERR
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1419   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1420   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1421  IFX_EXTERN volatile Ifx_SRC_SRCR *IfxAsclin_getSrcPointerEr(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1422  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1423  /** \brief Returns the  SRC pointer for Rx
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1424   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1425   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1426  IFX_EXTERN volatile Ifx_SRC_SRCR *IfxAsclin_getSrcPointerRx(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1427  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1428  /** \brief Returns the SRC pointer for Tx
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1429   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1430   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1431  IFX_EXTERN volatile Ifx_SRC_SRCR *IfxAsclin_getSrcPointerTx(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1432  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1433  /** \brief Reads data up to 16 bits
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1434   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1435   * \param data Array where the read data shall be stored
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1436   * \param count number of items to read
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1437   * \return number of items that could not be read
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1438   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1439  IFX_EXTERN uint32 IfxAsclin_read16(Ifx_ASCLIN *asclin, uint16 *data, uint32 count);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1440  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1441  /** \brief Reads data up to 32 bits
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1442   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1443   * \param data Array where the read data shall be stored
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1444   * \param count number of items to read
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1445   * \return number of items that could not be read
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1446   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1447  IFX_EXTERN uint32 IfxAsclin_read32(Ifx_ASCLIN *asclin, uint32 *data, uint32 count);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1448  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1449  /** \brief Reads data up to 8 bits
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1450   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1451   * \param data Array where the read data shall be stored
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1452   * \param count number of items to read
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1453   * \return number of items that could not be read
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1454   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1455  IFX_EXTERN uint32 IfxAsclin_read8(Ifx_ASCLIN *asclin, uint8 *data, uint32 count);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1456  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1457  /** \brief Sets the baudrate bit fields
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1458   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1459   * \param prescaler division ratio of the predivider
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1460   * \param numerator numerator of the fractional divider
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1461   * \param denominator denominator of the fractional divider
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1462   * \param oversampling division ratio of the baudrate postdivider
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1463   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1464   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1465  IFX_EXTERN void IfxAsclin_setBaudrateBitFields(Ifx_ASCLIN *asclin, uint16 prescaler, uint16 numerator, uint16 denominator, IfxAsclin_OversamplingFactor oversampling);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1466  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1467  /** \brief Sets the  clock source
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1468   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1469   * \param clockSource clock source selection
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1470   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1471   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1472  IFX_EXTERN void IfxAsclin_setClockSource(Ifx_ASCLIN *asclin, IfxAsclin_ClockSource clockSource);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1473  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1474  /** \brief Writes data up to 16 bits
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1475   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1476   * \param data Array of data to be send
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1477   * \param count number of items to be send
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1478   * \return the number of items that could not be send
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1479   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1480  IFX_EXTERN uint32 IfxAsclin_write16(Ifx_ASCLIN *asclin, uint16 *data, uint32 count);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1481  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1482  /** \brief Writes data up to 32 bits
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1483   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1484   * \param data Array of data to be send
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1485   * \param count number of items to be send
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1486   * \return the number of items that could not be send
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1487   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1488  IFX_EXTERN uint32 IfxAsclin_write32(Ifx_ASCLIN *asclin, uint32 *data, uint32 count);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1489  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1490  /** \brief Writes data up to 8 bits
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1491   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1492   * \param data Array of data to be send
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1493   * \param count number of items to be send
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1494   * \return the number of items that could not be send
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1495   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1496  IFX_EXTERN uint32 IfxAsclin_write8(Ifx_ASCLIN *asclin, uint8 *data, uint32 count);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1497  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1498  /** \} */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1499  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1500  /** \addtogroup IfxLld_Asclin_Std_IO
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1501   * \{ */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1502  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1503  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1504  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1505  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1506  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1507  /** \brief Initializes a CTS input
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1508   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1509   * Attention: the kernel clock has to be disabled whenever the input multiplexer is changed.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1510   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1511   * This can be done with IfxAsclin_setClockSource(asclinSFR, IfxAsclin_ClockSource_noClock);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1512   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1513   * After the function call, the current clock can be enabled again.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1514   * \param cts the CTS Pin which should be configured
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1515   * \param inputMode the pin input mode which should be configured
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1516   * \param padDriver the pad driver mode which should be configured
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1517   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1518   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1519  IFX_INLINE void IfxAsclin_initCtsPin(const IfxAsclin_Cts_In *cts, IfxPort_InputMode inputMode, IfxPort_PadDriver padDriver);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1520  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1521  /** \brief Initializes a RTS output
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1522   * \param rts the RTS Pin which should be configured
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1523   * \param outputMode the pin output mode which should be configured
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1524   * \param padDriver the pad driver mode which should be configured
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1525   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1526   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1527  IFX_INLINE void IfxAsclin_initRtsPin(const IfxAsclin_Rts_Out *rts, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1528  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1529  /** \brief Initializes a RX input
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1530   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1531   * Attention: the kernel clock has to be disabled whenever the input multiplexer is changed.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1532   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1533   * This can be done with IfxAsclin_setClockSource(asclinSFR, IfxAsclin_ClockSource_noClock);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1534   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1535   * After the function call, the current clock can be enabled again.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1536   * \param rx the RX Pin which should be configured
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1537   * \param inputMode the pin input mode which should be configured
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1538   * \param padDriver the pad driver mode which should be configured
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1539   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1540   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1541  IFX_INLINE void IfxAsclin_initRxPin(const IfxAsclin_Rx_In *rx, IfxPort_InputMode inputMode, IfxPort_PadDriver padDriver);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1542  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1543  /** \brief Initializes a SCLK output
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1544   * \param sclk the SCLK Pin which should be configured
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1545   * \param outputMode the pin output mode which should be configured
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1546   * \param padDriver the pad driver mode which should be configured
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1547   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1548   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1549  IFX_INLINE void IfxAsclin_initSclkPin(const IfxAsclin_Sclk_Out *sclk, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1550  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1551  /** \brief Initializes a SLSO output
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1552   * \param slso the SLSO Pin which should be configured
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1553   * \param outputMode the pin output mode which should be configured
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1554   * \param padDriver the pad driver mode which should be configured
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1555   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1556   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1557  IFX_INLINE void IfxAsclin_initSlsoPin(const IfxAsclin_Slso_Out *slso, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1558  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1559  /** \brief Initializes a TX output
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1560   * \param tx the TX Pin which should be configured
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1561   * \param outputMode the pin output mode which should be configured
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1562   * \param padDriver the pad driver mode which should be configured
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1563   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1564   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1565  IFX_INLINE void IfxAsclin_initTxPin(const IfxAsclin_Tx_Out *tx, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1566  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1567  /** \} */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1568  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1569  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1570  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1571  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1572  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1573  /**
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1574   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1575   * \return returns the value of RxDATA register
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1576   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1577  IFX_INLINE uint32 IfxAsclin_readRxData(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1578  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1579  /**
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1580   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1581   * \param data data to be written
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1582   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1583   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1584  IFX_INLINE void IfxAsclin_writeTxData(Ifx_ASCLIN *asclin, uint32 data);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1585  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1586  /** \brief Returns the status of all error flags
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1587   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1588   * \return status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1589   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1590  IFX_INLINE uint16 IfxAsclin_getAllErrorFlagsStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1591  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1592  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1593  /*---------------------Inline Function Implementations------------------------*/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1594  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1595  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1596  IFX_INLINE void IfxAsclin_clearAllFlags(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1597  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1598      asclin->FLAGSCLEAR.U = 0xFFFFFFFF;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1599  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1600  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1601  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1602  IFX_INLINE void IfxAsclin_clearBreakDetectedFlag(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1603  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1604      asclin->FLAGSCLEAR.B.BDC = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1605  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1606  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1607  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1608  IFX_INLINE void IfxAsclin_clearCollisionDetectionErrorFlag(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1609  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1610      asclin->FLAGSCLEAR.B.CEC = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1611  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1612  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1613  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1614  IFX_INLINE void IfxAsclin_clearFallingEdgeDetectedFlag(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1615  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1616      asclin->FLAGSCLEAR.B.FEDC = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1617  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1618  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1619  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1620  IFX_INLINE void IfxAsclin_clearFrameErrorFlag(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1621  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1622      asclin->FLAGSCLEAR.B.FEC = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1623  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1624  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1625  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1626  IFX_INLINE void IfxAsclin_clearHeaderTimeoutFlag(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1627  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1628      asclin->FLAGSCLEAR.B.HTC = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1629  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1630  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1631  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1632  IFX_INLINE void IfxAsclin_clearKernelResetStatus(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1633  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1634      asclin->KRSTCLR.B.CLR = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1635  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1636  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1637  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1638  IFX_INLINE void IfxAsclin_clearLinAutoBaudDetectionErrorFlag(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1639  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1640      asclin->FLAGSCLEAR.B.LAC = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1641  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1642  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1643  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1644  IFX_INLINE void IfxAsclin_clearLinChecksumErrorFlag(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1645  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1646      asclin->FLAGSCLEAR.B.LCC = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1647  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1648  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1649  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1650  IFX_INLINE void IfxAsclin_clearLinParityErrorFlag(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1651  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1652      asclin->FLAGSCLEAR.B.LPC = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1653  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1654  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1655  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1656  IFX_INLINE void IfxAsclin_clearParityErrorFlag(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1657  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1658      asclin->FLAGSCLEAR.B.PEC = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1659  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1660  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1661  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1662  IFX_INLINE void IfxAsclin_clearRaisingEdgeDetectedFlag(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1663  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1664      asclin->FLAGSCLEAR.B.REDC = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1665  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1666  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1667  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1668  IFX_INLINE void IfxAsclin_clearResponseTimeoutFlag(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1669  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1670      asclin->FLAGSCLEAR.B.RTC = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1671  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1672  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1673  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1674  IFX_INLINE void IfxAsclin_clearRxFifoFillLevelFlag(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1675  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1676      asclin->FLAGSCLEAR.B.RFLC = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1677  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1678  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1679  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1680  IFX_INLINE void IfxAsclin_clearRxFifoOverflowFlag(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1681  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1682      asclin->FLAGSCLEAR.B.RFOC = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1683  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1684  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1685  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1686  IFX_INLINE void IfxAsclin_clearRxFifoUnderflowFlag(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1687  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1688      asclin->FLAGSCLEAR.B.RFUC = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1689  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1690  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1691  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1692  IFX_INLINE void IfxAsclin_clearRxHeaderEndFlag(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1693  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1694      asclin->FLAGSCLEAR.B.RHC = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1695  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1696  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1697  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1698  IFX_INLINE void IfxAsclin_clearRxResponseEndFlag(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1699  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1700      asclin->FLAGSCLEAR.B.RRC = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1701  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1702  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1703  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1704  IFX_INLINE void IfxAsclin_clearTransmissionCompletedFlag(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1705  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1706      asclin->FLAGSCLEAR.B.TCC = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1707  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1708  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1709  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1710  IFX_INLINE void IfxAsclin_clearTxFifoFillLevelFlag(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1711  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1712      asclin->FLAGSCLEAR.B.TFLC = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1713  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1714  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1715  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1716  IFX_INLINE void IfxAsclin_clearTxFifoOverflowFlag(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1717  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1718      asclin->FLAGSCLEAR.B.TFOC = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1719  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1720  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1721  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1722  IFX_INLINE void IfxAsclin_clearTxHeaderEndFlag(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1723  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1724      asclin->FLAGSCLEAR.B.THC = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1725  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1726  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1727  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1728  IFX_INLINE void IfxAsclin_clearTxResponseEndFlag(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1729  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1730      asclin->FLAGSCLEAR.B.TRC = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1731  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1732  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1733  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1734  IFX_INLINE void IfxAsclin_disableAllFlags(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1735  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1736      asclin->FLAGSENABLE.U = 0x00000000;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1737  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1738  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1739  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1740  IFX_INLINE void IfxAsclin_enableAutoBaudrateDetection(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1741  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1742      asclin->LIN.CON.B.ABD = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1743  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1744  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1745  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1746  IFX_INLINE void IfxAsclin_enableBreakDetectedFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1747  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1748      asclin->FLAGSENABLE.B.BDE = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1749  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1750  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1751  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1752  IFX_INLINE void IfxAsclin_enableCollisionDetection(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1753  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1754      asclin->FRAMECON.B.CEN = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1755  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1756  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1757  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1758  IFX_INLINE void IfxAsclin_enableCollisionDetectionErrorFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1759  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1760      asclin->FLAGSENABLE.B.CEE = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1761  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1762  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1763  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1764  IFX_INLINE void IfxAsclin_enableCts(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1765  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1766      asclin->IOCR.B.CTSEN = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1767  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1768  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1769  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1770  IFX_INLINE void IfxAsclin_enableFallingEdgeDetectedFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1771  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1772      asclin->FLAGSENABLE.B.FEDE = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1773  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1774  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1775  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1776  IFX_INLINE void IfxAsclin_enableFrameErrorFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1777  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1778      asclin->FLAGSENABLE.B.FEE = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1779  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1780  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1781  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1782  IFX_INLINE void IfxAsclin_enableHardwareChecksum(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1783  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1784      asclin->LIN.CON.B.CSEN = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1785  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1786  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1787  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1788  IFX_INLINE void IfxAsclin_enableHeaderTimeoutFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1789  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1790      asclin->FLAGSENABLE.B.HTE = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1791  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1792  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1793  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1794  IFX_INLINE void IfxAsclin_enableLinAutoBaudDetectionErrorFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1795  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1796      asclin->FLAGSENABLE.B.ABE = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1797  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1798  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1799  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1800  IFX_INLINE void IfxAsclin_enableLinChecksumErrorFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1801  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1802      asclin->FLAGSENABLE.B.LCE = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1803  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1804  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1805  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1806  IFX_INLINE void IfxAsclin_enableLinParityErrorFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1807  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1808      asclin->FLAGSENABLE.B.LPE = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1809  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1810  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1811  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1812  IFX_INLINE void IfxAsclin_enableLoopBackMode(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1813  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1814      asclin->IOCR.B.LB = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1815  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1816  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1817  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1818  IFX_INLINE void IfxAsclin_enableParity(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1819  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1820      asclin->FRAMECON.B.PEN = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1821  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1822  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1823  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1824  IFX_INLINE void IfxAsclin_enableParityErrorFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1825  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1826      asclin->FLAGSENABLE.B.PEE = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1827  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1828  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1829  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1830  IFX_INLINE void IfxAsclin_enableRaisingEdgeDetectedFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1831  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1832      asclin->FLAGSENABLE.B.REDE = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1833  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1834  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1835  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1836  IFX_INLINE void IfxAsclin_enableResponseTimeoutFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1837  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1838      asclin->FLAGSENABLE.B.RTE = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1839  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1840  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1841  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1842  IFX_INLINE void IfxAsclin_enableRxFifoFillLevelFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1843  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1844      asclin->FLAGSENABLE.B.RFLE = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1845  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1846  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1847  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1848  IFX_INLINE void IfxAsclin_enableRxFifoInlet(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1849  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1850      asclin->RXFIFOCON.B.ENI = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1851  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1852  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1853  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1854  IFX_INLINE void IfxAsclin_enableRxFifoOverflowFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1855  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1856      asclin->FLAGSENABLE.B.RFOE = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1857  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1858  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1859  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1860  IFX_INLINE void IfxAsclin_enableRxFifoUnderflowFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1861  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1862      asclin->FLAGSENABLE.B.RFUE = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1863  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1864  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1865  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1866  IFX_INLINE void IfxAsclin_enableRxHeaderEndFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1867  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1868      asclin->FLAGSENABLE.B.RHE = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1869  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1870  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1871  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1872  IFX_INLINE void IfxAsclin_enableRxResponseEndFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1873  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1874      asclin->FLAGSENABLE.B.RRE = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1875  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1876  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1877  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1878  IFX_INLINE void IfxAsclin_enableTransmissionCompletedFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1879  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1880      asclin->FLAGSENABLE.B.TCE = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1881  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1882  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1883  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1884  IFX_INLINE void IfxAsclin_enableTxFifoFillLevelFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1885  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1886      asclin->FLAGSENABLE.B.TFLE = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1887  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1888  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1889  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1890  IFX_INLINE void IfxAsclin_enableTxFifoOutlet(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1891  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1892      asclin->TXFIFOCON.B.ENO = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1893  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1894  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1895  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1896  IFX_INLINE void IfxAsclin_enableTxFifoOverflowFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1897  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1898      asclin->FLAGSENABLE.B.TFOE = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1899  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1900  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1901  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1902  IFX_INLINE void IfxAsclin_enableTxHeaderEndFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1903  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1904      asclin->FLAGSENABLE.B.THE = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1905  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1906  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1907  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1908  IFX_INLINE void IfxAsclin_enableTxResponseEndFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1909  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1910      asclin->FLAGSENABLE.B.TRE = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1911  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1912  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1913  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1914  IFX_INLINE void IfxAsclin_flushRxFifo(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1915  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1916      asclin->RXFIFOCON.B.FLUSH = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1917  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1918  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1919  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1920  IFX_INLINE void IfxAsclin_flushTxFifo(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1921  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1922      asclin->TXFIFOCON.B.FLUSH = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1923  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1924  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1925  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1926  IFX_INLINE boolean IfxAsclin_getBreakDetectedFlagStatus(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1927  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1928      return asclin->FLAGS.B.BD;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1929  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1930  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1931  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1932  IFX_INLINE uint8 IfxAsclin_getClockSource(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1933  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1934      return asclin->CSR.B.CLKSEL;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1935  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1936  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1937  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1938  IFX_INLINE boolean IfxAsclin_getClockStatus(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1939  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1940      return asclin->CSR.B.CON;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1941  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1942  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1943  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1944  IFX_INLINE boolean IfxAsclin_getCollisionDetectionErrorFlagStatus(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1945  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1946      return asclin->FLAGS.B.CE;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1947  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1948  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1949  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1950  IFX_INLINE boolean IfxAsclin_getFallingEdgeDetectedFlagStatus(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1951  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1952      return asclin->FLAGS.B.FED;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1953  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1954  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1955  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1956  IFX_INLINE boolean IfxAsclin_getFrameErrorFlagStatus(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1957  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1958      return asclin->FLAGS.B.FE;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1959  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1960  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1961  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1962  IFX_INLINE boolean IfxAsclin_getHeaderTimeoutFlagStatus(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1963  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1964      return asclin->FLAGS.B.HT;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1965  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1966  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1967  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1968  IFX_INLINE boolean IfxAsclin_getKernelResetStatus(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1969  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1970      return asclin->KRST0.B.RSTSTAT;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1971  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1972  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1973  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1974  IFX_INLINE boolean IfxAsclin_getLinAutoBaudDetectionErrorFlagStatus(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1975  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1976      return asclin->FLAGS.B.LA;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1977  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1978  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1979  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1980  IFX_INLINE boolean IfxAsclin_getLinChecksumErrorFlagStatus(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1981  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1982      return asclin->FLAGS.B.LC;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1983  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1984  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1985  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1986  IFX_INLINE boolean IfxAsclin_getLinParityErrorFlagStatus(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1987  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1988      return asclin->FLAGS.B.LP;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1989  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1990  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1991  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1992  IFX_INLINE boolean IfxAsclin_getModuleStatus(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1993  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1994      return asclin->CLC.B.DISS;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1995  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1996  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1997  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1998  IFX_INLINE boolean IfxAsclin_getParityErrorFlagStatus(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1999  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2000      return asclin->FLAGS.B.PE;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2001  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2002  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2003  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2004  IFX_INLINE uint16 IfxAsclin_getPrescaler(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2005  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2006      return asclin->BITCON.B.PRESCALER + 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2007  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2008  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2009  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2010  IFX_INLINE boolean IfxAsclin_getRaisingEdgeDetectedFlagStatus(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2011  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2012      return asclin->FLAGS.B.RED;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2013  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2014  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2015  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2016  IFX_INLINE boolean IfxAsclin_getReceiveSignalStatus(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2017  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2018      return asclin->IOCR.B.RXM;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2019  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2020  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2021  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2022  IFX_INLINE boolean IfxAsclin_getResponseTimeoutFlagStatus(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2023  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2024      return asclin->FLAGS.B.RT;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2025  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2026  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2027  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2028  IFX_INLINE uint8 IfxAsclin_getRxFifoFillLevel(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2029  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2030      return asclin->RXFIFOCON.B.FILL;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2031  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2032  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2033  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2034  IFX_INLINE boolean IfxAsclin_getRxFifoFillLevelFlagStatus(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2035  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2036      return asclin->FLAGS.B.RFL;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2037  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2038  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2039  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2040  IFX_INLINE uint8 IfxAsclin_getRxFifoOutletWidth(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2041  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2042      return asclin->RXFIFOCON.B.OUTW;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2043  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2044  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2045  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2046  IFX_INLINE boolean IfxAsclin_getRxFifoOverflowFlagStatus(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2047  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2048      return asclin->FLAGS.B.RFO;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2049  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2050  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2051  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2052  IFX_INLINE boolean IfxAsclin_getRxFifoUnderflowFlagStatus(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2053  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2054      return asclin->FLAGS.B.RFU;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2055  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2056  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2057  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2058  IFX_INLINE boolean IfxAsclin_getRxHeaderEndFlagStatus(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2059  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2060      return asclin->FLAGS.B.RH;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2061  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2062  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2063  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2064  IFX_INLINE boolean IfxAsclin_getRxResponseEndFlagStatus(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2065  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2066      return asclin->FLAGS.B.RR;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2067  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2068  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2069  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2070  IFX_INLINE boolean IfxAsclin_getTransmissionCompletedFlagStatus(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2071  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2072      return asclin->FLAGS.B.TC;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2073  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2074  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2075  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2076  IFX_INLINE boolean IfxAsclin_getTransmitSignalStatus(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2077  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2078      return asclin->IOCR.B.TXM;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2079  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2080  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2081  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2082  IFX_INLINE uint8 IfxAsclin_getTxFifoFillLevel(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2083  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2084      return asclin->TXFIFOCON.B.FILL;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2085  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2086  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2087  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2088  IFX_INLINE boolean IfxAsclin_getTxFifoFillLevelFlagStatus(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2089  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2090      return asclin->FLAGS.B.TFL;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2091  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2092  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2093  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2094  IFX_INLINE uint8 IfxAsclin_getTxFifoInletWidth(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2095  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2096      return asclin->TXFIFOCON.B.INW;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2097  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2098  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2099  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2100  IFX_INLINE boolean IfxAsclin_getTxFifoOverflowFlagStatus(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2101  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2102      return asclin->FLAGS.B.TFO;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2103  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2104  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2105  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2106  IFX_INLINE boolean IfxAsclin_getTxHeaderEndFlagStatus(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2107  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2108      return asclin->FLAGS.B.TH;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2109  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2110  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2111  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2112  IFX_INLINE boolean IfxAsclin_getTxResponseEndFlagStatus(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2113  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2114      return asclin->FLAGS.B.TR;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2115  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2116  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2117  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2118  IFX_INLINE void IfxAsclin_initCtsPin(const IfxAsclin_Cts_In *cts, IfxPort_InputMode inputMode, IfxPort_PadDriver padDriver)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2119  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2120      if (cts->pin.port != NULL_PTR)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2121      {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2122          IfxPort_setPinModeInput(cts->pin.port, cts->pin.pinIndex, inputMode);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2123          IfxPort_setPinPadDriver(cts->pin.port, cts->pin.pinIndex, padDriver);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2124          IfxAsclin_enableCts(cts->module, TRUE);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2125          IfxAsclin_setCtsInput(cts->module, (IfxAsclin_CtsInputSelect)cts->select);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2126      }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2127  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2128  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2129  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2130  IFX_INLINE void IfxAsclin_initRtsPin(const IfxAsclin_Rts_Out *rts, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2131  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2132      IfxPort_setPinModeOutput(rts->pin.port, rts->pin.pinIndex, outputMode, rts->select);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2133      IfxPort_setPinPadDriver(rts->pin.port, rts->pin.pinIndex, padDriver);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2134  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2135  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2136  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2137  IFX_INLINE void IfxAsclin_initRxPin(const IfxAsclin_Rx_In *rx, IfxPort_InputMode inputMode, IfxPort_PadDriver padDriver)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2138  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2139      if (rx->pin.port != NULL_PTR)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2140      {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2141          IfxPort_setPinModeInput(rx->pin.port, rx->pin.pinIndex, inputMode);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2142          IfxPort_setPinPadDriver(rx->pin.port, rx->pin.pinIndex, padDriver);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2143          IfxAsclin_setRxInput(rx->module, (IfxAsclin_RxInputSelect)rx->select);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2144      }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2145  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2146  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2147  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2148  IFX_INLINE void IfxAsclin_initSclkPin(const IfxAsclin_Sclk_Out *sclk, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2149  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2150      IfxPort_setPinModeOutput(sclk->pin.port, sclk->pin.pinIndex, outputMode, sclk->select);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2151      IfxPort_setPinPadDriver(sclk->pin.port, sclk->pin.pinIndex, padDriver);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2152  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2153  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2154  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2155  IFX_INLINE void IfxAsclin_initSlsoPin(const IfxAsclin_Slso_Out *slso, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2156  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2157      IfxPort_setPinModeOutput(slso->pin.port, slso->pin.pinIndex, outputMode, slso->select);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2158      IfxPort_setPinPadDriver(slso->pin.port, slso->pin.pinIndex, padDriver);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2159  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2160  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2161  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2162  IFX_INLINE void IfxAsclin_initTxPin(const IfxAsclin_Tx_Out *tx, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2163  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2164      IfxPort_setPinModeOutput(tx->pin.port, tx->pin.pinIndex, outputMode, tx->select);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2165      IfxPort_setPinPadDriver(tx->pin.port, tx->pin.pinIndex, padDriver);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2166  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2167  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2168  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2169  IFX_INLINE boolean IfxAsclin_isModuleSuspended(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2170  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2171      Ifx_ASCLIN_OCS ocs;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2172  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2173      // read the status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2174      ocs.U = asclin->OCS.U;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2175  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2176      // return the status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2177      return ocs.B.SUSSTA;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2178  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2179  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2180  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2181  IFX_INLINE uint32 IfxAsclin_readRxData(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2182  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2183      return asclin->RXDATA.U;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2184  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2185  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2186  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2187  IFX_INLINE void IfxAsclin_setBrdLowerlimt(Ifx_ASCLIN *asclin, uint8 limit)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2188  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2189      asclin->BRD.B.LOWERLIMIT = limit;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2190  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2191  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2192  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2193  IFX_INLINE void IfxAsclin_setBrdUpperlimt(Ifx_ASCLIN *asclin, uint8 limit)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2194  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2195      asclin->BRD.B.UPPERLIMIT = limit;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2196  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2197  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2198  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2199  IFX_INLINE void IfxAsclin_setChecksumInjection(Ifx_ASCLIN *asclin, IfxAsclin_ChecksumInjection csi)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2200  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2201      asclin->LIN.CON.B.CSI = csi;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2202  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2203  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2204  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2205  IFX_INLINE void IfxAsclin_setChecksumMode(Ifx_ASCLIN *asclin, IfxAsclin_Checksum mode)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2206  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2207      asclin->DATCON.B.CSM = mode;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2208  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2209  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2210  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2211  IFX_INLINE void IfxAsclin_setClockPolarity(Ifx_ASCLIN *asclin, IfxAsclin_ClockPolarity cpol)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2212  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2213      asclin->IOCR.B.CPOL = cpol;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2214  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2215  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2216  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2217  IFX_INLINE void IfxAsclin_setCtsInput(Ifx_ASCLIN *asclin, IfxAsclin_CtsInputSelect ctsi)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2218  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2219      asclin->IOCR.B.CTS = ctsi;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2220  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2221  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2222  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2223  IFX_INLINE void IfxAsclin_setDataLength(Ifx_ASCLIN *asclin, IfxAsclin_DataLength length)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2224  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2225      asclin->DATCON.B.DATLEN = length;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2226  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2227  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2228  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2229  IFX_INLINE void IfxAsclin_setDenominator(Ifx_ASCLIN *asclin, uint16 denominator)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2230  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2231      asclin->BRG.B.DENOMINATOR = denominator;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2232  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2233  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2234  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2235  IFX_INLINE void IfxAsclin_setDisableModuleRequest(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2236  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2237      asclin->CLC.B.DISR = 1;
	ld.bu	d15,[a15]
.L317:
	or	d15,#1
	st.b	[a15],d15
.L318:
	j	IfxScuWdt_setCpuEndinit
.L313:
	
__IfxAsclin_disableModule_function_end:
	.size	IfxAsclin_disableModule,__IfxAsclin_disableModule_function_end-IfxAsclin_disableModule
.L163:
	; End of function
	
	.sdecl	'.text.IfxAsclin.IfxAsclin_enableAscErrorFlags',code,cluster('IfxAsclin_enableAscErrorFlags')
	.sect	'.text.IfxAsclin.IfxAsclin_enableAscErrorFlags'
	.align	2
	
	.global	IfxAsclin_enableAscErrorFlags

; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	    61  oolean parEnable, boolean rfoEnable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	    62  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	    63      IfxAsclin_enableParityErrorFlag(asclin, parEnable);     /* enables parity error*/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	    64      IfxAsclin_enableRxFifoOverflowFlag(asclin, rfoEnable);  /* enables Rx fifo Overflow error*/
; Function IfxAsclin_enableAscErrorFlags
.L68:
IfxAsclin_enableAscErrorFlags:	.type	func

; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	     1  /**
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	     2   * \file IfxAsclin.h
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	     3   * \brief ASCLIN  basic functionality
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	     4   * \ingroup IfxLld_Asclin
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	     5   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	     6   * \version iLLD_1_0_1_11_0
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	     7   * \copyright Copyright (c) 2018 Infineon Technologies AG. All rights reserved.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	     8   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	     9   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    10   *                                 IMPORTANT NOTICE
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    11   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    12   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    13   * Use of this file is subject to the terms of use agreed between (i) you or 
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    14   * the company in which ordinary course of business you are acting and (ii) 
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    15   * Infineon Technologies AG or its licensees. If and as long as no such 
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    16   * terms of use are agreed, use of this file is subject to following:
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    17  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    18  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    19   * Boost Software License - Version 1.0 - August 17th, 2003
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    20  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    21   * Permission is hereby granted, free of charge, to any person or 
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    22   * organization obtaining a copy of the software and accompanying 
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    23   * documentation covered by this license (the "Software") to use, reproduce,
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    24   * display, distribute, execute, and transmit the Software, and to prepare
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    25   * derivative works of the Software, and to permit third-parties to whom the 
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    26   * Software is furnished to do so, all subject to the following:
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    27  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    28   * The copyright notices in the Software and this entire statement, including
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    29   * the above license grant, this restriction and the following disclaimer, must
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    30   * be included in all copies of the Software, in whole or in part, and all
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    31   * derivative works of the Software, unless such copies or derivative works are
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    32   * solely in the form of machine-executable object code generated by a source
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    33   * language processor.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    34  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    35   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR 
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    36   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    37   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    38   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE 
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    39   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    40   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    41   * DEALINGS IN THE SOFTWARE.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    42  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    43   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    44   * \defgroup IfxLld_Asclin_Std_Enumerations Enumerations
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    45   * \ingroup IfxLld_Asclin_Std
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    46   * \defgroup IfxLld_Asclin_Std_Operative Operative Functions
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    47   * \ingroup IfxLld_Asclin_Std
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    48   * \defgroup IfxLld_Asclin_Std_Utility Utility Functions
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    49   * \ingroup IfxLld_Asclin_Std
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    50   * \defgroup IfxLld_Asclin_Std_Configuration Configuration Functions
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    51   * \ingroup IfxLld_Asclin_Std
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    52   * \defgroup IfxLld_Asclin_Std_External External Functions
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    53   * \ingroup IfxLld_Asclin_Std
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    54   * \defgroup IfxLld_Asclin_Std_IO IO Pin Configuration Functions
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    55   * \ingroup IfxLld_Asclin_Std
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    56   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    57  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    58  #ifndef IFXASCLIN_H
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    59  #define IFXASCLIN_H 1
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    60  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    61  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    62  /*----------------------------------Includes----------------------------------*/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    63  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    64  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    65  #include "_Impl/IfxAsclin_cfg.h"
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    66  #include "Scu/Std/IfxScuCcu.h"
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    67  #include "Scu/Std/IfxScuWdt.h"
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    68  #include "Cpu/Std/IfxCpu_Intrinsics.h"
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    69  #include "IfxAsclin_reg.h"
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    70  #include "Src/Std/IfxSrc.h"
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    71  #include "_PinMap/IfxAsclin_PinMap.h"
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    72  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    73  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    74  /*--------------------------------Enumerations--------------------------------*/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    75  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    76  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    77  /** \addtogroup IfxLld_Asclin_Std_Enumerations
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    78   * \{ */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    79  /** \brief Defines if the classic or the enhanced checksum will be calculated by the checksum block.\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    80   * Definition in Ifx_ASCLIN.DATCON.B.CSM
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    81   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    82  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    83  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    84      IfxAsclin_Checksum_classic  = 0, /**< \brief classic checksum */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    85      IfxAsclin_Checksum_enhanced = 1  /**< \brief enhanced checksum */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    86  } IfxAsclin_Checksum;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    87  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    88  /** \brief Defines if the received checksum byte is written into the RXFifo or not.\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    89   * Definition in Ifx_ASCLIN.LIN.CON.B.CSI
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    90   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    91  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    92  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    93      IfxAsclin_ChecksumInjection_notWritten = 0,  /**< \brief checksum byte is not written */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    94      IfxAsclin_ChecksumInjection_written    = 1   /**< \brief checksum byte is written */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    95  } IfxAsclin_ChecksumInjection;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    96  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    97  /** \brief CPOL defines the idle level of the clock signal in the SPI mode.\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    98   * Idle level is the level outside the data transmission time intervals.\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    99   * Definition in Ifx_ASCLIN.IOCR.B.CPOL
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   100   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   101  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   102  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   103      IfxAsclin_ClockPolarity_idleLow  = 0, /**< \brief idle low */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   104      IfxAsclin_ClockPolarity_idleHigh = 1  /**< \brief idle high */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   105  } IfxAsclin_ClockPolarity;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   106  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   107  /** \brief Selection of clock source\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   108   * Definition in Ifx_ASCLIN.CSR.B.CLKSEL
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   109   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   110  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   111  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   112      IfxAsclin_ClockSource_noClock         = 0,  /**< \brief no clock will be supplied */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   113      IfxAsclin_ClockSource_kernelClock     = 1,  /**< \brief f clc will be supplied */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   114      IfxAsclin_ClockSource_oscillatorClock = 2,  /**< \brief XTAL oscillator clock foso0 will be supplied */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   115      IfxAsclin_ClockSource_flexRayClock    = 4,  /**< \brief f eray will be supplied */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   116      IfxAsclin_ClockSource_ascFastClock    = 8,  /**< \brief f asclinf wiil be supplied */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   117      IfxAsclin_ClockSource_ascSlowClock    = 16  /**< \brief f asclins will be supplied */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   118  } IfxAsclin_ClockSource;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   119  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   120  /** \brief CTS input pin selection\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   121   * Definition in Ifx_ASCLIN.IOCR.B.CTS
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   122   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   123  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   124  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   125      IfxAsclin_CtsInputSelect_0,     /**< \brief CTS input pin 0  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   126      IfxAsclin_CtsInputSelect_1,     /**< \brief CTS input pin 1  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   127      IfxAsclin_CtsInputSelect_2,     /**< \brief CTS input pin 2  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   128      IfxAsclin_CtsInputSelect_3      /**< \brief CTS input pin 3  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   129  } IfxAsclin_CtsInputSelect;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   130  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   131  /** \brief Number of bits per transfer\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   132   * Definition in Ifx_ASCLIN.FRAMECON.B.DATALEN
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   133   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   134  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   135  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   136      IfxAsclin_DataLength_1 = 0,      /**< \brief number of bits per transfer 0  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   137      IfxAsclin_DataLength_2,          /**< \brief number of bits per transfer 1  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   138      IfxAsclin_DataLength_3,          /**< \brief number of bits per transfer 2  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   139      IfxAsclin_DataLength_4,          /**< \brief number of bits per transfer 3  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   140      IfxAsclin_DataLength_5,          /**< \brief number of bits per transfer 4  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   141      IfxAsclin_DataLength_6,          /**< \brief number of bits per transfer 5  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   142      IfxAsclin_DataLength_7,          /**< \brief number of bits per transfer 6  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   143      IfxAsclin_DataLength_8,          /**< \brief number of bits per transfer 7  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   144      IfxAsclin_DataLength_9,          /**< \brief number of bits per transfer 8  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   145      IfxAsclin_DataLength_10,         /**< \brief number of bits per transfer 9  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   146      IfxAsclin_DataLength_11,         /**< \brief number of bits per transfer 10  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   147      IfxAsclin_DataLength_12,         /**< \brief number of bits per transfer 11  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   148      IfxAsclin_DataLength_13,         /**< \brief number of bits per transfer 12  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   149      IfxAsclin_DataLength_14,         /**< \brief number of bits per transfer 13  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   150      IfxAsclin_DataLength_15,         /**< \brief number of bits per transfer 14  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   151      IfxAsclin_DataLength_16          /**< \brief number of bits per transfer 15  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   152  } IfxAsclin_DataLength;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   153  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   154  /** \brief Defines the basic operating mode of the module. Changing the mode must be done by switching first to initialize mode, and then to the other mode.\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   155   * Definition in Ifx_ASCLIN.FRAMECON.B.MODE
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   156   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   157  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   158  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   159      IfxAsclin_FrameMode_initialise = 0,  /**< \brief initialise mode */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   160      IfxAsclin_FrameMode_asc        = 1,  /**< \brief asc mode */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   161      IfxAsclin_FrameMode_spi        = 2,  /**< \brief spi mode */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   162      IfxAsclin_FrameMode_lin        = 3   /**< \brief lin mode */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   163  } IfxAsclin_FrameMode;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   164  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   165  /** \brief Defines if LIN frame shall consist of a header and response or of a header only.\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   166   * Definition in Ifx_ASCLIN.DATCON.B.HO
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   167   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   168  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   169  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   170      IfxAsclin_HeaderResponseSelect_headerAndResponse = 0,  /**< \brief header and response expected */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   171      IfxAsclin_HeaderResponseSelect_headerOnly        = 1   /**< \brief header only expected */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   172  } IfxAsclin_HeaderResponseSelect;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   173  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   174  /** \brief Defines the duration of the IDLE delay in bit times.\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   175   * SPI mode: this is the idle time between the frames.\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   176   * ASC and LIN mode: this is the pause inserted between transmission of bytes.\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   177   * Definition in Ifx_ASCLIN.FRAMECON.B.IDLE
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   178   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   179  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   180  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   181      IfxAsclin_IdleDelay_0,     /**< \brief idle delay in 0 bit times  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   182      IfxAsclin_IdleDelay_1,     /**< \brief idle delay in 1 bit times  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   183      IfxAsclin_IdleDelay_2,     /**< \brief idle delay in 2 bit times  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   184      IfxAsclin_IdleDelay_3,     /**< \brief idle delay in 3 bit times  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   185      IfxAsclin_IdleDelay_4,     /**< \brief idle delay in 4 bit times  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   186      IfxAsclin_IdleDelay_5,     /**< \brief idle delay in 5 bit times  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   187      IfxAsclin_IdleDelay_6,     /**< \brief idle delay in 6 bit times  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   188      IfxAsclin_IdleDelay_7      /**< \brief idle delay in 7 bit times  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   189  } IfxAsclin_IdleDelay;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   190  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   191  /** \brief Defines the leading delay in bit times in SPI mode. ASC mode: not applicable.\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   192   * LIN mode: delay between the end of the break and the start of the sync character.\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   193   * Definition in Ifx_ASCLIN.FRAMECON.B.LEAD
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   194   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   195  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   196  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   197      IfxAsclin_LeadDelay_0,     /**< \brief lead delay in 0 bit times  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   198      IfxAsclin_LeadDelay_1,     /**< \brief lead delay in 1 bit times  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   199      IfxAsclin_LeadDelay_2,     /**< \brief lead delay in 2 bit times  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   200      IfxAsclin_LeadDelay_3,     /**< \brief lead delay in 3 bit times  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   201      IfxAsclin_LeadDelay_4,     /**< \brief lead delay in 4 bit times  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   202      IfxAsclin_LeadDelay_5,     /**< \brief lead delay in 5 bit times  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   203      IfxAsclin_LeadDelay_6,     /**< \brief lead delay in 6 bit times  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   204      IfxAsclin_LeadDelay_7      /**< \brief lead delay in 7 bit times  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   205  } IfxAsclin_LeadDelay;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   206  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   207  /** \brief Configures if the module in LIN mode operates as master or slave\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   208   * Definition in Ifx_ASCLIN.LIN.CON.B.MS
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   209   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   210  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   211  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   212      IfxAsclin_LinMode_slave  = 0, /**< \brief operates in slave mode */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   213      IfxAsclin_LinMode_master = 1  /**< \brief operates in master mode */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   214  } IfxAsclin_LinMode;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   215  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   216  /** \brief Defines the timeout threshold of RESPOSE bit is for LIN response timeout or LIN frame timeout.\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   217   * Definition in Ifx_ASCLIN.DATCON.B.RM
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   218   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   219  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   220  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   221      IfxAsclin_LinResponseTimeoutMode_frameTimeout    = 0, /**< \brief timeout threshold is for frame */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   222      IfxAsclin_LinResponseTimeoutMode_responseTimeout = 1  /**< \brief timeout threshold is for reponse */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   223  } IfxAsclin_LinResponseTimeoutMode;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   224  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   225  /** \brief Defines the bit length in ticks in the range of 1 to 16. The lengths of 1 to 3 are not allowed\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   226   * Definition in Ifx_ASCLIN.BITCON.B.OVERSAMPLING
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   227   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   228  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   229  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   230      IfxAsclin_OversamplingFactor_4  = 3,   /**< \brief oversampling factor 4 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   231      IfxAsclin_OversamplingFactor_5  = 4,   /**< \brief oversampling factor 5 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   232      IfxAsclin_OversamplingFactor_6  = 5,   /**< \brief oversampling factor 6 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   233      IfxAsclin_OversamplingFactor_7  = 6,   /**< \brief oversampling factor 7 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   234      IfxAsclin_OversamplingFactor_8  = 7,   /**< \brief oversampling factor 8 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   235      IfxAsclin_OversamplingFactor_9  = 8,   /**< \brief oversampling factor 9 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   236      IfxAsclin_OversamplingFactor_10 = 9,   /**< \brief oversampling factor 10 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   237      IfxAsclin_OversamplingFactor_11 = 10,  /**< \brief oversampling factor 11 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   238      IfxAsclin_OversamplingFactor_12 = 11,  /**< \brief oversampling factor 12 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   239      IfxAsclin_OversamplingFactor_13 = 12,  /**< \brief oversampling factor 13 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   240      IfxAsclin_OversamplingFactor_14 = 13,  /**< \brief oversampling factor 14 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   241      IfxAsclin_OversamplingFactor_15 = 14,  /**< \brief oversampling factor 15 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   242      IfxAsclin_OversamplingFactor_16 = 15   /**< \brief oversampling factor 16 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   243  } IfxAsclin_OversamplingFactor;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   244  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   245  /** \brief Type of parity bit attached to data bits\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   246   * Definition in Ifx_ASCLIN.FRAMECON.B.ODD
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   247   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   248  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   249  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   250      IfxAsclin_ParityType_even = 0,  /**< \brief even parity */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   251      IfxAsclin_ParityType_odd  = 1   /**< \brief odd parity */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   252  } IfxAsclin_ParityType;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   253  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   254  /** \brief Receive buffer mode\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   255   * Definition in Ifx_ASCLIN.RXFIFOCON.B.BUF
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   256   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   257  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   258  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   259      IfxAsclin_ReceiveBufferMode_rxFifo   = 0, /**< \brief RxFIFO mode */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   260      IfxAsclin_ReceiveBufferMode_rxBuffer = 1  /**< \brief single stage Rx buffer */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   261  } IfxAsclin_ReceiveBufferMode;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   262  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   263  /** \brief Polarity of the RTS and CTS signals\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   264   * Definition in Ifx_ASCLIN.IOCR.B.RCPOL
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   265   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   266  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   267  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   268      IfxAsclin_RtsCtsPolarity_activeHigh = 0,  /**< \brief ready/clear are active-high */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   269      IfxAsclin_RtsCtsPolarity_activeLow  = 1   /**< \brief ready/clear are active-low */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   270  } IfxAsclin_RtsCtsPolarity;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   271  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   272  /** \brief Defines the filling level that triggers a drain (RX) interrupt or DMA access\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   273   * Definition in Ifx_ASCLIN.RXFIFOCON.B.INTLEVEL
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   274   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   275  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   276  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   277      IfxAsclin_RxFifoInterruptLevel_1,     /**< \brief RX FIFO level 1  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   278      IfxAsclin_RxFifoInterruptLevel_2,     /**< \brief RX FIFO level 2  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   279      IfxAsclin_RxFifoInterruptLevel_3,     /**< \brief RX FIFO level 3  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   280      IfxAsclin_RxFifoInterruptLevel_4,     /**< \brief RX FIFO level 4  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   281      IfxAsclin_RxFifoInterruptLevel_5,     /**< \brief RX FIFO level 5  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   282      IfxAsclin_RxFifoInterruptLevel_6,     /**< \brief RX FIFO level 6  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   283      IfxAsclin_RxFifoInterruptLevel_7,     /**< \brief RX FIFO level 7  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   284      IfxAsclin_RxFifoInterruptLevel_8,     /**< \brief RX FIFO level 8  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   285      IfxAsclin_RxFifoInterruptLevel_9,     /**< \brief RX FIFO level 9  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   286      IfxAsclin_RxFifoInterruptLevel_10,    /**< \brief RX FIFO level 10  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   287      IfxAsclin_RxFifoInterruptLevel_11,    /**< \brief RX FIFO level 11  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   288      IfxAsclin_RxFifoInterruptLevel_12,    /**< \brief RX FIFO level 12  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   289      IfxAsclin_RxFifoInterruptLevel_13,    /**< \brief RX FIFO level 13  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   290      IfxAsclin_RxFifoInterruptLevel_14,    /**< \brief RX FIFO level 14  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   291      IfxAsclin_RxFifoInterruptLevel_15,    /**< \brief RX FIFO level 15  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   292      IfxAsclin_RxFifoInterruptLevel_16     /**< \brief RX FIFO level 16  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   293  } IfxAsclin_RxFifoInterruptLevel;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   294  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   295  /** \brief Defines the number of bytes read from the Rx FIFO with one FPI bus read\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   296   * Definition in Ifx_ASCLIN.RXFIFOCON.B.OUTW
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   297   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   298  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   299  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   300      IfxAsclin_RxFifoOutletWidth_0,     /**< \brief number of bytes 0  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   301      IfxAsclin_RxFifoOutletWidth_1,     /**< \brief number of bytes 1  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   302      IfxAsclin_RxFifoOutletWidth_2,     /**< \brief number of bytes 2  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   303      IfxAsclin_RxFifoOutletWidth_3      /**< \brief number of bytes 3  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   304  } IfxAsclin_RxFifoOutletWidth;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   305  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   306  /** \brief Alternate input selection for Rx signal.\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   307   * Definition in Ifx_ASCLIN.IOCR.B.ALTI
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   308   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   309  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   310  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   311      IfxAsclin_RxInputSelect_0,     /**< \brief alternate input selection 0  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   312      IfxAsclin_RxInputSelect_1,     /**< \brief alternate input selection 1  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   313      IfxAsclin_RxInputSelect_2,     /**< \brief alternate input selection 2  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   314      IfxAsclin_RxInputSelect_3,     /**< \brief alternate input selection 3  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   315      IfxAsclin_RxInputSelect_4,     /**< \brief alternate input selection 4  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   316      IfxAsclin_RxInputSelect_5,     /**< \brief alternate input selection 5  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   317      IfxAsclin_RxInputSelect_6,     /**< \brief alternate input selection 6  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   318      IfxAsclin_RxInputSelect_7      /**< \brief alternate input selection 7  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   319  } IfxAsclin_RxInputSelect;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   320  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   321  /** \brief Sample point position\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   322   * Definition in Ifx_ASCLIN.BITCON.B.SAMPLEPOINT
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   323   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   324  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   325  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   326      IfxAsclin_SamplePointPosition_1  = 1,   /**< \brief sample point position at 1 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   327      IfxAsclin_SamplePointPosition_2  = 2,   /**< \brief sample point position at 2 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   328      IfxAsclin_SamplePointPosition_3  = 3,   /**< \brief sample point position at 3 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   329      IfxAsclin_SamplePointPosition_4  = 4,   /**< \brief sample point position at 4 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   330      IfxAsclin_SamplePointPosition_5  = 5,   /**< \brief sample point position at 5 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   331      IfxAsclin_SamplePointPosition_6  = 6,   /**< \brief sample point position at 6 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   332      IfxAsclin_SamplePointPosition_7  = 7,   /**< \brief sample point position at 7 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   333      IfxAsclin_SamplePointPosition_8  = 8,   /**< \brief sample point position at 8 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   334      IfxAsclin_SamplePointPosition_9  = 9,   /**< \brief sample point position at 9 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   335      IfxAsclin_SamplePointPosition_10 = 10,  /**< \brief sample point position at 10 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   336      IfxAsclin_SamplePointPosition_11 = 11,  /**< \brief sample point position at 11 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   337      IfxAsclin_SamplePointPosition_12 = 12,  /**< \brief sample point position at 12 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   338      IfxAsclin_SamplePointPosition_13 = 13,  /**< \brief sample point position at 13 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   339      IfxAsclin_SamplePointPosition_14 = 14,  /**< \brief sample point position at 14 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   340      IfxAsclin_SamplePointPosition_15 = 15   /**< \brief sample point position at 15 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   341  } IfxAsclin_SamplePointPosition;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   342  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   343  /** \brief Number of samples per bit, sample mode/medianfilter\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   344   * Definition in Ifx_ASCLIN.BITCON.B.SM
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   345   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   346  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   347  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   348      IfxAsclin_SamplesPerBit_one   = 0, /**< \brief one sample per bit */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   349      IfxAsclin_SamplesPerBit_three = 1  /**< \brief three samples per bit */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   350  } IfxAsclin_SamplesPerBit;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   351  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   352  /** \brief SPI mode: defines the shift direction of the shift register.\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   353   * ASC and LIN mode: should be set to 0.\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   354   * Definition in Ifx_ASCLIN.FRAMECON.B.MSB
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   355   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   356  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   357  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   358      IfxAsclin_ShiftDirection_lsbFirst = 0,  /**< \brief LSB first */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   359      IfxAsclin_ShiftDirection_msbFirst = 1   /**< \brief MSB first */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   360  } IfxAsclin_ShiftDirection;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   361  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   362  /** \brief Defines the idle level of the SLSO signal, which is the level.\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   363   * Outside the data transmission, leading and trailing time intervals.\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   364   * Definition in Ifx_ASCLIN.IOCR.B.SPOL
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   365   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   366  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   367  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   368      IfxAsclin_SlavePolarity_idleLow  = 0, /**< \brief idle low */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   369      IfxAsclin_SlavePolarity_idlehigh = 1  /**< \brief idle high */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   370  } IfxAsclin_SlavePolarity;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   371  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   372  /** \brief Enable/disable the sensitivity of the module to sleep signal\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   373   * Definition in Ifx_ASCLIN.CLC.B.EDIS
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   374   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   375  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   376  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   377      IfxAsclin_SleepMode_enable  = 0, /**< \brief enables sleep mode */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   378      IfxAsclin_SleepMode_disable = 1  /**< \brief disables sleep mode */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   379  } IfxAsclin_SleepMode;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   380  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   381  /** \brief Error status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   382   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   383  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   384  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   385      IfxAsclin_Status_configurationError = 0,  /**< \brief Configuration error */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   386      IfxAsclin_Status_noError            = 1   /**< \brief No error */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   387  } IfxAsclin_Status;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   388  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   389  /** \brief ASC and LIN mode: number of stop bits (0 is not allowed), SPI mode: trailing delay.\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   390   * Definition in Ifx_ASCLIN.FRAMECON.B.STOP
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   391   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   392  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   393  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   394      IfxAsclin_StopBit_0,     /**< \brief number of stop bits 0  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   395      IfxAsclin_StopBit_1,     /**< \brief number of stop bits 1  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   396      IfxAsclin_StopBit_2,     /**< \brief number of stop bits 2  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   397      IfxAsclin_StopBit_3,     /**< \brief number of stop bits 3  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   398      IfxAsclin_StopBit_4,     /**< \brief number of stop bits 4  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   399      IfxAsclin_StopBit_5,     /**< \brief number of stop bits 5  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   400      IfxAsclin_StopBit_6,     /**< \brief number of stop bits 6  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   401      IfxAsclin_StopBit_7      /**< \brief number of stop bits 7  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   402  } IfxAsclin_StopBit;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   403  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   404  /** \brief OCDS Suspend Control (OCDS.SUS)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   405   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   406  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   407  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   408      IfxAsclin_SuspendMode_none = 0,  /**< \brief No suspend */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   409      IfxAsclin_SuspendMode_hard = 1,  /**< \brief Hard Suspend */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   410      IfxAsclin_SuspendMode_soft = 2   /**< \brief Soft Suspend */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   411  } IfxAsclin_SuspendMode;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   412  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   413  /** \brief Defines the number of bytes written to the Tx FIFO with one FPI bus write\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   414   * Definition in Ifx_ASCLIN.TXFIFOCON.B.INW
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   415   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   416  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   417  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   418      IfxAsclin_TxFifoInletWidth_0,     /**< \brief number of bytes 0  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   419      IfxAsclin_TxFifoInletWidth_1,     /**< \brief number of bytes 1  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   420      IfxAsclin_TxFifoInletWidth_2,     /**< \brief number of bytes 2  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   421      IfxAsclin_TxFifoInletWidth_3      /**< \brief number of bytes 3  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   422  } IfxAsclin_TxFifoInletWidth;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   423  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   424  /** \brief Defines the filling level that triggers a refill (TX) interrupt or DMA access\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   425   * Definition in Ifx_ASCLIN.TXFIFOCON.B.INTLEVEL
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   426   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   427  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   428  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   429      IfxAsclin_TxFifoInterruptLevel_0,     /**< \brief TX FIFO level 0  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   430      IfxAsclin_TxFifoInterruptLevel_1,     /**< \brief TX FIFO level 1  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   431      IfxAsclin_TxFifoInterruptLevel_2,     /**< \brief TX FIFO level 2  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   432      IfxAsclin_TxFifoInterruptLevel_3,     /**< \brief TX FIFO level 3  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   433      IfxAsclin_TxFifoInterruptLevel_4,     /**< \brief TX FIFO level 4  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   434      IfxAsclin_TxFifoInterruptLevel_5,     /**< \brief TX FIFO level 5  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   435      IfxAsclin_TxFifoInterruptLevel_6,     /**< \brief TX FIFO level 6  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   436      IfxAsclin_TxFifoInterruptLevel_7,     /**< \brief TX FIFO level 7  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   437      IfxAsclin_TxFifoInterruptLevel_8,     /**< \brief TX FIFO level 8  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   438      IfxAsclin_TxFifoInterruptLevel_9,     /**< \brief TX FIFO level 9  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   439      IfxAsclin_TxFifoInterruptLevel_10,    /**< \brief TX FIFO level 10  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   440      IfxAsclin_TxFifoInterruptLevel_11,    /**< \brief TX FIFO level 11  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   441      IfxAsclin_TxFifoInterruptLevel_12,    /**< \brief TX FIFO level 12  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   442      IfxAsclin_TxFifoInterruptLevel_13,    /**< \brief TX FIFO level 13  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   443      IfxAsclin_TxFifoInterruptLevel_14,    /**< \brief TX FIFO level 14  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   444      IfxAsclin_TxFifoInterruptLevel_15     /**< \brief TX FIFO level 15  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   445  } IfxAsclin_TxFifoInterruptLevel;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   446  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   447  /** \} */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   448  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   449  /** \addtogroup IfxLld_Asclin_Std_Operative
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   450   * \{ */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   451  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   452  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   453  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   454  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   455  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   456  /** \brief clears all the flags
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   457   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   458   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   459   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   460  IFX_INLINE void IfxAsclin_clearAllFlags(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   461  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   462  /** \brief Clears the break detected flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   463   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   464   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   465   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   466  IFX_INLINE void IfxAsclin_clearBreakDetectedFlag(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   467  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   468  /** \brief Clears the collision detection error flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   469   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   470   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   471   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   472  IFX_INLINE void IfxAsclin_clearCollisionDetectionErrorFlag(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   473  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   474  /** \brief Clears the falling edge detected flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   475   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   476   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   477   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   478  IFX_INLINE void IfxAsclin_clearFallingEdgeDetectedFlag(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   479  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   480  /** \brief Clears the frame error flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   481   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   482   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   483   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   484  IFX_INLINE void IfxAsclin_clearFrameErrorFlag(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   485  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   486  /** \brief Clears the header timeout flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   487   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   488   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   489   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   490  IFX_INLINE void IfxAsclin_clearHeaderTimeoutFlag(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   491  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   492  /** \brief Clears the kernel reset status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   493   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   494   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   495   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   496  IFX_INLINE void IfxAsclin_clearKernelResetStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   497  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   498  /** \brief Clears the auto baudrate detection error flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   499   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   500   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   501   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   502  IFX_INLINE void IfxAsclin_clearLinAutoBaudDetectionErrorFlag(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   503  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   504  /** \brief Clears the LIN checksum error flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   505   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   506   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   507   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   508  IFX_INLINE void IfxAsclin_clearLinChecksumErrorFlag(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   509  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   510  /** \brief Clears the LIN parity error flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   511   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   512   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   513   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   514  IFX_INLINE void IfxAsclin_clearLinParityErrorFlag(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   515  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   516  /** \brief Clears the parity error flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   517   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   518   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   519   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   520  IFX_INLINE void IfxAsclin_clearParityErrorFlag(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   521  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   522  /** \brief Clears the raising edge detected flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   523   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   524   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   525   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   526  IFX_INLINE void IfxAsclin_clearRaisingEdgeDetectedFlag(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   527  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   528  /** \brief Clears the response timeout flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   529   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   530   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   531   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   532  IFX_INLINE void IfxAsclin_clearResponseTimeoutFlag(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   533  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   534  /** \brief Clears the Rx FIFO level flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   535   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   536   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   537   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   538  IFX_INLINE void IfxAsclin_clearRxFifoFillLevelFlag(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   539  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   540  /** \brief Clears the Rx FIFO overflow flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   541   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   542   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   543   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   544  IFX_INLINE void IfxAsclin_clearRxFifoOverflowFlag(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   545  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   546  /** \brief Clears the Rx FIFO underflow flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   547   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   548   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   549   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   550  IFX_INLINE void IfxAsclin_clearRxFifoUnderflowFlag(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   551  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   552  /** \brief Clears the receive header end flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   553   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   554   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   555   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   556  IFX_INLINE void IfxAsclin_clearRxHeaderEndFlag(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   557  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   558  /** \brief Clears the receive response end flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   559   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   560   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   561   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   562  IFX_INLINE void IfxAsclin_clearRxResponseEndFlag(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   563  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   564  /** \brief Clears the transmission pending flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   565   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   566   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   567   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   568  IFX_INLINE void IfxAsclin_clearTransmissionCompletedFlag(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   569  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   570  /** \brief Clears the Tx FIFO level flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   571   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   572   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   573   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   574  IFX_INLINE void IfxAsclin_clearTxFifoFillLevelFlag(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   575  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   576  /** \brief Clears the Tx FIFO overflow flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   577   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   578   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   579   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   580  IFX_INLINE void IfxAsclin_clearTxFifoOverflowFlag(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   581  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   582  /** \brief Clears the transmit header end flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   583   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   584   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   585   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   586  IFX_INLINE void IfxAsclin_clearTxHeaderEndFlag(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   587  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   588  /** \brief Clears the transmit response end flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   589   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   590   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   591   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   592  IFX_INLINE void IfxAsclin_clearTxResponseEndFlag(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   593  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   594  /** \brief Flushes (empties) the Rx FIFO
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   595   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   596   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   597   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   598  IFX_INLINE void IfxAsclin_flushRxFifo(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   599  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   600  /** \brief Flushes (empties) the Tx FIFO
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   601   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   602   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   603   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   604  IFX_INLINE void IfxAsclin_flushTxFifo(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   605  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   606  /** \brief Sets the baudrate detection's lower limit
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   607   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   608   * \param limit value of the lower limit
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   609   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   610   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   611  IFX_INLINE void IfxAsclin_setBrdLowerlimt(Ifx_ASCLIN *asclin, uint8 limit);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   612  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   613  /** \brief Sets the baudrate detection's upper limit
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   614   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   615   * \param limit value of the upper limit
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   616   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   617   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   618  IFX_INLINE void IfxAsclin_setBrdUpperlimt(Ifx_ASCLIN *asclin, uint8 limit);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   619  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   620  /** \brief Sets the checksum injection
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   621   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   622   * \param csi checksum injection selection (not written / written)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   623   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   624   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   625  IFX_INLINE void IfxAsclin_setChecksumInjection(Ifx_ASCLIN *asclin, IfxAsclin_ChecksumInjection csi);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   626  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   627  /** \brief Sets the checksum mode
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   628   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   629   * \param mode checksum mode selection (classic / enhanced)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   630   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   631   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   632  IFX_INLINE void IfxAsclin_setChecksumMode(Ifx_ASCLIN *asclin, IfxAsclin_Checksum mode);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   633  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   634  /** \brief Sets the data length (number of bits per transfer)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   635   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   636   * \param length data length selection
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   637   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   638   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   639  IFX_INLINE void IfxAsclin_setDataLength(Ifx_ASCLIN *asclin, IfxAsclin_DataLength length);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   640  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   641  /** \brief Sets the denominator of the fractional divider
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   642   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   643   * \param denominator value of the denominator
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   644   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   645   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   646  IFX_INLINE void IfxAsclin_setDenominator(Ifx_ASCLIN *asclin, uint16 denominator);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   647  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   648  /** \brief Sets the disable module request
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   649   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   650   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   651   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   652  IFX_INLINE void IfxAsclin_setDisableModuleRequest(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   653  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   654  /** \brief Sets the enable module request
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   655   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   656   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   657   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   658  IFX_INLINE void IfxAsclin_setEnableModuleRequest(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   659  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   660  /** \brief Sets digital glitch filter depth
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   661   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   662   * \param depth digital glitch filter depth selection (1 to 63)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   663   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   664   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   665  IFX_INLINE void IfxAsclin_setFilterDepth(Ifx_ASCLIN *asclin, uint8 depth);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   666  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   667  /** \brief Sets the header response selection
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   668   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   669   * \param type type of selection (header and response or header only)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   670   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   671   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   672  IFX_INLINE void IfxAsclin_setHeaderResponseSelect(Ifx_ASCLIN *asclin, IfxAsclin_HeaderResponseSelect type);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   673  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   674  /** \brief Sets the idle delay
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   675   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   676   * \param delay idle delay selection
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   677   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   678   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   679  IFX_INLINE void IfxAsclin_setIdleDelay(Ifx_ASCLIN *asclin, IfxAsclin_IdleDelay delay);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   680  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   681  /** \brief Sets the kernal reset of the KRST1
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   682   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   683   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   684   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   685  IFX_INLINE void IfxAsclin_setKernelResetOne(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   686  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   687  /** \brief Sets the kernel reset of the KRST0
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   688   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   689   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   690   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   691  IFX_INLINE void IfxAsclin_setKernelResetZero(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   692  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   693  /** \brief Sets the lead delay
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   694   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   695   * \param delay lead delay selection
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   696   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   697   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   698  IFX_INLINE void IfxAsclin_setLeadDelay(Ifx_ASCLIN *asclin, IfxAsclin_LeadDelay delay);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   699  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   700  /** \brief Sets the LIN break length
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   701   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   702   * \param length value of the break length
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   703   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   704   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   705  IFX_INLINE void IfxAsclin_setLinBreakLength(Ifx_ASCLIN *asclin, uint8 length);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   706  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   707  /** \brief Sets the LIN header timeout
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   708   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   709   * \param timeout value of the header timeout
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   710   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   711   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   712  IFX_INLINE void IfxAsclin_setLinHeaderTimeout(Ifx_ASCLIN *asclin, uint8 timeout);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   713  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   714  /** \brief Sets the LIN mode of operation
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   715   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   716   * \param mode mode selection (slave / master)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   717   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   718   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   719  IFX_INLINE void IfxAsclin_setLinMode(Ifx_ASCLIN *asclin, IfxAsclin_LinMode mode);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   720  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   721  /** \brief Sets the LIN response timeout mode
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   722   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   723   * \param mode LIN response timeout mode selection
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   724   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   725   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   726  IFX_INLINE void IfxAsclin_setLinResponseTimeoutMode(Ifx_ASCLIN *asclin, IfxAsclin_LinResponseTimeoutMode mode);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   727  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   728  /** \brief Sets the LIN response timeout threshold
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   729   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   730   * \param threshold value of the tomeout threshold (1 to 256 bit times)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   731   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   732   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   733  IFX_INLINE void IfxAsclin_setLinResponseTimeoutThreshold(Ifx_ASCLIN *asclin, uint16 threshold);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   734  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   735  /** \brief Sets the numerator of the fractional divider
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   736   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   737   * \param numerator value of the numerator
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   738   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   739   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   740  IFX_INLINE void IfxAsclin_setNumerator(Ifx_ASCLIN *asclin, uint16 numerator);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   741  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   742  /** \brief Sets the division ratio of the baudrate post divider
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   743   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   744   * \param ovsFactor value of oversampling factor
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   745   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   746   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   747  IFX_INLINE void IfxAsclin_setOversampling(Ifx_ASCLIN *asclin, IfxAsclin_OversamplingFactor ovsFactor);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   748  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   749  /** \brief Sets the parity type
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   750   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   751   * \param type parity type selction (even / odd)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   752   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   753   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   754  IFX_INLINE void IfxAsclin_setParityType(Ifx_ASCLIN *asclin, IfxAsclin_ParityType type);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   755  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   756  /** \brief Sets the division ratio of the predivider (prescaler)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   757   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   758   * \param prescaler value of prescaler
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   759   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   760   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   761  IFX_INLINE void IfxAsclin_setPrescaler(Ifx_ASCLIN *asclin, uint16 prescaler);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   762  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   763  /** \brief Sets the receive buffer mode
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   764   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   765   * \param mode receive buffer mode selection (Rx FIFO or single stage Rx buffer)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   766   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   767   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   768  IFX_INLINE void IfxAsclin_setRxBufferMode(Ifx_ASCLIN *asclin, IfxAsclin_ReceiveBufferMode mode);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   769  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   770  /** \brief Sets the Tx FIFO interrupt level
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   771   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   772   * \param level interrupt level selection
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   773   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   774   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   775  IFX_INLINE void IfxAsclin_setRxFifoInterruptLevel(Ifx_ASCLIN *asclin, IfxAsclin_RxFifoInterruptLevel level);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   776  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   777  /** \brief Sets the receive FIFO outlet width
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   778   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   779   * \param width number of bytes read to the Rx FIFO with one FPI bus read
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   780   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   781   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   782  IFX_INLINE void IfxAsclin_setRxFifoOutletWidth(Ifx_ASCLIN *asclin, IfxAsclin_RxFifoOutletWidth width);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   783  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   784  /** \brief Sets the sample mode (number of samples per bit / median filter)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   785   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   786   * \param medianFilter value of the median filter
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   787   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   788   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   789  IFX_INLINE void IfxAsclin_setSampleMode(Ifx_ASCLIN *asclin, IfxAsclin_SamplesPerBit medianFilter);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   790  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   791  /** \brief Sets the sampling point position
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   792   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   793   * \param spPosition sample point position selection
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   794   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   795   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   796  IFX_INLINE void IfxAsclin_setSamplePointPosition(Ifx_ASCLIN *asclin, IfxAsclin_SamplePointPosition spPosition);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   797  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   798  /** \brief Sets the shift direction
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   799   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   800   * \param dir shift direction selection (LSB / MSB first)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   801   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   802   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   803  IFX_INLINE void IfxAsclin_setShiftDirection(Ifx_ASCLIN *asclin, IfxAsclin_ShiftDirection dir);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   804  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   805  /** \brief Sets the number of stop bits
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   806   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   807   * \param stopBit number of stop bits selection
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   808   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   809   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   810  IFX_INLINE void IfxAsclin_setStopBit(Ifx_ASCLIN *asclin, IfxAsclin_StopBit stopBit);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   811  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   812  /** \brief Sets the transmit header request flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   813   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   814   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   815   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   816  IFX_INLINE void IfxAsclin_setTransmitHeaderRequestFlag(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   817  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   818  /** \brief Sets the transmit response request flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   819   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   820   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   821   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   822  IFX_INLINE void IfxAsclin_setTransmitResponseRequestFlag(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   823  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   824  /** \brief Sets the transmission wake request flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   825   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   826   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   827   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   828  IFX_INLINE void IfxAsclin_setTransmitWakeRequestFlag(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   829  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   830  /** \brief Sets the transmit FIFO inlet width
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   831   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   832   * \param width number of bytes written to the Tx FIFO with one FPI bus write
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   833   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   834   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   835  IFX_INLINE void IfxAsclin_setTxFifoInletWidth(Ifx_ASCLIN *asclin, IfxAsclin_TxFifoInletWidth width);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   836  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   837  /** \brief Sets the Tx FIFO interrupt level
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   838   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   839   * \param level interrupt level selection
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   840   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   841   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   842  IFX_INLINE void IfxAsclin_setTxFifoInterruptLevel(Ifx_ASCLIN *asclin, IfxAsclin_TxFifoInterruptLevel level);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   843  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   844  /** \} */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   845  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   846  /** \addtogroup IfxLld_Asclin_Std_Utility
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   847   * \{ */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   848  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   849  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   850  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   851  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   852  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   853  /** \brief Returns the break detected flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   854   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   855   * \return break detected flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   856   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   857  IFX_INLINE boolean IfxAsclin_getBreakDetectedFlagStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   858  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   859  /** \brief Returns the clock source
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   860   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   861   * \return clock source
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   862   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   863  IFX_INLINE uint8 IfxAsclin_getClockSource(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   864  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   865  /** \brief Returns the clock status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   866   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   867   * \return clock status (off / on)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   868   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   869  IFX_INLINE boolean IfxAsclin_getClockStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   870  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   871  /** \brief Returns the collision detection error flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   872   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   873   * \return collision detection error flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   874   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   875  IFX_INLINE boolean IfxAsclin_getCollisionDetectionErrorFlagStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   876  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   877  /** \brief Returns  the falling edge detected flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   878   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   879   * \return falling edge detected flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   880   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   881  IFX_INLINE boolean IfxAsclin_getFallingEdgeDetectedFlagStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   882  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   883  /** \brief Returns the frame error flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   884   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   885   * \return frame error flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   886   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   887  IFX_INLINE boolean IfxAsclin_getFrameErrorFlagStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   888  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   889  /** \brief Returns the header timeout flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   890   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   891   * \return header timeout flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   892   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   893  IFX_INLINE boolean IfxAsclin_getHeaderTimeoutFlagStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   894  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   895  /** \brief Returns the kernel reset status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   896   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   897   * \return kernel reset status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   898   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   899  IFX_INLINE boolean IfxAsclin_getKernelResetStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   900  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   901  /** \brief Returns the LIN auto baudrate detection error flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   902   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   903   * \return LIN auto baudrate detection error flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   904   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   905  IFX_INLINE boolean IfxAsclin_getLinAutoBaudDetectionErrorFlagStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   906  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   907  /** \brief Returns the LIN checksum error flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   908   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   909   * \return LIN checksum error flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   910   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   911  IFX_INLINE boolean IfxAsclin_getLinChecksumErrorFlagStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   912  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   913  /** \brief Returns the LIN parity error flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   914   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   915   * \return LIN parity error flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   916   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   917  IFX_INLINE boolean IfxAsclin_getLinParityErrorFlagStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   918  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   919  /** \brief Returns the module status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   920   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   921   * \return module status (enabled / disabled)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   922   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   923  IFX_INLINE boolean IfxAsclin_getModuleStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   924  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   925  /** \brief Returns the parity error flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   926   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   927   * \return parity error flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   928   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   929  IFX_INLINE boolean IfxAsclin_getParityErrorFlagStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   930  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   931  /** \brief Returns the division ratio of the predivider (prescaler)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   932   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   933   * \return value of prescaler
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   934   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   935  IFX_INLINE uint16 IfxAsclin_getPrescaler(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   936  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   937  /** \brief Returns the raising edge detected flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   938   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   939   * \return raising edge detected flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   940   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   941  IFX_INLINE boolean IfxAsclin_getRaisingEdgeDetectedFlagStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   942  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   943  /** \brief Returns the received signal status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   944   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   945   * \return received signal status (0 is low & 1 is high)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   946   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   947  IFX_INLINE boolean IfxAsclin_getReceiveSignalStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   948  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   949  /** \brief Returns the response timeout flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   950   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   951   * \return response timeout flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   952   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   953  IFX_INLINE boolean IfxAsclin_getResponseTimeoutFlagStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   954  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   955  /** \brief Returns the current filling level of Tx FIFO
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   956   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   957   * \return current filling level of Rx FIFO
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   958   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   959  IFX_INLINE uint8 IfxAsclin_getRxFifoFillLevel(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   960  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   961  /** \brief Returns the Rx FIFO level flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   962   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   963   * \return Rx FIFO level flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   964   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   965  IFX_INLINE boolean IfxAsclin_getRxFifoFillLevelFlagStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   966  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   967  /** \brief Returns the receive FIFO inlet width
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   968   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   969   * \return number of bytes read to the Rx FIFO with one FPI bus read
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   970   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   971  IFX_INLINE uint8 IfxAsclin_getRxFifoOutletWidth(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   972  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   973  /** \brief Returns the Rx FIFO overflow flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   974   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   975   * \return Rx FIFO overflow flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   976   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   977  IFX_INLINE boolean IfxAsclin_getRxFifoOverflowFlagStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   978  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   979  /** \brief Returns the Rx FIFO underflow flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   980   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   981   * \return Rx FIFO underflow flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   982   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   983  IFX_INLINE boolean IfxAsclin_getRxFifoUnderflowFlagStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   984  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   985  /** \brief Returns the receive header end flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   986   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   987   * \return receive header end flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   988   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   989  IFX_INLINE boolean IfxAsclin_getRxHeaderEndFlagStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   990  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   991  /** \brief Returns the receive response end flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   992   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   993   * \return receive response end flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   994   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   995  IFX_INLINE boolean IfxAsclin_getRxResponseEndFlagStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   996  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   997  /** \brief Returns the transmission pending flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   998   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   999   * \return transmission pending flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1000   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1001  IFX_INLINE boolean IfxAsclin_getTransmissionCompletedFlagStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1002  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1003  /** \brief Returns the transmit signal status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1004   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1005   * \return transmit signal status (0 is low & 1 is high)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1006   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1007  IFX_INLINE boolean IfxAsclin_getTransmitSignalStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1008  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1009  /** \brief Returns the current filling level of Tx FIFO
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1010   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1011   * \return current filling level of Tx FIFO
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1012   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1013  IFX_INLINE uint8 IfxAsclin_getTxFifoFillLevel(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1014  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1015  /** \brief Returns the Tx FIFO level flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1016   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1017   * \return Tx FIFO level flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1018   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1019  IFX_INLINE boolean IfxAsclin_getTxFifoFillLevelFlagStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1020  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1021  /** \brief Returns the transmit FIFO inlet width
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1022   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1023   * \return number of bytes written to the Tx FIFO with one FPI bus write
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1024   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1025  IFX_INLINE uint8 IfxAsclin_getTxFifoInletWidth(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1026  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1027  /** \brief Returns the Tx FIFO overflow flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1028   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1029   * \return Tx FIFO overflow flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1030   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1031  IFX_INLINE boolean IfxAsclin_getTxFifoOverflowFlagStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1032  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1033  /** \brief Returns the transmit header end flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1034   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1035   * \return transmit header end flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1036   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1037  IFX_INLINE boolean IfxAsclin_getTxHeaderEndFlagStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1038  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1039  /** \brief Returns the transmit response end flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1040   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1041   * \return transmit response end flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1042   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1043  IFX_INLINE boolean IfxAsclin_getTxResponseEndFlagStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1044  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1045  /** \brief Sets the sensitivity of the module to sleep signal
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1046   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1047   * \param mode mode selection (enable / disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1048   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1049   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1050  IFX_INLINE void IfxAsclin_setSleepMode(Ifx_ASCLIN *asclin, IfxAsclin_SleepMode mode);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1051  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1052  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1053  /*-------------------------Global Function Prototypes-------------------------*/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1054  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1055  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1056  /** \brief API to get the address for ASCLIN HW module register memory map
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1057   * \param asclin Resource index of the ASCLIN
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1058   * \return ASCLIN module register address
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1059   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1060  IFX_EXTERN Ifx_ASCLIN *IfxAsclin_getAddress(IfxAsclin_Index asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1061  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1062  /** \brief Returns the ASCLIN module FA frequency in Hz
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1063   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1064   * \return Returns the ASCLIN module FA frequency in Hz
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1065   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1066  IFX_EXTERN float32 IfxAsclin_getFaFrequency(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1067  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1068  /** \brief API to get the resource index of the ASCLIN specified.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1069   * \return asclin resource index
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1070   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1071  IFX_EXTERN IfxAsclin_Index IfxAsclin_getIndex(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1072  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1073  /** \brief Returns the OVS frequency
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1074   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1075   * \return Returns the ASCLIN module OVS frequency in Hz
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1076   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1077  IFX_EXTERN float32 IfxAsclin_getOvsFrequency(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1078  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1079  /** \brief Returns the PD frequency
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1080   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1081   * \return Returns the ASCLIN module PD frequency in Hz
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1082   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1083  IFX_EXTERN float32 IfxAsclin_getPdFrequency(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1084  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1085  /** \brief Returns the SHIFT frequency
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1086   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1087   * \return Returns the ASCLIN module SHIFT frequency in Hz
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1088   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1089  IFX_EXTERN float32 IfxAsclin_getShiftFrequency(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1090  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1091  /** \brief resets Asclin kernel
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1092   * \param asclin pointer to ASCLIN resgisters
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1093   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1094   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1095  IFX_EXTERN void IfxAsclin_resetModule(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1096  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1097  /** \} */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1098  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1099  /** \addtogroup IfxLld_Asclin_Std_Configuration
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1100   * \{ */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1101  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1102  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1103  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1104  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1105  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1106  /** \brief disables all flags
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1107   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1108   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1109   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1110  IFX_INLINE void IfxAsclin_disableAllFlags(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1111  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1112  /** \brief Enables/disables the auto baudrate detection
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1113   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1114   * \param enable choice (enable / disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1115   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1116   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1117  IFX_INLINE void IfxAsclin_enableAutoBaudrateDetection(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1118  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1119  /** \brief Enables/disables break detected flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1120   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1121   * \param enable choice (enable / disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1122   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1123   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1124  IFX_INLINE void IfxAsclin_enableBreakDetectedFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1125  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1126  /** \brief Enables/disables the collision detection
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1127   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1128   * \param enable choice (enable/disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1129   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1130   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1131  IFX_INLINE void IfxAsclin_enableCollisionDetection(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1132  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1133  /** \brief Enables/disables LIN collision detection error flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1134   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1135   * \param enable choice (enable / disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1136   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1137   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1138  IFX_INLINE void IfxAsclin_enableCollisionDetectionErrorFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1139  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1140  /** \brief Enables/disables CTS
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1141   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1142   * \param enable choice (enable/disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1143   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1144   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1145  IFX_INLINE void IfxAsclin_enableCts(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1146  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1147  /** \brief Enables/disables falling edge detected flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1148   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1149   * \param enable choice (enable / disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1150   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1151   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1152  IFX_INLINE void IfxAsclin_enableFallingEdgeDetectedFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1153  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1154  /** \brief Enables/disables frame error flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1155   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1156   * \param enable choice (enable / disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1157   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1158   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1159  IFX_INLINE void IfxAsclin_enableFrameErrorFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1160  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1161  /** \brief Enables/disables the hardware checksum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1162   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1163   * \param enable choice (enable / disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1164   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1165   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1166  IFX_INLINE void IfxAsclin_enableHardwareChecksum(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1167  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1168  /** \brief Enables/disables header timeout flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1169   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1170   * \param enable choice (enable / disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1171   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1172   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1173  IFX_INLINE void IfxAsclin_enableHeaderTimeoutFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1174  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1175  /** \brief Enables/disables LIN auto baudrate detection error flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1176   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1177   * \param enable choice (enable / disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1178   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1179   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1180  IFX_INLINE void IfxAsclin_enableLinAutoBaudDetectionErrorFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1181  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1182  /** \brief Enables/disables LIN checksum error flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1183   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1184   * \param enable choice (enable / disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1185   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1186   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1187  IFX_INLINE void IfxAsclin_enableLinChecksumErrorFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1188  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1189  /** \brief Enables/disables LIN parity error flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1190   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1191   * \param enable choice (enable / disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1192   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1193   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1194  IFX_INLINE void IfxAsclin_enableLinParityErrorFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1195  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1196  /** \brief Enables/disables the loop back mode
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1197   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1198   * \param enable choice (enable/disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1199   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1200   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1201  IFX_INLINE void IfxAsclin_enableLoopBackMode(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1202  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1203  /** \brief Enables/disables the parity bit attachment to tha data bits
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1204   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1205   * \param enable choice (enable/disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1206   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1207   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1208  IFX_INLINE void IfxAsclin_enableParity(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1209  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1210  /** \brief Enables/disables parity error flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1211   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1212   * \param enable choice (enable / disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1213   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1214   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1215  IFX_INLINE void IfxAsclin_enableParityErrorFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1216  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1217  /** \brief Enables/disables raising edge detected flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1218   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1219   * \param enable choice (enable / disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1220   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1221   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1222  IFX_INLINE void IfxAsclin_enableRaisingEdgeDetectedFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1223  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1224  /** \brief Enables/disables response timeout flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1225   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1226   * \param enable choice (enable / disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1227   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1228   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1229  IFX_INLINE void IfxAsclin_enableResponseTimeoutFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1230  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1231  /** \brief Enables/disables Rx FIFO level flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1232   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1233   * \param enable choice (enable / disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1234   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1235   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1236  IFX_INLINE void IfxAsclin_enableRxFifoFillLevelFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1237  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1238  /** \brief Enables/disables the receive FIFO outlet to allow filling of Rx FIFO through shift register
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1239   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1240   * \param enable choice (enable/disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1241   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1242   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1243  IFX_INLINE void IfxAsclin_enableRxFifoInlet(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1244  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1245  /** \brief Enables/disables Rx FIFO overflow flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1246   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1247   * \param enable choice (enable / disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1248   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1249   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1250  IFX_INLINE void IfxAsclin_enableRxFifoOverflowFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1251  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1252  /** \brief Enables/disables Rx FIFO underflow flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1253   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1254   * \param enable choice (enable / disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1255   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1256   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1257  IFX_INLINE void IfxAsclin_enableRxFifoUnderflowFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1258  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1259  /** \brief Enables/disables receive header end flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1260   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1261   * \param enable choice (enable / disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1262   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1263   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1264  IFX_INLINE void IfxAsclin_enableRxHeaderEndFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1265  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1266  /** \brief Enables/disables receive response end flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1267   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1268   * \param enable choice (enable / disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1269   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1270   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1271  IFX_INLINE void IfxAsclin_enableRxResponseEndFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1272  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1273  /** \brief Enables/disables transmission completed flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1274   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1275   * \param enable choice (enable / disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1276   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1277   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1278  IFX_INLINE void IfxAsclin_enableTransmissionCompletedFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1279  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1280  /** \brief Enables/disables Tx FIFO level flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1281   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1282   * \param enable choice (enable / disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1283   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1284   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1285  IFX_INLINE void IfxAsclin_enableTxFifoFillLevelFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1286  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1287  /** \brief Enables/disables the transmit FIFO outlet to allow transmission
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1288   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1289   * \param enable choice (enable/disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1290   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1291   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1292  IFX_INLINE void IfxAsclin_enableTxFifoOutlet(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1293  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1294  /** \brief Enables/disables Tx FIFO overflow flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1295   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1296   * \param enable choice (enable / disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1297   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1298   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1299  IFX_INLINE void IfxAsclin_enableTxFifoOverflowFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1300  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1301  /** \brief Enables/disables transmit header end flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1302   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1303   * \param enable choice (enable / disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1304   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1305   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1306  IFX_INLINE void IfxAsclin_enableTxHeaderEndFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1307  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1308  /** \brief Enables/disables transmit response end flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1309   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1310   * \param enable choice (enable / disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1311   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1312   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1313  IFX_INLINE void IfxAsclin_enableTxResponseEndFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1314  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1315  /** \brief Returns the module's suspend state.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1316   * TRUE :if module is suspended.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1317   * FALSE:if module is not yet suspended.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1318   * \param asclin Pointer to ASCLIN module registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1319   * \return Suspend status (TRUE / FALSE)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1320   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1321  IFX_INLINE boolean IfxAsclin_isModuleSuspended(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1322  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1323  /** \brief Selects the clock polarity
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1324   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1325   * \param cpol CPOL selection
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1326   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1327   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1328  IFX_INLINE void IfxAsclin_setClockPolarity(Ifx_ASCLIN *asclin, IfxAsclin_ClockPolarity cpol);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1329  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1330  /** \brief Selects the CTS input pin
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1331   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1332   * \param ctsi CTS input pin selection
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1333   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1334   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1335  IFX_INLINE void IfxAsclin_setCtsInput(Ifx_ASCLIN *asclin, IfxAsclin_CtsInputSelect ctsi);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1336  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1337  /** \brief Selects the module's mode of operation
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1338   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1339   * \param mode mode selction
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1340   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1341   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1342  IFX_INLINE void IfxAsclin_setFrameMode(Ifx_ASCLIN *asclin, IfxAsclin_FrameMode mode);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1343  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1344  /** \brief Selects the RTS/CTS polarity
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1345   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1346   * \param rcpol RCPOL selection
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1347   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1348   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1349  IFX_INLINE void IfxAsclin_setRtsCtsPolarity(Ifx_ASCLIN *asclin, IfxAsclin_RtsCtsPolarity rcpol);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1350  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1351  /** \brief Selects the alternate input for Rx signal
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1352   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1353   * \param alti alternate input selection of Rx signal
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1354   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1355   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1356  IFX_INLINE void IfxAsclin_setRxInput(Ifx_ASCLIN *asclin, IfxAsclin_RxInputSelect alti);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1357  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1358  /** \brief Selects the slave polarity
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1359   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1360   * \param spol SPOL selection
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1361   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1362   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1363  IFX_INLINE void IfxAsclin_setSlavePolarity(Ifx_ASCLIN *asclin, IfxAsclin_SlavePolarity spol);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1364  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1365  /** \brief Configure the Module to Hard/Soft suspend mode.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1366   * Note: The api works only when the OCDS is enabled and in Supervisor Mode. When OCDS is disabled the OCS suspend control is ineffective.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1367   * \param asclin Pointer to ASCLIN module registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1368   * \param mode Module suspend mode
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1369   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1370   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1371  IFX_INLINE void IfxAsclin_setSuspendMode(Ifx_ASCLIN *asclin, IfxAsclin_SuspendMode mode);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1372  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1373  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1374  /*-------------------------Global Function Prototypes-------------------------*/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1375  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1376  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1377  /** \brief Set the bit timing
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1378   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1379   * \note this function required FA source and the PD frequency to be set to their final values
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1380   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1381   * \param baudrate Required baudrate
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1382   * \param oversampling The oversampling factor
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1383   * \param samplepoint The sample point position
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1384   * \param medianFilter Number of samples per bit (median filter)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1385   * \return TRUE if configuration was successfull
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1386   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1387  IFX_EXTERN boolean IfxAsclin_setBitTiming(Ifx_ASCLIN *asclin, float32 baudrate, IfxAsclin_OversamplingFactor oversampling, IfxAsclin_SamplePointPosition samplepoint, IfxAsclin_SamplesPerBit medianFilter);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1388  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1389  /** \} */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1390  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1391  /** \addtogroup IfxLld_Asclin_Std_External
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1392   * \{ */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1393  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1394  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1395  /*-------------------------Global Function Prototypes-------------------------*/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1396  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1397  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1398  /** \brief Disables the module
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1399   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1400   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1401   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1402  IFX_EXTERN void IfxAsclin_disableModule(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1403  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1404  /** \brief Enables the ASC error interrupt Flags
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1405   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1406   * \param parEnable parity error
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1407   * \param rfoEnable Rx FIFO overflow error
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1408   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1409   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1410  IFX_EXTERN void IfxAsclin_enableAscErrorFlags(Ifx_ASCLIN *asclin, boolean parEnable, boolean rfoEnable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1411  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1412  /** \brief Enables the module
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1413   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1414   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1415   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1416  IFX_EXTERN void IfxAsclin_enableModule(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1417  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1418  /** \brief Returns the SRC pointer for ERR
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1419   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1420   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1421  IFX_EXTERN volatile Ifx_SRC_SRCR *IfxAsclin_getSrcPointerEr(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1422  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1423  /** \brief Returns the  SRC pointer for Rx
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1424   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1425   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1426  IFX_EXTERN volatile Ifx_SRC_SRCR *IfxAsclin_getSrcPointerRx(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1427  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1428  /** \brief Returns the SRC pointer for Tx
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1429   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1430   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1431  IFX_EXTERN volatile Ifx_SRC_SRCR *IfxAsclin_getSrcPointerTx(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1432  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1433  /** \brief Reads data up to 16 bits
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1434   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1435   * \param data Array where the read data shall be stored
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1436   * \param count number of items to read
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1437   * \return number of items that could not be read
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1438   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1439  IFX_EXTERN uint32 IfxAsclin_read16(Ifx_ASCLIN *asclin, uint16 *data, uint32 count);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1440  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1441  /** \brief Reads data up to 32 bits
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1442   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1443   * \param data Array where the read data shall be stored
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1444   * \param count number of items to read
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1445   * \return number of items that could not be read
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1446   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1447  IFX_EXTERN uint32 IfxAsclin_read32(Ifx_ASCLIN *asclin, uint32 *data, uint32 count);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1448  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1449  /** \brief Reads data up to 8 bits
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1450   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1451   * \param data Array where the read data shall be stored
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1452   * \param count number of items to read
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1453   * \return number of items that could not be read
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1454   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1455  IFX_EXTERN uint32 IfxAsclin_read8(Ifx_ASCLIN *asclin, uint8 *data, uint32 count);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1456  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1457  /** \brief Sets the baudrate bit fields
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1458   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1459   * \param prescaler division ratio of the predivider
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1460   * \param numerator numerator of the fractional divider
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1461   * \param denominator denominator of the fractional divider
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1462   * \param oversampling division ratio of the baudrate postdivider
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1463   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1464   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1465  IFX_EXTERN void IfxAsclin_setBaudrateBitFields(Ifx_ASCLIN *asclin, uint16 prescaler, uint16 numerator, uint16 denominator, IfxAsclin_OversamplingFactor oversampling);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1466  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1467  /** \brief Sets the  clock source
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1468   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1469   * \param clockSource clock source selection
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1470   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1471   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1472  IFX_EXTERN void IfxAsclin_setClockSource(Ifx_ASCLIN *asclin, IfxAsclin_ClockSource clockSource);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1473  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1474  /** \brief Writes data up to 16 bits
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1475   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1476   * \param data Array of data to be send
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1477   * \param count number of items to be send
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1478   * \return the number of items that could not be send
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1479   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1480  IFX_EXTERN uint32 IfxAsclin_write16(Ifx_ASCLIN *asclin, uint16 *data, uint32 count);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1481  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1482  /** \brief Writes data up to 32 bits
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1483   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1484   * \param data Array of data to be send
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1485   * \param count number of items to be send
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1486   * \return the number of items that could not be send
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1487   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1488  IFX_EXTERN uint32 IfxAsclin_write32(Ifx_ASCLIN *asclin, uint32 *data, uint32 count);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1489  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1490  /** \brief Writes data up to 8 bits
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1491   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1492   * \param data Array of data to be send
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1493   * \param count number of items to be send
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1494   * \return the number of items that could not be send
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1495   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1496  IFX_EXTERN uint32 IfxAsclin_write8(Ifx_ASCLIN *asclin, uint8 *data, uint32 count);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1497  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1498  /** \} */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1499  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1500  /** \addtogroup IfxLld_Asclin_Std_IO
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1501   * \{ */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1502  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1503  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1504  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1505  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1506  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1507  /** \brief Initializes a CTS input
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1508   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1509   * Attention: the kernel clock has to be disabled whenever the input multiplexer is changed.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1510   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1511   * This can be done with IfxAsclin_setClockSource(asclinSFR, IfxAsclin_ClockSource_noClock);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1512   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1513   * After the function call, the current clock can be enabled again.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1514   * \param cts the CTS Pin which should be configured
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1515   * \param inputMode the pin input mode which should be configured
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1516   * \param padDriver the pad driver mode which should be configured
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1517   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1518   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1519  IFX_INLINE void IfxAsclin_initCtsPin(const IfxAsclin_Cts_In *cts, IfxPort_InputMode inputMode, IfxPort_PadDriver padDriver);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1520  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1521  /** \brief Initializes a RTS output
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1522   * \param rts the RTS Pin which should be configured
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1523   * \param outputMode the pin output mode which should be configured
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1524   * \param padDriver the pad driver mode which should be configured
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1525   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1526   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1527  IFX_INLINE void IfxAsclin_initRtsPin(const IfxAsclin_Rts_Out *rts, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1528  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1529  /** \brief Initializes a RX input
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1530   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1531   * Attention: the kernel clock has to be disabled whenever the input multiplexer is changed.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1532   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1533   * This can be done with IfxAsclin_setClockSource(asclinSFR, IfxAsclin_ClockSource_noClock);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1534   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1535   * After the function call, the current clock can be enabled again.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1536   * \param rx the RX Pin which should be configured
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1537   * \param inputMode the pin input mode which should be configured
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1538   * \param padDriver the pad driver mode which should be configured
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1539   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1540   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1541  IFX_INLINE void IfxAsclin_initRxPin(const IfxAsclin_Rx_In *rx, IfxPort_InputMode inputMode, IfxPort_PadDriver padDriver);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1542  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1543  /** \brief Initializes a SCLK output
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1544   * \param sclk the SCLK Pin which should be configured
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1545   * \param outputMode the pin output mode which should be configured
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1546   * \param padDriver the pad driver mode which should be configured
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1547   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1548   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1549  IFX_INLINE void IfxAsclin_initSclkPin(const IfxAsclin_Sclk_Out *sclk, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1550  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1551  /** \brief Initializes a SLSO output
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1552   * \param slso the SLSO Pin which should be configured
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1553   * \param outputMode the pin output mode which should be configured
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1554   * \param padDriver the pad driver mode which should be configured
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1555   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1556   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1557  IFX_INLINE void IfxAsclin_initSlsoPin(const IfxAsclin_Slso_Out *slso, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1558  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1559  /** \brief Initializes a TX output
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1560   * \param tx the TX Pin which should be configured
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1561   * \param outputMode the pin output mode which should be configured
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1562   * \param padDriver the pad driver mode which should be configured
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1563   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1564   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1565  IFX_INLINE void IfxAsclin_initTxPin(const IfxAsclin_Tx_Out *tx, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1566  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1567  /** \} */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1568  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1569  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1570  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1571  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1572  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1573  /**
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1574   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1575   * \return returns the value of RxDATA register
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1576   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1577  IFX_INLINE uint32 IfxAsclin_readRxData(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1578  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1579  /**
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1580   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1581   * \param data data to be written
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1582   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1583   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1584  IFX_INLINE void IfxAsclin_writeTxData(Ifx_ASCLIN *asclin, uint32 data);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1585  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1586  /** \brief Returns the status of all error flags
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1587   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1588   * \return status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1589   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1590  IFX_INLINE uint16 IfxAsclin_getAllErrorFlagsStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1591  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1592  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1593  /*---------------------Inline Function Implementations------------------------*/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1594  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1595  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1596  IFX_INLINE void IfxAsclin_clearAllFlags(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1597  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1598      asclin->FLAGSCLEAR.U = 0xFFFFFFFF;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1599  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1600  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1601  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1602  IFX_INLINE void IfxAsclin_clearBreakDetectedFlag(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1603  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1604      asclin->FLAGSCLEAR.B.BDC = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1605  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1606  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1607  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1608  IFX_INLINE void IfxAsclin_clearCollisionDetectionErrorFlag(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1609  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1610      asclin->FLAGSCLEAR.B.CEC = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1611  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1612  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1613  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1614  IFX_INLINE void IfxAsclin_clearFallingEdgeDetectedFlag(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1615  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1616      asclin->FLAGSCLEAR.B.FEDC = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1617  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1618  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1619  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1620  IFX_INLINE void IfxAsclin_clearFrameErrorFlag(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1621  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1622      asclin->FLAGSCLEAR.B.FEC = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1623  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1624  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1625  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1626  IFX_INLINE void IfxAsclin_clearHeaderTimeoutFlag(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1627  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1628      asclin->FLAGSCLEAR.B.HTC = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1629  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1630  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1631  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1632  IFX_INLINE void IfxAsclin_clearKernelResetStatus(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1633  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1634      asclin->KRSTCLR.B.CLR = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1635  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1636  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1637  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1638  IFX_INLINE void IfxAsclin_clearLinAutoBaudDetectionErrorFlag(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1639  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1640      asclin->FLAGSCLEAR.B.LAC = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1641  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1642  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1643  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1644  IFX_INLINE void IfxAsclin_clearLinChecksumErrorFlag(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1645  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1646      asclin->FLAGSCLEAR.B.LCC = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1647  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1648  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1649  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1650  IFX_INLINE void IfxAsclin_clearLinParityErrorFlag(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1651  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1652      asclin->FLAGSCLEAR.B.LPC = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1653  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1654  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1655  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1656  IFX_INLINE void IfxAsclin_clearParityErrorFlag(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1657  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1658      asclin->FLAGSCLEAR.B.PEC = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1659  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1660  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1661  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1662  IFX_INLINE void IfxAsclin_clearRaisingEdgeDetectedFlag(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1663  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1664      asclin->FLAGSCLEAR.B.REDC = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1665  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1666  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1667  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1668  IFX_INLINE void IfxAsclin_clearResponseTimeoutFlag(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1669  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1670      asclin->FLAGSCLEAR.B.RTC = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1671  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1672  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1673  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1674  IFX_INLINE void IfxAsclin_clearRxFifoFillLevelFlag(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1675  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1676      asclin->FLAGSCLEAR.B.RFLC = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1677  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1678  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1679  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1680  IFX_INLINE void IfxAsclin_clearRxFifoOverflowFlag(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1681  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1682      asclin->FLAGSCLEAR.B.RFOC = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1683  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1684  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1685  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1686  IFX_INLINE void IfxAsclin_clearRxFifoUnderflowFlag(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1687  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1688      asclin->FLAGSCLEAR.B.RFUC = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1689  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1690  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1691  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1692  IFX_INLINE void IfxAsclin_clearRxHeaderEndFlag(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1693  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1694      asclin->FLAGSCLEAR.B.RHC = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1695  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1696  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1697  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1698  IFX_INLINE void IfxAsclin_clearRxResponseEndFlag(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1699  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1700      asclin->FLAGSCLEAR.B.RRC = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1701  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1702  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1703  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1704  IFX_INLINE void IfxAsclin_clearTransmissionCompletedFlag(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1705  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1706      asclin->FLAGSCLEAR.B.TCC = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1707  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1708  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1709  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1710  IFX_INLINE void IfxAsclin_clearTxFifoFillLevelFlag(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1711  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1712      asclin->FLAGSCLEAR.B.TFLC = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1713  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1714  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1715  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1716  IFX_INLINE void IfxAsclin_clearTxFifoOverflowFlag(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1717  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1718      asclin->FLAGSCLEAR.B.TFOC = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1719  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1720  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1721  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1722  IFX_INLINE void IfxAsclin_clearTxHeaderEndFlag(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1723  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1724      asclin->FLAGSCLEAR.B.THC = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1725  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1726  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1727  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1728  IFX_INLINE void IfxAsclin_clearTxResponseEndFlag(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1729  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1730      asclin->FLAGSCLEAR.B.TRC = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1731  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1732  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1733  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1734  IFX_INLINE void IfxAsclin_disableAllFlags(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1735  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1736      asclin->FLAGSENABLE.U = 0x00000000;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1737  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1738  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1739  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1740  IFX_INLINE void IfxAsclin_enableAutoBaudrateDetection(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1741  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1742      asclin->LIN.CON.B.ABD = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1743  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1744  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1745  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1746  IFX_INLINE void IfxAsclin_enableBreakDetectedFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1747  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1748      asclin->FLAGSENABLE.B.BDE = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1749  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1750  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1751  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1752  IFX_INLINE void IfxAsclin_enableCollisionDetection(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1753  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1754      asclin->FRAMECON.B.CEN = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1755  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1756  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1757  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1758  IFX_INLINE void IfxAsclin_enableCollisionDetectionErrorFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1759  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1760      asclin->FLAGSENABLE.B.CEE = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1761  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1762  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1763  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1764  IFX_INLINE void IfxAsclin_enableCts(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1765  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1766      asclin->IOCR.B.CTSEN = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1767  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1768  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1769  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1770  IFX_INLINE void IfxAsclin_enableFallingEdgeDetectedFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1771  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1772      asclin->FLAGSENABLE.B.FEDE = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1773  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1774  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1775  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1776  IFX_INLINE void IfxAsclin_enableFrameErrorFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1777  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1778      asclin->FLAGSENABLE.B.FEE = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1779  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1780  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1781  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1782  IFX_INLINE void IfxAsclin_enableHardwareChecksum(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1783  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1784      asclin->LIN.CON.B.CSEN = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1785  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1786  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1787  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1788  IFX_INLINE void IfxAsclin_enableHeaderTimeoutFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1789  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1790      asclin->FLAGSENABLE.B.HTE = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1791  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1792  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1793  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1794  IFX_INLINE void IfxAsclin_enableLinAutoBaudDetectionErrorFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1795  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1796      asclin->FLAGSENABLE.B.ABE = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1797  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1798  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1799  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1800  IFX_INLINE void IfxAsclin_enableLinChecksumErrorFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1801  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1802      asclin->FLAGSENABLE.B.LCE = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1803  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1804  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1805  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1806  IFX_INLINE void IfxAsclin_enableLinParityErrorFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1807  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1808      asclin->FLAGSENABLE.B.LPE = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1809  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1810  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1811  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1812  IFX_INLINE void IfxAsclin_enableLoopBackMode(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1813  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1814      asclin->IOCR.B.LB = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1815  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1816  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1817  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1818  IFX_INLINE void IfxAsclin_enableParity(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1819  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1820      asclin->FRAMECON.B.PEN = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1821  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1822  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1823  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1824  IFX_INLINE void IfxAsclin_enableParityErrorFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1825  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1826      asclin->FLAGSENABLE.B.PEE = enable ? 1 : 0;
	ld.bu	d15,[a4]66
.L614:
	ne	d0,d4,#0
.L615:
	insert	d15,d15,d0,#0,#1
	st.b	[a4]66,d15
.L327:

; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1827  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1828  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1829  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1830  IFX_INLINE void IfxAsclin_enableRaisingEdgeDetectedFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1831  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1832      asclin->FLAGSENABLE.B.REDE = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1833  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1834  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1835  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1836  IFX_INLINE void IfxAsclin_enableResponseTimeoutFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1837  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1838      asclin->FLAGSENABLE.B.RTE = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1839  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1840  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1841  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1842  IFX_INLINE void IfxAsclin_enableRxFifoFillLevelFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1843  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1844      asclin->FLAGSENABLE.B.RFLE = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1845  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1846  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1847  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1848  IFX_INLINE void IfxAsclin_enableRxFifoInlet(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1849  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1850      asclin->RXFIFOCON.B.ENI = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1851  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1852  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1853  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1854  IFX_INLINE void IfxAsclin_enableRxFifoOverflowFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1855  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1856      asclin->FLAGSENABLE.B.RFOE = enable ? 1 : 0;
	ld.bu	d15,[a4]67
.L616:
	ne	d0,d5,#0
.L617:
	insert	d15,d15,d0,#2,#1
	st.b	[a4]67,d15
.L334:

; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	    65  void IfxAsclin_enableModule(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	    66  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	    67      uint16 psw = IfxScuWdt_getCpuWatchdogPassword();
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	    68      IfxScuWdt_clearCpuEndinit(psw);           /* clears the endinit protection*/
	ret
.L322:
	
__IfxAsclin_enableAscErrorFlags_function_end:
	.size	IfxAsclin_enableAscErrorFlags,__IfxAsclin_enableAscErrorFlags_function_end-IfxAsclin_enableAscErrorFlags
.L168:
	; End of function
	
	.sdecl	'.text.IfxAsclin.IfxAsclin_enableModule',code,cluster('IfxAsclin_enableModule')
	.sect	'.text.IfxAsclin.IfxAsclin_enableModule'
	.align	2
	
	.global	IfxAsclin_enableModule

; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	    69      IfxAsclin_setEnableModuleRequest(asclin); /* enables the module*/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	    70      IfxScuWdt_setCpuEndinit(psw);             /* sets the endinit protection back on*/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	    71  }
; Function IfxAsclin_enableModule
.L70:
IfxAsclin_enableModule:	.type	func
	mov.aa	a15,a4
.L452:

; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	    72  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	    73  
	call	IfxScuWdt_getCpuWatchdogPassword
.L451:
	mov	d15,d2
.L454:

; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	    74  Ifx_ASCLIN *IfxAsclin_getAddress(IfxAsclin_Index asclin)
	mov	d4,d15
	call	IfxScuWdt_clearCpuEndinit
.L453:

; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	    75  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	    76      Ifx_ASCLIN *module;
	mov	d4,d15

; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	     1  /**
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	     2   * \file IfxAsclin.h
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	     3   * \brief ASCLIN  basic functionality
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	     4   * \ingroup IfxLld_Asclin
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	     5   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	     6   * \version iLLD_1_0_1_11_0
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	     7   * \copyright Copyright (c) 2018 Infineon Technologies AG. All rights reserved.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	     8   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	     9   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    10   *                                 IMPORTANT NOTICE
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    11   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    12   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    13   * Use of this file is subject to the terms of use agreed between (i) you or 
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    14   * the company in which ordinary course of business you are acting and (ii) 
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    15   * Infineon Technologies AG or its licensees. If and as long as no such 
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    16   * terms of use are agreed, use of this file is subject to following:
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    17  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    18  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    19   * Boost Software License - Version 1.0 - August 17th, 2003
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    20  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    21   * Permission is hereby granted, free of charge, to any person or 
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    22   * organization obtaining a copy of the software and accompanying 
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    23   * documentation covered by this license (the "Software") to use, reproduce,
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    24   * display, distribute, execute, and transmit the Software, and to prepare
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    25   * derivative works of the Software, and to permit third-parties to whom the 
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    26   * Software is furnished to do so, all subject to the following:
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    27  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    28   * The copyright notices in the Software and this entire statement, including
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    29   * the above license grant, this restriction and the following disclaimer, must
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    30   * be included in all copies of the Software, in whole or in part, and all
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    31   * derivative works of the Software, unless such copies or derivative works are
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    32   * solely in the form of machine-executable object code generated by a source
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    33   * language processor.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    34  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    35   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR 
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    36   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    37   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    38   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE 
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    39   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    40   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    41   * DEALINGS IN THE SOFTWARE.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    42  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    43   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    44   * \defgroup IfxLld_Asclin_Std_Enumerations Enumerations
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    45   * \ingroup IfxLld_Asclin_Std
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    46   * \defgroup IfxLld_Asclin_Std_Operative Operative Functions
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    47   * \ingroup IfxLld_Asclin_Std
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    48   * \defgroup IfxLld_Asclin_Std_Utility Utility Functions
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    49   * \ingroup IfxLld_Asclin_Std
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    50   * \defgroup IfxLld_Asclin_Std_Configuration Configuration Functions
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    51   * \ingroup IfxLld_Asclin_Std
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    52   * \defgroup IfxLld_Asclin_Std_External External Functions
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    53   * \ingroup IfxLld_Asclin_Std
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    54   * \defgroup IfxLld_Asclin_Std_IO IO Pin Configuration Functions
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    55   * \ingroup IfxLld_Asclin_Std
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    56   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    57  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    58  #ifndef IFXASCLIN_H
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    59  #define IFXASCLIN_H 1
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    60  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    61  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    62  /*----------------------------------Includes----------------------------------*/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    63  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    64  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    65  #include "_Impl/IfxAsclin_cfg.h"
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    66  #include "Scu/Std/IfxScuCcu.h"
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    67  #include "Scu/Std/IfxScuWdt.h"
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    68  #include "Cpu/Std/IfxCpu_Intrinsics.h"
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    69  #include "IfxAsclin_reg.h"
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    70  #include "Src/Std/IfxSrc.h"
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    71  #include "_PinMap/IfxAsclin_PinMap.h"
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    72  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    73  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    74  /*--------------------------------Enumerations--------------------------------*/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    75  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    76  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    77  /** \addtogroup IfxLld_Asclin_Std_Enumerations
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    78   * \{ */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    79  /** \brief Defines if the classic or the enhanced checksum will be calculated by the checksum block.\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    80   * Definition in Ifx_ASCLIN.DATCON.B.CSM
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    81   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    82  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    83  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    84      IfxAsclin_Checksum_classic  = 0, /**< \brief classic checksum */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    85      IfxAsclin_Checksum_enhanced = 1  /**< \brief enhanced checksum */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    86  } IfxAsclin_Checksum;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    87  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    88  /** \brief Defines if the received checksum byte is written into the RXFifo or not.\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    89   * Definition in Ifx_ASCLIN.LIN.CON.B.CSI
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    90   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    91  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    92  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    93      IfxAsclin_ChecksumInjection_notWritten = 0,  /**< \brief checksum byte is not written */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    94      IfxAsclin_ChecksumInjection_written    = 1   /**< \brief checksum byte is written */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    95  } IfxAsclin_ChecksumInjection;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    96  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    97  /** \brief CPOL defines the idle level of the clock signal in the SPI mode.\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    98   * Idle level is the level outside the data transmission time intervals.\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    99   * Definition in Ifx_ASCLIN.IOCR.B.CPOL
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   100   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   101  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   102  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   103      IfxAsclin_ClockPolarity_idleLow  = 0, /**< \brief idle low */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   104      IfxAsclin_ClockPolarity_idleHigh = 1  /**< \brief idle high */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   105  } IfxAsclin_ClockPolarity;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   106  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   107  /** \brief Selection of clock source\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   108   * Definition in Ifx_ASCLIN.CSR.B.CLKSEL
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   109   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   110  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   111  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   112      IfxAsclin_ClockSource_noClock         = 0,  /**< \brief no clock will be supplied */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   113      IfxAsclin_ClockSource_kernelClock     = 1,  /**< \brief f clc will be supplied */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   114      IfxAsclin_ClockSource_oscillatorClock = 2,  /**< \brief XTAL oscillator clock foso0 will be supplied */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   115      IfxAsclin_ClockSource_flexRayClock    = 4,  /**< \brief f eray will be supplied */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   116      IfxAsclin_ClockSource_ascFastClock    = 8,  /**< \brief f asclinf wiil be supplied */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   117      IfxAsclin_ClockSource_ascSlowClock    = 16  /**< \brief f asclins will be supplied */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   118  } IfxAsclin_ClockSource;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   119  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   120  /** \brief CTS input pin selection\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   121   * Definition in Ifx_ASCLIN.IOCR.B.CTS
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   122   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   123  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   124  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   125      IfxAsclin_CtsInputSelect_0,     /**< \brief CTS input pin 0  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   126      IfxAsclin_CtsInputSelect_1,     /**< \brief CTS input pin 1  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   127      IfxAsclin_CtsInputSelect_2,     /**< \brief CTS input pin 2  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   128      IfxAsclin_CtsInputSelect_3      /**< \brief CTS input pin 3  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   129  } IfxAsclin_CtsInputSelect;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   130  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   131  /** \brief Number of bits per transfer\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   132   * Definition in Ifx_ASCLIN.FRAMECON.B.DATALEN
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   133   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   134  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   135  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   136      IfxAsclin_DataLength_1 = 0,      /**< \brief number of bits per transfer 0  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   137      IfxAsclin_DataLength_2,          /**< \brief number of bits per transfer 1  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   138      IfxAsclin_DataLength_3,          /**< \brief number of bits per transfer 2  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   139      IfxAsclin_DataLength_4,          /**< \brief number of bits per transfer 3  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   140      IfxAsclin_DataLength_5,          /**< \brief number of bits per transfer 4  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   141      IfxAsclin_DataLength_6,          /**< \brief number of bits per transfer 5  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   142      IfxAsclin_DataLength_7,          /**< \brief number of bits per transfer 6  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   143      IfxAsclin_DataLength_8,          /**< \brief number of bits per transfer 7  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   144      IfxAsclin_DataLength_9,          /**< \brief number of bits per transfer 8  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   145      IfxAsclin_DataLength_10,         /**< \brief number of bits per transfer 9  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   146      IfxAsclin_DataLength_11,         /**< \brief number of bits per transfer 10  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   147      IfxAsclin_DataLength_12,         /**< \brief number of bits per transfer 11  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   148      IfxAsclin_DataLength_13,         /**< \brief number of bits per transfer 12  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   149      IfxAsclin_DataLength_14,         /**< \brief number of bits per transfer 13  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   150      IfxAsclin_DataLength_15,         /**< \brief number of bits per transfer 14  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   151      IfxAsclin_DataLength_16          /**< \brief number of bits per transfer 15  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   152  } IfxAsclin_DataLength;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   153  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   154  /** \brief Defines the basic operating mode of the module. Changing the mode must be done by switching first to initialize mode, and then to the other mode.\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   155   * Definition in Ifx_ASCLIN.FRAMECON.B.MODE
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   156   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   157  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   158  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   159      IfxAsclin_FrameMode_initialise = 0,  /**< \brief initialise mode */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   160      IfxAsclin_FrameMode_asc        = 1,  /**< \brief asc mode */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   161      IfxAsclin_FrameMode_spi        = 2,  /**< \brief spi mode */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   162      IfxAsclin_FrameMode_lin        = 3   /**< \brief lin mode */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   163  } IfxAsclin_FrameMode;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   164  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   165  /** \brief Defines if LIN frame shall consist of a header and response or of a header only.\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   166   * Definition in Ifx_ASCLIN.DATCON.B.HO
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   167   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   168  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   169  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   170      IfxAsclin_HeaderResponseSelect_headerAndResponse = 0,  /**< \brief header and response expected */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   171      IfxAsclin_HeaderResponseSelect_headerOnly        = 1   /**< \brief header only expected */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   172  } IfxAsclin_HeaderResponseSelect;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   173  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   174  /** \brief Defines the duration of the IDLE delay in bit times.\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   175   * SPI mode: this is the idle time between the frames.\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   176   * ASC and LIN mode: this is the pause inserted between transmission of bytes.\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   177   * Definition in Ifx_ASCLIN.FRAMECON.B.IDLE
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   178   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   179  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   180  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   181      IfxAsclin_IdleDelay_0,     /**< \brief idle delay in 0 bit times  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   182      IfxAsclin_IdleDelay_1,     /**< \brief idle delay in 1 bit times  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   183      IfxAsclin_IdleDelay_2,     /**< \brief idle delay in 2 bit times  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   184      IfxAsclin_IdleDelay_3,     /**< \brief idle delay in 3 bit times  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   185      IfxAsclin_IdleDelay_4,     /**< \brief idle delay in 4 bit times  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   186      IfxAsclin_IdleDelay_5,     /**< \brief idle delay in 5 bit times  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   187      IfxAsclin_IdleDelay_6,     /**< \brief idle delay in 6 bit times  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   188      IfxAsclin_IdleDelay_7      /**< \brief idle delay in 7 bit times  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   189  } IfxAsclin_IdleDelay;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   190  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   191  /** \brief Defines the leading delay in bit times in SPI mode. ASC mode: not applicable.\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   192   * LIN mode: delay between the end of the break and the start of the sync character.\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   193   * Definition in Ifx_ASCLIN.FRAMECON.B.LEAD
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   194   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   195  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   196  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   197      IfxAsclin_LeadDelay_0,     /**< \brief lead delay in 0 bit times  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   198      IfxAsclin_LeadDelay_1,     /**< \brief lead delay in 1 bit times  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   199      IfxAsclin_LeadDelay_2,     /**< \brief lead delay in 2 bit times  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   200      IfxAsclin_LeadDelay_3,     /**< \brief lead delay in 3 bit times  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   201      IfxAsclin_LeadDelay_4,     /**< \brief lead delay in 4 bit times  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   202      IfxAsclin_LeadDelay_5,     /**< \brief lead delay in 5 bit times  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   203      IfxAsclin_LeadDelay_6,     /**< \brief lead delay in 6 bit times  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   204      IfxAsclin_LeadDelay_7      /**< \brief lead delay in 7 bit times  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   205  } IfxAsclin_LeadDelay;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   206  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   207  /** \brief Configures if the module in LIN mode operates as master or slave\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   208   * Definition in Ifx_ASCLIN.LIN.CON.B.MS
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   209   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   210  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   211  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   212      IfxAsclin_LinMode_slave  = 0, /**< \brief operates in slave mode */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   213      IfxAsclin_LinMode_master = 1  /**< \brief operates in master mode */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   214  } IfxAsclin_LinMode;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   215  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   216  /** \brief Defines the timeout threshold of RESPOSE bit is for LIN response timeout or LIN frame timeout.\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   217   * Definition in Ifx_ASCLIN.DATCON.B.RM
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   218   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   219  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   220  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   221      IfxAsclin_LinResponseTimeoutMode_frameTimeout    = 0, /**< \brief timeout threshold is for frame */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   222      IfxAsclin_LinResponseTimeoutMode_responseTimeout = 1  /**< \brief timeout threshold is for reponse */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   223  } IfxAsclin_LinResponseTimeoutMode;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   224  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   225  /** \brief Defines the bit length in ticks in the range of 1 to 16. The lengths of 1 to 3 are not allowed\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   226   * Definition in Ifx_ASCLIN.BITCON.B.OVERSAMPLING
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   227   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   228  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   229  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   230      IfxAsclin_OversamplingFactor_4  = 3,   /**< \brief oversampling factor 4 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   231      IfxAsclin_OversamplingFactor_5  = 4,   /**< \brief oversampling factor 5 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   232      IfxAsclin_OversamplingFactor_6  = 5,   /**< \brief oversampling factor 6 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   233      IfxAsclin_OversamplingFactor_7  = 6,   /**< \brief oversampling factor 7 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   234      IfxAsclin_OversamplingFactor_8  = 7,   /**< \brief oversampling factor 8 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   235      IfxAsclin_OversamplingFactor_9  = 8,   /**< \brief oversampling factor 9 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   236      IfxAsclin_OversamplingFactor_10 = 9,   /**< \brief oversampling factor 10 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   237      IfxAsclin_OversamplingFactor_11 = 10,  /**< \brief oversampling factor 11 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   238      IfxAsclin_OversamplingFactor_12 = 11,  /**< \brief oversampling factor 12 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   239      IfxAsclin_OversamplingFactor_13 = 12,  /**< \brief oversampling factor 13 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   240      IfxAsclin_OversamplingFactor_14 = 13,  /**< \brief oversampling factor 14 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   241      IfxAsclin_OversamplingFactor_15 = 14,  /**< \brief oversampling factor 15 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   242      IfxAsclin_OversamplingFactor_16 = 15   /**< \brief oversampling factor 16 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   243  } IfxAsclin_OversamplingFactor;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   244  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   245  /** \brief Type of parity bit attached to data bits\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   246   * Definition in Ifx_ASCLIN.FRAMECON.B.ODD
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   247   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   248  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   249  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   250      IfxAsclin_ParityType_even = 0,  /**< \brief even parity */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   251      IfxAsclin_ParityType_odd  = 1   /**< \brief odd parity */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   252  } IfxAsclin_ParityType;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   253  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   254  /** \brief Receive buffer mode\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   255   * Definition in Ifx_ASCLIN.RXFIFOCON.B.BUF
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   256   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   257  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   258  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   259      IfxAsclin_ReceiveBufferMode_rxFifo   = 0, /**< \brief RxFIFO mode */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   260      IfxAsclin_ReceiveBufferMode_rxBuffer = 1  /**< \brief single stage Rx buffer */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   261  } IfxAsclin_ReceiveBufferMode;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   262  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   263  /** \brief Polarity of the RTS and CTS signals\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   264   * Definition in Ifx_ASCLIN.IOCR.B.RCPOL
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   265   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   266  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   267  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   268      IfxAsclin_RtsCtsPolarity_activeHigh = 0,  /**< \brief ready/clear are active-high */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   269      IfxAsclin_RtsCtsPolarity_activeLow  = 1   /**< \brief ready/clear are active-low */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   270  } IfxAsclin_RtsCtsPolarity;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   271  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   272  /** \brief Defines the filling level that triggers a drain (RX) interrupt or DMA access\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   273   * Definition in Ifx_ASCLIN.RXFIFOCON.B.INTLEVEL
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   274   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   275  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   276  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   277      IfxAsclin_RxFifoInterruptLevel_1,     /**< \brief RX FIFO level 1  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   278      IfxAsclin_RxFifoInterruptLevel_2,     /**< \brief RX FIFO level 2  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   279      IfxAsclin_RxFifoInterruptLevel_3,     /**< \brief RX FIFO level 3  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   280      IfxAsclin_RxFifoInterruptLevel_4,     /**< \brief RX FIFO level 4  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   281      IfxAsclin_RxFifoInterruptLevel_5,     /**< \brief RX FIFO level 5  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   282      IfxAsclin_RxFifoInterruptLevel_6,     /**< \brief RX FIFO level 6  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   283      IfxAsclin_RxFifoInterruptLevel_7,     /**< \brief RX FIFO level 7  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   284      IfxAsclin_RxFifoInterruptLevel_8,     /**< \brief RX FIFO level 8  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   285      IfxAsclin_RxFifoInterruptLevel_9,     /**< \brief RX FIFO level 9  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   286      IfxAsclin_RxFifoInterruptLevel_10,    /**< \brief RX FIFO level 10  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   287      IfxAsclin_RxFifoInterruptLevel_11,    /**< \brief RX FIFO level 11  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   288      IfxAsclin_RxFifoInterruptLevel_12,    /**< \brief RX FIFO level 12  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   289      IfxAsclin_RxFifoInterruptLevel_13,    /**< \brief RX FIFO level 13  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   290      IfxAsclin_RxFifoInterruptLevel_14,    /**< \brief RX FIFO level 14  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   291      IfxAsclin_RxFifoInterruptLevel_15,    /**< \brief RX FIFO level 15  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   292      IfxAsclin_RxFifoInterruptLevel_16     /**< \brief RX FIFO level 16  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   293  } IfxAsclin_RxFifoInterruptLevel;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   294  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   295  /** \brief Defines the number of bytes read from the Rx FIFO with one FPI bus read\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   296   * Definition in Ifx_ASCLIN.RXFIFOCON.B.OUTW
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   297   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   298  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   299  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   300      IfxAsclin_RxFifoOutletWidth_0,     /**< \brief number of bytes 0  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   301      IfxAsclin_RxFifoOutletWidth_1,     /**< \brief number of bytes 1  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   302      IfxAsclin_RxFifoOutletWidth_2,     /**< \brief number of bytes 2  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   303      IfxAsclin_RxFifoOutletWidth_3      /**< \brief number of bytes 3  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   304  } IfxAsclin_RxFifoOutletWidth;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   305  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   306  /** \brief Alternate input selection for Rx signal.\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   307   * Definition in Ifx_ASCLIN.IOCR.B.ALTI
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   308   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   309  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   310  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   311      IfxAsclin_RxInputSelect_0,     /**< \brief alternate input selection 0  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   312      IfxAsclin_RxInputSelect_1,     /**< \brief alternate input selection 1  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   313      IfxAsclin_RxInputSelect_2,     /**< \brief alternate input selection 2  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   314      IfxAsclin_RxInputSelect_3,     /**< \brief alternate input selection 3  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   315      IfxAsclin_RxInputSelect_4,     /**< \brief alternate input selection 4  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   316      IfxAsclin_RxInputSelect_5,     /**< \brief alternate input selection 5  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   317      IfxAsclin_RxInputSelect_6,     /**< \brief alternate input selection 6  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   318      IfxAsclin_RxInputSelect_7      /**< \brief alternate input selection 7  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   319  } IfxAsclin_RxInputSelect;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   320  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   321  /** \brief Sample point position\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   322   * Definition in Ifx_ASCLIN.BITCON.B.SAMPLEPOINT
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   323   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   324  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   325  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   326      IfxAsclin_SamplePointPosition_1  = 1,   /**< \brief sample point position at 1 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   327      IfxAsclin_SamplePointPosition_2  = 2,   /**< \brief sample point position at 2 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   328      IfxAsclin_SamplePointPosition_3  = 3,   /**< \brief sample point position at 3 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   329      IfxAsclin_SamplePointPosition_4  = 4,   /**< \brief sample point position at 4 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   330      IfxAsclin_SamplePointPosition_5  = 5,   /**< \brief sample point position at 5 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   331      IfxAsclin_SamplePointPosition_6  = 6,   /**< \brief sample point position at 6 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   332      IfxAsclin_SamplePointPosition_7  = 7,   /**< \brief sample point position at 7 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   333      IfxAsclin_SamplePointPosition_8  = 8,   /**< \brief sample point position at 8 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   334      IfxAsclin_SamplePointPosition_9  = 9,   /**< \brief sample point position at 9 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   335      IfxAsclin_SamplePointPosition_10 = 10,  /**< \brief sample point position at 10 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   336      IfxAsclin_SamplePointPosition_11 = 11,  /**< \brief sample point position at 11 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   337      IfxAsclin_SamplePointPosition_12 = 12,  /**< \brief sample point position at 12 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   338      IfxAsclin_SamplePointPosition_13 = 13,  /**< \brief sample point position at 13 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   339      IfxAsclin_SamplePointPosition_14 = 14,  /**< \brief sample point position at 14 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   340      IfxAsclin_SamplePointPosition_15 = 15   /**< \brief sample point position at 15 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   341  } IfxAsclin_SamplePointPosition;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   342  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   343  /** \brief Number of samples per bit, sample mode/medianfilter\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   344   * Definition in Ifx_ASCLIN.BITCON.B.SM
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   345   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   346  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   347  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   348      IfxAsclin_SamplesPerBit_one   = 0, /**< \brief one sample per bit */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   349      IfxAsclin_SamplesPerBit_three = 1  /**< \brief three samples per bit */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   350  } IfxAsclin_SamplesPerBit;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   351  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   352  /** \brief SPI mode: defines the shift direction of the shift register.\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   353   * ASC and LIN mode: should be set to 0.\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   354   * Definition in Ifx_ASCLIN.FRAMECON.B.MSB
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   355   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   356  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   357  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   358      IfxAsclin_ShiftDirection_lsbFirst = 0,  /**< \brief LSB first */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   359      IfxAsclin_ShiftDirection_msbFirst = 1   /**< \brief MSB first */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   360  } IfxAsclin_ShiftDirection;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   361  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   362  /** \brief Defines the idle level of the SLSO signal, which is the level.\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   363   * Outside the data transmission, leading and trailing time intervals.\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   364   * Definition in Ifx_ASCLIN.IOCR.B.SPOL
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   365   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   366  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   367  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   368      IfxAsclin_SlavePolarity_idleLow  = 0, /**< \brief idle low */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   369      IfxAsclin_SlavePolarity_idlehigh = 1  /**< \brief idle high */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   370  } IfxAsclin_SlavePolarity;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   371  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   372  /** \brief Enable/disable the sensitivity of the module to sleep signal\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   373   * Definition in Ifx_ASCLIN.CLC.B.EDIS
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   374   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   375  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   376  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   377      IfxAsclin_SleepMode_enable  = 0, /**< \brief enables sleep mode */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   378      IfxAsclin_SleepMode_disable = 1  /**< \brief disables sleep mode */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   379  } IfxAsclin_SleepMode;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   380  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   381  /** \brief Error status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   382   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   383  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   384  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   385      IfxAsclin_Status_configurationError = 0,  /**< \brief Configuration error */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   386      IfxAsclin_Status_noError            = 1   /**< \brief No error */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   387  } IfxAsclin_Status;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   388  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   389  /** \brief ASC and LIN mode: number of stop bits (0 is not allowed), SPI mode: trailing delay.\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   390   * Definition in Ifx_ASCLIN.FRAMECON.B.STOP
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   391   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   392  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   393  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   394      IfxAsclin_StopBit_0,     /**< \brief number of stop bits 0  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   395      IfxAsclin_StopBit_1,     /**< \brief number of stop bits 1  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   396      IfxAsclin_StopBit_2,     /**< \brief number of stop bits 2  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   397      IfxAsclin_StopBit_3,     /**< \brief number of stop bits 3  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   398      IfxAsclin_StopBit_4,     /**< \brief number of stop bits 4  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   399      IfxAsclin_StopBit_5,     /**< \brief number of stop bits 5  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   400      IfxAsclin_StopBit_6,     /**< \brief number of stop bits 6  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   401      IfxAsclin_StopBit_7      /**< \brief number of stop bits 7  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   402  } IfxAsclin_StopBit;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   403  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   404  /** \brief OCDS Suspend Control (OCDS.SUS)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   405   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   406  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   407  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   408      IfxAsclin_SuspendMode_none = 0,  /**< \brief No suspend */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   409      IfxAsclin_SuspendMode_hard = 1,  /**< \brief Hard Suspend */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   410      IfxAsclin_SuspendMode_soft = 2   /**< \brief Soft Suspend */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   411  } IfxAsclin_SuspendMode;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   412  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   413  /** \brief Defines the number of bytes written to the Tx FIFO with one FPI bus write\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   414   * Definition in Ifx_ASCLIN.TXFIFOCON.B.INW
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   415   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   416  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   417  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   418      IfxAsclin_TxFifoInletWidth_0,     /**< \brief number of bytes 0  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   419      IfxAsclin_TxFifoInletWidth_1,     /**< \brief number of bytes 1  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   420      IfxAsclin_TxFifoInletWidth_2,     /**< \brief number of bytes 2  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   421      IfxAsclin_TxFifoInletWidth_3      /**< \brief number of bytes 3  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   422  } IfxAsclin_TxFifoInletWidth;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   423  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   424  /** \brief Defines the filling level that triggers a refill (TX) interrupt or DMA access\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   425   * Definition in Ifx_ASCLIN.TXFIFOCON.B.INTLEVEL
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   426   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   427  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   428  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   429      IfxAsclin_TxFifoInterruptLevel_0,     /**< \brief TX FIFO level 0  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   430      IfxAsclin_TxFifoInterruptLevel_1,     /**< \brief TX FIFO level 1  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   431      IfxAsclin_TxFifoInterruptLevel_2,     /**< \brief TX FIFO level 2  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   432      IfxAsclin_TxFifoInterruptLevel_3,     /**< \brief TX FIFO level 3  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   433      IfxAsclin_TxFifoInterruptLevel_4,     /**< \brief TX FIFO level 4  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   434      IfxAsclin_TxFifoInterruptLevel_5,     /**< \brief TX FIFO level 5  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   435      IfxAsclin_TxFifoInterruptLevel_6,     /**< \brief TX FIFO level 6  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   436      IfxAsclin_TxFifoInterruptLevel_7,     /**< \brief TX FIFO level 7  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   437      IfxAsclin_TxFifoInterruptLevel_8,     /**< \brief TX FIFO level 8  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   438      IfxAsclin_TxFifoInterruptLevel_9,     /**< \brief TX FIFO level 9  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   439      IfxAsclin_TxFifoInterruptLevel_10,    /**< \brief TX FIFO level 10  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   440      IfxAsclin_TxFifoInterruptLevel_11,    /**< \brief TX FIFO level 11  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   441      IfxAsclin_TxFifoInterruptLevel_12,    /**< \brief TX FIFO level 12  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   442      IfxAsclin_TxFifoInterruptLevel_13,    /**< \brief TX FIFO level 13  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   443      IfxAsclin_TxFifoInterruptLevel_14,    /**< \brief TX FIFO level 14  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   444      IfxAsclin_TxFifoInterruptLevel_15     /**< \brief TX FIFO level 15  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   445  } IfxAsclin_TxFifoInterruptLevel;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   446  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   447  /** \} */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   448  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   449  /** \addtogroup IfxLld_Asclin_Std_Operative
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   450   * \{ */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   451  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   452  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   453  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   454  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   455  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   456  /** \brief clears all the flags
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   457   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   458   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   459   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   460  IFX_INLINE void IfxAsclin_clearAllFlags(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   461  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   462  /** \brief Clears the break detected flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   463   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   464   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   465   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   466  IFX_INLINE void IfxAsclin_clearBreakDetectedFlag(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   467  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   468  /** \brief Clears the collision detection error flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   469   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   470   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   471   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   472  IFX_INLINE void IfxAsclin_clearCollisionDetectionErrorFlag(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   473  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   474  /** \brief Clears the falling edge detected flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   475   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   476   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   477   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   478  IFX_INLINE void IfxAsclin_clearFallingEdgeDetectedFlag(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   479  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   480  /** \brief Clears the frame error flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   481   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   482   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   483   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   484  IFX_INLINE void IfxAsclin_clearFrameErrorFlag(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   485  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   486  /** \brief Clears the header timeout flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   487   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   488   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   489   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   490  IFX_INLINE void IfxAsclin_clearHeaderTimeoutFlag(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   491  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   492  /** \brief Clears the kernel reset status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   493   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   494   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   495   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   496  IFX_INLINE void IfxAsclin_clearKernelResetStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   497  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   498  /** \brief Clears the auto baudrate detection error flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   499   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   500   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   501   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   502  IFX_INLINE void IfxAsclin_clearLinAutoBaudDetectionErrorFlag(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   503  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   504  /** \brief Clears the LIN checksum error flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   505   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   506   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   507   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   508  IFX_INLINE void IfxAsclin_clearLinChecksumErrorFlag(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   509  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   510  /** \brief Clears the LIN parity error flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   511   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   512   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   513   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   514  IFX_INLINE void IfxAsclin_clearLinParityErrorFlag(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   515  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   516  /** \brief Clears the parity error flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   517   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   518   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   519   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   520  IFX_INLINE void IfxAsclin_clearParityErrorFlag(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   521  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   522  /** \brief Clears the raising edge detected flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   523   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   524   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   525   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   526  IFX_INLINE void IfxAsclin_clearRaisingEdgeDetectedFlag(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   527  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   528  /** \brief Clears the response timeout flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   529   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   530   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   531   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   532  IFX_INLINE void IfxAsclin_clearResponseTimeoutFlag(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   533  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   534  /** \brief Clears the Rx FIFO level flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   535   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   536   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   537   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   538  IFX_INLINE void IfxAsclin_clearRxFifoFillLevelFlag(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   539  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   540  /** \brief Clears the Rx FIFO overflow flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   541   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   542   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   543   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   544  IFX_INLINE void IfxAsclin_clearRxFifoOverflowFlag(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   545  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   546  /** \brief Clears the Rx FIFO underflow flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   547   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   548   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   549   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   550  IFX_INLINE void IfxAsclin_clearRxFifoUnderflowFlag(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   551  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   552  /** \brief Clears the receive header end flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   553   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   554   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   555   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   556  IFX_INLINE void IfxAsclin_clearRxHeaderEndFlag(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   557  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   558  /** \brief Clears the receive response end flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   559   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   560   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   561   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   562  IFX_INLINE void IfxAsclin_clearRxResponseEndFlag(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   563  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   564  /** \brief Clears the transmission pending flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   565   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   566   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   567   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   568  IFX_INLINE void IfxAsclin_clearTransmissionCompletedFlag(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   569  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   570  /** \brief Clears the Tx FIFO level flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   571   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   572   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   573   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   574  IFX_INLINE void IfxAsclin_clearTxFifoFillLevelFlag(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   575  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   576  /** \brief Clears the Tx FIFO overflow flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   577   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   578   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   579   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   580  IFX_INLINE void IfxAsclin_clearTxFifoOverflowFlag(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   581  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   582  /** \brief Clears the transmit header end flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   583   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   584   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   585   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   586  IFX_INLINE void IfxAsclin_clearTxHeaderEndFlag(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   587  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   588  /** \brief Clears the transmit response end flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   589   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   590   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   591   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   592  IFX_INLINE void IfxAsclin_clearTxResponseEndFlag(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   593  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   594  /** \brief Flushes (empties) the Rx FIFO
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   595   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   596   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   597   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   598  IFX_INLINE void IfxAsclin_flushRxFifo(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   599  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   600  /** \brief Flushes (empties) the Tx FIFO
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   601   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   602   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   603   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   604  IFX_INLINE void IfxAsclin_flushTxFifo(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   605  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   606  /** \brief Sets the baudrate detection's lower limit
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   607   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   608   * \param limit value of the lower limit
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   609   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   610   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   611  IFX_INLINE void IfxAsclin_setBrdLowerlimt(Ifx_ASCLIN *asclin, uint8 limit);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   612  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   613  /** \brief Sets the baudrate detection's upper limit
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   614   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   615   * \param limit value of the upper limit
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   616   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   617   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   618  IFX_INLINE void IfxAsclin_setBrdUpperlimt(Ifx_ASCLIN *asclin, uint8 limit);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   619  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   620  /** \brief Sets the checksum injection
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   621   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   622   * \param csi checksum injection selection (not written / written)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   623   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   624   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   625  IFX_INLINE void IfxAsclin_setChecksumInjection(Ifx_ASCLIN *asclin, IfxAsclin_ChecksumInjection csi);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   626  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   627  /** \brief Sets the checksum mode
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   628   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   629   * \param mode checksum mode selection (classic / enhanced)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   630   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   631   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   632  IFX_INLINE void IfxAsclin_setChecksumMode(Ifx_ASCLIN *asclin, IfxAsclin_Checksum mode);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   633  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   634  /** \brief Sets the data length (number of bits per transfer)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   635   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   636   * \param length data length selection
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   637   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   638   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   639  IFX_INLINE void IfxAsclin_setDataLength(Ifx_ASCLIN *asclin, IfxAsclin_DataLength length);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   640  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   641  /** \brief Sets the denominator of the fractional divider
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   642   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   643   * \param denominator value of the denominator
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   644   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   645   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   646  IFX_INLINE void IfxAsclin_setDenominator(Ifx_ASCLIN *asclin, uint16 denominator);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   647  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   648  /** \brief Sets the disable module request
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   649   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   650   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   651   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   652  IFX_INLINE void IfxAsclin_setDisableModuleRequest(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   653  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   654  /** \brief Sets the enable module request
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   655   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   656   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   657   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   658  IFX_INLINE void IfxAsclin_setEnableModuleRequest(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   659  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   660  /** \brief Sets digital glitch filter depth
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   661   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   662   * \param depth digital glitch filter depth selection (1 to 63)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   663   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   664   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   665  IFX_INLINE void IfxAsclin_setFilterDepth(Ifx_ASCLIN *asclin, uint8 depth);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   666  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   667  /** \brief Sets the header response selection
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   668   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   669   * \param type type of selection (header and response or header only)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   670   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   671   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   672  IFX_INLINE void IfxAsclin_setHeaderResponseSelect(Ifx_ASCLIN *asclin, IfxAsclin_HeaderResponseSelect type);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   673  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   674  /** \brief Sets the idle delay
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   675   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   676   * \param delay idle delay selection
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   677   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   678   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   679  IFX_INLINE void IfxAsclin_setIdleDelay(Ifx_ASCLIN *asclin, IfxAsclin_IdleDelay delay);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   680  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   681  /** \brief Sets the kernal reset of the KRST1
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   682   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   683   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   684   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   685  IFX_INLINE void IfxAsclin_setKernelResetOne(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   686  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   687  /** \brief Sets the kernel reset of the KRST0
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   688   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   689   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   690   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   691  IFX_INLINE void IfxAsclin_setKernelResetZero(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   692  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   693  /** \brief Sets the lead delay
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   694   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   695   * \param delay lead delay selection
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   696   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   697   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   698  IFX_INLINE void IfxAsclin_setLeadDelay(Ifx_ASCLIN *asclin, IfxAsclin_LeadDelay delay);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   699  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   700  /** \brief Sets the LIN break length
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   701   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   702   * \param length value of the break length
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   703   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   704   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   705  IFX_INLINE void IfxAsclin_setLinBreakLength(Ifx_ASCLIN *asclin, uint8 length);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   706  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   707  /** \brief Sets the LIN header timeout
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   708   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   709   * \param timeout value of the header timeout
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   710   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   711   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   712  IFX_INLINE void IfxAsclin_setLinHeaderTimeout(Ifx_ASCLIN *asclin, uint8 timeout);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   713  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   714  /** \brief Sets the LIN mode of operation
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   715   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   716   * \param mode mode selection (slave / master)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   717   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   718   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   719  IFX_INLINE void IfxAsclin_setLinMode(Ifx_ASCLIN *asclin, IfxAsclin_LinMode mode);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   720  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   721  /** \brief Sets the LIN response timeout mode
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   722   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   723   * \param mode LIN response timeout mode selection
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   724   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   725   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   726  IFX_INLINE void IfxAsclin_setLinResponseTimeoutMode(Ifx_ASCLIN *asclin, IfxAsclin_LinResponseTimeoutMode mode);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   727  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   728  /** \brief Sets the LIN response timeout threshold
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   729   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   730   * \param threshold value of the tomeout threshold (1 to 256 bit times)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   731   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   732   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   733  IFX_INLINE void IfxAsclin_setLinResponseTimeoutThreshold(Ifx_ASCLIN *asclin, uint16 threshold);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   734  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   735  /** \brief Sets the numerator of the fractional divider
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   736   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   737   * \param numerator value of the numerator
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   738   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   739   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   740  IFX_INLINE void IfxAsclin_setNumerator(Ifx_ASCLIN *asclin, uint16 numerator);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   741  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   742  /** \brief Sets the division ratio of the baudrate post divider
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   743   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   744   * \param ovsFactor value of oversampling factor
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   745   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   746   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   747  IFX_INLINE void IfxAsclin_setOversampling(Ifx_ASCLIN *asclin, IfxAsclin_OversamplingFactor ovsFactor);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   748  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   749  /** \brief Sets the parity type
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   750   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   751   * \param type parity type selction (even / odd)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   752   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   753   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   754  IFX_INLINE void IfxAsclin_setParityType(Ifx_ASCLIN *asclin, IfxAsclin_ParityType type);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   755  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   756  /** \brief Sets the division ratio of the predivider (prescaler)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   757   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   758   * \param prescaler value of prescaler
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   759   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   760   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   761  IFX_INLINE void IfxAsclin_setPrescaler(Ifx_ASCLIN *asclin, uint16 prescaler);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   762  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   763  /** \brief Sets the receive buffer mode
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   764   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   765   * \param mode receive buffer mode selection (Rx FIFO or single stage Rx buffer)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   766   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   767   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   768  IFX_INLINE void IfxAsclin_setRxBufferMode(Ifx_ASCLIN *asclin, IfxAsclin_ReceiveBufferMode mode);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   769  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   770  /** \brief Sets the Tx FIFO interrupt level
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   771   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   772   * \param level interrupt level selection
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   773   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   774   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   775  IFX_INLINE void IfxAsclin_setRxFifoInterruptLevel(Ifx_ASCLIN *asclin, IfxAsclin_RxFifoInterruptLevel level);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   776  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   777  /** \brief Sets the receive FIFO outlet width
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   778   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   779   * \param width number of bytes read to the Rx FIFO with one FPI bus read
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   780   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   781   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   782  IFX_INLINE void IfxAsclin_setRxFifoOutletWidth(Ifx_ASCLIN *asclin, IfxAsclin_RxFifoOutletWidth width);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   783  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   784  /** \brief Sets the sample mode (number of samples per bit / median filter)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   785   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   786   * \param medianFilter value of the median filter
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   787   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   788   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   789  IFX_INLINE void IfxAsclin_setSampleMode(Ifx_ASCLIN *asclin, IfxAsclin_SamplesPerBit medianFilter);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   790  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   791  /** \brief Sets the sampling point position
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   792   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   793   * \param spPosition sample point position selection
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   794   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   795   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   796  IFX_INLINE void IfxAsclin_setSamplePointPosition(Ifx_ASCLIN *asclin, IfxAsclin_SamplePointPosition spPosition);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   797  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   798  /** \brief Sets the shift direction
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   799   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   800   * \param dir shift direction selection (LSB / MSB first)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   801   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   802   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   803  IFX_INLINE void IfxAsclin_setShiftDirection(Ifx_ASCLIN *asclin, IfxAsclin_ShiftDirection dir);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   804  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   805  /** \brief Sets the number of stop bits
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   806   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   807   * \param stopBit number of stop bits selection
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   808   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   809   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   810  IFX_INLINE void IfxAsclin_setStopBit(Ifx_ASCLIN *asclin, IfxAsclin_StopBit stopBit);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   811  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   812  /** \brief Sets the transmit header request flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   813   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   814   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   815   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   816  IFX_INLINE void IfxAsclin_setTransmitHeaderRequestFlag(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   817  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   818  /** \brief Sets the transmit response request flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   819   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   820   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   821   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   822  IFX_INLINE void IfxAsclin_setTransmitResponseRequestFlag(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   823  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   824  /** \brief Sets the transmission wake request flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   825   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   826   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   827   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   828  IFX_INLINE void IfxAsclin_setTransmitWakeRequestFlag(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   829  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   830  /** \brief Sets the transmit FIFO inlet width
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   831   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   832   * \param width number of bytes written to the Tx FIFO with one FPI bus write
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   833   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   834   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   835  IFX_INLINE void IfxAsclin_setTxFifoInletWidth(Ifx_ASCLIN *asclin, IfxAsclin_TxFifoInletWidth width);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   836  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   837  /** \brief Sets the Tx FIFO interrupt level
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   838   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   839   * \param level interrupt level selection
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   840   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   841   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   842  IFX_INLINE void IfxAsclin_setTxFifoInterruptLevel(Ifx_ASCLIN *asclin, IfxAsclin_TxFifoInterruptLevel level);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   843  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   844  /** \} */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   845  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   846  /** \addtogroup IfxLld_Asclin_Std_Utility
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   847   * \{ */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   848  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   849  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   850  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   851  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   852  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   853  /** \brief Returns the break detected flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   854   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   855   * \return break detected flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   856   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   857  IFX_INLINE boolean IfxAsclin_getBreakDetectedFlagStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   858  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   859  /** \brief Returns the clock source
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   860   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   861   * \return clock source
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   862   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   863  IFX_INLINE uint8 IfxAsclin_getClockSource(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   864  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   865  /** \brief Returns the clock status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   866   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   867   * \return clock status (off / on)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   868   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   869  IFX_INLINE boolean IfxAsclin_getClockStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   870  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   871  /** \brief Returns the collision detection error flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   872   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   873   * \return collision detection error flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   874   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   875  IFX_INLINE boolean IfxAsclin_getCollisionDetectionErrorFlagStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   876  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   877  /** \brief Returns  the falling edge detected flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   878   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   879   * \return falling edge detected flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   880   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   881  IFX_INLINE boolean IfxAsclin_getFallingEdgeDetectedFlagStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   882  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   883  /** \brief Returns the frame error flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   884   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   885   * \return frame error flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   886   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   887  IFX_INLINE boolean IfxAsclin_getFrameErrorFlagStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   888  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   889  /** \brief Returns the header timeout flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   890   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   891   * \return header timeout flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   892   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   893  IFX_INLINE boolean IfxAsclin_getHeaderTimeoutFlagStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   894  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   895  /** \brief Returns the kernel reset status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   896   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   897   * \return kernel reset status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   898   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   899  IFX_INLINE boolean IfxAsclin_getKernelResetStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   900  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   901  /** \brief Returns the LIN auto baudrate detection error flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   902   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   903   * \return LIN auto baudrate detection error flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   904   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   905  IFX_INLINE boolean IfxAsclin_getLinAutoBaudDetectionErrorFlagStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   906  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   907  /** \brief Returns the LIN checksum error flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   908   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   909   * \return LIN checksum error flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   910   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   911  IFX_INLINE boolean IfxAsclin_getLinChecksumErrorFlagStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   912  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   913  /** \brief Returns the LIN parity error flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   914   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   915   * \return LIN parity error flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   916   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   917  IFX_INLINE boolean IfxAsclin_getLinParityErrorFlagStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   918  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   919  /** \brief Returns the module status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   920   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   921   * \return module status (enabled / disabled)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   922   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   923  IFX_INLINE boolean IfxAsclin_getModuleStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   924  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   925  /** \brief Returns the parity error flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   926   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   927   * \return parity error flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   928   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   929  IFX_INLINE boolean IfxAsclin_getParityErrorFlagStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   930  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   931  /** \brief Returns the division ratio of the predivider (prescaler)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   932   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   933   * \return value of prescaler
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   934   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   935  IFX_INLINE uint16 IfxAsclin_getPrescaler(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   936  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   937  /** \brief Returns the raising edge detected flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   938   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   939   * \return raising edge detected flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   940   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   941  IFX_INLINE boolean IfxAsclin_getRaisingEdgeDetectedFlagStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   942  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   943  /** \brief Returns the received signal status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   944   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   945   * \return received signal status (0 is low & 1 is high)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   946   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   947  IFX_INLINE boolean IfxAsclin_getReceiveSignalStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   948  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   949  /** \brief Returns the response timeout flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   950   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   951   * \return response timeout flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   952   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   953  IFX_INLINE boolean IfxAsclin_getResponseTimeoutFlagStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   954  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   955  /** \brief Returns the current filling level of Tx FIFO
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   956   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   957   * \return current filling level of Rx FIFO
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   958   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   959  IFX_INLINE uint8 IfxAsclin_getRxFifoFillLevel(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   960  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   961  /** \brief Returns the Rx FIFO level flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   962   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   963   * \return Rx FIFO level flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   964   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   965  IFX_INLINE boolean IfxAsclin_getRxFifoFillLevelFlagStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   966  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   967  /** \brief Returns the receive FIFO inlet width
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   968   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   969   * \return number of bytes read to the Rx FIFO with one FPI bus read
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   970   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   971  IFX_INLINE uint8 IfxAsclin_getRxFifoOutletWidth(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   972  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   973  /** \brief Returns the Rx FIFO overflow flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   974   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   975   * \return Rx FIFO overflow flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   976   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   977  IFX_INLINE boolean IfxAsclin_getRxFifoOverflowFlagStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   978  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   979  /** \brief Returns the Rx FIFO underflow flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   980   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   981   * \return Rx FIFO underflow flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   982   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   983  IFX_INLINE boolean IfxAsclin_getRxFifoUnderflowFlagStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   984  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   985  /** \brief Returns the receive header end flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   986   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   987   * \return receive header end flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   988   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   989  IFX_INLINE boolean IfxAsclin_getRxHeaderEndFlagStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   990  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   991  /** \brief Returns the receive response end flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   992   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   993   * \return receive response end flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   994   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   995  IFX_INLINE boolean IfxAsclin_getRxResponseEndFlagStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   996  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   997  /** \brief Returns the transmission pending flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   998   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   999   * \return transmission pending flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1000   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1001  IFX_INLINE boolean IfxAsclin_getTransmissionCompletedFlagStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1002  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1003  /** \brief Returns the transmit signal status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1004   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1005   * \return transmit signal status (0 is low & 1 is high)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1006   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1007  IFX_INLINE boolean IfxAsclin_getTransmitSignalStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1008  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1009  /** \brief Returns the current filling level of Tx FIFO
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1010   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1011   * \return current filling level of Tx FIFO
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1012   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1013  IFX_INLINE uint8 IfxAsclin_getTxFifoFillLevel(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1014  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1015  /** \brief Returns the Tx FIFO level flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1016   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1017   * \return Tx FIFO level flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1018   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1019  IFX_INLINE boolean IfxAsclin_getTxFifoFillLevelFlagStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1020  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1021  /** \brief Returns the transmit FIFO inlet width
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1022   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1023   * \return number of bytes written to the Tx FIFO with one FPI bus write
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1024   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1025  IFX_INLINE uint8 IfxAsclin_getTxFifoInletWidth(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1026  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1027  /** \brief Returns the Tx FIFO overflow flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1028   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1029   * \return Tx FIFO overflow flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1030   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1031  IFX_INLINE boolean IfxAsclin_getTxFifoOverflowFlagStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1032  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1033  /** \brief Returns the transmit header end flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1034   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1035   * \return transmit header end flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1036   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1037  IFX_INLINE boolean IfxAsclin_getTxHeaderEndFlagStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1038  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1039  /** \brief Returns the transmit response end flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1040   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1041   * \return transmit response end flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1042   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1043  IFX_INLINE boolean IfxAsclin_getTxResponseEndFlagStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1044  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1045  /** \brief Sets the sensitivity of the module to sleep signal
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1046   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1047   * \param mode mode selection (enable / disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1048   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1049   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1050  IFX_INLINE void IfxAsclin_setSleepMode(Ifx_ASCLIN *asclin, IfxAsclin_SleepMode mode);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1051  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1052  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1053  /*-------------------------Global Function Prototypes-------------------------*/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1054  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1055  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1056  /** \brief API to get the address for ASCLIN HW module register memory map
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1057   * \param asclin Resource index of the ASCLIN
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1058   * \return ASCLIN module register address
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1059   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1060  IFX_EXTERN Ifx_ASCLIN *IfxAsclin_getAddress(IfxAsclin_Index asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1061  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1062  /** \brief Returns the ASCLIN module FA frequency in Hz
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1063   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1064   * \return Returns the ASCLIN module FA frequency in Hz
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1065   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1066  IFX_EXTERN float32 IfxAsclin_getFaFrequency(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1067  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1068  /** \brief API to get the resource index of the ASCLIN specified.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1069   * \return asclin resource index
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1070   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1071  IFX_EXTERN IfxAsclin_Index IfxAsclin_getIndex(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1072  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1073  /** \brief Returns the OVS frequency
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1074   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1075   * \return Returns the ASCLIN module OVS frequency in Hz
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1076   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1077  IFX_EXTERN float32 IfxAsclin_getOvsFrequency(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1078  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1079  /** \brief Returns the PD frequency
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1080   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1081   * \return Returns the ASCLIN module PD frequency in Hz
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1082   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1083  IFX_EXTERN float32 IfxAsclin_getPdFrequency(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1084  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1085  /** \brief Returns the SHIFT frequency
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1086   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1087   * \return Returns the ASCLIN module SHIFT frequency in Hz
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1088   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1089  IFX_EXTERN float32 IfxAsclin_getShiftFrequency(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1090  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1091  /** \brief resets Asclin kernel
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1092   * \param asclin pointer to ASCLIN resgisters
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1093   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1094   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1095  IFX_EXTERN void IfxAsclin_resetModule(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1096  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1097  /** \} */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1098  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1099  /** \addtogroup IfxLld_Asclin_Std_Configuration
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1100   * \{ */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1101  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1102  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1103  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1104  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1105  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1106  /** \brief disables all flags
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1107   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1108   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1109   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1110  IFX_INLINE void IfxAsclin_disableAllFlags(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1111  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1112  /** \brief Enables/disables the auto baudrate detection
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1113   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1114   * \param enable choice (enable / disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1115   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1116   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1117  IFX_INLINE void IfxAsclin_enableAutoBaudrateDetection(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1118  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1119  /** \brief Enables/disables break detected flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1120   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1121   * \param enable choice (enable / disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1122   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1123   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1124  IFX_INLINE void IfxAsclin_enableBreakDetectedFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1125  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1126  /** \brief Enables/disables the collision detection
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1127   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1128   * \param enable choice (enable/disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1129   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1130   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1131  IFX_INLINE void IfxAsclin_enableCollisionDetection(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1132  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1133  /** \brief Enables/disables LIN collision detection error flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1134   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1135   * \param enable choice (enable / disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1136   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1137   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1138  IFX_INLINE void IfxAsclin_enableCollisionDetectionErrorFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1139  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1140  /** \brief Enables/disables CTS
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1141   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1142   * \param enable choice (enable/disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1143   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1144   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1145  IFX_INLINE void IfxAsclin_enableCts(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1146  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1147  /** \brief Enables/disables falling edge detected flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1148   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1149   * \param enable choice (enable / disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1150   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1151   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1152  IFX_INLINE void IfxAsclin_enableFallingEdgeDetectedFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1153  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1154  /** \brief Enables/disables frame error flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1155   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1156   * \param enable choice (enable / disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1157   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1158   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1159  IFX_INLINE void IfxAsclin_enableFrameErrorFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1160  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1161  /** \brief Enables/disables the hardware checksum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1162   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1163   * \param enable choice (enable / disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1164   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1165   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1166  IFX_INLINE void IfxAsclin_enableHardwareChecksum(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1167  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1168  /** \brief Enables/disables header timeout flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1169   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1170   * \param enable choice (enable / disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1171   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1172   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1173  IFX_INLINE void IfxAsclin_enableHeaderTimeoutFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1174  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1175  /** \brief Enables/disables LIN auto baudrate detection error flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1176   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1177   * \param enable choice (enable / disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1178   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1179   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1180  IFX_INLINE void IfxAsclin_enableLinAutoBaudDetectionErrorFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1181  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1182  /** \brief Enables/disables LIN checksum error flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1183   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1184   * \param enable choice (enable / disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1185   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1186   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1187  IFX_INLINE void IfxAsclin_enableLinChecksumErrorFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1188  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1189  /** \brief Enables/disables LIN parity error flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1190   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1191   * \param enable choice (enable / disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1192   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1193   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1194  IFX_INLINE void IfxAsclin_enableLinParityErrorFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1195  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1196  /** \brief Enables/disables the loop back mode
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1197   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1198   * \param enable choice (enable/disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1199   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1200   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1201  IFX_INLINE void IfxAsclin_enableLoopBackMode(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1202  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1203  /** \brief Enables/disables the parity bit attachment to tha data bits
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1204   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1205   * \param enable choice (enable/disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1206   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1207   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1208  IFX_INLINE void IfxAsclin_enableParity(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1209  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1210  /** \brief Enables/disables parity error flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1211   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1212   * \param enable choice (enable / disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1213   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1214   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1215  IFX_INLINE void IfxAsclin_enableParityErrorFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1216  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1217  /** \brief Enables/disables raising edge detected flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1218   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1219   * \param enable choice (enable / disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1220   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1221   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1222  IFX_INLINE void IfxAsclin_enableRaisingEdgeDetectedFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1223  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1224  /** \brief Enables/disables response timeout flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1225   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1226   * \param enable choice (enable / disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1227   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1228   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1229  IFX_INLINE void IfxAsclin_enableResponseTimeoutFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1230  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1231  /** \brief Enables/disables Rx FIFO level flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1232   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1233   * \param enable choice (enable / disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1234   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1235   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1236  IFX_INLINE void IfxAsclin_enableRxFifoFillLevelFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1237  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1238  /** \brief Enables/disables the receive FIFO outlet to allow filling of Rx FIFO through shift register
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1239   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1240   * \param enable choice (enable/disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1241   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1242   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1243  IFX_INLINE void IfxAsclin_enableRxFifoInlet(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1244  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1245  /** \brief Enables/disables Rx FIFO overflow flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1246   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1247   * \param enable choice (enable / disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1248   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1249   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1250  IFX_INLINE void IfxAsclin_enableRxFifoOverflowFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1251  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1252  /** \brief Enables/disables Rx FIFO underflow flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1253   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1254   * \param enable choice (enable / disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1255   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1256   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1257  IFX_INLINE void IfxAsclin_enableRxFifoUnderflowFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1258  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1259  /** \brief Enables/disables receive header end flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1260   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1261   * \param enable choice (enable / disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1262   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1263   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1264  IFX_INLINE void IfxAsclin_enableRxHeaderEndFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1265  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1266  /** \brief Enables/disables receive response end flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1267   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1268   * \param enable choice (enable / disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1269   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1270   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1271  IFX_INLINE void IfxAsclin_enableRxResponseEndFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1272  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1273  /** \brief Enables/disables transmission completed flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1274   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1275   * \param enable choice (enable / disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1276   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1277   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1278  IFX_INLINE void IfxAsclin_enableTransmissionCompletedFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1279  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1280  /** \brief Enables/disables Tx FIFO level flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1281   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1282   * \param enable choice (enable / disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1283   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1284   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1285  IFX_INLINE void IfxAsclin_enableTxFifoFillLevelFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1286  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1287  /** \brief Enables/disables the transmit FIFO outlet to allow transmission
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1288   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1289   * \param enable choice (enable/disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1290   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1291   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1292  IFX_INLINE void IfxAsclin_enableTxFifoOutlet(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1293  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1294  /** \brief Enables/disables Tx FIFO overflow flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1295   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1296   * \param enable choice (enable / disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1297   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1298   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1299  IFX_INLINE void IfxAsclin_enableTxFifoOverflowFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1300  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1301  /** \brief Enables/disables transmit header end flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1302   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1303   * \param enable choice (enable / disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1304   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1305   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1306  IFX_INLINE void IfxAsclin_enableTxHeaderEndFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1307  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1308  /** \brief Enables/disables transmit response end flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1309   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1310   * \param enable choice (enable / disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1311   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1312   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1313  IFX_INLINE void IfxAsclin_enableTxResponseEndFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1314  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1315  /** \brief Returns the module's suspend state.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1316   * TRUE :if module is suspended.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1317   * FALSE:if module is not yet suspended.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1318   * \param asclin Pointer to ASCLIN module registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1319   * \return Suspend status (TRUE / FALSE)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1320   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1321  IFX_INLINE boolean IfxAsclin_isModuleSuspended(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1322  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1323  /** \brief Selects the clock polarity
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1324   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1325   * \param cpol CPOL selection
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1326   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1327   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1328  IFX_INLINE void IfxAsclin_setClockPolarity(Ifx_ASCLIN *asclin, IfxAsclin_ClockPolarity cpol);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1329  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1330  /** \brief Selects the CTS input pin
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1331   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1332   * \param ctsi CTS input pin selection
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1333   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1334   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1335  IFX_INLINE void IfxAsclin_setCtsInput(Ifx_ASCLIN *asclin, IfxAsclin_CtsInputSelect ctsi);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1336  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1337  /** \brief Selects the module's mode of operation
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1338   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1339   * \param mode mode selction
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1340   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1341   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1342  IFX_INLINE void IfxAsclin_setFrameMode(Ifx_ASCLIN *asclin, IfxAsclin_FrameMode mode);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1343  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1344  /** \brief Selects the RTS/CTS polarity
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1345   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1346   * \param rcpol RCPOL selection
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1347   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1348   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1349  IFX_INLINE void IfxAsclin_setRtsCtsPolarity(Ifx_ASCLIN *asclin, IfxAsclin_RtsCtsPolarity rcpol);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1350  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1351  /** \brief Selects the alternate input for Rx signal
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1352   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1353   * \param alti alternate input selection of Rx signal
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1354   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1355   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1356  IFX_INLINE void IfxAsclin_setRxInput(Ifx_ASCLIN *asclin, IfxAsclin_RxInputSelect alti);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1357  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1358  /** \brief Selects the slave polarity
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1359   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1360   * \param spol SPOL selection
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1361   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1362   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1363  IFX_INLINE void IfxAsclin_setSlavePolarity(Ifx_ASCLIN *asclin, IfxAsclin_SlavePolarity spol);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1364  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1365  /** \brief Configure the Module to Hard/Soft suspend mode.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1366   * Note: The api works only when the OCDS is enabled and in Supervisor Mode. When OCDS is disabled the OCS suspend control is ineffective.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1367   * \param asclin Pointer to ASCLIN module registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1368   * \param mode Module suspend mode
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1369   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1370   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1371  IFX_INLINE void IfxAsclin_setSuspendMode(Ifx_ASCLIN *asclin, IfxAsclin_SuspendMode mode);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1372  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1373  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1374  /*-------------------------Global Function Prototypes-------------------------*/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1375  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1376  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1377  /** \brief Set the bit timing
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1378   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1379   * \note this function required FA source and the PD frequency to be set to their final values
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1380   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1381   * \param baudrate Required baudrate
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1382   * \param oversampling The oversampling factor
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1383   * \param samplepoint The sample point position
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1384   * \param medianFilter Number of samples per bit (median filter)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1385   * \return TRUE if configuration was successfull
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1386   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1387  IFX_EXTERN boolean IfxAsclin_setBitTiming(Ifx_ASCLIN *asclin, float32 baudrate, IfxAsclin_OversamplingFactor oversampling, IfxAsclin_SamplePointPosition samplepoint, IfxAsclin_SamplesPerBit medianFilter);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1388  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1389  /** \} */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1390  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1391  /** \addtogroup IfxLld_Asclin_Std_External
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1392   * \{ */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1393  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1394  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1395  /*-------------------------Global Function Prototypes-------------------------*/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1396  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1397  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1398  /** \brief Disables the module
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1399   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1400   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1401   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1402  IFX_EXTERN void IfxAsclin_disableModule(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1403  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1404  /** \brief Enables the ASC error interrupt Flags
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1405   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1406   * \param parEnable parity error
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1407   * \param rfoEnable Rx FIFO overflow error
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1408   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1409   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1410  IFX_EXTERN void IfxAsclin_enableAscErrorFlags(Ifx_ASCLIN *asclin, boolean parEnable, boolean rfoEnable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1411  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1412  /** \brief Enables the module
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1413   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1414   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1415   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1416  IFX_EXTERN void IfxAsclin_enableModule(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1417  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1418  /** \brief Returns the SRC pointer for ERR
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1419   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1420   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1421  IFX_EXTERN volatile Ifx_SRC_SRCR *IfxAsclin_getSrcPointerEr(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1422  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1423  /** \brief Returns the  SRC pointer for Rx
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1424   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1425   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1426  IFX_EXTERN volatile Ifx_SRC_SRCR *IfxAsclin_getSrcPointerRx(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1427  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1428  /** \brief Returns the SRC pointer for Tx
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1429   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1430   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1431  IFX_EXTERN volatile Ifx_SRC_SRCR *IfxAsclin_getSrcPointerTx(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1432  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1433  /** \brief Reads data up to 16 bits
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1434   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1435   * \param data Array where the read data shall be stored
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1436   * \param count number of items to read
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1437   * \return number of items that could not be read
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1438   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1439  IFX_EXTERN uint32 IfxAsclin_read16(Ifx_ASCLIN *asclin, uint16 *data, uint32 count);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1440  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1441  /** \brief Reads data up to 32 bits
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1442   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1443   * \param data Array where the read data shall be stored
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1444   * \param count number of items to read
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1445   * \return number of items that could not be read
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1446   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1447  IFX_EXTERN uint32 IfxAsclin_read32(Ifx_ASCLIN *asclin, uint32 *data, uint32 count);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1448  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1449  /** \brief Reads data up to 8 bits
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1450   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1451   * \param data Array where the read data shall be stored
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1452   * \param count number of items to read
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1453   * \return number of items that could not be read
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1454   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1455  IFX_EXTERN uint32 IfxAsclin_read8(Ifx_ASCLIN *asclin, uint8 *data, uint32 count);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1456  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1457  /** \brief Sets the baudrate bit fields
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1458   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1459   * \param prescaler division ratio of the predivider
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1460   * \param numerator numerator of the fractional divider
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1461   * \param denominator denominator of the fractional divider
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1462   * \param oversampling division ratio of the baudrate postdivider
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1463   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1464   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1465  IFX_EXTERN void IfxAsclin_setBaudrateBitFields(Ifx_ASCLIN *asclin, uint16 prescaler, uint16 numerator, uint16 denominator, IfxAsclin_OversamplingFactor oversampling);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1466  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1467  /** \brief Sets the  clock source
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1468   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1469   * \param clockSource clock source selection
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1470   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1471   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1472  IFX_EXTERN void IfxAsclin_setClockSource(Ifx_ASCLIN *asclin, IfxAsclin_ClockSource clockSource);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1473  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1474  /** \brief Writes data up to 16 bits
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1475   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1476   * \param data Array of data to be send
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1477   * \param count number of items to be send
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1478   * \return the number of items that could not be send
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1479   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1480  IFX_EXTERN uint32 IfxAsclin_write16(Ifx_ASCLIN *asclin, uint16 *data, uint32 count);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1481  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1482  /** \brief Writes data up to 32 bits
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1483   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1484   * \param data Array of data to be send
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1485   * \param count number of items to be send
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1486   * \return the number of items that could not be send
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1487   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1488  IFX_EXTERN uint32 IfxAsclin_write32(Ifx_ASCLIN *asclin, uint32 *data, uint32 count);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1489  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1490  /** \brief Writes data up to 8 bits
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1491   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1492   * \param data Array of data to be send
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1493   * \param count number of items to be send
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1494   * \return the number of items that could not be send
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1495   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1496  IFX_EXTERN uint32 IfxAsclin_write8(Ifx_ASCLIN *asclin, uint8 *data, uint32 count);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1497  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1498  /** \} */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1499  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1500  /** \addtogroup IfxLld_Asclin_Std_IO
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1501   * \{ */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1502  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1503  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1504  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1505  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1506  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1507  /** \brief Initializes a CTS input
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1508   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1509   * Attention: the kernel clock has to be disabled whenever the input multiplexer is changed.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1510   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1511   * This can be done with IfxAsclin_setClockSource(asclinSFR, IfxAsclin_ClockSource_noClock);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1512   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1513   * After the function call, the current clock can be enabled again.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1514   * \param cts the CTS Pin which should be configured
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1515   * \param inputMode the pin input mode which should be configured
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1516   * \param padDriver the pad driver mode which should be configured
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1517   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1518   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1519  IFX_INLINE void IfxAsclin_initCtsPin(const IfxAsclin_Cts_In *cts, IfxPort_InputMode inputMode, IfxPort_PadDriver padDriver);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1520  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1521  /** \brief Initializes a RTS output
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1522   * \param rts the RTS Pin which should be configured
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1523   * \param outputMode the pin output mode which should be configured
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1524   * \param padDriver the pad driver mode which should be configured
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1525   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1526   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1527  IFX_INLINE void IfxAsclin_initRtsPin(const IfxAsclin_Rts_Out *rts, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1528  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1529  /** \brief Initializes a RX input
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1530   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1531   * Attention: the kernel clock has to be disabled whenever the input multiplexer is changed.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1532   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1533   * This can be done with IfxAsclin_setClockSource(asclinSFR, IfxAsclin_ClockSource_noClock);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1534   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1535   * After the function call, the current clock can be enabled again.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1536   * \param rx the RX Pin which should be configured
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1537   * \param inputMode the pin input mode which should be configured
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1538   * \param padDriver the pad driver mode which should be configured
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1539   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1540   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1541  IFX_INLINE void IfxAsclin_initRxPin(const IfxAsclin_Rx_In *rx, IfxPort_InputMode inputMode, IfxPort_PadDriver padDriver);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1542  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1543  /** \brief Initializes a SCLK output
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1544   * \param sclk the SCLK Pin which should be configured
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1545   * \param outputMode the pin output mode which should be configured
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1546   * \param padDriver the pad driver mode which should be configured
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1547   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1548   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1549  IFX_INLINE void IfxAsclin_initSclkPin(const IfxAsclin_Sclk_Out *sclk, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1550  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1551  /** \brief Initializes a SLSO output
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1552   * \param slso the SLSO Pin which should be configured
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1553   * \param outputMode the pin output mode which should be configured
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1554   * \param padDriver the pad driver mode which should be configured
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1555   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1556   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1557  IFX_INLINE void IfxAsclin_initSlsoPin(const IfxAsclin_Slso_Out *slso, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1558  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1559  /** \brief Initializes a TX output
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1560   * \param tx the TX Pin which should be configured
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1561   * \param outputMode the pin output mode which should be configured
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1562   * \param padDriver the pad driver mode which should be configured
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1563   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1564   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1565  IFX_INLINE void IfxAsclin_initTxPin(const IfxAsclin_Tx_Out *tx, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1566  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1567  /** \} */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1568  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1569  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1570  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1571  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1572  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1573  /**
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1574   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1575   * \return returns the value of RxDATA register
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1576   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1577  IFX_INLINE uint32 IfxAsclin_readRxData(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1578  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1579  /**
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1580   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1581   * \param data data to be written
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1582   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1583   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1584  IFX_INLINE void IfxAsclin_writeTxData(Ifx_ASCLIN *asclin, uint32 data);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1585  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1586  /** \brief Returns the status of all error flags
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1587   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1588   * \return status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1589   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1590  IFX_INLINE uint16 IfxAsclin_getAllErrorFlagsStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1591  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1592  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1593  /*---------------------Inline Function Implementations------------------------*/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1594  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1595  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1596  IFX_INLINE void IfxAsclin_clearAllFlags(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1597  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1598      asclin->FLAGSCLEAR.U = 0xFFFFFFFF;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1599  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1600  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1601  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1602  IFX_INLINE void IfxAsclin_clearBreakDetectedFlag(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1603  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1604      asclin->FLAGSCLEAR.B.BDC = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1605  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1606  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1607  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1608  IFX_INLINE void IfxAsclin_clearCollisionDetectionErrorFlag(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1609  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1610      asclin->FLAGSCLEAR.B.CEC = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1611  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1612  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1613  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1614  IFX_INLINE void IfxAsclin_clearFallingEdgeDetectedFlag(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1615  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1616      asclin->FLAGSCLEAR.B.FEDC = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1617  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1618  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1619  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1620  IFX_INLINE void IfxAsclin_clearFrameErrorFlag(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1621  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1622      asclin->FLAGSCLEAR.B.FEC = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1623  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1624  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1625  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1626  IFX_INLINE void IfxAsclin_clearHeaderTimeoutFlag(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1627  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1628      asclin->FLAGSCLEAR.B.HTC = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1629  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1630  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1631  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1632  IFX_INLINE void IfxAsclin_clearKernelResetStatus(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1633  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1634      asclin->KRSTCLR.B.CLR = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1635  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1636  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1637  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1638  IFX_INLINE void IfxAsclin_clearLinAutoBaudDetectionErrorFlag(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1639  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1640      asclin->FLAGSCLEAR.B.LAC = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1641  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1642  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1643  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1644  IFX_INLINE void IfxAsclin_clearLinChecksumErrorFlag(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1645  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1646      asclin->FLAGSCLEAR.B.LCC = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1647  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1648  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1649  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1650  IFX_INLINE void IfxAsclin_clearLinParityErrorFlag(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1651  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1652      asclin->FLAGSCLEAR.B.LPC = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1653  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1654  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1655  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1656  IFX_INLINE void IfxAsclin_clearParityErrorFlag(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1657  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1658      asclin->FLAGSCLEAR.B.PEC = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1659  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1660  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1661  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1662  IFX_INLINE void IfxAsclin_clearRaisingEdgeDetectedFlag(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1663  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1664      asclin->FLAGSCLEAR.B.REDC = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1665  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1666  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1667  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1668  IFX_INLINE void IfxAsclin_clearResponseTimeoutFlag(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1669  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1670      asclin->FLAGSCLEAR.B.RTC = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1671  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1672  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1673  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1674  IFX_INLINE void IfxAsclin_clearRxFifoFillLevelFlag(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1675  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1676      asclin->FLAGSCLEAR.B.RFLC = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1677  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1678  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1679  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1680  IFX_INLINE void IfxAsclin_clearRxFifoOverflowFlag(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1681  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1682      asclin->FLAGSCLEAR.B.RFOC = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1683  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1684  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1685  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1686  IFX_INLINE void IfxAsclin_clearRxFifoUnderflowFlag(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1687  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1688      asclin->FLAGSCLEAR.B.RFUC = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1689  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1690  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1691  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1692  IFX_INLINE void IfxAsclin_clearRxHeaderEndFlag(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1693  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1694      asclin->FLAGSCLEAR.B.RHC = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1695  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1696  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1697  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1698  IFX_INLINE void IfxAsclin_clearRxResponseEndFlag(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1699  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1700      asclin->FLAGSCLEAR.B.RRC = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1701  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1702  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1703  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1704  IFX_INLINE void IfxAsclin_clearTransmissionCompletedFlag(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1705  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1706      asclin->FLAGSCLEAR.B.TCC = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1707  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1708  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1709  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1710  IFX_INLINE void IfxAsclin_clearTxFifoFillLevelFlag(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1711  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1712      asclin->FLAGSCLEAR.B.TFLC = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1713  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1714  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1715  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1716  IFX_INLINE void IfxAsclin_clearTxFifoOverflowFlag(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1717  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1718      asclin->FLAGSCLEAR.B.TFOC = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1719  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1720  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1721  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1722  IFX_INLINE void IfxAsclin_clearTxHeaderEndFlag(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1723  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1724      asclin->FLAGSCLEAR.B.THC = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1725  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1726  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1727  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1728  IFX_INLINE void IfxAsclin_clearTxResponseEndFlag(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1729  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1730      asclin->FLAGSCLEAR.B.TRC = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1731  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1732  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1733  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1734  IFX_INLINE void IfxAsclin_disableAllFlags(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1735  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1736      asclin->FLAGSENABLE.U = 0x00000000;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1737  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1738  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1739  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1740  IFX_INLINE void IfxAsclin_enableAutoBaudrateDetection(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1741  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1742      asclin->LIN.CON.B.ABD = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1743  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1744  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1745  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1746  IFX_INLINE void IfxAsclin_enableBreakDetectedFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1747  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1748      asclin->FLAGSENABLE.B.BDE = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1749  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1750  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1751  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1752  IFX_INLINE void IfxAsclin_enableCollisionDetection(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1753  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1754      asclin->FRAMECON.B.CEN = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1755  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1756  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1757  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1758  IFX_INLINE void IfxAsclin_enableCollisionDetectionErrorFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1759  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1760      asclin->FLAGSENABLE.B.CEE = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1761  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1762  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1763  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1764  IFX_INLINE void IfxAsclin_enableCts(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1765  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1766      asclin->IOCR.B.CTSEN = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1767  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1768  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1769  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1770  IFX_INLINE void IfxAsclin_enableFallingEdgeDetectedFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1771  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1772      asclin->FLAGSENABLE.B.FEDE = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1773  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1774  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1775  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1776  IFX_INLINE void IfxAsclin_enableFrameErrorFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1777  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1778      asclin->FLAGSENABLE.B.FEE = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1779  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1780  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1781  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1782  IFX_INLINE void IfxAsclin_enableHardwareChecksum(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1783  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1784      asclin->LIN.CON.B.CSEN = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1785  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1786  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1787  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1788  IFX_INLINE void IfxAsclin_enableHeaderTimeoutFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1789  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1790      asclin->FLAGSENABLE.B.HTE = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1791  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1792  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1793  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1794  IFX_INLINE void IfxAsclin_enableLinAutoBaudDetectionErrorFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1795  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1796      asclin->FLAGSENABLE.B.ABE = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1797  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1798  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1799  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1800  IFX_INLINE void IfxAsclin_enableLinChecksumErrorFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1801  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1802      asclin->FLAGSENABLE.B.LCE = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1803  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1804  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1805  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1806  IFX_INLINE void IfxAsclin_enableLinParityErrorFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1807  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1808      asclin->FLAGSENABLE.B.LPE = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1809  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1810  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1811  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1812  IFX_INLINE void IfxAsclin_enableLoopBackMode(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1813  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1814      asclin->IOCR.B.LB = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1815  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1816  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1817  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1818  IFX_INLINE void IfxAsclin_enableParity(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1819  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1820      asclin->FRAMECON.B.PEN = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1821  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1822  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1823  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1824  IFX_INLINE void IfxAsclin_enableParityErrorFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1825  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1826      asclin->FLAGSENABLE.B.PEE = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1827  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1828  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1829  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1830  IFX_INLINE void IfxAsclin_enableRaisingEdgeDetectedFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1831  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1832      asclin->FLAGSENABLE.B.REDE = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1833  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1834  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1835  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1836  IFX_INLINE void IfxAsclin_enableResponseTimeoutFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1837  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1838      asclin->FLAGSENABLE.B.RTE = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1839  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1840  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1841  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1842  IFX_INLINE void IfxAsclin_enableRxFifoFillLevelFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1843  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1844      asclin->FLAGSENABLE.B.RFLE = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1845  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1846  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1847  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1848  IFX_INLINE void IfxAsclin_enableRxFifoInlet(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1849  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1850      asclin->RXFIFOCON.B.ENI = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1851  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1852  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1853  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1854  IFX_INLINE void IfxAsclin_enableRxFifoOverflowFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1855  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1856      asclin->FLAGSENABLE.B.RFOE = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1857  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1858  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1859  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1860  IFX_INLINE void IfxAsclin_enableRxFifoUnderflowFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1861  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1862      asclin->FLAGSENABLE.B.RFUE = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1863  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1864  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1865  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1866  IFX_INLINE void IfxAsclin_enableRxHeaderEndFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1867  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1868      asclin->FLAGSENABLE.B.RHE = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1869  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1870  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1871  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1872  IFX_INLINE void IfxAsclin_enableRxResponseEndFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1873  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1874      asclin->FLAGSENABLE.B.RRE = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1875  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1876  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1877  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1878  IFX_INLINE void IfxAsclin_enableTransmissionCompletedFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1879  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1880      asclin->FLAGSENABLE.B.TCE = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1881  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1882  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1883  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1884  IFX_INLINE void IfxAsclin_enableTxFifoFillLevelFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1885  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1886      asclin->FLAGSENABLE.B.TFLE = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1887  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1888  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1889  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1890  IFX_INLINE void IfxAsclin_enableTxFifoOutlet(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1891  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1892      asclin->TXFIFOCON.B.ENO = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1893  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1894  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1895  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1896  IFX_INLINE void IfxAsclin_enableTxFifoOverflowFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1897  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1898      asclin->FLAGSENABLE.B.TFOE = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1899  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1900  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1901  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1902  IFX_INLINE void IfxAsclin_enableTxHeaderEndFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1903  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1904      asclin->FLAGSENABLE.B.THE = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1905  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1906  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1907  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1908  IFX_INLINE void IfxAsclin_enableTxResponseEndFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1909  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1910      asclin->FLAGSENABLE.B.TRE = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1911  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1912  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1913  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1914  IFX_INLINE void IfxAsclin_flushRxFifo(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1915  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1916      asclin->RXFIFOCON.B.FLUSH = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1917  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1918  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1919  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1920  IFX_INLINE void IfxAsclin_flushTxFifo(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1921  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1922      asclin->TXFIFOCON.B.FLUSH = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1923  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1924  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1925  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1926  IFX_INLINE boolean IfxAsclin_getBreakDetectedFlagStatus(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1927  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1928      return asclin->FLAGS.B.BD;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1929  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1930  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1931  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1932  IFX_INLINE uint8 IfxAsclin_getClockSource(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1933  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1934      return asclin->CSR.B.CLKSEL;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1935  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1936  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1937  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1938  IFX_INLINE boolean IfxAsclin_getClockStatus(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1939  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1940      return asclin->CSR.B.CON;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1941  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1942  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1943  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1944  IFX_INLINE boolean IfxAsclin_getCollisionDetectionErrorFlagStatus(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1945  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1946      return asclin->FLAGS.B.CE;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1947  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1948  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1949  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1950  IFX_INLINE boolean IfxAsclin_getFallingEdgeDetectedFlagStatus(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1951  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1952      return asclin->FLAGS.B.FED;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1953  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1954  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1955  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1956  IFX_INLINE boolean IfxAsclin_getFrameErrorFlagStatus(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1957  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1958      return asclin->FLAGS.B.FE;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1959  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1960  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1961  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1962  IFX_INLINE boolean IfxAsclin_getHeaderTimeoutFlagStatus(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1963  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1964      return asclin->FLAGS.B.HT;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1965  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1966  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1967  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1968  IFX_INLINE boolean IfxAsclin_getKernelResetStatus(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1969  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1970      return asclin->KRST0.B.RSTSTAT;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1971  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1972  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1973  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1974  IFX_INLINE boolean IfxAsclin_getLinAutoBaudDetectionErrorFlagStatus(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1975  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1976      return asclin->FLAGS.B.LA;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1977  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1978  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1979  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1980  IFX_INLINE boolean IfxAsclin_getLinChecksumErrorFlagStatus(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1981  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1982      return asclin->FLAGS.B.LC;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1983  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1984  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1985  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1986  IFX_INLINE boolean IfxAsclin_getLinParityErrorFlagStatus(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1987  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1988      return asclin->FLAGS.B.LP;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1989  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1990  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1991  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1992  IFX_INLINE boolean IfxAsclin_getModuleStatus(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1993  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1994      return asclin->CLC.B.DISS;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1995  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1996  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1997  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1998  IFX_INLINE boolean IfxAsclin_getParityErrorFlagStatus(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1999  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2000      return asclin->FLAGS.B.PE;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2001  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2002  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2003  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2004  IFX_INLINE uint16 IfxAsclin_getPrescaler(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2005  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2006      return asclin->BITCON.B.PRESCALER + 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2007  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2008  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2009  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2010  IFX_INLINE boolean IfxAsclin_getRaisingEdgeDetectedFlagStatus(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2011  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2012      return asclin->FLAGS.B.RED;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2013  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2014  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2015  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2016  IFX_INLINE boolean IfxAsclin_getReceiveSignalStatus(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2017  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2018      return asclin->IOCR.B.RXM;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2019  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2020  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2021  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2022  IFX_INLINE boolean IfxAsclin_getResponseTimeoutFlagStatus(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2023  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2024      return asclin->FLAGS.B.RT;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2025  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2026  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2027  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2028  IFX_INLINE uint8 IfxAsclin_getRxFifoFillLevel(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2029  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2030      return asclin->RXFIFOCON.B.FILL;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2031  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2032  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2033  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2034  IFX_INLINE boolean IfxAsclin_getRxFifoFillLevelFlagStatus(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2035  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2036      return asclin->FLAGS.B.RFL;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2037  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2038  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2039  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2040  IFX_INLINE uint8 IfxAsclin_getRxFifoOutletWidth(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2041  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2042      return asclin->RXFIFOCON.B.OUTW;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2043  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2044  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2045  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2046  IFX_INLINE boolean IfxAsclin_getRxFifoOverflowFlagStatus(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2047  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2048      return asclin->FLAGS.B.RFO;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2049  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2050  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2051  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2052  IFX_INLINE boolean IfxAsclin_getRxFifoUnderflowFlagStatus(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2053  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2054      return asclin->FLAGS.B.RFU;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2055  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2056  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2057  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2058  IFX_INLINE boolean IfxAsclin_getRxHeaderEndFlagStatus(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2059  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2060      return asclin->FLAGS.B.RH;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2061  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2062  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2063  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2064  IFX_INLINE boolean IfxAsclin_getRxResponseEndFlagStatus(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2065  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2066      return asclin->FLAGS.B.RR;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2067  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2068  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2069  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2070  IFX_INLINE boolean IfxAsclin_getTransmissionCompletedFlagStatus(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2071  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2072      return asclin->FLAGS.B.TC;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2073  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2074  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2075  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2076  IFX_INLINE boolean IfxAsclin_getTransmitSignalStatus(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2077  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2078      return asclin->IOCR.B.TXM;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2079  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2080  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2081  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2082  IFX_INLINE uint8 IfxAsclin_getTxFifoFillLevel(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2083  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2084      return asclin->TXFIFOCON.B.FILL;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2085  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2086  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2087  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2088  IFX_INLINE boolean IfxAsclin_getTxFifoFillLevelFlagStatus(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2089  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2090      return asclin->FLAGS.B.TFL;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2091  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2092  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2093  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2094  IFX_INLINE uint8 IfxAsclin_getTxFifoInletWidth(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2095  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2096      return asclin->TXFIFOCON.B.INW;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2097  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2098  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2099  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2100  IFX_INLINE boolean IfxAsclin_getTxFifoOverflowFlagStatus(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2101  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2102      return asclin->FLAGS.B.TFO;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2103  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2104  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2105  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2106  IFX_INLINE boolean IfxAsclin_getTxHeaderEndFlagStatus(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2107  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2108      return asclin->FLAGS.B.TH;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2109  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2110  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2111  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2112  IFX_INLINE boolean IfxAsclin_getTxResponseEndFlagStatus(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2113  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2114      return asclin->FLAGS.B.TR;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2115  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2116  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2117  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2118  IFX_INLINE void IfxAsclin_initCtsPin(const IfxAsclin_Cts_In *cts, IfxPort_InputMode inputMode, IfxPort_PadDriver padDriver)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2119  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2120      if (cts->pin.port != NULL_PTR)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2121      {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2122          IfxPort_setPinModeInput(cts->pin.port, cts->pin.pinIndex, inputMode);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2123          IfxPort_setPinPadDriver(cts->pin.port, cts->pin.pinIndex, padDriver);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2124          IfxAsclin_enableCts(cts->module, TRUE);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2125          IfxAsclin_setCtsInput(cts->module, (IfxAsclin_CtsInputSelect)cts->select);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2126      }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2127  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2128  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2129  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2130  IFX_INLINE void IfxAsclin_initRtsPin(const IfxAsclin_Rts_Out *rts, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2131  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2132      IfxPort_setPinModeOutput(rts->pin.port, rts->pin.pinIndex, outputMode, rts->select);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2133      IfxPort_setPinPadDriver(rts->pin.port, rts->pin.pinIndex, padDriver);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2134  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2135  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2136  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2137  IFX_INLINE void IfxAsclin_initRxPin(const IfxAsclin_Rx_In *rx, IfxPort_InputMode inputMode, IfxPort_PadDriver padDriver)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2138  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2139      if (rx->pin.port != NULL_PTR)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2140      {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2141          IfxPort_setPinModeInput(rx->pin.port, rx->pin.pinIndex, inputMode);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2142          IfxPort_setPinPadDriver(rx->pin.port, rx->pin.pinIndex, padDriver);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2143          IfxAsclin_setRxInput(rx->module, (IfxAsclin_RxInputSelect)rx->select);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2144      }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2145  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2146  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2147  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2148  IFX_INLINE void IfxAsclin_initSclkPin(const IfxAsclin_Sclk_Out *sclk, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2149  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2150      IfxPort_setPinModeOutput(sclk->pin.port, sclk->pin.pinIndex, outputMode, sclk->select);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2151      IfxPort_setPinPadDriver(sclk->pin.port, sclk->pin.pinIndex, padDriver);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2152  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2153  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2154  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2155  IFX_INLINE void IfxAsclin_initSlsoPin(const IfxAsclin_Slso_Out *slso, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2156  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2157      IfxPort_setPinModeOutput(slso->pin.port, slso->pin.pinIndex, outputMode, slso->select);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2158      IfxPort_setPinPadDriver(slso->pin.port, slso->pin.pinIndex, padDriver);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2159  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2160  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2161  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2162  IFX_INLINE void IfxAsclin_initTxPin(const IfxAsclin_Tx_Out *tx, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2163  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2164      IfxPort_setPinModeOutput(tx->pin.port, tx->pin.pinIndex, outputMode, tx->select);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2165      IfxPort_setPinPadDriver(tx->pin.port, tx->pin.pinIndex, padDriver);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2166  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2167  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2168  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2169  IFX_INLINE boolean IfxAsclin_isModuleSuspended(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2170  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2171      Ifx_ASCLIN_OCS ocs;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2172  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2173      // read the status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2174      ocs.U = asclin->OCS.U;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2175  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2176      // return the status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2177      return ocs.B.SUSSTA;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2178  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2179  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2180  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2181  IFX_INLINE uint32 IfxAsclin_readRxData(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2182  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2183      return asclin->RXDATA.U;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2184  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2185  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2186  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2187  IFX_INLINE void IfxAsclin_setBrdLowerlimt(Ifx_ASCLIN *asclin, uint8 limit)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2188  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2189      asclin->BRD.B.LOWERLIMIT = limit;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2190  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2191  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2192  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2193  IFX_INLINE void IfxAsclin_setBrdUpperlimt(Ifx_ASCLIN *asclin, uint8 limit)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2194  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2195      asclin->BRD.B.UPPERLIMIT = limit;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2196  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2197  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2198  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2199  IFX_INLINE void IfxAsclin_setChecksumInjection(Ifx_ASCLIN *asclin, IfxAsclin_ChecksumInjection csi)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2200  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2201      asclin->LIN.CON.B.CSI = csi;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2202  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2203  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2204  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2205  IFX_INLINE void IfxAsclin_setChecksumMode(Ifx_ASCLIN *asclin, IfxAsclin_Checksum mode)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2206  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2207      asclin->DATCON.B.CSM = mode;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2208  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2209  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2210  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2211  IFX_INLINE void IfxAsclin_setClockPolarity(Ifx_ASCLIN *asclin, IfxAsclin_ClockPolarity cpol)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2212  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2213      asclin->IOCR.B.CPOL = cpol;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2214  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2215  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2216  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2217  IFX_INLINE void IfxAsclin_setCtsInput(Ifx_ASCLIN *asclin, IfxAsclin_CtsInputSelect ctsi)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2218  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2219      asclin->IOCR.B.CTS = ctsi;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2220  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2221  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2222  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2223  IFX_INLINE void IfxAsclin_setDataLength(Ifx_ASCLIN *asclin, IfxAsclin_DataLength length)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2224  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2225      asclin->DATCON.B.DATLEN = length;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2226  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2227  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2228  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2229  IFX_INLINE void IfxAsclin_setDenominator(Ifx_ASCLIN *asclin, uint16 denominator)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2230  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2231      asclin->BRG.B.DENOMINATOR = denominator;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2232  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2233  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2234  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2235  IFX_INLINE void IfxAsclin_setDisableModuleRequest(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2236  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2237      asclin->CLC.B.DISR = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2238  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2239  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2240  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2241  IFX_INLINE void IfxAsclin_setEnableModuleRequest(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2242  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2243      asclin->CLC.B.DISR = 0;
	ld.bu	d0,[a15]
.L344:
	insert	d0,d0,#0,#0,#1
	st.b	[a15],d0
.L345:
	j	IfxScuWdt_setCpuEndinit
.L340:
	
__IfxAsclin_enableModule_function_end:
	.size	IfxAsclin_enableModule,__IfxAsclin_enableModule_function_end-IfxAsclin_enableModule
.L173:
	; End of function
	
	.sdecl	'.text.IfxAsclin.IfxAsclin_getAddress',code,cluster('IfxAsclin_getAddress')
	.sect	'.text.IfxAsclin.IfxAsclin_getAddress'
	.align	2
	
	.global	IfxAsclin_getAddress

; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	    77  lin < IFXASCLIN_NUM_MODULES)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	    78      {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	    79          module = (Ifx_ASCLIN *)IfxAsclin_cfg_indexMap[asclin].module;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	    80      }
; Function IfxAsclin_getAddress
.L72:
IfxAsclin_getAddress:	.type	func

; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	    81      else
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	    82      {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	    83          module = NULL_PTR;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	    84      }
	jge	d4,#4,.L2
.L522:

; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	    85  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	    86      return module;
	movh.a	a15,#@his(IfxAsclin_cfg_indexMap)
	lea	a15,[a15]@los(IfxAsclin_cfg_indexMap)
.L523:
	addsc.a	a15,a15,d4,#3
.L524:
	ld.a	a2,[a15]
.L455:

; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	    87  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	    88  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	    89  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	    90  float32 IfxAsclin_getFaFrequency(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	    91  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	    92      float32               frequency;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	    93      IfxAsclin_ClockSource clockSource = (IfxAsclin_ClockSource)IfxAsclin_getClockSource(asclin);    /* gets the current clock source*/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	    94  
	ret
.L2:
	mov.a	a2,#0
.L456:
	ret
.L245:
	
__IfxAsclin_getAddress_function_end:
	.size	IfxAsclin_getAddress,__IfxAsclin_getAddress_function_end-IfxAsclin_getAddress
.L123:
	; End of function
	
	.sdecl	'.text.IfxAsclin.IfxAsclin_getFaFrequency',code,cluster('IfxAsclin_getFaFrequency')
	.sect	'.text.IfxAsclin.IfxAsclin_getFaFrequency'
	.align	2
	
	.global	IfxAsclin_getFaFrequency

; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	    95      switch (clockSource)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	    96      {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	    97      case IfxAsclin_ClockSource_noClock: /* gets the respective frequency*/
; Function IfxAsclin_getFaFrequency
.L74:
IfxAsclin_getFaFrequency:	.type	func

; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	     1  /**
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	     2   * \file IfxAsclin.h
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	     3   * \brief ASCLIN  basic functionality
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	     4   * \ingroup IfxLld_Asclin
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	     5   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	     6   * \version iLLD_1_0_1_11_0
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	     7   * \copyright Copyright (c) 2018 Infineon Technologies AG. All rights reserved.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	     8   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	     9   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    10   *                                 IMPORTANT NOTICE
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    11   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    12   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    13   * Use of this file is subject to the terms of use agreed between (i) you or 
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    14   * the company in which ordinary course of business you are acting and (ii) 
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    15   * Infineon Technologies AG or its licensees. If and as long as no such 
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    16   * terms of use are agreed, use of this file is subject to following:
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    17  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    18  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    19   * Boost Software License - Version 1.0 - August 17th, 2003
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    20  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    21   * Permission is hereby granted, free of charge, to any person or 
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    22   * organization obtaining a copy of the software and accompanying 
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    23   * documentation covered by this license (the "Software") to use, reproduce,
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    24   * display, distribute, execute, and transmit the Software, and to prepare
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    25   * derivative works of the Software, and to permit third-parties to whom the 
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    26   * Software is furnished to do so, all subject to the following:
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    27  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    28   * The copyright notices in the Software and this entire statement, including
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    29   * the above license grant, this restriction and the following disclaimer, must
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    30   * be included in all copies of the Software, in whole or in part, and all
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    31   * derivative works of the Software, unless such copies or derivative works are
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    32   * solely in the form of machine-executable object code generated by a source
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    33   * language processor.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    34  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    35   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR 
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    36   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    37   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    38   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE 
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    39   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    40   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    41   * DEALINGS IN THE SOFTWARE.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    42  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    43   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    44   * \defgroup IfxLld_Asclin_Std_Enumerations Enumerations
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    45   * \ingroup IfxLld_Asclin_Std
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    46   * \defgroup IfxLld_Asclin_Std_Operative Operative Functions
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    47   * \ingroup IfxLld_Asclin_Std
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    48   * \defgroup IfxLld_Asclin_Std_Utility Utility Functions
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    49   * \ingroup IfxLld_Asclin_Std
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    50   * \defgroup IfxLld_Asclin_Std_Configuration Configuration Functions
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    51   * \ingroup IfxLld_Asclin_Std
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    52   * \defgroup IfxLld_Asclin_Std_External External Functions
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    53   * \ingroup IfxLld_Asclin_Std
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    54   * \defgroup IfxLld_Asclin_Std_IO IO Pin Configuration Functions
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    55   * \ingroup IfxLld_Asclin_Std
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    56   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    57  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    58  #ifndef IFXASCLIN_H
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    59  #define IFXASCLIN_H 1
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    60  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    61  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    62  /*----------------------------------Includes----------------------------------*/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    63  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    64  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    65  #include "_Impl/IfxAsclin_cfg.h"
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    66  #include "Scu/Std/IfxScuCcu.h"
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    67  #include "Scu/Std/IfxScuWdt.h"
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    68  #include "Cpu/Std/IfxCpu_Intrinsics.h"
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    69  #include "IfxAsclin_reg.h"
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    70  #include "Src/Std/IfxSrc.h"
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    71  #include "_PinMap/IfxAsclin_PinMap.h"
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    72  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    73  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    74  /*--------------------------------Enumerations--------------------------------*/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    75  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    76  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    77  /** \addtogroup IfxLld_Asclin_Std_Enumerations
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    78   * \{ */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    79  /** \brief Defines if the classic or the enhanced checksum will be calculated by the checksum block.\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    80   * Definition in Ifx_ASCLIN.DATCON.B.CSM
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    81   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    82  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    83  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    84      IfxAsclin_Checksum_classic  = 0, /**< \brief classic checksum */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    85      IfxAsclin_Checksum_enhanced = 1  /**< \brief enhanced checksum */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    86  } IfxAsclin_Checksum;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    87  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    88  /** \brief Defines if the received checksum byte is written into the RXFifo or not.\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    89   * Definition in Ifx_ASCLIN.LIN.CON.B.CSI
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    90   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    91  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    92  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    93      IfxAsclin_ChecksumInjection_notWritten = 0,  /**< \brief checksum byte is not written */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    94      IfxAsclin_ChecksumInjection_written    = 1   /**< \brief checksum byte is written */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    95  } IfxAsclin_ChecksumInjection;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    96  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    97  /** \brief CPOL defines the idle level of the clock signal in the SPI mode.\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    98   * Idle level is the level outside the data transmission time intervals.\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    99   * Definition in Ifx_ASCLIN.IOCR.B.CPOL
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   100   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   101  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   102  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   103      IfxAsclin_ClockPolarity_idleLow  = 0, /**< \brief idle low */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   104      IfxAsclin_ClockPolarity_idleHigh = 1  /**< \brief idle high */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   105  } IfxAsclin_ClockPolarity;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   106  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   107  /** \brief Selection of clock source\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   108   * Definition in Ifx_ASCLIN.CSR.B.CLKSEL
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   109   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   110  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   111  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   112      IfxAsclin_ClockSource_noClock         = 0,  /**< \brief no clock will be supplied */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   113      IfxAsclin_ClockSource_kernelClock     = 1,  /**< \brief f clc will be supplied */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   114      IfxAsclin_ClockSource_oscillatorClock = 2,  /**< \brief XTAL oscillator clock foso0 will be supplied */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   115      IfxAsclin_ClockSource_flexRayClock    = 4,  /**< \brief f eray will be supplied */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   116      IfxAsclin_ClockSource_ascFastClock    = 8,  /**< \brief f asclinf wiil be supplied */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   117      IfxAsclin_ClockSource_ascSlowClock    = 16  /**< \brief f asclins will be supplied */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   118  } IfxAsclin_ClockSource;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   119  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   120  /** \brief CTS input pin selection\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   121   * Definition in Ifx_ASCLIN.IOCR.B.CTS
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   122   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   123  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   124  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   125      IfxAsclin_CtsInputSelect_0,     /**< \brief CTS input pin 0  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   126      IfxAsclin_CtsInputSelect_1,     /**< \brief CTS input pin 1  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   127      IfxAsclin_CtsInputSelect_2,     /**< \brief CTS input pin 2  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   128      IfxAsclin_CtsInputSelect_3      /**< \brief CTS input pin 3  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   129  } IfxAsclin_CtsInputSelect;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   130  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   131  /** \brief Number of bits per transfer\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   132   * Definition in Ifx_ASCLIN.FRAMECON.B.DATALEN
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   133   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   134  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   135  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   136      IfxAsclin_DataLength_1 = 0,      /**< \brief number of bits per transfer 0  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   137      IfxAsclin_DataLength_2,          /**< \brief number of bits per transfer 1  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   138      IfxAsclin_DataLength_3,          /**< \brief number of bits per transfer 2  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   139      IfxAsclin_DataLength_4,          /**< \brief number of bits per transfer 3  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   140      IfxAsclin_DataLength_5,          /**< \brief number of bits per transfer 4  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   141      IfxAsclin_DataLength_6,          /**< \brief number of bits per transfer 5  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   142      IfxAsclin_DataLength_7,          /**< \brief number of bits per transfer 6  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   143      IfxAsclin_DataLength_8,          /**< \brief number of bits per transfer 7  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   144      IfxAsclin_DataLength_9,          /**< \brief number of bits per transfer 8  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   145      IfxAsclin_DataLength_10,         /**< \brief number of bits per transfer 9  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   146      IfxAsclin_DataLength_11,         /**< \brief number of bits per transfer 10  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   147      IfxAsclin_DataLength_12,         /**< \brief number of bits per transfer 11  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   148      IfxAsclin_DataLength_13,         /**< \brief number of bits per transfer 12  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   149      IfxAsclin_DataLength_14,         /**< \brief number of bits per transfer 13  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   150      IfxAsclin_DataLength_15,         /**< \brief number of bits per transfer 14  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   151      IfxAsclin_DataLength_16          /**< \brief number of bits per transfer 15  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   152  } IfxAsclin_DataLength;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   153  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   154  /** \brief Defines the basic operating mode of the module. Changing the mode must be done by switching first to initialize mode, and then to the other mode.\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   155   * Definition in Ifx_ASCLIN.FRAMECON.B.MODE
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   156   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   157  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   158  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   159      IfxAsclin_FrameMode_initialise = 0,  /**< \brief initialise mode */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   160      IfxAsclin_FrameMode_asc        = 1,  /**< \brief asc mode */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   161      IfxAsclin_FrameMode_spi        = 2,  /**< \brief spi mode */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   162      IfxAsclin_FrameMode_lin        = 3   /**< \brief lin mode */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   163  } IfxAsclin_FrameMode;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   164  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   165  /** \brief Defines if LIN frame shall consist of a header and response or of a header only.\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   166   * Definition in Ifx_ASCLIN.DATCON.B.HO
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   167   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   168  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   169  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   170      IfxAsclin_HeaderResponseSelect_headerAndResponse = 0,  /**< \brief header and response expected */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   171      IfxAsclin_HeaderResponseSelect_headerOnly        = 1   /**< \brief header only expected */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   172  } IfxAsclin_HeaderResponseSelect;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   173  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   174  /** \brief Defines the duration of the IDLE delay in bit times.\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   175   * SPI mode: this is the idle time between the frames.\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   176   * ASC and LIN mode: this is the pause inserted between transmission of bytes.\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   177   * Definition in Ifx_ASCLIN.FRAMECON.B.IDLE
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   178   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   179  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   180  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   181      IfxAsclin_IdleDelay_0,     /**< \brief idle delay in 0 bit times  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   182      IfxAsclin_IdleDelay_1,     /**< \brief idle delay in 1 bit times  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   183      IfxAsclin_IdleDelay_2,     /**< \brief idle delay in 2 bit times  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   184      IfxAsclin_IdleDelay_3,     /**< \brief idle delay in 3 bit times  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   185      IfxAsclin_IdleDelay_4,     /**< \brief idle delay in 4 bit times  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   186      IfxAsclin_IdleDelay_5,     /**< \brief idle delay in 5 bit times  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   187      IfxAsclin_IdleDelay_6,     /**< \brief idle delay in 6 bit times  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   188      IfxAsclin_IdleDelay_7      /**< \brief idle delay in 7 bit times  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   189  } IfxAsclin_IdleDelay;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   190  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   191  /** \brief Defines the leading delay in bit times in SPI mode. ASC mode: not applicable.\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   192   * LIN mode: delay between the end of the break and the start of the sync character.\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   193   * Definition in Ifx_ASCLIN.FRAMECON.B.LEAD
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   194   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   195  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   196  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   197      IfxAsclin_LeadDelay_0,     /**< \brief lead delay in 0 bit times  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   198      IfxAsclin_LeadDelay_1,     /**< \brief lead delay in 1 bit times  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   199      IfxAsclin_LeadDelay_2,     /**< \brief lead delay in 2 bit times  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   200      IfxAsclin_LeadDelay_3,     /**< \brief lead delay in 3 bit times  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   201      IfxAsclin_LeadDelay_4,     /**< \brief lead delay in 4 bit times  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   202      IfxAsclin_LeadDelay_5,     /**< \brief lead delay in 5 bit times  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   203      IfxAsclin_LeadDelay_6,     /**< \brief lead delay in 6 bit times  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   204      IfxAsclin_LeadDelay_7      /**< \brief lead delay in 7 bit times  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   205  } IfxAsclin_LeadDelay;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   206  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   207  /** \brief Configures if the module in LIN mode operates as master or slave\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   208   * Definition in Ifx_ASCLIN.LIN.CON.B.MS
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   209   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   210  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   211  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   212      IfxAsclin_LinMode_slave  = 0, /**< \brief operates in slave mode */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   213      IfxAsclin_LinMode_master = 1  /**< \brief operates in master mode */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   214  } IfxAsclin_LinMode;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   215  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   216  /** \brief Defines the timeout threshold of RESPOSE bit is for LIN response timeout or LIN frame timeout.\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   217   * Definition in Ifx_ASCLIN.DATCON.B.RM
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   218   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   219  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   220  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   221      IfxAsclin_LinResponseTimeoutMode_frameTimeout    = 0, /**< \brief timeout threshold is for frame */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   222      IfxAsclin_LinResponseTimeoutMode_responseTimeout = 1  /**< \brief timeout threshold is for reponse */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   223  } IfxAsclin_LinResponseTimeoutMode;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   224  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   225  /** \brief Defines the bit length in ticks in the range of 1 to 16. The lengths of 1 to 3 are not allowed\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   226   * Definition in Ifx_ASCLIN.BITCON.B.OVERSAMPLING
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   227   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   228  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   229  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   230      IfxAsclin_OversamplingFactor_4  = 3,   /**< \brief oversampling factor 4 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   231      IfxAsclin_OversamplingFactor_5  = 4,   /**< \brief oversampling factor 5 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   232      IfxAsclin_OversamplingFactor_6  = 5,   /**< \brief oversampling factor 6 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   233      IfxAsclin_OversamplingFactor_7  = 6,   /**< \brief oversampling factor 7 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   234      IfxAsclin_OversamplingFactor_8  = 7,   /**< \brief oversampling factor 8 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   235      IfxAsclin_OversamplingFactor_9  = 8,   /**< \brief oversampling factor 9 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   236      IfxAsclin_OversamplingFactor_10 = 9,   /**< \brief oversampling factor 10 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   237      IfxAsclin_OversamplingFactor_11 = 10,  /**< \brief oversampling factor 11 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   238      IfxAsclin_OversamplingFactor_12 = 11,  /**< \brief oversampling factor 12 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   239      IfxAsclin_OversamplingFactor_13 = 12,  /**< \brief oversampling factor 13 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   240      IfxAsclin_OversamplingFactor_14 = 13,  /**< \brief oversampling factor 14 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   241      IfxAsclin_OversamplingFactor_15 = 14,  /**< \brief oversampling factor 15 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   242      IfxAsclin_OversamplingFactor_16 = 15   /**< \brief oversampling factor 16 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   243  } IfxAsclin_OversamplingFactor;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   244  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   245  /** \brief Type of parity bit attached to data bits\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   246   * Definition in Ifx_ASCLIN.FRAMECON.B.ODD
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   247   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   248  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   249  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   250      IfxAsclin_ParityType_even = 0,  /**< \brief even parity */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   251      IfxAsclin_ParityType_odd  = 1   /**< \brief odd parity */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   252  } IfxAsclin_ParityType;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   253  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   254  /** \brief Receive buffer mode\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   255   * Definition in Ifx_ASCLIN.RXFIFOCON.B.BUF
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   256   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   257  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   258  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   259      IfxAsclin_ReceiveBufferMode_rxFifo   = 0, /**< \brief RxFIFO mode */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   260      IfxAsclin_ReceiveBufferMode_rxBuffer = 1  /**< \brief single stage Rx buffer */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   261  } IfxAsclin_ReceiveBufferMode;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   262  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   263  /** \brief Polarity of the RTS and CTS signals\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   264   * Definition in Ifx_ASCLIN.IOCR.B.RCPOL
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   265   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   266  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   267  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   268      IfxAsclin_RtsCtsPolarity_activeHigh = 0,  /**< \brief ready/clear are active-high */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   269      IfxAsclin_RtsCtsPolarity_activeLow  = 1   /**< \brief ready/clear are active-low */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   270  } IfxAsclin_RtsCtsPolarity;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   271  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   272  /** \brief Defines the filling level that triggers a drain (RX) interrupt or DMA access\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   273   * Definition in Ifx_ASCLIN.RXFIFOCON.B.INTLEVEL
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   274   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   275  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   276  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   277      IfxAsclin_RxFifoInterruptLevel_1,     /**< \brief RX FIFO level 1  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   278      IfxAsclin_RxFifoInterruptLevel_2,     /**< \brief RX FIFO level 2  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   279      IfxAsclin_RxFifoInterruptLevel_3,     /**< \brief RX FIFO level 3  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   280      IfxAsclin_RxFifoInterruptLevel_4,     /**< \brief RX FIFO level 4  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   281      IfxAsclin_RxFifoInterruptLevel_5,     /**< \brief RX FIFO level 5  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   282      IfxAsclin_RxFifoInterruptLevel_6,     /**< \brief RX FIFO level 6  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   283      IfxAsclin_RxFifoInterruptLevel_7,     /**< \brief RX FIFO level 7  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   284      IfxAsclin_RxFifoInterruptLevel_8,     /**< \brief RX FIFO level 8  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   285      IfxAsclin_RxFifoInterruptLevel_9,     /**< \brief RX FIFO level 9  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   286      IfxAsclin_RxFifoInterruptLevel_10,    /**< \brief RX FIFO level 10  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   287      IfxAsclin_RxFifoInterruptLevel_11,    /**< \brief RX FIFO level 11  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   288      IfxAsclin_RxFifoInterruptLevel_12,    /**< \brief RX FIFO level 12  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   289      IfxAsclin_RxFifoInterruptLevel_13,    /**< \brief RX FIFO level 13  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   290      IfxAsclin_RxFifoInterruptLevel_14,    /**< \brief RX FIFO level 14  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   291      IfxAsclin_RxFifoInterruptLevel_15,    /**< \brief RX FIFO level 15  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   292      IfxAsclin_RxFifoInterruptLevel_16     /**< \brief RX FIFO level 16  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   293  } IfxAsclin_RxFifoInterruptLevel;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   294  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   295  /** \brief Defines the number of bytes read from the Rx FIFO with one FPI bus read\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   296   * Definition in Ifx_ASCLIN.RXFIFOCON.B.OUTW
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   297   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   298  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   299  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   300      IfxAsclin_RxFifoOutletWidth_0,     /**< \brief number of bytes 0  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   301      IfxAsclin_RxFifoOutletWidth_1,     /**< \brief number of bytes 1  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   302      IfxAsclin_RxFifoOutletWidth_2,     /**< \brief number of bytes 2  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   303      IfxAsclin_RxFifoOutletWidth_3      /**< \brief number of bytes 3  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   304  } IfxAsclin_RxFifoOutletWidth;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   305  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   306  /** \brief Alternate input selection for Rx signal.\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   307   * Definition in Ifx_ASCLIN.IOCR.B.ALTI
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   308   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   309  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   310  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   311      IfxAsclin_RxInputSelect_0,     /**< \brief alternate input selection 0  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   312      IfxAsclin_RxInputSelect_1,     /**< \brief alternate input selection 1  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   313      IfxAsclin_RxInputSelect_2,     /**< \brief alternate input selection 2  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   314      IfxAsclin_RxInputSelect_3,     /**< \brief alternate input selection 3  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   315      IfxAsclin_RxInputSelect_4,     /**< \brief alternate input selection 4  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   316      IfxAsclin_RxInputSelect_5,     /**< \brief alternate input selection 5  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   317      IfxAsclin_RxInputSelect_6,     /**< \brief alternate input selection 6  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   318      IfxAsclin_RxInputSelect_7      /**< \brief alternate input selection 7  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   319  } IfxAsclin_RxInputSelect;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   320  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   321  /** \brief Sample point position\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   322   * Definition in Ifx_ASCLIN.BITCON.B.SAMPLEPOINT
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   323   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   324  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   325  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   326      IfxAsclin_SamplePointPosition_1  = 1,   /**< \brief sample point position at 1 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   327      IfxAsclin_SamplePointPosition_2  = 2,   /**< \brief sample point position at 2 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   328      IfxAsclin_SamplePointPosition_3  = 3,   /**< \brief sample point position at 3 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   329      IfxAsclin_SamplePointPosition_4  = 4,   /**< \brief sample point position at 4 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   330      IfxAsclin_SamplePointPosition_5  = 5,   /**< \brief sample point position at 5 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   331      IfxAsclin_SamplePointPosition_6  = 6,   /**< \brief sample point position at 6 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   332      IfxAsclin_SamplePointPosition_7  = 7,   /**< \brief sample point position at 7 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   333      IfxAsclin_SamplePointPosition_8  = 8,   /**< \brief sample point position at 8 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   334      IfxAsclin_SamplePointPosition_9  = 9,   /**< \brief sample point position at 9 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   335      IfxAsclin_SamplePointPosition_10 = 10,  /**< \brief sample point position at 10 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   336      IfxAsclin_SamplePointPosition_11 = 11,  /**< \brief sample point position at 11 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   337      IfxAsclin_SamplePointPosition_12 = 12,  /**< \brief sample point position at 12 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   338      IfxAsclin_SamplePointPosition_13 = 13,  /**< \brief sample point position at 13 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   339      IfxAsclin_SamplePointPosition_14 = 14,  /**< \brief sample point position at 14 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   340      IfxAsclin_SamplePointPosition_15 = 15   /**< \brief sample point position at 15 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   341  } IfxAsclin_SamplePointPosition;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   342  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   343  /** \brief Number of samples per bit, sample mode/medianfilter\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   344   * Definition in Ifx_ASCLIN.BITCON.B.SM
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   345   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   346  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   347  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   348      IfxAsclin_SamplesPerBit_one   = 0, /**< \brief one sample per bit */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   349      IfxAsclin_SamplesPerBit_three = 1  /**< \brief three samples per bit */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   350  } IfxAsclin_SamplesPerBit;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   351  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   352  /** \brief SPI mode: defines the shift direction of the shift register.\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   353   * ASC and LIN mode: should be set to 0.\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   354   * Definition in Ifx_ASCLIN.FRAMECON.B.MSB
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   355   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   356  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   357  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   358      IfxAsclin_ShiftDirection_lsbFirst = 0,  /**< \brief LSB first */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   359      IfxAsclin_ShiftDirection_msbFirst = 1   /**< \brief MSB first */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   360  } IfxAsclin_ShiftDirection;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   361  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   362  /** \brief Defines the idle level of the SLSO signal, which is the level.\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   363   * Outside the data transmission, leading and trailing time intervals.\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   364   * Definition in Ifx_ASCLIN.IOCR.B.SPOL
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   365   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   366  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   367  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   368      IfxAsclin_SlavePolarity_idleLow  = 0, /**< \brief idle low */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   369      IfxAsclin_SlavePolarity_idlehigh = 1  /**< \brief idle high */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   370  } IfxAsclin_SlavePolarity;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   371  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   372  /** \brief Enable/disable the sensitivity of the module to sleep signal\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   373   * Definition in Ifx_ASCLIN.CLC.B.EDIS
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   374   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   375  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   376  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   377      IfxAsclin_SleepMode_enable  = 0, /**< \brief enables sleep mode */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   378      IfxAsclin_SleepMode_disable = 1  /**< \brief disables sleep mode */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   379  } IfxAsclin_SleepMode;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   380  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   381  /** \brief Error status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   382   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   383  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   384  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   385      IfxAsclin_Status_configurationError = 0,  /**< \brief Configuration error */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   386      IfxAsclin_Status_noError            = 1   /**< \brief No error */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   387  } IfxAsclin_Status;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   388  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   389  /** \brief ASC and LIN mode: number of stop bits (0 is not allowed), SPI mode: trailing delay.\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   390   * Definition in Ifx_ASCLIN.FRAMECON.B.STOP
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   391   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   392  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   393  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   394      IfxAsclin_StopBit_0,     /**< \brief number of stop bits 0  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   395      IfxAsclin_StopBit_1,     /**< \brief number of stop bits 1  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   396      IfxAsclin_StopBit_2,     /**< \brief number of stop bits 2  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   397      IfxAsclin_StopBit_3,     /**< \brief number of stop bits 3  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   398      IfxAsclin_StopBit_4,     /**< \brief number of stop bits 4  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   399      IfxAsclin_StopBit_5,     /**< \brief number of stop bits 5  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   400      IfxAsclin_StopBit_6,     /**< \brief number of stop bits 6  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   401      IfxAsclin_StopBit_7      /**< \brief number of stop bits 7  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   402  } IfxAsclin_StopBit;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   403  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   404  /** \brief OCDS Suspend Control (OCDS.SUS)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   405   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   406  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   407  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   408      IfxAsclin_SuspendMode_none = 0,  /**< \brief No suspend */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   409      IfxAsclin_SuspendMode_hard = 1,  /**< \brief Hard Suspend */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   410      IfxAsclin_SuspendMode_soft = 2   /**< \brief Soft Suspend */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   411  } IfxAsclin_SuspendMode;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   412  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   413  /** \brief Defines the number of bytes written to the Tx FIFO with one FPI bus write\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   414   * Definition in Ifx_ASCLIN.TXFIFOCON.B.INW
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   415   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   416  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   417  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   418      IfxAsclin_TxFifoInletWidth_0,     /**< \brief number of bytes 0  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   419      IfxAsclin_TxFifoInletWidth_1,     /**< \brief number of bytes 1  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   420      IfxAsclin_TxFifoInletWidth_2,     /**< \brief number of bytes 2  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   421      IfxAsclin_TxFifoInletWidth_3      /**< \brief number of bytes 3  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   422  } IfxAsclin_TxFifoInletWidth;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   423  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   424  /** \brief Defines the filling level that triggers a refill (TX) interrupt or DMA access\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   425   * Definition in Ifx_ASCLIN.TXFIFOCON.B.INTLEVEL
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   426   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   427  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   428  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   429      IfxAsclin_TxFifoInterruptLevel_0,     /**< \brief TX FIFO level 0  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   430      IfxAsclin_TxFifoInterruptLevel_1,     /**< \brief TX FIFO level 1  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   431      IfxAsclin_TxFifoInterruptLevel_2,     /**< \brief TX FIFO level 2  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   432      IfxAsclin_TxFifoInterruptLevel_3,     /**< \brief TX FIFO level 3  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   433      IfxAsclin_TxFifoInterruptLevel_4,     /**< \brief TX FIFO level 4  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   434      IfxAsclin_TxFifoInterruptLevel_5,     /**< \brief TX FIFO level 5  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   435      IfxAsclin_TxFifoInterruptLevel_6,     /**< \brief TX FIFO level 6  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   436      IfxAsclin_TxFifoInterruptLevel_7,     /**< \brief TX FIFO level 7  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   437      IfxAsclin_TxFifoInterruptLevel_8,     /**< \brief TX FIFO level 8  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   438      IfxAsclin_TxFifoInterruptLevel_9,     /**< \brief TX FIFO level 9  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   439      IfxAsclin_TxFifoInterruptLevel_10,    /**< \brief TX FIFO level 10  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   440      IfxAsclin_TxFifoInterruptLevel_11,    /**< \brief TX FIFO level 11  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   441      IfxAsclin_TxFifoInterruptLevel_12,    /**< \brief TX FIFO level 12  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   442      IfxAsclin_TxFifoInterruptLevel_13,    /**< \brief TX FIFO level 13  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   443      IfxAsclin_TxFifoInterruptLevel_14,    /**< \brief TX FIFO level 14  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   444      IfxAsclin_TxFifoInterruptLevel_15     /**< \brief TX FIFO level 15  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   445  } IfxAsclin_TxFifoInterruptLevel;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   446  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   447  /** \} */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   448  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   449  /** \addtogroup IfxLld_Asclin_Std_Operative
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   450   * \{ */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   451  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   452  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   453  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   454  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   455  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   456  /** \brief clears all the flags
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   457   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   458   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   459   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   460  IFX_INLINE void IfxAsclin_clearAllFlags(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   461  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   462  /** \brief Clears the break detected flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   463   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   464   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   465   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   466  IFX_INLINE void IfxAsclin_clearBreakDetectedFlag(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   467  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   468  /** \brief Clears the collision detection error flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   469   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   470   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   471   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   472  IFX_INLINE void IfxAsclin_clearCollisionDetectionErrorFlag(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   473  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   474  /** \brief Clears the falling edge detected flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   475   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   476   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   477   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   478  IFX_INLINE void IfxAsclin_clearFallingEdgeDetectedFlag(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   479  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   480  /** \brief Clears the frame error flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   481   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   482   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   483   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   484  IFX_INLINE void IfxAsclin_clearFrameErrorFlag(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   485  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   486  /** \brief Clears the header timeout flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   487   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   488   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   489   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   490  IFX_INLINE void IfxAsclin_clearHeaderTimeoutFlag(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   491  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   492  /** \brief Clears the kernel reset status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   493   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   494   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   495   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   496  IFX_INLINE void IfxAsclin_clearKernelResetStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   497  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   498  /** \brief Clears the auto baudrate detection error flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   499   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   500   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   501   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   502  IFX_INLINE void IfxAsclin_clearLinAutoBaudDetectionErrorFlag(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   503  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   504  /** \brief Clears the LIN checksum error flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   505   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   506   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   507   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   508  IFX_INLINE void IfxAsclin_clearLinChecksumErrorFlag(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   509  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   510  /** \brief Clears the LIN parity error flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   511   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   512   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   513   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   514  IFX_INLINE void IfxAsclin_clearLinParityErrorFlag(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   515  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   516  /** \brief Clears the parity error flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   517   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   518   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   519   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   520  IFX_INLINE void IfxAsclin_clearParityErrorFlag(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   521  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   522  /** \brief Clears the raising edge detected flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   523   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   524   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   525   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   526  IFX_INLINE void IfxAsclin_clearRaisingEdgeDetectedFlag(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   527  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   528  /** \brief Clears the response timeout flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   529   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   530   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   531   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   532  IFX_INLINE void IfxAsclin_clearResponseTimeoutFlag(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   533  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   534  /** \brief Clears the Rx FIFO level flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   535   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   536   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   537   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   538  IFX_INLINE void IfxAsclin_clearRxFifoFillLevelFlag(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   539  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   540  /** \brief Clears the Rx FIFO overflow flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   541   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   542   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   543   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   544  IFX_INLINE void IfxAsclin_clearRxFifoOverflowFlag(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   545  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   546  /** \brief Clears the Rx FIFO underflow flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   547   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   548   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   549   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   550  IFX_INLINE void IfxAsclin_clearRxFifoUnderflowFlag(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   551  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   552  /** \brief Clears the receive header end flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   553   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   554   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   555   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   556  IFX_INLINE void IfxAsclin_clearRxHeaderEndFlag(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   557  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   558  /** \brief Clears the receive response end flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   559   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   560   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   561   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   562  IFX_INLINE void IfxAsclin_clearRxResponseEndFlag(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   563  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   564  /** \brief Clears the transmission pending flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   565   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   566   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   567   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   568  IFX_INLINE void IfxAsclin_clearTransmissionCompletedFlag(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   569  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   570  /** \brief Clears the Tx FIFO level flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   571   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   572   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   573   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   574  IFX_INLINE void IfxAsclin_clearTxFifoFillLevelFlag(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   575  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   576  /** \brief Clears the Tx FIFO overflow flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   577   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   578   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   579   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   580  IFX_INLINE void IfxAsclin_clearTxFifoOverflowFlag(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   581  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   582  /** \brief Clears the transmit header end flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   583   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   584   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   585   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   586  IFX_INLINE void IfxAsclin_clearTxHeaderEndFlag(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   587  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   588  /** \brief Clears the transmit response end flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   589   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   590   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   591   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   592  IFX_INLINE void IfxAsclin_clearTxResponseEndFlag(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   593  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   594  /** \brief Flushes (empties) the Rx FIFO
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   595   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   596   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   597   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   598  IFX_INLINE void IfxAsclin_flushRxFifo(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   599  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   600  /** \brief Flushes (empties) the Tx FIFO
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   601   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   602   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   603   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   604  IFX_INLINE void IfxAsclin_flushTxFifo(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   605  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   606  /** \brief Sets the baudrate detection's lower limit
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   607   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   608   * \param limit value of the lower limit
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   609   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   610   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   611  IFX_INLINE void IfxAsclin_setBrdLowerlimt(Ifx_ASCLIN *asclin, uint8 limit);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   612  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   613  /** \brief Sets the baudrate detection's upper limit
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   614   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   615   * \param limit value of the upper limit
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   616   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   617   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   618  IFX_INLINE void IfxAsclin_setBrdUpperlimt(Ifx_ASCLIN *asclin, uint8 limit);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   619  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   620  /** \brief Sets the checksum injection
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   621   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   622   * \param csi checksum injection selection (not written / written)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   623   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   624   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   625  IFX_INLINE void IfxAsclin_setChecksumInjection(Ifx_ASCLIN *asclin, IfxAsclin_ChecksumInjection csi);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   626  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   627  /** \brief Sets the checksum mode
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   628   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   629   * \param mode checksum mode selection (classic / enhanced)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   630   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   631   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   632  IFX_INLINE void IfxAsclin_setChecksumMode(Ifx_ASCLIN *asclin, IfxAsclin_Checksum mode);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   633  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   634  /** \brief Sets the data length (number of bits per transfer)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   635   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   636   * \param length data length selection
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   637   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   638   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   639  IFX_INLINE void IfxAsclin_setDataLength(Ifx_ASCLIN *asclin, IfxAsclin_DataLength length);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   640  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   641  /** \brief Sets the denominator of the fractional divider
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   642   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   643   * \param denominator value of the denominator
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   644   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   645   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   646  IFX_INLINE void IfxAsclin_setDenominator(Ifx_ASCLIN *asclin, uint16 denominator);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   647  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   648  /** \brief Sets the disable module request
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   649   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   650   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   651   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   652  IFX_INLINE void IfxAsclin_setDisableModuleRequest(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   653  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   654  /** \brief Sets the enable module request
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   655   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   656   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   657   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   658  IFX_INLINE void IfxAsclin_setEnableModuleRequest(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   659  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   660  /** \brief Sets digital glitch filter depth
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   661   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   662   * \param depth digital glitch filter depth selection (1 to 63)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   663   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   664   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   665  IFX_INLINE void IfxAsclin_setFilterDepth(Ifx_ASCLIN *asclin, uint8 depth);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   666  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   667  /** \brief Sets the header response selection
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   668   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   669   * \param type type of selection (header and response or header only)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   670   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   671   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   672  IFX_INLINE void IfxAsclin_setHeaderResponseSelect(Ifx_ASCLIN *asclin, IfxAsclin_HeaderResponseSelect type);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   673  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   674  /** \brief Sets the idle delay
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   675   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   676   * \param delay idle delay selection
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   677   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   678   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   679  IFX_INLINE void IfxAsclin_setIdleDelay(Ifx_ASCLIN *asclin, IfxAsclin_IdleDelay delay);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   680  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   681  /** \brief Sets the kernal reset of the KRST1
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   682   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   683   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   684   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   685  IFX_INLINE void IfxAsclin_setKernelResetOne(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   686  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   687  /** \brief Sets the kernel reset of the KRST0
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   688   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   689   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   690   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   691  IFX_INLINE void IfxAsclin_setKernelResetZero(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   692  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   693  /** \brief Sets the lead delay
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   694   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   695   * \param delay lead delay selection
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   696   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   697   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   698  IFX_INLINE void IfxAsclin_setLeadDelay(Ifx_ASCLIN *asclin, IfxAsclin_LeadDelay delay);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   699  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   700  /** \brief Sets the LIN break length
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   701   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   702   * \param length value of the break length
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   703   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   704   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   705  IFX_INLINE void IfxAsclin_setLinBreakLength(Ifx_ASCLIN *asclin, uint8 length);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   706  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   707  /** \brief Sets the LIN header timeout
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   708   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   709   * \param timeout value of the header timeout
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   710   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   711   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   712  IFX_INLINE void IfxAsclin_setLinHeaderTimeout(Ifx_ASCLIN *asclin, uint8 timeout);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   713  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   714  /** \brief Sets the LIN mode of operation
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   715   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   716   * \param mode mode selection (slave / master)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   717   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   718   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   719  IFX_INLINE void IfxAsclin_setLinMode(Ifx_ASCLIN *asclin, IfxAsclin_LinMode mode);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   720  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   721  /** \brief Sets the LIN response timeout mode
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   722   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   723   * \param mode LIN response timeout mode selection
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   724   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   725   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   726  IFX_INLINE void IfxAsclin_setLinResponseTimeoutMode(Ifx_ASCLIN *asclin, IfxAsclin_LinResponseTimeoutMode mode);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   727  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   728  /** \brief Sets the LIN response timeout threshold
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   729   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   730   * \param threshold value of the tomeout threshold (1 to 256 bit times)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   731   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   732   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   733  IFX_INLINE void IfxAsclin_setLinResponseTimeoutThreshold(Ifx_ASCLIN *asclin, uint16 threshold);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   734  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   735  /** \brief Sets the numerator of the fractional divider
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   736   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   737   * \param numerator value of the numerator
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   738   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   739   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   740  IFX_INLINE void IfxAsclin_setNumerator(Ifx_ASCLIN *asclin, uint16 numerator);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   741  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   742  /** \brief Sets the division ratio of the baudrate post divider
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   743   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   744   * \param ovsFactor value of oversampling factor
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   745   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   746   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   747  IFX_INLINE void IfxAsclin_setOversampling(Ifx_ASCLIN *asclin, IfxAsclin_OversamplingFactor ovsFactor);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   748  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   749  /** \brief Sets the parity type
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   750   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   751   * \param type parity type selction (even / odd)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   752   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   753   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   754  IFX_INLINE void IfxAsclin_setParityType(Ifx_ASCLIN *asclin, IfxAsclin_ParityType type);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   755  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   756  /** \brief Sets the division ratio of the predivider (prescaler)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   757   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   758   * \param prescaler value of prescaler
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   759   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   760   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   761  IFX_INLINE void IfxAsclin_setPrescaler(Ifx_ASCLIN *asclin, uint16 prescaler);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   762  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   763  /** \brief Sets the receive buffer mode
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   764   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   765   * \param mode receive buffer mode selection (Rx FIFO or single stage Rx buffer)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   766   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   767   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   768  IFX_INLINE void IfxAsclin_setRxBufferMode(Ifx_ASCLIN *asclin, IfxAsclin_ReceiveBufferMode mode);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   769  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   770  /** \brief Sets the Tx FIFO interrupt level
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   771   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   772   * \param level interrupt level selection
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   773   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   774   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   775  IFX_INLINE void IfxAsclin_setRxFifoInterruptLevel(Ifx_ASCLIN *asclin, IfxAsclin_RxFifoInterruptLevel level);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   776  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   777  /** \brief Sets the receive FIFO outlet width
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   778   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   779   * \param width number of bytes read to the Rx FIFO with one FPI bus read
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   780   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   781   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   782  IFX_INLINE void IfxAsclin_setRxFifoOutletWidth(Ifx_ASCLIN *asclin, IfxAsclin_RxFifoOutletWidth width);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   783  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   784  /** \brief Sets the sample mode (number of samples per bit / median filter)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   785   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   786   * \param medianFilter value of the median filter
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   787   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   788   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   789  IFX_INLINE void IfxAsclin_setSampleMode(Ifx_ASCLIN *asclin, IfxAsclin_SamplesPerBit medianFilter);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   790  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   791  /** \brief Sets the sampling point position
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   792   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   793   * \param spPosition sample point position selection
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   794   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   795   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   796  IFX_INLINE void IfxAsclin_setSamplePointPosition(Ifx_ASCLIN *asclin, IfxAsclin_SamplePointPosition spPosition);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   797  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   798  /** \brief Sets the shift direction
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   799   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   800   * \param dir shift direction selection (LSB / MSB first)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   801   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   802   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   803  IFX_INLINE void IfxAsclin_setShiftDirection(Ifx_ASCLIN *asclin, IfxAsclin_ShiftDirection dir);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   804  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   805  /** \brief Sets the number of stop bits
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   806   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   807   * \param stopBit number of stop bits selection
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   808   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   809   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   810  IFX_INLINE void IfxAsclin_setStopBit(Ifx_ASCLIN *asclin, IfxAsclin_StopBit stopBit);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   811  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   812  /** \brief Sets the transmit header request flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   813   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   814   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   815   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   816  IFX_INLINE void IfxAsclin_setTransmitHeaderRequestFlag(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   817  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   818  /** \brief Sets the transmit response request flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   819   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   820   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   821   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   822  IFX_INLINE void IfxAsclin_setTransmitResponseRequestFlag(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   823  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   824  /** \brief Sets the transmission wake request flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   825   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   826   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   827   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   828  IFX_INLINE void IfxAsclin_setTransmitWakeRequestFlag(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   829  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   830  /** \brief Sets the transmit FIFO inlet width
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   831   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   832   * \param width number of bytes written to the Tx FIFO with one FPI bus write
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   833   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   834   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   835  IFX_INLINE void IfxAsclin_setTxFifoInletWidth(Ifx_ASCLIN *asclin, IfxAsclin_TxFifoInletWidth width);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   836  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   837  /** \brief Sets the Tx FIFO interrupt level
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   838   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   839   * \param level interrupt level selection
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   840   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   841   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   842  IFX_INLINE void IfxAsclin_setTxFifoInterruptLevel(Ifx_ASCLIN *asclin, IfxAsclin_TxFifoInterruptLevel level);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   843  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   844  /** \} */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   845  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   846  /** \addtogroup IfxLld_Asclin_Std_Utility
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   847   * \{ */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   848  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   849  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   850  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   851  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   852  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   853  /** \brief Returns the break detected flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   854   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   855   * \return break detected flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   856   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   857  IFX_INLINE boolean IfxAsclin_getBreakDetectedFlagStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   858  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   859  /** \brief Returns the clock source
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   860   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   861   * \return clock source
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   862   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   863  IFX_INLINE uint8 IfxAsclin_getClockSource(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   864  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   865  /** \brief Returns the clock status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   866   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   867   * \return clock status (off / on)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   868   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   869  IFX_INLINE boolean IfxAsclin_getClockStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   870  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   871  /** \brief Returns the collision detection error flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   872   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   873   * \return collision detection error flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   874   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   875  IFX_INLINE boolean IfxAsclin_getCollisionDetectionErrorFlagStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   876  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   877  /** \brief Returns  the falling edge detected flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   878   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   879   * \return falling edge detected flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   880   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   881  IFX_INLINE boolean IfxAsclin_getFallingEdgeDetectedFlagStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   882  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   883  /** \brief Returns the frame error flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   884   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   885   * \return frame error flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   886   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   887  IFX_INLINE boolean IfxAsclin_getFrameErrorFlagStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   888  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   889  /** \brief Returns the header timeout flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   890   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   891   * \return header timeout flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   892   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   893  IFX_INLINE boolean IfxAsclin_getHeaderTimeoutFlagStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   894  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   895  /** \brief Returns the kernel reset status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   896   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   897   * \return kernel reset status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   898   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   899  IFX_INLINE boolean IfxAsclin_getKernelResetStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   900  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   901  /** \brief Returns the LIN auto baudrate detection error flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   902   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   903   * \return LIN auto baudrate detection error flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   904   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   905  IFX_INLINE boolean IfxAsclin_getLinAutoBaudDetectionErrorFlagStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   906  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   907  /** \brief Returns the LIN checksum error flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   908   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   909   * \return LIN checksum error flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   910   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   911  IFX_INLINE boolean IfxAsclin_getLinChecksumErrorFlagStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   912  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   913  /** \brief Returns the LIN parity error flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   914   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   915   * \return LIN parity error flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   916   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   917  IFX_INLINE boolean IfxAsclin_getLinParityErrorFlagStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   918  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   919  /** \brief Returns the module status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   920   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   921   * \return module status (enabled / disabled)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   922   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   923  IFX_INLINE boolean IfxAsclin_getModuleStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   924  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   925  /** \brief Returns the parity error flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   926   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   927   * \return parity error flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   928   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   929  IFX_INLINE boolean IfxAsclin_getParityErrorFlagStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   930  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   931  /** \brief Returns the division ratio of the predivider (prescaler)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   932   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   933   * \return value of prescaler
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   934   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   935  IFX_INLINE uint16 IfxAsclin_getPrescaler(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   936  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   937  /** \brief Returns the raising edge detected flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   938   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   939   * \return raising edge detected flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   940   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   941  IFX_INLINE boolean IfxAsclin_getRaisingEdgeDetectedFlagStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   942  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   943  /** \brief Returns the received signal status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   944   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   945   * \return received signal status (0 is low & 1 is high)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   946   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   947  IFX_INLINE boolean IfxAsclin_getReceiveSignalStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   948  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   949  /** \brief Returns the response timeout flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   950   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   951   * \return response timeout flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   952   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   953  IFX_INLINE boolean IfxAsclin_getResponseTimeoutFlagStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   954  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   955  /** \brief Returns the current filling level of Tx FIFO
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   956   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   957   * \return current filling level of Rx FIFO
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   958   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   959  IFX_INLINE uint8 IfxAsclin_getRxFifoFillLevel(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   960  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   961  /** \brief Returns the Rx FIFO level flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   962   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   963   * \return Rx FIFO level flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   964   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   965  IFX_INLINE boolean IfxAsclin_getRxFifoFillLevelFlagStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   966  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   967  /** \brief Returns the receive FIFO inlet width
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   968   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   969   * \return number of bytes read to the Rx FIFO with one FPI bus read
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   970   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   971  IFX_INLINE uint8 IfxAsclin_getRxFifoOutletWidth(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   972  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   973  /** \brief Returns the Rx FIFO overflow flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   974   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   975   * \return Rx FIFO overflow flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   976   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   977  IFX_INLINE boolean IfxAsclin_getRxFifoOverflowFlagStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   978  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   979  /** \brief Returns the Rx FIFO underflow flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   980   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   981   * \return Rx FIFO underflow flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   982   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   983  IFX_INLINE boolean IfxAsclin_getRxFifoUnderflowFlagStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   984  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   985  /** \brief Returns the receive header end flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   986   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   987   * \return receive header end flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   988   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   989  IFX_INLINE boolean IfxAsclin_getRxHeaderEndFlagStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   990  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   991  /** \brief Returns the receive response end flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   992   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   993   * \return receive response end flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   994   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   995  IFX_INLINE boolean IfxAsclin_getRxResponseEndFlagStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   996  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   997  /** \brief Returns the transmission pending flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   998   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   999   * \return transmission pending flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1000   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1001  IFX_INLINE boolean IfxAsclin_getTransmissionCompletedFlagStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1002  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1003  /** \brief Returns the transmit signal status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1004   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1005   * \return transmit signal status (0 is low & 1 is high)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1006   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1007  IFX_INLINE boolean IfxAsclin_getTransmitSignalStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1008  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1009  /** \brief Returns the current filling level of Tx FIFO
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1010   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1011   * \return current filling level of Tx FIFO
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1012   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1013  IFX_INLINE uint8 IfxAsclin_getTxFifoFillLevel(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1014  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1015  /** \brief Returns the Tx FIFO level flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1016   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1017   * \return Tx FIFO level flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1018   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1019  IFX_INLINE boolean IfxAsclin_getTxFifoFillLevelFlagStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1020  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1021  /** \brief Returns the transmit FIFO inlet width
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1022   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1023   * \return number of bytes written to the Tx FIFO with one FPI bus write
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1024   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1025  IFX_INLINE uint8 IfxAsclin_getTxFifoInletWidth(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1026  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1027  /** \brief Returns the Tx FIFO overflow flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1028   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1029   * \return Tx FIFO overflow flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1030   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1031  IFX_INLINE boolean IfxAsclin_getTxFifoOverflowFlagStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1032  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1033  /** \brief Returns the transmit header end flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1034   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1035   * \return transmit header end flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1036   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1037  IFX_INLINE boolean IfxAsclin_getTxHeaderEndFlagStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1038  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1039  /** \brief Returns the transmit response end flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1040   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1041   * \return transmit response end flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1042   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1043  IFX_INLINE boolean IfxAsclin_getTxResponseEndFlagStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1044  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1045  /** \brief Sets the sensitivity of the module to sleep signal
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1046   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1047   * \param mode mode selection (enable / disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1048   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1049   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1050  IFX_INLINE void IfxAsclin_setSleepMode(Ifx_ASCLIN *asclin, IfxAsclin_SleepMode mode);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1051  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1052  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1053  /*-------------------------Global Function Prototypes-------------------------*/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1054  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1055  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1056  /** \brief API to get the address for ASCLIN HW module register memory map
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1057   * \param asclin Resource index of the ASCLIN
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1058   * \return ASCLIN module register address
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1059   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1060  IFX_EXTERN Ifx_ASCLIN *IfxAsclin_getAddress(IfxAsclin_Index asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1061  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1062  /** \brief Returns the ASCLIN module FA frequency in Hz
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1063   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1064   * \return Returns the ASCLIN module FA frequency in Hz
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1065   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1066  IFX_EXTERN float32 IfxAsclin_getFaFrequency(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1067  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1068  /** \brief API to get the resource index of the ASCLIN specified.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1069   * \return asclin resource index
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1070   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1071  IFX_EXTERN IfxAsclin_Index IfxAsclin_getIndex(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1072  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1073  /** \brief Returns the OVS frequency
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1074   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1075   * \return Returns the ASCLIN module OVS frequency in Hz
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1076   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1077  IFX_EXTERN float32 IfxAsclin_getOvsFrequency(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1078  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1079  /** \brief Returns the PD frequency
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1080   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1081   * \return Returns the ASCLIN module PD frequency in Hz
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1082   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1083  IFX_EXTERN float32 IfxAsclin_getPdFrequency(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1084  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1085  /** \brief Returns the SHIFT frequency
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1086   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1087   * \return Returns the ASCLIN module SHIFT frequency in Hz
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1088   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1089  IFX_EXTERN float32 IfxAsclin_getShiftFrequency(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1090  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1091  /** \brief resets Asclin kernel
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1092   * \param asclin pointer to ASCLIN resgisters
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1093   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1094   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1095  IFX_EXTERN void IfxAsclin_resetModule(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1096  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1097  /** \} */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1098  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1099  /** \addtogroup IfxLld_Asclin_Std_Configuration
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1100   * \{ */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1101  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1102  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1103  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1104  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1105  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1106  /** \brief disables all flags
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1107   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1108   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1109   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1110  IFX_INLINE void IfxAsclin_disableAllFlags(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1111  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1112  /** \brief Enables/disables the auto baudrate detection
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1113   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1114   * \param enable choice (enable / disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1115   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1116   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1117  IFX_INLINE void IfxAsclin_enableAutoBaudrateDetection(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1118  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1119  /** \brief Enables/disables break detected flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1120   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1121   * \param enable choice (enable / disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1122   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1123   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1124  IFX_INLINE void IfxAsclin_enableBreakDetectedFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1125  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1126  /** \brief Enables/disables the collision detection
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1127   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1128   * \param enable choice (enable/disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1129   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1130   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1131  IFX_INLINE void IfxAsclin_enableCollisionDetection(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1132  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1133  /** \brief Enables/disables LIN collision detection error flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1134   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1135   * \param enable choice (enable / disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1136   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1137   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1138  IFX_INLINE void IfxAsclin_enableCollisionDetectionErrorFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1139  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1140  /** \brief Enables/disables CTS
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1141   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1142   * \param enable choice (enable/disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1143   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1144   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1145  IFX_INLINE void IfxAsclin_enableCts(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1146  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1147  /** \brief Enables/disables falling edge detected flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1148   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1149   * \param enable choice (enable / disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1150   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1151   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1152  IFX_INLINE void IfxAsclin_enableFallingEdgeDetectedFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1153  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1154  /** \brief Enables/disables frame error flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1155   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1156   * \param enable choice (enable / disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1157   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1158   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1159  IFX_INLINE void IfxAsclin_enableFrameErrorFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1160  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1161  /** \brief Enables/disables the hardware checksum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1162   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1163   * \param enable choice (enable / disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1164   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1165   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1166  IFX_INLINE void IfxAsclin_enableHardwareChecksum(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1167  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1168  /** \brief Enables/disables header timeout flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1169   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1170   * \param enable choice (enable / disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1171   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1172   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1173  IFX_INLINE void IfxAsclin_enableHeaderTimeoutFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1174  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1175  /** \brief Enables/disables LIN auto baudrate detection error flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1176   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1177   * \param enable choice (enable / disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1178   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1179   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1180  IFX_INLINE void IfxAsclin_enableLinAutoBaudDetectionErrorFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1181  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1182  /** \brief Enables/disables LIN checksum error flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1183   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1184   * \param enable choice (enable / disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1185   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1186   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1187  IFX_INLINE void IfxAsclin_enableLinChecksumErrorFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1188  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1189  /** \brief Enables/disables LIN parity error flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1190   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1191   * \param enable choice (enable / disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1192   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1193   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1194  IFX_INLINE void IfxAsclin_enableLinParityErrorFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1195  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1196  /** \brief Enables/disables the loop back mode
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1197   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1198   * \param enable choice (enable/disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1199   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1200   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1201  IFX_INLINE void IfxAsclin_enableLoopBackMode(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1202  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1203  /** \brief Enables/disables the parity bit attachment to tha data bits
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1204   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1205   * \param enable choice (enable/disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1206   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1207   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1208  IFX_INLINE void IfxAsclin_enableParity(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1209  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1210  /** \brief Enables/disables parity error flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1211   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1212   * \param enable choice (enable / disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1213   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1214   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1215  IFX_INLINE void IfxAsclin_enableParityErrorFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1216  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1217  /** \brief Enables/disables raising edge detected flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1218   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1219   * \param enable choice (enable / disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1220   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1221   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1222  IFX_INLINE void IfxAsclin_enableRaisingEdgeDetectedFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1223  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1224  /** \brief Enables/disables response timeout flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1225   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1226   * \param enable choice (enable / disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1227   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1228   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1229  IFX_INLINE void IfxAsclin_enableResponseTimeoutFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1230  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1231  /** \brief Enables/disables Rx FIFO level flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1232   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1233   * \param enable choice (enable / disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1234   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1235   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1236  IFX_INLINE void IfxAsclin_enableRxFifoFillLevelFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1237  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1238  /** \brief Enables/disables the receive FIFO outlet to allow filling of Rx FIFO through shift register
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1239   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1240   * \param enable choice (enable/disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1241   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1242   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1243  IFX_INLINE void IfxAsclin_enableRxFifoInlet(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1244  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1245  /** \brief Enables/disables Rx FIFO overflow flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1246   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1247   * \param enable choice (enable / disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1248   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1249   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1250  IFX_INLINE void IfxAsclin_enableRxFifoOverflowFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1251  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1252  /** \brief Enables/disables Rx FIFO underflow flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1253   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1254   * \param enable choice (enable / disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1255   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1256   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1257  IFX_INLINE void IfxAsclin_enableRxFifoUnderflowFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1258  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1259  /** \brief Enables/disables receive header end flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1260   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1261   * \param enable choice (enable / disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1262   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1263   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1264  IFX_INLINE void IfxAsclin_enableRxHeaderEndFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1265  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1266  /** \brief Enables/disables receive response end flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1267   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1268   * \param enable choice (enable / disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1269   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1270   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1271  IFX_INLINE void IfxAsclin_enableRxResponseEndFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1272  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1273  /** \brief Enables/disables transmission completed flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1274   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1275   * \param enable choice (enable / disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1276   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1277   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1278  IFX_INLINE void IfxAsclin_enableTransmissionCompletedFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1279  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1280  /** \brief Enables/disables Tx FIFO level flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1281   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1282   * \param enable choice (enable / disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1283   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1284   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1285  IFX_INLINE void IfxAsclin_enableTxFifoFillLevelFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1286  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1287  /** \brief Enables/disables the transmit FIFO outlet to allow transmission
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1288   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1289   * \param enable choice (enable/disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1290   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1291   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1292  IFX_INLINE void IfxAsclin_enableTxFifoOutlet(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1293  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1294  /** \brief Enables/disables Tx FIFO overflow flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1295   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1296   * \param enable choice (enable / disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1297   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1298   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1299  IFX_INLINE void IfxAsclin_enableTxFifoOverflowFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1300  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1301  /** \brief Enables/disables transmit header end flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1302   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1303   * \param enable choice (enable / disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1304   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1305   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1306  IFX_INLINE void IfxAsclin_enableTxHeaderEndFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1307  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1308  /** \brief Enables/disables transmit response end flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1309   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1310   * \param enable choice (enable / disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1311   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1312   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1313  IFX_INLINE void IfxAsclin_enableTxResponseEndFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1314  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1315  /** \brief Returns the module's suspend state.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1316   * TRUE :if module is suspended.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1317   * FALSE:if module is not yet suspended.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1318   * \param asclin Pointer to ASCLIN module registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1319   * \return Suspend status (TRUE / FALSE)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1320   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1321  IFX_INLINE boolean IfxAsclin_isModuleSuspended(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1322  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1323  /** \brief Selects the clock polarity
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1324   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1325   * \param cpol CPOL selection
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1326   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1327   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1328  IFX_INLINE void IfxAsclin_setClockPolarity(Ifx_ASCLIN *asclin, IfxAsclin_ClockPolarity cpol);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1329  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1330  /** \brief Selects the CTS input pin
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1331   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1332   * \param ctsi CTS input pin selection
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1333   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1334   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1335  IFX_INLINE void IfxAsclin_setCtsInput(Ifx_ASCLIN *asclin, IfxAsclin_CtsInputSelect ctsi);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1336  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1337  /** \brief Selects the module's mode of operation
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1338   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1339   * \param mode mode selction
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1340   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1341   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1342  IFX_INLINE void IfxAsclin_setFrameMode(Ifx_ASCLIN *asclin, IfxAsclin_FrameMode mode);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1343  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1344  /** \brief Selects the RTS/CTS polarity
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1345   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1346   * \param rcpol RCPOL selection
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1347   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1348   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1349  IFX_INLINE void IfxAsclin_setRtsCtsPolarity(Ifx_ASCLIN *asclin, IfxAsclin_RtsCtsPolarity rcpol);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1350  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1351  /** \brief Selects the alternate input for Rx signal
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1352   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1353   * \param alti alternate input selection of Rx signal
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1354   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1355   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1356  IFX_INLINE void IfxAsclin_setRxInput(Ifx_ASCLIN *asclin, IfxAsclin_RxInputSelect alti);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1357  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1358  /** \brief Selects the slave polarity
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1359   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1360   * \param spol SPOL selection
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1361   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1362   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1363  IFX_INLINE void IfxAsclin_setSlavePolarity(Ifx_ASCLIN *asclin, IfxAsclin_SlavePolarity spol);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1364  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1365  /** \brief Configure the Module to Hard/Soft suspend mode.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1366   * Note: The api works only when the OCDS is enabled and in Supervisor Mode. When OCDS is disabled the OCS suspend control is ineffective.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1367   * \param asclin Pointer to ASCLIN module registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1368   * \param mode Module suspend mode
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1369   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1370   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1371  IFX_INLINE void IfxAsclin_setSuspendMode(Ifx_ASCLIN *asclin, IfxAsclin_SuspendMode mode);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1372  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1373  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1374  /*-------------------------Global Function Prototypes-------------------------*/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1375  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1376  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1377  /** \brief Set the bit timing
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1378   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1379   * \note this function required FA source and the PD frequency to be set to their final values
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1380   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1381   * \param baudrate Required baudrate
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1382   * \param oversampling The oversampling factor
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1383   * \param samplepoint The sample point position
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1384   * \param medianFilter Number of samples per bit (median filter)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1385   * \return TRUE if configuration was successfull
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1386   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1387  IFX_EXTERN boolean IfxAsclin_setBitTiming(Ifx_ASCLIN *asclin, float32 baudrate, IfxAsclin_OversamplingFactor oversampling, IfxAsclin_SamplePointPosition samplepoint, IfxAsclin_SamplesPerBit medianFilter);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1388  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1389  /** \} */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1390  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1391  /** \addtogroup IfxLld_Asclin_Std_External
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1392   * \{ */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1393  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1394  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1395  /*-------------------------Global Function Prototypes-------------------------*/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1396  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1397  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1398  /** \brief Disables the module
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1399   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1400   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1401   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1402  IFX_EXTERN void IfxAsclin_disableModule(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1403  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1404  /** \brief Enables the ASC error interrupt Flags
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1405   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1406   * \param parEnable parity error
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1407   * \param rfoEnable Rx FIFO overflow error
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1408   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1409   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1410  IFX_EXTERN void IfxAsclin_enableAscErrorFlags(Ifx_ASCLIN *asclin, boolean parEnable, boolean rfoEnable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1411  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1412  /** \brief Enables the module
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1413   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1414   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1415   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1416  IFX_EXTERN void IfxAsclin_enableModule(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1417  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1418  /** \brief Returns the SRC pointer for ERR
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1419   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1420   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1421  IFX_EXTERN volatile Ifx_SRC_SRCR *IfxAsclin_getSrcPointerEr(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1422  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1423  /** \brief Returns the  SRC pointer for Rx
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1424   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1425   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1426  IFX_EXTERN volatile Ifx_SRC_SRCR *IfxAsclin_getSrcPointerRx(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1427  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1428  /** \brief Returns the SRC pointer for Tx
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1429   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1430   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1431  IFX_EXTERN volatile Ifx_SRC_SRCR *IfxAsclin_getSrcPointerTx(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1432  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1433  /** \brief Reads data up to 16 bits
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1434   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1435   * \param data Array where the read data shall be stored
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1436   * \param count number of items to read
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1437   * \return number of items that could not be read
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1438   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1439  IFX_EXTERN uint32 IfxAsclin_read16(Ifx_ASCLIN *asclin, uint16 *data, uint32 count);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1440  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1441  /** \brief Reads data up to 32 bits
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1442   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1443   * \param data Array where the read data shall be stored
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1444   * \param count number of items to read
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1445   * \return number of items that could not be read
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1446   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1447  IFX_EXTERN uint32 IfxAsclin_read32(Ifx_ASCLIN *asclin, uint32 *data, uint32 count);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1448  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1449  /** \brief Reads data up to 8 bits
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1450   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1451   * \param data Array where the read data shall be stored
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1452   * \param count number of items to read
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1453   * \return number of items that could not be read
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1454   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1455  IFX_EXTERN uint32 IfxAsclin_read8(Ifx_ASCLIN *asclin, uint8 *data, uint32 count);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1456  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1457  /** \brief Sets the baudrate bit fields
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1458   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1459   * \param prescaler division ratio of the predivider
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1460   * \param numerator numerator of the fractional divider
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1461   * \param denominator denominator of the fractional divider
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1462   * \param oversampling division ratio of the baudrate postdivider
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1463   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1464   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1465  IFX_EXTERN void IfxAsclin_setBaudrateBitFields(Ifx_ASCLIN *asclin, uint16 prescaler, uint16 numerator, uint16 denominator, IfxAsclin_OversamplingFactor oversampling);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1466  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1467  /** \brief Sets the  clock source
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1468   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1469   * \param clockSource clock source selection
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1470   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1471   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1472  IFX_EXTERN void IfxAsclin_setClockSource(Ifx_ASCLIN *asclin, IfxAsclin_ClockSource clockSource);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1473  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1474  /** \brief Writes data up to 16 bits
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1475   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1476   * \param data Array of data to be send
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1477   * \param count number of items to be send
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1478   * \return the number of items that could not be send
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1479   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1480  IFX_EXTERN uint32 IfxAsclin_write16(Ifx_ASCLIN *asclin, uint16 *data, uint32 count);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1481  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1482  /** \brief Writes data up to 32 bits
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1483   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1484   * \param data Array of data to be send
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1485   * \param count number of items to be send
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1486   * \return the number of items that could not be send
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1487   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1488  IFX_EXTERN uint32 IfxAsclin_write32(Ifx_ASCLIN *asclin, uint32 *data, uint32 count);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1489  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1490  /** \brief Writes data up to 8 bits
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1491   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1492   * \param data Array of data to be send
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1493   * \param count number of items to be send
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1494   * \return the number of items that could not be send
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1495   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1496  IFX_EXTERN uint32 IfxAsclin_write8(Ifx_ASCLIN *asclin, uint8 *data, uint32 count);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1497  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1498  /** \} */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1499  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1500  /** \addtogroup IfxLld_Asclin_Std_IO
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1501   * \{ */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1502  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1503  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1504  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1505  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1506  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1507  /** \brief Initializes a CTS input
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1508   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1509   * Attention: the kernel clock has to be disabled whenever the input multiplexer is changed.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1510   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1511   * This can be done with IfxAsclin_setClockSource(asclinSFR, IfxAsclin_ClockSource_noClock);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1512   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1513   * After the function call, the current clock can be enabled again.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1514   * \param cts the CTS Pin which should be configured
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1515   * \param inputMode the pin input mode which should be configured
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1516   * \param padDriver the pad driver mode which should be configured
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1517   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1518   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1519  IFX_INLINE void IfxAsclin_initCtsPin(const IfxAsclin_Cts_In *cts, IfxPort_InputMode inputMode, IfxPort_PadDriver padDriver);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1520  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1521  /** \brief Initializes a RTS output
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1522   * \param rts the RTS Pin which should be configured
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1523   * \param outputMode the pin output mode which should be configured
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1524   * \param padDriver the pad driver mode which should be configured
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1525   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1526   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1527  IFX_INLINE void IfxAsclin_initRtsPin(const IfxAsclin_Rts_Out *rts, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1528  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1529  /** \brief Initializes a RX input
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1530   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1531   * Attention: the kernel clock has to be disabled whenever the input multiplexer is changed.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1532   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1533   * This can be done with IfxAsclin_setClockSource(asclinSFR, IfxAsclin_ClockSource_noClock);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1534   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1535   * After the function call, the current clock can be enabled again.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1536   * \param rx the RX Pin which should be configured
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1537   * \param inputMode the pin input mode which should be configured
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1538   * \param padDriver the pad driver mode which should be configured
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1539   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1540   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1541  IFX_INLINE void IfxAsclin_initRxPin(const IfxAsclin_Rx_In *rx, IfxPort_InputMode inputMode, IfxPort_PadDriver padDriver);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1542  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1543  /** \brief Initializes a SCLK output
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1544   * \param sclk the SCLK Pin which should be configured
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1545   * \param outputMode the pin output mode which should be configured
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1546   * \param padDriver the pad driver mode which should be configured
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1547   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1548   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1549  IFX_INLINE void IfxAsclin_initSclkPin(const IfxAsclin_Sclk_Out *sclk, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1550  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1551  /** \brief Initializes a SLSO output
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1552   * \param slso the SLSO Pin which should be configured
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1553   * \param outputMode the pin output mode which should be configured
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1554   * \param padDriver the pad driver mode which should be configured
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1555   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1556   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1557  IFX_INLINE void IfxAsclin_initSlsoPin(const IfxAsclin_Slso_Out *slso, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1558  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1559  /** \brief Initializes a TX output
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1560   * \param tx the TX Pin which should be configured
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1561   * \param outputMode the pin output mode which should be configured
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1562   * \param padDriver the pad driver mode which should be configured
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1563   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1564   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1565  IFX_INLINE void IfxAsclin_initTxPin(const IfxAsclin_Tx_Out *tx, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1566  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1567  /** \} */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1568  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1569  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1570  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1571  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1572  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1573  /**
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1574   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1575   * \return returns the value of RxDATA register
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1576   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1577  IFX_INLINE uint32 IfxAsclin_readRxData(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1578  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1579  /**
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1580   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1581   * \param data data to be written
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1582   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1583   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1584  IFX_INLINE void IfxAsclin_writeTxData(Ifx_ASCLIN *asclin, uint32 data);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1585  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1586  /** \brief Returns the status of all error flags
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1587   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1588   * \return status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1589   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1590  IFX_INLINE uint16 IfxAsclin_getAllErrorFlagsStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1591  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1592  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1593  /*---------------------Inline Function Implementations------------------------*/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1594  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1595  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1596  IFX_INLINE void IfxAsclin_clearAllFlags(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1597  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1598      asclin->FLAGSCLEAR.U = 0xFFFFFFFF;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1599  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1600  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1601  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1602  IFX_INLINE void IfxAsclin_clearBreakDetectedFlag(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1603  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1604      asclin->FLAGSCLEAR.B.BDC = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1605  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1606  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1607  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1608  IFX_INLINE void IfxAsclin_clearCollisionDetectionErrorFlag(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1609  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1610      asclin->FLAGSCLEAR.B.CEC = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1611  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1612  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1613  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1614  IFX_INLINE void IfxAsclin_clearFallingEdgeDetectedFlag(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1615  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1616      asclin->FLAGSCLEAR.B.FEDC = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1617  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1618  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1619  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1620  IFX_INLINE void IfxAsclin_clearFrameErrorFlag(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1621  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1622      asclin->FLAGSCLEAR.B.FEC = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1623  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1624  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1625  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1626  IFX_INLINE void IfxAsclin_clearHeaderTimeoutFlag(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1627  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1628      asclin->FLAGSCLEAR.B.HTC = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1629  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1630  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1631  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1632  IFX_INLINE void IfxAsclin_clearKernelResetStatus(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1633  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1634      asclin->KRSTCLR.B.CLR = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1635  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1636  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1637  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1638  IFX_INLINE void IfxAsclin_clearLinAutoBaudDetectionErrorFlag(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1639  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1640      asclin->FLAGSCLEAR.B.LAC = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1641  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1642  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1643  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1644  IFX_INLINE void IfxAsclin_clearLinChecksumErrorFlag(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1645  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1646      asclin->FLAGSCLEAR.B.LCC = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1647  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1648  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1649  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1650  IFX_INLINE void IfxAsclin_clearLinParityErrorFlag(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1651  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1652      asclin->FLAGSCLEAR.B.LPC = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1653  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1654  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1655  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1656  IFX_INLINE void IfxAsclin_clearParityErrorFlag(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1657  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1658      asclin->FLAGSCLEAR.B.PEC = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1659  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1660  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1661  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1662  IFX_INLINE void IfxAsclin_clearRaisingEdgeDetectedFlag(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1663  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1664      asclin->FLAGSCLEAR.B.REDC = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1665  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1666  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1667  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1668  IFX_INLINE void IfxAsclin_clearResponseTimeoutFlag(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1669  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1670      asclin->FLAGSCLEAR.B.RTC = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1671  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1672  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1673  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1674  IFX_INLINE void IfxAsclin_clearRxFifoFillLevelFlag(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1675  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1676      asclin->FLAGSCLEAR.B.RFLC = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1677  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1678  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1679  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1680  IFX_INLINE void IfxAsclin_clearRxFifoOverflowFlag(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1681  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1682      asclin->FLAGSCLEAR.B.RFOC = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1683  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1684  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1685  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1686  IFX_INLINE void IfxAsclin_clearRxFifoUnderflowFlag(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1687  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1688      asclin->FLAGSCLEAR.B.RFUC = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1689  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1690  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1691  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1692  IFX_INLINE void IfxAsclin_clearRxHeaderEndFlag(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1693  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1694      asclin->FLAGSCLEAR.B.RHC = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1695  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1696  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1697  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1698  IFX_INLINE void IfxAsclin_clearRxResponseEndFlag(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1699  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1700      asclin->FLAGSCLEAR.B.RRC = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1701  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1702  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1703  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1704  IFX_INLINE void IfxAsclin_clearTransmissionCompletedFlag(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1705  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1706      asclin->FLAGSCLEAR.B.TCC = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1707  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1708  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1709  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1710  IFX_INLINE void IfxAsclin_clearTxFifoFillLevelFlag(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1711  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1712      asclin->FLAGSCLEAR.B.TFLC = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1713  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1714  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1715  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1716  IFX_INLINE void IfxAsclin_clearTxFifoOverflowFlag(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1717  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1718      asclin->FLAGSCLEAR.B.TFOC = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1719  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1720  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1721  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1722  IFX_INLINE void IfxAsclin_clearTxHeaderEndFlag(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1723  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1724      asclin->FLAGSCLEAR.B.THC = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1725  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1726  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1727  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1728  IFX_INLINE void IfxAsclin_clearTxResponseEndFlag(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1729  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1730      asclin->FLAGSCLEAR.B.TRC = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1731  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1732  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1733  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1734  IFX_INLINE void IfxAsclin_disableAllFlags(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1735  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1736      asclin->FLAGSENABLE.U = 0x00000000;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1737  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1738  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1739  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1740  IFX_INLINE void IfxAsclin_enableAutoBaudrateDetection(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1741  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1742      asclin->LIN.CON.B.ABD = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1743  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1744  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1745  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1746  IFX_INLINE void IfxAsclin_enableBreakDetectedFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1747  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1748      asclin->FLAGSENABLE.B.BDE = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1749  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1750  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1751  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1752  IFX_INLINE void IfxAsclin_enableCollisionDetection(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1753  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1754      asclin->FRAMECON.B.CEN = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1755  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1756  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1757  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1758  IFX_INLINE void IfxAsclin_enableCollisionDetectionErrorFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1759  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1760      asclin->FLAGSENABLE.B.CEE = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1761  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1762  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1763  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1764  IFX_INLINE void IfxAsclin_enableCts(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1765  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1766      asclin->IOCR.B.CTSEN = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1767  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1768  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1769  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1770  IFX_INLINE void IfxAsclin_enableFallingEdgeDetectedFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1771  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1772      asclin->FLAGSENABLE.B.FEDE = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1773  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1774  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1775  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1776  IFX_INLINE void IfxAsclin_enableFrameErrorFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1777  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1778      asclin->FLAGSENABLE.B.FEE = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1779  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1780  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1781  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1782  IFX_INLINE void IfxAsclin_enableHardwareChecksum(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1783  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1784      asclin->LIN.CON.B.CSEN = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1785  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1786  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1787  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1788  IFX_INLINE void IfxAsclin_enableHeaderTimeoutFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1789  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1790      asclin->FLAGSENABLE.B.HTE = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1791  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1792  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1793  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1794  IFX_INLINE void IfxAsclin_enableLinAutoBaudDetectionErrorFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1795  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1796      asclin->FLAGSENABLE.B.ABE = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1797  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1798  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1799  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1800  IFX_INLINE void IfxAsclin_enableLinChecksumErrorFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1801  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1802      asclin->FLAGSENABLE.B.LCE = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1803  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1804  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1805  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1806  IFX_INLINE void IfxAsclin_enableLinParityErrorFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1807  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1808      asclin->FLAGSENABLE.B.LPE = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1809  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1810  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1811  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1812  IFX_INLINE void IfxAsclin_enableLoopBackMode(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1813  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1814      asclin->IOCR.B.LB = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1815  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1816  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1817  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1818  IFX_INLINE void IfxAsclin_enableParity(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1819  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1820      asclin->FRAMECON.B.PEN = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1821  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1822  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1823  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1824  IFX_INLINE void IfxAsclin_enableParityErrorFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1825  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1826      asclin->FLAGSENABLE.B.PEE = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1827  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1828  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1829  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1830  IFX_INLINE void IfxAsclin_enableRaisingEdgeDetectedFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1831  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1832      asclin->FLAGSENABLE.B.REDE = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1833  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1834  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1835  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1836  IFX_INLINE void IfxAsclin_enableResponseTimeoutFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1837  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1838      asclin->FLAGSENABLE.B.RTE = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1839  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1840  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1841  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1842  IFX_INLINE void IfxAsclin_enableRxFifoFillLevelFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1843  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1844      asclin->FLAGSENABLE.B.RFLE = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1845  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1846  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1847  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1848  IFX_INLINE void IfxAsclin_enableRxFifoInlet(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1849  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1850      asclin->RXFIFOCON.B.ENI = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1851  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1852  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1853  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1854  IFX_INLINE void IfxAsclin_enableRxFifoOverflowFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1855  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1856      asclin->FLAGSENABLE.B.RFOE = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1857  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1858  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1859  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1860  IFX_INLINE void IfxAsclin_enableRxFifoUnderflowFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1861  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1862      asclin->FLAGSENABLE.B.RFUE = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1863  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1864  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1865  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1866  IFX_INLINE void IfxAsclin_enableRxHeaderEndFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1867  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1868      asclin->FLAGSENABLE.B.RHE = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1869  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1870  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1871  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1872  IFX_INLINE void IfxAsclin_enableRxResponseEndFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1873  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1874      asclin->FLAGSENABLE.B.RRE = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1875  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1876  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1877  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1878  IFX_INLINE void IfxAsclin_enableTransmissionCompletedFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1879  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1880      asclin->FLAGSENABLE.B.TCE = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1881  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1882  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1883  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1884  IFX_INLINE void IfxAsclin_enableTxFifoFillLevelFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1885  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1886      asclin->FLAGSENABLE.B.TFLE = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1887  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1888  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1889  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1890  IFX_INLINE void IfxAsclin_enableTxFifoOutlet(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1891  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1892      asclin->TXFIFOCON.B.ENO = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1893  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1894  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1895  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1896  IFX_INLINE void IfxAsclin_enableTxFifoOverflowFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1897  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1898      asclin->FLAGSENABLE.B.TFOE = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1899  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1900  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1901  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1902  IFX_INLINE void IfxAsclin_enableTxHeaderEndFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1903  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1904      asclin->FLAGSENABLE.B.THE = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1905  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1906  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1907  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1908  IFX_INLINE void IfxAsclin_enableTxResponseEndFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1909  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1910      asclin->FLAGSENABLE.B.TRE = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1911  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1912  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1913  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1914  IFX_INLINE void IfxAsclin_flushRxFifo(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1915  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1916      asclin->RXFIFOCON.B.FLUSH = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1917  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1918  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1919  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1920  IFX_INLINE void IfxAsclin_flushTxFifo(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1921  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1922      asclin->TXFIFOCON.B.FLUSH = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1923  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1924  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1925  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1926  IFX_INLINE boolean IfxAsclin_getBreakDetectedFlagStatus(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1927  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1928      return asclin->FLAGS.B.BD;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1929  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1930  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1931  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1932  IFX_INLINE uint8 IfxAsclin_getClockSource(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1933  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1934      return asclin->CSR.B.CLKSEL;
	ld.bu	d15,[a4]76
	and	d15,#31
.L254:

; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	    98  .0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	    99          break;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	   100      case IfxAsclin_ClockSource_kernelClock:
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	   101          frequency = IfxScuCcu_getSpbFrequency();
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	   102          break;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	   103      case IfxAsclin_ClockSource_oscillatorClock:
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	   104          frequency = IfxScuCcu_getOsc0Frequency();
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	   105          break;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	   106      case IfxAsclin_ClockSource_flexRayClock:
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	   107          frequency = IfxScuCcu_getPllErayFrequency();
	jeq	d15,#1,.L5
.L529:

; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	   108          break;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	   109      case IfxAsclin_ClockSource_ascFastClock:
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	   110          frequency = IfxScuCcu_getBaud2Frequency();
	jeq	d15,#2,.L6
.L530:

; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	   111          break;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	   112      case IfxAsclin_ClockSource_ascSlowClock:
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	   113          frequency = IfxScuCcu_getBaud1Frequency();
	jeq	d15,#4,.L7
.L531:

; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	   114          break;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	   115      default:
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	   116          frequency = 0.0;
	mov	d0,#8
	jeq	d15,d0,.L8
.L532:

; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	   117          break;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	   118      }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	   119  
	mov	d0,#16
	jeq	d15,d0,.L9
	j	.L10
.L5:
	j	IfxScuCcu_getSpbFrequency
.L6:
	j	IfxScuCcu_getOsc0Frequency
.L7:
	j	IfxScuCcu_getPllErayFrequency
.L8:
	j	IfxScuCcu_getBaud2Frequency
.L9:

; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	   120      return frequency;
	j	IfxScuCcu_getBaud1Frequency

; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	   121  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	   122  
.L10:

; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	   123  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	   124  IfxAsclin_Index IfxAsclin_getIndex(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	   125  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	   126      uint32          index;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	   127      IfxAsclin_Index result;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	   128  
	mov	d2,#0
	ret
.L250:
	
__IfxAsclin_getFaFrequency_function_end:
	.size	IfxAsclin_getFaFrequency,__IfxAsclin_getFaFrequency_function_end-IfxAsclin_getFaFrequency
.L128:
	; End of function
	
	.sdecl	'.text.IfxAsclin.IfxAsclin_getIndex',code,cluster('IfxAsclin_getIndex')
	.sect	'.text.IfxAsclin.IfxAsclin_getIndex'
	.align	2
	
	.global	IfxAsclin_getIndex

; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	   129      result = IfxAsclin_Index_none;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	   130  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	   131      for (index = 0; index < IFXASCLIN_NUM_MODULES; index++)
; Function IfxAsclin_getIndex
.L76:
IfxAsclin_getIndex:	.type	func

; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	   132      {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	   133          if (IfxAsclin_cfg_indexMap[index].module == asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	   134          {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	   135              result = (IfxAsclin_Index)IfxAsclin_cfg_indexMap[index].index;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	   136              break;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	   137          }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	   138      }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	   139  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	   140      return result;
	mov	d2,#-1
	movh.a	a15,#@his(IfxAsclin_cfg_indexMap)
.L457:
	lea	a15,[a15]@los(IfxAsclin_cfg_indexMap)
.L537:
	mov.a	a2,#3
.L17:
	ld.a	a5,[a15]
.L538:
	jne.a	a5,a4,.L18
.L539:

; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	   141  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	   142  
	ld.w	d15,[a15]4
.L540:

; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	   143  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	   144  float32 IfxAsclin_getOvsFrequency(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	   145  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	   146      return (IfxAsclin_getPdFrequency(asclin) * asclin->BRG.B.NUMERATOR) / asclin->BRG.B.DENOMINATOR;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	   147  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	   148  
	extr	d2,d15,#0,#8
	ret
.L18:
	lea	a15,[a15]8
	loop	a2,.L17
.L541:
	ret
.L258:
	
__IfxAsclin_getIndex_function_end:
	.size	IfxAsclin_getIndex,__IfxAsclin_getIndex_function_end-IfxAsclin_getIndex
.L133:
	; End of function
	
	.sdecl	'.text.IfxAsclin.IfxAsclin_getOvsFrequency',code,cluster('IfxAsclin_getOvsFrequency')
	.sect	'.text.IfxAsclin.IfxAsclin_getOvsFrequency'
	.align	2
	
	.global	IfxAsclin_getOvsFrequency

; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	   149  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	   150  float32 IfxAsclin_getPdFrequency(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	   151  {
; Function IfxAsclin_getOvsFrequency
.L78:
IfxAsclin_getOvsFrequency:	.type	func
	mov.aa	a15,a4
.L459:

; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	   152      return IfxAsclin_getFaFrequency(asclin) / (asclin->BITCON.B.PRESCALER + 1);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	   153  }
	call	IfxAsclin_getPdFrequency
.L458:
	ld.hu	d15,[a15]34
.L546:
	extr.u	d15,d15,#0,#12
	ld.hu	d0,[a15]32
	extr.u	d0,d0,#0,#12
.L547:
	itof	d15,d15
.L548:
	mul.f	d15,d2,d15
.L549:
	itof	d0,d0
.L550:

; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	   154  
	div.f	d2,d15,d0
	ret
.L263:
	
__IfxAsclin_getOvsFrequency_function_end:
	.size	IfxAsclin_getOvsFrequency,__IfxAsclin_getOvsFrequency_function_end-IfxAsclin_getOvsFrequency
.L138:
	; End of function
	
	.sdecl	'.text.IfxAsclin.IfxAsclin_getPdFrequency',code,cluster('IfxAsclin_getPdFrequency')
	.sect	'.text.IfxAsclin.IfxAsclin_getPdFrequency'
	.align	2
	
	.global	IfxAsclin_getPdFrequency

; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	   155  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	   156  float32 IfxAsclin_getShiftFrequency(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	   157  {
; Function IfxAsclin_getPdFrequency
.L80:
IfxAsclin_getPdFrequency:	.type	func
	mov.aa	a15,a4
.L461:

; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	   158      return IfxAsclin_getOvsFrequency(asclin) / asclin->BITCON.B.OVERSAMPLING;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	   159  }
	call	IfxAsclin_getFaFrequency
.L460:
	ld.hu	d15,[a15]20
	extr.u	d15,d15,#0,#12
.L555:
	add	d15,#1
	itof	d15,d15
.L556:

; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	   160  
	div.f	d2,d2,d15
	ret
.L265:
	
__IfxAsclin_getPdFrequency_function_end:
	.size	IfxAsclin_getPdFrequency,__IfxAsclin_getPdFrequency_function_end-IfxAsclin_getPdFrequency
.L143:
	; End of function
	
	.sdecl	'.text.IfxAsclin.IfxAsclin_getShiftFrequency',code,cluster('IfxAsclin_getShiftFrequency')
	.sect	'.text.IfxAsclin.IfxAsclin_getShiftFrequency'
	.align	2
	
	.global	IfxAsclin_getShiftFrequency

; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	   161  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	   162  volatile Ifx_SRC_SRCR *IfxAsclin_getSrcPointerEr(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	   163  {
; Function IfxAsclin_getShiftFrequency
.L82:
IfxAsclin_getShiftFrequency:	.type	func
	mov.aa	a15,a4
.L463:

; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	   164      return (volatile Ifx_SRC_SRCR *)(&MODULE_SRC.ASCLIN.ASCLIN[IfxAsclin_getIndex(asclin)].ERR);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	   165  }
	call	IfxAsclin_getOvsFrequency
.L462:
	ld.bu	d15,[a15]22
	and	d15,#15
	itof	d15,d15
.L561:

; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	   166  
	div.f	d2,d2,d15
	ret
.L267:
	
__IfxAsclin_getShiftFrequency_function_end:
	.size	IfxAsclin_getShiftFrequency,__IfxAsclin_getShiftFrequency_function_end-IfxAsclin_getShiftFrequency
.L148:
	; End of function
	
	.sdecl	'.text.IfxAsclin.IfxAsclin_getSrcPointerEr',code,cluster('IfxAsclin_getSrcPointerEr')
	.sect	'.text.IfxAsclin.IfxAsclin_getSrcPointerEr'
	.align	2
	
	.global	IfxAsclin_getSrcPointerEr

; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	   167  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	   168  volatile Ifx_SRC_SRCR *IfxAsclin_getSrcPointerRx(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	   169  {
; Function IfxAsclin_getSrcPointerEr
.L84:
IfxAsclin_getSrcPointerEr:	.type	func

; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	   170      return (volatile Ifx_SRC_SRCR *)(&MODULE_SRC.ASCLIN.ASCLIN[IfxAsclin_getIndex(asclin)].RX);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	   171  }
	call	IfxAsclin_getIndex
.L626:
	fcall	.cocofun_3
.L464:
	lea	a2,[a3]-32632
.L627:

; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	   172  
	ret
.L350:
	
__IfxAsclin_getSrcPointerEr_function_end:
	.size	IfxAsclin_getSrcPointerEr,__IfxAsclin_getSrcPointerEr_function_end-IfxAsclin_getSrcPointerEr
.L178:
	; End of function
	
	.sdecl	'.text.IfxAsclin..cocofun_3',code,cluster('.cocofun_3')
	.sect	'.text.IfxAsclin..cocofun_3'
	.align	2
; Function .cocofun_3
.L86:
.cocofun_3:	.type	func
; Function body .cocofun_3, coco_iter:1
	mul	d15,d2,#12
	mov.a	a15,d15
	movh.a	a3,#61444
	add.a	a3,a15
.L703:
	fret
.L243:
	; End of function
	.sdecl	'.text.IfxAsclin.IfxAsclin_getSrcPointerRx',code,cluster('IfxAsclin_getSrcPointerRx')
	.sect	'.text.IfxAsclin.IfxAsclin_getSrcPointerRx'
	.align	2
	
	.global	IfxAsclin_getSrcPointerRx

; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	   173  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	   174  volatile Ifx_SRC_SRCR *IfxAsclin_getSrcPointerTx(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	   175  {
; Function IfxAsclin_getSrcPointerRx
.L88:
IfxAsclin_getSrcPointerRx:	.type	func

; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	   176      return (volatile Ifx_SRC_SRCR *)(&MODULE_SRC.ASCLIN.ASCLIN[IfxAsclin_getIndex(asclin)].TX);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	   177  }
	call	IfxAsclin_getIndex
.L632:
	fcall	.cocofun_1
.L465:
	add.a	a2,#4
.L633:

; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	   178  
	ret
.L353:
	
__IfxAsclin_getSrcPointerRx_function_end:
	.size	IfxAsclin_getSrcPointerRx,__IfxAsclin_getSrcPointerRx_function_end-IfxAsclin_getSrcPointerRx
.L183:
	; End of function
	
	.sdecl	'.text.IfxAsclin..cocofun_1',code,cluster('.cocofun_1')
	.sect	'.text.IfxAsclin..cocofun_1'
	.align	2
; Function .cocofun_1
.L90:
.cocofun_1:	.type	func
; Function body .cocofun_1, coco_iter:0
	fcall	.cocofun_3
.L693:
	lea	a2,[a3]-32640
.L694:
	fret
.L233:
	; End of function
	.sdecl	'.text.IfxAsclin.IfxAsclin_getSrcPointerTx',code,cluster('IfxAsclin_getSrcPointerTx')
	.sect	'.text.IfxAsclin.IfxAsclin_getSrcPointerTx'
	.align	2
	
	.global	IfxAsclin_getSrcPointerTx

; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	   179  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	   180  uint32 IfxAsclin_read16(Ifx_ASCLIN *asclin, uint16 *data, uint32 count)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	   181  {
; Function IfxAsclin_getSrcPointerTx
.L92:
IfxAsclin_getSrcPointerTx:	.type	func

; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	   182      volatile Ifx_ASCLIN_RXDATA *rxData = (volatile Ifx_ASCLIN_RXDATA *)&asclin->RXDATA.U;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	   183  
	call	IfxAsclin_getIndex
.L638:
	fcall	.cocofun_1
.L466:

; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	   184      while (count > 0)
	ret
.L356:
	
__IfxAsclin_getSrcPointerTx_function_end:
	.size	IfxAsclin_getSrcPointerTx,__IfxAsclin_getSrcPointerTx_function_end-IfxAsclin_getSrcPointerTx
.L188:
	; End of function
	
	.sdecl	'.text.IfxAsclin.IfxAsclin_read16',code,cluster('IfxAsclin_read16')
	.sect	'.text.IfxAsclin.IfxAsclin_read16'
	.align	2
	
	.global	IfxAsclin_read16

; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	   185      {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	   186          *data++ = (uint16)rxData->U;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	   187          count--;
; Function IfxAsclin_read16
.L94:
IfxAsclin_read16:	.type	func

; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	   188      }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	   189  
	lea	a15,[a4]72
.L467:

; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	   190      return count;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	   191  }
	j	.L27
.L28:

; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	   192  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	   193  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	   194  uint32 IfxAsclin_read32(Ifx_ASCLIN *asclin, uint32 *data, uint32 count)
	add	d4,#-1
	ld.w	d15,[a15]
.L643:
	st.h	[a5+],d15
.L27:
	jne	d4,#0,.L28
.L644:

; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	   195  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	   196      volatile Ifx_ASCLIN_RXDATA *rxData = (volatile Ifx_ASCLIN_RXDATA *)&asclin->RXDATA.U;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	   197  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	   198      while (count > 0)
	mov	d2,#0
	ret
.L358:
	
__IfxAsclin_read16_function_end:
	.size	IfxAsclin_read16,__IfxAsclin_read16_function_end-IfxAsclin_read16
.L193:
	; End of function
	
	.sdecl	'.text.IfxAsclin.IfxAsclin_read32',code,cluster('IfxAsclin_read32')
	.sect	'.text.IfxAsclin.IfxAsclin_read32'
	.align	2
	
	.global	IfxAsclin_read32

; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	   199      {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	   200          *data++ = rxData->U;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	   201          count--;
; Function IfxAsclin_read32
.L96:
IfxAsclin_read32:	.type	func

; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	   202      }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	   203  
	lea	a15,[a4]72
.L468:

; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	   204      return count;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	   205  }
	j	.L30
.L31:

; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	   206  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	   207  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	   208  uint32 IfxAsclin_read8(Ifx_ASCLIN *asclin, uint8 *data, uint32 count)
	add	d4,#-1
	ld.w	d15,[a15]
.L649:
	st.w	[a5+],d15
.L30:
	jne	d4,#0,.L31
.L650:

; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	   209  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	   210      volatile Ifx_ASCLIN_RXDATA *rxData = (volatile Ifx_ASCLIN_RXDATA *)&asclin->RXDATA.U;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	   211  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	   212      while (count > 0)
	mov	d2,#0
	ret
.L365:
	
__IfxAsclin_read32_function_end:
	.size	IfxAsclin_read32,__IfxAsclin_read32_function_end-IfxAsclin_read32
.L198:
	; End of function
	
	.sdecl	'.text.IfxAsclin.IfxAsclin_read8',code,cluster('IfxAsclin_read8')
	.sect	'.text.IfxAsclin.IfxAsclin_read8'
	.align	2
	
	.global	IfxAsclin_read8

; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	   213      {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	   214          *data++ = (uint8)rxData->U;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	   215          count--;
; Function IfxAsclin_read8
.L98:
IfxAsclin_read8:	.type	func

; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	   216      }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	   217  
	lea	a15,[a4]72
.L469:

; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	   218      return count;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	   219  }
	j	.L33
.L34:

; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	   220  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	   221  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	   222  void IfxAsclin_resetModule(Ifx_ASCLIN *asclin)
	add	d4,#-1
	ld.w	d15,[a15]
.L655:
	st.b	[a5+],d15
.L33:
	jne	d4,#0,.L34
.L656:

; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	   223  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	   224      uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	   225      IfxScuWdt_clearCpuEndinit(passwd);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	   226  
	mov	d2,#0
	ret
.L371:
	
__IfxAsclin_read8_function_end:
	.size	IfxAsclin_read8,__IfxAsclin_read8_function_end-IfxAsclin_read8
.L203:
	; End of function
	
	.sdecl	'.text.IfxAsclin.IfxAsclin_resetModule',code,cluster('IfxAsclin_resetModule')
	.sect	'.text.IfxAsclin.IfxAsclin_resetModule'
	.align	2
	
	.global	IfxAsclin_resetModule

; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	   227      asclin->KRST0.B.RST = 1;            /* Only if both Kernel reset bits are set a reset is executed */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	   228      asclin->KRST1.B.RST = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	   229      IfxScuWdt_setCpuEndinit(passwd);
; Function IfxAsclin_resetModule
.L100:
IfxAsclin_resetModule:	.type	func
	mov.aa	a15,a4
.L471:

; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	   230  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	   231      while (0 == asclin->KRST0.B.RSTSTAT)    /* Wait until reset is executed */
	call	IfxScuWdt_getCpuWatchdogPassword
.L470:
	mov	d8,d2
.L473:

; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	   232      {}
	mov	d4,d8
	call	IfxScuWdt_clearCpuEndinit
.L472:

; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	   233  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	   234      IfxScuWdt_clearCpuEndinit(passwd);
	ld.bu	d15,[a15]244
.L566:

; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	   235      asclin->KRSTCLR.B.CLR = 1;          /* Clear Kernel reset status bit */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	   236  
	mov	d4,d8
.L474:
	or	d15,#1
	st.b	[a15]244,d15
.L567:
	ld.bu	d15,[a15]240
.L568:
	or	d15,#1
	st.b	[a15]240,d15
.L569:
	call	IfxScuWdt_setCpuEndinit

; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	   237      IfxScuWdt_setCpuEndinit(passwd);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	   238  }
.L36:
	ld.bu	d15,[a15]244
.L570:
	jz.t	d15:1,.L36
.L571:

; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	   239  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	   240  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	   241  void IfxAsclin_setBaudrateBitFields(Ifx_ASCLIN *asclin, uint16 prescaler, uint16 numerator, uint16 denominator, IfxAsclin_OversamplingFactor oversampling)
	mov	d4,d8
	call	IfxScuWdt_clearCpuEndinit
.L572:

; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	   242  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	   243      IfxAsclin_ClockSource clockSource = (IfxAsclin_ClockSource)IfxAsclin_getClockSource(asclin); /* gets the current clock source */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	   244      IfxAsclin_setClockSource(asclin, IfxAsclin_ClockSource_noClock);                             /* turns off the clock for settings */
	mov	d4,d8
	ld.bu	d15,[a15]236
.L475:
	or	d15,#1
	st.b	[a15]236,d15
.L573:
	j	IfxScuWdt_setCpuEndinit
.L269:
	
__IfxAsclin_resetModule_function_end:
	.size	IfxAsclin_resetModule,__IfxAsclin_resetModule_function_end-IfxAsclin_resetModule
.L153:
	; End of function
	
	.sdecl	'.text.IfxAsclin.IfxAsclin_setBaudrateBitFields',code,cluster('IfxAsclin_setBaudrateBitFields')
	.sect	'.text.IfxAsclin.IfxAsclin_setBaudrateBitFields'
	.align	2
	
	.global	IfxAsclin_setBaudrateBitFields

; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	   245      IfxAsclin_setPrescaler(asclin, prescaler);                                                   /* sets the prescaler*/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	   246      IfxAsclin_setNumerator(asclin, numerator);                                                   /* sets the numerator*/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	   247      IfxAsclin_setDenominator(asclin, denominator);                                               /* sets the denominator*/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	   248      IfxAsclin_setOversampling(asclin, oversampling);                                             /* sets the oversampling*/
; Function IfxAsclin_setBaudrateBitFields
.L102:
IfxAsclin_setBaudrateBitFields:	.type	func
	mov.aa	a15,a4
.L383:

; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	     1  /**
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	     2   * \file IfxAsclin.h
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	     3   * \brief ASCLIN  basic functionality
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	     4   * \ingroup IfxLld_Asclin
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	     5   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	     6   * \version iLLD_1_0_1_11_0
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	     7   * \copyright Copyright (c) 2018 Infineon Technologies AG. All rights reserved.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	     8   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	     9   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    10   *                                 IMPORTANT NOTICE
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    11   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    12   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    13   * Use of this file is subject to the terms of use agreed between (i) you or 
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    14   * the company in which ordinary course of business you are acting and (ii) 
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    15   * Infineon Technologies AG or its licensees. If and as long as no such 
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    16   * terms of use are agreed, use of this file is subject to following:
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    17  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    18  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    19   * Boost Software License - Version 1.0 - August 17th, 2003
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    20  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    21   * Permission is hereby granted, free of charge, to any person or 
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    22   * organization obtaining a copy of the software and accompanying 
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    23   * documentation covered by this license (the "Software") to use, reproduce,
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    24   * display, distribute, execute, and transmit the Software, and to prepare
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    25   * derivative works of the Software, and to permit third-parties to whom the 
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    26   * Software is furnished to do so, all subject to the following:
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    27  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    28   * The copyright notices in the Software and this entire statement, including
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    29   * the above license grant, this restriction and the following disclaimer, must
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    30   * be included in all copies of the Software, in whole or in part, and all
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    31   * derivative works of the Software, unless such copies or derivative works are
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    32   * solely in the form of machine-executable object code generated by a source
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    33   * language processor.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    34  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    35   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR 
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    36   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    37   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    38   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE 
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    39   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    40   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    41   * DEALINGS IN THE SOFTWARE.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    42  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    43   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    44   * \defgroup IfxLld_Asclin_Std_Enumerations Enumerations
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    45   * \ingroup IfxLld_Asclin_Std
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    46   * \defgroup IfxLld_Asclin_Std_Operative Operative Functions
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    47   * \ingroup IfxLld_Asclin_Std
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    48   * \defgroup IfxLld_Asclin_Std_Utility Utility Functions
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    49   * \ingroup IfxLld_Asclin_Std
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    50   * \defgroup IfxLld_Asclin_Std_Configuration Configuration Functions
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    51   * \ingroup IfxLld_Asclin_Std
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    52   * \defgroup IfxLld_Asclin_Std_External External Functions
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    53   * \ingroup IfxLld_Asclin_Std
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    54   * \defgroup IfxLld_Asclin_Std_IO IO Pin Configuration Functions
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    55   * \ingroup IfxLld_Asclin_Std
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    56   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    57  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    58  #ifndef IFXASCLIN_H
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    59  #define IFXASCLIN_H 1
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    60  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    61  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    62  /*----------------------------------Includes----------------------------------*/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    63  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    64  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    65  #include "_Impl/IfxAsclin_cfg.h"
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    66  #include "Scu/Std/IfxScuCcu.h"
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    67  #include "Scu/Std/IfxScuWdt.h"
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    68  #include "Cpu/Std/IfxCpu_Intrinsics.h"
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    69  #include "IfxAsclin_reg.h"
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    70  #include "Src/Std/IfxSrc.h"
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    71  #include "_PinMap/IfxAsclin_PinMap.h"
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    72  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    73  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    74  /*--------------------------------Enumerations--------------------------------*/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    75  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    76  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    77  /** \addtogroup IfxLld_Asclin_Std_Enumerations
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    78   * \{ */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    79  /** \brief Defines if the classic or the enhanced checksum will be calculated by the checksum block.\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    80   * Definition in Ifx_ASCLIN.DATCON.B.CSM
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    81   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    82  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    83  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    84      IfxAsclin_Checksum_classic  = 0, /**< \brief classic checksum */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    85      IfxAsclin_Checksum_enhanced = 1  /**< \brief enhanced checksum */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    86  } IfxAsclin_Checksum;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    87  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    88  /** \brief Defines if the received checksum byte is written into the RXFifo or not.\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    89   * Definition in Ifx_ASCLIN.LIN.CON.B.CSI
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    90   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    91  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    92  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    93      IfxAsclin_ChecksumInjection_notWritten = 0,  /**< \brief checksum byte is not written */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    94      IfxAsclin_ChecksumInjection_written    = 1   /**< \brief checksum byte is written */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    95  } IfxAsclin_ChecksumInjection;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    96  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    97  /** \brief CPOL defines the idle level of the clock signal in the SPI mode.\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    98   * Idle level is the level outside the data transmission time intervals.\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    99   * Definition in Ifx_ASCLIN.IOCR.B.CPOL
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   100   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   101  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   102  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   103      IfxAsclin_ClockPolarity_idleLow  = 0, /**< \brief idle low */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   104      IfxAsclin_ClockPolarity_idleHigh = 1  /**< \brief idle high */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   105  } IfxAsclin_ClockPolarity;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   106  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   107  /** \brief Selection of clock source\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   108   * Definition in Ifx_ASCLIN.CSR.B.CLKSEL
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   109   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   110  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   111  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   112      IfxAsclin_ClockSource_noClock         = 0,  /**< \brief no clock will be supplied */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   113      IfxAsclin_ClockSource_kernelClock     = 1,  /**< \brief f clc will be supplied */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   114      IfxAsclin_ClockSource_oscillatorClock = 2,  /**< \brief XTAL oscillator clock foso0 will be supplied */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   115      IfxAsclin_ClockSource_flexRayClock    = 4,  /**< \brief f eray will be supplied */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   116      IfxAsclin_ClockSource_ascFastClock    = 8,  /**< \brief f asclinf wiil be supplied */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   117      IfxAsclin_ClockSource_ascSlowClock    = 16  /**< \brief f asclins will be supplied */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   118  } IfxAsclin_ClockSource;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   119  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   120  /** \brief CTS input pin selection\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   121   * Definition in Ifx_ASCLIN.IOCR.B.CTS
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   122   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   123  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   124  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   125      IfxAsclin_CtsInputSelect_0,     /**< \brief CTS input pin 0  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   126      IfxAsclin_CtsInputSelect_1,     /**< \brief CTS input pin 1  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   127      IfxAsclin_CtsInputSelect_2,     /**< \brief CTS input pin 2  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   128      IfxAsclin_CtsInputSelect_3      /**< \brief CTS input pin 3  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   129  } IfxAsclin_CtsInputSelect;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   130  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   131  /** \brief Number of bits per transfer\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   132   * Definition in Ifx_ASCLIN.FRAMECON.B.DATALEN
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   133   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   134  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   135  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   136      IfxAsclin_DataLength_1 = 0,      /**< \brief number of bits per transfer 0  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   137      IfxAsclin_DataLength_2,          /**< \brief number of bits per transfer 1  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   138      IfxAsclin_DataLength_3,          /**< \brief number of bits per transfer 2  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   139      IfxAsclin_DataLength_4,          /**< \brief number of bits per transfer 3  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   140      IfxAsclin_DataLength_5,          /**< \brief number of bits per transfer 4  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   141      IfxAsclin_DataLength_6,          /**< \brief number of bits per transfer 5  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   142      IfxAsclin_DataLength_7,          /**< \brief number of bits per transfer 6  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   143      IfxAsclin_DataLength_8,          /**< \brief number of bits per transfer 7  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   144      IfxAsclin_DataLength_9,          /**< \brief number of bits per transfer 8  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   145      IfxAsclin_DataLength_10,         /**< \brief number of bits per transfer 9  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   146      IfxAsclin_DataLength_11,         /**< \brief number of bits per transfer 10  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   147      IfxAsclin_DataLength_12,         /**< \brief number of bits per transfer 11  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   148      IfxAsclin_DataLength_13,         /**< \brief number of bits per transfer 12  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   149      IfxAsclin_DataLength_14,         /**< \brief number of bits per transfer 13  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   150      IfxAsclin_DataLength_15,         /**< \brief number of bits per transfer 14  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   151      IfxAsclin_DataLength_16          /**< \brief number of bits per transfer 15  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   152  } IfxAsclin_DataLength;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   153  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   154  /** \brief Defines the basic operating mode of the module. Changing the mode must be done by switching first to initialize mode, and then to the other mode.\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   155   * Definition in Ifx_ASCLIN.FRAMECON.B.MODE
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   156   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   157  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   158  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   159      IfxAsclin_FrameMode_initialise = 0,  /**< \brief initialise mode */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   160      IfxAsclin_FrameMode_asc        = 1,  /**< \brief asc mode */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   161      IfxAsclin_FrameMode_spi        = 2,  /**< \brief spi mode */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   162      IfxAsclin_FrameMode_lin        = 3   /**< \brief lin mode */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   163  } IfxAsclin_FrameMode;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   164  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   165  /** \brief Defines if LIN frame shall consist of a header and response or of a header only.\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   166   * Definition in Ifx_ASCLIN.DATCON.B.HO
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   167   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   168  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   169  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   170      IfxAsclin_HeaderResponseSelect_headerAndResponse = 0,  /**< \brief header and response expected */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   171      IfxAsclin_HeaderResponseSelect_headerOnly        = 1   /**< \brief header only expected */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   172  } IfxAsclin_HeaderResponseSelect;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   173  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   174  /** \brief Defines the duration of the IDLE delay in bit times.\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   175   * SPI mode: this is the idle time between the frames.\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   176   * ASC and LIN mode: this is the pause inserted between transmission of bytes.\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   177   * Definition in Ifx_ASCLIN.FRAMECON.B.IDLE
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   178   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   179  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   180  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   181      IfxAsclin_IdleDelay_0,     /**< \brief idle delay in 0 bit times  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   182      IfxAsclin_IdleDelay_1,     /**< \brief idle delay in 1 bit times  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   183      IfxAsclin_IdleDelay_2,     /**< \brief idle delay in 2 bit times  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   184      IfxAsclin_IdleDelay_3,     /**< \brief idle delay in 3 bit times  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   185      IfxAsclin_IdleDelay_4,     /**< \brief idle delay in 4 bit times  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   186      IfxAsclin_IdleDelay_5,     /**< \brief idle delay in 5 bit times  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   187      IfxAsclin_IdleDelay_6,     /**< \brief idle delay in 6 bit times  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   188      IfxAsclin_IdleDelay_7      /**< \brief idle delay in 7 bit times  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   189  } IfxAsclin_IdleDelay;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   190  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   191  /** \brief Defines the leading delay in bit times in SPI mode. ASC mode: not applicable.\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   192   * LIN mode: delay between the end of the break and the start of the sync character.\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   193   * Definition in Ifx_ASCLIN.FRAMECON.B.LEAD
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   194   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   195  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   196  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   197      IfxAsclin_LeadDelay_0,     /**< \brief lead delay in 0 bit times  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   198      IfxAsclin_LeadDelay_1,     /**< \brief lead delay in 1 bit times  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   199      IfxAsclin_LeadDelay_2,     /**< \brief lead delay in 2 bit times  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   200      IfxAsclin_LeadDelay_3,     /**< \brief lead delay in 3 bit times  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   201      IfxAsclin_LeadDelay_4,     /**< \brief lead delay in 4 bit times  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   202      IfxAsclin_LeadDelay_5,     /**< \brief lead delay in 5 bit times  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   203      IfxAsclin_LeadDelay_6,     /**< \brief lead delay in 6 bit times  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   204      IfxAsclin_LeadDelay_7      /**< \brief lead delay in 7 bit times  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   205  } IfxAsclin_LeadDelay;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   206  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   207  /** \brief Configures if the module in LIN mode operates as master or slave\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   208   * Definition in Ifx_ASCLIN.LIN.CON.B.MS
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   209   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   210  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   211  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   212      IfxAsclin_LinMode_slave  = 0, /**< \brief operates in slave mode */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   213      IfxAsclin_LinMode_master = 1  /**< \brief operates in master mode */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   214  } IfxAsclin_LinMode;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   215  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   216  /** \brief Defines the timeout threshold of RESPOSE bit is for LIN response timeout or LIN frame timeout.\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   217   * Definition in Ifx_ASCLIN.DATCON.B.RM
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   218   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   219  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   220  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   221      IfxAsclin_LinResponseTimeoutMode_frameTimeout    = 0, /**< \brief timeout threshold is for frame */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   222      IfxAsclin_LinResponseTimeoutMode_responseTimeout = 1  /**< \brief timeout threshold is for reponse */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   223  } IfxAsclin_LinResponseTimeoutMode;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   224  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   225  /** \brief Defines the bit length in ticks in the range of 1 to 16. The lengths of 1 to 3 are not allowed\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   226   * Definition in Ifx_ASCLIN.BITCON.B.OVERSAMPLING
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   227   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   228  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   229  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   230      IfxAsclin_OversamplingFactor_4  = 3,   /**< \brief oversampling factor 4 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   231      IfxAsclin_OversamplingFactor_5  = 4,   /**< \brief oversampling factor 5 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   232      IfxAsclin_OversamplingFactor_6  = 5,   /**< \brief oversampling factor 6 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   233      IfxAsclin_OversamplingFactor_7  = 6,   /**< \brief oversampling factor 7 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   234      IfxAsclin_OversamplingFactor_8  = 7,   /**< \brief oversampling factor 8 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   235      IfxAsclin_OversamplingFactor_9  = 8,   /**< \brief oversampling factor 9 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   236      IfxAsclin_OversamplingFactor_10 = 9,   /**< \brief oversampling factor 10 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   237      IfxAsclin_OversamplingFactor_11 = 10,  /**< \brief oversampling factor 11 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   238      IfxAsclin_OversamplingFactor_12 = 11,  /**< \brief oversampling factor 12 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   239      IfxAsclin_OversamplingFactor_13 = 12,  /**< \brief oversampling factor 13 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   240      IfxAsclin_OversamplingFactor_14 = 13,  /**< \brief oversampling factor 14 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   241      IfxAsclin_OversamplingFactor_15 = 14,  /**< \brief oversampling factor 15 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   242      IfxAsclin_OversamplingFactor_16 = 15   /**< \brief oversampling factor 16 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   243  } IfxAsclin_OversamplingFactor;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   244  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   245  /** \brief Type of parity bit attached to data bits\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   246   * Definition in Ifx_ASCLIN.FRAMECON.B.ODD
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   247   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   248  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   249  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   250      IfxAsclin_ParityType_even = 0,  /**< \brief even parity */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   251      IfxAsclin_ParityType_odd  = 1   /**< \brief odd parity */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   252  } IfxAsclin_ParityType;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   253  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   254  /** \brief Receive buffer mode\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   255   * Definition in Ifx_ASCLIN.RXFIFOCON.B.BUF
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   256   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   257  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   258  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   259      IfxAsclin_ReceiveBufferMode_rxFifo   = 0, /**< \brief RxFIFO mode */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   260      IfxAsclin_ReceiveBufferMode_rxBuffer = 1  /**< \brief single stage Rx buffer */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   261  } IfxAsclin_ReceiveBufferMode;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   262  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   263  /** \brief Polarity of the RTS and CTS signals\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   264   * Definition in Ifx_ASCLIN.IOCR.B.RCPOL
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   265   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   266  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   267  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   268      IfxAsclin_RtsCtsPolarity_activeHigh = 0,  /**< \brief ready/clear are active-high */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   269      IfxAsclin_RtsCtsPolarity_activeLow  = 1   /**< \brief ready/clear are active-low */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   270  } IfxAsclin_RtsCtsPolarity;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   271  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   272  /** \brief Defines the filling level that triggers a drain (RX) interrupt or DMA access\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   273   * Definition in Ifx_ASCLIN.RXFIFOCON.B.INTLEVEL
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   274   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   275  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   276  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   277      IfxAsclin_RxFifoInterruptLevel_1,     /**< \brief RX FIFO level 1  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   278      IfxAsclin_RxFifoInterruptLevel_2,     /**< \brief RX FIFO level 2  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   279      IfxAsclin_RxFifoInterruptLevel_3,     /**< \brief RX FIFO level 3  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   280      IfxAsclin_RxFifoInterruptLevel_4,     /**< \brief RX FIFO level 4  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   281      IfxAsclin_RxFifoInterruptLevel_5,     /**< \brief RX FIFO level 5  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   282      IfxAsclin_RxFifoInterruptLevel_6,     /**< \brief RX FIFO level 6  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   283      IfxAsclin_RxFifoInterruptLevel_7,     /**< \brief RX FIFO level 7  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   284      IfxAsclin_RxFifoInterruptLevel_8,     /**< \brief RX FIFO level 8  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   285      IfxAsclin_RxFifoInterruptLevel_9,     /**< \brief RX FIFO level 9  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   286      IfxAsclin_RxFifoInterruptLevel_10,    /**< \brief RX FIFO level 10  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   287      IfxAsclin_RxFifoInterruptLevel_11,    /**< \brief RX FIFO level 11  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   288      IfxAsclin_RxFifoInterruptLevel_12,    /**< \brief RX FIFO level 12  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   289      IfxAsclin_RxFifoInterruptLevel_13,    /**< \brief RX FIFO level 13  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   290      IfxAsclin_RxFifoInterruptLevel_14,    /**< \brief RX FIFO level 14  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   291      IfxAsclin_RxFifoInterruptLevel_15,    /**< \brief RX FIFO level 15  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   292      IfxAsclin_RxFifoInterruptLevel_16     /**< \brief RX FIFO level 16  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   293  } IfxAsclin_RxFifoInterruptLevel;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   294  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   295  /** \brief Defines the number of bytes read from the Rx FIFO with one FPI bus read\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   296   * Definition in Ifx_ASCLIN.RXFIFOCON.B.OUTW
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   297   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   298  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   299  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   300      IfxAsclin_RxFifoOutletWidth_0,     /**< \brief number of bytes 0  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   301      IfxAsclin_RxFifoOutletWidth_1,     /**< \brief number of bytes 1  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   302      IfxAsclin_RxFifoOutletWidth_2,     /**< \brief number of bytes 2  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   303      IfxAsclin_RxFifoOutletWidth_3      /**< \brief number of bytes 3  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   304  } IfxAsclin_RxFifoOutletWidth;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   305  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   306  /** \brief Alternate input selection for Rx signal.\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   307   * Definition in Ifx_ASCLIN.IOCR.B.ALTI
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   308   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   309  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   310  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   311      IfxAsclin_RxInputSelect_0,     /**< \brief alternate input selection 0  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   312      IfxAsclin_RxInputSelect_1,     /**< \brief alternate input selection 1  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   313      IfxAsclin_RxInputSelect_2,     /**< \brief alternate input selection 2  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   314      IfxAsclin_RxInputSelect_3,     /**< \brief alternate input selection 3  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   315      IfxAsclin_RxInputSelect_4,     /**< \brief alternate input selection 4  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   316      IfxAsclin_RxInputSelect_5,     /**< \brief alternate input selection 5  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   317      IfxAsclin_RxInputSelect_6,     /**< \brief alternate input selection 6  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   318      IfxAsclin_RxInputSelect_7      /**< \brief alternate input selection 7  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   319  } IfxAsclin_RxInputSelect;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   320  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   321  /** \brief Sample point position\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   322   * Definition in Ifx_ASCLIN.BITCON.B.SAMPLEPOINT
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   323   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   324  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   325  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   326      IfxAsclin_SamplePointPosition_1  = 1,   /**< \brief sample point position at 1 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   327      IfxAsclin_SamplePointPosition_2  = 2,   /**< \brief sample point position at 2 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   328      IfxAsclin_SamplePointPosition_3  = 3,   /**< \brief sample point position at 3 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   329      IfxAsclin_SamplePointPosition_4  = 4,   /**< \brief sample point position at 4 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   330      IfxAsclin_SamplePointPosition_5  = 5,   /**< \brief sample point position at 5 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   331      IfxAsclin_SamplePointPosition_6  = 6,   /**< \brief sample point position at 6 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   332      IfxAsclin_SamplePointPosition_7  = 7,   /**< \brief sample point position at 7 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   333      IfxAsclin_SamplePointPosition_8  = 8,   /**< \brief sample point position at 8 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   334      IfxAsclin_SamplePointPosition_9  = 9,   /**< \brief sample point position at 9 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   335      IfxAsclin_SamplePointPosition_10 = 10,  /**< \brief sample point position at 10 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   336      IfxAsclin_SamplePointPosition_11 = 11,  /**< \brief sample point position at 11 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   337      IfxAsclin_SamplePointPosition_12 = 12,  /**< \brief sample point position at 12 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   338      IfxAsclin_SamplePointPosition_13 = 13,  /**< \brief sample point position at 13 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   339      IfxAsclin_SamplePointPosition_14 = 14,  /**< \brief sample point position at 14 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   340      IfxAsclin_SamplePointPosition_15 = 15   /**< \brief sample point position at 15 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   341  } IfxAsclin_SamplePointPosition;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   342  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   343  /** \brief Number of samples per bit, sample mode/medianfilter\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   344   * Definition in Ifx_ASCLIN.BITCON.B.SM
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   345   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   346  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   347  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   348      IfxAsclin_SamplesPerBit_one   = 0, /**< \brief one sample per bit */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   349      IfxAsclin_SamplesPerBit_three = 1  /**< \brief three samples per bit */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   350  } IfxAsclin_SamplesPerBit;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   351  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   352  /** \brief SPI mode: defines the shift direction of the shift register.\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   353   * ASC and LIN mode: should be set to 0.\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   354   * Definition in Ifx_ASCLIN.FRAMECON.B.MSB
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   355   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   356  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   357  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   358      IfxAsclin_ShiftDirection_lsbFirst = 0,  /**< \brief LSB first */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   359      IfxAsclin_ShiftDirection_msbFirst = 1   /**< \brief MSB first */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   360  } IfxAsclin_ShiftDirection;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   361  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   362  /** \brief Defines the idle level of the SLSO signal, which is the level.\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   363   * Outside the data transmission, leading and trailing time intervals.\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   364   * Definition in Ifx_ASCLIN.IOCR.B.SPOL
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   365   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   366  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   367  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   368      IfxAsclin_SlavePolarity_idleLow  = 0, /**< \brief idle low */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   369      IfxAsclin_SlavePolarity_idlehigh = 1  /**< \brief idle high */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   370  } IfxAsclin_SlavePolarity;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   371  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   372  /** \brief Enable/disable the sensitivity of the module to sleep signal\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   373   * Definition in Ifx_ASCLIN.CLC.B.EDIS
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   374   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   375  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   376  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   377      IfxAsclin_SleepMode_enable  = 0, /**< \brief enables sleep mode */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   378      IfxAsclin_SleepMode_disable = 1  /**< \brief disables sleep mode */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   379  } IfxAsclin_SleepMode;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   380  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   381  /** \brief Error status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   382   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   383  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   384  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   385      IfxAsclin_Status_configurationError = 0,  /**< \brief Configuration error */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   386      IfxAsclin_Status_noError            = 1   /**< \brief No error */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   387  } IfxAsclin_Status;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   388  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   389  /** \brief ASC and LIN mode: number of stop bits (0 is not allowed), SPI mode: trailing delay.\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   390   * Definition in Ifx_ASCLIN.FRAMECON.B.STOP
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   391   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   392  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   393  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   394      IfxAsclin_StopBit_0,     /**< \brief number of stop bits 0  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   395      IfxAsclin_StopBit_1,     /**< \brief number of stop bits 1  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   396      IfxAsclin_StopBit_2,     /**< \brief number of stop bits 2  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   397      IfxAsclin_StopBit_3,     /**< \brief number of stop bits 3  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   398      IfxAsclin_StopBit_4,     /**< \brief number of stop bits 4  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   399      IfxAsclin_StopBit_5,     /**< \brief number of stop bits 5  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   400      IfxAsclin_StopBit_6,     /**< \brief number of stop bits 6  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   401      IfxAsclin_StopBit_7      /**< \brief number of stop bits 7  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   402  } IfxAsclin_StopBit;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   403  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   404  /** \brief OCDS Suspend Control (OCDS.SUS)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   405   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   406  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   407  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   408      IfxAsclin_SuspendMode_none = 0,  /**< \brief No suspend */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   409      IfxAsclin_SuspendMode_hard = 1,  /**< \brief Hard Suspend */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   410      IfxAsclin_SuspendMode_soft = 2   /**< \brief Soft Suspend */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   411  } IfxAsclin_SuspendMode;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   412  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   413  /** \brief Defines the number of bytes written to the Tx FIFO with one FPI bus write\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   414   * Definition in Ifx_ASCLIN.TXFIFOCON.B.INW
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   415   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   416  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   417  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   418      IfxAsclin_TxFifoInletWidth_0,     /**< \brief number of bytes 0  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   419      IfxAsclin_TxFifoInletWidth_1,     /**< \brief number of bytes 1  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   420      IfxAsclin_TxFifoInletWidth_2,     /**< \brief number of bytes 2  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   421      IfxAsclin_TxFifoInletWidth_3      /**< \brief number of bytes 3  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   422  } IfxAsclin_TxFifoInletWidth;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   423  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   424  /** \brief Defines the filling level that triggers a refill (TX) interrupt or DMA access\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   425   * Definition in Ifx_ASCLIN.TXFIFOCON.B.INTLEVEL
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   426   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   427  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   428  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   429      IfxAsclin_TxFifoInterruptLevel_0,     /**< \brief TX FIFO level 0  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   430      IfxAsclin_TxFifoInterruptLevel_1,     /**< \brief TX FIFO level 1  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   431      IfxAsclin_TxFifoInterruptLevel_2,     /**< \brief TX FIFO level 2  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   432      IfxAsclin_TxFifoInterruptLevel_3,     /**< \brief TX FIFO level 3  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   433      IfxAsclin_TxFifoInterruptLevel_4,     /**< \brief TX FIFO level 4  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   434      IfxAsclin_TxFifoInterruptLevel_5,     /**< \brief TX FIFO level 5  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   435      IfxAsclin_TxFifoInterruptLevel_6,     /**< \brief TX FIFO level 6  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   436      IfxAsclin_TxFifoInterruptLevel_7,     /**< \brief TX FIFO level 7  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   437      IfxAsclin_TxFifoInterruptLevel_8,     /**< \brief TX FIFO level 8  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   438      IfxAsclin_TxFifoInterruptLevel_9,     /**< \brief TX FIFO level 9  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   439      IfxAsclin_TxFifoInterruptLevel_10,    /**< \brief TX FIFO level 10  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   440      IfxAsclin_TxFifoInterruptLevel_11,    /**< \brief TX FIFO level 11  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   441      IfxAsclin_TxFifoInterruptLevel_12,    /**< \brief TX FIFO level 12  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   442      IfxAsclin_TxFifoInterruptLevel_13,    /**< \brief TX FIFO level 13  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   443      IfxAsclin_TxFifoInterruptLevel_14,    /**< \brief TX FIFO level 14  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   444      IfxAsclin_TxFifoInterruptLevel_15     /**< \brief TX FIFO level 15  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   445  } IfxAsclin_TxFifoInterruptLevel;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   446  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   447  /** \} */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   448  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   449  /** \addtogroup IfxLld_Asclin_Std_Operative
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   450   * \{ */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   451  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   452  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   453  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   454  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   455  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   456  /** \brief clears all the flags
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   457   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   458   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   459   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   460  IFX_INLINE void IfxAsclin_clearAllFlags(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   461  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   462  /** \brief Clears the break detected flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   463   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   464   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   465   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   466  IFX_INLINE void IfxAsclin_clearBreakDetectedFlag(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   467  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   468  /** \brief Clears the collision detection error flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   469   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   470   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   471   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   472  IFX_INLINE void IfxAsclin_clearCollisionDetectionErrorFlag(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   473  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   474  /** \brief Clears the falling edge detected flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   475   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   476   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   477   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   478  IFX_INLINE void IfxAsclin_clearFallingEdgeDetectedFlag(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   479  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   480  /** \brief Clears the frame error flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   481   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   482   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   483   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   484  IFX_INLINE void IfxAsclin_clearFrameErrorFlag(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   485  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   486  /** \brief Clears the header timeout flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   487   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   488   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   489   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   490  IFX_INLINE void IfxAsclin_clearHeaderTimeoutFlag(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   491  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   492  /** \brief Clears the kernel reset status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   493   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   494   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   495   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   496  IFX_INLINE void IfxAsclin_clearKernelResetStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   497  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   498  /** \brief Clears the auto baudrate detection error flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   499   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   500   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   501   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   502  IFX_INLINE void IfxAsclin_clearLinAutoBaudDetectionErrorFlag(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   503  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   504  /** \brief Clears the LIN checksum error flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   505   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   506   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   507   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   508  IFX_INLINE void IfxAsclin_clearLinChecksumErrorFlag(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   509  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   510  /** \brief Clears the LIN parity error flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   511   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   512   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   513   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   514  IFX_INLINE void IfxAsclin_clearLinParityErrorFlag(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   515  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   516  /** \brief Clears the parity error flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   517   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   518   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   519   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   520  IFX_INLINE void IfxAsclin_clearParityErrorFlag(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   521  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   522  /** \brief Clears the raising edge detected flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   523   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   524   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   525   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   526  IFX_INLINE void IfxAsclin_clearRaisingEdgeDetectedFlag(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   527  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   528  /** \brief Clears the response timeout flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   529   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   530   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   531   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   532  IFX_INLINE void IfxAsclin_clearResponseTimeoutFlag(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   533  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   534  /** \brief Clears the Rx FIFO level flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   535   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   536   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   537   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   538  IFX_INLINE void IfxAsclin_clearRxFifoFillLevelFlag(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   539  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   540  /** \brief Clears the Rx FIFO overflow flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   541   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   542   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   543   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   544  IFX_INLINE void IfxAsclin_clearRxFifoOverflowFlag(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   545  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   546  /** \brief Clears the Rx FIFO underflow flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   547   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   548   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   549   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   550  IFX_INLINE void IfxAsclin_clearRxFifoUnderflowFlag(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   551  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   552  /** \brief Clears the receive header end flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   553   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   554   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   555   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   556  IFX_INLINE void IfxAsclin_clearRxHeaderEndFlag(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   557  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   558  /** \brief Clears the receive response end flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   559   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   560   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   561   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   562  IFX_INLINE void IfxAsclin_clearRxResponseEndFlag(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   563  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   564  /** \brief Clears the transmission pending flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   565   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   566   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   567   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   568  IFX_INLINE void IfxAsclin_clearTransmissionCompletedFlag(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   569  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   570  /** \brief Clears the Tx FIFO level flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   571   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   572   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   573   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   574  IFX_INLINE void IfxAsclin_clearTxFifoFillLevelFlag(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   575  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   576  /** \brief Clears the Tx FIFO overflow flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   577   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   578   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   579   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   580  IFX_INLINE void IfxAsclin_clearTxFifoOverflowFlag(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   581  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   582  /** \brief Clears the transmit header end flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   583   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   584   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   585   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   586  IFX_INLINE void IfxAsclin_clearTxHeaderEndFlag(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   587  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   588  /** \brief Clears the transmit response end flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   589   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   590   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   591   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   592  IFX_INLINE void IfxAsclin_clearTxResponseEndFlag(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   593  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   594  /** \brief Flushes (empties) the Rx FIFO
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   595   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   596   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   597   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   598  IFX_INLINE void IfxAsclin_flushRxFifo(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   599  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   600  /** \brief Flushes (empties) the Tx FIFO
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   601   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   602   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   603   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   604  IFX_INLINE void IfxAsclin_flushTxFifo(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   605  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   606  /** \brief Sets the baudrate detection's lower limit
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   607   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   608   * \param limit value of the lower limit
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   609   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   610   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   611  IFX_INLINE void IfxAsclin_setBrdLowerlimt(Ifx_ASCLIN *asclin, uint8 limit);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   612  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   613  /** \brief Sets the baudrate detection's upper limit
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   614   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   615   * \param limit value of the upper limit
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   616   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   617   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   618  IFX_INLINE void IfxAsclin_setBrdUpperlimt(Ifx_ASCLIN *asclin, uint8 limit);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   619  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   620  /** \brief Sets the checksum injection
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   621   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   622   * \param csi checksum injection selection (not written / written)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   623   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   624   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   625  IFX_INLINE void IfxAsclin_setChecksumInjection(Ifx_ASCLIN *asclin, IfxAsclin_ChecksumInjection csi);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   626  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   627  /** \brief Sets the checksum mode
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   628   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   629   * \param mode checksum mode selection (classic / enhanced)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   630   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   631   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   632  IFX_INLINE void IfxAsclin_setChecksumMode(Ifx_ASCLIN *asclin, IfxAsclin_Checksum mode);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   633  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   634  /** \brief Sets the data length (number of bits per transfer)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   635   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   636   * \param length data length selection
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   637   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   638   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   639  IFX_INLINE void IfxAsclin_setDataLength(Ifx_ASCLIN *asclin, IfxAsclin_DataLength length);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   640  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   641  /** \brief Sets the denominator of the fractional divider
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   642   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   643   * \param denominator value of the denominator
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   644   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   645   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   646  IFX_INLINE void IfxAsclin_setDenominator(Ifx_ASCLIN *asclin, uint16 denominator);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   647  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   648  /** \brief Sets the disable module request
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   649   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   650   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   651   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   652  IFX_INLINE void IfxAsclin_setDisableModuleRequest(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   653  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   654  /** \brief Sets the enable module request
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   655   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   656   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   657   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   658  IFX_INLINE void IfxAsclin_setEnableModuleRequest(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   659  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   660  /** \brief Sets digital glitch filter depth
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   661   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   662   * \param depth digital glitch filter depth selection (1 to 63)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   663   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   664   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   665  IFX_INLINE void IfxAsclin_setFilterDepth(Ifx_ASCLIN *asclin, uint8 depth);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   666  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   667  /** \brief Sets the header response selection
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   668   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   669   * \param type type of selection (header and response or header only)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   670   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   671   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   672  IFX_INLINE void IfxAsclin_setHeaderResponseSelect(Ifx_ASCLIN *asclin, IfxAsclin_HeaderResponseSelect type);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   673  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   674  /** \brief Sets the idle delay
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   675   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   676   * \param delay idle delay selection
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   677   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   678   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   679  IFX_INLINE void IfxAsclin_setIdleDelay(Ifx_ASCLIN *asclin, IfxAsclin_IdleDelay delay);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   680  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   681  /** \brief Sets the kernal reset of the KRST1
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   682   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   683   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   684   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   685  IFX_INLINE void IfxAsclin_setKernelResetOne(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   686  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   687  /** \brief Sets the kernel reset of the KRST0
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   688   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   689   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   690   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   691  IFX_INLINE void IfxAsclin_setKernelResetZero(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   692  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   693  /** \brief Sets the lead delay
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   694   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   695   * \param delay lead delay selection
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   696   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   697   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   698  IFX_INLINE void IfxAsclin_setLeadDelay(Ifx_ASCLIN *asclin, IfxAsclin_LeadDelay delay);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   699  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   700  /** \brief Sets the LIN break length
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   701   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   702   * \param length value of the break length
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   703   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   704   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   705  IFX_INLINE void IfxAsclin_setLinBreakLength(Ifx_ASCLIN *asclin, uint8 length);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   706  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   707  /** \brief Sets the LIN header timeout
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   708   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   709   * \param timeout value of the header timeout
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   710   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   711   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   712  IFX_INLINE void IfxAsclin_setLinHeaderTimeout(Ifx_ASCLIN *asclin, uint8 timeout);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   713  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   714  /** \brief Sets the LIN mode of operation
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   715   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   716   * \param mode mode selection (slave / master)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   717   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   718   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   719  IFX_INLINE void IfxAsclin_setLinMode(Ifx_ASCLIN *asclin, IfxAsclin_LinMode mode);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   720  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   721  /** \brief Sets the LIN response timeout mode
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   722   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   723   * \param mode LIN response timeout mode selection
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   724   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   725   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   726  IFX_INLINE void IfxAsclin_setLinResponseTimeoutMode(Ifx_ASCLIN *asclin, IfxAsclin_LinResponseTimeoutMode mode);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   727  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   728  /** \brief Sets the LIN response timeout threshold
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   729   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   730   * \param threshold value of the tomeout threshold (1 to 256 bit times)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   731   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   732   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   733  IFX_INLINE void IfxAsclin_setLinResponseTimeoutThreshold(Ifx_ASCLIN *asclin, uint16 threshold);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   734  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   735  /** \brief Sets the numerator of the fractional divider
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   736   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   737   * \param numerator value of the numerator
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   738   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   739   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   740  IFX_INLINE void IfxAsclin_setNumerator(Ifx_ASCLIN *asclin, uint16 numerator);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   741  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   742  /** \brief Sets the division ratio of the baudrate post divider
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   743   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   744   * \param ovsFactor value of oversampling factor
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   745   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   746   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   747  IFX_INLINE void IfxAsclin_setOversampling(Ifx_ASCLIN *asclin, IfxAsclin_OversamplingFactor ovsFactor);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   748  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   749  /** \brief Sets the parity type
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   750   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   751   * \param type parity type selction (even / odd)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   752   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   753   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   754  IFX_INLINE void IfxAsclin_setParityType(Ifx_ASCLIN *asclin, IfxAsclin_ParityType type);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   755  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   756  /** \brief Sets the division ratio of the predivider (prescaler)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   757   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   758   * \param prescaler value of prescaler
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   759   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   760   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   761  IFX_INLINE void IfxAsclin_setPrescaler(Ifx_ASCLIN *asclin, uint16 prescaler);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   762  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   763  /** \brief Sets the receive buffer mode
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   764   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   765   * \param mode receive buffer mode selection (Rx FIFO or single stage Rx buffer)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   766   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   767   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   768  IFX_INLINE void IfxAsclin_setRxBufferMode(Ifx_ASCLIN *asclin, IfxAsclin_ReceiveBufferMode mode);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   769  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   770  /** \brief Sets the Tx FIFO interrupt level
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   771   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   772   * \param level interrupt level selection
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   773   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   774   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   775  IFX_INLINE void IfxAsclin_setRxFifoInterruptLevel(Ifx_ASCLIN *asclin, IfxAsclin_RxFifoInterruptLevel level);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   776  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   777  /** \brief Sets the receive FIFO outlet width
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   778   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   779   * \param width number of bytes read to the Rx FIFO with one FPI bus read
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   780   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   781   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   782  IFX_INLINE void IfxAsclin_setRxFifoOutletWidth(Ifx_ASCLIN *asclin, IfxAsclin_RxFifoOutletWidth width);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   783  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   784  /** \brief Sets the sample mode (number of samples per bit / median filter)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   785   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   786   * \param medianFilter value of the median filter
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   787   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   788   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   789  IFX_INLINE void IfxAsclin_setSampleMode(Ifx_ASCLIN *asclin, IfxAsclin_SamplesPerBit medianFilter);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   790  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   791  /** \brief Sets the sampling point position
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   792   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   793   * \param spPosition sample point position selection
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   794   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   795   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   796  IFX_INLINE void IfxAsclin_setSamplePointPosition(Ifx_ASCLIN *asclin, IfxAsclin_SamplePointPosition spPosition);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   797  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   798  /** \brief Sets the shift direction
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   799   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   800   * \param dir shift direction selection (LSB / MSB first)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   801   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   802   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   803  IFX_INLINE void IfxAsclin_setShiftDirection(Ifx_ASCLIN *asclin, IfxAsclin_ShiftDirection dir);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   804  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   805  /** \brief Sets the number of stop bits
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   806   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   807   * \param stopBit number of stop bits selection
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   808   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   809   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   810  IFX_INLINE void IfxAsclin_setStopBit(Ifx_ASCLIN *asclin, IfxAsclin_StopBit stopBit);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   811  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   812  /** \brief Sets the transmit header request flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   813   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   814   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   815   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   816  IFX_INLINE void IfxAsclin_setTransmitHeaderRequestFlag(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   817  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   818  /** \brief Sets the transmit response request flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   819   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   820   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   821   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   822  IFX_INLINE void IfxAsclin_setTransmitResponseRequestFlag(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   823  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   824  /** \brief Sets the transmission wake request flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   825   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   826   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   827   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   828  IFX_INLINE void IfxAsclin_setTransmitWakeRequestFlag(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   829  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   830  /** \brief Sets the transmit FIFO inlet width
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   831   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   832   * \param width number of bytes written to the Tx FIFO with one FPI bus write
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   833   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   834   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   835  IFX_INLINE void IfxAsclin_setTxFifoInletWidth(Ifx_ASCLIN *asclin, IfxAsclin_TxFifoInletWidth width);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   836  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   837  /** \brief Sets the Tx FIFO interrupt level
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   838   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   839   * \param level interrupt level selection
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   840   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   841   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   842  IFX_INLINE void IfxAsclin_setTxFifoInterruptLevel(Ifx_ASCLIN *asclin, IfxAsclin_TxFifoInterruptLevel level);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   843  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   844  /** \} */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   845  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   846  /** \addtogroup IfxLld_Asclin_Std_Utility
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   847   * \{ */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   848  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   849  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   850  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   851  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   852  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   853  /** \brief Returns the break detected flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   854   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   855   * \return break detected flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   856   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   857  IFX_INLINE boolean IfxAsclin_getBreakDetectedFlagStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   858  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   859  /** \brief Returns the clock source
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   860   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   861   * \return clock source
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   862   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   863  IFX_INLINE uint8 IfxAsclin_getClockSource(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   864  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   865  /** \brief Returns the clock status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   866   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   867   * \return clock status (off / on)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   868   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   869  IFX_INLINE boolean IfxAsclin_getClockStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   870  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   871  /** \brief Returns the collision detection error flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   872   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   873   * \return collision detection error flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   874   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   875  IFX_INLINE boolean IfxAsclin_getCollisionDetectionErrorFlagStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   876  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   877  /** \brief Returns  the falling edge detected flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   878   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   879   * \return falling edge detected flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   880   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   881  IFX_INLINE boolean IfxAsclin_getFallingEdgeDetectedFlagStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   882  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   883  /** \brief Returns the frame error flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   884   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   885   * \return frame error flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   886   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   887  IFX_INLINE boolean IfxAsclin_getFrameErrorFlagStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   888  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   889  /** \brief Returns the header timeout flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   890   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   891   * \return header timeout flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   892   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   893  IFX_INLINE boolean IfxAsclin_getHeaderTimeoutFlagStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   894  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   895  /** \brief Returns the kernel reset status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   896   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   897   * \return kernel reset status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   898   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   899  IFX_INLINE boolean IfxAsclin_getKernelResetStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   900  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   901  /** \brief Returns the LIN auto baudrate detection error flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   902   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   903   * \return LIN auto baudrate detection error flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   904   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   905  IFX_INLINE boolean IfxAsclin_getLinAutoBaudDetectionErrorFlagStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   906  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   907  /** \brief Returns the LIN checksum error flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   908   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   909   * \return LIN checksum error flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   910   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   911  IFX_INLINE boolean IfxAsclin_getLinChecksumErrorFlagStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   912  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   913  /** \brief Returns the LIN parity error flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   914   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   915   * \return LIN parity error flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   916   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   917  IFX_INLINE boolean IfxAsclin_getLinParityErrorFlagStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   918  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   919  /** \brief Returns the module status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   920   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   921   * \return module status (enabled / disabled)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   922   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   923  IFX_INLINE boolean IfxAsclin_getModuleStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   924  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   925  /** \brief Returns the parity error flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   926   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   927   * \return parity error flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   928   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   929  IFX_INLINE boolean IfxAsclin_getParityErrorFlagStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   930  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   931  /** \brief Returns the division ratio of the predivider (prescaler)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   932   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   933   * \return value of prescaler
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   934   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   935  IFX_INLINE uint16 IfxAsclin_getPrescaler(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   936  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   937  /** \brief Returns the raising edge detected flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   938   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   939   * \return raising edge detected flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   940   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   941  IFX_INLINE boolean IfxAsclin_getRaisingEdgeDetectedFlagStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   942  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   943  /** \brief Returns the received signal status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   944   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   945   * \return received signal status (0 is low & 1 is high)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   946   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   947  IFX_INLINE boolean IfxAsclin_getReceiveSignalStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   948  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   949  /** \brief Returns the response timeout flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   950   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   951   * \return response timeout flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   952   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   953  IFX_INLINE boolean IfxAsclin_getResponseTimeoutFlagStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   954  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   955  /** \brief Returns the current filling level of Tx FIFO
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   956   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   957   * \return current filling level of Rx FIFO
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   958   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   959  IFX_INLINE uint8 IfxAsclin_getRxFifoFillLevel(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   960  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   961  /** \brief Returns the Rx FIFO level flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   962   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   963   * \return Rx FIFO level flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   964   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   965  IFX_INLINE boolean IfxAsclin_getRxFifoFillLevelFlagStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   966  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   967  /** \brief Returns the receive FIFO inlet width
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   968   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   969   * \return number of bytes read to the Rx FIFO with one FPI bus read
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   970   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   971  IFX_INLINE uint8 IfxAsclin_getRxFifoOutletWidth(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   972  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   973  /** \brief Returns the Rx FIFO overflow flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   974   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   975   * \return Rx FIFO overflow flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   976   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   977  IFX_INLINE boolean IfxAsclin_getRxFifoOverflowFlagStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   978  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   979  /** \brief Returns the Rx FIFO underflow flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   980   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   981   * \return Rx FIFO underflow flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   982   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   983  IFX_INLINE boolean IfxAsclin_getRxFifoUnderflowFlagStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   984  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   985  /** \brief Returns the receive header end flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   986   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   987   * \return receive header end flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   988   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   989  IFX_INLINE boolean IfxAsclin_getRxHeaderEndFlagStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   990  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   991  /** \brief Returns the receive response end flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   992   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   993   * \return receive response end flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   994   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   995  IFX_INLINE boolean IfxAsclin_getRxResponseEndFlagStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   996  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   997  /** \brief Returns the transmission pending flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   998   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   999   * \return transmission pending flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1000   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1001  IFX_INLINE boolean IfxAsclin_getTransmissionCompletedFlagStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1002  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1003  /** \brief Returns the transmit signal status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1004   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1005   * \return transmit signal status (0 is low & 1 is high)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1006   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1007  IFX_INLINE boolean IfxAsclin_getTransmitSignalStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1008  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1009  /** \brief Returns the current filling level of Tx FIFO
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1010   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1011   * \return current filling level of Tx FIFO
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1012   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1013  IFX_INLINE uint8 IfxAsclin_getTxFifoFillLevel(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1014  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1015  /** \brief Returns the Tx FIFO level flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1016   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1017   * \return Tx FIFO level flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1018   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1019  IFX_INLINE boolean IfxAsclin_getTxFifoFillLevelFlagStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1020  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1021  /** \brief Returns the transmit FIFO inlet width
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1022   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1023   * \return number of bytes written to the Tx FIFO with one FPI bus write
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1024   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1025  IFX_INLINE uint8 IfxAsclin_getTxFifoInletWidth(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1026  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1027  /** \brief Returns the Tx FIFO overflow flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1028   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1029   * \return Tx FIFO overflow flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1030   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1031  IFX_INLINE boolean IfxAsclin_getTxFifoOverflowFlagStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1032  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1033  /** \brief Returns the transmit header end flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1034   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1035   * \return transmit header end flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1036   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1037  IFX_INLINE boolean IfxAsclin_getTxHeaderEndFlagStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1038  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1039  /** \brief Returns the transmit response end flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1040   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1041   * \return transmit response end flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1042   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1043  IFX_INLINE boolean IfxAsclin_getTxResponseEndFlagStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1044  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1045  /** \brief Sets the sensitivity of the module to sleep signal
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1046   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1047   * \param mode mode selection (enable / disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1048   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1049   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1050  IFX_INLINE void IfxAsclin_setSleepMode(Ifx_ASCLIN *asclin, IfxAsclin_SleepMode mode);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1051  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1052  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1053  /*-------------------------Global Function Prototypes-------------------------*/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1054  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1055  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1056  /** \brief API to get the address for ASCLIN HW module register memory map
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1057   * \param asclin Resource index of the ASCLIN
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1058   * \return ASCLIN module register address
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1059   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1060  IFX_EXTERN Ifx_ASCLIN *IfxAsclin_getAddress(IfxAsclin_Index asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1061  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1062  /** \brief Returns the ASCLIN module FA frequency in Hz
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1063   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1064   * \return Returns the ASCLIN module FA frequency in Hz
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1065   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1066  IFX_EXTERN float32 IfxAsclin_getFaFrequency(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1067  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1068  /** \brief API to get the resource index of the ASCLIN specified.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1069   * \return asclin resource index
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1070   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1071  IFX_EXTERN IfxAsclin_Index IfxAsclin_getIndex(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1072  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1073  /** \brief Returns the OVS frequency
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1074   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1075   * \return Returns the ASCLIN module OVS frequency in Hz
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1076   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1077  IFX_EXTERN float32 IfxAsclin_getOvsFrequency(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1078  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1079  /** \brief Returns the PD frequency
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1080   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1081   * \return Returns the ASCLIN module PD frequency in Hz
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1082   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1083  IFX_EXTERN float32 IfxAsclin_getPdFrequency(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1084  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1085  /** \brief Returns the SHIFT frequency
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1086   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1087   * \return Returns the ASCLIN module SHIFT frequency in Hz
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1088   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1089  IFX_EXTERN float32 IfxAsclin_getShiftFrequency(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1090  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1091  /** \brief resets Asclin kernel
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1092   * \param asclin pointer to ASCLIN resgisters
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1093   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1094   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1095  IFX_EXTERN void IfxAsclin_resetModule(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1096  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1097  /** \} */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1098  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1099  /** \addtogroup IfxLld_Asclin_Std_Configuration
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1100   * \{ */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1101  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1102  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1103  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1104  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1105  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1106  /** \brief disables all flags
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1107   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1108   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1109   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1110  IFX_INLINE void IfxAsclin_disableAllFlags(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1111  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1112  /** \brief Enables/disables the auto baudrate detection
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1113   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1114   * \param enable choice (enable / disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1115   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1116   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1117  IFX_INLINE void IfxAsclin_enableAutoBaudrateDetection(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1118  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1119  /** \brief Enables/disables break detected flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1120   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1121   * \param enable choice (enable / disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1122   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1123   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1124  IFX_INLINE void IfxAsclin_enableBreakDetectedFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1125  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1126  /** \brief Enables/disables the collision detection
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1127   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1128   * \param enable choice (enable/disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1129   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1130   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1131  IFX_INLINE void IfxAsclin_enableCollisionDetection(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1132  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1133  /** \brief Enables/disables LIN collision detection error flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1134   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1135   * \param enable choice (enable / disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1136   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1137   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1138  IFX_INLINE void IfxAsclin_enableCollisionDetectionErrorFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1139  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1140  /** \brief Enables/disables CTS
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1141   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1142   * \param enable choice (enable/disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1143   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1144   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1145  IFX_INLINE void IfxAsclin_enableCts(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1146  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1147  /** \brief Enables/disables falling edge detected flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1148   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1149   * \param enable choice (enable / disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1150   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1151   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1152  IFX_INLINE void IfxAsclin_enableFallingEdgeDetectedFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1153  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1154  /** \brief Enables/disables frame error flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1155   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1156   * \param enable choice (enable / disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1157   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1158   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1159  IFX_INLINE void IfxAsclin_enableFrameErrorFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1160  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1161  /** \brief Enables/disables the hardware checksum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1162   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1163   * \param enable choice (enable / disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1164   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1165   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1166  IFX_INLINE void IfxAsclin_enableHardwareChecksum(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1167  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1168  /** \brief Enables/disables header timeout flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1169   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1170   * \param enable choice (enable / disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1171   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1172   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1173  IFX_INLINE void IfxAsclin_enableHeaderTimeoutFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1174  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1175  /** \brief Enables/disables LIN auto baudrate detection error flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1176   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1177   * \param enable choice (enable / disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1178   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1179   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1180  IFX_INLINE void IfxAsclin_enableLinAutoBaudDetectionErrorFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1181  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1182  /** \brief Enables/disables LIN checksum error flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1183   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1184   * \param enable choice (enable / disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1185   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1186   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1187  IFX_INLINE void IfxAsclin_enableLinChecksumErrorFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1188  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1189  /** \brief Enables/disables LIN parity error flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1190   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1191   * \param enable choice (enable / disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1192   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1193   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1194  IFX_INLINE void IfxAsclin_enableLinParityErrorFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1195  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1196  /** \brief Enables/disables the loop back mode
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1197   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1198   * \param enable choice (enable/disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1199   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1200   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1201  IFX_INLINE void IfxAsclin_enableLoopBackMode(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1202  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1203  /** \brief Enables/disables the parity bit attachment to tha data bits
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1204   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1205   * \param enable choice (enable/disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1206   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1207   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1208  IFX_INLINE void IfxAsclin_enableParity(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1209  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1210  /** \brief Enables/disables parity error flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1211   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1212   * \param enable choice (enable / disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1213   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1214   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1215  IFX_INLINE void IfxAsclin_enableParityErrorFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1216  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1217  /** \brief Enables/disables raising edge detected flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1218   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1219   * \param enable choice (enable / disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1220   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1221   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1222  IFX_INLINE void IfxAsclin_enableRaisingEdgeDetectedFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1223  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1224  /** \brief Enables/disables response timeout flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1225   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1226   * \param enable choice (enable / disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1227   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1228   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1229  IFX_INLINE void IfxAsclin_enableResponseTimeoutFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1230  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1231  /** \brief Enables/disables Rx FIFO level flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1232   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1233   * \param enable choice (enable / disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1234   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1235   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1236  IFX_INLINE void IfxAsclin_enableRxFifoFillLevelFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1237  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1238  /** \brief Enables/disables the receive FIFO outlet to allow filling of Rx FIFO through shift register
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1239   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1240   * \param enable choice (enable/disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1241   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1242   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1243  IFX_INLINE void IfxAsclin_enableRxFifoInlet(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1244  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1245  /** \brief Enables/disables Rx FIFO overflow flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1246   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1247   * \param enable choice (enable / disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1248   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1249   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1250  IFX_INLINE void IfxAsclin_enableRxFifoOverflowFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1251  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1252  /** \brief Enables/disables Rx FIFO underflow flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1253   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1254   * \param enable choice (enable / disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1255   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1256   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1257  IFX_INLINE void IfxAsclin_enableRxFifoUnderflowFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1258  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1259  /** \brief Enables/disables receive header end flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1260   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1261   * \param enable choice (enable / disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1262   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1263   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1264  IFX_INLINE void IfxAsclin_enableRxHeaderEndFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1265  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1266  /** \brief Enables/disables receive response end flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1267   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1268   * \param enable choice (enable / disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1269   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1270   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1271  IFX_INLINE void IfxAsclin_enableRxResponseEndFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1272  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1273  /** \brief Enables/disables transmission completed flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1274   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1275   * \param enable choice (enable / disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1276   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1277   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1278  IFX_INLINE void IfxAsclin_enableTransmissionCompletedFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1279  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1280  /** \brief Enables/disables Tx FIFO level flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1281   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1282   * \param enable choice (enable / disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1283   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1284   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1285  IFX_INLINE void IfxAsclin_enableTxFifoFillLevelFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1286  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1287  /** \brief Enables/disables the transmit FIFO outlet to allow transmission
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1288   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1289   * \param enable choice (enable/disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1290   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1291   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1292  IFX_INLINE void IfxAsclin_enableTxFifoOutlet(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1293  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1294  /** \brief Enables/disables Tx FIFO overflow flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1295   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1296   * \param enable choice (enable / disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1297   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1298   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1299  IFX_INLINE void IfxAsclin_enableTxFifoOverflowFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1300  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1301  /** \brief Enables/disables transmit header end flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1302   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1303   * \param enable choice (enable / disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1304   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1305   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1306  IFX_INLINE void IfxAsclin_enableTxHeaderEndFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1307  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1308  /** \brief Enables/disables transmit response end flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1309   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1310   * \param enable choice (enable / disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1311   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1312   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1313  IFX_INLINE void IfxAsclin_enableTxResponseEndFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1314  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1315  /** \brief Returns the module's suspend state.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1316   * TRUE :if module is suspended.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1317   * FALSE:if module is not yet suspended.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1318   * \param asclin Pointer to ASCLIN module registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1319   * \return Suspend status (TRUE / FALSE)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1320   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1321  IFX_INLINE boolean IfxAsclin_isModuleSuspended(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1322  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1323  /** \brief Selects the clock polarity
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1324   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1325   * \param cpol CPOL selection
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1326   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1327   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1328  IFX_INLINE void IfxAsclin_setClockPolarity(Ifx_ASCLIN *asclin, IfxAsclin_ClockPolarity cpol);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1329  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1330  /** \brief Selects the CTS input pin
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1331   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1332   * \param ctsi CTS input pin selection
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1333   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1334   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1335  IFX_INLINE void IfxAsclin_setCtsInput(Ifx_ASCLIN *asclin, IfxAsclin_CtsInputSelect ctsi);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1336  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1337  /** \brief Selects the module's mode of operation
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1338   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1339   * \param mode mode selction
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1340   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1341   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1342  IFX_INLINE void IfxAsclin_setFrameMode(Ifx_ASCLIN *asclin, IfxAsclin_FrameMode mode);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1343  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1344  /** \brief Selects the RTS/CTS polarity
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1345   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1346   * \param rcpol RCPOL selection
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1347   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1348   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1349  IFX_INLINE void IfxAsclin_setRtsCtsPolarity(Ifx_ASCLIN *asclin, IfxAsclin_RtsCtsPolarity rcpol);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1350  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1351  /** \brief Selects the alternate input for Rx signal
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1352   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1353   * \param alti alternate input selection of Rx signal
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1354   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1355   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1356  IFX_INLINE void IfxAsclin_setRxInput(Ifx_ASCLIN *asclin, IfxAsclin_RxInputSelect alti);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1357  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1358  /** \brief Selects the slave polarity
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1359   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1360   * \param spol SPOL selection
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1361   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1362   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1363  IFX_INLINE void IfxAsclin_setSlavePolarity(Ifx_ASCLIN *asclin, IfxAsclin_SlavePolarity spol);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1364  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1365  /** \brief Configure the Module to Hard/Soft suspend mode.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1366   * Note: The api works only when the OCDS is enabled and in Supervisor Mode. When OCDS is disabled the OCS suspend control is ineffective.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1367   * \param asclin Pointer to ASCLIN module registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1368   * \param mode Module suspend mode
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1369   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1370   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1371  IFX_INLINE void IfxAsclin_setSuspendMode(Ifx_ASCLIN *asclin, IfxAsclin_SuspendMode mode);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1372  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1373  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1374  /*-------------------------Global Function Prototypes-------------------------*/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1375  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1376  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1377  /** \brief Set the bit timing
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1378   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1379   * \note this function required FA source and the PD frequency to be set to their final values
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1380   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1381   * \param baudrate Required baudrate
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1382   * \param oversampling The oversampling factor
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1383   * \param samplepoint The sample point position
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1384   * \param medianFilter Number of samples per bit (median filter)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1385   * \return TRUE if configuration was successfull
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1386   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1387  IFX_EXTERN boolean IfxAsclin_setBitTiming(Ifx_ASCLIN *asclin, float32 baudrate, IfxAsclin_OversamplingFactor oversampling, IfxAsclin_SamplePointPosition samplepoint, IfxAsclin_SamplesPerBit medianFilter);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1388  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1389  /** \} */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1390  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1391  /** \addtogroup IfxLld_Asclin_Std_External
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1392   * \{ */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1393  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1394  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1395  /*-------------------------Global Function Prototypes-------------------------*/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1396  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1397  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1398  /** \brief Disables the module
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1399   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1400   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1401   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1402  IFX_EXTERN void IfxAsclin_disableModule(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1403  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1404  /** \brief Enables the ASC error interrupt Flags
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1405   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1406   * \param parEnable parity error
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1407   * \param rfoEnable Rx FIFO overflow error
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1408   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1409   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1410  IFX_EXTERN void IfxAsclin_enableAscErrorFlags(Ifx_ASCLIN *asclin, boolean parEnable, boolean rfoEnable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1411  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1412  /** \brief Enables the module
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1413   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1414   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1415   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1416  IFX_EXTERN void IfxAsclin_enableModule(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1417  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1418  /** \brief Returns the SRC pointer for ERR
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1419   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1420   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1421  IFX_EXTERN volatile Ifx_SRC_SRCR *IfxAsclin_getSrcPointerEr(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1422  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1423  /** \brief Returns the  SRC pointer for Rx
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1424   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1425   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1426  IFX_EXTERN volatile Ifx_SRC_SRCR *IfxAsclin_getSrcPointerRx(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1427  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1428  /** \brief Returns the SRC pointer for Tx
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1429   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1430   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1431  IFX_EXTERN volatile Ifx_SRC_SRCR *IfxAsclin_getSrcPointerTx(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1432  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1433  /** \brief Reads data up to 16 bits
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1434   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1435   * \param data Array where the read data shall be stored
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1436   * \param count number of items to read
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1437   * \return number of items that could not be read
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1438   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1439  IFX_EXTERN uint32 IfxAsclin_read16(Ifx_ASCLIN *asclin, uint16 *data, uint32 count);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1440  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1441  /** \brief Reads data up to 32 bits
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1442   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1443   * \param data Array where the read data shall be stored
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1444   * \param count number of items to read
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1445   * \return number of items that could not be read
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1446   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1447  IFX_EXTERN uint32 IfxAsclin_read32(Ifx_ASCLIN *asclin, uint32 *data, uint32 count);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1448  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1449  /** \brief Reads data up to 8 bits
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1450   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1451   * \param data Array where the read data shall be stored
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1452   * \param count number of items to read
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1453   * \return number of items that could not be read
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1454   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1455  IFX_EXTERN uint32 IfxAsclin_read8(Ifx_ASCLIN *asclin, uint8 *data, uint32 count);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1456  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1457  /** \brief Sets the baudrate bit fields
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1458   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1459   * \param prescaler division ratio of the predivider
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1460   * \param numerator numerator of the fractional divider
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1461   * \param denominator denominator of the fractional divider
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1462   * \param oversampling division ratio of the baudrate postdivider
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1463   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1464   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1465  IFX_EXTERN void IfxAsclin_setBaudrateBitFields(Ifx_ASCLIN *asclin, uint16 prescaler, uint16 numerator, uint16 denominator, IfxAsclin_OversamplingFactor oversampling);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1466  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1467  /** \brief Sets the  clock source
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1468   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1469   * \param clockSource clock source selection
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1470   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1471   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1472  IFX_EXTERN void IfxAsclin_setClockSource(Ifx_ASCLIN *asclin, IfxAsclin_ClockSource clockSource);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1473  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1474  /** \brief Writes data up to 16 bits
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1475   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1476   * \param data Array of data to be send
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1477   * \param count number of items to be send
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1478   * \return the number of items that could not be send
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1479   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1480  IFX_EXTERN uint32 IfxAsclin_write16(Ifx_ASCLIN *asclin, uint16 *data, uint32 count);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1481  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1482  /** \brief Writes data up to 32 bits
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1483   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1484   * \param data Array of data to be send
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1485   * \param count number of items to be send
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1486   * \return the number of items that could not be send
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1487   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1488  IFX_EXTERN uint32 IfxAsclin_write32(Ifx_ASCLIN *asclin, uint32 *data, uint32 count);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1489  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1490  /** \brief Writes data up to 8 bits
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1491   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1492   * \param data Array of data to be send
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1493   * \param count number of items to be send
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1494   * \return the number of items that could not be send
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1495   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1496  IFX_EXTERN uint32 IfxAsclin_write8(Ifx_ASCLIN *asclin, uint8 *data, uint32 count);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1497  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1498  /** \} */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1499  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1500  /** \addtogroup IfxLld_Asclin_Std_IO
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1501   * \{ */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1502  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1503  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1504  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1505  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1506  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1507  /** \brief Initializes a CTS input
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1508   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1509   * Attention: the kernel clock has to be disabled whenever the input multiplexer is changed.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1510   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1511   * This can be done with IfxAsclin_setClockSource(asclinSFR, IfxAsclin_ClockSource_noClock);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1512   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1513   * After the function call, the current clock can be enabled again.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1514   * \param cts the CTS Pin which should be configured
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1515   * \param inputMode the pin input mode which should be configured
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1516   * \param padDriver the pad driver mode which should be configured
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1517   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1518   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1519  IFX_INLINE void IfxAsclin_initCtsPin(const IfxAsclin_Cts_In *cts, IfxPort_InputMode inputMode, IfxPort_PadDriver padDriver);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1520  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1521  /** \brief Initializes a RTS output
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1522   * \param rts the RTS Pin which should be configured
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1523   * \param outputMode the pin output mode which should be configured
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1524   * \param padDriver the pad driver mode which should be configured
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1525   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1526   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1527  IFX_INLINE void IfxAsclin_initRtsPin(const IfxAsclin_Rts_Out *rts, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1528  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1529  /** \brief Initializes a RX input
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1530   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1531   * Attention: the kernel clock has to be disabled whenever the input multiplexer is changed.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1532   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1533   * This can be done with IfxAsclin_setClockSource(asclinSFR, IfxAsclin_ClockSource_noClock);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1534   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1535   * After the function call, the current clock can be enabled again.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1536   * \param rx the RX Pin which should be configured
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1537   * \param inputMode the pin input mode which should be configured
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1538   * \param padDriver the pad driver mode which should be configured
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1539   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1540   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1541  IFX_INLINE void IfxAsclin_initRxPin(const IfxAsclin_Rx_In *rx, IfxPort_InputMode inputMode, IfxPort_PadDriver padDriver);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1542  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1543  /** \brief Initializes a SCLK output
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1544   * \param sclk the SCLK Pin which should be configured
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1545   * \param outputMode the pin output mode which should be configured
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1546   * \param padDriver the pad driver mode which should be configured
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1547   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1548   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1549  IFX_INLINE void IfxAsclin_initSclkPin(const IfxAsclin_Sclk_Out *sclk, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1550  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1551  /** \brief Initializes a SLSO output
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1552   * \param slso the SLSO Pin which should be configured
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1553   * \param outputMode the pin output mode which should be configured
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1554   * \param padDriver the pad driver mode which should be configured
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1555   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1556   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1557  IFX_INLINE void IfxAsclin_initSlsoPin(const IfxAsclin_Slso_Out *slso, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1558  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1559  /** \brief Initializes a TX output
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1560   * \param tx the TX Pin which should be configured
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1561   * \param outputMode the pin output mode which should be configured
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1562   * \param padDriver the pad driver mode which should be configured
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1563   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1564   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1565  IFX_INLINE void IfxAsclin_initTxPin(const IfxAsclin_Tx_Out *tx, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1566  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1567  /** \} */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1568  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1569  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1570  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1571  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1572  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1573  /**
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1574   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1575   * \return returns the value of RxDATA register
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1576   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1577  IFX_INLINE uint32 IfxAsclin_readRxData(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1578  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1579  /**
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1580   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1581   * \param data data to be written
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1582   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1583   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1584  IFX_INLINE void IfxAsclin_writeTxData(Ifx_ASCLIN *asclin, uint32 data);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1585  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1586  /** \brief Returns the status of all error flags
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1587   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1588   * \return status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1589   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1590  IFX_INLINE uint16 IfxAsclin_getAllErrorFlagsStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1591  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1592  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1593  /*---------------------Inline Function Implementations------------------------*/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1594  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1595  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1596  IFX_INLINE void IfxAsclin_clearAllFlags(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1597  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1598      asclin->FLAGSCLEAR.U = 0xFFFFFFFF;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1599  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1600  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1601  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1602  IFX_INLINE void IfxAsclin_clearBreakDetectedFlag(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1603  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1604      asclin->FLAGSCLEAR.B.BDC = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1605  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1606  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1607  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1608  IFX_INLINE void IfxAsclin_clearCollisionDetectionErrorFlag(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1609  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1610      asclin->FLAGSCLEAR.B.CEC = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1611  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1612  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1613  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1614  IFX_INLINE void IfxAsclin_clearFallingEdgeDetectedFlag(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1615  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1616      asclin->FLAGSCLEAR.B.FEDC = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1617  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1618  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1619  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1620  IFX_INLINE void IfxAsclin_clearFrameErrorFlag(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1621  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1622      asclin->FLAGSCLEAR.B.FEC = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1623  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1624  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1625  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1626  IFX_INLINE void IfxAsclin_clearHeaderTimeoutFlag(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1627  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1628      asclin->FLAGSCLEAR.B.HTC = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1629  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1630  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1631  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1632  IFX_INLINE void IfxAsclin_clearKernelResetStatus(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1633  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1634      asclin->KRSTCLR.B.CLR = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1635  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1636  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1637  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1638  IFX_INLINE void IfxAsclin_clearLinAutoBaudDetectionErrorFlag(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1639  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1640      asclin->FLAGSCLEAR.B.LAC = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1641  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1642  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1643  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1644  IFX_INLINE void IfxAsclin_clearLinChecksumErrorFlag(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1645  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1646      asclin->FLAGSCLEAR.B.LCC = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1647  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1648  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1649  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1650  IFX_INLINE void IfxAsclin_clearLinParityErrorFlag(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1651  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1652      asclin->FLAGSCLEAR.B.LPC = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1653  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1654  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1655  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1656  IFX_INLINE void IfxAsclin_clearParityErrorFlag(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1657  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1658      asclin->FLAGSCLEAR.B.PEC = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1659  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1660  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1661  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1662  IFX_INLINE void IfxAsclin_clearRaisingEdgeDetectedFlag(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1663  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1664      asclin->FLAGSCLEAR.B.REDC = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1665  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1666  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1667  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1668  IFX_INLINE void IfxAsclin_clearResponseTimeoutFlag(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1669  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1670      asclin->FLAGSCLEAR.B.RTC = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1671  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1672  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1673  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1674  IFX_INLINE void IfxAsclin_clearRxFifoFillLevelFlag(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1675  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1676      asclin->FLAGSCLEAR.B.RFLC = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1677  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1678  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1679  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1680  IFX_INLINE void IfxAsclin_clearRxFifoOverflowFlag(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1681  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1682      asclin->FLAGSCLEAR.B.RFOC = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1683  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1684  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1685  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1686  IFX_INLINE void IfxAsclin_clearRxFifoUnderflowFlag(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1687  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1688      asclin->FLAGSCLEAR.B.RFUC = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1689  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1690  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1691  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1692  IFX_INLINE void IfxAsclin_clearRxHeaderEndFlag(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1693  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1694      asclin->FLAGSCLEAR.B.RHC = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1695  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1696  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1697  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1698  IFX_INLINE void IfxAsclin_clearRxResponseEndFlag(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1699  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1700      asclin->FLAGSCLEAR.B.RRC = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1701  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1702  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1703  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1704  IFX_INLINE void IfxAsclin_clearTransmissionCompletedFlag(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1705  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1706      asclin->FLAGSCLEAR.B.TCC = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1707  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1708  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1709  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1710  IFX_INLINE void IfxAsclin_clearTxFifoFillLevelFlag(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1711  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1712      asclin->FLAGSCLEAR.B.TFLC = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1713  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1714  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1715  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1716  IFX_INLINE void IfxAsclin_clearTxFifoOverflowFlag(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1717  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1718      asclin->FLAGSCLEAR.B.TFOC = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1719  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1720  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1721  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1722  IFX_INLINE void IfxAsclin_clearTxHeaderEndFlag(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1723  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1724      asclin->FLAGSCLEAR.B.THC = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1725  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1726  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1727  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1728  IFX_INLINE void IfxAsclin_clearTxResponseEndFlag(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1729  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1730      asclin->FLAGSCLEAR.B.TRC = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1731  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1732  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1733  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1734  IFX_INLINE void IfxAsclin_disableAllFlags(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1735  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1736      asclin->FLAGSENABLE.U = 0x00000000;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1737  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1738  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1739  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1740  IFX_INLINE void IfxAsclin_enableAutoBaudrateDetection(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1741  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1742      asclin->LIN.CON.B.ABD = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1743  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1744  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1745  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1746  IFX_INLINE void IfxAsclin_enableBreakDetectedFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1747  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1748      asclin->FLAGSENABLE.B.BDE = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1749  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1750  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1751  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1752  IFX_INLINE void IfxAsclin_enableCollisionDetection(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1753  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1754      asclin->FRAMECON.B.CEN = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1755  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1756  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1757  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1758  IFX_INLINE void IfxAsclin_enableCollisionDetectionErrorFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1759  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1760      asclin->FLAGSENABLE.B.CEE = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1761  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1762  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1763  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1764  IFX_INLINE void IfxAsclin_enableCts(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1765  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1766      asclin->IOCR.B.CTSEN = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1767  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1768  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1769  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1770  IFX_INLINE void IfxAsclin_enableFallingEdgeDetectedFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1771  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1772      asclin->FLAGSENABLE.B.FEDE = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1773  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1774  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1775  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1776  IFX_INLINE void IfxAsclin_enableFrameErrorFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1777  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1778      asclin->FLAGSENABLE.B.FEE = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1779  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1780  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1781  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1782  IFX_INLINE void IfxAsclin_enableHardwareChecksum(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1783  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1784      asclin->LIN.CON.B.CSEN = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1785  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1786  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1787  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1788  IFX_INLINE void IfxAsclin_enableHeaderTimeoutFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1789  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1790      asclin->FLAGSENABLE.B.HTE = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1791  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1792  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1793  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1794  IFX_INLINE void IfxAsclin_enableLinAutoBaudDetectionErrorFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1795  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1796      asclin->FLAGSENABLE.B.ABE = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1797  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1798  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1799  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1800  IFX_INLINE void IfxAsclin_enableLinChecksumErrorFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1801  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1802      asclin->FLAGSENABLE.B.LCE = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1803  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1804  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1805  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1806  IFX_INLINE void IfxAsclin_enableLinParityErrorFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1807  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1808      asclin->FLAGSENABLE.B.LPE = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1809  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1810  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1811  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1812  IFX_INLINE void IfxAsclin_enableLoopBackMode(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1813  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1814      asclin->IOCR.B.LB = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1815  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1816  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1817  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1818  IFX_INLINE void IfxAsclin_enableParity(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1819  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1820      asclin->FRAMECON.B.PEN = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1821  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1822  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1823  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1824  IFX_INLINE void IfxAsclin_enableParityErrorFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1825  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1826      asclin->FLAGSENABLE.B.PEE = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1827  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1828  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1829  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1830  IFX_INLINE void IfxAsclin_enableRaisingEdgeDetectedFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1831  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1832      asclin->FLAGSENABLE.B.REDE = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1833  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1834  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1835  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1836  IFX_INLINE void IfxAsclin_enableResponseTimeoutFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1837  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1838      asclin->FLAGSENABLE.B.RTE = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1839  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1840  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1841  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1842  IFX_INLINE void IfxAsclin_enableRxFifoFillLevelFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1843  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1844      asclin->FLAGSENABLE.B.RFLE = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1845  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1846  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1847  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1848  IFX_INLINE void IfxAsclin_enableRxFifoInlet(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1849  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1850      asclin->RXFIFOCON.B.ENI = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1851  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1852  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1853  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1854  IFX_INLINE void IfxAsclin_enableRxFifoOverflowFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1855  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1856      asclin->FLAGSENABLE.B.RFOE = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1857  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1858  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1859  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1860  IFX_INLINE void IfxAsclin_enableRxFifoUnderflowFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1861  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1862      asclin->FLAGSENABLE.B.RFUE = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1863  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1864  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1865  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1866  IFX_INLINE void IfxAsclin_enableRxHeaderEndFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1867  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1868      asclin->FLAGSENABLE.B.RHE = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1869  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1870  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1871  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1872  IFX_INLINE void IfxAsclin_enableRxResponseEndFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1873  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1874      asclin->FLAGSENABLE.B.RRE = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1875  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1876  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1877  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1878  IFX_INLINE void IfxAsclin_enableTransmissionCompletedFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1879  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1880      asclin->FLAGSENABLE.B.TCE = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1881  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1882  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1883  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1884  IFX_INLINE void IfxAsclin_enableTxFifoFillLevelFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1885  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1886      asclin->FLAGSENABLE.B.TFLE = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1887  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1888  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1889  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1890  IFX_INLINE void IfxAsclin_enableTxFifoOutlet(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1891  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1892      asclin->TXFIFOCON.B.ENO = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1893  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1894  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1895  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1896  IFX_INLINE void IfxAsclin_enableTxFifoOverflowFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1897  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1898      asclin->FLAGSENABLE.B.TFOE = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1899  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1900  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1901  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1902  IFX_INLINE void IfxAsclin_enableTxHeaderEndFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1903  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1904      asclin->FLAGSENABLE.B.THE = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1905  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1906  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1907  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1908  IFX_INLINE void IfxAsclin_enableTxResponseEndFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1909  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1910      asclin->FLAGSENABLE.B.TRE = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1911  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1912  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1913  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1914  IFX_INLINE void IfxAsclin_flushRxFifo(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1915  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1916      asclin->RXFIFOCON.B.FLUSH = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1917  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1918  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1919  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1920  IFX_INLINE void IfxAsclin_flushTxFifo(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1921  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1922      asclin->TXFIFOCON.B.FLUSH = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1923  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1924  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1925  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1926  IFX_INLINE boolean IfxAsclin_getBreakDetectedFlagStatus(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1927  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1928      return asclin->FLAGS.B.BD;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1929  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1930  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1931  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1932  IFX_INLINE uint8 IfxAsclin_getClockSource(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1933  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1934      return asclin->CSR.B.CLKSEL;
	ld.bu	d15,[a15]76
.L384:
	mov	e8,d5,d4
.L387:

; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	     1  /**
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	     2   * \file IfxAsclin.h
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	     3   * \brief ASCLIN  basic functionality
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	     4   * \ingroup IfxLld_Asclin
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	     5   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	     6   * \version iLLD_1_0_1_11_0
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	     7   * \copyright Copyright (c) 2018 Infineon Technologies AG. All rights reserved.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	     8   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	     9   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    10   *                                 IMPORTANT NOTICE
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    11   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    12   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    13   * Use of this file is subject to the terms of use agreed between (i) you or 
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    14   * the company in which ordinary course of business you are acting and (ii) 
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    15   * Infineon Technologies AG or its licensees. If and as long as no such 
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    16   * terms of use are agreed, use of this file is subject to following:
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    17  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    18  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    19   * Boost Software License - Version 1.0 - August 17th, 2003
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    20  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    21   * Permission is hereby granted, free of charge, to any person or 
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    22   * organization obtaining a copy of the software and accompanying 
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    23   * documentation covered by this license (the "Software") to use, reproduce,
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    24   * display, distribute, execute, and transmit the Software, and to prepare
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    25   * derivative works of the Software, and to permit third-parties to whom the 
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    26   * Software is furnished to do so, all subject to the following:
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    27  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    28   * The copyright notices in the Software and this entire statement, including
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    29   * the above license grant, this restriction and the following disclaimer, must
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    30   * be included in all copies of the Software, in whole or in part, and all
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    31   * derivative works of the Software, unless such copies or derivative works are
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    32   * solely in the form of machine-executable object code generated by a source
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    33   * language processor.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    34  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    35   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR 
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    36   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    37   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    38   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE 
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    39   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    40   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    41   * DEALINGS IN THE SOFTWARE.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    42  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    43   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    44   * \defgroup IfxLld_Asclin_Std_Enumerations Enumerations
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    45   * \ingroup IfxLld_Asclin_Std
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    46   * \defgroup IfxLld_Asclin_Std_Operative Operative Functions
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    47   * \ingroup IfxLld_Asclin_Std
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    48   * \defgroup IfxLld_Asclin_Std_Utility Utility Functions
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    49   * \ingroup IfxLld_Asclin_Std
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    50   * \defgroup IfxLld_Asclin_Std_Configuration Configuration Functions
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    51   * \ingroup IfxLld_Asclin_Std
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    52   * \defgroup IfxLld_Asclin_Std_External External Functions
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    53   * \ingroup IfxLld_Asclin_Std
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    54   * \defgroup IfxLld_Asclin_Std_IO IO Pin Configuration Functions
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    55   * \ingroup IfxLld_Asclin_Std
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    56   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    57  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    58  #ifndef IFXASCLIN_H
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    59  #define IFXASCLIN_H 1
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    60  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    61  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    62  /*----------------------------------Includes----------------------------------*/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    63  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    64  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    65  #include "_Impl/IfxAsclin_cfg.h"
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    66  #include "Scu/Std/IfxScuCcu.h"
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    67  #include "Scu/Std/IfxScuWdt.h"
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    68  #include "Cpu/Std/IfxCpu_Intrinsics.h"
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    69  #include "IfxAsclin_reg.h"
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    70  #include "Src/Std/IfxSrc.h"
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    71  #include "_PinMap/IfxAsclin_PinMap.h"
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    72  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    73  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    74  /*--------------------------------Enumerations--------------------------------*/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    75  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    76  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    77  /** \addtogroup IfxLld_Asclin_Std_Enumerations
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    78   * \{ */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    79  /** \brief Defines if the classic or the enhanced checksum will be calculated by the checksum block.\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    80   * Definition in Ifx_ASCLIN.DATCON.B.CSM
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    81   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    82  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    83  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    84      IfxAsclin_Checksum_classic  = 0, /**< \brief classic checksum */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    85      IfxAsclin_Checksum_enhanced = 1  /**< \brief enhanced checksum */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    86  } IfxAsclin_Checksum;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    87  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    88  /** \brief Defines if the received checksum byte is written into the RXFifo or not.\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    89   * Definition in Ifx_ASCLIN.LIN.CON.B.CSI
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    90   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    91  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    92  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    93      IfxAsclin_ChecksumInjection_notWritten = 0,  /**< \brief checksum byte is not written */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    94      IfxAsclin_ChecksumInjection_written    = 1   /**< \brief checksum byte is written */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    95  } IfxAsclin_ChecksumInjection;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    96  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    97  /** \brief CPOL defines the idle level of the clock signal in the SPI mode.\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    98   * Idle level is the level outside the data transmission time intervals.\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    99   * Definition in Ifx_ASCLIN.IOCR.B.CPOL
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   100   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   101  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   102  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   103      IfxAsclin_ClockPolarity_idleLow  = 0, /**< \brief idle low */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   104      IfxAsclin_ClockPolarity_idleHigh = 1  /**< \brief idle high */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   105  } IfxAsclin_ClockPolarity;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   106  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   107  /** \brief Selection of clock source\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   108   * Definition in Ifx_ASCLIN.CSR.B.CLKSEL
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   109   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   110  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   111  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   112      IfxAsclin_ClockSource_noClock         = 0,  /**< \brief no clock will be supplied */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   113      IfxAsclin_ClockSource_kernelClock     = 1,  /**< \brief f clc will be supplied */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   114      IfxAsclin_ClockSource_oscillatorClock = 2,  /**< \brief XTAL oscillator clock foso0 will be supplied */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   115      IfxAsclin_ClockSource_flexRayClock    = 4,  /**< \brief f eray will be supplied */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   116      IfxAsclin_ClockSource_ascFastClock    = 8,  /**< \brief f asclinf wiil be supplied */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   117      IfxAsclin_ClockSource_ascSlowClock    = 16  /**< \brief f asclins will be supplied */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   118  } IfxAsclin_ClockSource;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   119  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   120  /** \brief CTS input pin selection\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   121   * Definition in Ifx_ASCLIN.IOCR.B.CTS
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   122   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   123  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   124  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   125      IfxAsclin_CtsInputSelect_0,     /**< \brief CTS input pin 0  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   126      IfxAsclin_CtsInputSelect_1,     /**< \brief CTS input pin 1  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   127      IfxAsclin_CtsInputSelect_2,     /**< \brief CTS input pin 2  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   128      IfxAsclin_CtsInputSelect_3      /**< \brief CTS input pin 3  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   129  } IfxAsclin_CtsInputSelect;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   130  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   131  /** \brief Number of bits per transfer\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   132   * Definition in Ifx_ASCLIN.FRAMECON.B.DATALEN
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   133   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   134  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   135  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   136      IfxAsclin_DataLength_1 = 0,      /**< \brief number of bits per transfer 0  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   137      IfxAsclin_DataLength_2,          /**< \brief number of bits per transfer 1  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   138      IfxAsclin_DataLength_3,          /**< \brief number of bits per transfer 2  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   139      IfxAsclin_DataLength_4,          /**< \brief number of bits per transfer 3  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   140      IfxAsclin_DataLength_5,          /**< \brief number of bits per transfer 4  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   141      IfxAsclin_DataLength_6,          /**< \brief number of bits per transfer 5  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   142      IfxAsclin_DataLength_7,          /**< \brief number of bits per transfer 6  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   143      IfxAsclin_DataLength_8,          /**< \brief number of bits per transfer 7  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   144      IfxAsclin_DataLength_9,          /**< \brief number of bits per transfer 8  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   145      IfxAsclin_DataLength_10,         /**< \brief number of bits per transfer 9  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   146      IfxAsclin_DataLength_11,         /**< \brief number of bits per transfer 10  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   147      IfxAsclin_DataLength_12,         /**< \brief number of bits per transfer 11  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   148      IfxAsclin_DataLength_13,         /**< \brief number of bits per transfer 12  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   149      IfxAsclin_DataLength_14,         /**< \brief number of bits per transfer 13  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   150      IfxAsclin_DataLength_15,         /**< \brief number of bits per transfer 14  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   151      IfxAsclin_DataLength_16          /**< \brief number of bits per transfer 15  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   152  } IfxAsclin_DataLength;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   153  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   154  /** \brief Defines the basic operating mode of the module. Changing the mode must be done by switching first to initialize mode, and then to the other mode.\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   155   * Definition in Ifx_ASCLIN.FRAMECON.B.MODE
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   156   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   157  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   158  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   159      IfxAsclin_FrameMode_initialise = 0,  /**< \brief initialise mode */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   160      IfxAsclin_FrameMode_asc        = 1,  /**< \brief asc mode */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   161      IfxAsclin_FrameMode_spi        = 2,  /**< \brief spi mode */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   162      IfxAsclin_FrameMode_lin        = 3   /**< \brief lin mode */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   163  } IfxAsclin_FrameMode;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   164  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   165  /** \brief Defines if LIN frame shall consist of a header and response or of a header only.\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   166   * Definition in Ifx_ASCLIN.DATCON.B.HO
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   167   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   168  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   169  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   170      IfxAsclin_HeaderResponseSelect_headerAndResponse = 0,  /**< \brief header and response expected */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   171      IfxAsclin_HeaderResponseSelect_headerOnly        = 1   /**< \brief header only expected */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   172  } IfxAsclin_HeaderResponseSelect;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   173  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   174  /** \brief Defines the duration of the IDLE delay in bit times.\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   175   * SPI mode: this is the idle time between the frames.\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   176   * ASC and LIN mode: this is the pause inserted between transmission of bytes.\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   177   * Definition in Ifx_ASCLIN.FRAMECON.B.IDLE
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   178   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   179  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   180  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   181      IfxAsclin_IdleDelay_0,     /**< \brief idle delay in 0 bit times  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   182      IfxAsclin_IdleDelay_1,     /**< \brief idle delay in 1 bit times  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   183      IfxAsclin_IdleDelay_2,     /**< \brief idle delay in 2 bit times  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   184      IfxAsclin_IdleDelay_3,     /**< \brief idle delay in 3 bit times  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   185      IfxAsclin_IdleDelay_4,     /**< \brief idle delay in 4 bit times  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   186      IfxAsclin_IdleDelay_5,     /**< \brief idle delay in 5 bit times  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   187      IfxAsclin_IdleDelay_6,     /**< \brief idle delay in 6 bit times  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   188      IfxAsclin_IdleDelay_7      /**< \brief idle delay in 7 bit times  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   189  } IfxAsclin_IdleDelay;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   190  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   191  /** \brief Defines the leading delay in bit times in SPI mode. ASC mode: not applicable.\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   192   * LIN mode: delay between the end of the break and the start of the sync character.\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   193   * Definition in Ifx_ASCLIN.FRAMECON.B.LEAD
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   194   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   195  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   196  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   197      IfxAsclin_LeadDelay_0,     /**< \brief lead delay in 0 bit times  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   198      IfxAsclin_LeadDelay_1,     /**< \brief lead delay in 1 bit times  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   199      IfxAsclin_LeadDelay_2,     /**< \brief lead delay in 2 bit times  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   200      IfxAsclin_LeadDelay_3,     /**< \brief lead delay in 3 bit times  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   201      IfxAsclin_LeadDelay_4,     /**< \brief lead delay in 4 bit times  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   202      IfxAsclin_LeadDelay_5,     /**< \brief lead delay in 5 bit times  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   203      IfxAsclin_LeadDelay_6,     /**< \brief lead delay in 6 bit times  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   204      IfxAsclin_LeadDelay_7      /**< \brief lead delay in 7 bit times  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   205  } IfxAsclin_LeadDelay;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   206  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   207  /** \brief Configures if the module in LIN mode operates as master or slave\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   208   * Definition in Ifx_ASCLIN.LIN.CON.B.MS
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   209   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   210  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   211  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   212      IfxAsclin_LinMode_slave  = 0, /**< \brief operates in slave mode */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   213      IfxAsclin_LinMode_master = 1  /**< \brief operates in master mode */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   214  } IfxAsclin_LinMode;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   215  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   216  /** \brief Defines the timeout threshold of RESPOSE bit is for LIN response timeout or LIN frame timeout.\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   217   * Definition in Ifx_ASCLIN.DATCON.B.RM
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   218   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   219  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   220  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   221      IfxAsclin_LinResponseTimeoutMode_frameTimeout    = 0, /**< \brief timeout threshold is for frame */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   222      IfxAsclin_LinResponseTimeoutMode_responseTimeout = 1  /**< \brief timeout threshold is for reponse */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   223  } IfxAsclin_LinResponseTimeoutMode;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   224  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   225  /** \brief Defines the bit length in ticks in the range of 1 to 16. The lengths of 1 to 3 are not allowed\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   226   * Definition in Ifx_ASCLIN.BITCON.B.OVERSAMPLING
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   227   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   228  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   229  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   230      IfxAsclin_OversamplingFactor_4  = 3,   /**< \brief oversampling factor 4 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   231      IfxAsclin_OversamplingFactor_5  = 4,   /**< \brief oversampling factor 5 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   232      IfxAsclin_OversamplingFactor_6  = 5,   /**< \brief oversampling factor 6 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   233      IfxAsclin_OversamplingFactor_7  = 6,   /**< \brief oversampling factor 7 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   234      IfxAsclin_OversamplingFactor_8  = 7,   /**< \brief oversampling factor 8 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   235      IfxAsclin_OversamplingFactor_9  = 8,   /**< \brief oversampling factor 9 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   236      IfxAsclin_OversamplingFactor_10 = 9,   /**< \brief oversampling factor 10 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   237      IfxAsclin_OversamplingFactor_11 = 10,  /**< \brief oversampling factor 11 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   238      IfxAsclin_OversamplingFactor_12 = 11,  /**< \brief oversampling factor 12 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   239      IfxAsclin_OversamplingFactor_13 = 12,  /**< \brief oversampling factor 13 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   240      IfxAsclin_OversamplingFactor_14 = 13,  /**< \brief oversampling factor 14 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   241      IfxAsclin_OversamplingFactor_15 = 14,  /**< \brief oversampling factor 15 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   242      IfxAsclin_OversamplingFactor_16 = 15   /**< \brief oversampling factor 16 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   243  } IfxAsclin_OversamplingFactor;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   244  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   245  /** \brief Type of parity bit attached to data bits\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   246   * Definition in Ifx_ASCLIN.FRAMECON.B.ODD
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   247   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   248  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   249  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   250      IfxAsclin_ParityType_even = 0,  /**< \brief even parity */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   251      IfxAsclin_ParityType_odd  = 1   /**< \brief odd parity */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   252  } IfxAsclin_ParityType;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   253  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   254  /** \brief Receive buffer mode\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   255   * Definition in Ifx_ASCLIN.RXFIFOCON.B.BUF
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   256   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   257  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   258  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   259      IfxAsclin_ReceiveBufferMode_rxFifo   = 0, /**< \brief RxFIFO mode */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   260      IfxAsclin_ReceiveBufferMode_rxBuffer = 1  /**< \brief single stage Rx buffer */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   261  } IfxAsclin_ReceiveBufferMode;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   262  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   263  /** \brief Polarity of the RTS and CTS signals\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   264   * Definition in Ifx_ASCLIN.IOCR.B.RCPOL
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   265   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   266  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   267  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   268      IfxAsclin_RtsCtsPolarity_activeHigh = 0,  /**< \brief ready/clear are active-high */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   269      IfxAsclin_RtsCtsPolarity_activeLow  = 1   /**< \brief ready/clear are active-low */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   270  } IfxAsclin_RtsCtsPolarity;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   271  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   272  /** \brief Defines the filling level that triggers a drain (RX) interrupt or DMA access\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   273   * Definition in Ifx_ASCLIN.RXFIFOCON.B.INTLEVEL
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   274   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   275  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   276  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   277      IfxAsclin_RxFifoInterruptLevel_1,     /**< \brief RX FIFO level 1  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   278      IfxAsclin_RxFifoInterruptLevel_2,     /**< \brief RX FIFO level 2  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   279      IfxAsclin_RxFifoInterruptLevel_3,     /**< \brief RX FIFO level 3  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   280      IfxAsclin_RxFifoInterruptLevel_4,     /**< \brief RX FIFO level 4  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   281      IfxAsclin_RxFifoInterruptLevel_5,     /**< \brief RX FIFO level 5  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   282      IfxAsclin_RxFifoInterruptLevel_6,     /**< \brief RX FIFO level 6  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   283      IfxAsclin_RxFifoInterruptLevel_7,     /**< \brief RX FIFO level 7  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   284      IfxAsclin_RxFifoInterruptLevel_8,     /**< \brief RX FIFO level 8  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   285      IfxAsclin_RxFifoInterruptLevel_9,     /**< \brief RX FIFO level 9  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   286      IfxAsclin_RxFifoInterruptLevel_10,    /**< \brief RX FIFO level 10  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   287      IfxAsclin_RxFifoInterruptLevel_11,    /**< \brief RX FIFO level 11  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   288      IfxAsclin_RxFifoInterruptLevel_12,    /**< \brief RX FIFO level 12  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   289      IfxAsclin_RxFifoInterruptLevel_13,    /**< \brief RX FIFO level 13  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   290      IfxAsclin_RxFifoInterruptLevel_14,    /**< \brief RX FIFO level 14  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   291      IfxAsclin_RxFifoInterruptLevel_15,    /**< \brief RX FIFO level 15  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   292      IfxAsclin_RxFifoInterruptLevel_16     /**< \brief RX FIFO level 16  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   293  } IfxAsclin_RxFifoInterruptLevel;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   294  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   295  /** \brief Defines the number of bytes read from the Rx FIFO with one FPI bus read\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   296   * Definition in Ifx_ASCLIN.RXFIFOCON.B.OUTW
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   297   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   298  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   299  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   300      IfxAsclin_RxFifoOutletWidth_0,     /**< \brief number of bytes 0  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   301      IfxAsclin_RxFifoOutletWidth_1,     /**< \brief number of bytes 1  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   302      IfxAsclin_RxFifoOutletWidth_2,     /**< \brief number of bytes 2  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   303      IfxAsclin_RxFifoOutletWidth_3      /**< \brief number of bytes 3  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   304  } IfxAsclin_RxFifoOutletWidth;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   305  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   306  /** \brief Alternate input selection for Rx signal.\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   307   * Definition in Ifx_ASCLIN.IOCR.B.ALTI
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   308   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   309  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   310  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   311      IfxAsclin_RxInputSelect_0,     /**< \brief alternate input selection 0  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   312      IfxAsclin_RxInputSelect_1,     /**< \brief alternate input selection 1  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   313      IfxAsclin_RxInputSelect_2,     /**< \brief alternate input selection 2  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   314      IfxAsclin_RxInputSelect_3,     /**< \brief alternate input selection 3  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   315      IfxAsclin_RxInputSelect_4,     /**< \brief alternate input selection 4  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   316      IfxAsclin_RxInputSelect_5,     /**< \brief alternate input selection 5  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   317      IfxAsclin_RxInputSelect_6,     /**< \brief alternate input selection 6  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   318      IfxAsclin_RxInputSelect_7      /**< \brief alternate input selection 7  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   319  } IfxAsclin_RxInputSelect;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   320  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   321  /** \brief Sample point position\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   322   * Definition in Ifx_ASCLIN.BITCON.B.SAMPLEPOINT
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   323   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   324  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   325  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   326      IfxAsclin_SamplePointPosition_1  = 1,   /**< \brief sample point position at 1 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   327      IfxAsclin_SamplePointPosition_2  = 2,   /**< \brief sample point position at 2 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   328      IfxAsclin_SamplePointPosition_3  = 3,   /**< \brief sample point position at 3 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   329      IfxAsclin_SamplePointPosition_4  = 4,   /**< \brief sample point position at 4 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   330      IfxAsclin_SamplePointPosition_5  = 5,   /**< \brief sample point position at 5 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   331      IfxAsclin_SamplePointPosition_6  = 6,   /**< \brief sample point position at 6 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   332      IfxAsclin_SamplePointPosition_7  = 7,   /**< \brief sample point position at 7 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   333      IfxAsclin_SamplePointPosition_8  = 8,   /**< \brief sample point position at 8 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   334      IfxAsclin_SamplePointPosition_9  = 9,   /**< \brief sample point position at 9 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   335      IfxAsclin_SamplePointPosition_10 = 10,  /**< \brief sample point position at 10 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   336      IfxAsclin_SamplePointPosition_11 = 11,  /**< \brief sample point position at 11 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   337      IfxAsclin_SamplePointPosition_12 = 12,  /**< \brief sample point position at 12 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   338      IfxAsclin_SamplePointPosition_13 = 13,  /**< \brief sample point position at 13 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   339      IfxAsclin_SamplePointPosition_14 = 14,  /**< \brief sample point position at 14 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   340      IfxAsclin_SamplePointPosition_15 = 15   /**< \brief sample point position at 15 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   341  } IfxAsclin_SamplePointPosition;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   342  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   343  /** \brief Number of samples per bit, sample mode/medianfilter\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   344   * Definition in Ifx_ASCLIN.BITCON.B.SM
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   345   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   346  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   347  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   348      IfxAsclin_SamplesPerBit_one   = 0, /**< \brief one sample per bit */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   349      IfxAsclin_SamplesPerBit_three = 1  /**< \brief three samples per bit */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   350  } IfxAsclin_SamplesPerBit;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   351  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   352  /** \brief SPI mode: defines the shift direction of the shift register.\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   353   * ASC and LIN mode: should be set to 0.\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   354   * Definition in Ifx_ASCLIN.FRAMECON.B.MSB
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   355   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   356  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   357  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   358      IfxAsclin_ShiftDirection_lsbFirst = 0,  /**< \brief LSB first */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   359      IfxAsclin_ShiftDirection_msbFirst = 1   /**< \brief MSB first */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   360  } IfxAsclin_ShiftDirection;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   361  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   362  /** \brief Defines the idle level of the SLSO signal, which is the level.\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   363   * Outside the data transmission, leading and trailing time intervals.\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   364   * Definition in Ifx_ASCLIN.IOCR.B.SPOL
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   365   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   366  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   367  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   368      IfxAsclin_SlavePolarity_idleLow  = 0, /**< \brief idle low */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   369      IfxAsclin_SlavePolarity_idlehigh = 1  /**< \brief idle high */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   370  } IfxAsclin_SlavePolarity;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   371  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   372  /** \brief Enable/disable the sensitivity of the module to sleep signal\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   373   * Definition in Ifx_ASCLIN.CLC.B.EDIS
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   374   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   375  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   376  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   377      IfxAsclin_SleepMode_enable  = 0, /**< \brief enables sleep mode */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   378      IfxAsclin_SleepMode_disable = 1  /**< \brief disables sleep mode */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   379  } IfxAsclin_SleepMode;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   380  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   381  /** \brief Error status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   382   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   383  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   384  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   385      IfxAsclin_Status_configurationError = 0,  /**< \brief Configuration error */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   386      IfxAsclin_Status_noError            = 1   /**< \brief No error */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   387  } IfxAsclin_Status;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   388  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   389  /** \brief ASC and LIN mode: number of stop bits (0 is not allowed), SPI mode: trailing delay.\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   390   * Definition in Ifx_ASCLIN.FRAMECON.B.STOP
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   391   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   392  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   393  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   394      IfxAsclin_StopBit_0,     /**< \brief number of stop bits 0  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   395      IfxAsclin_StopBit_1,     /**< \brief number of stop bits 1  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   396      IfxAsclin_StopBit_2,     /**< \brief number of stop bits 2  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   397      IfxAsclin_StopBit_3,     /**< \brief number of stop bits 3  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   398      IfxAsclin_StopBit_4,     /**< \brief number of stop bits 4  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   399      IfxAsclin_StopBit_5,     /**< \brief number of stop bits 5  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   400      IfxAsclin_StopBit_6,     /**< \brief number of stop bits 6  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   401      IfxAsclin_StopBit_7      /**< \brief number of stop bits 7  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   402  } IfxAsclin_StopBit;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   403  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   404  /** \brief OCDS Suspend Control (OCDS.SUS)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   405   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   406  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   407  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   408      IfxAsclin_SuspendMode_none = 0,  /**< \brief No suspend */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   409      IfxAsclin_SuspendMode_hard = 1,  /**< \brief Hard Suspend */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   410      IfxAsclin_SuspendMode_soft = 2   /**< \brief Soft Suspend */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   411  } IfxAsclin_SuspendMode;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   412  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   413  /** \brief Defines the number of bytes written to the Tx FIFO with one FPI bus write\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   414   * Definition in Ifx_ASCLIN.TXFIFOCON.B.INW
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   415   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   416  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   417  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   418      IfxAsclin_TxFifoInletWidth_0,     /**< \brief number of bytes 0  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   419      IfxAsclin_TxFifoInletWidth_1,     /**< \brief number of bytes 1  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   420      IfxAsclin_TxFifoInletWidth_2,     /**< \brief number of bytes 2  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   421      IfxAsclin_TxFifoInletWidth_3      /**< \brief number of bytes 3  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   422  } IfxAsclin_TxFifoInletWidth;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   423  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   424  /** \brief Defines the filling level that triggers a refill (TX) interrupt or DMA access\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   425   * Definition in Ifx_ASCLIN.TXFIFOCON.B.INTLEVEL
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   426   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   427  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   428  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   429      IfxAsclin_TxFifoInterruptLevel_0,     /**< \brief TX FIFO level 0  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   430      IfxAsclin_TxFifoInterruptLevel_1,     /**< \brief TX FIFO level 1  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   431      IfxAsclin_TxFifoInterruptLevel_2,     /**< \brief TX FIFO level 2  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   432      IfxAsclin_TxFifoInterruptLevel_3,     /**< \brief TX FIFO level 3  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   433      IfxAsclin_TxFifoInterruptLevel_4,     /**< \brief TX FIFO level 4  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   434      IfxAsclin_TxFifoInterruptLevel_5,     /**< \brief TX FIFO level 5  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   435      IfxAsclin_TxFifoInterruptLevel_6,     /**< \brief TX FIFO level 6  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   436      IfxAsclin_TxFifoInterruptLevel_7,     /**< \brief TX FIFO level 7  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   437      IfxAsclin_TxFifoInterruptLevel_8,     /**< \brief TX FIFO level 8  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   438      IfxAsclin_TxFifoInterruptLevel_9,     /**< \brief TX FIFO level 9  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   439      IfxAsclin_TxFifoInterruptLevel_10,    /**< \brief TX FIFO level 10  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   440      IfxAsclin_TxFifoInterruptLevel_11,    /**< \brief TX FIFO level 11  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   441      IfxAsclin_TxFifoInterruptLevel_12,    /**< \brief TX FIFO level 12  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   442      IfxAsclin_TxFifoInterruptLevel_13,    /**< \brief TX FIFO level 13  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   443      IfxAsclin_TxFifoInterruptLevel_14,    /**< \brief TX FIFO level 14  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   444      IfxAsclin_TxFifoInterruptLevel_15     /**< \brief TX FIFO level 15  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   445  } IfxAsclin_TxFifoInterruptLevel;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   446  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   447  /** \} */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   448  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   449  /** \addtogroup IfxLld_Asclin_Std_Operative
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   450   * \{ */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   451  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   452  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   453  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   454  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   455  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   456  /** \brief clears all the flags
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   457   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   458   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   459   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   460  IFX_INLINE void IfxAsclin_clearAllFlags(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   461  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   462  /** \brief Clears the break detected flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   463   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   464   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   465   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   466  IFX_INLINE void IfxAsclin_clearBreakDetectedFlag(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   467  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   468  /** \brief Clears the collision detection error flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   469   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   470   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   471   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   472  IFX_INLINE void IfxAsclin_clearCollisionDetectionErrorFlag(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   473  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   474  /** \brief Clears the falling edge detected flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   475   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   476   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   477   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   478  IFX_INLINE void IfxAsclin_clearFallingEdgeDetectedFlag(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   479  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   480  /** \brief Clears the frame error flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   481   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   482   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   483   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   484  IFX_INLINE void IfxAsclin_clearFrameErrorFlag(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   485  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   486  /** \brief Clears the header timeout flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   487   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   488   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   489   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   490  IFX_INLINE void IfxAsclin_clearHeaderTimeoutFlag(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   491  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   492  /** \brief Clears the kernel reset status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   493   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   494   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   495   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   496  IFX_INLINE void IfxAsclin_clearKernelResetStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   497  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   498  /** \brief Clears the auto baudrate detection error flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   499   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   500   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   501   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   502  IFX_INLINE void IfxAsclin_clearLinAutoBaudDetectionErrorFlag(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   503  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   504  /** \brief Clears the LIN checksum error flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   505   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   506   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   507   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   508  IFX_INLINE void IfxAsclin_clearLinChecksumErrorFlag(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   509  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   510  /** \brief Clears the LIN parity error flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   511   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   512   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   513   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   514  IFX_INLINE void IfxAsclin_clearLinParityErrorFlag(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   515  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   516  /** \brief Clears the parity error flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   517   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   518   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   519   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   520  IFX_INLINE void IfxAsclin_clearParityErrorFlag(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   521  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   522  /** \brief Clears the raising edge detected flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   523   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   524   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   525   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   526  IFX_INLINE void IfxAsclin_clearRaisingEdgeDetectedFlag(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   527  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   528  /** \brief Clears the response timeout flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   529   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   530   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   531   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   532  IFX_INLINE void IfxAsclin_clearResponseTimeoutFlag(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   533  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   534  /** \brief Clears the Rx FIFO level flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   535   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   536   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   537   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   538  IFX_INLINE void IfxAsclin_clearRxFifoFillLevelFlag(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   539  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   540  /** \brief Clears the Rx FIFO overflow flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   541   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   542   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   543   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   544  IFX_INLINE void IfxAsclin_clearRxFifoOverflowFlag(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   545  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   546  /** \brief Clears the Rx FIFO underflow flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   547   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   548   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   549   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   550  IFX_INLINE void IfxAsclin_clearRxFifoUnderflowFlag(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   551  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   552  /** \brief Clears the receive header end flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   553   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   554   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   555   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   556  IFX_INLINE void IfxAsclin_clearRxHeaderEndFlag(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   557  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   558  /** \brief Clears the receive response end flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   559   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   560   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   561   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   562  IFX_INLINE void IfxAsclin_clearRxResponseEndFlag(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   563  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   564  /** \brief Clears the transmission pending flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   565   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   566   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   567   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   568  IFX_INLINE void IfxAsclin_clearTransmissionCompletedFlag(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   569  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   570  /** \brief Clears the Tx FIFO level flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   571   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   572   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   573   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   574  IFX_INLINE void IfxAsclin_clearTxFifoFillLevelFlag(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   575  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   576  /** \brief Clears the Tx FIFO overflow flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   577   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   578   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   579   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   580  IFX_INLINE void IfxAsclin_clearTxFifoOverflowFlag(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   581  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   582  /** \brief Clears the transmit header end flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   583   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   584   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   585   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   586  IFX_INLINE void IfxAsclin_clearTxHeaderEndFlag(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   587  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   588  /** \brief Clears the transmit response end flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   589   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   590   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   591   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   592  IFX_INLINE void IfxAsclin_clearTxResponseEndFlag(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   593  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   594  /** \brief Flushes (empties) the Rx FIFO
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   595   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   596   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   597   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   598  IFX_INLINE void IfxAsclin_flushRxFifo(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   599  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   600  /** \brief Flushes (empties) the Tx FIFO
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   601   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   602   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   603   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   604  IFX_INLINE void IfxAsclin_flushTxFifo(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   605  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   606  /** \brief Sets the baudrate detection's lower limit
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   607   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   608   * \param limit value of the lower limit
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   609   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   610   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   611  IFX_INLINE void IfxAsclin_setBrdLowerlimt(Ifx_ASCLIN *asclin, uint8 limit);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   612  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   613  /** \brief Sets the baudrate detection's upper limit
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   614   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   615   * \param limit value of the upper limit
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   616   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   617   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   618  IFX_INLINE void IfxAsclin_setBrdUpperlimt(Ifx_ASCLIN *asclin, uint8 limit);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   619  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   620  /** \brief Sets the checksum injection
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   621   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   622   * \param csi checksum injection selection (not written / written)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   623   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   624   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   625  IFX_INLINE void IfxAsclin_setChecksumInjection(Ifx_ASCLIN *asclin, IfxAsclin_ChecksumInjection csi);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   626  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   627  /** \brief Sets the checksum mode
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   628   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   629   * \param mode checksum mode selection (classic / enhanced)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   630   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   631   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   632  IFX_INLINE void IfxAsclin_setChecksumMode(Ifx_ASCLIN *asclin, IfxAsclin_Checksum mode);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   633  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   634  /** \brief Sets the data length (number of bits per transfer)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   635   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   636   * \param length data length selection
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   637   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   638   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   639  IFX_INLINE void IfxAsclin_setDataLength(Ifx_ASCLIN *asclin, IfxAsclin_DataLength length);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   640  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   641  /** \brief Sets the denominator of the fractional divider
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   642   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   643   * \param denominator value of the denominator
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   644   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   645   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   646  IFX_INLINE void IfxAsclin_setDenominator(Ifx_ASCLIN *asclin, uint16 denominator);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   647  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   648  /** \brief Sets the disable module request
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   649   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   650   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   651   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   652  IFX_INLINE void IfxAsclin_setDisableModuleRequest(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   653  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   654  /** \brief Sets the enable module request
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   655   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   656   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   657   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   658  IFX_INLINE void IfxAsclin_setEnableModuleRequest(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   659  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   660  /** \brief Sets digital glitch filter depth
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   661   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   662   * \param depth digital glitch filter depth selection (1 to 63)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   663   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   664   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   665  IFX_INLINE void IfxAsclin_setFilterDepth(Ifx_ASCLIN *asclin, uint8 depth);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   666  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   667  /** \brief Sets the header response selection
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   668   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   669   * \param type type of selection (header and response or header only)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   670   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   671   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   672  IFX_INLINE void IfxAsclin_setHeaderResponseSelect(Ifx_ASCLIN *asclin, IfxAsclin_HeaderResponseSelect type);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   673  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   674  /** \brief Sets the idle delay
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   675   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   676   * \param delay idle delay selection
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   677   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   678   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   679  IFX_INLINE void IfxAsclin_setIdleDelay(Ifx_ASCLIN *asclin, IfxAsclin_IdleDelay delay);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   680  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   681  /** \brief Sets the kernal reset of the KRST1
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   682   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   683   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   684   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   685  IFX_INLINE void IfxAsclin_setKernelResetOne(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   686  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   687  /** \brief Sets the kernel reset of the KRST0
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   688   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   689   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   690   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   691  IFX_INLINE void IfxAsclin_setKernelResetZero(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   692  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   693  /** \brief Sets the lead delay
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   694   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   695   * \param delay lead delay selection
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   696   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   697   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   698  IFX_INLINE void IfxAsclin_setLeadDelay(Ifx_ASCLIN *asclin, IfxAsclin_LeadDelay delay);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   699  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   700  /** \brief Sets the LIN break length
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   701   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   702   * \param length value of the break length
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   703   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   704   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   705  IFX_INLINE void IfxAsclin_setLinBreakLength(Ifx_ASCLIN *asclin, uint8 length);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   706  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   707  /** \brief Sets the LIN header timeout
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   708   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   709   * \param timeout value of the header timeout
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   710   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   711   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   712  IFX_INLINE void IfxAsclin_setLinHeaderTimeout(Ifx_ASCLIN *asclin, uint8 timeout);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   713  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   714  /** \brief Sets the LIN mode of operation
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   715   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   716   * \param mode mode selection (slave / master)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   717   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   718   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   719  IFX_INLINE void IfxAsclin_setLinMode(Ifx_ASCLIN *asclin, IfxAsclin_LinMode mode);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   720  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   721  /** \brief Sets the LIN response timeout mode
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   722   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   723   * \param mode LIN response timeout mode selection
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   724   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   725   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   726  IFX_INLINE void IfxAsclin_setLinResponseTimeoutMode(Ifx_ASCLIN *asclin, IfxAsclin_LinResponseTimeoutMode mode);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   727  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   728  /** \brief Sets the LIN response timeout threshold
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   729   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   730   * \param threshold value of the tomeout threshold (1 to 256 bit times)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   731   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   732   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   733  IFX_INLINE void IfxAsclin_setLinResponseTimeoutThreshold(Ifx_ASCLIN *asclin, uint16 threshold);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   734  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   735  /** \brief Sets the numerator of the fractional divider
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   736   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   737   * \param numerator value of the numerator
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   738   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   739   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   740  IFX_INLINE void IfxAsclin_setNumerator(Ifx_ASCLIN *asclin, uint16 numerator);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   741  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   742  /** \brief Sets the division ratio of the baudrate post divider
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   743   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   744   * \param ovsFactor value of oversampling factor
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   745   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   746   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   747  IFX_INLINE void IfxAsclin_setOversampling(Ifx_ASCLIN *asclin, IfxAsclin_OversamplingFactor ovsFactor);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   748  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   749  /** \brief Sets the parity type
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   750   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   751   * \param type parity type selction (even / odd)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   752   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   753   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   754  IFX_INLINE void IfxAsclin_setParityType(Ifx_ASCLIN *asclin, IfxAsclin_ParityType type);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   755  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   756  /** \brief Sets the division ratio of the predivider (prescaler)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   757   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   758   * \param prescaler value of prescaler
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   759   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   760   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   761  IFX_INLINE void IfxAsclin_setPrescaler(Ifx_ASCLIN *asclin, uint16 prescaler);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   762  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   763  /** \brief Sets the receive buffer mode
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   764   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   765   * \param mode receive buffer mode selection (Rx FIFO or single stage Rx buffer)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   766   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   767   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   768  IFX_INLINE void IfxAsclin_setRxBufferMode(Ifx_ASCLIN *asclin, IfxAsclin_ReceiveBufferMode mode);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   769  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   770  /** \brief Sets the Tx FIFO interrupt level
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   771   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   772   * \param level interrupt level selection
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   773   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   774   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   775  IFX_INLINE void IfxAsclin_setRxFifoInterruptLevel(Ifx_ASCLIN *asclin, IfxAsclin_RxFifoInterruptLevel level);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   776  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   777  /** \brief Sets the receive FIFO outlet width
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   778   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   779   * \param width number of bytes read to the Rx FIFO with one FPI bus read
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   780   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   781   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   782  IFX_INLINE void IfxAsclin_setRxFifoOutletWidth(Ifx_ASCLIN *asclin, IfxAsclin_RxFifoOutletWidth width);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   783  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   784  /** \brief Sets the sample mode (number of samples per bit / median filter)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   785   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   786   * \param medianFilter value of the median filter
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   787   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   788   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   789  IFX_INLINE void IfxAsclin_setSampleMode(Ifx_ASCLIN *asclin, IfxAsclin_SamplesPerBit medianFilter);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   790  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   791  /** \brief Sets the sampling point position
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   792   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   793   * \param spPosition sample point position selection
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   794   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   795   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   796  IFX_INLINE void IfxAsclin_setSamplePointPosition(Ifx_ASCLIN *asclin, IfxAsclin_SamplePointPosition spPosition);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   797  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   798  /** \brief Sets the shift direction
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   799   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   800   * \param dir shift direction selection (LSB / MSB first)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   801   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   802   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   803  IFX_INLINE void IfxAsclin_setShiftDirection(Ifx_ASCLIN *asclin, IfxAsclin_ShiftDirection dir);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   804  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   805  /** \brief Sets the number of stop bits
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   806   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   807   * \param stopBit number of stop bits selection
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   808   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   809   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   810  IFX_INLINE void IfxAsclin_setStopBit(Ifx_ASCLIN *asclin, IfxAsclin_StopBit stopBit);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   811  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   812  /** \brief Sets the transmit header request flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   813   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   814   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   815   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   816  IFX_INLINE void IfxAsclin_setTransmitHeaderRequestFlag(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   817  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   818  /** \brief Sets the transmit response request flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   819   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   820   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   821   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   822  IFX_INLINE void IfxAsclin_setTransmitResponseRequestFlag(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   823  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   824  /** \brief Sets the transmission wake request flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   825   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   826   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   827   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   828  IFX_INLINE void IfxAsclin_setTransmitWakeRequestFlag(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   829  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   830  /** \brief Sets the transmit FIFO inlet width
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   831   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   832   * \param width number of bytes written to the Tx FIFO with one FPI bus write
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   833   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   834   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   835  IFX_INLINE void IfxAsclin_setTxFifoInletWidth(Ifx_ASCLIN *asclin, IfxAsclin_TxFifoInletWidth width);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   836  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   837  /** \brief Sets the Tx FIFO interrupt level
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   838   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   839   * \param level interrupt level selection
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   840   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   841   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   842  IFX_INLINE void IfxAsclin_setTxFifoInterruptLevel(Ifx_ASCLIN *asclin, IfxAsclin_TxFifoInterruptLevel level);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   843  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   844  /** \} */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   845  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   846  /** \addtogroup IfxLld_Asclin_Std_Utility
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   847   * \{ */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   848  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   849  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   850  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   851  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   852  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   853  /** \brief Returns the break detected flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   854   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   855   * \return break detected flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   856   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   857  IFX_INLINE boolean IfxAsclin_getBreakDetectedFlagStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   858  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   859  /** \brief Returns the clock source
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   860   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   861   * \return clock source
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   862   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   863  IFX_INLINE uint8 IfxAsclin_getClockSource(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   864  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   865  /** \brief Returns the clock status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   866   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   867   * \return clock status (off / on)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   868   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   869  IFX_INLINE boolean IfxAsclin_getClockStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   870  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   871  /** \brief Returns the collision detection error flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   872   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   873   * \return collision detection error flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   874   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   875  IFX_INLINE boolean IfxAsclin_getCollisionDetectionErrorFlagStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   876  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   877  /** \brief Returns  the falling edge detected flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   878   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   879   * \return falling edge detected flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   880   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   881  IFX_INLINE boolean IfxAsclin_getFallingEdgeDetectedFlagStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   882  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   883  /** \brief Returns the frame error flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   884   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   885   * \return frame error flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   886   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   887  IFX_INLINE boolean IfxAsclin_getFrameErrorFlagStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   888  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   889  /** \brief Returns the header timeout flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   890   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   891   * \return header timeout flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   892   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   893  IFX_INLINE boolean IfxAsclin_getHeaderTimeoutFlagStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   894  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   895  /** \brief Returns the kernel reset status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   896   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   897   * \return kernel reset status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   898   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   899  IFX_INLINE boolean IfxAsclin_getKernelResetStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   900  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   901  /** \brief Returns the LIN auto baudrate detection error flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   902   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   903   * \return LIN auto baudrate detection error flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   904   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   905  IFX_INLINE boolean IfxAsclin_getLinAutoBaudDetectionErrorFlagStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   906  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   907  /** \brief Returns the LIN checksum error flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   908   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   909   * \return LIN checksum error flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   910   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   911  IFX_INLINE boolean IfxAsclin_getLinChecksumErrorFlagStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   912  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   913  /** \brief Returns the LIN parity error flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   914   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   915   * \return LIN parity error flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   916   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   917  IFX_INLINE boolean IfxAsclin_getLinParityErrorFlagStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   918  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   919  /** \brief Returns the module status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   920   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   921   * \return module status (enabled / disabled)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   922   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   923  IFX_INLINE boolean IfxAsclin_getModuleStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   924  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   925  /** \brief Returns the parity error flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   926   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   927   * \return parity error flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   928   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   929  IFX_INLINE boolean IfxAsclin_getParityErrorFlagStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   930  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   931  /** \brief Returns the division ratio of the predivider (prescaler)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   932   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   933   * \return value of prescaler
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   934   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   935  IFX_INLINE uint16 IfxAsclin_getPrescaler(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   936  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   937  /** \brief Returns the raising edge detected flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   938   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   939   * \return raising edge detected flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   940   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   941  IFX_INLINE boolean IfxAsclin_getRaisingEdgeDetectedFlagStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   942  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   943  /** \brief Returns the received signal status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   944   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   945   * \return received signal status (0 is low & 1 is high)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   946   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   947  IFX_INLINE boolean IfxAsclin_getReceiveSignalStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   948  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   949  /** \brief Returns the response timeout flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   950   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   951   * \return response timeout flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   952   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   953  IFX_INLINE boolean IfxAsclin_getResponseTimeoutFlagStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   954  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   955  /** \brief Returns the current filling level of Tx FIFO
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   956   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   957   * \return current filling level of Rx FIFO
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   958   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   959  IFX_INLINE uint8 IfxAsclin_getRxFifoFillLevel(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   960  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   961  /** \brief Returns the Rx FIFO level flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   962   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   963   * \return Rx FIFO level flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   964   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   965  IFX_INLINE boolean IfxAsclin_getRxFifoFillLevelFlagStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   966  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   967  /** \brief Returns the receive FIFO inlet width
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   968   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   969   * \return number of bytes read to the Rx FIFO with one FPI bus read
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   970   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   971  IFX_INLINE uint8 IfxAsclin_getRxFifoOutletWidth(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   972  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   973  /** \brief Returns the Rx FIFO overflow flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   974   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   975   * \return Rx FIFO overflow flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   976   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   977  IFX_INLINE boolean IfxAsclin_getRxFifoOverflowFlagStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   978  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   979  /** \brief Returns the Rx FIFO underflow flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   980   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   981   * \return Rx FIFO underflow flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   982   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   983  IFX_INLINE boolean IfxAsclin_getRxFifoUnderflowFlagStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   984  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   985  /** \brief Returns the receive header end flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   986   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   987   * \return receive header end flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   988   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   989  IFX_INLINE boolean IfxAsclin_getRxHeaderEndFlagStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   990  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   991  /** \brief Returns the receive response end flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   992   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   993   * \return receive response end flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   994   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   995  IFX_INLINE boolean IfxAsclin_getRxResponseEndFlagStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   996  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   997  /** \brief Returns the transmission pending flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   998   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   999   * \return transmission pending flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1000   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1001  IFX_INLINE boolean IfxAsclin_getTransmissionCompletedFlagStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1002  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1003  /** \brief Returns the transmit signal status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1004   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1005   * \return transmit signal status (0 is low & 1 is high)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1006   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1007  IFX_INLINE boolean IfxAsclin_getTransmitSignalStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1008  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1009  /** \brief Returns the current filling level of Tx FIFO
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1010   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1011   * \return current filling level of Tx FIFO
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1012   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1013  IFX_INLINE uint8 IfxAsclin_getTxFifoFillLevel(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1014  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1015  /** \brief Returns the Tx FIFO level flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1016   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1017   * \return Tx FIFO level flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1018   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1019  IFX_INLINE boolean IfxAsclin_getTxFifoFillLevelFlagStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1020  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1021  /** \brief Returns the transmit FIFO inlet width
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1022   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1023   * \return number of bytes written to the Tx FIFO with one FPI bus write
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1024   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1025  IFX_INLINE uint8 IfxAsclin_getTxFifoInletWidth(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1026  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1027  /** \brief Returns the Tx FIFO overflow flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1028   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1029   * \return Tx FIFO overflow flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1030   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1031  IFX_INLINE boolean IfxAsclin_getTxFifoOverflowFlagStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1032  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1033  /** \brief Returns the transmit header end flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1034   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1035   * \return transmit header end flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1036   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1037  IFX_INLINE boolean IfxAsclin_getTxHeaderEndFlagStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1038  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1039  /** \brief Returns the transmit response end flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1040   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1041   * \return transmit response end flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1042   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1043  IFX_INLINE boolean IfxAsclin_getTxResponseEndFlagStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1044  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1045  /** \brief Sets the sensitivity of the module to sleep signal
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1046   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1047   * \param mode mode selection (enable / disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1048   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1049   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1050  IFX_INLINE void IfxAsclin_setSleepMode(Ifx_ASCLIN *asclin, IfxAsclin_SleepMode mode);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1051  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1052  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1053  /*-------------------------Global Function Prototypes-------------------------*/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1054  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1055  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1056  /** \brief API to get the address for ASCLIN HW module register memory map
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1057   * \param asclin Resource index of the ASCLIN
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1058   * \return ASCLIN module register address
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1059   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1060  IFX_EXTERN Ifx_ASCLIN *IfxAsclin_getAddress(IfxAsclin_Index asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1061  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1062  /** \brief Returns the ASCLIN module FA frequency in Hz
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1063   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1064   * \return Returns the ASCLIN module FA frequency in Hz
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1065   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1066  IFX_EXTERN float32 IfxAsclin_getFaFrequency(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1067  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1068  /** \brief API to get the resource index of the ASCLIN specified.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1069   * \return asclin resource index
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1070   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1071  IFX_EXTERN IfxAsclin_Index IfxAsclin_getIndex(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1072  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1073  /** \brief Returns the OVS frequency
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1074   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1075   * \return Returns the ASCLIN module OVS frequency in Hz
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1076   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1077  IFX_EXTERN float32 IfxAsclin_getOvsFrequency(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1078  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1079  /** \brief Returns the PD frequency
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1080   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1081   * \return Returns the ASCLIN module PD frequency in Hz
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1082   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1083  IFX_EXTERN float32 IfxAsclin_getPdFrequency(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1084  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1085  /** \brief Returns the SHIFT frequency
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1086   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1087   * \return Returns the ASCLIN module SHIFT frequency in Hz
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1088   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1089  IFX_EXTERN float32 IfxAsclin_getShiftFrequency(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1090  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1091  /** \brief resets Asclin kernel
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1092   * \param asclin pointer to ASCLIN resgisters
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1093   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1094   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1095  IFX_EXTERN void IfxAsclin_resetModule(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1096  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1097  /** \} */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1098  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1099  /** \addtogroup IfxLld_Asclin_Std_Configuration
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1100   * \{ */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1101  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1102  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1103  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1104  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1105  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1106  /** \brief disables all flags
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1107   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1108   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1109   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1110  IFX_INLINE void IfxAsclin_disableAllFlags(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1111  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1112  /** \brief Enables/disables the auto baudrate detection
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1113   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1114   * \param enable choice (enable / disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1115   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1116   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1117  IFX_INLINE void IfxAsclin_enableAutoBaudrateDetection(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1118  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1119  /** \brief Enables/disables break detected flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1120   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1121   * \param enable choice (enable / disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1122   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1123   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1124  IFX_INLINE void IfxAsclin_enableBreakDetectedFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1125  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1126  /** \brief Enables/disables the collision detection
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1127   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1128   * \param enable choice (enable/disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1129   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1130   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1131  IFX_INLINE void IfxAsclin_enableCollisionDetection(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1132  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1133  /** \brief Enables/disables LIN collision detection error flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1134   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1135   * \param enable choice (enable / disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1136   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1137   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1138  IFX_INLINE void IfxAsclin_enableCollisionDetectionErrorFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1139  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1140  /** \brief Enables/disables CTS
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1141   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1142   * \param enable choice (enable/disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1143   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1144   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1145  IFX_INLINE void IfxAsclin_enableCts(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1146  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1147  /** \brief Enables/disables falling edge detected flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1148   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1149   * \param enable choice (enable / disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1150   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1151   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1152  IFX_INLINE void IfxAsclin_enableFallingEdgeDetectedFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1153  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1154  /** \brief Enables/disables frame error flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1155   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1156   * \param enable choice (enable / disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1157   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1158   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1159  IFX_INLINE void IfxAsclin_enableFrameErrorFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1160  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1161  /** \brief Enables/disables the hardware checksum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1162   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1163   * \param enable choice (enable / disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1164   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1165   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1166  IFX_INLINE void IfxAsclin_enableHardwareChecksum(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1167  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1168  /** \brief Enables/disables header timeout flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1169   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1170   * \param enable choice (enable / disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1171   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1172   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1173  IFX_INLINE void IfxAsclin_enableHeaderTimeoutFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1174  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1175  /** \brief Enables/disables LIN auto baudrate detection error flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1176   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1177   * \param enable choice (enable / disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1178   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1179   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1180  IFX_INLINE void IfxAsclin_enableLinAutoBaudDetectionErrorFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1181  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1182  /** \brief Enables/disables LIN checksum error flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1183   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1184   * \param enable choice (enable / disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1185   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1186   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1187  IFX_INLINE void IfxAsclin_enableLinChecksumErrorFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1188  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1189  /** \brief Enables/disables LIN parity error flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1190   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1191   * \param enable choice (enable / disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1192   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1193   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1194  IFX_INLINE void IfxAsclin_enableLinParityErrorFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1195  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1196  /** \brief Enables/disables the loop back mode
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1197   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1198   * \param enable choice (enable/disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1199   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1200   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1201  IFX_INLINE void IfxAsclin_enableLoopBackMode(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1202  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1203  /** \brief Enables/disables the parity bit attachment to tha data bits
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1204   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1205   * \param enable choice (enable/disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1206   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1207   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1208  IFX_INLINE void IfxAsclin_enableParity(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1209  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1210  /** \brief Enables/disables parity error flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1211   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1212   * \param enable choice (enable / disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1213   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1214   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1215  IFX_INLINE void IfxAsclin_enableParityErrorFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1216  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1217  /** \brief Enables/disables raising edge detected flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1218   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1219   * \param enable choice (enable / disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1220   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1221   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1222  IFX_INLINE void IfxAsclin_enableRaisingEdgeDetectedFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1223  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1224  /** \brief Enables/disables response timeout flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1225   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1226   * \param enable choice (enable / disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1227   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1228   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1229  IFX_INLINE void IfxAsclin_enableResponseTimeoutFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1230  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1231  /** \brief Enables/disables Rx FIFO level flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1232   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1233   * \param enable choice (enable / disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1234   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1235   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1236  IFX_INLINE void IfxAsclin_enableRxFifoFillLevelFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1237  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1238  /** \brief Enables/disables the receive FIFO outlet to allow filling of Rx FIFO through shift register
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1239   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1240   * \param enable choice (enable/disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1241   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1242   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1243  IFX_INLINE void IfxAsclin_enableRxFifoInlet(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1244  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1245  /** \brief Enables/disables Rx FIFO overflow flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1246   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1247   * \param enable choice (enable / disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1248   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1249   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1250  IFX_INLINE void IfxAsclin_enableRxFifoOverflowFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1251  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1252  /** \brief Enables/disables Rx FIFO underflow flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1253   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1254   * \param enable choice (enable / disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1255   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1256   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1257  IFX_INLINE void IfxAsclin_enableRxFifoUnderflowFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1258  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1259  /** \brief Enables/disables receive header end flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1260   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1261   * \param enable choice (enable / disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1262   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1263   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1264  IFX_INLINE void IfxAsclin_enableRxHeaderEndFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1265  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1266  /** \brief Enables/disables receive response end flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1267   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1268   * \param enable choice (enable / disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1269   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1270   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1271  IFX_INLINE void IfxAsclin_enableRxResponseEndFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1272  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1273  /** \brief Enables/disables transmission completed flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1274   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1275   * \param enable choice (enable / disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1276   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1277   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1278  IFX_INLINE void IfxAsclin_enableTransmissionCompletedFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1279  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1280  /** \brief Enables/disables Tx FIFO level flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1281   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1282   * \param enable choice (enable / disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1283   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1284   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1285  IFX_INLINE void IfxAsclin_enableTxFifoFillLevelFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1286  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1287  /** \brief Enables/disables the transmit FIFO outlet to allow transmission
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1288   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1289   * \param enable choice (enable/disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1290   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1291   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1292  IFX_INLINE void IfxAsclin_enableTxFifoOutlet(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1293  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1294  /** \brief Enables/disables Tx FIFO overflow flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1295   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1296   * \param enable choice (enable / disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1297   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1298   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1299  IFX_INLINE void IfxAsclin_enableTxFifoOverflowFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1300  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1301  /** \brief Enables/disables transmit header end flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1302   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1303   * \param enable choice (enable / disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1304   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1305   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1306  IFX_INLINE void IfxAsclin_enableTxHeaderEndFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1307  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1308  /** \brief Enables/disables transmit response end flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1309   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1310   * \param enable choice (enable / disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1311   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1312   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1313  IFX_INLINE void IfxAsclin_enableTxResponseEndFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1314  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1315  /** \brief Returns the module's suspend state.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1316   * TRUE :if module is suspended.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1317   * FALSE:if module is not yet suspended.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1318   * \param asclin Pointer to ASCLIN module registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1319   * \return Suspend status (TRUE / FALSE)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1320   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1321  IFX_INLINE boolean IfxAsclin_isModuleSuspended(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1322  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1323  /** \brief Selects the clock polarity
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1324   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1325   * \param cpol CPOL selection
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1326   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1327   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1328  IFX_INLINE void IfxAsclin_setClockPolarity(Ifx_ASCLIN *asclin, IfxAsclin_ClockPolarity cpol);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1329  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1330  /** \brief Selects the CTS input pin
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1331   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1332   * \param ctsi CTS input pin selection
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1333   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1334   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1335  IFX_INLINE void IfxAsclin_setCtsInput(Ifx_ASCLIN *asclin, IfxAsclin_CtsInputSelect ctsi);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1336  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1337  /** \brief Selects the module's mode of operation
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1338   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1339   * \param mode mode selction
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1340   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1341   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1342  IFX_INLINE void IfxAsclin_setFrameMode(Ifx_ASCLIN *asclin, IfxAsclin_FrameMode mode);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1343  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1344  /** \brief Selects the RTS/CTS polarity
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1345   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1346   * \param rcpol RCPOL selection
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1347   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1348   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1349  IFX_INLINE void IfxAsclin_setRtsCtsPolarity(Ifx_ASCLIN *asclin, IfxAsclin_RtsCtsPolarity rcpol);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1350  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1351  /** \brief Selects the alternate input for Rx signal
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1352   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1353   * \param alti alternate input selection of Rx signal
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1354   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1355   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1356  IFX_INLINE void IfxAsclin_setRxInput(Ifx_ASCLIN *asclin, IfxAsclin_RxInputSelect alti);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1357  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1358  /** \brief Selects the slave polarity
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1359   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1360   * \param spol SPOL selection
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1361   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1362   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1363  IFX_INLINE void IfxAsclin_setSlavePolarity(Ifx_ASCLIN *asclin, IfxAsclin_SlavePolarity spol);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1364  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1365  /** \brief Configure the Module to Hard/Soft suspend mode.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1366   * Note: The api works only when the OCDS is enabled and in Supervisor Mode. When OCDS is disabled the OCS suspend control is ineffective.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1367   * \param asclin Pointer to ASCLIN module registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1368   * \param mode Module suspend mode
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1369   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1370   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1371  IFX_INLINE void IfxAsclin_setSuspendMode(Ifx_ASCLIN *asclin, IfxAsclin_SuspendMode mode);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1372  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1373  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1374  /*-------------------------Global Function Prototypes-------------------------*/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1375  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1376  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1377  /** \brief Set the bit timing
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1378   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1379   * \note this function required FA source and the PD frequency to be set to their final values
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1380   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1381   * \param baudrate Required baudrate
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1382   * \param oversampling The oversampling factor
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1383   * \param samplepoint The sample point position
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1384   * \param medianFilter Number of samples per bit (median filter)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1385   * \return TRUE if configuration was successfull
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1386   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1387  IFX_EXTERN boolean IfxAsclin_setBitTiming(Ifx_ASCLIN *asclin, float32 baudrate, IfxAsclin_OversamplingFactor oversampling, IfxAsclin_SamplePointPosition samplepoint, IfxAsclin_SamplesPerBit medianFilter);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1388  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1389  /** \} */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1390  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1391  /** \addtogroup IfxLld_Asclin_Std_External
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1392   * \{ */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1393  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1394  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1395  /*-------------------------Global Function Prototypes-------------------------*/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1396  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1397  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1398  /** \brief Disables the module
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1399   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1400   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1401   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1402  IFX_EXTERN void IfxAsclin_disableModule(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1403  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1404  /** \brief Enables the ASC error interrupt Flags
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1405   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1406   * \param parEnable parity error
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1407   * \param rfoEnable Rx FIFO overflow error
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1408   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1409   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1410  IFX_EXTERN void IfxAsclin_enableAscErrorFlags(Ifx_ASCLIN *asclin, boolean parEnable, boolean rfoEnable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1411  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1412  /** \brief Enables the module
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1413   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1414   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1415   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1416  IFX_EXTERN void IfxAsclin_enableModule(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1417  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1418  /** \brief Returns the SRC pointer for ERR
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1419   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1420   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1421  IFX_EXTERN volatile Ifx_SRC_SRCR *IfxAsclin_getSrcPointerEr(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1422  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1423  /** \brief Returns the  SRC pointer for Rx
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1424   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1425   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1426  IFX_EXTERN volatile Ifx_SRC_SRCR *IfxAsclin_getSrcPointerRx(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1427  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1428  /** \brief Returns the SRC pointer for Tx
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1429   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1430   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1431  IFX_EXTERN volatile Ifx_SRC_SRCR *IfxAsclin_getSrcPointerTx(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1432  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1433  /** \brief Reads data up to 16 bits
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1434   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1435   * \param data Array where the read data shall be stored
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1436   * \param count number of items to read
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1437   * \return number of items that could not be read
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1438   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1439  IFX_EXTERN uint32 IfxAsclin_read16(Ifx_ASCLIN *asclin, uint16 *data, uint32 count);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1440  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1441  /** \brief Reads data up to 32 bits
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1442   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1443   * \param data Array where the read data shall be stored
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1444   * \param count number of items to read
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1445   * \return number of items that could not be read
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1446   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1447  IFX_EXTERN uint32 IfxAsclin_read32(Ifx_ASCLIN *asclin, uint32 *data, uint32 count);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1448  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1449  /** \brief Reads data up to 8 bits
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1450   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1451   * \param data Array where the read data shall be stored
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1452   * \param count number of items to read
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1453   * \return number of items that could not be read
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1454   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1455  IFX_EXTERN uint32 IfxAsclin_read8(Ifx_ASCLIN *asclin, uint8 *data, uint32 count);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1456  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1457  /** \brief Sets the baudrate bit fields
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1458   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1459   * \param prescaler division ratio of the predivider
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1460   * \param numerator numerator of the fractional divider
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1461   * \param denominator denominator of the fractional divider
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1462   * \param oversampling division ratio of the baudrate postdivider
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1463   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1464   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1465  IFX_EXTERN void IfxAsclin_setBaudrateBitFields(Ifx_ASCLIN *asclin, uint16 prescaler, uint16 numerator, uint16 denominator, IfxAsclin_OversamplingFactor oversampling);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1466  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1467  /** \brief Sets the  clock source
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1468   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1469   * \param clockSource clock source selection
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1470   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1471   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1472  IFX_EXTERN void IfxAsclin_setClockSource(Ifx_ASCLIN *asclin, IfxAsclin_ClockSource clockSource);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1473  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1474  /** \brief Writes data up to 16 bits
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1475   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1476   * \param data Array of data to be send
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1477   * \param count number of items to be send
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1478   * \return the number of items that could not be send
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1479   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1480  IFX_EXTERN uint32 IfxAsclin_write16(Ifx_ASCLIN *asclin, uint16 *data, uint32 count);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1481  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1482  /** \brief Writes data up to 32 bits
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1483   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1484   * \param data Array of data to be send
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1485   * \param count number of items to be send
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1486   * \return the number of items that could not be send
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1487   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1488  IFX_EXTERN uint32 IfxAsclin_write32(Ifx_ASCLIN *asclin, uint32 *data, uint32 count);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1489  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1490  /** \brief Writes data up to 8 bits
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1491   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1492   * \param data Array of data to be send
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1493   * \param count number of items to be send
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1494   * \return the number of items that could not be send
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1495   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1496  IFX_EXTERN uint32 IfxAsclin_write8(Ifx_ASCLIN *asclin, uint8 *data, uint32 count);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1497  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1498  /** \} */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1499  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1500  /** \addtogroup IfxLld_Asclin_Std_IO
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1501   * \{ */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1502  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1503  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1504  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1505  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1506  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1507  /** \brief Initializes a CTS input
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1508   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1509   * Attention: the kernel clock has to be disabled whenever the input multiplexer is changed.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1510   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1511   * This can be done with IfxAsclin_setClockSource(asclinSFR, IfxAsclin_ClockSource_noClock);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1512   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1513   * After the function call, the current clock can be enabled again.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1514   * \param cts the CTS Pin which should be configured
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1515   * \param inputMode the pin input mode which should be configured
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1516   * \param padDriver the pad driver mode which should be configured
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1517   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1518   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1519  IFX_INLINE void IfxAsclin_initCtsPin(const IfxAsclin_Cts_In *cts, IfxPort_InputMode inputMode, IfxPort_PadDriver padDriver);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1520  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1521  /** \brief Initializes a RTS output
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1522   * \param rts the RTS Pin which should be configured
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1523   * \param outputMode the pin output mode which should be configured
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1524   * \param padDriver the pad driver mode which should be configured
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1525   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1526   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1527  IFX_INLINE void IfxAsclin_initRtsPin(const IfxAsclin_Rts_Out *rts, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1528  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1529  /** \brief Initializes a RX input
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1530   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1531   * Attention: the kernel clock has to be disabled whenever the input multiplexer is changed.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1532   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1533   * This can be done with IfxAsclin_setClockSource(asclinSFR, IfxAsclin_ClockSource_noClock);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1534   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1535   * After the function call, the current clock can be enabled again.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1536   * \param rx the RX Pin which should be configured
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1537   * \param inputMode the pin input mode which should be configured
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1538   * \param padDriver the pad driver mode which should be configured
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1539   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1540   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1541  IFX_INLINE void IfxAsclin_initRxPin(const IfxAsclin_Rx_In *rx, IfxPort_InputMode inputMode, IfxPort_PadDriver padDriver);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1542  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1543  /** \brief Initializes a SCLK output
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1544   * \param sclk the SCLK Pin which should be configured
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1545   * \param outputMode the pin output mode which should be configured
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1546   * \param padDriver the pad driver mode which should be configured
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1547   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1548   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1549  IFX_INLINE void IfxAsclin_initSclkPin(const IfxAsclin_Sclk_Out *sclk, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1550  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1551  /** \brief Initializes a SLSO output
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1552   * \param slso the SLSO Pin which should be configured
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1553   * \param outputMode the pin output mode which should be configured
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1554   * \param padDriver the pad driver mode which should be configured
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1555   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1556   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1557  IFX_INLINE void IfxAsclin_initSlsoPin(const IfxAsclin_Slso_Out *slso, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1558  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1559  /** \brief Initializes a TX output
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1560   * \param tx the TX Pin which should be configured
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1561   * \param outputMode the pin output mode which should be configured
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1562   * \param padDriver the pad driver mode which should be configured
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1563   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1564   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1565  IFX_INLINE void IfxAsclin_initTxPin(const IfxAsclin_Tx_Out *tx, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1566  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1567  /** \} */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1568  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1569  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1570  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1571  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1572  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1573  /**
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1574   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1575   * \return returns the value of RxDATA register
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1576   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1577  IFX_INLINE uint32 IfxAsclin_readRxData(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1578  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1579  /**
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1580   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1581   * \param data data to be written
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1582   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1583   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1584  IFX_INLINE void IfxAsclin_writeTxData(Ifx_ASCLIN *asclin, uint32 data);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1585  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1586  /** \brief Returns the status of all error flags
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1587   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1588   * \return status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1589   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1590  IFX_INLINE uint16 IfxAsclin_getAllErrorFlagsStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1591  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1592  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1593  /*---------------------Inline Function Implementations------------------------*/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1594  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1595  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1596  IFX_INLINE void IfxAsclin_clearAllFlags(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1597  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1598      asclin->FLAGSCLEAR.U = 0xFFFFFFFF;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1599  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1600  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1601  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1602  IFX_INLINE void IfxAsclin_clearBreakDetectedFlag(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1603  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1604      asclin->FLAGSCLEAR.B.BDC = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1605  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1606  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1607  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1608  IFX_INLINE void IfxAsclin_clearCollisionDetectionErrorFlag(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1609  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1610      asclin->FLAGSCLEAR.B.CEC = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1611  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1612  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1613  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1614  IFX_INLINE void IfxAsclin_clearFallingEdgeDetectedFlag(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1615  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1616      asclin->FLAGSCLEAR.B.FEDC = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1617  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1618  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1619  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1620  IFX_INLINE void IfxAsclin_clearFrameErrorFlag(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1621  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1622      asclin->FLAGSCLEAR.B.FEC = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1623  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1624  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1625  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1626  IFX_INLINE void IfxAsclin_clearHeaderTimeoutFlag(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1627  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1628      asclin->FLAGSCLEAR.B.HTC = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1629  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1630  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1631  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1632  IFX_INLINE void IfxAsclin_clearKernelResetStatus(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1633  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1634      asclin->KRSTCLR.B.CLR = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1635  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1636  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1637  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1638  IFX_INLINE void IfxAsclin_clearLinAutoBaudDetectionErrorFlag(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1639  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1640      asclin->FLAGSCLEAR.B.LAC = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1641  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1642  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1643  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1644  IFX_INLINE void IfxAsclin_clearLinChecksumErrorFlag(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1645  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1646      asclin->FLAGSCLEAR.B.LCC = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1647  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1648  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1649  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1650  IFX_INLINE void IfxAsclin_clearLinParityErrorFlag(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1651  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1652      asclin->FLAGSCLEAR.B.LPC = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1653  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1654  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1655  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1656  IFX_INLINE void IfxAsclin_clearParityErrorFlag(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1657  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1658      asclin->FLAGSCLEAR.B.PEC = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1659  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1660  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1661  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1662  IFX_INLINE void IfxAsclin_clearRaisingEdgeDetectedFlag(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1663  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1664      asclin->FLAGSCLEAR.B.REDC = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1665  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1666  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1667  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1668  IFX_INLINE void IfxAsclin_clearResponseTimeoutFlag(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1669  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1670      asclin->FLAGSCLEAR.B.RTC = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1671  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1672  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1673  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1674  IFX_INLINE void IfxAsclin_clearRxFifoFillLevelFlag(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1675  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1676      asclin->FLAGSCLEAR.B.RFLC = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1677  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1678  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1679  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1680  IFX_INLINE void IfxAsclin_clearRxFifoOverflowFlag(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1681  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1682      asclin->FLAGSCLEAR.B.RFOC = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1683  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1684  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1685  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1686  IFX_INLINE void IfxAsclin_clearRxFifoUnderflowFlag(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1687  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1688      asclin->FLAGSCLEAR.B.RFUC = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1689  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1690  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1691  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1692  IFX_INLINE void IfxAsclin_clearRxHeaderEndFlag(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1693  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1694      asclin->FLAGSCLEAR.B.RHC = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1695  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1696  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1697  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1698  IFX_INLINE void IfxAsclin_clearRxResponseEndFlag(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1699  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1700      asclin->FLAGSCLEAR.B.RRC = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1701  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1702  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1703  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1704  IFX_INLINE void IfxAsclin_clearTransmissionCompletedFlag(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1705  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1706      asclin->FLAGSCLEAR.B.TCC = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1707  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1708  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1709  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1710  IFX_INLINE void IfxAsclin_clearTxFifoFillLevelFlag(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1711  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1712      asclin->FLAGSCLEAR.B.TFLC = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1713  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1714  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1715  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1716  IFX_INLINE void IfxAsclin_clearTxFifoOverflowFlag(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1717  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1718      asclin->FLAGSCLEAR.B.TFOC = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1719  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1720  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1721  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1722  IFX_INLINE void IfxAsclin_clearTxHeaderEndFlag(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1723  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1724      asclin->FLAGSCLEAR.B.THC = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1725  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1726  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1727  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1728  IFX_INLINE void IfxAsclin_clearTxResponseEndFlag(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1729  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1730      asclin->FLAGSCLEAR.B.TRC = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1731  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1732  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1733  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1734  IFX_INLINE void IfxAsclin_disableAllFlags(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1735  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1736      asclin->FLAGSENABLE.U = 0x00000000;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1737  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1738  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1739  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1740  IFX_INLINE void IfxAsclin_enableAutoBaudrateDetection(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1741  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1742      asclin->LIN.CON.B.ABD = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1743  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1744  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1745  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1746  IFX_INLINE void IfxAsclin_enableBreakDetectedFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1747  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1748      asclin->FLAGSENABLE.B.BDE = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1749  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1750  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1751  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1752  IFX_INLINE void IfxAsclin_enableCollisionDetection(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1753  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1754      asclin->FRAMECON.B.CEN = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1755  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1756  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1757  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1758  IFX_INLINE void IfxAsclin_enableCollisionDetectionErrorFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1759  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1760      asclin->FLAGSENABLE.B.CEE = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1761  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1762  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1763  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1764  IFX_INLINE void IfxAsclin_enableCts(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1765  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1766      asclin->IOCR.B.CTSEN = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1767  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1768  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1769  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1770  IFX_INLINE void IfxAsclin_enableFallingEdgeDetectedFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1771  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1772      asclin->FLAGSENABLE.B.FEDE = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1773  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1774  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1775  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1776  IFX_INLINE void IfxAsclin_enableFrameErrorFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1777  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1778      asclin->FLAGSENABLE.B.FEE = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1779  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1780  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1781  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1782  IFX_INLINE void IfxAsclin_enableHardwareChecksum(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1783  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1784      asclin->LIN.CON.B.CSEN = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1785  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1786  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1787  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1788  IFX_INLINE void IfxAsclin_enableHeaderTimeoutFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1789  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1790      asclin->FLAGSENABLE.B.HTE = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1791  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1792  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1793  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1794  IFX_INLINE void IfxAsclin_enableLinAutoBaudDetectionErrorFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1795  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1796      asclin->FLAGSENABLE.B.ABE = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1797  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1798  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1799  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1800  IFX_INLINE void IfxAsclin_enableLinChecksumErrorFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1801  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1802      asclin->FLAGSENABLE.B.LCE = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1803  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1804  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1805  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1806  IFX_INLINE void IfxAsclin_enableLinParityErrorFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1807  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1808      asclin->FLAGSENABLE.B.LPE = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1809  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1810  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1811  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1812  IFX_INLINE void IfxAsclin_enableLoopBackMode(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1813  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1814      asclin->IOCR.B.LB = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1815  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1816  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1817  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1818  IFX_INLINE void IfxAsclin_enableParity(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1819  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1820      asclin->FRAMECON.B.PEN = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1821  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1822  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1823  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1824  IFX_INLINE void IfxAsclin_enableParityErrorFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1825  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1826      asclin->FLAGSENABLE.B.PEE = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1827  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1828  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1829  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1830  IFX_INLINE void IfxAsclin_enableRaisingEdgeDetectedFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1831  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1832      asclin->FLAGSENABLE.B.REDE = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1833  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1834  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1835  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1836  IFX_INLINE void IfxAsclin_enableResponseTimeoutFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1837  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1838      asclin->FLAGSENABLE.B.RTE = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1839  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1840  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1841  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1842  IFX_INLINE void IfxAsclin_enableRxFifoFillLevelFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1843  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1844      asclin->FLAGSENABLE.B.RFLE = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1845  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1846  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1847  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1848  IFX_INLINE void IfxAsclin_enableRxFifoInlet(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1849  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1850      asclin->RXFIFOCON.B.ENI = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1851  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1852  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1853  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1854  IFX_INLINE void IfxAsclin_enableRxFifoOverflowFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1855  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1856      asclin->FLAGSENABLE.B.RFOE = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1857  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1858  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1859  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1860  IFX_INLINE void IfxAsclin_enableRxFifoUnderflowFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1861  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1862      asclin->FLAGSENABLE.B.RFUE = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1863  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1864  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1865  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1866  IFX_INLINE void IfxAsclin_enableRxHeaderEndFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1867  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1868      asclin->FLAGSENABLE.B.RHE = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1869  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1870  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1871  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1872  IFX_INLINE void IfxAsclin_enableRxResponseEndFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1873  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1874      asclin->FLAGSENABLE.B.RRE = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1875  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1876  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1877  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1878  IFX_INLINE void IfxAsclin_enableTransmissionCompletedFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1879  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1880      asclin->FLAGSENABLE.B.TCE = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1881  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1882  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1883  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1884  IFX_INLINE void IfxAsclin_enableTxFifoFillLevelFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1885  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1886      asclin->FLAGSENABLE.B.TFLE = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1887  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1888  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1889  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1890  IFX_INLINE void IfxAsclin_enableTxFifoOutlet(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1891  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1892      asclin->TXFIFOCON.B.ENO = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1893  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1894  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1895  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1896  IFX_INLINE void IfxAsclin_enableTxFifoOverflowFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1897  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1898      asclin->FLAGSENABLE.B.TFOE = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1899  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1900  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1901  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1902  IFX_INLINE void IfxAsclin_enableTxHeaderEndFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1903  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1904      asclin->FLAGSENABLE.B.THE = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1905  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1906  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1907  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1908  IFX_INLINE void IfxAsclin_enableTxResponseEndFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1909  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1910      asclin->FLAGSENABLE.B.TRE = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1911  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1912  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1913  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1914  IFX_INLINE void IfxAsclin_flushRxFifo(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1915  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1916      asclin->RXFIFOCON.B.FLUSH = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1917  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1918  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1919  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1920  IFX_INLINE void IfxAsclin_flushTxFifo(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1921  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1922      asclin->TXFIFOCON.B.FLUSH = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1923  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1924  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1925  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1926  IFX_INLINE boolean IfxAsclin_getBreakDetectedFlagStatus(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1927  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1928      return asclin->FLAGS.B.BD;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1929  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1930  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1931  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1932  IFX_INLINE uint8 IfxAsclin_getClockSource(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1933  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1934      return asclin->CSR.B.CLKSEL;
	and	d12,d15,#31
.L388:

; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	   249    IfxAsclin_setClockSource(asclin, clockSource);                                               /* sets the clock source back on*/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	   250  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	   251  
	mov	d4,#0
.L476:
	mov	e10,d7,d6
	call	IfxAsclin_setClockSource
.L390:

; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	     1  /**
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	     2   * \file IfxAsclin.h
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	     3   * \brief ASCLIN  basic functionality
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	     4   * \ingroup IfxLld_Asclin
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	     5   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	     6   * \version iLLD_1_0_1_11_0
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	     7   * \copyright Copyright (c) 2018 Infineon Technologies AG. All rights reserved.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	     8   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	     9   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    10   *                                 IMPORTANT NOTICE
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    11   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    12   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    13   * Use of this file is subject to the terms of use agreed between (i) you or 
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    14   * the company in which ordinary course of business you are acting and (ii) 
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    15   * Infineon Technologies AG or its licensees. If and as long as no such 
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    16   * terms of use are agreed, use of this file is subject to following:
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    17  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    18  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    19   * Boost Software License - Version 1.0 - August 17th, 2003
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    20  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    21   * Permission is hereby granted, free of charge, to any person or 
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    22   * organization obtaining a copy of the software and accompanying 
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    23   * documentation covered by this license (the "Software") to use, reproduce,
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    24   * display, distribute, execute, and transmit the Software, and to prepare
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    25   * derivative works of the Software, and to permit third-parties to whom the 
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    26   * Software is furnished to do so, all subject to the following:
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    27  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    28   * The copyright notices in the Software and this entire statement, including
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    29   * the above license grant, this restriction and the following disclaimer, must
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    30   * be included in all copies of the Software, in whole or in part, and all
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    31   * derivative works of the Software, unless such copies or derivative works are
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    32   * solely in the form of machine-executable object code generated by a source
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    33   * language processor.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    34  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    35   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR 
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    36   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    37   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    38   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE 
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    39   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    40   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    41   * DEALINGS IN THE SOFTWARE.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    42  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    43   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    44   * \defgroup IfxLld_Asclin_Std_Enumerations Enumerations
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    45   * \ingroup IfxLld_Asclin_Std
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    46   * \defgroup IfxLld_Asclin_Std_Operative Operative Functions
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    47   * \ingroup IfxLld_Asclin_Std
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    48   * \defgroup IfxLld_Asclin_Std_Utility Utility Functions
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    49   * \ingroup IfxLld_Asclin_Std
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    50   * \defgroup IfxLld_Asclin_Std_Configuration Configuration Functions
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    51   * \ingroup IfxLld_Asclin_Std
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    52   * \defgroup IfxLld_Asclin_Std_External External Functions
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    53   * \ingroup IfxLld_Asclin_Std
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    54   * \defgroup IfxLld_Asclin_Std_IO IO Pin Configuration Functions
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    55   * \ingroup IfxLld_Asclin_Std
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    56   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    57  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    58  #ifndef IFXASCLIN_H
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    59  #define IFXASCLIN_H 1
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    60  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    61  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    62  /*----------------------------------Includes----------------------------------*/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    63  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    64  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    65  #include "_Impl/IfxAsclin_cfg.h"
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    66  #include "Scu/Std/IfxScuCcu.h"
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    67  #include "Scu/Std/IfxScuWdt.h"
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    68  #include "Cpu/Std/IfxCpu_Intrinsics.h"
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    69  #include "IfxAsclin_reg.h"
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    70  #include "Src/Std/IfxSrc.h"
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    71  #include "_PinMap/IfxAsclin_PinMap.h"
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    72  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    73  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    74  /*--------------------------------Enumerations--------------------------------*/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    75  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    76  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    77  /** \addtogroup IfxLld_Asclin_Std_Enumerations
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    78   * \{ */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    79  /** \brief Defines if the classic or the enhanced checksum will be calculated by the checksum block.\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    80   * Definition in Ifx_ASCLIN.DATCON.B.CSM
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    81   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    82  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    83  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    84      IfxAsclin_Checksum_classic  = 0, /**< \brief classic checksum */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    85      IfxAsclin_Checksum_enhanced = 1  /**< \brief enhanced checksum */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    86  } IfxAsclin_Checksum;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    87  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    88  /** \brief Defines if the received checksum byte is written into the RXFifo or not.\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    89   * Definition in Ifx_ASCLIN.LIN.CON.B.CSI
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    90   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    91  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    92  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    93      IfxAsclin_ChecksumInjection_notWritten = 0,  /**< \brief checksum byte is not written */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    94      IfxAsclin_ChecksumInjection_written    = 1   /**< \brief checksum byte is written */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    95  } IfxAsclin_ChecksumInjection;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    96  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    97  /** \brief CPOL defines the idle level of the clock signal in the SPI mode.\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    98   * Idle level is the level outside the data transmission time intervals.\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    99   * Definition in Ifx_ASCLIN.IOCR.B.CPOL
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   100   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   101  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   102  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   103      IfxAsclin_ClockPolarity_idleLow  = 0, /**< \brief idle low */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   104      IfxAsclin_ClockPolarity_idleHigh = 1  /**< \brief idle high */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   105  } IfxAsclin_ClockPolarity;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   106  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   107  /** \brief Selection of clock source\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   108   * Definition in Ifx_ASCLIN.CSR.B.CLKSEL
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   109   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   110  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   111  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   112      IfxAsclin_ClockSource_noClock         = 0,  /**< \brief no clock will be supplied */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   113      IfxAsclin_ClockSource_kernelClock     = 1,  /**< \brief f clc will be supplied */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   114      IfxAsclin_ClockSource_oscillatorClock = 2,  /**< \brief XTAL oscillator clock foso0 will be supplied */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   115      IfxAsclin_ClockSource_flexRayClock    = 4,  /**< \brief f eray will be supplied */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   116      IfxAsclin_ClockSource_ascFastClock    = 8,  /**< \brief f asclinf wiil be supplied */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   117      IfxAsclin_ClockSource_ascSlowClock    = 16  /**< \brief f asclins will be supplied */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   118  } IfxAsclin_ClockSource;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   119  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   120  /** \brief CTS input pin selection\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   121   * Definition in Ifx_ASCLIN.IOCR.B.CTS
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   122   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   123  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   124  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   125      IfxAsclin_CtsInputSelect_0,     /**< \brief CTS input pin 0  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   126      IfxAsclin_CtsInputSelect_1,     /**< \brief CTS input pin 1  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   127      IfxAsclin_CtsInputSelect_2,     /**< \brief CTS input pin 2  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   128      IfxAsclin_CtsInputSelect_3      /**< \brief CTS input pin 3  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   129  } IfxAsclin_CtsInputSelect;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   130  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   131  /** \brief Number of bits per transfer\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   132   * Definition in Ifx_ASCLIN.FRAMECON.B.DATALEN
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   133   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   134  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   135  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   136      IfxAsclin_DataLength_1 = 0,      /**< \brief number of bits per transfer 0  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   137      IfxAsclin_DataLength_2,          /**< \brief number of bits per transfer 1  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   138      IfxAsclin_DataLength_3,          /**< \brief number of bits per transfer 2  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   139      IfxAsclin_DataLength_4,          /**< \brief number of bits per transfer 3  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   140      IfxAsclin_DataLength_5,          /**< \brief number of bits per transfer 4  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   141      IfxAsclin_DataLength_6,          /**< \brief number of bits per transfer 5  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   142      IfxAsclin_DataLength_7,          /**< \brief number of bits per transfer 6  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   143      IfxAsclin_DataLength_8,          /**< \brief number of bits per transfer 7  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   144      IfxAsclin_DataLength_9,          /**< \brief number of bits per transfer 8  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   145      IfxAsclin_DataLength_10,         /**< \brief number of bits per transfer 9  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   146      IfxAsclin_DataLength_11,         /**< \brief number of bits per transfer 10  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   147      IfxAsclin_DataLength_12,         /**< \brief number of bits per transfer 11  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   148      IfxAsclin_DataLength_13,         /**< \brief number of bits per transfer 12  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   149      IfxAsclin_DataLength_14,         /**< \brief number of bits per transfer 13  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   150      IfxAsclin_DataLength_15,         /**< \brief number of bits per transfer 14  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   151      IfxAsclin_DataLength_16          /**< \brief number of bits per transfer 15  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   152  } IfxAsclin_DataLength;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   153  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   154  /** \brief Defines the basic operating mode of the module. Changing the mode must be done by switching first to initialize mode, and then to the other mode.\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   155   * Definition in Ifx_ASCLIN.FRAMECON.B.MODE
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   156   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   157  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   158  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   159      IfxAsclin_FrameMode_initialise = 0,  /**< \brief initialise mode */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   160      IfxAsclin_FrameMode_asc        = 1,  /**< \brief asc mode */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   161      IfxAsclin_FrameMode_spi        = 2,  /**< \brief spi mode */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   162      IfxAsclin_FrameMode_lin        = 3   /**< \brief lin mode */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   163  } IfxAsclin_FrameMode;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   164  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   165  /** \brief Defines if LIN frame shall consist of a header and response or of a header only.\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   166   * Definition in Ifx_ASCLIN.DATCON.B.HO
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   167   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   168  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   169  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   170      IfxAsclin_HeaderResponseSelect_headerAndResponse = 0,  /**< \brief header and response expected */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   171      IfxAsclin_HeaderResponseSelect_headerOnly        = 1   /**< \brief header only expected */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   172  } IfxAsclin_HeaderResponseSelect;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   173  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   174  /** \brief Defines the duration of the IDLE delay in bit times.\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   175   * SPI mode: this is the idle time between the frames.\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   176   * ASC and LIN mode: this is the pause inserted between transmission of bytes.\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   177   * Definition in Ifx_ASCLIN.FRAMECON.B.IDLE
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   178   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   179  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   180  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   181      IfxAsclin_IdleDelay_0,     /**< \brief idle delay in 0 bit times  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   182      IfxAsclin_IdleDelay_1,     /**< \brief idle delay in 1 bit times  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   183      IfxAsclin_IdleDelay_2,     /**< \brief idle delay in 2 bit times  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   184      IfxAsclin_IdleDelay_3,     /**< \brief idle delay in 3 bit times  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   185      IfxAsclin_IdleDelay_4,     /**< \brief idle delay in 4 bit times  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   186      IfxAsclin_IdleDelay_5,     /**< \brief idle delay in 5 bit times  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   187      IfxAsclin_IdleDelay_6,     /**< \brief idle delay in 6 bit times  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   188      IfxAsclin_IdleDelay_7      /**< \brief idle delay in 7 bit times  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   189  } IfxAsclin_IdleDelay;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   190  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   191  /** \brief Defines the leading delay in bit times in SPI mode. ASC mode: not applicable.\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   192   * LIN mode: delay between the end of the break and the start of the sync character.\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   193   * Definition in Ifx_ASCLIN.FRAMECON.B.LEAD
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   194   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   195  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   196  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   197      IfxAsclin_LeadDelay_0,     /**< \brief lead delay in 0 bit times  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   198      IfxAsclin_LeadDelay_1,     /**< \brief lead delay in 1 bit times  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   199      IfxAsclin_LeadDelay_2,     /**< \brief lead delay in 2 bit times  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   200      IfxAsclin_LeadDelay_3,     /**< \brief lead delay in 3 bit times  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   201      IfxAsclin_LeadDelay_4,     /**< \brief lead delay in 4 bit times  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   202      IfxAsclin_LeadDelay_5,     /**< \brief lead delay in 5 bit times  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   203      IfxAsclin_LeadDelay_6,     /**< \brief lead delay in 6 bit times  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   204      IfxAsclin_LeadDelay_7      /**< \brief lead delay in 7 bit times  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   205  } IfxAsclin_LeadDelay;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   206  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   207  /** \brief Configures if the module in LIN mode operates as master or slave\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   208   * Definition in Ifx_ASCLIN.LIN.CON.B.MS
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   209   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   210  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   211  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   212      IfxAsclin_LinMode_slave  = 0, /**< \brief operates in slave mode */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   213      IfxAsclin_LinMode_master = 1  /**< \brief operates in master mode */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   214  } IfxAsclin_LinMode;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   215  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   216  /** \brief Defines the timeout threshold of RESPOSE bit is for LIN response timeout or LIN frame timeout.\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   217   * Definition in Ifx_ASCLIN.DATCON.B.RM
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   218   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   219  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   220  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   221      IfxAsclin_LinResponseTimeoutMode_frameTimeout    = 0, /**< \brief timeout threshold is for frame */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   222      IfxAsclin_LinResponseTimeoutMode_responseTimeout = 1  /**< \brief timeout threshold is for reponse */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   223  } IfxAsclin_LinResponseTimeoutMode;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   224  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   225  /** \brief Defines the bit length in ticks in the range of 1 to 16. The lengths of 1 to 3 are not allowed\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   226   * Definition in Ifx_ASCLIN.BITCON.B.OVERSAMPLING
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   227   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   228  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   229  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   230      IfxAsclin_OversamplingFactor_4  = 3,   /**< \brief oversampling factor 4 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   231      IfxAsclin_OversamplingFactor_5  = 4,   /**< \brief oversampling factor 5 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   232      IfxAsclin_OversamplingFactor_6  = 5,   /**< \brief oversampling factor 6 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   233      IfxAsclin_OversamplingFactor_7  = 6,   /**< \brief oversampling factor 7 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   234      IfxAsclin_OversamplingFactor_8  = 7,   /**< \brief oversampling factor 8 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   235      IfxAsclin_OversamplingFactor_9  = 8,   /**< \brief oversampling factor 9 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   236      IfxAsclin_OversamplingFactor_10 = 9,   /**< \brief oversampling factor 10 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   237      IfxAsclin_OversamplingFactor_11 = 10,  /**< \brief oversampling factor 11 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   238      IfxAsclin_OversamplingFactor_12 = 11,  /**< \brief oversampling factor 12 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   239      IfxAsclin_OversamplingFactor_13 = 12,  /**< \brief oversampling factor 13 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   240      IfxAsclin_OversamplingFactor_14 = 13,  /**< \brief oversampling factor 14 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   241      IfxAsclin_OversamplingFactor_15 = 14,  /**< \brief oversampling factor 15 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   242      IfxAsclin_OversamplingFactor_16 = 15   /**< \brief oversampling factor 16 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   243  } IfxAsclin_OversamplingFactor;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   244  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   245  /** \brief Type of parity bit attached to data bits\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   246   * Definition in Ifx_ASCLIN.FRAMECON.B.ODD
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   247   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   248  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   249  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   250      IfxAsclin_ParityType_even = 0,  /**< \brief even parity */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   251      IfxAsclin_ParityType_odd  = 1   /**< \brief odd parity */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   252  } IfxAsclin_ParityType;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   253  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   254  /** \brief Receive buffer mode\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   255   * Definition in Ifx_ASCLIN.RXFIFOCON.B.BUF
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   256   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   257  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   258  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   259      IfxAsclin_ReceiveBufferMode_rxFifo   = 0, /**< \brief RxFIFO mode */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   260      IfxAsclin_ReceiveBufferMode_rxBuffer = 1  /**< \brief single stage Rx buffer */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   261  } IfxAsclin_ReceiveBufferMode;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   262  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   263  /** \brief Polarity of the RTS and CTS signals\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   264   * Definition in Ifx_ASCLIN.IOCR.B.RCPOL
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   265   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   266  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   267  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   268      IfxAsclin_RtsCtsPolarity_activeHigh = 0,  /**< \brief ready/clear are active-high */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   269      IfxAsclin_RtsCtsPolarity_activeLow  = 1   /**< \brief ready/clear are active-low */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   270  } IfxAsclin_RtsCtsPolarity;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   271  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   272  /** \brief Defines the filling level that triggers a drain (RX) interrupt or DMA access\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   273   * Definition in Ifx_ASCLIN.RXFIFOCON.B.INTLEVEL
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   274   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   275  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   276  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   277      IfxAsclin_RxFifoInterruptLevel_1,     /**< \brief RX FIFO level 1  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   278      IfxAsclin_RxFifoInterruptLevel_2,     /**< \brief RX FIFO level 2  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   279      IfxAsclin_RxFifoInterruptLevel_3,     /**< \brief RX FIFO level 3  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   280      IfxAsclin_RxFifoInterruptLevel_4,     /**< \brief RX FIFO level 4  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   281      IfxAsclin_RxFifoInterruptLevel_5,     /**< \brief RX FIFO level 5  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   282      IfxAsclin_RxFifoInterruptLevel_6,     /**< \brief RX FIFO level 6  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   283      IfxAsclin_RxFifoInterruptLevel_7,     /**< \brief RX FIFO level 7  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   284      IfxAsclin_RxFifoInterruptLevel_8,     /**< \brief RX FIFO level 8  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   285      IfxAsclin_RxFifoInterruptLevel_9,     /**< \brief RX FIFO level 9  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   286      IfxAsclin_RxFifoInterruptLevel_10,    /**< \brief RX FIFO level 10  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   287      IfxAsclin_RxFifoInterruptLevel_11,    /**< \brief RX FIFO level 11  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   288      IfxAsclin_RxFifoInterruptLevel_12,    /**< \brief RX FIFO level 12  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   289      IfxAsclin_RxFifoInterruptLevel_13,    /**< \brief RX FIFO level 13  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   290      IfxAsclin_RxFifoInterruptLevel_14,    /**< \brief RX FIFO level 14  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   291      IfxAsclin_RxFifoInterruptLevel_15,    /**< \brief RX FIFO level 15  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   292      IfxAsclin_RxFifoInterruptLevel_16     /**< \brief RX FIFO level 16  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   293  } IfxAsclin_RxFifoInterruptLevel;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   294  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   295  /** \brief Defines the number of bytes read from the Rx FIFO with one FPI bus read\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   296   * Definition in Ifx_ASCLIN.RXFIFOCON.B.OUTW
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   297   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   298  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   299  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   300      IfxAsclin_RxFifoOutletWidth_0,     /**< \brief number of bytes 0  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   301      IfxAsclin_RxFifoOutletWidth_1,     /**< \brief number of bytes 1  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   302      IfxAsclin_RxFifoOutletWidth_2,     /**< \brief number of bytes 2  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   303      IfxAsclin_RxFifoOutletWidth_3      /**< \brief number of bytes 3  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   304  } IfxAsclin_RxFifoOutletWidth;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   305  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   306  /** \brief Alternate input selection for Rx signal.\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   307   * Definition in Ifx_ASCLIN.IOCR.B.ALTI
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   308   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   309  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   310  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   311      IfxAsclin_RxInputSelect_0,     /**< \brief alternate input selection 0  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   312      IfxAsclin_RxInputSelect_1,     /**< \brief alternate input selection 1  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   313      IfxAsclin_RxInputSelect_2,     /**< \brief alternate input selection 2  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   314      IfxAsclin_RxInputSelect_3,     /**< \brief alternate input selection 3  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   315      IfxAsclin_RxInputSelect_4,     /**< \brief alternate input selection 4  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   316      IfxAsclin_RxInputSelect_5,     /**< \brief alternate input selection 5  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   317      IfxAsclin_RxInputSelect_6,     /**< \brief alternate input selection 6  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   318      IfxAsclin_RxInputSelect_7      /**< \brief alternate input selection 7  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   319  } IfxAsclin_RxInputSelect;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   320  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   321  /** \brief Sample point position\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   322   * Definition in Ifx_ASCLIN.BITCON.B.SAMPLEPOINT
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   323   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   324  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   325  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   326      IfxAsclin_SamplePointPosition_1  = 1,   /**< \brief sample point position at 1 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   327      IfxAsclin_SamplePointPosition_2  = 2,   /**< \brief sample point position at 2 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   328      IfxAsclin_SamplePointPosition_3  = 3,   /**< \brief sample point position at 3 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   329      IfxAsclin_SamplePointPosition_4  = 4,   /**< \brief sample point position at 4 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   330      IfxAsclin_SamplePointPosition_5  = 5,   /**< \brief sample point position at 5 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   331      IfxAsclin_SamplePointPosition_6  = 6,   /**< \brief sample point position at 6 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   332      IfxAsclin_SamplePointPosition_7  = 7,   /**< \brief sample point position at 7 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   333      IfxAsclin_SamplePointPosition_8  = 8,   /**< \brief sample point position at 8 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   334      IfxAsclin_SamplePointPosition_9  = 9,   /**< \brief sample point position at 9 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   335      IfxAsclin_SamplePointPosition_10 = 10,  /**< \brief sample point position at 10 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   336      IfxAsclin_SamplePointPosition_11 = 11,  /**< \brief sample point position at 11 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   337      IfxAsclin_SamplePointPosition_12 = 12,  /**< \brief sample point position at 12 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   338      IfxAsclin_SamplePointPosition_13 = 13,  /**< \brief sample point position at 13 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   339      IfxAsclin_SamplePointPosition_14 = 14,  /**< \brief sample point position at 14 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   340      IfxAsclin_SamplePointPosition_15 = 15   /**< \brief sample point position at 15 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   341  } IfxAsclin_SamplePointPosition;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   342  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   343  /** \brief Number of samples per bit, sample mode/medianfilter\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   344   * Definition in Ifx_ASCLIN.BITCON.B.SM
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   345   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   346  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   347  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   348      IfxAsclin_SamplesPerBit_one   = 0, /**< \brief one sample per bit */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   349      IfxAsclin_SamplesPerBit_three = 1  /**< \brief three samples per bit */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   350  } IfxAsclin_SamplesPerBit;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   351  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   352  /** \brief SPI mode: defines the shift direction of the shift register.\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   353   * ASC and LIN mode: should be set to 0.\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   354   * Definition in Ifx_ASCLIN.FRAMECON.B.MSB
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   355   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   356  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   357  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   358      IfxAsclin_ShiftDirection_lsbFirst = 0,  /**< \brief LSB first */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   359      IfxAsclin_ShiftDirection_msbFirst = 1   /**< \brief MSB first */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   360  } IfxAsclin_ShiftDirection;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   361  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   362  /** \brief Defines the idle level of the SLSO signal, which is the level.\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   363   * Outside the data transmission, leading and trailing time intervals.\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   364   * Definition in Ifx_ASCLIN.IOCR.B.SPOL
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   365   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   366  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   367  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   368      IfxAsclin_SlavePolarity_idleLow  = 0, /**< \brief idle low */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   369      IfxAsclin_SlavePolarity_idlehigh = 1  /**< \brief idle high */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   370  } IfxAsclin_SlavePolarity;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   371  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   372  /** \brief Enable/disable the sensitivity of the module to sleep signal\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   373   * Definition in Ifx_ASCLIN.CLC.B.EDIS
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   374   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   375  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   376  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   377      IfxAsclin_SleepMode_enable  = 0, /**< \brief enables sleep mode */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   378      IfxAsclin_SleepMode_disable = 1  /**< \brief disables sleep mode */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   379  } IfxAsclin_SleepMode;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   380  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   381  /** \brief Error status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   382   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   383  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   384  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   385      IfxAsclin_Status_configurationError = 0,  /**< \brief Configuration error */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   386      IfxAsclin_Status_noError            = 1   /**< \brief No error */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   387  } IfxAsclin_Status;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   388  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   389  /** \brief ASC and LIN mode: number of stop bits (0 is not allowed), SPI mode: trailing delay.\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   390   * Definition in Ifx_ASCLIN.FRAMECON.B.STOP
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   391   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   392  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   393  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   394      IfxAsclin_StopBit_0,     /**< \brief number of stop bits 0  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   395      IfxAsclin_StopBit_1,     /**< \brief number of stop bits 1  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   396      IfxAsclin_StopBit_2,     /**< \brief number of stop bits 2  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   397      IfxAsclin_StopBit_3,     /**< \brief number of stop bits 3  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   398      IfxAsclin_StopBit_4,     /**< \brief number of stop bits 4  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   399      IfxAsclin_StopBit_5,     /**< \brief number of stop bits 5  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   400      IfxAsclin_StopBit_6,     /**< \brief number of stop bits 6  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   401      IfxAsclin_StopBit_7      /**< \brief number of stop bits 7  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   402  } IfxAsclin_StopBit;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   403  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   404  /** \brief OCDS Suspend Control (OCDS.SUS)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   405   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   406  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   407  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   408      IfxAsclin_SuspendMode_none = 0,  /**< \brief No suspend */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   409      IfxAsclin_SuspendMode_hard = 1,  /**< \brief Hard Suspend */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   410      IfxAsclin_SuspendMode_soft = 2   /**< \brief Soft Suspend */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   411  } IfxAsclin_SuspendMode;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   412  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   413  /** \brief Defines the number of bytes written to the Tx FIFO with one FPI bus write\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   414   * Definition in Ifx_ASCLIN.TXFIFOCON.B.INW
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   415   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   416  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   417  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   418      IfxAsclin_TxFifoInletWidth_0,     /**< \brief number of bytes 0  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   419      IfxAsclin_TxFifoInletWidth_1,     /**< \brief number of bytes 1  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   420      IfxAsclin_TxFifoInletWidth_2,     /**< \brief number of bytes 2  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   421      IfxAsclin_TxFifoInletWidth_3      /**< \brief number of bytes 3  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   422  } IfxAsclin_TxFifoInletWidth;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   423  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   424  /** \brief Defines the filling level that triggers a refill (TX) interrupt or DMA access\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   425   * Definition in Ifx_ASCLIN.TXFIFOCON.B.INTLEVEL
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   426   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   427  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   428  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   429      IfxAsclin_TxFifoInterruptLevel_0,     /**< \brief TX FIFO level 0  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   430      IfxAsclin_TxFifoInterruptLevel_1,     /**< \brief TX FIFO level 1  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   431      IfxAsclin_TxFifoInterruptLevel_2,     /**< \brief TX FIFO level 2  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   432      IfxAsclin_TxFifoInterruptLevel_3,     /**< \brief TX FIFO level 3  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   433      IfxAsclin_TxFifoInterruptLevel_4,     /**< \brief TX FIFO level 4  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   434      IfxAsclin_TxFifoInterruptLevel_5,     /**< \brief TX FIFO level 5  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   435      IfxAsclin_TxFifoInterruptLevel_6,     /**< \brief TX FIFO level 6  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   436      IfxAsclin_TxFifoInterruptLevel_7,     /**< \brief TX FIFO level 7  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   437      IfxAsclin_TxFifoInterruptLevel_8,     /**< \brief TX FIFO level 8  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   438      IfxAsclin_TxFifoInterruptLevel_9,     /**< \brief TX FIFO level 9  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   439      IfxAsclin_TxFifoInterruptLevel_10,    /**< \brief TX FIFO level 10  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   440      IfxAsclin_TxFifoInterruptLevel_11,    /**< \brief TX FIFO level 11  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   441      IfxAsclin_TxFifoInterruptLevel_12,    /**< \brief TX FIFO level 12  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   442      IfxAsclin_TxFifoInterruptLevel_13,    /**< \brief TX FIFO level 13  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   443      IfxAsclin_TxFifoInterruptLevel_14,    /**< \brief TX FIFO level 14  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   444      IfxAsclin_TxFifoInterruptLevel_15     /**< \brief TX FIFO level 15  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   445  } IfxAsclin_TxFifoInterruptLevel;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   446  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   447  /** \} */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   448  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   449  /** \addtogroup IfxLld_Asclin_Std_Operative
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   450   * \{ */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   451  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   452  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   453  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   454  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   455  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   456  /** \brief clears all the flags
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   457   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   458   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   459   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   460  IFX_INLINE void IfxAsclin_clearAllFlags(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   461  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   462  /** \brief Clears the break detected flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   463   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   464   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   465   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   466  IFX_INLINE void IfxAsclin_clearBreakDetectedFlag(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   467  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   468  /** \brief Clears the collision detection error flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   469   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   470   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   471   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   472  IFX_INLINE void IfxAsclin_clearCollisionDetectionErrorFlag(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   473  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   474  /** \brief Clears the falling edge detected flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   475   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   476   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   477   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   478  IFX_INLINE void IfxAsclin_clearFallingEdgeDetectedFlag(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   479  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   480  /** \brief Clears the frame error flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   481   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   482   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   483   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   484  IFX_INLINE void IfxAsclin_clearFrameErrorFlag(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   485  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   486  /** \brief Clears the header timeout flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   487   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   488   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   489   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   490  IFX_INLINE void IfxAsclin_clearHeaderTimeoutFlag(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   491  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   492  /** \brief Clears the kernel reset status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   493   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   494   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   495   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   496  IFX_INLINE void IfxAsclin_clearKernelResetStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   497  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   498  /** \brief Clears the auto baudrate detection error flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   499   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   500   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   501   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   502  IFX_INLINE void IfxAsclin_clearLinAutoBaudDetectionErrorFlag(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   503  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   504  /** \brief Clears the LIN checksum error flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   505   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   506   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   507   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   508  IFX_INLINE void IfxAsclin_clearLinChecksumErrorFlag(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   509  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   510  /** \brief Clears the LIN parity error flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   511   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   512   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   513   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   514  IFX_INLINE void IfxAsclin_clearLinParityErrorFlag(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   515  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   516  /** \brief Clears the parity error flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   517   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   518   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   519   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   520  IFX_INLINE void IfxAsclin_clearParityErrorFlag(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   521  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   522  /** \brief Clears the raising edge detected flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   523   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   524   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   525   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   526  IFX_INLINE void IfxAsclin_clearRaisingEdgeDetectedFlag(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   527  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   528  /** \brief Clears the response timeout flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   529   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   530   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   531   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   532  IFX_INLINE void IfxAsclin_clearResponseTimeoutFlag(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   533  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   534  /** \brief Clears the Rx FIFO level flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   535   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   536   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   537   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   538  IFX_INLINE void IfxAsclin_clearRxFifoFillLevelFlag(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   539  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   540  /** \brief Clears the Rx FIFO overflow flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   541   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   542   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   543   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   544  IFX_INLINE void IfxAsclin_clearRxFifoOverflowFlag(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   545  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   546  /** \brief Clears the Rx FIFO underflow flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   547   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   548   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   549   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   550  IFX_INLINE void IfxAsclin_clearRxFifoUnderflowFlag(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   551  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   552  /** \brief Clears the receive header end flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   553   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   554   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   555   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   556  IFX_INLINE void IfxAsclin_clearRxHeaderEndFlag(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   557  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   558  /** \brief Clears the receive response end flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   559   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   560   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   561   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   562  IFX_INLINE void IfxAsclin_clearRxResponseEndFlag(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   563  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   564  /** \brief Clears the transmission pending flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   565   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   566   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   567   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   568  IFX_INLINE void IfxAsclin_clearTransmissionCompletedFlag(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   569  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   570  /** \brief Clears the Tx FIFO level flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   571   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   572   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   573   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   574  IFX_INLINE void IfxAsclin_clearTxFifoFillLevelFlag(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   575  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   576  /** \brief Clears the Tx FIFO overflow flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   577   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   578   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   579   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   580  IFX_INLINE void IfxAsclin_clearTxFifoOverflowFlag(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   581  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   582  /** \brief Clears the transmit header end flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   583   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   584   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   585   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   586  IFX_INLINE void IfxAsclin_clearTxHeaderEndFlag(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   587  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   588  /** \brief Clears the transmit response end flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   589   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   590   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   591   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   592  IFX_INLINE void IfxAsclin_clearTxResponseEndFlag(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   593  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   594  /** \brief Flushes (empties) the Rx FIFO
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   595   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   596   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   597   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   598  IFX_INLINE void IfxAsclin_flushRxFifo(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   599  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   600  /** \brief Flushes (empties) the Tx FIFO
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   601   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   602   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   603   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   604  IFX_INLINE void IfxAsclin_flushTxFifo(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   605  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   606  /** \brief Sets the baudrate detection's lower limit
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   607   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   608   * \param limit value of the lower limit
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   609   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   610   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   611  IFX_INLINE void IfxAsclin_setBrdLowerlimt(Ifx_ASCLIN *asclin, uint8 limit);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   612  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   613  /** \brief Sets the baudrate detection's upper limit
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   614   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   615   * \param limit value of the upper limit
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   616   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   617   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   618  IFX_INLINE void IfxAsclin_setBrdUpperlimt(Ifx_ASCLIN *asclin, uint8 limit);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   619  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   620  /** \brief Sets the checksum injection
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   621   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   622   * \param csi checksum injection selection (not written / written)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   623   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   624   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   625  IFX_INLINE void IfxAsclin_setChecksumInjection(Ifx_ASCLIN *asclin, IfxAsclin_ChecksumInjection csi);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   626  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   627  /** \brief Sets the checksum mode
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   628   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   629   * \param mode checksum mode selection (classic / enhanced)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   630   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   631   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   632  IFX_INLINE void IfxAsclin_setChecksumMode(Ifx_ASCLIN *asclin, IfxAsclin_Checksum mode);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   633  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   634  /** \brief Sets the data length (number of bits per transfer)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   635   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   636   * \param length data length selection
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   637   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   638   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   639  IFX_INLINE void IfxAsclin_setDataLength(Ifx_ASCLIN *asclin, IfxAsclin_DataLength length);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   640  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   641  /** \brief Sets the denominator of the fractional divider
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   642   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   643   * \param denominator value of the denominator
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   644   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   645   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   646  IFX_INLINE void IfxAsclin_setDenominator(Ifx_ASCLIN *asclin, uint16 denominator);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   647  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   648  /** \brief Sets the disable module request
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   649   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   650   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   651   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   652  IFX_INLINE void IfxAsclin_setDisableModuleRequest(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   653  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   654  /** \brief Sets the enable module request
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   655   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   656   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   657   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   658  IFX_INLINE void IfxAsclin_setEnableModuleRequest(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   659  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   660  /** \brief Sets digital glitch filter depth
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   661   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   662   * \param depth digital glitch filter depth selection (1 to 63)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   663   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   664   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   665  IFX_INLINE void IfxAsclin_setFilterDepth(Ifx_ASCLIN *asclin, uint8 depth);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   666  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   667  /** \brief Sets the header response selection
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   668   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   669   * \param type type of selection (header and response or header only)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   670   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   671   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   672  IFX_INLINE void IfxAsclin_setHeaderResponseSelect(Ifx_ASCLIN *asclin, IfxAsclin_HeaderResponseSelect type);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   673  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   674  /** \brief Sets the idle delay
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   675   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   676   * \param delay idle delay selection
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   677   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   678   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   679  IFX_INLINE void IfxAsclin_setIdleDelay(Ifx_ASCLIN *asclin, IfxAsclin_IdleDelay delay);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   680  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   681  /** \brief Sets the kernal reset of the KRST1
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   682   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   683   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   684   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   685  IFX_INLINE void IfxAsclin_setKernelResetOne(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   686  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   687  /** \brief Sets the kernel reset of the KRST0
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   688   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   689   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   690   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   691  IFX_INLINE void IfxAsclin_setKernelResetZero(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   692  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   693  /** \brief Sets the lead delay
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   694   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   695   * \param delay lead delay selection
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   696   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   697   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   698  IFX_INLINE void IfxAsclin_setLeadDelay(Ifx_ASCLIN *asclin, IfxAsclin_LeadDelay delay);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   699  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   700  /** \brief Sets the LIN break length
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   701   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   702   * \param length value of the break length
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   703   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   704   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   705  IFX_INLINE void IfxAsclin_setLinBreakLength(Ifx_ASCLIN *asclin, uint8 length);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   706  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   707  /** \brief Sets the LIN header timeout
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   708   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   709   * \param timeout value of the header timeout
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   710   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   711   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   712  IFX_INLINE void IfxAsclin_setLinHeaderTimeout(Ifx_ASCLIN *asclin, uint8 timeout);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   713  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   714  /** \brief Sets the LIN mode of operation
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   715   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   716   * \param mode mode selection (slave / master)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   717   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   718   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   719  IFX_INLINE void IfxAsclin_setLinMode(Ifx_ASCLIN *asclin, IfxAsclin_LinMode mode);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   720  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   721  /** \brief Sets the LIN response timeout mode
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   722   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   723   * \param mode LIN response timeout mode selection
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   724   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   725   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   726  IFX_INLINE void IfxAsclin_setLinResponseTimeoutMode(Ifx_ASCLIN *asclin, IfxAsclin_LinResponseTimeoutMode mode);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   727  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   728  /** \brief Sets the LIN response timeout threshold
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   729   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   730   * \param threshold value of the tomeout threshold (1 to 256 bit times)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   731   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   732   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   733  IFX_INLINE void IfxAsclin_setLinResponseTimeoutThreshold(Ifx_ASCLIN *asclin, uint16 threshold);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   734  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   735  /** \brief Sets the numerator of the fractional divider
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   736   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   737   * \param numerator value of the numerator
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   738   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   739   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   740  IFX_INLINE void IfxAsclin_setNumerator(Ifx_ASCLIN *asclin, uint16 numerator);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   741  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   742  /** \brief Sets the division ratio of the baudrate post divider
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   743   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   744   * \param ovsFactor value of oversampling factor
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   745   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   746   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   747  IFX_INLINE void IfxAsclin_setOversampling(Ifx_ASCLIN *asclin, IfxAsclin_OversamplingFactor ovsFactor);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   748  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   749  /** \brief Sets the parity type
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   750   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   751   * \param type parity type selction (even / odd)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   752   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   753   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   754  IFX_INLINE void IfxAsclin_setParityType(Ifx_ASCLIN *asclin, IfxAsclin_ParityType type);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   755  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   756  /** \brief Sets the division ratio of the predivider (prescaler)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   757   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   758   * \param prescaler value of prescaler
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   759   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   760   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   761  IFX_INLINE void IfxAsclin_setPrescaler(Ifx_ASCLIN *asclin, uint16 prescaler);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   762  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   763  /** \brief Sets the receive buffer mode
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   764   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   765   * \param mode receive buffer mode selection (Rx FIFO or single stage Rx buffer)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   766   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   767   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   768  IFX_INLINE void IfxAsclin_setRxBufferMode(Ifx_ASCLIN *asclin, IfxAsclin_ReceiveBufferMode mode);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   769  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   770  /** \brief Sets the Tx FIFO interrupt level
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   771   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   772   * \param level interrupt level selection
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   773   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   774   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   775  IFX_INLINE void IfxAsclin_setRxFifoInterruptLevel(Ifx_ASCLIN *asclin, IfxAsclin_RxFifoInterruptLevel level);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   776  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   777  /** \brief Sets the receive FIFO outlet width
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   778   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   779   * \param width number of bytes read to the Rx FIFO with one FPI bus read
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   780   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   781   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   782  IFX_INLINE void IfxAsclin_setRxFifoOutletWidth(Ifx_ASCLIN *asclin, IfxAsclin_RxFifoOutletWidth width);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   783  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   784  /** \brief Sets the sample mode (number of samples per bit / median filter)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   785   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   786   * \param medianFilter value of the median filter
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   787   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   788   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   789  IFX_INLINE void IfxAsclin_setSampleMode(Ifx_ASCLIN *asclin, IfxAsclin_SamplesPerBit medianFilter);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   790  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   791  /** \brief Sets the sampling point position
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   792   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   793   * \param spPosition sample point position selection
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   794   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   795   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   796  IFX_INLINE void IfxAsclin_setSamplePointPosition(Ifx_ASCLIN *asclin, IfxAsclin_SamplePointPosition spPosition);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   797  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   798  /** \brief Sets the shift direction
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   799   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   800   * \param dir shift direction selection (LSB / MSB first)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   801   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   802   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   803  IFX_INLINE void IfxAsclin_setShiftDirection(Ifx_ASCLIN *asclin, IfxAsclin_ShiftDirection dir);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   804  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   805  /** \brief Sets the number of stop bits
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   806   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   807   * \param stopBit number of stop bits selection
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   808   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   809   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   810  IFX_INLINE void IfxAsclin_setStopBit(Ifx_ASCLIN *asclin, IfxAsclin_StopBit stopBit);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   811  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   812  /** \brief Sets the transmit header request flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   813   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   814   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   815   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   816  IFX_INLINE void IfxAsclin_setTransmitHeaderRequestFlag(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   817  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   818  /** \brief Sets the transmit response request flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   819   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   820   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   821   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   822  IFX_INLINE void IfxAsclin_setTransmitResponseRequestFlag(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   823  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   824  /** \brief Sets the transmission wake request flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   825   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   826   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   827   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   828  IFX_INLINE void IfxAsclin_setTransmitWakeRequestFlag(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   829  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   830  /** \brief Sets the transmit FIFO inlet width
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   831   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   832   * \param width number of bytes written to the Tx FIFO with one FPI bus write
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   833   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   834   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   835  IFX_INLINE void IfxAsclin_setTxFifoInletWidth(Ifx_ASCLIN *asclin, IfxAsclin_TxFifoInletWidth width);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   836  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   837  /** \brief Sets the Tx FIFO interrupt level
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   838   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   839   * \param level interrupt level selection
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   840   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   841   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   842  IFX_INLINE void IfxAsclin_setTxFifoInterruptLevel(Ifx_ASCLIN *asclin, IfxAsclin_TxFifoInterruptLevel level);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   843  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   844  /** \} */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   845  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   846  /** \addtogroup IfxLld_Asclin_Std_Utility
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   847   * \{ */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   848  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   849  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   850  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   851  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   852  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   853  /** \brief Returns the break detected flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   854   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   855   * \return break detected flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   856   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   857  IFX_INLINE boolean IfxAsclin_getBreakDetectedFlagStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   858  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   859  /** \brief Returns the clock source
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   860   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   861   * \return clock source
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   862   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   863  IFX_INLINE uint8 IfxAsclin_getClockSource(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   864  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   865  /** \brief Returns the clock status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   866   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   867   * \return clock status (off / on)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   868   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   869  IFX_INLINE boolean IfxAsclin_getClockStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   870  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   871  /** \brief Returns the collision detection error flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   872   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   873   * \return collision detection error flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   874   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   875  IFX_INLINE boolean IfxAsclin_getCollisionDetectionErrorFlagStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   876  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   877  /** \brief Returns  the falling edge detected flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   878   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   879   * \return falling edge detected flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   880   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   881  IFX_INLINE boolean IfxAsclin_getFallingEdgeDetectedFlagStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   882  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   883  /** \brief Returns the frame error flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   884   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   885   * \return frame error flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   886   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   887  IFX_INLINE boolean IfxAsclin_getFrameErrorFlagStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   888  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   889  /** \brief Returns the header timeout flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   890   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   891   * \return header timeout flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   892   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   893  IFX_INLINE boolean IfxAsclin_getHeaderTimeoutFlagStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   894  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   895  /** \brief Returns the kernel reset status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   896   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   897   * \return kernel reset status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   898   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   899  IFX_INLINE boolean IfxAsclin_getKernelResetStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   900  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   901  /** \brief Returns the LIN auto baudrate detection error flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   902   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   903   * \return LIN auto baudrate detection error flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   904   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   905  IFX_INLINE boolean IfxAsclin_getLinAutoBaudDetectionErrorFlagStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   906  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   907  /** \brief Returns the LIN checksum error flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   908   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   909   * \return LIN checksum error flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   910   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   911  IFX_INLINE boolean IfxAsclin_getLinChecksumErrorFlagStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   912  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   913  /** \brief Returns the LIN parity error flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   914   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   915   * \return LIN parity error flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   916   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   917  IFX_INLINE boolean IfxAsclin_getLinParityErrorFlagStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   918  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   919  /** \brief Returns the module status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   920   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   921   * \return module status (enabled / disabled)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   922   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   923  IFX_INLINE boolean IfxAsclin_getModuleStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   924  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   925  /** \brief Returns the parity error flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   926   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   927   * \return parity error flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   928   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   929  IFX_INLINE boolean IfxAsclin_getParityErrorFlagStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   930  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   931  /** \brief Returns the division ratio of the predivider (prescaler)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   932   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   933   * \return value of prescaler
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   934   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   935  IFX_INLINE uint16 IfxAsclin_getPrescaler(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   936  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   937  /** \brief Returns the raising edge detected flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   938   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   939   * \return raising edge detected flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   940   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   941  IFX_INLINE boolean IfxAsclin_getRaisingEdgeDetectedFlagStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   942  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   943  /** \brief Returns the received signal status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   944   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   945   * \return received signal status (0 is low & 1 is high)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   946   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   947  IFX_INLINE boolean IfxAsclin_getReceiveSignalStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   948  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   949  /** \brief Returns the response timeout flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   950   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   951   * \return response timeout flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   952   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   953  IFX_INLINE boolean IfxAsclin_getResponseTimeoutFlagStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   954  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   955  /** \brief Returns the current filling level of Tx FIFO
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   956   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   957   * \return current filling level of Rx FIFO
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   958   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   959  IFX_INLINE uint8 IfxAsclin_getRxFifoFillLevel(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   960  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   961  /** \brief Returns the Rx FIFO level flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   962   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   963   * \return Rx FIFO level flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   964   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   965  IFX_INLINE boolean IfxAsclin_getRxFifoFillLevelFlagStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   966  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   967  /** \brief Returns the receive FIFO inlet width
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   968   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   969   * \return number of bytes read to the Rx FIFO with one FPI bus read
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   970   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   971  IFX_INLINE uint8 IfxAsclin_getRxFifoOutletWidth(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   972  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   973  /** \brief Returns the Rx FIFO overflow flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   974   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   975   * \return Rx FIFO overflow flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   976   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   977  IFX_INLINE boolean IfxAsclin_getRxFifoOverflowFlagStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   978  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   979  /** \brief Returns the Rx FIFO underflow flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   980   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   981   * \return Rx FIFO underflow flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   982   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   983  IFX_INLINE boolean IfxAsclin_getRxFifoUnderflowFlagStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   984  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   985  /** \brief Returns the receive header end flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   986   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   987   * \return receive header end flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   988   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   989  IFX_INLINE boolean IfxAsclin_getRxHeaderEndFlagStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   990  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   991  /** \brief Returns the receive response end flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   992   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   993   * \return receive response end flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   994   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   995  IFX_INLINE boolean IfxAsclin_getRxResponseEndFlagStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   996  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   997  /** \brief Returns the transmission pending flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   998   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   999   * \return transmission pending flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1000   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1001  IFX_INLINE boolean IfxAsclin_getTransmissionCompletedFlagStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1002  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1003  /** \brief Returns the transmit signal status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1004   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1005   * \return transmit signal status (0 is low & 1 is high)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1006   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1007  IFX_INLINE boolean IfxAsclin_getTransmitSignalStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1008  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1009  /** \brief Returns the current filling level of Tx FIFO
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1010   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1011   * \return current filling level of Tx FIFO
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1012   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1013  IFX_INLINE uint8 IfxAsclin_getTxFifoFillLevel(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1014  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1015  /** \brief Returns the Tx FIFO level flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1016   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1017   * \return Tx FIFO level flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1018   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1019  IFX_INLINE boolean IfxAsclin_getTxFifoFillLevelFlagStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1020  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1021  /** \brief Returns the transmit FIFO inlet width
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1022   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1023   * \return number of bytes written to the Tx FIFO with one FPI bus write
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1024   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1025  IFX_INLINE uint8 IfxAsclin_getTxFifoInletWidth(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1026  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1027  /** \brief Returns the Tx FIFO overflow flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1028   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1029   * \return Tx FIFO overflow flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1030   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1031  IFX_INLINE boolean IfxAsclin_getTxFifoOverflowFlagStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1032  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1033  /** \brief Returns the transmit header end flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1034   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1035   * \return transmit header end flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1036   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1037  IFX_INLINE boolean IfxAsclin_getTxHeaderEndFlagStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1038  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1039  /** \brief Returns the transmit response end flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1040   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1041   * \return transmit response end flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1042   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1043  IFX_INLINE boolean IfxAsclin_getTxResponseEndFlagStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1044  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1045  /** \brief Sets the sensitivity of the module to sleep signal
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1046   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1047   * \param mode mode selection (enable / disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1048   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1049   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1050  IFX_INLINE void IfxAsclin_setSleepMode(Ifx_ASCLIN *asclin, IfxAsclin_SleepMode mode);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1051  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1052  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1053  /*-------------------------Global Function Prototypes-------------------------*/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1054  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1055  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1056  /** \brief API to get the address for ASCLIN HW module register memory map
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1057   * \param asclin Resource index of the ASCLIN
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1058   * \return ASCLIN module register address
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1059   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1060  IFX_EXTERN Ifx_ASCLIN *IfxAsclin_getAddress(IfxAsclin_Index asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1061  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1062  /** \brief Returns the ASCLIN module FA frequency in Hz
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1063   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1064   * \return Returns the ASCLIN module FA frequency in Hz
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1065   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1066  IFX_EXTERN float32 IfxAsclin_getFaFrequency(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1067  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1068  /** \brief API to get the resource index of the ASCLIN specified.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1069   * \return asclin resource index
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1070   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1071  IFX_EXTERN IfxAsclin_Index IfxAsclin_getIndex(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1072  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1073  /** \brief Returns the OVS frequency
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1074   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1075   * \return Returns the ASCLIN module OVS frequency in Hz
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1076   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1077  IFX_EXTERN float32 IfxAsclin_getOvsFrequency(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1078  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1079  /** \brief Returns the PD frequency
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1080   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1081   * \return Returns the ASCLIN module PD frequency in Hz
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1082   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1083  IFX_EXTERN float32 IfxAsclin_getPdFrequency(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1084  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1085  /** \brief Returns the SHIFT frequency
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1086   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1087   * \return Returns the ASCLIN module SHIFT frequency in Hz
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1088   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1089  IFX_EXTERN float32 IfxAsclin_getShiftFrequency(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1090  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1091  /** \brief resets Asclin kernel
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1092   * \param asclin pointer to ASCLIN resgisters
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1093   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1094   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1095  IFX_EXTERN void IfxAsclin_resetModule(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1096  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1097  /** \} */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1098  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1099  /** \addtogroup IfxLld_Asclin_Std_Configuration
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1100   * \{ */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1101  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1102  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1103  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1104  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1105  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1106  /** \brief disables all flags
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1107   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1108   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1109   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1110  IFX_INLINE void IfxAsclin_disableAllFlags(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1111  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1112  /** \brief Enables/disables the auto baudrate detection
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1113   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1114   * \param enable choice (enable / disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1115   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1116   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1117  IFX_INLINE void IfxAsclin_enableAutoBaudrateDetection(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1118  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1119  /** \brief Enables/disables break detected flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1120   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1121   * \param enable choice (enable / disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1122   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1123   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1124  IFX_INLINE void IfxAsclin_enableBreakDetectedFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1125  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1126  /** \brief Enables/disables the collision detection
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1127   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1128   * \param enable choice (enable/disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1129   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1130   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1131  IFX_INLINE void IfxAsclin_enableCollisionDetection(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1132  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1133  /** \brief Enables/disables LIN collision detection error flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1134   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1135   * \param enable choice (enable / disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1136   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1137   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1138  IFX_INLINE void IfxAsclin_enableCollisionDetectionErrorFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1139  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1140  /** \brief Enables/disables CTS
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1141   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1142   * \param enable choice (enable/disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1143   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1144   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1145  IFX_INLINE void IfxAsclin_enableCts(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1146  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1147  /** \brief Enables/disables falling edge detected flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1148   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1149   * \param enable choice (enable / disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1150   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1151   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1152  IFX_INLINE void IfxAsclin_enableFallingEdgeDetectedFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1153  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1154  /** \brief Enables/disables frame error flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1155   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1156   * \param enable choice (enable / disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1157   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1158   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1159  IFX_INLINE void IfxAsclin_enableFrameErrorFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1160  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1161  /** \brief Enables/disables the hardware checksum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1162   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1163   * \param enable choice (enable / disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1164   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1165   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1166  IFX_INLINE void IfxAsclin_enableHardwareChecksum(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1167  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1168  /** \brief Enables/disables header timeout flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1169   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1170   * \param enable choice (enable / disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1171   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1172   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1173  IFX_INLINE void IfxAsclin_enableHeaderTimeoutFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1174  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1175  /** \brief Enables/disables LIN auto baudrate detection error flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1176   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1177   * \param enable choice (enable / disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1178   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1179   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1180  IFX_INLINE void IfxAsclin_enableLinAutoBaudDetectionErrorFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1181  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1182  /** \brief Enables/disables LIN checksum error flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1183   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1184   * \param enable choice (enable / disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1185   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1186   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1187  IFX_INLINE void IfxAsclin_enableLinChecksumErrorFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1188  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1189  /** \brief Enables/disables LIN parity error flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1190   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1191   * \param enable choice (enable / disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1192   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1193   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1194  IFX_INLINE void IfxAsclin_enableLinParityErrorFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1195  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1196  /** \brief Enables/disables the loop back mode
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1197   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1198   * \param enable choice (enable/disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1199   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1200   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1201  IFX_INLINE void IfxAsclin_enableLoopBackMode(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1202  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1203  /** \brief Enables/disables the parity bit attachment to tha data bits
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1204   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1205   * \param enable choice (enable/disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1206   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1207   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1208  IFX_INLINE void IfxAsclin_enableParity(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1209  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1210  /** \brief Enables/disables parity error flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1211   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1212   * \param enable choice (enable / disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1213   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1214   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1215  IFX_INLINE void IfxAsclin_enableParityErrorFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1216  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1217  /** \brief Enables/disables raising edge detected flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1218   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1219   * \param enable choice (enable / disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1220   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1221   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1222  IFX_INLINE void IfxAsclin_enableRaisingEdgeDetectedFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1223  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1224  /** \brief Enables/disables response timeout flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1225   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1226   * \param enable choice (enable / disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1227   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1228   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1229  IFX_INLINE void IfxAsclin_enableResponseTimeoutFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1230  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1231  /** \brief Enables/disables Rx FIFO level flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1232   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1233   * \param enable choice (enable / disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1234   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1235   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1236  IFX_INLINE void IfxAsclin_enableRxFifoFillLevelFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1237  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1238  /** \brief Enables/disables the receive FIFO outlet to allow filling of Rx FIFO through shift register
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1239   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1240   * \param enable choice (enable/disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1241   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1242   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1243  IFX_INLINE void IfxAsclin_enableRxFifoInlet(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1244  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1245  /** \brief Enables/disables Rx FIFO overflow flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1246   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1247   * \param enable choice (enable / disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1248   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1249   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1250  IFX_INLINE void IfxAsclin_enableRxFifoOverflowFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1251  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1252  /** \brief Enables/disables Rx FIFO underflow flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1253   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1254   * \param enable choice (enable / disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1255   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1256   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1257  IFX_INLINE void IfxAsclin_enableRxFifoUnderflowFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1258  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1259  /** \brief Enables/disables receive header end flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1260   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1261   * \param enable choice (enable / disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1262   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1263   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1264  IFX_INLINE void IfxAsclin_enableRxHeaderEndFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1265  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1266  /** \brief Enables/disables receive response end flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1267   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1268   * \param enable choice (enable / disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1269   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1270   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1271  IFX_INLINE void IfxAsclin_enableRxResponseEndFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1272  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1273  /** \brief Enables/disables transmission completed flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1274   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1275   * \param enable choice (enable / disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1276   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1277   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1278  IFX_INLINE void IfxAsclin_enableTransmissionCompletedFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1279  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1280  /** \brief Enables/disables Tx FIFO level flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1281   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1282   * \param enable choice (enable / disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1283   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1284   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1285  IFX_INLINE void IfxAsclin_enableTxFifoFillLevelFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1286  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1287  /** \brief Enables/disables the transmit FIFO outlet to allow transmission
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1288   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1289   * \param enable choice (enable/disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1290   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1291   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1292  IFX_INLINE void IfxAsclin_enableTxFifoOutlet(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1293  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1294  /** \brief Enables/disables Tx FIFO overflow flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1295   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1296   * \param enable choice (enable / disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1297   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1298   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1299  IFX_INLINE void IfxAsclin_enableTxFifoOverflowFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1300  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1301  /** \brief Enables/disables transmit header end flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1302   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1303   * \param enable choice (enable / disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1304   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1305   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1306  IFX_INLINE void IfxAsclin_enableTxHeaderEndFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1307  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1308  /** \brief Enables/disables transmit response end flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1309   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1310   * \param enable choice (enable / disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1311   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1312   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1313  IFX_INLINE void IfxAsclin_enableTxResponseEndFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1314  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1315  /** \brief Returns the module's suspend state.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1316   * TRUE :if module is suspended.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1317   * FALSE:if module is not yet suspended.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1318   * \param asclin Pointer to ASCLIN module registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1319   * \return Suspend status (TRUE / FALSE)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1320   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1321  IFX_INLINE boolean IfxAsclin_isModuleSuspended(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1322  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1323  /** \brief Selects the clock polarity
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1324   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1325   * \param cpol CPOL selection
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1326   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1327   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1328  IFX_INLINE void IfxAsclin_setClockPolarity(Ifx_ASCLIN *asclin, IfxAsclin_ClockPolarity cpol);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1329  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1330  /** \brief Selects the CTS input pin
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1331   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1332   * \param ctsi CTS input pin selection
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1333   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1334   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1335  IFX_INLINE void IfxAsclin_setCtsInput(Ifx_ASCLIN *asclin, IfxAsclin_CtsInputSelect ctsi);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1336  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1337  /** \brief Selects the module's mode of operation
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1338   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1339   * \param mode mode selction
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1340   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1341   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1342  IFX_INLINE void IfxAsclin_setFrameMode(Ifx_ASCLIN *asclin, IfxAsclin_FrameMode mode);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1343  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1344  /** \brief Selects the RTS/CTS polarity
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1345   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1346   * \param rcpol RCPOL selection
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1347   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1348   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1349  IFX_INLINE void IfxAsclin_setRtsCtsPolarity(Ifx_ASCLIN *asclin, IfxAsclin_RtsCtsPolarity rcpol);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1350  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1351  /** \brief Selects the alternate input for Rx signal
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1352   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1353   * \param alti alternate input selection of Rx signal
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1354   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1355   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1356  IFX_INLINE void IfxAsclin_setRxInput(Ifx_ASCLIN *asclin, IfxAsclin_RxInputSelect alti);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1357  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1358  /** \brief Selects the slave polarity
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1359   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1360   * \param spol SPOL selection
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1361   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1362   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1363  IFX_INLINE void IfxAsclin_setSlavePolarity(Ifx_ASCLIN *asclin, IfxAsclin_SlavePolarity spol);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1364  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1365  /** \brief Configure the Module to Hard/Soft suspend mode.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1366   * Note: The api works only when the OCDS is enabled and in Supervisor Mode. When OCDS is disabled the OCS suspend control is ineffective.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1367   * \param asclin Pointer to ASCLIN module registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1368   * \param mode Module suspend mode
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1369   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1370   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1371  IFX_INLINE void IfxAsclin_setSuspendMode(Ifx_ASCLIN *asclin, IfxAsclin_SuspendMode mode);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1372  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1373  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1374  /*-------------------------Global Function Prototypes-------------------------*/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1375  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1376  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1377  /** \brief Set the bit timing
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1378   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1379   * \note this function required FA source and the PD frequency to be set to their final values
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1380   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1381   * \param baudrate Required baudrate
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1382   * \param oversampling The oversampling factor
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1383   * \param samplepoint The sample point position
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1384   * \param medianFilter Number of samples per bit (median filter)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1385   * \return TRUE if configuration was successfull
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1386   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1387  IFX_EXTERN boolean IfxAsclin_setBitTiming(Ifx_ASCLIN *asclin, float32 baudrate, IfxAsclin_OversamplingFactor oversampling, IfxAsclin_SamplePointPosition samplepoint, IfxAsclin_SamplesPerBit medianFilter);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1388  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1389  /** \} */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1390  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1391  /** \addtogroup IfxLld_Asclin_Std_External
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1392   * \{ */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1393  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1394  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1395  /*-------------------------Global Function Prototypes-------------------------*/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1396  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1397  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1398  /** \brief Disables the module
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1399   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1400   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1401   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1402  IFX_EXTERN void IfxAsclin_disableModule(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1403  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1404  /** \brief Enables the ASC error interrupt Flags
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1405   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1406   * \param parEnable parity error
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1407   * \param rfoEnable Rx FIFO overflow error
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1408   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1409   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1410  IFX_EXTERN void IfxAsclin_enableAscErrorFlags(Ifx_ASCLIN *asclin, boolean parEnable, boolean rfoEnable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1411  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1412  /** \brief Enables the module
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1413   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1414   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1415   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1416  IFX_EXTERN void IfxAsclin_enableModule(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1417  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1418  /** \brief Returns the SRC pointer for ERR
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1419   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1420   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1421  IFX_EXTERN volatile Ifx_SRC_SRCR *IfxAsclin_getSrcPointerEr(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1422  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1423  /** \brief Returns the  SRC pointer for Rx
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1424   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1425   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1426  IFX_EXTERN volatile Ifx_SRC_SRCR *IfxAsclin_getSrcPointerRx(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1427  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1428  /** \brief Returns the SRC pointer for Tx
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1429   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1430   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1431  IFX_EXTERN volatile Ifx_SRC_SRCR *IfxAsclin_getSrcPointerTx(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1432  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1433  /** \brief Reads data up to 16 bits
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1434   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1435   * \param data Array where the read data shall be stored
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1436   * \param count number of items to read
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1437   * \return number of items that could not be read
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1438   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1439  IFX_EXTERN uint32 IfxAsclin_read16(Ifx_ASCLIN *asclin, uint16 *data, uint32 count);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1440  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1441  /** \brief Reads data up to 32 bits
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1442   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1443   * \param data Array where the read data shall be stored
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1444   * \param count number of items to read
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1445   * \return number of items that could not be read
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1446   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1447  IFX_EXTERN uint32 IfxAsclin_read32(Ifx_ASCLIN *asclin, uint32 *data, uint32 count);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1448  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1449  /** \brief Reads data up to 8 bits
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1450   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1451   * \param data Array where the read data shall be stored
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1452   * \param count number of items to read
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1453   * \return number of items that could not be read
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1454   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1455  IFX_EXTERN uint32 IfxAsclin_read8(Ifx_ASCLIN *asclin, uint8 *data, uint32 count);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1456  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1457  /** \brief Sets the baudrate bit fields
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1458   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1459   * \param prescaler division ratio of the predivider
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1460   * \param numerator numerator of the fractional divider
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1461   * \param denominator denominator of the fractional divider
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1462   * \param oversampling division ratio of the baudrate postdivider
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1463   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1464   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1465  IFX_EXTERN void IfxAsclin_setBaudrateBitFields(Ifx_ASCLIN *asclin, uint16 prescaler, uint16 numerator, uint16 denominator, IfxAsclin_OversamplingFactor oversampling);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1466  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1467  /** \brief Sets the  clock source
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1468   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1469   * \param clockSource clock source selection
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1470   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1471   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1472  IFX_EXTERN void IfxAsclin_setClockSource(Ifx_ASCLIN *asclin, IfxAsclin_ClockSource clockSource);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1473  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1474  /** \brief Writes data up to 16 bits
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1475   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1476   * \param data Array of data to be send
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1477   * \param count number of items to be send
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1478   * \return the number of items that could not be send
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1479   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1480  IFX_EXTERN uint32 IfxAsclin_write16(Ifx_ASCLIN *asclin, uint16 *data, uint32 count);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1481  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1482  /** \brief Writes data up to 32 bits
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1483   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1484   * \param data Array of data to be send
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1485   * \param count number of items to be send
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1486   * \return the number of items that could not be send
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1487   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1488  IFX_EXTERN uint32 IfxAsclin_write32(Ifx_ASCLIN *asclin, uint32 *data, uint32 count);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1489  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1490  /** \brief Writes data up to 8 bits
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1491   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1492   * \param data Array of data to be send
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1493   * \param count number of items to be send
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1494   * \return the number of items that could not be send
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1495   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1496  IFX_EXTERN uint32 IfxAsclin_write8(Ifx_ASCLIN *asclin, uint8 *data, uint32 count);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1497  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1498  /** \} */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1499  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1500  /** \addtogroup IfxLld_Asclin_Std_IO
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1501   * \{ */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1502  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1503  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1504  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1505  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1506  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1507  /** \brief Initializes a CTS input
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1508   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1509   * Attention: the kernel clock has to be disabled whenever the input multiplexer is changed.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1510   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1511   * This can be done with IfxAsclin_setClockSource(asclinSFR, IfxAsclin_ClockSource_noClock);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1512   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1513   * After the function call, the current clock can be enabled again.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1514   * \param cts the CTS Pin which should be configured
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1515   * \param inputMode the pin input mode which should be configured
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1516   * \param padDriver the pad driver mode which should be configured
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1517   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1518   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1519  IFX_INLINE void IfxAsclin_initCtsPin(const IfxAsclin_Cts_In *cts, IfxPort_InputMode inputMode, IfxPort_PadDriver padDriver);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1520  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1521  /** \brief Initializes a RTS output
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1522   * \param rts the RTS Pin which should be configured
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1523   * \param outputMode the pin output mode which should be configured
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1524   * \param padDriver the pad driver mode which should be configured
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1525   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1526   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1527  IFX_INLINE void IfxAsclin_initRtsPin(const IfxAsclin_Rts_Out *rts, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1528  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1529  /** \brief Initializes a RX input
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1530   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1531   * Attention: the kernel clock has to be disabled whenever the input multiplexer is changed.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1532   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1533   * This can be done with IfxAsclin_setClockSource(asclinSFR, IfxAsclin_ClockSource_noClock);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1534   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1535   * After the function call, the current clock can be enabled again.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1536   * \param rx the RX Pin which should be configured
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1537   * \param inputMode the pin input mode which should be configured
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1538   * \param padDriver the pad driver mode which should be configured
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1539   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1540   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1541  IFX_INLINE void IfxAsclin_initRxPin(const IfxAsclin_Rx_In *rx, IfxPort_InputMode inputMode, IfxPort_PadDriver padDriver);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1542  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1543  /** \brief Initializes a SCLK output
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1544   * \param sclk the SCLK Pin which should be configured
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1545   * \param outputMode the pin output mode which should be configured
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1546   * \param padDriver the pad driver mode which should be configured
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1547   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1548   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1549  IFX_INLINE void IfxAsclin_initSclkPin(const IfxAsclin_Sclk_Out *sclk, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1550  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1551  /** \brief Initializes a SLSO output
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1552   * \param slso the SLSO Pin which should be configured
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1553   * \param outputMode the pin output mode which should be configured
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1554   * \param padDriver the pad driver mode which should be configured
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1555   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1556   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1557  IFX_INLINE void IfxAsclin_initSlsoPin(const IfxAsclin_Slso_Out *slso, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1558  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1559  /** \brief Initializes a TX output
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1560   * \param tx the TX Pin which should be configured
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1561   * \param outputMode the pin output mode which should be configured
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1562   * \param padDriver the pad driver mode which should be configured
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1563   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1564   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1565  IFX_INLINE void IfxAsclin_initTxPin(const IfxAsclin_Tx_Out *tx, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1566  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1567  /** \} */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1568  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1569  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1570  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1571  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1572  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1573  /**
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1574   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1575   * \return returns the value of RxDATA register
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1576   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1577  IFX_INLINE uint32 IfxAsclin_readRxData(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1578  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1579  /**
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1580   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1581   * \param data data to be written
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1582   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1583   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1584  IFX_INLINE void IfxAsclin_writeTxData(Ifx_ASCLIN *asclin, uint32 data);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1585  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1586  /** \brief Returns the status of all error flags
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1587   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1588   * \return status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1589   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1590  IFX_INLINE uint16 IfxAsclin_getAllErrorFlagsStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1591  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1592  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1593  /*---------------------Inline Function Implementations------------------------*/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1594  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1595  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1596  IFX_INLINE void IfxAsclin_clearAllFlags(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1597  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1598      asclin->FLAGSCLEAR.U = 0xFFFFFFFF;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1599  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1600  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1601  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1602  IFX_INLINE void IfxAsclin_clearBreakDetectedFlag(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1603  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1604      asclin->FLAGSCLEAR.B.BDC = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1605  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1606  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1607  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1608  IFX_INLINE void IfxAsclin_clearCollisionDetectionErrorFlag(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1609  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1610      asclin->FLAGSCLEAR.B.CEC = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1611  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1612  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1613  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1614  IFX_INLINE void IfxAsclin_clearFallingEdgeDetectedFlag(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1615  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1616      asclin->FLAGSCLEAR.B.FEDC = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1617  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1618  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1619  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1620  IFX_INLINE void IfxAsclin_clearFrameErrorFlag(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1621  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1622      asclin->FLAGSCLEAR.B.FEC = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1623  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1624  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1625  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1626  IFX_INLINE void IfxAsclin_clearHeaderTimeoutFlag(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1627  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1628      asclin->FLAGSCLEAR.B.HTC = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1629  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1630  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1631  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1632  IFX_INLINE void IfxAsclin_clearKernelResetStatus(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1633  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1634      asclin->KRSTCLR.B.CLR = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1635  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1636  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1637  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1638  IFX_INLINE void IfxAsclin_clearLinAutoBaudDetectionErrorFlag(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1639  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1640      asclin->FLAGSCLEAR.B.LAC = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1641  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1642  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1643  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1644  IFX_INLINE void IfxAsclin_clearLinChecksumErrorFlag(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1645  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1646      asclin->FLAGSCLEAR.B.LCC = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1647  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1648  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1649  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1650  IFX_INLINE void IfxAsclin_clearLinParityErrorFlag(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1651  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1652      asclin->FLAGSCLEAR.B.LPC = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1653  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1654  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1655  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1656  IFX_INLINE void IfxAsclin_clearParityErrorFlag(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1657  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1658      asclin->FLAGSCLEAR.B.PEC = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1659  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1660  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1661  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1662  IFX_INLINE void IfxAsclin_clearRaisingEdgeDetectedFlag(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1663  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1664      asclin->FLAGSCLEAR.B.REDC = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1665  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1666  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1667  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1668  IFX_INLINE void IfxAsclin_clearResponseTimeoutFlag(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1669  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1670      asclin->FLAGSCLEAR.B.RTC = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1671  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1672  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1673  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1674  IFX_INLINE void IfxAsclin_clearRxFifoFillLevelFlag(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1675  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1676      asclin->FLAGSCLEAR.B.RFLC = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1677  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1678  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1679  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1680  IFX_INLINE void IfxAsclin_clearRxFifoOverflowFlag(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1681  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1682      asclin->FLAGSCLEAR.B.RFOC = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1683  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1684  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1685  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1686  IFX_INLINE void IfxAsclin_clearRxFifoUnderflowFlag(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1687  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1688      asclin->FLAGSCLEAR.B.RFUC = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1689  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1690  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1691  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1692  IFX_INLINE void IfxAsclin_clearRxHeaderEndFlag(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1693  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1694      asclin->FLAGSCLEAR.B.RHC = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1695  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1696  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1697  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1698  IFX_INLINE void IfxAsclin_clearRxResponseEndFlag(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1699  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1700      asclin->FLAGSCLEAR.B.RRC = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1701  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1702  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1703  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1704  IFX_INLINE void IfxAsclin_clearTransmissionCompletedFlag(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1705  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1706      asclin->FLAGSCLEAR.B.TCC = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1707  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1708  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1709  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1710  IFX_INLINE void IfxAsclin_clearTxFifoFillLevelFlag(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1711  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1712      asclin->FLAGSCLEAR.B.TFLC = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1713  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1714  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1715  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1716  IFX_INLINE void IfxAsclin_clearTxFifoOverflowFlag(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1717  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1718      asclin->FLAGSCLEAR.B.TFOC = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1719  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1720  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1721  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1722  IFX_INLINE void IfxAsclin_clearTxHeaderEndFlag(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1723  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1724      asclin->FLAGSCLEAR.B.THC = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1725  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1726  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1727  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1728  IFX_INLINE void IfxAsclin_clearTxResponseEndFlag(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1729  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1730      asclin->FLAGSCLEAR.B.TRC = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1731  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1732  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1733  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1734  IFX_INLINE void IfxAsclin_disableAllFlags(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1735  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1736      asclin->FLAGSENABLE.U = 0x00000000;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1737  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1738  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1739  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1740  IFX_INLINE void IfxAsclin_enableAutoBaudrateDetection(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1741  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1742      asclin->LIN.CON.B.ABD = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1743  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1744  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1745  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1746  IFX_INLINE void IfxAsclin_enableBreakDetectedFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1747  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1748      asclin->FLAGSENABLE.B.BDE = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1749  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1750  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1751  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1752  IFX_INLINE void IfxAsclin_enableCollisionDetection(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1753  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1754      asclin->FRAMECON.B.CEN = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1755  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1756  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1757  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1758  IFX_INLINE void IfxAsclin_enableCollisionDetectionErrorFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1759  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1760      asclin->FLAGSENABLE.B.CEE = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1761  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1762  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1763  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1764  IFX_INLINE void IfxAsclin_enableCts(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1765  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1766      asclin->IOCR.B.CTSEN = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1767  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1768  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1769  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1770  IFX_INLINE void IfxAsclin_enableFallingEdgeDetectedFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1771  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1772      asclin->FLAGSENABLE.B.FEDE = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1773  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1774  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1775  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1776  IFX_INLINE void IfxAsclin_enableFrameErrorFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1777  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1778      asclin->FLAGSENABLE.B.FEE = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1779  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1780  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1781  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1782  IFX_INLINE void IfxAsclin_enableHardwareChecksum(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1783  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1784      asclin->LIN.CON.B.CSEN = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1785  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1786  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1787  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1788  IFX_INLINE void IfxAsclin_enableHeaderTimeoutFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1789  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1790      asclin->FLAGSENABLE.B.HTE = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1791  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1792  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1793  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1794  IFX_INLINE void IfxAsclin_enableLinAutoBaudDetectionErrorFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1795  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1796      asclin->FLAGSENABLE.B.ABE = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1797  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1798  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1799  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1800  IFX_INLINE void IfxAsclin_enableLinChecksumErrorFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1801  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1802      asclin->FLAGSENABLE.B.LCE = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1803  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1804  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1805  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1806  IFX_INLINE void IfxAsclin_enableLinParityErrorFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1807  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1808      asclin->FLAGSENABLE.B.LPE = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1809  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1810  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1811  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1812  IFX_INLINE void IfxAsclin_enableLoopBackMode(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1813  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1814      asclin->IOCR.B.LB = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1815  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1816  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1817  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1818  IFX_INLINE void IfxAsclin_enableParity(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1819  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1820      asclin->FRAMECON.B.PEN = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1821  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1822  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1823  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1824  IFX_INLINE void IfxAsclin_enableParityErrorFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1825  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1826      asclin->FLAGSENABLE.B.PEE = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1827  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1828  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1829  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1830  IFX_INLINE void IfxAsclin_enableRaisingEdgeDetectedFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1831  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1832      asclin->FLAGSENABLE.B.REDE = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1833  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1834  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1835  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1836  IFX_INLINE void IfxAsclin_enableResponseTimeoutFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1837  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1838      asclin->FLAGSENABLE.B.RTE = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1839  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1840  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1841  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1842  IFX_INLINE void IfxAsclin_enableRxFifoFillLevelFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1843  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1844      asclin->FLAGSENABLE.B.RFLE = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1845  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1846  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1847  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1848  IFX_INLINE void IfxAsclin_enableRxFifoInlet(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1849  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1850      asclin->RXFIFOCON.B.ENI = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1851  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1852  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1853  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1854  IFX_INLINE void IfxAsclin_enableRxFifoOverflowFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1855  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1856      asclin->FLAGSENABLE.B.RFOE = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1857  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1858  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1859  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1860  IFX_INLINE void IfxAsclin_enableRxFifoUnderflowFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1861  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1862      asclin->FLAGSENABLE.B.RFUE = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1863  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1864  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1865  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1866  IFX_INLINE void IfxAsclin_enableRxHeaderEndFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1867  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1868      asclin->FLAGSENABLE.B.RHE = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1869  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1870  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1871  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1872  IFX_INLINE void IfxAsclin_enableRxResponseEndFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1873  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1874      asclin->FLAGSENABLE.B.RRE = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1875  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1876  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1877  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1878  IFX_INLINE void IfxAsclin_enableTransmissionCompletedFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1879  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1880      asclin->FLAGSENABLE.B.TCE = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1881  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1882  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1883  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1884  IFX_INLINE void IfxAsclin_enableTxFifoFillLevelFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1885  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1886      asclin->FLAGSENABLE.B.TFLE = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1887  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1888  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1889  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1890  IFX_INLINE void IfxAsclin_enableTxFifoOutlet(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1891  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1892      asclin->TXFIFOCON.B.ENO = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1893  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1894  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1895  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1896  IFX_INLINE void IfxAsclin_enableTxFifoOverflowFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1897  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1898      asclin->FLAGSENABLE.B.TFOE = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1899  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1900  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1901  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1902  IFX_INLINE void IfxAsclin_enableTxHeaderEndFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1903  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1904      asclin->FLAGSENABLE.B.THE = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1905  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1906  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1907  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1908  IFX_INLINE void IfxAsclin_enableTxResponseEndFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1909  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1910      asclin->FLAGSENABLE.B.TRE = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1911  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1912  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1913  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1914  IFX_INLINE void IfxAsclin_flushRxFifo(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1915  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1916      asclin->RXFIFOCON.B.FLUSH = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1917  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1918  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1919  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1920  IFX_INLINE void IfxAsclin_flushTxFifo(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1921  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1922      asclin->TXFIFOCON.B.FLUSH = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1923  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1924  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1925  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1926  IFX_INLINE boolean IfxAsclin_getBreakDetectedFlagStatus(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1927  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1928      return asclin->FLAGS.B.BD;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1929  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1930  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1931  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1932  IFX_INLINE uint8 IfxAsclin_getClockSource(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1933  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1934      return asclin->CSR.B.CLKSEL;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1935  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1936  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1937  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1938  IFX_INLINE boolean IfxAsclin_getClockStatus(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1939  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1940      return asclin->CSR.B.CON;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1941  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1942  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1943  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1944  IFX_INLINE boolean IfxAsclin_getCollisionDetectionErrorFlagStatus(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1945  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1946      return asclin->FLAGS.B.CE;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1947  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1948  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1949  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1950  IFX_INLINE boolean IfxAsclin_getFallingEdgeDetectedFlagStatus(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1951  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1952      return asclin->FLAGS.B.FED;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1953  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1954  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1955  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1956  IFX_INLINE boolean IfxAsclin_getFrameErrorFlagStatus(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1957  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1958      return asclin->FLAGS.B.FE;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1959  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1960  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1961  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1962  IFX_INLINE boolean IfxAsclin_getHeaderTimeoutFlagStatus(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1963  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1964      return asclin->FLAGS.B.HT;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1965  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1966  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1967  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1968  IFX_INLINE boolean IfxAsclin_getKernelResetStatus(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1969  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1970      return asclin->KRST0.B.RSTSTAT;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1971  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1972  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1973  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1974  IFX_INLINE boolean IfxAsclin_getLinAutoBaudDetectionErrorFlagStatus(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1975  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1976      return asclin->FLAGS.B.LA;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1977  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1978  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1979  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1980  IFX_INLINE boolean IfxAsclin_getLinChecksumErrorFlagStatus(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1981  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1982      return asclin->FLAGS.B.LC;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1983  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1984  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1985  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1986  IFX_INLINE boolean IfxAsclin_getLinParityErrorFlagStatus(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1987  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1988      return asclin->FLAGS.B.LP;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1989  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1990  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1991  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1992  IFX_INLINE boolean IfxAsclin_getModuleStatus(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1993  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1994      return asclin->CLC.B.DISS;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1995  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1996  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1997  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1998  IFX_INLINE boolean IfxAsclin_getParityErrorFlagStatus(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1999  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2000      return asclin->FLAGS.B.PE;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2001  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2002  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2003  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2004  IFX_INLINE uint16 IfxAsclin_getPrescaler(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2005  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2006      return asclin->BITCON.B.PRESCALER + 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2007  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2008  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2009  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2010  IFX_INLINE boolean IfxAsclin_getRaisingEdgeDetectedFlagStatus(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2011  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2012      return asclin->FLAGS.B.RED;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2013  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2014  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2015  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2016  IFX_INLINE boolean IfxAsclin_getReceiveSignalStatus(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2017  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2018      return asclin->IOCR.B.RXM;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2019  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2020  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2021  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2022  IFX_INLINE boolean IfxAsclin_getResponseTimeoutFlagStatus(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2023  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2024      return asclin->FLAGS.B.RT;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2025  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2026  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2027  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2028  IFX_INLINE uint8 IfxAsclin_getRxFifoFillLevel(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2029  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2030      return asclin->RXFIFOCON.B.FILL;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2031  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2032  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2033  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2034  IFX_INLINE boolean IfxAsclin_getRxFifoFillLevelFlagStatus(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2035  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2036      return asclin->FLAGS.B.RFL;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2037  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2038  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2039  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2040  IFX_INLINE uint8 IfxAsclin_getRxFifoOutletWidth(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2041  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2042      return asclin->RXFIFOCON.B.OUTW;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2043  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2044  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2045  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2046  IFX_INLINE boolean IfxAsclin_getRxFifoOverflowFlagStatus(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2047  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2048      return asclin->FLAGS.B.RFO;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2049  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2050  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2051  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2052  IFX_INLINE boolean IfxAsclin_getRxFifoUnderflowFlagStatus(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2053  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2054      return asclin->FLAGS.B.RFU;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2055  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2056  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2057  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2058  IFX_INLINE boolean IfxAsclin_getRxHeaderEndFlagStatus(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2059  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2060      return asclin->FLAGS.B.RH;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2061  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2062  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2063  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2064  IFX_INLINE boolean IfxAsclin_getRxResponseEndFlagStatus(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2065  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2066      return asclin->FLAGS.B.RR;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2067  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2068  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2069  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2070  IFX_INLINE boolean IfxAsclin_getTransmissionCompletedFlagStatus(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2071  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2072      return asclin->FLAGS.B.TC;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2073  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2074  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2075  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2076  IFX_INLINE boolean IfxAsclin_getTransmitSignalStatus(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2077  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2078      return asclin->IOCR.B.TXM;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2079  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2080  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2081  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2082  IFX_INLINE uint8 IfxAsclin_getTxFifoFillLevel(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2083  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2084      return asclin->TXFIFOCON.B.FILL;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2085  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2086  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2087  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2088  IFX_INLINE boolean IfxAsclin_getTxFifoFillLevelFlagStatus(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2089  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2090      return asclin->FLAGS.B.TFL;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2091  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2092  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2093  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2094  IFX_INLINE uint8 IfxAsclin_getTxFifoInletWidth(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2095  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2096      return asclin->TXFIFOCON.B.INW;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2097  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2098  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2099  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2100  IFX_INLINE boolean IfxAsclin_getTxFifoOverflowFlagStatus(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2101  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2102      return asclin->FLAGS.B.TFO;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2103  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2104  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2105  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2106  IFX_INLINE boolean IfxAsclin_getTxHeaderEndFlagStatus(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2107  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2108      return asclin->FLAGS.B.TH;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2109  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2110  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2111  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2112  IFX_INLINE boolean IfxAsclin_getTxResponseEndFlagStatus(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2113  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2114      return asclin->FLAGS.B.TR;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2115  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2116  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2117  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2118  IFX_INLINE void IfxAsclin_initCtsPin(const IfxAsclin_Cts_In *cts, IfxPort_InputMode inputMode, IfxPort_PadDriver padDriver)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2119  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2120      if (cts->pin.port != NULL_PTR)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2121      {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2122          IfxPort_setPinModeInput(cts->pin.port, cts->pin.pinIndex, inputMode);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2123          IfxPort_setPinPadDriver(cts->pin.port, cts->pin.pinIndex, padDriver);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2124          IfxAsclin_enableCts(cts->module, TRUE);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2125          IfxAsclin_setCtsInput(cts->module, (IfxAsclin_CtsInputSelect)cts->select);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2126      }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2127  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2128  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2129  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2130  IFX_INLINE void IfxAsclin_initRtsPin(const IfxAsclin_Rts_Out *rts, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2131  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2132      IfxPort_setPinModeOutput(rts->pin.port, rts->pin.pinIndex, outputMode, rts->select);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2133      IfxPort_setPinPadDriver(rts->pin.port, rts->pin.pinIndex, padDriver);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2134  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2135  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2136  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2137  IFX_INLINE void IfxAsclin_initRxPin(const IfxAsclin_Rx_In *rx, IfxPort_InputMode inputMode, IfxPort_PadDriver padDriver)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2138  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2139      if (rx->pin.port != NULL_PTR)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2140      {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2141          IfxPort_setPinModeInput(rx->pin.port, rx->pin.pinIndex, inputMode);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2142          IfxPort_setPinPadDriver(rx->pin.port, rx->pin.pinIndex, padDriver);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2143          IfxAsclin_setRxInput(rx->module, (IfxAsclin_RxInputSelect)rx->select);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2144      }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2145  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2146  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2147  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2148  IFX_INLINE void IfxAsclin_initSclkPin(const IfxAsclin_Sclk_Out *sclk, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2149  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2150      IfxPort_setPinModeOutput(sclk->pin.port, sclk->pin.pinIndex, outputMode, sclk->select);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2151      IfxPort_setPinPadDriver(sclk->pin.port, sclk->pin.pinIndex, padDriver);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2152  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2153  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2154  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2155  IFX_INLINE void IfxAsclin_initSlsoPin(const IfxAsclin_Slso_Out *slso, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2156  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2157      IfxPort_setPinModeOutput(slso->pin.port, slso->pin.pinIndex, outputMode, slso->select);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2158      IfxPort_setPinPadDriver(slso->pin.port, slso->pin.pinIndex, padDriver);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2159  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2160  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2161  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2162  IFX_INLINE void IfxAsclin_initTxPin(const IfxAsclin_Tx_Out *tx, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2163  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2164      IfxPort_setPinModeOutput(tx->pin.port, tx->pin.pinIndex, outputMode, tx->select);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2165      IfxPort_setPinPadDriver(tx->pin.port, tx->pin.pinIndex, padDriver);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2166  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2167  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2168  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2169  IFX_INLINE boolean IfxAsclin_isModuleSuspended(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2170  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2171      Ifx_ASCLIN_OCS ocs;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2172  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2173      // read the status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2174      ocs.U = asclin->OCS.U;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2175  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2176      // return the status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2177      return ocs.B.SUSSTA;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2178  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2179  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2180  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2181  IFX_INLINE uint32 IfxAsclin_readRxData(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2182  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2183      return asclin->RXDATA.U;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2184  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2185  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2186  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2187  IFX_INLINE void IfxAsclin_setBrdLowerlimt(Ifx_ASCLIN *asclin, uint8 limit)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2188  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2189      asclin->BRD.B.LOWERLIMIT = limit;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2190  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2191  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2192  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2193  IFX_INLINE void IfxAsclin_setBrdUpperlimt(Ifx_ASCLIN *asclin, uint8 limit)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2194  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2195      asclin->BRD.B.UPPERLIMIT = limit;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2196  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2197  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2198  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2199  IFX_INLINE void IfxAsclin_setChecksumInjection(Ifx_ASCLIN *asclin, IfxAsclin_ChecksumInjection csi)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2200  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2201      asclin->LIN.CON.B.CSI = csi;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2202  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2203  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2204  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2205  IFX_INLINE void IfxAsclin_setChecksumMode(Ifx_ASCLIN *asclin, IfxAsclin_Checksum mode)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2206  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2207      asclin->DATCON.B.CSM = mode;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2208  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2209  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2210  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2211  IFX_INLINE void IfxAsclin_setClockPolarity(Ifx_ASCLIN *asclin, IfxAsclin_ClockPolarity cpol)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2212  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2213      asclin->IOCR.B.CPOL = cpol;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2214  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2215  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2216  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2217  IFX_INLINE void IfxAsclin_setCtsInput(Ifx_ASCLIN *asclin, IfxAsclin_CtsInputSelect ctsi)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2218  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2219      asclin->IOCR.B.CTS = ctsi;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2220  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2221  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2222  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2223  IFX_INLINE void IfxAsclin_setDataLength(Ifx_ASCLIN *asclin, IfxAsclin_DataLength length)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2224  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2225      asclin->DATCON.B.DATLEN = length;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2226  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2227  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2228  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2229  IFX_INLINE void IfxAsclin_setDenominator(Ifx_ASCLIN *asclin, uint16 denominator)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2230  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2231      asclin->BRG.B.DENOMINATOR = denominator;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2232  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2233  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2234  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2235  IFX_INLINE void IfxAsclin_setDisableModuleRequest(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2236  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2237      asclin->CLC.B.DISR = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2238  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2239  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2240  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2241  IFX_INLINE void IfxAsclin_setEnableModuleRequest(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2242  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2243      asclin->CLC.B.DISR = 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2244  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2245  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2246  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2247  IFX_INLINE void IfxAsclin_setFilterDepth(Ifx_ASCLIN *asclin, uint8 depth)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2248  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2249      asclin->IOCR.B.DEPTH = __minu(depth, 63);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2250  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2251  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2252  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2253  IFX_INLINE void IfxAsclin_setFrameMode(Ifx_ASCLIN *asclin, IfxAsclin_FrameMode mode)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2254  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2255      asclin->FRAMECON.B.MODE = mode;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2256  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2257  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2258  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2259  IFX_INLINE void IfxAsclin_setHeaderResponseSelect(Ifx_ASCLIN *asclin, IfxAsclin_HeaderResponseSelect type)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2260  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2261      asclin->DATCON.B.HO = type;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2262  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2263  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2264  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2265  IFX_INLINE void IfxAsclin_setIdleDelay(Ifx_ASCLIN *asclin, IfxAsclin_IdleDelay delay)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2266  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2267      asclin->FRAMECON.B.IDLE = delay;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2268  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2269  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2270  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2271  IFX_INLINE void IfxAsclin_setKernelResetOne(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2272  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2273      asclin->KRST1.B.RST = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2274  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2275  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2276  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2277  IFX_INLINE void IfxAsclin_setKernelResetZero(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2278  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2279      asclin->KRST0.B.RST = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2280  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2281  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2282  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2283  IFX_INLINE void IfxAsclin_setLeadDelay(Ifx_ASCLIN *asclin, IfxAsclin_LeadDelay delay)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2284  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2285      asclin->FRAMECON.B.LEAD = delay;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2286  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2287  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2288  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2289  IFX_INLINE void IfxAsclin_setLinBreakLength(Ifx_ASCLIN *asclin, uint8 length)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2290  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2291      asclin->LIN.BTIMER.B.BREAK = length;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2292  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2293  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2294  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2295  IFX_INLINE void IfxAsclin_setLinHeaderTimeout(Ifx_ASCLIN *asclin, uint8 timeout)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2296  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2297      asclin->LIN.HTIMER.B.HEADER = timeout;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2298  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2299  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2300  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2301  IFX_INLINE void IfxAsclin_setLinMode(Ifx_ASCLIN *asclin, IfxAsclin_LinMode mode)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2302  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2303      asclin->LIN.CON.B.MS = mode;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2304  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2305  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2306  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2307  IFX_INLINE void IfxAsclin_setLinResponseTimeoutMode(Ifx_ASCLIN *asclin, IfxAsclin_LinResponseTimeoutMode mode)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2308  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2309      asclin->DATCON.B.RM = mode;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2310  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2311  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2312  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2313  IFX_INLINE void IfxAsclin_setLinResponseTimeoutThreshold(Ifx_ASCLIN *asclin, uint16 threshold)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2314  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2315      asclin->DATCON.B.RESPONSE = __minu(threshold, 256);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2316  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2317  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2318  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2319  IFX_INLINE void IfxAsclin_setNumerator(Ifx_ASCLIN *asclin, uint16 numerator)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2320  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2321      asclin->BRG.B.NUMERATOR = numerator;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2322  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2323  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2324  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2325  IFX_INLINE void IfxAsclin_setOversampling(Ifx_ASCLIN *asclin, IfxAsclin_OversamplingFactor ovsFactor)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2326  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2327      asclin->BITCON.B.OVERSAMPLING = ovsFactor;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2328  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2329  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2330  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2331  IFX_INLINE void IfxAsclin_setParityType(Ifx_ASCLIN *asclin, IfxAsclin_ParityType type)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2332  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2333      asclin->FRAMECON.B.ODD = type;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2334  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2335  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2336  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2337  IFX_INLINE void IfxAsclin_setPrescaler(Ifx_ASCLIN *asclin, uint16 prescaler)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2338  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2339      asclin->BITCON.B.PRESCALER = prescaler - 1;
	ld.hu	d0,[a15]20
.L661:
	add	d8,#-1
.L662:
	insert	d15,d0,d8,#0,#12
	st.h	[a15]20,d15
.L391:
	fcall	.cocofun_2
.L398:
	ld.hu	d15,[a15]32
.L406:
	mov	d4,d12
	mov.aa	a4,a15
.L413:

; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	     1  /**
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	     2   * \file IfxAsclin.h
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	     3   * \brief ASCLIN  basic functionality
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	     4   * \ingroup IfxLld_Asclin
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	     5   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	     6   * \version iLLD_1_0_1_11_0
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	     7   * \copyright Copyright (c) 2018 Infineon Technologies AG. All rights reserved.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	     8   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	     9   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    10   *                                 IMPORTANT NOTICE
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    11   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    12   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    13   * Use of this file is subject to the terms of use agreed between (i) you or 
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    14   * the company in which ordinary course of business you are acting and (ii) 
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    15   * Infineon Technologies AG or its licensees. If and as long as no such 
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    16   * terms of use are agreed, use of this file is subject to following:
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    17  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    18  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    19   * Boost Software License - Version 1.0 - August 17th, 2003
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    20  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    21   * Permission is hereby granted, free of charge, to any person or 
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    22   * organization obtaining a copy of the software and accompanying 
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    23   * documentation covered by this license (the "Software") to use, reproduce,
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    24   * display, distribute, execute, and transmit the Software, and to prepare
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    25   * derivative works of the Software, and to permit third-parties to whom the 
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    26   * Software is furnished to do so, all subject to the following:
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    27  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    28   * The copyright notices in the Software and this entire statement, including
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    29   * the above license grant, this restriction and the following disclaimer, must
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    30   * be included in all copies of the Software, in whole or in part, and all
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    31   * derivative works of the Software, unless such copies or derivative works are
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    32   * solely in the form of machine-executable object code generated by a source
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    33   * language processor.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    34  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    35   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR 
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    36   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    37   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    38   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE 
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    39   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    40   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    41   * DEALINGS IN THE SOFTWARE.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    42  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    43   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    44   * \defgroup IfxLld_Asclin_Std_Enumerations Enumerations
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    45   * \ingroup IfxLld_Asclin_Std
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    46   * \defgroup IfxLld_Asclin_Std_Operative Operative Functions
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    47   * \ingroup IfxLld_Asclin_Std
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    48   * \defgroup IfxLld_Asclin_Std_Utility Utility Functions
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    49   * \ingroup IfxLld_Asclin_Std
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    50   * \defgroup IfxLld_Asclin_Std_Configuration Configuration Functions
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    51   * \ingroup IfxLld_Asclin_Std
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    52   * \defgroup IfxLld_Asclin_Std_External External Functions
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    53   * \ingroup IfxLld_Asclin_Std
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    54   * \defgroup IfxLld_Asclin_Std_IO IO Pin Configuration Functions
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    55   * \ingroup IfxLld_Asclin_Std
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    56   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    57  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    58  #ifndef IFXASCLIN_H
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    59  #define IFXASCLIN_H 1
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    60  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    61  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    62  /*----------------------------------Includes----------------------------------*/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    63  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    64  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    65  #include "_Impl/IfxAsclin_cfg.h"
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    66  #include "Scu/Std/IfxScuCcu.h"
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    67  #include "Scu/Std/IfxScuWdt.h"
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    68  #include "Cpu/Std/IfxCpu_Intrinsics.h"
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    69  #include "IfxAsclin_reg.h"
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    70  #include "Src/Std/IfxSrc.h"
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    71  #include "_PinMap/IfxAsclin_PinMap.h"
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    72  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    73  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    74  /*--------------------------------Enumerations--------------------------------*/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    75  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    76  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    77  /** \addtogroup IfxLld_Asclin_Std_Enumerations
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    78   * \{ */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    79  /** \brief Defines if the classic or the enhanced checksum will be calculated by the checksum block.\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    80   * Definition in Ifx_ASCLIN.DATCON.B.CSM
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    81   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    82  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    83  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    84      IfxAsclin_Checksum_classic  = 0, /**< \brief classic checksum */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    85      IfxAsclin_Checksum_enhanced = 1  /**< \brief enhanced checksum */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    86  } IfxAsclin_Checksum;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    87  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    88  /** \brief Defines if the received checksum byte is written into the RXFifo or not.\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    89   * Definition in Ifx_ASCLIN.LIN.CON.B.CSI
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    90   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    91  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    92  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    93      IfxAsclin_ChecksumInjection_notWritten = 0,  /**< \brief checksum byte is not written */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    94      IfxAsclin_ChecksumInjection_written    = 1   /**< \brief checksum byte is written */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    95  } IfxAsclin_ChecksumInjection;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    96  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    97  /** \brief CPOL defines the idle level of the clock signal in the SPI mode.\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    98   * Idle level is the level outside the data transmission time intervals.\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    99   * Definition in Ifx_ASCLIN.IOCR.B.CPOL
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   100   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   101  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   102  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   103      IfxAsclin_ClockPolarity_idleLow  = 0, /**< \brief idle low */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   104      IfxAsclin_ClockPolarity_idleHigh = 1  /**< \brief idle high */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   105  } IfxAsclin_ClockPolarity;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   106  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   107  /** \brief Selection of clock source\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   108   * Definition in Ifx_ASCLIN.CSR.B.CLKSEL
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   109   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   110  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   111  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   112      IfxAsclin_ClockSource_noClock         = 0,  /**< \brief no clock will be supplied */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   113      IfxAsclin_ClockSource_kernelClock     = 1,  /**< \brief f clc will be supplied */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   114      IfxAsclin_ClockSource_oscillatorClock = 2,  /**< \brief XTAL oscillator clock foso0 will be supplied */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   115      IfxAsclin_ClockSource_flexRayClock    = 4,  /**< \brief f eray will be supplied */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   116      IfxAsclin_ClockSource_ascFastClock    = 8,  /**< \brief f asclinf wiil be supplied */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   117      IfxAsclin_ClockSource_ascSlowClock    = 16  /**< \brief f asclins will be supplied */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   118  } IfxAsclin_ClockSource;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   119  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   120  /** \brief CTS input pin selection\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   121   * Definition in Ifx_ASCLIN.IOCR.B.CTS
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   122   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   123  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   124  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   125      IfxAsclin_CtsInputSelect_0,     /**< \brief CTS input pin 0  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   126      IfxAsclin_CtsInputSelect_1,     /**< \brief CTS input pin 1  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   127      IfxAsclin_CtsInputSelect_2,     /**< \brief CTS input pin 2  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   128      IfxAsclin_CtsInputSelect_3      /**< \brief CTS input pin 3  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   129  } IfxAsclin_CtsInputSelect;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   130  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   131  /** \brief Number of bits per transfer\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   132   * Definition in Ifx_ASCLIN.FRAMECON.B.DATALEN
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   133   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   134  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   135  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   136      IfxAsclin_DataLength_1 = 0,      /**< \brief number of bits per transfer 0  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   137      IfxAsclin_DataLength_2,          /**< \brief number of bits per transfer 1  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   138      IfxAsclin_DataLength_3,          /**< \brief number of bits per transfer 2  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   139      IfxAsclin_DataLength_4,          /**< \brief number of bits per transfer 3  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   140      IfxAsclin_DataLength_5,          /**< \brief number of bits per transfer 4  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   141      IfxAsclin_DataLength_6,          /**< \brief number of bits per transfer 5  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   142      IfxAsclin_DataLength_7,          /**< \brief number of bits per transfer 6  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   143      IfxAsclin_DataLength_8,          /**< \brief number of bits per transfer 7  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   144      IfxAsclin_DataLength_9,          /**< \brief number of bits per transfer 8  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   145      IfxAsclin_DataLength_10,         /**< \brief number of bits per transfer 9  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   146      IfxAsclin_DataLength_11,         /**< \brief number of bits per transfer 10  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   147      IfxAsclin_DataLength_12,         /**< \brief number of bits per transfer 11  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   148      IfxAsclin_DataLength_13,         /**< \brief number of bits per transfer 12  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   149      IfxAsclin_DataLength_14,         /**< \brief number of bits per transfer 13  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   150      IfxAsclin_DataLength_15,         /**< \brief number of bits per transfer 14  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   151      IfxAsclin_DataLength_16          /**< \brief number of bits per transfer 15  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   152  } IfxAsclin_DataLength;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   153  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   154  /** \brief Defines the basic operating mode of the module. Changing the mode must be done by switching first to initialize mode, and then to the other mode.\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   155   * Definition in Ifx_ASCLIN.FRAMECON.B.MODE
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   156   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   157  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   158  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   159      IfxAsclin_FrameMode_initialise = 0,  /**< \brief initialise mode */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   160      IfxAsclin_FrameMode_asc        = 1,  /**< \brief asc mode */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   161      IfxAsclin_FrameMode_spi        = 2,  /**< \brief spi mode */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   162      IfxAsclin_FrameMode_lin        = 3   /**< \brief lin mode */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   163  } IfxAsclin_FrameMode;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   164  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   165  /** \brief Defines if LIN frame shall consist of a header and response or of a header only.\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   166   * Definition in Ifx_ASCLIN.DATCON.B.HO
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   167   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   168  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   169  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   170      IfxAsclin_HeaderResponseSelect_headerAndResponse = 0,  /**< \brief header and response expected */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   171      IfxAsclin_HeaderResponseSelect_headerOnly        = 1   /**< \brief header only expected */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   172  } IfxAsclin_HeaderResponseSelect;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   173  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   174  /** \brief Defines the duration of the IDLE delay in bit times.\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   175   * SPI mode: this is the idle time between the frames.\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   176   * ASC and LIN mode: this is the pause inserted between transmission of bytes.\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   177   * Definition in Ifx_ASCLIN.FRAMECON.B.IDLE
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   178   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   179  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   180  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   181      IfxAsclin_IdleDelay_0,     /**< \brief idle delay in 0 bit times  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   182      IfxAsclin_IdleDelay_1,     /**< \brief idle delay in 1 bit times  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   183      IfxAsclin_IdleDelay_2,     /**< \brief idle delay in 2 bit times  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   184      IfxAsclin_IdleDelay_3,     /**< \brief idle delay in 3 bit times  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   185      IfxAsclin_IdleDelay_4,     /**< \brief idle delay in 4 bit times  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   186      IfxAsclin_IdleDelay_5,     /**< \brief idle delay in 5 bit times  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   187      IfxAsclin_IdleDelay_6,     /**< \brief idle delay in 6 bit times  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   188      IfxAsclin_IdleDelay_7      /**< \brief idle delay in 7 bit times  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   189  } IfxAsclin_IdleDelay;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   190  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   191  /** \brief Defines the leading delay in bit times in SPI mode. ASC mode: not applicable.\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   192   * LIN mode: delay between the end of the break and the start of the sync character.\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   193   * Definition in Ifx_ASCLIN.FRAMECON.B.LEAD
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   194   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   195  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   196  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   197      IfxAsclin_LeadDelay_0,     /**< \brief lead delay in 0 bit times  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   198      IfxAsclin_LeadDelay_1,     /**< \brief lead delay in 1 bit times  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   199      IfxAsclin_LeadDelay_2,     /**< \brief lead delay in 2 bit times  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   200      IfxAsclin_LeadDelay_3,     /**< \brief lead delay in 3 bit times  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   201      IfxAsclin_LeadDelay_4,     /**< \brief lead delay in 4 bit times  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   202      IfxAsclin_LeadDelay_5,     /**< \brief lead delay in 5 bit times  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   203      IfxAsclin_LeadDelay_6,     /**< \brief lead delay in 6 bit times  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   204      IfxAsclin_LeadDelay_7      /**< \brief lead delay in 7 bit times  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   205  } IfxAsclin_LeadDelay;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   206  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   207  /** \brief Configures if the module in LIN mode operates as master or slave\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   208   * Definition in Ifx_ASCLIN.LIN.CON.B.MS
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   209   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   210  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   211  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   212      IfxAsclin_LinMode_slave  = 0, /**< \brief operates in slave mode */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   213      IfxAsclin_LinMode_master = 1  /**< \brief operates in master mode */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   214  } IfxAsclin_LinMode;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   215  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   216  /** \brief Defines the timeout threshold of RESPOSE bit is for LIN response timeout or LIN frame timeout.\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   217   * Definition in Ifx_ASCLIN.DATCON.B.RM
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   218   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   219  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   220  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   221      IfxAsclin_LinResponseTimeoutMode_frameTimeout    = 0, /**< \brief timeout threshold is for frame */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   222      IfxAsclin_LinResponseTimeoutMode_responseTimeout = 1  /**< \brief timeout threshold is for reponse */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   223  } IfxAsclin_LinResponseTimeoutMode;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   224  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   225  /** \brief Defines the bit length in ticks in the range of 1 to 16. The lengths of 1 to 3 are not allowed\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   226   * Definition in Ifx_ASCLIN.BITCON.B.OVERSAMPLING
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   227   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   228  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   229  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   230      IfxAsclin_OversamplingFactor_4  = 3,   /**< \brief oversampling factor 4 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   231      IfxAsclin_OversamplingFactor_5  = 4,   /**< \brief oversampling factor 5 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   232      IfxAsclin_OversamplingFactor_6  = 5,   /**< \brief oversampling factor 6 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   233      IfxAsclin_OversamplingFactor_7  = 6,   /**< \brief oversampling factor 7 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   234      IfxAsclin_OversamplingFactor_8  = 7,   /**< \brief oversampling factor 8 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   235      IfxAsclin_OversamplingFactor_9  = 8,   /**< \brief oversampling factor 9 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   236      IfxAsclin_OversamplingFactor_10 = 9,   /**< \brief oversampling factor 10 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   237      IfxAsclin_OversamplingFactor_11 = 10,  /**< \brief oversampling factor 11 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   238      IfxAsclin_OversamplingFactor_12 = 11,  /**< \brief oversampling factor 12 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   239      IfxAsclin_OversamplingFactor_13 = 12,  /**< \brief oversampling factor 13 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   240      IfxAsclin_OversamplingFactor_14 = 13,  /**< \brief oversampling factor 14 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   241      IfxAsclin_OversamplingFactor_15 = 14,  /**< \brief oversampling factor 15 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   242      IfxAsclin_OversamplingFactor_16 = 15   /**< \brief oversampling factor 16 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   243  } IfxAsclin_OversamplingFactor;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   244  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   245  /** \brief Type of parity bit attached to data bits\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   246   * Definition in Ifx_ASCLIN.FRAMECON.B.ODD
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   247   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   248  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   249  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   250      IfxAsclin_ParityType_even = 0,  /**< \brief even parity */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   251      IfxAsclin_ParityType_odd  = 1   /**< \brief odd parity */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   252  } IfxAsclin_ParityType;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   253  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   254  /** \brief Receive buffer mode\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   255   * Definition in Ifx_ASCLIN.RXFIFOCON.B.BUF
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   256   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   257  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   258  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   259      IfxAsclin_ReceiveBufferMode_rxFifo   = 0, /**< \brief RxFIFO mode */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   260      IfxAsclin_ReceiveBufferMode_rxBuffer = 1  /**< \brief single stage Rx buffer */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   261  } IfxAsclin_ReceiveBufferMode;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   262  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   263  /** \brief Polarity of the RTS and CTS signals\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   264   * Definition in Ifx_ASCLIN.IOCR.B.RCPOL
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   265   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   266  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   267  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   268      IfxAsclin_RtsCtsPolarity_activeHigh = 0,  /**< \brief ready/clear are active-high */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   269      IfxAsclin_RtsCtsPolarity_activeLow  = 1   /**< \brief ready/clear are active-low */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   270  } IfxAsclin_RtsCtsPolarity;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   271  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   272  /** \brief Defines the filling level that triggers a drain (RX) interrupt or DMA access\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   273   * Definition in Ifx_ASCLIN.RXFIFOCON.B.INTLEVEL
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   274   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   275  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   276  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   277      IfxAsclin_RxFifoInterruptLevel_1,     /**< \brief RX FIFO level 1  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   278      IfxAsclin_RxFifoInterruptLevel_2,     /**< \brief RX FIFO level 2  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   279      IfxAsclin_RxFifoInterruptLevel_3,     /**< \brief RX FIFO level 3  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   280      IfxAsclin_RxFifoInterruptLevel_4,     /**< \brief RX FIFO level 4  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   281      IfxAsclin_RxFifoInterruptLevel_5,     /**< \brief RX FIFO level 5  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   282      IfxAsclin_RxFifoInterruptLevel_6,     /**< \brief RX FIFO level 6  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   283      IfxAsclin_RxFifoInterruptLevel_7,     /**< \brief RX FIFO level 7  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   284      IfxAsclin_RxFifoInterruptLevel_8,     /**< \brief RX FIFO level 8  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   285      IfxAsclin_RxFifoInterruptLevel_9,     /**< \brief RX FIFO level 9  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   286      IfxAsclin_RxFifoInterruptLevel_10,    /**< \brief RX FIFO level 10  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   287      IfxAsclin_RxFifoInterruptLevel_11,    /**< \brief RX FIFO level 11  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   288      IfxAsclin_RxFifoInterruptLevel_12,    /**< \brief RX FIFO level 12  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   289      IfxAsclin_RxFifoInterruptLevel_13,    /**< \brief RX FIFO level 13  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   290      IfxAsclin_RxFifoInterruptLevel_14,    /**< \brief RX FIFO level 14  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   291      IfxAsclin_RxFifoInterruptLevel_15,    /**< \brief RX FIFO level 15  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   292      IfxAsclin_RxFifoInterruptLevel_16     /**< \brief RX FIFO level 16  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   293  } IfxAsclin_RxFifoInterruptLevel;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   294  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   295  /** \brief Defines the number of bytes read from the Rx FIFO with one FPI bus read\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   296   * Definition in Ifx_ASCLIN.RXFIFOCON.B.OUTW
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   297   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   298  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   299  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   300      IfxAsclin_RxFifoOutletWidth_0,     /**< \brief number of bytes 0  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   301      IfxAsclin_RxFifoOutletWidth_1,     /**< \brief number of bytes 1  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   302      IfxAsclin_RxFifoOutletWidth_2,     /**< \brief number of bytes 2  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   303      IfxAsclin_RxFifoOutletWidth_3      /**< \brief number of bytes 3  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   304  } IfxAsclin_RxFifoOutletWidth;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   305  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   306  /** \brief Alternate input selection for Rx signal.\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   307   * Definition in Ifx_ASCLIN.IOCR.B.ALTI
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   308   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   309  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   310  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   311      IfxAsclin_RxInputSelect_0,     /**< \brief alternate input selection 0  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   312      IfxAsclin_RxInputSelect_1,     /**< \brief alternate input selection 1  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   313      IfxAsclin_RxInputSelect_2,     /**< \brief alternate input selection 2  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   314      IfxAsclin_RxInputSelect_3,     /**< \brief alternate input selection 3  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   315      IfxAsclin_RxInputSelect_4,     /**< \brief alternate input selection 4  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   316      IfxAsclin_RxInputSelect_5,     /**< \brief alternate input selection 5  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   317      IfxAsclin_RxInputSelect_6,     /**< \brief alternate input selection 6  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   318      IfxAsclin_RxInputSelect_7      /**< \brief alternate input selection 7  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   319  } IfxAsclin_RxInputSelect;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   320  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   321  /** \brief Sample point position\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   322   * Definition in Ifx_ASCLIN.BITCON.B.SAMPLEPOINT
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   323   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   324  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   325  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   326      IfxAsclin_SamplePointPosition_1  = 1,   /**< \brief sample point position at 1 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   327      IfxAsclin_SamplePointPosition_2  = 2,   /**< \brief sample point position at 2 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   328      IfxAsclin_SamplePointPosition_3  = 3,   /**< \brief sample point position at 3 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   329      IfxAsclin_SamplePointPosition_4  = 4,   /**< \brief sample point position at 4 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   330      IfxAsclin_SamplePointPosition_5  = 5,   /**< \brief sample point position at 5 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   331      IfxAsclin_SamplePointPosition_6  = 6,   /**< \brief sample point position at 6 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   332      IfxAsclin_SamplePointPosition_7  = 7,   /**< \brief sample point position at 7 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   333      IfxAsclin_SamplePointPosition_8  = 8,   /**< \brief sample point position at 8 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   334      IfxAsclin_SamplePointPosition_9  = 9,   /**< \brief sample point position at 9 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   335      IfxAsclin_SamplePointPosition_10 = 10,  /**< \brief sample point position at 10 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   336      IfxAsclin_SamplePointPosition_11 = 11,  /**< \brief sample point position at 11 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   337      IfxAsclin_SamplePointPosition_12 = 12,  /**< \brief sample point position at 12 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   338      IfxAsclin_SamplePointPosition_13 = 13,  /**< \brief sample point position at 13 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   339      IfxAsclin_SamplePointPosition_14 = 14,  /**< \brief sample point position at 14 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   340      IfxAsclin_SamplePointPosition_15 = 15   /**< \brief sample point position at 15 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   341  } IfxAsclin_SamplePointPosition;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   342  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   343  /** \brief Number of samples per bit, sample mode/medianfilter\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   344   * Definition in Ifx_ASCLIN.BITCON.B.SM
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   345   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   346  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   347  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   348      IfxAsclin_SamplesPerBit_one   = 0, /**< \brief one sample per bit */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   349      IfxAsclin_SamplesPerBit_three = 1  /**< \brief three samples per bit */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   350  } IfxAsclin_SamplesPerBit;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   351  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   352  /** \brief SPI mode: defines the shift direction of the shift register.\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   353   * ASC and LIN mode: should be set to 0.\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   354   * Definition in Ifx_ASCLIN.FRAMECON.B.MSB
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   355   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   356  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   357  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   358      IfxAsclin_ShiftDirection_lsbFirst = 0,  /**< \brief LSB first */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   359      IfxAsclin_ShiftDirection_msbFirst = 1   /**< \brief MSB first */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   360  } IfxAsclin_ShiftDirection;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   361  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   362  /** \brief Defines the idle level of the SLSO signal, which is the level.\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   363   * Outside the data transmission, leading and trailing time intervals.\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   364   * Definition in Ifx_ASCLIN.IOCR.B.SPOL
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   365   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   366  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   367  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   368      IfxAsclin_SlavePolarity_idleLow  = 0, /**< \brief idle low */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   369      IfxAsclin_SlavePolarity_idlehigh = 1  /**< \brief idle high */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   370  } IfxAsclin_SlavePolarity;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   371  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   372  /** \brief Enable/disable the sensitivity of the module to sleep signal\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   373   * Definition in Ifx_ASCLIN.CLC.B.EDIS
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   374   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   375  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   376  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   377      IfxAsclin_SleepMode_enable  = 0, /**< \brief enables sleep mode */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   378      IfxAsclin_SleepMode_disable = 1  /**< \brief disables sleep mode */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   379  } IfxAsclin_SleepMode;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   380  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   381  /** \brief Error status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   382   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   383  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   384  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   385      IfxAsclin_Status_configurationError = 0,  /**< \brief Configuration error */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   386      IfxAsclin_Status_noError            = 1   /**< \brief No error */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   387  } IfxAsclin_Status;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   388  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   389  /** \brief ASC and LIN mode: number of stop bits (0 is not allowed), SPI mode: trailing delay.\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   390   * Definition in Ifx_ASCLIN.FRAMECON.B.STOP
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   391   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   392  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   393  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   394      IfxAsclin_StopBit_0,     /**< \brief number of stop bits 0  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   395      IfxAsclin_StopBit_1,     /**< \brief number of stop bits 1  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   396      IfxAsclin_StopBit_2,     /**< \brief number of stop bits 2  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   397      IfxAsclin_StopBit_3,     /**< \brief number of stop bits 3  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   398      IfxAsclin_StopBit_4,     /**< \brief number of stop bits 4  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   399      IfxAsclin_StopBit_5,     /**< \brief number of stop bits 5  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   400      IfxAsclin_StopBit_6,     /**< \brief number of stop bits 6  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   401      IfxAsclin_StopBit_7      /**< \brief number of stop bits 7  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   402  } IfxAsclin_StopBit;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   403  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   404  /** \brief OCDS Suspend Control (OCDS.SUS)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   405   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   406  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   407  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   408      IfxAsclin_SuspendMode_none = 0,  /**< \brief No suspend */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   409      IfxAsclin_SuspendMode_hard = 1,  /**< \brief Hard Suspend */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   410      IfxAsclin_SuspendMode_soft = 2   /**< \brief Soft Suspend */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   411  } IfxAsclin_SuspendMode;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   412  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   413  /** \brief Defines the number of bytes written to the Tx FIFO with one FPI bus write\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   414   * Definition in Ifx_ASCLIN.TXFIFOCON.B.INW
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   415   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   416  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   417  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   418      IfxAsclin_TxFifoInletWidth_0,     /**< \brief number of bytes 0  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   419      IfxAsclin_TxFifoInletWidth_1,     /**< \brief number of bytes 1  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   420      IfxAsclin_TxFifoInletWidth_2,     /**< \brief number of bytes 2  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   421      IfxAsclin_TxFifoInletWidth_3      /**< \brief number of bytes 3  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   422  } IfxAsclin_TxFifoInletWidth;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   423  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   424  /** \brief Defines the filling level that triggers a refill (TX) interrupt or DMA access\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   425   * Definition in Ifx_ASCLIN.TXFIFOCON.B.INTLEVEL
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   426   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   427  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   428  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   429      IfxAsclin_TxFifoInterruptLevel_0,     /**< \brief TX FIFO level 0  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   430      IfxAsclin_TxFifoInterruptLevel_1,     /**< \brief TX FIFO level 1  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   431      IfxAsclin_TxFifoInterruptLevel_2,     /**< \brief TX FIFO level 2  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   432      IfxAsclin_TxFifoInterruptLevel_3,     /**< \brief TX FIFO level 3  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   433      IfxAsclin_TxFifoInterruptLevel_4,     /**< \brief TX FIFO level 4  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   434      IfxAsclin_TxFifoInterruptLevel_5,     /**< \brief TX FIFO level 5  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   435      IfxAsclin_TxFifoInterruptLevel_6,     /**< \brief TX FIFO level 6  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   436      IfxAsclin_TxFifoInterruptLevel_7,     /**< \brief TX FIFO level 7  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   437      IfxAsclin_TxFifoInterruptLevel_8,     /**< \brief TX FIFO level 8  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   438      IfxAsclin_TxFifoInterruptLevel_9,     /**< \brief TX FIFO level 9  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   439      IfxAsclin_TxFifoInterruptLevel_10,    /**< \brief TX FIFO level 10  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   440      IfxAsclin_TxFifoInterruptLevel_11,    /**< \brief TX FIFO level 11  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   441      IfxAsclin_TxFifoInterruptLevel_12,    /**< \brief TX FIFO level 12  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   442      IfxAsclin_TxFifoInterruptLevel_13,    /**< \brief TX FIFO level 13  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   443      IfxAsclin_TxFifoInterruptLevel_14,    /**< \brief TX FIFO level 14  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   444      IfxAsclin_TxFifoInterruptLevel_15     /**< \brief TX FIFO level 15  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   445  } IfxAsclin_TxFifoInterruptLevel;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   446  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   447  /** \} */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   448  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   449  /** \addtogroup IfxLld_Asclin_Std_Operative
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   450   * \{ */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   451  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   452  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   453  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   454  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   455  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   456  /** \brief clears all the flags
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   457   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   458   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   459   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   460  IFX_INLINE void IfxAsclin_clearAllFlags(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   461  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   462  /** \brief Clears the break detected flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   463   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   464   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   465   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   466  IFX_INLINE void IfxAsclin_clearBreakDetectedFlag(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   467  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   468  /** \brief Clears the collision detection error flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   469   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   470   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   471   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   472  IFX_INLINE void IfxAsclin_clearCollisionDetectionErrorFlag(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   473  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   474  /** \brief Clears the falling edge detected flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   475   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   476   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   477   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   478  IFX_INLINE void IfxAsclin_clearFallingEdgeDetectedFlag(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   479  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   480  /** \brief Clears the frame error flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   481   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   482   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   483   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   484  IFX_INLINE void IfxAsclin_clearFrameErrorFlag(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   485  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   486  /** \brief Clears the header timeout flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   487   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   488   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   489   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   490  IFX_INLINE void IfxAsclin_clearHeaderTimeoutFlag(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   491  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   492  /** \brief Clears the kernel reset status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   493   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   494   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   495   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   496  IFX_INLINE void IfxAsclin_clearKernelResetStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   497  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   498  /** \brief Clears the auto baudrate detection error flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   499   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   500   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   501   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   502  IFX_INLINE void IfxAsclin_clearLinAutoBaudDetectionErrorFlag(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   503  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   504  /** \brief Clears the LIN checksum error flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   505   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   506   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   507   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   508  IFX_INLINE void IfxAsclin_clearLinChecksumErrorFlag(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   509  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   510  /** \brief Clears the LIN parity error flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   511   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   512   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   513   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   514  IFX_INLINE void IfxAsclin_clearLinParityErrorFlag(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   515  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   516  /** \brief Clears the parity error flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   517   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   518   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   519   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   520  IFX_INLINE void IfxAsclin_clearParityErrorFlag(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   521  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   522  /** \brief Clears the raising edge detected flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   523   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   524   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   525   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   526  IFX_INLINE void IfxAsclin_clearRaisingEdgeDetectedFlag(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   527  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   528  /** \brief Clears the response timeout flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   529   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   530   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   531   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   532  IFX_INLINE void IfxAsclin_clearResponseTimeoutFlag(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   533  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   534  /** \brief Clears the Rx FIFO level flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   535   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   536   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   537   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   538  IFX_INLINE void IfxAsclin_clearRxFifoFillLevelFlag(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   539  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   540  /** \brief Clears the Rx FIFO overflow flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   541   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   542   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   543   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   544  IFX_INLINE void IfxAsclin_clearRxFifoOverflowFlag(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   545  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   546  /** \brief Clears the Rx FIFO underflow flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   547   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   548   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   549   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   550  IFX_INLINE void IfxAsclin_clearRxFifoUnderflowFlag(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   551  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   552  /** \brief Clears the receive header end flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   553   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   554   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   555   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   556  IFX_INLINE void IfxAsclin_clearRxHeaderEndFlag(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   557  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   558  /** \brief Clears the receive response end flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   559   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   560   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   561   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   562  IFX_INLINE void IfxAsclin_clearRxResponseEndFlag(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   563  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   564  /** \brief Clears the transmission pending flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   565   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   566   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   567   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   568  IFX_INLINE void IfxAsclin_clearTransmissionCompletedFlag(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   569  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   570  /** \brief Clears the Tx FIFO level flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   571   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   572   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   573   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   574  IFX_INLINE void IfxAsclin_clearTxFifoFillLevelFlag(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   575  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   576  /** \brief Clears the Tx FIFO overflow flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   577   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   578   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   579   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   580  IFX_INLINE void IfxAsclin_clearTxFifoOverflowFlag(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   581  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   582  /** \brief Clears the transmit header end flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   583   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   584   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   585   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   586  IFX_INLINE void IfxAsclin_clearTxHeaderEndFlag(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   587  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   588  /** \brief Clears the transmit response end flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   589   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   590   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   591   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   592  IFX_INLINE void IfxAsclin_clearTxResponseEndFlag(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   593  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   594  /** \brief Flushes (empties) the Rx FIFO
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   595   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   596   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   597   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   598  IFX_INLINE void IfxAsclin_flushRxFifo(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   599  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   600  /** \brief Flushes (empties) the Tx FIFO
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   601   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   602   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   603   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   604  IFX_INLINE void IfxAsclin_flushTxFifo(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   605  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   606  /** \brief Sets the baudrate detection's lower limit
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   607   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   608   * \param limit value of the lower limit
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   609   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   610   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   611  IFX_INLINE void IfxAsclin_setBrdLowerlimt(Ifx_ASCLIN *asclin, uint8 limit);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   612  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   613  /** \brief Sets the baudrate detection's upper limit
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   614   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   615   * \param limit value of the upper limit
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   616   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   617   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   618  IFX_INLINE void IfxAsclin_setBrdUpperlimt(Ifx_ASCLIN *asclin, uint8 limit);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   619  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   620  /** \brief Sets the checksum injection
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   621   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   622   * \param csi checksum injection selection (not written / written)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   623   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   624   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   625  IFX_INLINE void IfxAsclin_setChecksumInjection(Ifx_ASCLIN *asclin, IfxAsclin_ChecksumInjection csi);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   626  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   627  /** \brief Sets the checksum mode
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   628   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   629   * \param mode checksum mode selection (classic / enhanced)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   630   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   631   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   632  IFX_INLINE void IfxAsclin_setChecksumMode(Ifx_ASCLIN *asclin, IfxAsclin_Checksum mode);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   633  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   634  /** \brief Sets the data length (number of bits per transfer)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   635   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   636   * \param length data length selection
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   637   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   638   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   639  IFX_INLINE void IfxAsclin_setDataLength(Ifx_ASCLIN *asclin, IfxAsclin_DataLength length);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   640  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   641  /** \brief Sets the denominator of the fractional divider
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   642   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   643   * \param denominator value of the denominator
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   644   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   645   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   646  IFX_INLINE void IfxAsclin_setDenominator(Ifx_ASCLIN *asclin, uint16 denominator);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   647  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   648  /** \brief Sets the disable module request
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   649   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   650   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   651   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   652  IFX_INLINE void IfxAsclin_setDisableModuleRequest(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   653  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   654  /** \brief Sets the enable module request
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   655   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   656   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   657   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   658  IFX_INLINE void IfxAsclin_setEnableModuleRequest(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   659  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   660  /** \brief Sets digital glitch filter depth
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   661   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   662   * \param depth digital glitch filter depth selection (1 to 63)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   663   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   664   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   665  IFX_INLINE void IfxAsclin_setFilterDepth(Ifx_ASCLIN *asclin, uint8 depth);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   666  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   667  /** \brief Sets the header response selection
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   668   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   669   * \param type type of selection (header and response or header only)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   670   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   671   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   672  IFX_INLINE void IfxAsclin_setHeaderResponseSelect(Ifx_ASCLIN *asclin, IfxAsclin_HeaderResponseSelect type);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   673  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   674  /** \brief Sets the idle delay
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   675   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   676   * \param delay idle delay selection
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   677   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   678   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   679  IFX_INLINE void IfxAsclin_setIdleDelay(Ifx_ASCLIN *asclin, IfxAsclin_IdleDelay delay);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   680  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   681  /** \brief Sets the kernal reset of the KRST1
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   682   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   683   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   684   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   685  IFX_INLINE void IfxAsclin_setKernelResetOne(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   686  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   687  /** \brief Sets the kernel reset of the KRST0
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   688   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   689   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   690   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   691  IFX_INLINE void IfxAsclin_setKernelResetZero(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   692  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   693  /** \brief Sets the lead delay
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   694   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   695   * \param delay lead delay selection
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   696   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   697   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   698  IFX_INLINE void IfxAsclin_setLeadDelay(Ifx_ASCLIN *asclin, IfxAsclin_LeadDelay delay);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   699  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   700  /** \brief Sets the LIN break length
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   701   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   702   * \param length value of the break length
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   703   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   704   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   705  IFX_INLINE void IfxAsclin_setLinBreakLength(Ifx_ASCLIN *asclin, uint8 length);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   706  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   707  /** \brief Sets the LIN header timeout
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   708   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   709   * \param timeout value of the header timeout
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   710   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   711   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   712  IFX_INLINE void IfxAsclin_setLinHeaderTimeout(Ifx_ASCLIN *asclin, uint8 timeout);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   713  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   714  /** \brief Sets the LIN mode of operation
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   715   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   716   * \param mode mode selection (slave / master)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   717   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   718   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   719  IFX_INLINE void IfxAsclin_setLinMode(Ifx_ASCLIN *asclin, IfxAsclin_LinMode mode);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   720  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   721  /** \brief Sets the LIN response timeout mode
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   722   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   723   * \param mode LIN response timeout mode selection
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   724   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   725   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   726  IFX_INLINE void IfxAsclin_setLinResponseTimeoutMode(Ifx_ASCLIN *asclin, IfxAsclin_LinResponseTimeoutMode mode);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   727  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   728  /** \brief Sets the LIN response timeout threshold
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   729   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   730   * \param threshold value of the tomeout threshold (1 to 256 bit times)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   731   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   732   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   733  IFX_INLINE void IfxAsclin_setLinResponseTimeoutThreshold(Ifx_ASCLIN *asclin, uint16 threshold);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   734  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   735  /** \brief Sets the numerator of the fractional divider
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   736   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   737   * \param numerator value of the numerator
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   738   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   739   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   740  IFX_INLINE void IfxAsclin_setNumerator(Ifx_ASCLIN *asclin, uint16 numerator);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   741  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   742  /** \brief Sets the division ratio of the baudrate post divider
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   743   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   744   * \param ovsFactor value of oversampling factor
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   745   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   746   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   747  IFX_INLINE void IfxAsclin_setOversampling(Ifx_ASCLIN *asclin, IfxAsclin_OversamplingFactor ovsFactor);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   748  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   749  /** \brief Sets the parity type
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   750   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   751   * \param type parity type selction (even / odd)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   752   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   753   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   754  IFX_INLINE void IfxAsclin_setParityType(Ifx_ASCLIN *asclin, IfxAsclin_ParityType type);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   755  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   756  /** \brief Sets the division ratio of the predivider (prescaler)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   757   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   758   * \param prescaler value of prescaler
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   759   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   760   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   761  IFX_INLINE void IfxAsclin_setPrescaler(Ifx_ASCLIN *asclin, uint16 prescaler);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   762  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   763  /** \brief Sets the receive buffer mode
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   764   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   765   * \param mode receive buffer mode selection (Rx FIFO or single stage Rx buffer)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   766   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   767   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   768  IFX_INLINE void IfxAsclin_setRxBufferMode(Ifx_ASCLIN *asclin, IfxAsclin_ReceiveBufferMode mode);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   769  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   770  /** \brief Sets the Tx FIFO interrupt level
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   771   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   772   * \param level interrupt level selection
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   773   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   774   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   775  IFX_INLINE void IfxAsclin_setRxFifoInterruptLevel(Ifx_ASCLIN *asclin, IfxAsclin_RxFifoInterruptLevel level);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   776  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   777  /** \brief Sets the receive FIFO outlet width
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   778   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   779   * \param width number of bytes read to the Rx FIFO with one FPI bus read
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   780   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   781   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   782  IFX_INLINE void IfxAsclin_setRxFifoOutletWidth(Ifx_ASCLIN *asclin, IfxAsclin_RxFifoOutletWidth width);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   783  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   784  /** \brief Sets the sample mode (number of samples per bit / median filter)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   785   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   786   * \param medianFilter value of the median filter
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   787   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   788   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   789  IFX_INLINE void IfxAsclin_setSampleMode(Ifx_ASCLIN *asclin, IfxAsclin_SamplesPerBit medianFilter);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   790  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   791  /** \brief Sets the sampling point position
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   792   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   793   * \param spPosition sample point position selection
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   794   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   795   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   796  IFX_INLINE void IfxAsclin_setSamplePointPosition(Ifx_ASCLIN *asclin, IfxAsclin_SamplePointPosition spPosition);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   797  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   798  /** \brief Sets the shift direction
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   799   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   800   * \param dir shift direction selection (LSB / MSB first)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   801   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   802   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   803  IFX_INLINE void IfxAsclin_setShiftDirection(Ifx_ASCLIN *asclin, IfxAsclin_ShiftDirection dir);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   804  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   805  /** \brief Sets the number of stop bits
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   806   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   807   * \param stopBit number of stop bits selection
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   808   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   809   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   810  IFX_INLINE void IfxAsclin_setStopBit(Ifx_ASCLIN *asclin, IfxAsclin_StopBit stopBit);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   811  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   812  /** \brief Sets the transmit header request flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   813   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   814   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   815   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   816  IFX_INLINE void IfxAsclin_setTransmitHeaderRequestFlag(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   817  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   818  /** \brief Sets the transmit response request flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   819   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   820   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   821   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   822  IFX_INLINE void IfxAsclin_setTransmitResponseRequestFlag(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   823  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   824  /** \brief Sets the transmission wake request flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   825   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   826   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   827   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   828  IFX_INLINE void IfxAsclin_setTransmitWakeRequestFlag(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   829  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   830  /** \brief Sets the transmit FIFO inlet width
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   831   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   832   * \param width number of bytes written to the Tx FIFO with one FPI bus write
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   833   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   834   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   835  IFX_INLINE void IfxAsclin_setTxFifoInletWidth(Ifx_ASCLIN *asclin, IfxAsclin_TxFifoInletWidth width);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   836  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   837  /** \brief Sets the Tx FIFO interrupt level
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   838   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   839   * \param level interrupt level selection
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   840   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   841   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   842  IFX_INLINE void IfxAsclin_setTxFifoInterruptLevel(Ifx_ASCLIN *asclin, IfxAsclin_TxFifoInterruptLevel level);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   843  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   844  /** \} */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   845  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   846  /** \addtogroup IfxLld_Asclin_Std_Utility
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   847   * \{ */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   848  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   849  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   850  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   851  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   852  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   853  /** \brief Returns the break detected flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   854   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   855   * \return break detected flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   856   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   857  IFX_INLINE boolean IfxAsclin_getBreakDetectedFlagStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   858  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   859  /** \brief Returns the clock source
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   860   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   861   * \return clock source
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   862   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   863  IFX_INLINE uint8 IfxAsclin_getClockSource(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   864  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   865  /** \brief Returns the clock status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   866   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   867   * \return clock status (off / on)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   868   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   869  IFX_INLINE boolean IfxAsclin_getClockStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   870  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   871  /** \brief Returns the collision detection error flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   872   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   873   * \return collision detection error flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   874   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   875  IFX_INLINE boolean IfxAsclin_getCollisionDetectionErrorFlagStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   876  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   877  /** \brief Returns  the falling edge detected flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   878   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   879   * \return falling edge detected flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   880   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   881  IFX_INLINE boolean IfxAsclin_getFallingEdgeDetectedFlagStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   882  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   883  /** \brief Returns the frame error flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   884   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   885   * \return frame error flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   886   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   887  IFX_INLINE boolean IfxAsclin_getFrameErrorFlagStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   888  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   889  /** \brief Returns the header timeout flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   890   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   891   * \return header timeout flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   892   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   893  IFX_INLINE boolean IfxAsclin_getHeaderTimeoutFlagStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   894  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   895  /** \brief Returns the kernel reset status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   896   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   897   * \return kernel reset status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   898   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   899  IFX_INLINE boolean IfxAsclin_getKernelResetStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   900  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   901  /** \brief Returns the LIN auto baudrate detection error flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   902   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   903   * \return LIN auto baudrate detection error flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   904   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   905  IFX_INLINE boolean IfxAsclin_getLinAutoBaudDetectionErrorFlagStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   906  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   907  /** \brief Returns the LIN checksum error flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   908   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   909   * \return LIN checksum error flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   910   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   911  IFX_INLINE boolean IfxAsclin_getLinChecksumErrorFlagStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   912  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   913  /** \brief Returns the LIN parity error flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   914   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   915   * \return LIN parity error flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   916   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   917  IFX_INLINE boolean IfxAsclin_getLinParityErrorFlagStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   918  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   919  /** \brief Returns the module status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   920   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   921   * \return module status (enabled / disabled)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   922   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   923  IFX_INLINE boolean IfxAsclin_getModuleStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   924  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   925  /** \brief Returns the parity error flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   926   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   927   * \return parity error flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   928   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   929  IFX_INLINE boolean IfxAsclin_getParityErrorFlagStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   930  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   931  /** \brief Returns the division ratio of the predivider (prescaler)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   932   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   933   * \return value of prescaler
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   934   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   935  IFX_INLINE uint16 IfxAsclin_getPrescaler(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   936  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   937  /** \brief Returns the raising edge detected flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   938   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   939   * \return raising edge detected flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   940   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   941  IFX_INLINE boolean IfxAsclin_getRaisingEdgeDetectedFlagStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   942  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   943  /** \brief Returns the received signal status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   944   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   945   * \return received signal status (0 is low & 1 is high)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   946   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   947  IFX_INLINE boolean IfxAsclin_getReceiveSignalStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   948  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   949  /** \brief Returns the response timeout flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   950   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   951   * \return response timeout flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   952   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   953  IFX_INLINE boolean IfxAsclin_getResponseTimeoutFlagStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   954  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   955  /** \brief Returns the current filling level of Tx FIFO
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   956   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   957   * \return current filling level of Rx FIFO
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   958   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   959  IFX_INLINE uint8 IfxAsclin_getRxFifoFillLevel(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   960  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   961  /** \brief Returns the Rx FIFO level flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   962   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   963   * \return Rx FIFO level flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   964   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   965  IFX_INLINE boolean IfxAsclin_getRxFifoFillLevelFlagStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   966  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   967  /** \brief Returns the receive FIFO inlet width
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   968   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   969   * \return number of bytes read to the Rx FIFO with one FPI bus read
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   970   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   971  IFX_INLINE uint8 IfxAsclin_getRxFifoOutletWidth(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   972  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   973  /** \brief Returns the Rx FIFO overflow flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   974   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   975   * \return Rx FIFO overflow flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   976   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   977  IFX_INLINE boolean IfxAsclin_getRxFifoOverflowFlagStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   978  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   979  /** \brief Returns the Rx FIFO underflow flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   980   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   981   * \return Rx FIFO underflow flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   982   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   983  IFX_INLINE boolean IfxAsclin_getRxFifoUnderflowFlagStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   984  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   985  /** \brief Returns the receive header end flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   986   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   987   * \return receive header end flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   988   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   989  IFX_INLINE boolean IfxAsclin_getRxHeaderEndFlagStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   990  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   991  /** \brief Returns the receive response end flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   992   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   993   * \return receive response end flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   994   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   995  IFX_INLINE boolean IfxAsclin_getRxResponseEndFlagStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   996  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   997  /** \brief Returns the transmission pending flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   998   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   999   * \return transmission pending flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1000   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1001  IFX_INLINE boolean IfxAsclin_getTransmissionCompletedFlagStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1002  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1003  /** \brief Returns the transmit signal status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1004   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1005   * \return transmit signal status (0 is low & 1 is high)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1006   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1007  IFX_INLINE boolean IfxAsclin_getTransmitSignalStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1008  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1009  /** \brief Returns the current filling level of Tx FIFO
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1010   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1011   * \return current filling level of Tx FIFO
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1012   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1013  IFX_INLINE uint8 IfxAsclin_getTxFifoFillLevel(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1014  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1015  /** \brief Returns the Tx FIFO level flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1016   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1017   * \return Tx FIFO level flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1018   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1019  IFX_INLINE boolean IfxAsclin_getTxFifoFillLevelFlagStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1020  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1021  /** \brief Returns the transmit FIFO inlet width
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1022   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1023   * \return number of bytes written to the Tx FIFO with one FPI bus write
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1024   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1025  IFX_INLINE uint8 IfxAsclin_getTxFifoInletWidth(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1026  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1027  /** \brief Returns the Tx FIFO overflow flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1028   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1029   * \return Tx FIFO overflow flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1030   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1031  IFX_INLINE boolean IfxAsclin_getTxFifoOverflowFlagStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1032  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1033  /** \brief Returns the transmit header end flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1034   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1035   * \return transmit header end flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1036   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1037  IFX_INLINE boolean IfxAsclin_getTxHeaderEndFlagStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1038  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1039  /** \brief Returns the transmit response end flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1040   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1041   * \return transmit response end flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1042   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1043  IFX_INLINE boolean IfxAsclin_getTxResponseEndFlagStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1044  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1045  /** \brief Sets the sensitivity of the module to sleep signal
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1046   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1047   * \param mode mode selection (enable / disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1048   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1049   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1050  IFX_INLINE void IfxAsclin_setSleepMode(Ifx_ASCLIN *asclin, IfxAsclin_SleepMode mode);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1051  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1052  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1053  /*-------------------------Global Function Prototypes-------------------------*/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1054  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1055  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1056  /** \brief API to get the address for ASCLIN HW module register memory map
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1057   * \param asclin Resource index of the ASCLIN
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1058   * \return ASCLIN module register address
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1059   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1060  IFX_EXTERN Ifx_ASCLIN *IfxAsclin_getAddress(IfxAsclin_Index asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1061  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1062  /** \brief Returns the ASCLIN module FA frequency in Hz
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1063   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1064   * \return Returns the ASCLIN module FA frequency in Hz
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1065   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1066  IFX_EXTERN float32 IfxAsclin_getFaFrequency(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1067  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1068  /** \brief API to get the resource index of the ASCLIN specified.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1069   * \return asclin resource index
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1070   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1071  IFX_EXTERN IfxAsclin_Index IfxAsclin_getIndex(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1072  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1073  /** \brief Returns the OVS frequency
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1074   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1075   * \return Returns the ASCLIN module OVS frequency in Hz
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1076   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1077  IFX_EXTERN float32 IfxAsclin_getOvsFrequency(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1078  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1079  /** \brief Returns the PD frequency
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1080   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1081   * \return Returns the ASCLIN module PD frequency in Hz
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1082   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1083  IFX_EXTERN float32 IfxAsclin_getPdFrequency(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1084  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1085  /** \brief Returns the SHIFT frequency
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1086   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1087   * \return Returns the ASCLIN module SHIFT frequency in Hz
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1088   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1089  IFX_EXTERN float32 IfxAsclin_getShiftFrequency(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1090  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1091  /** \brief resets Asclin kernel
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1092   * \param asclin pointer to ASCLIN resgisters
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1093   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1094   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1095  IFX_EXTERN void IfxAsclin_resetModule(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1096  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1097  /** \} */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1098  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1099  /** \addtogroup IfxLld_Asclin_Std_Configuration
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1100   * \{ */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1101  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1102  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1103  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1104  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1105  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1106  /** \brief disables all flags
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1107   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1108   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1109   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1110  IFX_INLINE void IfxAsclin_disableAllFlags(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1111  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1112  /** \brief Enables/disables the auto baudrate detection
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1113   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1114   * \param enable choice (enable / disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1115   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1116   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1117  IFX_INLINE void IfxAsclin_enableAutoBaudrateDetection(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1118  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1119  /** \brief Enables/disables break detected flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1120   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1121   * \param enable choice (enable / disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1122   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1123   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1124  IFX_INLINE void IfxAsclin_enableBreakDetectedFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1125  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1126  /** \brief Enables/disables the collision detection
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1127   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1128   * \param enable choice (enable/disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1129   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1130   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1131  IFX_INLINE void IfxAsclin_enableCollisionDetection(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1132  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1133  /** \brief Enables/disables LIN collision detection error flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1134   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1135   * \param enable choice (enable / disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1136   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1137   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1138  IFX_INLINE void IfxAsclin_enableCollisionDetectionErrorFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1139  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1140  /** \brief Enables/disables CTS
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1141   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1142   * \param enable choice (enable/disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1143   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1144   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1145  IFX_INLINE void IfxAsclin_enableCts(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1146  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1147  /** \brief Enables/disables falling edge detected flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1148   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1149   * \param enable choice (enable / disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1150   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1151   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1152  IFX_INLINE void IfxAsclin_enableFallingEdgeDetectedFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1153  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1154  /** \brief Enables/disables frame error flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1155   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1156   * \param enable choice (enable / disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1157   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1158   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1159  IFX_INLINE void IfxAsclin_enableFrameErrorFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1160  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1161  /** \brief Enables/disables the hardware checksum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1162   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1163   * \param enable choice (enable / disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1164   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1165   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1166  IFX_INLINE void IfxAsclin_enableHardwareChecksum(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1167  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1168  /** \brief Enables/disables header timeout flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1169   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1170   * \param enable choice (enable / disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1171   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1172   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1173  IFX_INLINE void IfxAsclin_enableHeaderTimeoutFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1174  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1175  /** \brief Enables/disables LIN auto baudrate detection error flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1176   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1177   * \param enable choice (enable / disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1178   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1179   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1180  IFX_INLINE void IfxAsclin_enableLinAutoBaudDetectionErrorFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1181  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1182  /** \brief Enables/disables LIN checksum error flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1183   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1184   * \param enable choice (enable / disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1185   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1186   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1187  IFX_INLINE void IfxAsclin_enableLinChecksumErrorFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1188  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1189  /** \brief Enables/disables LIN parity error flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1190   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1191   * \param enable choice (enable / disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1192   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1193   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1194  IFX_INLINE void IfxAsclin_enableLinParityErrorFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1195  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1196  /** \brief Enables/disables the loop back mode
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1197   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1198   * \param enable choice (enable/disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1199   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1200   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1201  IFX_INLINE void IfxAsclin_enableLoopBackMode(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1202  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1203  /** \brief Enables/disables the parity bit attachment to tha data bits
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1204   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1205   * \param enable choice (enable/disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1206   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1207   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1208  IFX_INLINE void IfxAsclin_enableParity(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1209  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1210  /** \brief Enables/disables parity error flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1211   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1212   * \param enable choice (enable / disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1213   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1214   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1215  IFX_INLINE void IfxAsclin_enableParityErrorFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1216  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1217  /** \brief Enables/disables raising edge detected flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1218   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1219   * \param enable choice (enable / disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1220   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1221   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1222  IFX_INLINE void IfxAsclin_enableRaisingEdgeDetectedFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1223  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1224  /** \brief Enables/disables response timeout flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1225   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1226   * \param enable choice (enable / disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1227   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1228   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1229  IFX_INLINE void IfxAsclin_enableResponseTimeoutFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1230  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1231  /** \brief Enables/disables Rx FIFO level flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1232   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1233   * \param enable choice (enable / disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1234   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1235   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1236  IFX_INLINE void IfxAsclin_enableRxFifoFillLevelFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1237  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1238  /** \brief Enables/disables the receive FIFO outlet to allow filling of Rx FIFO through shift register
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1239   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1240   * \param enable choice (enable/disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1241   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1242   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1243  IFX_INLINE void IfxAsclin_enableRxFifoInlet(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1244  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1245  /** \brief Enables/disables Rx FIFO overflow flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1246   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1247   * \param enable choice (enable / disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1248   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1249   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1250  IFX_INLINE void IfxAsclin_enableRxFifoOverflowFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1251  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1252  /** \brief Enables/disables Rx FIFO underflow flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1253   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1254   * \param enable choice (enable / disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1255   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1256   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1257  IFX_INLINE void IfxAsclin_enableRxFifoUnderflowFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1258  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1259  /** \brief Enables/disables receive header end flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1260   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1261   * \param enable choice (enable / disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1262   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1263   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1264  IFX_INLINE void IfxAsclin_enableRxHeaderEndFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1265  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1266  /** \brief Enables/disables receive response end flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1267   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1268   * \param enable choice (enable / disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1269   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1270   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1271  IFX_INLINE void IfxAsclin_enableRxResponseEndFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1272  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1273  /** \brief Enables/disables transmission completed flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1274   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1275   * \param enable choice (enable / disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1276   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1277   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1278  IFX_INLINE void IfxAsclin_enableTransmissionCompletedFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1279  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1280  /** \brief Enables/disables Tx FIFO level flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1281   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1282   * \param enable choice (enable / disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1283   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1284   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1285  IFX_INLINE void IfxAsclin_enableTxFifoFillLevelFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1286  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1287  /** \brief Enables/disables the transmit FIFO outlet to allow transmission
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1288   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1289   * \param enable choice (enable/disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1290   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1291   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1292  IFX_INLINE void IfxAsclin_enableTxFifoOutlet(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1293  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1294  /** \brief Enables/disables Tx FIFO overflow flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1295   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1296   * \param enable choice (enable / disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1297   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1298   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1299  IFX_INLINE void IfxAsclin_enableTxFifoOverflowFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1300  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1301  /** \brief Enables/disables transmit header end flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1302   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1303   * \param enable choice (enable / disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1304   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1305   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1306  IFX_INLINE void IfxAsclin_enableTxHeaderEndFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1307  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1308  /** \brief Enables/disables transmit response end flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1309   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1310   * \param enable choice (enable / disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1311   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1312   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1313  IFX_INLINE void IfxAsclin_enableTxResponseEndFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1314  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1315  /** \brief Returns the module's suspend state.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1316   * TRUE :if module is suspended.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1317   * FALSE:if module is not yet suspended.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1318   * \param asclin Pointer to ASCLIN module registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1319   * \return Suspend status (TRUE / FALSE)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1320   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1321  IFX_INLINE boolean IfxAsclin_isModuleSuspended(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1322  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1323  /** \brief Selects the clock polarity
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1324   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1325   * \param cpol CPOL selection
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1326   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1327   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1328  IFX_INLINE void IfxAsclin_setClockPolarity(Ifx_ASCLIN *asclin, IfxAsclin_ClockPolarity cpol);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1329  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1330  /** \brief Selects the CTS input pin
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1331   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1332   * \param ctsi CTS input pin selection
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1333   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1334   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1335  IFX_INLINE void IfxAsclin_setCtsInput(Ifx_ASCLIN *asclin, IfxAsclin_CtsInputSelect ctsi);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1336  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1337  /** \brief Selects the module's mode of operation
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1338   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1339   * \param mode mode selction
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1340   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1341   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1342  IFX_INLINE void IfxAsclin_setFrameMode(Ifx_ASCLIN *asclin, IfxAsclin_FrameMode mode);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1343  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1344  /** \brief Selects the RTS/CTS polarity
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1345   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1346   * \param rcpol RCPOL selection
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1347   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1348   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1349  IFX_INLINE void IfxAsclin_setRtsCtsPolarity(Ifx_ASCLIN *asclin, IfxAsclin_RtsCtsPolarity rcpol);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1350  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1351  /** \brief Selects the alternate input for Rx signal
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1352   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1353   * \param alti alternate input selection of Rx signal
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1354   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1355   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1356  IFX_INLINE void IfxAsclin_setRxInput(Ifx_ASCLIN *asclin, IfxAsclin_RxInputSelect alti);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1357  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1358  /** \brief Selects the slave polarity
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1359   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1360   * \param spol SPOL selection
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1361   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1362   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1363  IFX_INLINE void IfxAsclin_setSlavePolarity(Ifx_ASCLIN *asclin, IfxAsclin_SlavePolarity spol);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1364  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1365  /** \brief Configure the Module to Hard/Soft suspend mode.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1366   * Note: The api works only when the OCDS is enabled and in Supervisor Mode. When OCDS is disabled the OCS suspend control is ineffective.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1367   * \param asclin Pointer to ASCLIN module registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1368   * \param mode Module suspend mode
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1369   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1370   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1371  IFX_INLINE void IfxAsclin_setSuspendMode(Ifx_ASCLIN *asclin, IfxAsclin_SuspendMode mode);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1372  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1373  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1374  /*-------------------------Global Function Prototypes-------------------------*/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1375  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1376  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1377  /** \brief Set the bit timing
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1378   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1379   * \note this function required FA source and the PD frequency to be set to their final values
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1380   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1381   * \param baudrate Required baudrate
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1382   * \param oversampling The oversampling factor
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1383   * \param samplepoint The sample point position
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1384   * \param medianFilter Number of samples per bit (median filter)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1385   * \return TRUE if configuration was successfull
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1386   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1387  IFX_EXTERN boolean IfxAsclin_setBitTiming(Ifx_ASCLIN *asclin, float32 baudrate, IfxAsclin_OversamplingFactor oversampling, IfxAsclin_SamplePointPosition samplepoint, IfxAsclin_SamplesPerBit medianFilter);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1388  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1389  /** \} */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1390  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1391  /** \addtogroup IfxLld_Asclin_Std_External
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1392   * \{ */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1393  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1394  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1395  /*-------------------------Global Function Prototypes-------------------------*/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1396  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1397  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1398  /** \brief Disables the module
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1399   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1400   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1401   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1402  IFX_EXTERN void IfxAsclin_disableModule(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1403  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1404  /** \brief Enables the ASC error interrupt Flags
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1405   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1406   * \param parEnable parity error
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1407   * \param rfoEnable Rx FIFO overflow error
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1408   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1409   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1410  IFX_EXTERN void IfxAsclin_enableAscErrorFlags(Ifx_ASCLIN *asclin, boolean parEnable, boolean rfoEnable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1411  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1412  /** \brief Enables the module
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1413   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1414   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1415   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1416  IFX_EXTERN void IfxAsclin_enableModule(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1417  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1418  /** \brief Returns the SRC pointer for ERR
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1419   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1420   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1421  IFX_EXTERN volatile Ifx_SRC_SRCR *IfxAsclin_getSrcPointerEr(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1422  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1423  /** \brief Returns the  SRC pointer for Rx
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1424   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1425   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1426  IFX_EXTERN volatile Ifx_SRC_SRCR *IfxAsclin_getSrcPointerRx(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1427  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1428  /** \brief Returns the SRC pointer for Tx
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1429   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1430   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1431  IFX_EXTERN volatile Ifx_SRC_SRCR *IfxAsclin_getSrcPointerTx(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1432  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1433  /** \brief Reads data up to 16 bits
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1434   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1435   * \param data Array where the read data shall be stored
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1436   * \param count number of items to read
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1437   * \return number of items that could not be read
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1438   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1439  IFX_EXTERN uint32 IfxAsclin_read16(Ifx_ASCLIN *asclin, uint16 *data, uint32 count);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1440  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1441  /** \brief Reads data up to 32 bits
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1442   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1443   * \param data Array where the read data shall be stored
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1444   * \param count number of items to read
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1445   * \return number of items that could not be read
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1446   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1447  IFX_EXTERN uint32 IfxAsclin_read32(Ifx_ASCLIN *asclin, uint32 *data, uint32 count);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1448  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1449  /** \brief Reads data up to 8 bits
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1450   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1451   * \param data Array where the read data shall be stored
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1452   * \param count number of items to read
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1453   * \return number of items that could not be read
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1454   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1455  IFX_EXTERN uint32 IfxAsclin_read8(Ifx_ASCLIN *asclin, uint8 *data, uint32 count);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1456  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1457  /** \brief Sets the baudrate bit fields
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1458   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1459   * \param prescaler division ratio of the predivider
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1460   * \param numerator numerator of the fractional divider
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1461   * \param denominator denominator of the fractional divider
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1462   * \param oversampling division ratio of the baudrate postdivider
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1463   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1464   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1465  IFX_EXTERN void IfxAsclin_setBaudrateBitFields(Ifx_ASCLIN *asclin, uint16 prescaler, uint16 numerator, uint16 denominator, IfxAsclin_OversamplingFactor oversampling);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1466  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1467  /** \brief Sets the  clock source
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1468   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1469   * \param clockSource clock source selection
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1470   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1471   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1472  IFX_EXTERN void IfxAsclin_setClockSource(Ifx_ASCLIN *asclin, IfxAsclin_ClockSource clockSource);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1473  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1474  /** \brief Writes data up to 16 bits
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1475   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1476   * \param data Array of data to be send
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1477   * \param count number of items to be send
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1478   * \return the number of items that could not be send
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1479   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1480  IFX_EXTERN uint32 IfxAsclin_write16(Ifx_ASCLIN *asclin, uint16 *data, uint32 count);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1481  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1482  /** \brief Writes data up to 32 bits
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1483   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1484   * \param data Array of data to be send
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1485   * \param count number of items to be send
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1486   * \return the number of items that could not be send
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1487   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1488  IFX_EXTERN uint32 IfxAsclin_write32(Ifx_ASCLIN *asclin, uint32 *data, uint32 count);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1489  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1490  /** \brief Writes data up to 8 bits
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1491   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1492   * \param data Array of data to be send
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1493   * \param count number of items to be send
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1494   * \return the number of items that could not be send
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1495   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1496  IFX_EXTERN uint32 IfxAsclin_write8(Ifx_ASCLIN *asclin, uint8 *data, uint32 count);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1497  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1498  /** \} */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1499  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1500  /** \addtogroup IfxLld_Asclin_Std_IO
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1501   * \{ */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1502  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1503  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1504  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1505  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1506  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1507  /** \brief Initializes a CTS input
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1508   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1509   * Attention: the kernel clock has to be disabled whenever the input multiplexer is changed.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1510   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1511   * This can be done with IfxAsclin_setClockSource(asclinSFR, IfxAsclin_ClockSource_noClock);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1512   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1513   * After the function call, the current clock can be enabled again.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1514   * \param cts the CTS Pin which should be configured
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1515   * \param inputMode the pin input mode which should be configured
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1516   * \param padDriver the pad driver mode which should be configured
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1517   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1518   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1519  IFX_INLINE void IfxAsclin_initCtsPin(const IfxAsclin_Cts_In *cts, IfxPort_InputMode inputMode, IfxPort_PadDriver padDriver);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1520  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1521  /** \brief Initializes a RTS output
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1522   * \param rts the RTS Pin which should be configured
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1523   * \param outputMode the pin output mode which should be configured
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1524   * \param padDriver the pad driver mode which should be configured
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1525   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1526   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1527  IFX_INLINE void IfxAsclin_initRtsPin(const IfxAsclin_Rts_Out *rts, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1528  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1529  /** \brief Initializes a RX input
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1530   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1531   * Attention: the kernel clock has to be disabled whenever the input multiplexer is changed.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1532   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1533   * This can be done with IfxAsclin_setClockSource(asclinSFR, IfxAsclin_ClockSource_noClock);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1534   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1535   * After the function call, the current clock can be enabled again.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1536   * \param rx the RX Pin which should be configured
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1537   * \param inputMode the pin input mode which should be configured
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1538   * \param padDriver the pad driver mode which should be configured
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1539   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1540   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1541  IFX_INLINE void IfxAsclin_initRxPin(const IfxAsclin_Rx_In *rx, IfxPort_InputMode inputMode, IfxPort_PadDriver padDriver);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1542  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1543  /** \brief Initializes a SCLK output
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1544   * \param sclk the SCLK Pin which should be configured
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1545   * \param outputMode the pin output mode which should be configured
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1546   * \param padDriver the pad driver mode which should be configured
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1547   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1548   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1549  IFX_INLINE void IfxAsclin_initSclkPin(const IfxAsclin_Sclk_Out *sclk, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1550  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1551  /** \brief Initializes a SLSO output
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1552   * \param slso the SLSO Pin which should be configured
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1553   * \param outputMode the pin output mode which should be configured
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1554   * \param padDriver the pad driver mode which should be configured
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1555   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1556   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1557  IFX_INLINE void IfxAsclin_initSlsoPin(const IfxAsclin_Slso_Out *slso, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1558  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1559  /** \brief Initializes a TX output
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1560   * \param tx the TX Pin which should be configured
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1561   * \param outputMode the pin output mode which should be configured
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1562   * \param padDriver the pad driver mode which should be configured
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1563   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1564   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1565  IFX_INLINE void IfxAsclin_initTxPin(const IfxAsclin_Tx_Out *tx, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1566  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1567  /** \} */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1568  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1569  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1570  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1571  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1572  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1573  /**
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1574   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1575   * \return returns the value of RxDATA register
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1576   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1577  IFX_INLINE uint32 IfxAsclin_readRxData(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1578  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1579  /**
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1580   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1581   * \param data data to be written
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1582   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1583   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1584  IFX_INLINE void IfxAsclin_writeTxData(Ifx_ASCLIN *asclin, uint32 data);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1585  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1586  /** \brief Returns the status of all error flags
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1587   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1588   * \return status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1589   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1590  IFX_INLINE uint16 IfxAsclin_getAllErrorFlagsStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1591  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1592  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1593  /*---------------------Inline Function Implementations------------------------*/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1594  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1595  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1596  IFX_INLINE void IfxAsclin_clearAllFlags(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1597  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1598      asclin->FLAGSCLEAR.U = 0xFFFFFFFF;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1599  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1600  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1601  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1602  IFX_INLINE void IfxAsclin_clearBreakDetectedFlag(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1603  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1604      asclin->FLAGSCLEAR.B.BDC = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1605  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1606  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1607  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1608  IFX_INLINE void IfxAsclin_clearCollisionDetectionErrorFlag(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1609  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1610      asclin->FLAGSCLEAR.B.CEC = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1611  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1612  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1613  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1614  IFX_INLINE void IfxAsclin_clearFallingEdgeDetectedFlag(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1615  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1616      asclin->FLAGSCLEAR.B.FEDC = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1617  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1618  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1619  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1620  IFX_INLINE void IfxAsclin_clearFrameErrorFlag(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1621  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1622      asclin->FLAGSCLEAR.B.FEC = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1623  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1624  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1625  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1626  IFX_INLINE void IfxAsclin_clearHeaderTimeoutFlag(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1627  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1628      asclin->FLAGSCLEAR.B.HTC = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1629  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1630  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1631  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1632  IFX_INLINE void IfxAsclin_clearKernelResetStatus(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1633  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1634      asclin->KRSTCLR.B.CLR = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1635  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1636  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1637  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1638  IFX_INLINE void IfxAsclin_clearLinAutoBaudDetectionErrorFlag(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1639  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1640      asclin->FLAGSCLEAR.B.LAC = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1641  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1642  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1643  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1644  IFX_INLINE void IfxAsclin_clearLinChecksumErrorFlag(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1645  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1646      asclin->FLAGSCLEAR.B.LCC = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1647  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1648  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1649  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1650  IFX_INLINE void IfxAsclin_clearLinParityErrorFlag(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1651  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1652      asclin->FLAGSCLEAR.B.LPC = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1653  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1654  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1655  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1656  IFX_INLINE void IfxAsclin_clearParityErrorFlag(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1657  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1658      asclin->FLAGSCLEAR.B.PEC = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1659  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1660  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1661  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1662  IFX_INLINE void IfxAsclin_clearRaisingEdgeDetectedFlag(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1663  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1664      asclin->FLAGSCLEAR.B.REDC = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1665  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1666  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1667  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1668  IFX_INLINE void IfxAsclin_clearResponseTimeoutFlag(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1669  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1670      asclin->FLAGSCLEAR.B.RTC = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1671  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1672  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1673  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1674  IFX_INLINE void IfxAsclin_clearRxFifoFillLevelFlag(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1675  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1676      asclin->FLAGSCLEAR.B.RFLC = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1677  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1678  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1679  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1680  IFX_INLINE void IfxAsclin_clearRxFifoOverflowFlag(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1681  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1682      asclin->FLAGSCLEAR.B.RFOC = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1683  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1684  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1685  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1686  IFX_INLINE void IfxAsclin_clearRxFifoUnderflowFlag(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1687  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1688      asclin->FLAGSCLEAR.B.RFUC = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1689  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1690  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1691  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1692  IFX_INLINE void IfxAsclin_clearRxHeaderEndFlag(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1693  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1694      asclin->FLAGSCLEAR.B.RHC = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1695  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1696  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1697  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1698  IFX_INLINE void IfxAsclin_clearRxResponseEndFlag(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1699  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1700      asclin->FLAGSCLEAR.B.RRC = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1701  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1702  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1703  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1704  IFX_INLINE void IfxAsclin_clearTransmissionCompletedFlag(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1705  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1706      asclin->FLAGSCLEAR.B.TCC = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1707  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1708  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1709  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1710  IFX_INLINE void IfxAsclin_clearTxFifoFillLevelFlag(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1711  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1712      asclin->FLAGSCLEAR.B.TFLC = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1713  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1714  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1715  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1716  IFX_INLINE void IfxAsclin_clearTxFifoOverflowFlag(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1717  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1718      asclin->FLAGSCLEAR.B.TFOC = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1719  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1720  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1721  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1722  IFX_INLINE void IfxAsclin_clearTxHeaderEndFlag(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1723  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1724      asclin->FLAGSCLEAR.B.THC = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1725  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1726  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1727  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1728  IFX_INLINE void IfxAsclin_clearTxResponseEndFlag(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1729  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1730      asclin->FLAGSCLEAR.B.TRC = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1731  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1732  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1733  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1734  IFX_INLINE void IfxAsclin_disableAllFlags(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1735  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1736      asclin->FLAGSENABLE.U = 0x00000000;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1737  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1738  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1739  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1740  IFX_INLINE void IfxAsclin_enableAutoBaudrateDetection(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1741  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1742      asclin->LIN.CON.B.ABD = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1743  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1744  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1745  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1746  IFX_INLINE void IfxAsclin_enableBreakDetectedFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1747  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1748      asclin->FLAGSENABLE.B.BDE = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1749  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1750  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1751  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1752  IFX_INLINE void IfxAsclin_enableCollisionDetection(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1753  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1754      asclin->FRAMECON.B.CEN = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1755  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1756  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1757  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1758  IFX_INLINE void IfxAsclin_enableCollisionDetectionErrorFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1759  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1760      asclin->FLAGSENABLE.B.CEE = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1761  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1762  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1763  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1764  IFX_INLINE void IfxAsclin_enableCts(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1765  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1766      asclin->IOCR.B.CTSEN = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1767  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1768  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1769  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1770  IFX_INLINE void IfxAsclin_enableFallingEdgeDetectedFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1771  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1772      asclin->FLAGSENABLE.B.FEDE = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1773  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1774  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1775  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1776  IFX_INLINE void IfxAsclin_enableFrameErrorFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1777  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1778      asclin->FLAGSENABLE.B.FEE = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1779  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1780  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1781  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1782  IFX_INLINE void IfxAsclin_enableHardwareChecksum(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1783  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1784      asclin->LIN.CON.B.CSEN = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1785  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1786  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1787  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1788  IFX_INLINE void IfxAsclin_enableHeaderTimeoutFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1789  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1790      asclin->FLAGSENABLE.B.HTE = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1791  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1792  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1793  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1794  IFX_INLINE void IfxAsclin_enableLinAutoBaudDetectionErrorFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1795  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1796      asclin->FLAGSENABLE.B.ABE = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1797  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1798  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1799  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1800  IFX_INLINE void IfxAsclin_enableLinChecksumErrorFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1801  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1802      asclin->FLAGSENABLE.B.LCE = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1803  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1804  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1805  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1806  IFX_INLINE void IfxAsclin_enableLinParityErrorFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1807  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1808      asclin->FLAGSENABLE.B.LPE = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1809  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1810  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1811  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1812  IFX_INLINE void IfxAsclin_enableLoopBackMode(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1813  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1814      asclin->IOCR.B.LB = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1815  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1816  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1817  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1818  IFX_INLINE void IfxAsclin_enableParity(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1819  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1820      asclin->FRAMECON.B.PEN = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1821  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1822  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1823  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1824  IFX_INLINE void IfxAsclin_enableParityErrorFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1825  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1826      asclin->FLAGSENABLE.B.PEE = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1827  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1828  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1829  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1830  IFX_INLINE void IfxAsclin_enableRaisingEdgeDetectedFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1831  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1832      asclin->FLAGSENABLE.B.REDE = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1833  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1834  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1835  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1836  IFX_INLINE void IfxAsclin_enableResponseTimeoutFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1837  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1838      asclin->FLAGSENABLE.B.RTE = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1839  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1840  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1841  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1842  IFX_INLINE void IfxAsclin_enableRxFifoFillLevelFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1843  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1844      asclin->FLAGSENABLE.B.RFLE = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1845  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1846  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1847  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1848  IFX_INLINE void IfxAsclin_enableRxFifoInlet(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1849  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1850      asclin->RXFIFOCON.B.ENI = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1851  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1852  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1853  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1854  IFX_INLINE void IfxAsclin_enableRxFifoOverflowFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1855  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1856      asclin->FLAGSENABLE.B.RFOE = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1857  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1858  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1859  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1860  IFX_INLINE void IfxAsclin_enableRxFifoUnderflowFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1861  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1862      asclin->FLAGSENABLE.B.RFUE = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1863  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1864  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1865  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1866  IFX_INLINE void IfxAsclin_enableRxHeaderEndFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1867  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1868      asclin->FLAGSENABLE.B.RHE = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1869  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1870  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1871  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1872  IFX_INLINE void IfxAsclin_enableRxResponseEndFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1873  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1874      asclin->FLAGSENABLE.B.RRE = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1875  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1876  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1877  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1878  IFX_INLINE void IfxAsclin_enableTransmissionCompletedFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1879  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1880      asclin->FLAGSENABLE.B.TCE = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1881  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1882  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1883  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1884  IFX_INLINE void IfxAsclin_enableTxFifoFillLevelFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1885  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1886      asclin->FLAGSENABLE.B.TFLE = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1887  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1888  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1889  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1890  IFX_INLINE void IfxAsclin_enableTxFifoOutlet(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1891  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1892      asclin->TXFIFOCON.B.ENO = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1893  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1894  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1895  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1896  IFX_INLINE void IfxAsclin_enableTxFifoOverflowFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1897  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1898      asclin->FLAGSENABLE.B.TFOE = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1899  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1900  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1901  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1902  IFX_INLINE void IfxAsclin_enableTxHeaderEndFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1903  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1904      asclin->FLAGSENABLE.B.THE = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1905  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1906  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1907  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1908  IFX_INLINE void IfxAsclin_enableTxResponseEndFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1909  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1910      asclin->FLAGSENABLE.B.TRE = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1911  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1912  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1913  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1914  IFX_INLINE void IfxAsclin_flushRxFifo(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1915  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1916      asclin->RXFIFOCON.B.FLUSH = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1917  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1918  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1919  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1920  IFX_INLINE void IfxAsclin_flushTxFifo(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1921  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1922      asclin->TXFIFOCON.B.FLUSH = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1923  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1924  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1925  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1926  IFX_INLINE boolean IfxAsclin_getBreakDetectedFlagStatus(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1927  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1928      return asclin->FLAGS.B.BD;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1929  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1930  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1931  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1932  IFX_INLINE uint8 IfxAsclin_getClockSource(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1933  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1934      return asclin->CSR.B.CLKSEL;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1935  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1936  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1937  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1938  IFX_INLINE boolean IfxAsclin_getClockStatus(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1939  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1940      return asclin->CSR.B.CON;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1941  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1942  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1943  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1944  IFX_INLINE boolean IfxAsclin_getCollisionDetectionErrorFlagStatus(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1945  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1946      return asclin->FLAGS.B.CE;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1947  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1948  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1949  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1950  IFX_INLINE boolean IfxAsclin_getFallingEdgeDetectedFlagStatus(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1951  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1952      return asclin->FLAGS.B.FED;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1953  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1954  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1955  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1956  IFX_INLINE boolean IfxAsclin_getFrameErrorFlagStatus(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1957  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1958      return asclin->FLAGS.B.FE;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1959  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1960  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1961  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1962  IFX_INLINE boolean IfxAsclin_getHeaderTimeoutFlagStatus(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1963  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1964      return asclin->FLAGS.B.HT;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1965  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1966  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1967  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1968  IFX_INLINE boolean IfxAsclin_getKernelResetStatus(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1969  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1970      return asclin->KRST0.B.RSTSTAT;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1971  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1972  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1973  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1974  IFX_INLINE boolean IfxAsclin_getLinAutoBaudDetectionErrorFlagStatus(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1975  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1976      return asclin->FLAGS.B.LA;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1977  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1978  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1979  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1980  IFX_INLINE boolean IfxAsclin_getLinChecksumErrorFlagStatus(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1981  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1982      return asclin->FLAGS.B.LC;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1983  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1984  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1985  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1986  IFX_INLINE boolean IfxAsclin_getLinParityErrorFlagStatus(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1987  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1988      return asclin->FLAGS.B.LP;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1989  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1990  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1991  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1992  IFX_INLINE boolean IfxAsclin_getModuleStatus(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1993  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1994      return asclin->CLC.B.DISS;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1995  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1996  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1997  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1998  IFX_INLINE boolean IfxAsclin_getParityErrorFlagStatus(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1999  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2000      return asclin->FLAGS.B.PE;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2001  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2002  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2003  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2004  IFX_INLINE uint16 IfxAsclin_getPrescaler(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2005  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2006      return asclin->BITCON.B.PRESCALER + 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2007  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2008  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2009  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2010  IFX_INLINE boolean IfxAsclin_getRaisingEdgeDetectedFlagStatus(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2011  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2012      return asclin->FLAGS.B.RED;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2013  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2014  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2015  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2016  IFX_INLINE boolean IfxAsclin_getReceiveSignalStatus(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2017  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2018      return asclin->IOCR.B.RXM;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2019  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2020  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2021  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2022  IFX_INLINE boolean IfxAsclin_getResponseTimeoutFlagStatus(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2023  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2024      return asclin->FLAGS.B.RT;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2025  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2026  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2027  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2028  IFX_INLINE uint8 IfxAsclin_getRxFifoFillLevel(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2029  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2030      return asclin->RXFIFOCON.B.FILL;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2031  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2032  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2033  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2034  IFX_INLINE boolean IfxAsclin_getRxFifoFillLevelFlagStatus(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2035  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2036      return asclin->FLAGS.B.RFL;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2037  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2038  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2039  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2040  IFX_INLINE uint8 IfxAsclin_getRxFifoOutletWidth(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2041  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2042      return asclin->RXFIFOCON.B.OUTW;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2043  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2044  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2045  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2046  IFX_INLINE boolean IfxAsclin_getRxFifoOverflowFlagStatus(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2047  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2048      return asclin->FLAGS.B.RFO;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2049  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2050  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2051  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2052  IFX_INLINE boolean IfxAsclin_getRxFifoUnderflowFlagStatus(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2053  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2054      return asclin->FLAGS.B.RFU;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2055  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2056  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2057  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2058  IFX_INLINE boolean IfxAsclin_getRxHeaderEndFlagStatus(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2059  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2060      return asclin->FLAGS.B.RH;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2061  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2062  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2063  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2064  IFX_INLINE boolean IfxAsclin_getRxResponseEndFlagStatus(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2065  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2066      return asclin->FLAGS.B.RR;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2067  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2068  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2069  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2070  IFX_INLINE boolean IfxAsclin_getTransmissionCompletedFlagStatus(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2071  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2072      return asclin->FLAGS.B.TC;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2073  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2074  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2075  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2076  IFX_INLINE boolean IfxAsclin_getTransmitSignalStatus(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2077  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2078      return asclin->IOCR.B.TXM;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2079  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2080  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2081  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2082  IFX_INLINE uint8 IfxAsclin_getTxFifoFillLevel(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2083  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2084      return asclin->TXFIFOCON.B.FILL;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2085  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2086  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2087  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2088  IFX_INLINE boolean IfxAsclin_getTxFifoFillLevelFlagStatus(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2089  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2090      return asclin->FLAGS.B.TFL;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2091  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2092  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2093  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2094  IFX_INLINE uint8 IfxAsclin_getTxFifoInletWidth(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2095  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2096      return asclin->TXFIFOCON.B.INW;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2097  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2098  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2099  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2100  IFX_INLINE boolean IfxAsclin_getTxFifoOverflowFlagStatus(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2101  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2102      return asclin->FLAGS.B.TFO;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2103  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2104  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2105  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2106  IFX_INLINE boolean IfxAsclin_getTxHeaderEndFlagStatus(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2107  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2108      return asclin->FLAGS.B.TH;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2109  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2110  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2111  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2112  IFX_INLINE boolean IfxAsclin_getTxResponseEndFlagStatus(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2113  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2114      return asclin->FLAGS.B.TR;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2115  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2116  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2117  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2118  IFX_INLINE void IfxAsclin_initCtsPin(const IfxAsclin_Cts_In *cts, IfxPort_InputMode inputMode, IfxPort_PadDriver padDriver)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2119  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2120      if (cts->pin.port != NULL_PTR)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2121      {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2122          IfxPort_setPinModeInput(cts->pin.port, cts->pin.pinIndex, inputMode);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2123          IfxPort_setPinPadDriver(cts->pin.port, cts->pin.pinIndex, padDriver);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2124          IfxAsclin_enableCts(cts->module, TRUE);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2125          IfxAsclin_setCtsInput(cts->module, (IfxAsclin_CtsInputSelect)cts->select);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2126      }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2127  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2128  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2129  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2130  IFX_INLINE void IfxAsclin_initRtsPin(const IfxAsclin_Rts_Out *rts, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2131  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2132      IfxPort_setPinModeOutput(rts->pin.port, rts->pin.pinIndex, outputMode, rts->select);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2133      IfxPort_setPinPadDriver(rts->pin.port, rts->pin.pinIndex, padDriver);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2134  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2135  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2136  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2137  IFX_INLINE void IfxAsclin_initRxPin(const IfxAsclin_Rx_In *rx, IfxPort_InputMode inputMode, IfxPort_PadDriver padDriver)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2138  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2139      if (rx->pin.port != NULL_PTR)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2140      {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2141          IfxPort_setPinModeInput(rx->pin.port, rx->pin.pinIndex, inputMode);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2142          IfxPort_setPinPadDriver(rx->pin.port, rx->pin.pinIndex, padDriver);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2143          IfxAsclin_setRxInput(rx->module, (IfxAsclin_RxInputSelect)rx->select);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2144      }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2145  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2146  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2147  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2148  IFX_INLINE void IfxAsclin_initSclkPin(const IfxAsclin_Sclk_Out *sclk, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2149  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2150      IfxPort_setPinModeOutput(sclk->pin.port, sclk->pin.pinIndex, outputMode, sclk->select);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2151      IfxPort_setPinPadDriver(sclk->pin.port, sclk->pin.pinIndex, padDriver);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2152  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2153  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2154  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2155  IFX_INLINE void IfxAsclin_initSlsoPin(const IfxAsclin_Slso_Out *slso, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2156  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2157      IfxPort_setPinModeOutput(slso->pin.port, slso->pin.pinIndex, outputMode, slso->select);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2158      IfxPort_setPinPadDriver(slso->pin.port, slso->pin.pinIndex, padDriver);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2159  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2160  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2161  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2162  IFX_INLINE void IfxAsclin_initTxPin(const IfxAsclin_Tx_Out *tx, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2163  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2164      IfxPort_setPinModeOutput(tx->pin.port, tx->pin.pinIndex, outputMode, tx->select);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2165      IfxPort_setPinPadDriver(tx->pin.port, tx->pin.pinIndex, padDriver);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2166  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2167  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2168  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2169  IFX_INLINE boolean IfxAsclin_isModuleSuspended(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2170  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2171      Ifx_ASCLIN_OCS ocs;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2172  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2173      // read the status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2174      ocs.U = asclin->OCS.U;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2175  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2176      // return the status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2177      return ocs.B.SUSSTA;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2178  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2179  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2180  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2181  IFX_INLINE uint32 IfxAsclin_readRxData(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2182  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2183      return asclin->RXDATA.U;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2184  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2185  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2186  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2187  IFX_INLINE void IfxAsclin_setBrdLowerlimt(Ifx_ASCLIN *asclin, uint8 limit)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2188  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2189      asclin->BRD.B.LOWERLIMIT = limit;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2190  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2191  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2192  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2193  IFX_INLINE void IfxAsclin_setBrdUpperlimt(Ifx_ASCLIN *asclin, uint8 limit)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2194  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2195      asclin->BRD.B.UPPERLIMIT = limit;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2196  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2197  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2198  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2199  IFX_INLINE void IfxAsclin_setChecksumInjection(Ifx_ASCLIN *asclin, IfxAsclin_ChecksumInjection csi)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2200  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2201      asclin->LIN.CON.B.CSI = csi;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2202  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2203  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2204  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2205  IFX_INLINE void IfxAsclin_setChecksumMode(Ifx_ASCLIN *asclin, IfxAsclin_Checksum mode)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2206  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2207      asclin->DATCON.B.CSM = mode;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2208  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2209  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2210  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2211  IFX_INLINE void IfxAsclin_setClockPolarity(Ifx_ASCLIN *asclin, IfxAsclin_ClockPolarity cpol)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2212  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2213      asclin->IOCR.B.CPOL = cpol;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2214  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2215  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2216  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2217  IFX_INLINE void IfxAsclin_setCtsInput(Ifx_ASCLIN *asclin, IfxAsclin_CtsInputSelect ctsi)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2218  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2219      asclin->IOCR.B.CTS = ctsi;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2220  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2221  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2222  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2223  IFX_INLINE void IfxAsclin_setDataLength(Ifx_ASCLIN *asclin, IfxAsclin_DataLength length)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2224  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2225      asclin->DATCON.B.DATLEN = length;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2226  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2227  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2228  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2229  IFX_INLINE void IfxAsclin_setDenominator(Ifx_ASCLIN *asclin, uint16 denominator)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2230  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2231      asclin->BRG.B.DENOMINATOR = denominator;
	insert	d15,d15,d10,#0,#12
	st.h	[a15]32,d15
.L414:

; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2232  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2233  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2234  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2235  IFX_INLINE void IfxAsclin_setDisableModuleRequest(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2236  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2237      asclin->CLC.B.DISR = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2238  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2239  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2240  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2241  IFX_INLINE void IfxAsclin_setEnableModuleRequest(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2242  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2243      asclin->CLC.B.DISR = 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2244  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2245  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2246  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2247  IFX_INLINE void IfxAsclin_setFilterDepth(Ifx_ASCLIN *asclin, uint8 depth)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2248  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2249      asclin->IOCR.B.DEPTH = __minu(depth, 63);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2250  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2251  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2252  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2253  IFX_INLINE void IfxAsclin_setFrameMode(Ifx_ASCLIN *asclin, IfxAsclin_FrameMode mode)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2254  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2255      asclin->FRAMECON.B.MODE = mode;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2256  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2257  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2258  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2259  IFX_INLINE void IfxAsclin_setHeaderResponseSelect(Ifx_ASCLIN *asclin, IfxAsclin_HeaderResponseSelect type)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2260  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2261      asclin->DATCON.B.HO = type;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2262  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2263  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2264  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2265  IFX_INLINE void IfxAsclin_setIdleDelay(Ifx_ASCLIN *asclin, IfxAsclin_IdleDelay delay)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2266  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2267      asclin->FRAMECON.B.IDLE = delay;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2268  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2269  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2270  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2271  IFX_INLINE void IfxAsclin_setKernelResetOne(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2272  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2273      asclin->KRST1.B.RST = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2274  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2275  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2276  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2277  IFX_INLINE void IfxAsclin_setKernelResetZero(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2278  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2279      asclin->KRST0.B.RST = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2280  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2281  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2282  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2283  IFX_INLINE void IfxAsclin_setLeadDelay(Ifx_ASCLIN *asclin, IfxAsclin_LeadDelay delay)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2284  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2285      asclin->FRAMECON.B.LEAD = delay;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2286  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2287  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2288  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2289  IFX_INLINE void IfxAsclin_setLinBreakLength(Ifx_ASCLIN *asclin, uint8 length)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2290  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2291      asclin->LIN.BTIMER.B.BREAK = length;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2292  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2293  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2294  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2295  IFX_INLINE void IfxAsclin_setLinHeaderTimeout(Ifx_ASCLIN *asclin, uint8 timeout)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2296  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2297      asclin->LIN.HTIMER.B.HEADER = timeout;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2298  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2299  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2300  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2301  IFX_INLINE void IfxAsclin_setLinMode(Ifx_ASCLIN *asclin, IfxAsclin_LinMode mode)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2302  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2303      asclin->LIN.CON.B.MS = mode;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2304  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2305  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2306  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2307  IFX_INLINE void IfxAsclin_setLinResponseTimeoutMode(Ifx_ASCLIN *asclin, IfxAsclin_LinResponseTimeoutMode mode)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2308  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2309      asclin->DATCON.B.RM = mode;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2310  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2311  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2312  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2313  IFX_INLINE void IfxAsclin_setLinResponseTimeoutThreshold(Ifx_ASCLIN *asclin, uint16 threshold)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2314  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2315      asclin->DATCON.B.RESPONSE = __minu(threshold, 256);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2316  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2317  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2318  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2319  IFX_INLINE void IfxAsclin_setNumerator(Ifx_ASCLIN *asclin, uint16 numerator)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2320  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2321      asclin->BRG.B.NUMERATOR = numerator;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2322  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2323  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2324  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2325  IFX_INLINE void IfxAsclin_setOversampling(Ifx_ASCLIN *asclin, IfxAsclin_OversamplingFactor ovsFactor)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2326  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2327      asclin->BITCON.B.OVERSAMPLING = ovsFactor;
	ld.bu	d15,[a15]22
.L479:
	insert	d15,d15,d11,#0,#4
	st.b	[a15]22,d15
.L416:
	j	IfxAsclin_setClockSource
.L377:
	
__IfxAsclin_setBaudrateBitFields_function_end:
	.size	IfxAsclin_setBaudrateBitFields,__IfxAsclin_setBaudrateBitFields_function_end-IfxAsclin_setBaudrateBitFields
.L208:
	; End of function
	
	.sdecl	'.text.IfxAsclin..cocofun_2',code,cluster('.cocofun_2')
	.sect	'.text.IfxAsclin..cocofun_2'
	.align	2
; Function .cocofun_2
.L104:
.cocofun_2:	.type	func
; Function body .cocofun_2, coco_iter:0

; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	     1  /**
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	     2   * \file IfxAsclin.h
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	     3   * \brief ASCLIN  basic functionality
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	     4   * \ingroup IfxLld_Asclin
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	     5   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	     6   * \version iLLD_1_0_1_11_0
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	     7   * \copyright Copyright (c) 2018 Infineon Technologies AG. All rights reserved.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	     8   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	     9   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    10   *                                 IMPORTANT NOTICE
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    11   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    12   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    13   * Use of this file is subject to the terms of use agreed between (i) you or 
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    14   * the company in which ordinary course of business you are acting and (ii) 
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    15   * Infineon Technologies AG or its licensees. If and as long as no such 
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    16   * terms of use are agreed, use of this file is subject to following:
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    17  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    18  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    19   * Boost Software License - Version 1.0 - August 17th, 2003
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    20  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    21   * Permission is hereby granted, free of charge, to any person or 
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    22   * organization obtaining a copy of the software and accompanying 
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    23   * documentation covered by this license (the "Software") to use, reproduce,
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    24   * display, distribute, execute, and transmit the Software, and to prepare
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    25   * derivative works of the Software, and to permit third-parties to whom the 
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    26   * Software is furnished to do so, all subject to the following:
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    27  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    28   * The copyright notices in the Software and this entire statement, including
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    29   * the above license grant, this restriction and the following disclaimer, must
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    30   * be included in all copies of the Software, in whole or in part, and all
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    31   * derivative works of the Software, unless such copies or derivative works are
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    32   * solely in the form of machine-executable object code generated by a source
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    33   * language processor.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    34  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    35   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR 
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    36   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    37   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    38   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE 
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    39   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    40   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    41   * DEALINGS IN THE SOFTWARE.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    42  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    43   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    44   * \defgroup IfxLld_Asclin_Std_Enumerations Enumerations
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    45   * \ingroup IfxLld_Asclin_Std
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    46   * \defgroup IfxLld_Asclin_Std_Operative Operative Functions
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    47   * \ingroup IfxLld_Asclin_Std
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    48   * \defgroup IfxLld_Asclin_Std_Utility Utility Functions
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    49   * \ingroup IfxLld_Asclin_Std
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    50   * \defgroup IfxLld_Asclin_Std_Configuration Configuration Functions
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    51   * \ingroup IfxLld_Asclin_Std
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    52   * \defgroup IfxLld_Asclin_Std_External External Functions
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    53   * \ingroup IfxLld_Asclin_Std
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    54   * \defgroup IfxLld_Asclin_Std_IO IO Pin Configuration Functions
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    55   * \ingroup IfxLld_Asclin_Std
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    56   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    57  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    58  #ifndef IFXASCLIN_H
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    59  #define IFXASCLIN_H 1
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    60  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    61  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    62  /*----------------------------------Includes----------------------------------*/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    63  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    64  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    65  #include "_Impl/IfxAsclin_cfg.h"
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    66  #include "Scu/Std/IfxScuCcu.h"
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    67  #include "Scu/Std/IfxScuWdt.h"
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    68  #include "Cpu/Std/IfxCpu_Intrinsics.h"
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    69  #include "IfxAsclin_reg.h"
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    70  #include "Src/Std/IfxSrc.h"
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    71  #include "_PinMap/IfxAsclin_PinMap.h"
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    72  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    73  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    74  /*--------------------------------Enumerations--------------------------------*/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    75  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    76  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    77  /** \addtogroup IfxLld_Asclin_Std_Enumerations
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    78   * \{ */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    79  /** \brief Defines if the classic or the enhanced checksum will be calculated by the checksum block.\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    80   * Definition in Ifx_ASCLIN.DATCON.B.CSM
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    81   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    82  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    83  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    84      IfxAsclin_Checksum_classic  = 0, /**< \brief classic checksum */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    85      IfxAsclin_Checksum_enhanced = 1  /**< \brief enhanced checksum */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    86  } IfxAsclin_Checksum;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    87  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    88  /** \brief Defines if the received checksum byte is written into the RXFifo or not.\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    89   * Definition in Ifx_ASCLIN.LIN.CON.B.CSI
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    90   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    91  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    92  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    93      IfxAsclin_ChecksumInjection_notWritten = 0,  /**< \brief checksum byte is not written */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    94      IfxAsclin_ChecksumInjection_written    = 1   /**< \brief checksum byte is written */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    95  } IfxAsclin_ChecksumInjection;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    96  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    97  /** \brief CPOL defines the idle level of the clock signal in the SPI mode.\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    98   * Idle level is the level outside the data transmission time intervals.\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    99   * Definition in Ifx_ASCLIN.IOCR.B.CPOL
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   100   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   101  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   102  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   103      IfxAsclin_ClockPolarity_idleLow  = 0, /**< \brief idle low */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   104      IfxAsclin_ClockPolarity_idleHigh = 1  /**< \brief idle high */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   105  } IfxAsclin_ClockPolarity;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   106  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   107  /** \brief Selection of clock source\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   108   * Definition in Ifx_ASCLIN.CSR.B.CLKSEL
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   109   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   110  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   111  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   112      IfxAsclin_ClockSource_noClock         = 0,  /**< \brief no clock will be supplied */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   113      IfxAsclin_ClockSource_kernelClock     = 1,  /**< \brief f clc will be supplied */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   114      IfxAsclin_ClockSource_oscillatorClock = 2,  /**< \brief XTAL oscillator clock foso0 will be supplied */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   115      IfxAsclin_ClockSource_flexRayClock    = 4,  /**< \brief f eray will be supplied */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   116      IfxAsclin_ClockSource_ascFastClock    = 8,  /**< \brief f asclinf wiil be supplied */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   117      IfxAsclin_ClockSource_ascSlowClock    = 16  /**< \brief f asclins will be supplied */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   118  } IfxAsclin_ClockSource;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   119  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   120  /** \brief CTS input pin selection\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   121   * Definition in Ifx_ASCLIN.IOCR.B.CTS
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   122   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   123  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   124  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   125      IfxAsclin_CtsInputSelect_0,     /**< \brief CTS input pin 0  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   126      IfxAsclin_CtsInputSelect_1,     /**< \brief CTS input pin 1  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   127      IfxAsclin_CtsInputSelect_2,     /**< \brief CTS input pin 2  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   128      IfxAsclin_CtsInputSelect_3      /**< \brief CTS input pin 3  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   129  } IfxAsclin_CtsInputSelect;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   130  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   131  /** \brief Number of bits per transfer\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   132   * Definition in Ifx_ASCLIN.FRAMECON.B.DATALEN
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   133   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   134  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   135  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   136      IfxAsclin_DataLength_1 = 0,      /**< \brief number of bits per transfer 0  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   137      IfxAsclin_DataLength_2,          /**< \brief number of bits per transfer 1  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   138      IfxAsclin_DataLength_3,          /**< \brief number of bits per transfer 2  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   139      IfxAsclin_DataLength_4,          /**< \brief number of bits per transfer 3  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   140      IfxAsclin_DataLength_5,          /**< \brief number of bits per transfer 4  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   141      IfxAsclin_DataLength_6,          /**< \brief number of bits per transfer 5  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   142      IfxAsclin_DataLength_7,          /**< \brief number of bits per transfer 6  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   143      IfxAsclin_DataLength_8,          /**< \brief number of bits per transfer 7  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   144      IfxAsclin_DataLength_9,          /**< \brief number of bits per transfer 8  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   145      IfxAsclin_DataLength_10,         /**< \brief number of bits per transfer 9  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   146      IfxAsclin_DataLength_11,         /**< \brief number of bits per transfer 10  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   147      IfxAsclin_DataLength_12,         /**< \brief number of bits per transfer 11  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   148      IfxAsclin_DataLength_13,         /**< \brief number of bits per transfer 12  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   149      IfxAsclin_DataLength_14,         /**< \brief number of bits per transfer 13  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   150      IfxAsclin_DataLength_15,         /**< \brief number of bits per transfer 14  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   151      IfxAsclin_DataLength_16          /**< \brief number of bits per transfer 15  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   152  } IfxAsclin_DataLength;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   153  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   154  /** \brief Defines the basic operating mode of the module. Changing the mode must be done by switching first to initialize mode, and then to the other mode.\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   155   * Definition in Ifx_ASCLIN.FRAMECON.B.MODE
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   156   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   157  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   158  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   159      IfxAsclin_FrameMode_initialise = 0,  /**< \brief initialise mode */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   160      IfxAsclin_FrameMode_asc        = 1,  /**< \brief asc mode */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   161      IfxAsclin_FrameMode_spi        = 2,  /**< \brief spi mode */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   162      IfxAsclin_FrameMode_lin        = 3   /**< \brief lin mode */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   163  } IfxAsclin_FrameMode;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   164  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   165  /** \brief Defines if LIN frame shall consist of a header and response or of a header only.\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   166   * Definition in Ifx_ASCLIN.DATCON.B.HO
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   167   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   168  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   169  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   170      IfxAsclin_HeaderResponseSelect_headerAndResponse = 0,  /**< \brief header and response expected */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   171      IfxAsclin_HeaderResponseSelect_headerOnly        = 1   /**< \brief header only expected */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   172  } IfxAsclin_HeaderResponseSelect;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   173  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   174  /** \brief Defines the duration of the IDLE delay in bit times.\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   175   * SPI mode: this is the idle time between the frames.\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   176   * ASC and LIN mode: this is the pause inserted between transmission of bytes.\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   177   * Definition in Ifx_ASCLIN.FRAMECON.B.IDLE
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   178   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   179  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   180  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   181      IfxAsclin_IdleDelay_0,     /**< \brief idle delay in 0 bit times  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   182      IfxAsclin_IdleDelay_1,     /**< \brief idle delay in 1 bit times  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   183      IfxAsclin_IdleDelay_2,     /**< \brief idle delay in 2 bit times  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   184      IfxAsclin_IdleDelay_3,     /**< \brief idle delay in 3 bit times  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   185      IfxAsclin_IdleDelay_4,     /**< \brief idle delay in 4 bit times  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   186      IfxAsclin_IdleDelay_5,     /**< \brief idle delay in 5 bit times  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   187      IfxAsclin_IdleDelay_6,     /**< \brief idle delay in 6 bit times  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   188      IfxAsclin_IdleDelay_7      /**< \brief idle delay in 7 bit times  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   189  } IfxAsclin_IdleDelay;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   190  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   191  /** \brief Defines the leading delay in bit times in SPI mode. ASC mode: not applicable.\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   192   * LIN mode: delay between the end of the break and the start of the sync character.\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   193   * Definition in Ifx_ASCLIN.FRAMECON.B.LEAD
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   194   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   195  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   196  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   197      IfxAsclin_LeadDelay_0,     /**< \brief lead delay in 0 bit times  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   198      IfxAsclin_LeadDelay_1,     /**< \brief lead delay in 1 bit times  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   199      IfxAsclin_LeadDelay_2,     /**< \brief lead delay in 2 bit times  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   200      IfxAsclin_LeadDelay_3,     /**< \brief lead delay in 3 bit times  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   201      IfxAsclin_LeadDelay_4,     /**< \brief lead delay in 4 bit times  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   202      IfxAsclin_LeadDelay_5,     /**< \brief lead delay in 5 bit times  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   203      IfxAsclin_LeadDelay_6,     /**< \brief lead delay in 6 bit times  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   204      IfxAsclin_LeadDelay_7      /**< \brief lead delay in 7 bit times  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   205  } IfxAsclin_LeadDelay;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   206  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   207  /** \brief Configures if the module in LIN mode operates as master or slave\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   208   * Definition in Ifx_ASCLIN.LIN.CON.B.MS
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   209   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   210  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   211  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   212      IfxAsclin_LinMode_slave  = 0, /**< \brief operates in slave mode */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   213      IfxAsclin_LinMode_master = 1  /**< \brief operates in master mode */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   214  } IfxAsclin_LinMode;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   215  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   216  /** \brief Defines the timeout threshold of RESPOSE bit is for LIN response timeout or LIN frame timeout.\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   217   * Definition in Ifx_ASCLIN.DATCON.B.RM
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   218   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   219  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   220  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   221      IfxAsclin_LinResponseTimeoutMode_frameTimeout    = 0, /**< \brief timeout threshold is for frame */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   222      IfxAsclin_LinResponseTimeoutMode_responseTimeout = 1  /**< \brief timeout threshold is for reponse */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   223  } IfxAsclin_LinResponseTimeoutMode;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   224  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   225  /** \brief Defines the bit length in ticks in the range of 1 to 16. The lengths of 1 to 3 are not allowed\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   226   * Definition in Ifx_ASCLIN.BITCON.B.OVERSAMPLING
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   227   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   228  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   229  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   230      IfxAsclin_OversamplingFactor_4  = 3,   /**< \brief oversampling factor 4 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   231      IfxAsclin_OversamplingFactor_5  = 4,   /**< \brief oversampling factor 5 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   232      IfxAsclin_OversamplingFactor_6  = 5,   /**< \brief oversampling factor 6 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   233      IfxAsclin_OversamplingFactor_7  = 6,   /**< \brief oversampling factor 7 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   234      IfxAsclin_OversamplingFactor_8  = 7,   /**< \brief oversampling factor 8 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   235      IfxAsclin_OversamplingFactor_9  = 8,   /**< \brief oversampling factor 9 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   236      IfxAsclin_OversamplingFactor_10 = 9,   /**< \brief oversampling factor 10 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   237      IfxAsclin_OversamplingFactor_11 = 10,  /**< \brief oversampling factor 11 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   238      IfxAsclin_OversamplingFactor_12 = 11,  /**< \brief oversampling factor 12 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   239      IfxAsclin_OversamplingFactor_13 = 12,  /**< \brief oversampling factor 13 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   240      IfxAsclin_OversamplingFactor_14 = 13,  /**< \brief oversampling factor 14 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   241      IfxAsclin_OversamplingFactor_15 = 14,  /**< \brief oversampling factor 15 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   242      IfxAsclin_OversamplingFactor_16 = 15   /**< \brief oversampling factor 16 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   243  } IfxAsclin_OversamplingFactor;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   244  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   245  /** \brief Type of parity bit attached to data bits\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   246   * Definition in Ifx_ASCLIN.FRAMECON.B.ODD
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   247   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   248  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   249  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   250      IfxAsclin_ParityType_even = 0,  /**< \brief even parity */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   251      IfxAsclin_ParityType_odd  = 1   /**< \brief odd parity */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   252  } IfxAsclin_ParityType;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   253  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   254  /** \brief Receive buffer mode\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   255   * Definition in Ifx_ASCLIN.RXFIFOCON.B.BUF
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   256   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   257  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   258  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   259      IfxAsclin_ReceiveBufferMode_rxFifo   = 0, /**< \brief RxFIFO mode */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   260      IfxAsclin_ReceiveBufferMode_rxBuffer = 1  /**< \brief single stage Rx buffer */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   261  } IfxAsclin_ReceiveBufferMode;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   262  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   263  /** \brief Polarity of the RTS and CTS signals\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   264   * Definition in Ifx_ASCLIN.IOCR.B.RCPOL
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   265   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   266  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   267  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   268      IfxAsclin_RtsCtsPolarity_activeHigh = 0,  /**< \brief ready/clear are active-high */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   269      IfxAsclin_RtsCtsPolarity_activeLow  = 1   /**< \brief ready/clear are active-low */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   270  } IfxAsclin_RtsCtsPolarity;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   271  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   272  /** \brief Defines the filling level that triggers a drain (RX) interrupt or DMA access\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   273   * Definition in Ifx_ASCLIN.RXFIFOCON.B.INTLEVEL
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   274   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   275  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   276  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   277      IfxAsclin_RxFifoInterruptLevel_1,     /**< \brief RX FIFO level 1  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   278      IfxAsclin_RxFifoInterruptLevel_2,     /**< \brief RX FIFO level 2  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   279      IfxAsclin_RxFifoInterruptLevel_3,     /**< \brief RX FIFO level 3  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   280      IfxAsclin_RxFifoInterruptLevel_4,     /**< \brief RX FIFO level 4  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   281      IfxAsclin_RxFifoInterruptLevel_5,     /**< \brief RX FIFO level 5  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   282      IfxAsclin_RxFifoInterruptLevel_6,     /**< \brief RX FIFO level 6  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   283      IfxAsclin_RxFifoInterruptLevel_7,     /**< \brief RX FIFO level 7  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   284      IfxAsclin_RxFifoInterruptLevel_8,     /**< \brief RX FIFO level 8  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   285      IfxAsclin_RxFifoInterruptLevel_9,     /**< \brief RX FIFO level 9  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   286      IfxAsclin_RxFifoInterruptLevel_10,    /**< \brief RX FIFO level 10  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   287      IfxAsclin_RxFifoInterruptLevel_11,    /**< \brief RX FIFO level 11  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   288      IfxAsclin_RxFifoInterruptLevel_12,    /**< \brief RX FIFO level 12  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   289      IfxAsclin_RxFifoInterruptLevel_13,    /**< \brief RX FIFO level 13  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   290      IfxAsclin_RxFifoInterruptLevel_14,    /**< \brief RX FIFO level 14  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   291      IfxAsclin_RxFifoInterruptLevel_15,    /**< \brief RX FIFO level 15  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   292      IfxAsclin_RxFifoInterruptLevel_16     /**< \brief RX FIFO level 16  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   293  } IfxAsclin_RxFifoInterruptLevel;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   294  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   295  /** \brief Defines the number of bytes read from the Rx FIFO with one FPI bus read\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   296   * Definition in Ifx_ASCLIN.RXFIFOCON.B.OUTW
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   297   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   298  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   299  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   300      IfxAsclin_RxFifoOutletWidth_0,     /**< \brief number of bytes 0  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   301      IfxAsclin_RxFifoOutletWidth_1,     /**< \brief number of bytes 1  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   302      IfxAsclin_RxFifoOutletWidth_2,     /**< \brief number of bytes 2  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   303      IfxAsclin_RxFifoOutletWidth_3      /**< \brief number of bytes 3  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   304  } IfxAsclin_RxFifoOutletWidth;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   305  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   306  /** \brief Alternate input selection for Rx signal.\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   307   * Definition in Ifx_ASCLIN.IOCR.B.ALTI
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   308   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   309  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   310  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   311      IfxAsclin_RxInputSelect_0,     /**< \brief alternate input selection 0  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   312      IfxAsclin_RxInputSelect_1,     /**< \brief alternate input selection 1  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   313      IfxAsclin_RxInputSelect_2,     /**< \brief alternate input selection 2  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   314      IfxAsclin_RxInputSelect_3,     /**< \brief alternate input selection 3  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   315      IfxAsclin_RxInputSelect_4,     /**< \brief alternate input selection 4  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   316      IfxAsclin_RxInputSelect_5,     /**< \brief alternate input selection 5  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   317      IfxAsclin_RxInputSelect_6,     /**< \brief alternate input selection 6  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   318      IfxAsclin_RxInputSelect_7      /**< \brief alternate input selection 7  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   319  } IfxAsclin_RxInputSelect;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   320  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   321  /** \brief Sample point position\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   322   * Definition in Ifx_ASCLIN.BITCON.B.SAMPLEPOINT
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   323   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   324  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   325  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   326      IfxAsclin_SamplePointPosition_1  = 1,   /**< \brief sample point position at 1 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   327      IfxAsclin_SamplePointPosition_2  = 2,   /**< \brief sample point position at 2 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   328      IfxAsclin_SamplePointPosition_3  = 3,   /**< \brief sample point position at 3 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   329      IfxAsclin_SamplePointPosition_4  = 4,   /**< \brief sample point position at 4 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   330      IfxAsclin_SamplePointPosition_5  = 5,   /**< \brief sample point position at 5 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   331      IfxAsclin_SamplePointPosition_6  = 6,   /**< \brief sample point position at 6 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   332      IfxAsclin_SamplePointPosition_7  = 7,   /**< \brief sample point position at 7 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   333      IfxAsclin_SamplePointPosition_8  = 8,   /**< \brief sample point position at 8 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   334      IfxAsclin_SamplePointPosition_9  = 9,   /**< \brief sample point position at 9 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   335      IfxAsclin_SamplePointPosition_10 = 10,  /**< \brief sample point position at 10 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   336      IfxAsclin_SamplePointPosition_11 = 11,  /**< \brief sample point position at 11 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   337      IfxAsclin_SamplePointPosition_12 = 12,  /**< \brief sample point position at 12 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   338      IfxAsclin_SamplePointPosition_13 = 13,  /**< \brief sample point position at 13 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   339      IfxAsclin_SamplePointPosition_14 = 14,  /**< \brief sample point position at 14 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   340      IfxAsclin_SamplePointPosition_15 = 15   /**< \brief sample point position at 15 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   341  } IfxAsclin_SamplePointPosition;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   342  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   343  /** \brief Number of samples per bit, sample mode/medianfilter\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   344   * Definition in Ifx_ASCLIN.BITCON.B.SM
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   345   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   346  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   347  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   348      IfxAsclin_SamplesPerBit_one   = 0, /**< \brief one sample per bit */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   349      IfxAsclin_SamplesPerBit_three = 1  /**< \brief three samples per bit */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   350  } IfxAsclin_SamplesPerBit;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   351  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   352  /** \brief SPI mode: defines the shift direction of the shift register.\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   353   * ASC and LIN mode: should be set to 0.\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   354   * Definition in Ifx_ASCLIN.FRAMECON.B.MSB
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   355   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   356  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   357  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   358      IfxAsclin_ShiftDirection_lsbFirst = 0,  /**< \brief LSB first */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   359      IfxAsclin_ShiftDirection_msbFirst = 1   /**< \brief MSB first */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   360  } IfxAsclin_ShiftDirection;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   361  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   362  /** \brief Defines the idle level of the SLSO signal, which is the level.\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   363   * Outside the data transmission, leading and trailing time intervals.\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   364   * Definition in Ifx_ASCLIN.IOCR.B.SPOL
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   365   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   366  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   367  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   368      IfxAsclin_SlavePolarity_idleLow  = 0, /**< \brief idle low */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   369      IfxAsclin_SlavePolarity_idlehigh = 1  /**< \brief idle high */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   370  } IfxAsclin_SlavePolarity;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   371  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   372  /** \brief Enable/disable the sensitivity of the module to sleep signal\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   373   * Definition in Ifx_ASCLIN.CLC.B.EDIS
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   374   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   375  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   376  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   377      IfxAsclin_SleepMode_enable  = 0, /**< \brief enables sleep mode */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   378      IfxAsclin_SleepMode_disable = 1  /**< \brief disables sleep mode */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   379  } IfxAsclin_SleepMode;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   380  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   381  /** \brief Error status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   382   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   383  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   384  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   385      IfxAsclin_Status_configurationError = 0,  /**< \brief Configuration error */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   386      IfxAsclin_Status_noError            = 1   /**< \brief No error */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   387  } IfxAsclin_Status;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   388  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   389  /** \brief ASC and LIN mode: number of stop bits (0 is not allowed), SPI mode: trailing delay.\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   390   * Definition in Ifx_ASCLIN.FRAMECON.B.STOP
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   391   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   392  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   393  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   394      IfxAsclin_StopBit_0,     /**< \brief number of stop bits 0  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   395      IfxAsclin_StopBit_1,     /**< \brief number of stop bits 1  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   396      IfxAsclin_StopBit_2,     /**< \brief number of stop bits 2  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   397      IfxAsclin_StopBit_3,     /**< \brief number of stop bits 3  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   398      IfxAsclin_StopBit_4,     /**< \brief number of stop bits 4  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   399      IfxAsclin_StopBit_5,     /**< \brief number of stop bits 5  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   400      IfxAsclin_StopBit_6,     /**< \brief number of stop bits 6  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   401      IfxAsclin_StopBit_7      /**< \brief number of stop bits 7  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   402  } IfxAsclin_StopBit;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   403  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   404  /** \brief OCDS Suspend Control (OCDS.SUS)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   405   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   406  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   407  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   408      IfxAsclin_SuspendMode_none = 0,  /**< \brief No suspend */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   409      IfxAsclin_SuspendMode_hard = 1,  /**< \brief Hard Suspend */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   410      IfxAsclin_SuspendMode_soft = 2   /**< \brief Soft Suspend */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   411  } IfxAsclin_SuspendMode;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   412  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   413  /** \brief Defines the number of bytes written to the Tx FIFO with one FPI bus write\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   414   * Definition in Ifx_ASCLIN.TXFIFOCON.B.INW
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   415   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   416  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   417  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   418      IfxAsclin_TxFifoInletWidth_0,     /**< \brief number of bytes 0  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   419      IfxAsclin_TxFifoInletWidth_1,     /**< \brief number of bytes 1  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   420      IfxAsclin_TxFifoInletWidth_2,     /**< \brief number of bytes 2  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   421      IfxAsclin_TxFifoInletWidth_3      /**< \brief number of bytes 3  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   422  } IfxAsclin_TxFifoInletWidth;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   423  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   424  /** \brief Defines the filling level that triggers a refill (TX) interrupt or DMA access\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   425   * Definition in Ifx_ASCLIN.TXFIFOCON.B.INTLEVEL
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   426   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   427  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   428  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   429      IfxAsclin_TxFifoInterruptLevel_0,     /**< \brief TX FIFO level 0  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   430      IfxAsclin_TxFifoInterruptLevel_1,     /**< \brief TX FIFO level 1  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   431      IfxAsclin_TxFifoInterruptLevel_2,     /**< \brief TX FIFO level 2  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   432      IfxAsclin_TxFifoInterruptLevel_3,     /**< \brief TX FIFO level 3  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   433      IfxAsclin_TxFifoInterruptLevel_4,     /**< \brief TX FIFO level 4  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   434      IfxAsclin_TxFifoInterruptLevel_5,     /**< \brief TX FIFO level 5  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   435      IfxAsclin_TxFifoInterruptLevel_6,     /**< \brief TX FIFO level 6  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   436      IfxAsclin_TxFifoInterruptLevel_7,     /**< \brief TX FIFO level 7  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   437      IfxAsclin_TxFifoInterruptLevel_8,     /**< \brief TX FIFO level 8  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   438      IfxAsclin_TxFifoInterruptLevel_9,     /**< \brief TX FIFO level 9  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   439      IfxAsclin_TxFifoInterruptLevel_10,    /**< \brief TX FIFO level 10  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   440      IfxAsclin_TxFifoInterruptLevel_11,    /**< \brief TX FIFO level 11  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   441      IfxAsclin_TxFifoInterruptLevel_12,    /**< \brief TX FIFO level 12  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   442      IfxAsclin_TxFifoInterruptLevel_13,    /**< \brief TX FIFO level 13  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   443      IfxAsclin_TxFifoInterruptLevel_14,    /**< \brief TX FIFO level 14  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   444      IfxAsclin_TxFifoInterruptLevel_15     /**< \brief TX FIFO level 15  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   445  } IfxAsclin_TxFifoInterruptLevel;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   446  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   447  /** \} */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   448  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   449  /** \addtogroup IfxLld_Asclin_Std_Operative
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   450   * \{ */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   451  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   452  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   453  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   454  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   455  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   456  /** \brief clears all the flags
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   457   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   458   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   459   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   460  IFX_INLINE void IfxAsclin_clearAllFlags(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   461  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   462  /** \brief Clears the break detected flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   463   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   464   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   465   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   466  IFX_INLINE void IfxAsclin_clearBreakDetectedFlag(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   467  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   468  /** \brief Clears the collision detection error flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   469   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   470   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   471   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   472  IFX_INLINE void IfxAsclin_clearCollisionDetectionErrorFlag(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   473  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   474  /** \brief Clears the falling edge detected flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   475   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   476   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   477   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   478  IFX_INLINE void IfxAsclin_clearFallingEdgeDetectedFlag(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   479  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   480  /** \brief Clears the frame error flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   481   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   482   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   483   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   484  IFX_INLINE void IfxAsclin_clearFrameErrorFlag(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   485  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   486  /** \brief Clears the header timeout flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   487   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   488   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   489   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   490  IFX_INLINE void IfxAsclin_clearHeaderTimeoutFlag(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   491  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   492  /** \brief Clears the kernel reset status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   493   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   494   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   495   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   496  IFX_INLINE void IfxAsclin_clearKernelResetStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   497  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   498  /** \brief Clears the auto baudrate detection error flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   499   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   500   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   501   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   502  IFX_INLINE void IfxAsclin_clearLinAutoBaudDetectionErrorFlag(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   503  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   504  /** \brief Clears the LIN checksum error flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   505   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   506   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   507   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   508  IFX_INLINE void IfxAsclin_clearLinChecksumErrorFlag(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   509  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   510  /** \brief Clears the LIN parity error flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   511   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   512   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   513   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   514  IFX_INLINE void IfxAsclin_clearLinParityErrorFlag(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   515  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   516  /** \brief Clears the parity error flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   517   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   518   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   519   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   520  IFX_INLINE void IfxAsclin_clearParityErrorFlag(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   521  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   522  /** \brief Clears the raising edge detected flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   523   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   524   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   525   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   526  IFX_INLINE void IfxAsclin_clearRaisingEdgeDetectedFlag(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   527  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   528  /** \brief Clears the response timeout flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   529   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   530   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   531   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   532  IFX_INLINE void IfxAsclin_clearResponseTimeoutFlag(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   533  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   534  /** \brief Clears the Rx FIFO level flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   535   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   536   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   537   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   538  IFX_INLINE void IfxAsclin_clearRxFifoFillLevelFlag(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   539  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   540  /** \brief Clears the Rx FIFO overflow flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   541   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   542   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   543   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   544  IFX_INLINE void IfxAsclin_clearRxFifoOverflowFlag(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   545  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   546  /** \brief Clears the Rx FIFO underflow flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   547   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   548   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   549   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   550  IFX_INLINE void IfxAsclin_clearRxFifoUnderflowFlag(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   551  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   552  /** \brief Clears the receive header end flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   553   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   554   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   555   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   556  IFX_INLINE void IfxAsclin_clearRxHeaderEndFlag(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   557  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   558  /** \brief Clears the receive response end flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   559   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   560   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   561   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   562  IFX_INLINE void IfxAsclin_clearRxResponseEndFlag(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   563  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   564  /** \brief Clears the transmission pending flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   565   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   566   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   567   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   568  IFX_INLINE void IfxAsclin_clearTransmissionCompletedFlag(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   569  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   570  /** \brief Clears the Tx FIFO level flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   571   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   572   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   573   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   574  IFX_INLINE void IfxAsclin_clearTxFifoFillLevelFlag(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   575  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   576  /** \brief Clears the Tx FIFO overflow flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   577   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   578   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   579   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   580  IFX_INLINE void IfxAsclin_clearTxFifoOverflowFlag(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   581  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   582  /** \brief Clears the transmit header end flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   583   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   584   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   585   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   586  IFX_INLINE void IfxAsclin_clearTxHeaderEndFlag(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   587  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   588  /** \brief Clears the transmit response end flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   589   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   590   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   591   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   592  IFX_INLINE void IfxAsclin_clearTxResponseEndFlag(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   593  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   594  /** \brief Flushes (empties) the Rx FIFO
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   595   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   596   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   597   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   598  IFX_INLINE void IfxAsclin_flushRxFifo(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   599  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   600  /** \brief Flushes (empties) the Tx FIFO
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   601   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   602   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   603   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   604  IFX_INLINE void IfxAsclin_flushTxFifo(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   605  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   606  /** \brief Sets the baudrate detection's lower limit
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   607   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   608   * \param limit value of the lower limit
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   609   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   610   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   611  IFX_INLINE void IfxAsclin_setBrdLowerlimt(Ifx_ASCLIN *asclin, uint8 limit);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   612  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   613  /** \brief Sets the baudrate detection's upper limit
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   614   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   615   * \param limit value of the upper limit
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   616   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   617   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   618  IFX_INLINE void IfxAsclin_setBrdUpperlimt(Ifx_ASCLIN *asclin, uint8 limit);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   619  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   620  /** \brief Sets the checksum injection
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   621   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   622   * \param csi checksum injection selection (not written / written)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   623   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   624   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   625  IFX_INLINE void IfxAsclin_setChecksumInjection(Ifx_ASCLIN *asclin, IfxAsclin_ChecksumInjection csi);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   626  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   627  /** \brief Sets the checksum mode
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   628   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   629   * \param mode checksum mode selection (classic / enhanced)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   630   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   631   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   632  IFX_INLINE void IfxAsclin_setChecksumMode(Ifx_ASCLIN *asclin, IfxAsclin_Checksum mode);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   633  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   634  /** \brief Sets the data length (number of bits per transfer)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   635   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   636   * \param length data length selection
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   637   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   638   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   639  IFX_INLINE void IfxAsclin_setDataLength(Ifx_ASCLIN *asclin, IfxAsclin_DataLength length);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   640  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   641  /** \brief Sets the denominator of the fractional divider
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   642   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   643   * \param denominator value of the denominator
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   644   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   645   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   646  IFX_INLINE void IfxAsclin_setDenominator(Ifx_ASCLIN *asclin, uint16 denominator);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   647  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   648  /** \brief Sets the disable module request
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   649   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   650   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   651   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   652  IFX_INLINE void IfxAsclin_setDisableModuleRequest(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   653  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   654  /** \brief Sets the enable module request
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   655   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   656   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   657   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   658  IFX_INLINE void IfxAsclin_setEnableModuleRequest(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   659  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   660  /** \brief Sets digital glitch filter depth
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   661   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   662   * \param depth digital glitch filter depth selection (1 to 63)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   663   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   664   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   665  IFX_INLINE void IfxAsclin_setFilterDepth(Ifx_ASCLIN *asclin, uint8 depth);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   666  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   667  /** \brief Sets the header response selection
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   668   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   669   * \param type type of selection (header and response or header only)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   670   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   671   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   672  IFX_INLINE void IfxAsclin_setHeaderResponseSelect(Ifx_ASCLIN *asclin, IfxAsclin_HeaderResponseSelect type);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   673  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   674  /** \brief Sets the idle delay
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   675   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   676   * \param delay idle delay selection
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   677   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   678   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   679  IFX_INLINE void IfxAsclin_setIdleDelay(Ifx_ASCLIN *asclin, IfxAsclin_IdleDelay delay);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   680  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   681  /** \brief Sets the kernal reset of the KRST1
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   682   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   683   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   684   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   685  IFX_INLINE void IfxAsclin_setKernelResetOne(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   686  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   687  /** \brief Sets the kernel reset of the KRST0
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   688   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   689   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   690   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   691  IFX_INLINE void IfxAsclin_setKernelResetZero(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   692  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   693  /** \brief Sets the lead delay
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   694   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   695   * \param delay lead delay selection
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   696   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   697   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   698  IFX_INLINE void IfxAsclin_setLeadDelay(Ifx_ASCLIN *asclin, IfxAsclin_LeadDelay delay);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   699  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   700  /** \brief Sets the LIN break length
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   701   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   702   * \param length value of the break length
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   703   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   704   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   705  IFX_INLINE void IfxAsclin_setLinBreakLength(Ifx_ASCLIN *asclin, uint8 length);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   706  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   707  /** \brief Sets the LIN header timeout
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   708   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   709   * \param timeout value of the header timeout
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   710   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   711   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   712  IFX_INLINE void IfxAsclin_setLinHeaderTimeout(Ifx_ASCLIN *asclin, uint8 timeout);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   713  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   714  /** \brief Sets the LIN mode of operation
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   715   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   716   * \param mode mode selection (slave / master)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   717   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   718   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   719  IFX_INLINE void IfxAsclin_setLinMode(Ifx_ASCLIN *asclin, IfxAsclin_LinMode mode);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   720  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   721  /** \brief Sets the LIN response timeout mode
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   722   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   723   * \param mode LIN response timeout mode selection
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   724   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   725   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   726  IFX_INLINE void IfxAsclin_setLinResponseTimeoutMode(Ifx_ASCLIN *asclin, IfxAsclin_LinResponseTimeoutMode mode);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   727  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   728  /** \brief Sets the LIN response timeout threshold
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   729   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   730   * \param threshold value of the tomeout threshold (1 to 256 bit times)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   731   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   732   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   733  IFX_INLINE void IfxAsclin_setLinResponseTimeoutThreshold(Ifx_ASCLIN *asclin, uint16 threshold);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   734  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   735  /** \brief Sets the numerator of the fractional divider
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   736   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   737   * \param numerator value of the numerator
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   738   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   739   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   740  IFX_INLINE void IfxAsclin_setNumerator(Ifx_ASCLIN *asclin, uint16 numerator);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   741  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   742  /** \brief Sets the division ratio of the baudrate post divider
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   743   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   744   * \param ovsFactor value of oversampling factor
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   745   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   746   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   747  IFX_INLINE void IfxAsclin_setOversampling(Ifx_ASCLIN *asclin, IfxAsclin_OversamplingFactor ovsFactor);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   748  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   749  /** \brief Sets the parity type
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   750   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   751   * \param type parity type selction (even / odd)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   752   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   753   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   754  IFX_INLINE void IfxAsclin_setParityType(Ifx_ASCLIN *asclin, IfxAsclin_ParityType type);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   755  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   756  /** \brief Sets the division ratio of the predivider (prescaler)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   757   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   758   * \param prescaler value of prescaler
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   759   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   760   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   761  IFX_INLINE void IfxAsclin_setPrescaler(Ifx_ASCLIN *asclin, uint16 prescaler);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   762  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   763  /** \brief Sets the receive buffer mode
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   764   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   765   * \param mode receive buffer mode selection (Rx FIFO or single stage Rx buffer)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   766   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   767   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   768  IFX_INLINE void IfxAsclin_setRxBufferMode(Ifx_ASCLIN *asclin, IfxAsclin_ReceiveBufferMode mode);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   769  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   770  /** \brief Sets the Tx FIFO interrupt level
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   771   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   772   * \param level interrupt level selection
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   773   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   774   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   775  IFX_INLINE void IfxAsclin_setRxFifoInterruptLevel(Ifx_ASCLIN *asclin, IfxAsclin_RxFifoInterruptLevel level);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   776  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   777  /** \brief Sets the receive FIFO outlet width
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   778   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   779   * \param width number of bytes read to the Rx FIFO with one FPI bus read
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   780   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   781   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   782  IFX_INLINE void IfxAsclin_setRxFifoOutletWidth(Ifx_ASCLIN *asclin, IfxAsclin_RxFifoOutletWidth width);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   783  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   784  /** \brief Sets the sample mode (number of samples per bit / median filter)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   785   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   786   * \param medianFilter value of the median filter
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   787   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   788   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   789  IFX_INLINE void IfxAsclin_setSampleMode(Ifx_ASCLIN *asclin, IfxAsclin_SamplesPerBit medianFilter);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   790  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   791  /** \brief Sets the sampling point position
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   792   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   793   * \param spPosition sample point position selection
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   794   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   795   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   796  IFX_INLINE void IfxAsclin_setSamplePointPosition(Ifx_ASCLIN *asclin, IfxAsclin_SamplePointPosition spPosition);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   797  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   798  /** \brief Sets the shift direction
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   799   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   800   * \param dir shift direction selection (LSB / MSB first)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   801   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   802   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   803  IFX_INLINE void IfxAsclin_setShiftDirection(Ifx_ASCLIN *asclin, IfxAsclin_ShiftDirection dir);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   804  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   805  /** \brief Sets the number of stop bits
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   806   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   807   * \param stopBit number of stop bits selection
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   808   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   809   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   810  IFX_INLINE void IfxAsclin_setStopBit(Ifx_ASCLIN *asclin, IfxAsclin_StopBit stopBit);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   811  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   812  /** \brief Sets the transmit header request flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   813   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   814   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   815   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   816  IFX_INLINE void IfxAsclin_setTransmitHeaderRequestFlag(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   817  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   818  /** \brief Sets the transmit response request flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   819   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   820   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   821   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   822  IFX_INLINE void IfxAsclin_setTransmitResponseRequestFlag(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   823  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   824  /** \brief Sets the transmission wake request flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   825   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   826   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   827   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   828  IFX_INLINE void IfxAsclin_setTransmitWakeRequestFlag(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   829  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   830  /** \brief Sets the transmit FIFO inlet width
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   831   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   832   * \param width number of bytes written to the Tx FIFO with one FPI bus write
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   833   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   834   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   835  IFX_INLINE void IfxAsclin_setTxFifoInletWidth(Ifx_ASCLIN *asclin, IfxAsclin_TxFifoInletWidth width);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   836  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   837  /** \brief Sets the Tx FIFO interrupt level
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   838   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   839   * \param level interrupt level selection
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   840   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   841   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   842  IFX_INLINE void IfxAsclin_setTxFifoInterruptLevel(Ifx_ASCLIN *asclin, IfxAsclin_TxFifoInterruptLevel level);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   843  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   844  /** \} */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   845  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   846  /** \addtogroup IfxLld_Asclin_Std_Utility
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   847   * \{ */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   848  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   849  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   850  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   851  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   852  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   853  /** \brief Returns the break detected flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   854   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   855   * \return break detected flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   856   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   857  IFX_INLINE boolean IfxAsclin_getBreakDetectedFlagStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   858  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   859  /** \brief Returns the clock source
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   860   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   861   * \return clock source
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   862   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   863  IFX_INLINE uint8 IfxAsclin_getClockSource(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   864  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   865  /** \brief Returns the clock status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   866   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   867   * \return clock status (off / on)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   868   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   869  IFX_INLINE boolean IfxAsclin_getClockStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   870  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   871  /** \brief Returns the collision detection error flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   872   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   873   * \return collision detection error flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   874   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   875  IFX_INLINE boolean IfxAsclin_getCollisionDetectionErrorFlagStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   876  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   877  /** \brief Returns  the falling edge detected flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   878   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   879   * \return falling edge detected flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   880   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   881  IFX_INLINE boolean IfxAsclin_getFallingEdgeDetectedFlagStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   882  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   883  /** \brief Returns the frame error flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   884   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   885   * \return frame error flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   886   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   887  IFX_INLINE boolean IfxAsclin_getFrameErrorFlagStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   888  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   889  /** \brief Returns the header timeout flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   890   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   891   * \return header timeout flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   892   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   893  IFX_INLINE boolean IfxAsclin_getHeaderTimeoutFlagStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   894  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   895  /** \brief Returns the kernel reset status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   896   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   897   * \return kernel reset status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   898   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   899  IFX_INLINE boolean IfxAsclin_getKernelResetStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   900  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   901  /** \brief Returns the LIN auto baudrate detection error flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   902   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   903   * \return LIN auto baudrate detection error flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   904   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   905  IFX_INLINE boolean IfxAsclin_getLinAutoBaudDetectionErrorFlagStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   906  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   907  /** \brief Returns the LIN checksum error flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   908   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   909   * \return LIN checksum error flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   910   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   911  IFX_INLINE boolean IfxAsclin_getLinChecksumErrorFlagStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   912  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   913  /** \brief Returns the LIN parity error flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   914   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   915   * \return LIN parity error flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   916   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   917  IFX_INLINE boolean IfxAsclin_getLinParityErrorFlagStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   918  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   919  /** \brief Returns the module status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   920   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   921   * \return module status (enabled / disabled)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   922   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   923  IFX_INLINE boolean IfxAsclin_getModuleStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   924  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   925  /** \brief Returns the parity error flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   926   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   927   * \return parity error flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   928   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   929  IFX_INLINE boolean IfxAsclin_getParityErrorFlagStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   930  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   931  /** \brief Returns the division ratio of the predivider (prescaler)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   932   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   933   * \return value of prescaler
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   934   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   935  IFX_INLINE uint16 IfxAsclin_getPrescaler(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   936  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   937  /** \brief Returns the raising edge detected flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   938   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   939   * \return raising edge detected flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   940   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   941  IFX_INLINE boolean IfxAsclin_getRaisingEdgeDetectedFlagStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   942  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   943  /** \brief Returns the received signal status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   944   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   945   * \return received signal status (0 is low & 1 is high)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   946   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   947  IFX_INLINE boolean IfxAsclin_getReceiveSignalStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   948  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   949  /** \brief Returns the response timeout flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   950   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   951   * \return response timeout flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   952   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   953  IFX_INLINE boolean IfxAsclin_getResponseTimeoutFlagStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   954  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   955  /** \brief Returns the current filling level of Tx FIFO
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   956   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   957   * \return current filling level of Rx FIFO
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   958   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   959  IFX_INLINE uint8 IfxAsclin_getRxFifoFillLevel(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   960  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   961  /** \brief Returns the Rx FIFO level flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   962   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   963   * \return Rx FIFO level flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   964   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   965  IFX_INLINE boolean IfxAsclin_getRxFifoFillLevelFlagStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   966  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   967  /** \brief Returns the receive FIFO inlet width
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   968   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   969   * \return number of bytes read to the Rx FIFO with one FPI bus read
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   970   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   971  IFX_INLINE uint8 IfxAsclin_getRxFifoOutletWidth(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   972  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   973  /** \brief Returns the Rx FIFO overflow flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   974   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   975   * \return Rx FIFO overflow flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   976   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   977  IFX_INLINE boolean IfxAsclin_getRxFifoOverflowFlagStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   978  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   979  /** \brief Returns the Rx FIFO underflow flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   980   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   981   * \return Rx FIFO underflow flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   982   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   983  IFX_INLINE boolean IfxAsclin_getRxFifoUnderflowFlagStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   984  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   985  /** \brief Returns the receive header end flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   986   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   987   * \return receive header end flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   988   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   989  IFX_INLINE boolean IfxAsclin_getRxHeaderEndFlagStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   990  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   991  /** \brief Returns the receive response end flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   992   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   993   * \return receive response end flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   994   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   995  IFX_INLINE boolean IfxAsclin_getRxResponseEndFlagStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   996  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   997  /** \brief Returns the transmission pending flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   998   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   999   * \return transmission pending flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1000   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1001  IFX_INLINE boolean IfxAsclin_getTransmissionCompletedFlagStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1002  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1003  /** \brief Returns the transmit signal status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1004   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1005   * \return transmit signal status (0 is low & 1 is high)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1006   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1007  IFX_INLINE boolean IfxAsclin_getTransmitSignalStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1008  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1009  /** \brief Returns the current filling level of Tx FIFO
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1010   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1011   * \return current filling level of Tx FIFO
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1012   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1013  IFX_INLINE uint8 IfxAsclin_getTxFifoFillLevel(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1014  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1015  /** \brief Returns the Tx FIFO level flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1016   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1017   * \return Tx FIFO level flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1018   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1019  IFX_INLINE boolean IfxAsclin_getTxFifoFillLevelFlagStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1020  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1021  /** \brief Returns the transmit FIFO inlet width
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1022   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1023   * \return number of bytes written to the Tx FIFO with one FPI bus write
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1024   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1025  IFX_INLINE uint8 IfxAsclin_getTxFifoInletWidth(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1026  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1027  /** \brief Returns the Tx FIFO overflow flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1028   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1029   * \return Tx FIFO overflow flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1030   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1031  IFX_INLINE boolean IfxAsclin_getTxFifoOverflowFlagStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1032  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1033  /** \brief Returns the transmit header end flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1034   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1035   * \return transmit header end flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1036   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1037  IFX_INLINE boolean IfxAsclin_getTxHeaderEndFlagStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1038  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1039  /** \brief Returns the transmit response end flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1040   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1041   * \return transmit response end flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1042   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1043  IFX_INLINE boolean IfxAsclin_getTxResponseEndFlagStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1044  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1045  /** \brief Sets the sensitivity of the module to sleep signal
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1046   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1047   * \param mode mode selection (enable / disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1048   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1049   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1050  IFX_INLINE void IfxAsclin_setSleepMode(Ifx_ASCLIN *asclin, IfxAsclin_SleepMode mode);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1051  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1052  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1053  /*-------------------------Global Function Prototypes-------------------------*/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1054  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1055  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1056  /** \brief API to get the address for ASCLIN HW module register memory map
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1057   * \param asclin Resource index of the ASCLIN
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1058   * \return ASCLIN module register address
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1059   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1060  IFX_EXTERN Ifx_ASCLIN *IfxAsclin_getAddress(IfxAsclin_Index asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1061  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1062  /** \brief Returns the ASCLIN module FA frequency in Hz
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1063   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1064   * \return Returns the ASCLIN module FA frequency in Hz
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1065   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1066  IFX_EXTERN float32 IfxAsclin_getFaFrequency(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1067  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1068  /** \brief API to get the resource index of the ASCLIN specified.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1069   * \return asclin resource index
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1070   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1071  IFX_EXTERN IfxAsclin_Index IfxAsclin_getIndex(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1072  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1073  /** \brief Returns the OVS frequency
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1074   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1075   * \return Returns the ASCLIN module OVS frequency in Hz
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1076   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1077  IFX_EXTERN float32 IfxAsclin_getOvsFrequency(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1078  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1079  /** \brief Returns the PD frequency
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1080   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1081   * \return Returns the ASCLIN module PD frequency in Hz
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1082   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1083  IFX_EXTERN float32 IfxAsclin_getPdFrequency(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1084  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1085  /** \brief Returns the SHIFT frequency
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1086   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1087   * \return Returns the ASCLIN module SHIFT frequency in Hz
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1088   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1089  IFX_EXTERN float32 IfxAsclin_getShiftFrequency(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1090  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1091  /** \brief resets Asclin kernel
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1092   * \param asclin pointer to ASCLIN resgisters
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1093   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1094   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1095  IFX_EXTERN void IfxAsclin_resetModule(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1096  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1097  /** \} */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1098  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1099  /** \addtogroup IfxLld_Asclin_Std_Configuration
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1100   * \{ */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1101  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1102  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1103  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1104  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1105  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1106  /** \brief disables all flags
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1107   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1108   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1109   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1110  IFX_INLINE void IfxAsclin_disableAllFlags(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1111  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1112  /** \brief Enables/disables the auto baudrate detection
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1113   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1114   * \param enable choice (enable / disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1115   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1116   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1117  IFX_INLINE void IfxAsclin_enableAutoBaudrateDetection(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1118  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1119  /** \brief Enables/disables break detected flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1120   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1121   * \param enable choice (enable / disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1122   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1123   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1124  IFX_INLINE void IfxAsclin_enableBreakDetectedFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1125  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1126  /** \brief Enables/disables the collision detection
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1127   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1128   * \param enable choice (enable/disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1129   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1130   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1131  IFX_INLINE void IfxAsclin_enableCollisionDetection(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1132  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1133  /** \brief Enables/disables LIN collision detection error flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1134   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1135   * \param enable choice (enable / disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1136   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1137   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1138  IFX_INLINE void IfxAsclin_enableCollisionDetectionErrorFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1139  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1140  /** \brief Enables/disables CTS
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1141   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1142   * \param enable choice (enable/disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1143   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1144   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1145  IFX_INLINE void IfxAsclin_enableCts(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1146  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1147  /** \brief Enables/disables falling edge detected flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1148   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1149   * \param enable choice (enable / disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1150   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1151   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1152  IFX_INLINE void IfxAsclin_enableFallingEdgeDetectedFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1153  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1154  /** \brief Enables/disables frame error flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1155   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1156   * \param enable choice (enable / disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1157   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1158   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1159  IFX_INLINE void IfxAsclin_enableFrameErrorFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1160  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1161  /** \brief Enables/disables the hardware checksum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1162   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1163   * \param enable choice (enable / disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1164   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1165   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1166  IFX_INLINE void IfxAsclin_enableHardwareChecksum(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1167  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1168  /** \brief Enables/disables header timeout flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1169   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1170   * \param enable choice (enable / disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1171   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1172   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1173  IFX_INLINE void IfxAsclin_enableHeaderTimeoutFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1174  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1175  /** \brief Enables/disables LIN auto baudrate detection error flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1176   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1177   * \param enable choice (enable / disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1178   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1179   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1180  IFX_INLINE void IfxAsclin_enableLinAutoBaudDetectionErrorFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1181  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1182  /** \brief Enables/disables LIN checksum error flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1183   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1184   * \param enable choice (enable / disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1185   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1186   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1187  IFX_INLINE void IfxAsclin_enableLinChecksumErrorFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1188  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1189  /** \brief Enables/disables LIN parity error flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1190   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1191   * \param enable choice (enable / disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1192   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1193   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1194  IFX_INLINE void IfxAsclin_enableLinParityErrorFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1195  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1196  /** \brief Enables/disables the loop back mode
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1197   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1198   * \param enable choice (enable/disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1199   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1200   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1201  IFX_INLINE void IfxAsclin_enableLoopBackMode(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1202  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1203  /** \brief Enables/disables the parity bit attachment to tha data bits
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1204   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1205   * \param enable choice (enable/disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1206   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1207   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1208  IFX_INLINE void IfxAsclin_enableParity(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1209  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1210  /** \brief Enables/disables parity error flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1211   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1212   * \param enable choice (enable / disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1213   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1214   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1215  IFX_INLINE void IfxAsclin_enableParityErrorFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1216  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1217  /** \brief Enables/disables raising edge detected flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1218   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1219   * \param enable choice (enable / disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1220   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1221   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1222  IFX_INLINE void IfxAsclin_enableRaisingEdgeDetectedFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1223  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1224  /** \brief Enables/disables response timeout flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1225   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1226   * \param enable choice (enable / disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1227   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1228   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1229  IFX_INLINE void IfxAsclin_enableResponseTimeoutFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1230  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1231  /** \brief Enables/disables Rx FIFO level flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1232   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1233   * \param enable choice (enable / disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1234   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1235   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1236  IFX_INLINE void IfxAsclin_enableRxFifoFillLevelFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1237  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1238  /** \brief Enables/disables the receive FIFO outlet to allow filling of Rx FIFO through shift register
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1239   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1240   * \param enable choice (enable/disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1241   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1242   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1243  IFX_INLINE void IfxAsclin_enableRxFifoInlet(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1244  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1245  /** \brief Enables/disables Rx FIFO overflow flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1246   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1247   * \param enable choice (enable / disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1248   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1249   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1250  IFX_INLINE void IfxAsclin_enableRxFifoOverflowFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1251  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1252  /** \brief Enables/disables Rx FIFO underflow flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1253   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1254   * \param enable choice (enable / disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1255   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1256   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1257  IFX_INLINE void IfxAsclin_enableRxFifoUnderflowFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1258  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1259  /** \brief Enables/disables receive header end flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1260   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1261   * \param enable choice (enable / disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1262   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1263   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1264  IFX_INLINE void IfxAsclin_enableRxHeaderEndFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1265  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1266  /** \brief Enables/disables receive response end flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1267   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1268   * \param enable choice (enable / disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1269   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1270   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1271  IFX_INLINE void IfxAsclin_enableRxResponseEndFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1272  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1273  /** \brief Enables/disables transmission completed flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1274   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1275   * \param enable choice (enable / disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1276   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1277   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1278  IFX_INLINE void IfxAsclin_enableTransmissionCompletedFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1279  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1280  /** \brief Enables/disables Tx FIFO level flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1281   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1282   * \param enable choice (enable / disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1283   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1284   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1285  IFX_INLINE void IfxAsclin_enableTxFifoFillLevelFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1286  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1287  /** \brief Enables/disables the transmit FIFO outlet to allow transmission
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1288   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1289   * \param enable choice (enable/disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1290   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1291   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1292  IFX_INLINE void IfxAsclin_enableTxFifoOutlet(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1293  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1294  /** \brief Enables/disables Tx FIFO overflow flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1295   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1296   * \param enable choice (enable / disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1297   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1298   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1299  IFX_INLINE void IfxAsclin_enableTxFifoOverflowFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1300  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1301  /** \brief Enables/disables transmit header end flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1302   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1303   * \param enable choice (enable / disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1304   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1305   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1306  IFX_INLINE void IfxAsclin_enableTxHeaderEndFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1307  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1308  /** \brief Enables/disables transmit response end flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1309   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1310   * \param enable choice (enable / disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1311   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1312   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1313  IFX_INLINE void IfxAsclin_enableTxResponseEndFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1314  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1315  /** \brief Returns the module's suspend state.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1316   * TRUE :if module is suspended.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1317   * FALSE:if module is not yet suspended.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1318   * \param asclin Pointer to ASCLIN module registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1319   * \return Suspend status (TRUE / FALSE)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1320   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1321  IFX_INLINE boolean IfxAsclin_isModuleSuspended(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1322  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1323  /** \brief Selects the clock polarity
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1324   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1325   * \param cpol CPOL selection
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1326   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1327   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1328  IFX_INLINE void IfxAsclin_setClockPolarity(Ifx_ASCLIN *asclin, IfxAsclin_ClockPolarity cpol);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1329  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1330  /** \brief Selects the CTS input pin
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1331   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1332   * \param ctsi CTS input pin selection
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1333   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1334   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1335  IFX_INLINE void IfxAsclin_setCtsInput(Ifx_ASCLIN *asclin, IfxAsclin_CtsInputSelect ctsi);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1336  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1337  /** \brief Selects the module's mode of operation
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1338   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1339   * \param mode mode selction
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1340   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1341   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1342  IFX_INLINE void IfxAsclin_setFrameMode(Ifx_ASCLIN *asclin, IfxAsclin_FrameMode mode);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1343  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1344  /** \brief Selects the RTS/CTS polarity
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1345   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1346   * \param rcpol RCPOL selection
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1347   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1348   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1349  IFX_INLINE void IfxAsclin_setRtsCtsPolarity(Ifx_ASCLIN *asclin, IfxAsclin_RtsCtsPolarity rcpol);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1350  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1351  /** \brief Selects the alternate input for Rx signal
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1352   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1353   * \param alti alternate input selection of Rx signal
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1354   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1355   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1356  IFX_INLINE void IfxAsclin_setRxInput(Ifx_ASCLIN *asclin, IfxAsclin_RxInputSelect alti);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1357  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1358  /** \brief Selects the slave polarity
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1359   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1360   * \param spol SPOL selection
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1361   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1362   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1363  IFX_INLINE void IfxAsclin_setSlavePolarity(Ifx_ASCLIN *asclin, IfxAsclin_SlavePolarity spol);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1364  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1365  /** \brief Configure the Module to Hard/Soft suspend mode.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1366   * Note: The api works only when the OCDS is enabled and in Supervisor Mode. When OCDS is disabled the OCS suspend control is ineffective.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1367   * \param asclin Pointer to ASCLIN module registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1368   * \param mode Module suspend mode
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1369   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1370   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1371  IFX_INLINE void IfxAsclin_setSuspendMode(Ifx_ASCLIN *asclin, IfxAsclin_SuspendMode mode);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1372  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1373  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1374  /*-------------------------Global Function Prototypes-------------------------*/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1375  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1376  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1377  /** \brief Set the bit timing
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1378   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1379   * \note this function required FA source and the PD frequency to be set to their final values
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1380   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1381   * \param baudrate Required baudrate
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1382   * \param oversampling The oversampling factor
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1383   * \param samplepoint The sample point position
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1384   * \param medianFilter Number of samples per bit (median filter)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1385   * \return TRUE if configuration was successfull
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1386   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1387  IFX_EXTERN boolean IfxAsclin_setBitTiming(Ifx_ASCLIN *asclin, float32 baudrate, IfxAsclin_OversamplingFactor oversampling, IfxAsclin_SamplePointPosition samplepoint, IfxAsclin_SamplesPerBit medianFilter);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1388  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1389  /** \} */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1390  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1391  /** \addtogroup IfxLld_Asclin_Std_External
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1392   * \{ */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1393  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1394  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1395  /*-------------------------Global Function Prototypes-------------------------*/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1396  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1397  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1398  /** \brief Disables the module
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1399   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1400   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1401   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1402  IFX_EXTERN void IfxAsclin_disableModule(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1403  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1404  /** \brief Enables the ASC error interrupt Flags
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1405   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1406   * \param parEnable parity error
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1407   * \param rfoEnable Rx FIFO overflow error
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1408   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1409   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1410  IFX_EXTERN void IfxAsclin_enableAscErrorFlags(Ifx_ASCLIN *asclin, boolean parEnable, boolean rfoEnable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1411  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1412  /** \brief Enables the module
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1413   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1414   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1415   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1416  IFX_EXTERN void IfxAsclin_enableModule(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1417  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1418  /** \brief Returns the SRC pointer for ERR
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1419   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1420   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1421  IFX_EXTERN volatile Ifx_SRC_SRCR *IfxAsclin_getSrcPointerEr(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1422  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1423  /** \brief Returns the  SRC pointer for Rx
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1424   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1425   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1426  IFX_EXTERN volatile Ifx_SRC_SRCR *IfxAsclin_getSrcPointerRx(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1427  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1428  /** \brief Returns the SRC pointer for Tx
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1429   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1430   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1431  IFX_EXTERN volatile Ifx_SRC_SRCR *IfxAsclin_getSrcPointerTx(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1432  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1433  /** \brief Reads data up to 16 bits
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1434   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1435   * \param data Array where the read data shall be stored
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1436   * \param count number of items to read
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1437   * \return number of items that could not be read
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1438   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1439  IFX_EXTERN uint32 IfxAsclin_read16(Ifx_ASCLIN *asclin, uint16 *data, uint32 count);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1440  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1441  /** \brief Reads data up to 32 bits
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1442   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1443   * \param data Array where the read data shall be stored
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1444   * \param count number of items to read
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1445   * \return number of items that could not be read
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1446   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1447  IFX_EXTERN uint32 IfxAsclin_read32(Ifx_ASCLIN *asclin, uint32 *data, uint32 count);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1448  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1449  /** \brief Reads data up to 8 bits
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1450   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1451   * \param data Array where the read data shall be stored
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1452   * \param count number of items to read
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1453   * \return number of items that could not be read
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1454   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1455  IFX_EXTERN uint32 IfxAsclin_read8(Ifx_ASCLIN *asclin, uint8 *data, uint32 count);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1456  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1457  /** \brief Sets the baudrate bit fields
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1458   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1459   * \param prescaler division ratio of the predivider
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1460   * \param numerator numerator of the fractional divider
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1461   * \param denominator denominator of the fractional divider
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1462   * \param oversampling division ratio of the baudrate postdivider
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1463   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1464   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1465  IFX_EXTERN void IfxAsclin_setBaudrateBitFields(Ifx_ASCLIN *asclin, uint16 prescaler, uint16 numerator, uint16 denominator, IfxAsclin_OversamplingFactor oversampling);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1466  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1467  /** \brief Sets the  clock source
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1468   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1469   * \param clockSource clock source selection
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1470   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1471   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1472  IFX_EXTERN void IfxAsclin_setClockSource(Ifx_ASCLIN *asclin, IfxAsclin_ClockSource clockSource);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1473  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1474  /** \brief Writes data up to 16 bits
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1475   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1476   * \param data Array of data to be send
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1477   * \param count number of items to be send
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1478   * \return the number of items that could not be send
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1479   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1480  IFX_EXTERN uint32 IfxAsclin_write16(Ifx_ASCLIN *asclin, uint16 *data, uint32 count);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1481  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1482  /** \brief Writes data up to 32 bits
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1483   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1484   * \param data Array of data to be send
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1485   * \param count number of items to be send
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1486   * \return the number of items that could not be send
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1487   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1488  IFX_EXTERN uint32 IfxAsclin_write32(Ifx_ASCLIN *asclin, uint32 *data, uint32 count);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1489  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1490  /** \brief Writes data up to 8 bits
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1491   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1492   * \param data Array of data to be send
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1493   * \param count number of items to be send
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1494   * \return the number of items that could not be send
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1495   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1496  IFX_EXTERN uint32 IfxAsclin_write8(Ifx_ASCLIN *asclin, uint8 *data, uint32 count);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1497  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1498  /** \} */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1499  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1500  /** \addtogroup IfxLld_Asclin_Std_IO
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1501   * \{ */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1502  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1503  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1504  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1505  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1506  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1507  /** \brief Initializes a CTS input
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1508   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1509   * Attention: the kernel clock has to be disabled whenever the input multiplexer is changed.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1510   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1511   * This can be done with IfxAsclin_setClockSource(asclinSFR, IfxAsclin_ClockSource_noClock);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1512   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1513   * After the function call, the current clock can be enabled again.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1514   * \param cts the CTS Pin which should be configured
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1515   * \param inputMode the pin input mode which should be configured
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1516   * \param padDriver the pad driver mode which should be configured
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1517   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1518   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1519  IFX_INLINE void IfxAsclin_initCtsPin(const IfxAsclin_Cts_In *cts, IfxPort_InputMode inputMode, IfxPort_PadDriver padDriver);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1520  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1521  /** \brief Initializes a RTS output
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1522   * \param rts the RTS Pin which should be configured
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1523   * \param outputMode the pin output mode which should be configured
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1524   * \param padDriver the pad driver mode which should be configured
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1525   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1526   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1527  IFX_INLINE void IfxAsclin_initRtsPin(const IfxAsclin_Rts_Out *rts, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1528  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1529  /** \brief Initializes a RX input
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1530   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1531   * Attention: the kernel clock has to be disabled whenever the input multiplexer is changed.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1532   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1533   * This can be done with IfxAsclin_setClockSource(asclinSFR, IfxAsclin_ClockSource_noClock);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1534   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1535   * After the function call, the current clock can be enabled again.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1536   * \param rx the RX Pin which should be configured
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1537   * \param inputMode the pin input mode which should be configured
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1538   * \param padDriver the pad driver mode which should be configured
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1539   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1540   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1541  IFX_INLINE void IfxAsclin_initRxPin(const IfxAsclin_Rx_In *rx, IfxPort_InputMode inputMode, IfxPort_PadDriver padDriver);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1542  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1543  /** \brief Initializes a SCLK output
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1544   * \param sclk the SCLK Pin which should be configured
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1545   * \param outputMode the pin output mode which should be configured
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1546   * \param padDriver the pad driver mode which should be configured
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1547   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1548   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1549  IFX_INLINE void IfxAsclin_initSclkPin(const IfxAsclin_Sclk_Out *sclk, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1550  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1551  /** \brief Initializes a SLSO output
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1552   * \param slso the SLSO Pin which should be configured
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1553   * \param outputMode the pin output mode which should be configured
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1554   * \param padDriver the pad driver mode which should be configured
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1555   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1556   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1557  IFX_INLINE void IfxAsclin_initSlsoPin(const IfxAsclin_Slso_Out *slso, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1558  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1559  /** \brief Initializes a TX output
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1560   * \param tx the TX Pin which should be configured
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1561   * \param outputMode the pin output mode which should be configured
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1562   * \param padDriver the pad driver mode which should be configured
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1563   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1564   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1565  IFX_INLINE void IfxAsclin_initTxPin(const IfxAsclin_Tx_Out *tx, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1566  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1567  /** \} */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1568  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1569  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1570  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1571  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1572  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1573  /**
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1574   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1575   * \return returns the value of RxDATA register
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1576   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1577  IFX_INLINE uint32 IfxAsclin_readRxData(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1578  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1579  /**
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1580   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1581   * \param data data to be written
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1582   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1583   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1584  IFX_INLINE void IfxAsclin_writeTxData(Ifx_ASCLIN *asclin, uint32 data);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1585  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1586  /** \brief Returns the status of all error flags
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1587   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1588   * \return status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1589   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1590  IFX_INLINE uint16 IfxAsclin_getAllErrorFlagsStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1591  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1592  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1593  /*---------------------Inline Function Implementations------------------------*/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1594  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1595  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1596  IFX_INLINE void IfxAsclin_clearAllFlags(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1597  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1598      asclin->FLAGSCLEAR.U = 0xFFFFFFFF;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1599  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1600  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1601  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1602  IFX_INLINE void IfxAsclin_clearBreakDetectedFlag(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1603  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1604      asclin->FLAGSCLEAR.B.BDC = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1605  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1606  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1607  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1608  IFX_INLINE void IfxAsclin_clearCollisionDetectionErrorFlag(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1609  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1610      asclin->FLAGSCLEAR.B.CEC = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1611  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1612  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1613  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1614  IFX_INLINE void IfxAsclin_clearFallingEdgeDetectedFlag(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1615  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1616      asclin->FLAGSCLEAR.B.FEDC = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1617  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1618  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1619  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1620  IFX_INLINE void IfxAsclin_clearFrameErrorFlag(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1621  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1622      asclin->FLAGSCLEAR.B.FEC = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1623  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1624  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1625  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1626  IFX_INLINE void IfxAsclin_clearHeaderTimeoutFlag(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1627  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1628      asclin->FLAGSCLEAR.B.HTC = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1629  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1630  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1631  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1632  IFX_INLINE void IfxAsclin_clearKernelResetStatus(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1633  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1634      asclin->KRSTCLR.B.CLR = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1635  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1636  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1637  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1638  IFX_INLINE void IfxAsclin_clearLinAutoBaudDetectionErrorFlag(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1639  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1640      asclin->FLAGSCLEAR.B.LAC = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1641  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1642  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1643  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1644  IFX_INLINE void IfxAsclin_clearLinChecksumErrorFlag(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1645  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1646      asclin->FLAGSCLEAR.B.LCC = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1647  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1648  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1649  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1650  IFX_INLINE void IfxAsclin_clearLinParityErrorFlag(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1651  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1652      asclin->FLAGSCLEAR.B.LPC = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1653  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1654  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1655  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1656  IFX_INLINE void IfxAsclin_clearParityErrorFlag(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1657  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1658      asclin->FLAGSCLEAR.B.PEC = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1659  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1660  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1661  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1662  IFX_INLINE void IfxAsclin_clearRaisingEdgeDetectedFlag(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1663  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1664      asclin->FLAGSCLEAR.B.REDC = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1665  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1666  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1667  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1668  IFX_INLINE void IfxAsclin_clearResponseTimeoutFlag(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1669  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1670      asclin->FLAGSCLEAR.B.RTC = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1671  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1672  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1673  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1674  IFX_INLINE void IfxAsclin_clearRxFifoFillLevelFlag(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1675  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1676      asclin->FLAGSCLEAR.B.RFLC = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1677  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1678  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1679  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1680  IFX_INLINE void IfxAsclin_clearRxFifoOverflowFlag(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1681  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1682      asclin->FLAGSCLEAR.B.RFOC = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1683  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1684  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1685  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1686  IFX_INLINE void IfxAsclin_clearRxFifoUnderflowFlag(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1687  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1688      asclin->FLAGSCLEAR.B.RFUC = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1689  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1690  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1691  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1692  IFX_INLINE void IfxAsclin_clearRxHeaderEndFlag(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1693  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1694      asclin->FLAGSCLEAR.B.RHC = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1695  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1696  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1697  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1698  IFX_INLINE void IfxAsclin_clearRxResponseEndFlag(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1699  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1700      asclin->FLAGSCLEAR.B.RRC = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1701  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1702  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1703  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1704  IFX_INLINE void IfxAsclin_clearTransmissionCompletedFlag(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1705  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1706      asclin->FLAGSCLEAR.B.TCC = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1707  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1708  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1709  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1710  IFX_INLINE void IfxAsclin_clearTxFifoFillLevelFlag(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1711  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1712      asclin->FLAGSCLEAR.B.TFLC = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1713  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1714  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1715  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1716  IFX_INLINE void IfxAsclin_clearTxFifoOverflowFlag(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1717  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1718      asclin->FLAGSCLEAR.B.TFOC = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1719  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1720  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1721  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1722  IFX_INLINE void IfxAsclin_clearTxHeaderEndFlag(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1723  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1724      asclin->FLAGSCLEAR.B.THC = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1725  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1726  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1727  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1728  IFX_INLINE void IfxAsclin_clearTxResponseEndFlag(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1729  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1730      asclin->FLAGSCLEAR.B.TRC = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1731  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1732  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1733  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1734  IFX_INLINE void IfxAsclin_disableAllFlags(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1735  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1736      asclin->FLAGSENABLE.U = 0x00000000;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1737  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1738  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1739  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1740  IFX_INLINE void IfxAsclin_enableAutoBaudrateDetection(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1741  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1742      asclin->LIN.CON.B.ABD = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1743  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1744  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1745  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1746  IFX_INLINE void IfxAsclin_enableBreakDetectedFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1747  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1748      asclin->FLAGSENABLE.B.BDE = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1749  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1750  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1751  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1752  IFX_INLINE void IfxAsclin_enableCollisionDetection(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1753  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1754      asclin->FRAMECON.B.CEN = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1755  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1756  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1757  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1758  IFX_INLINE void IfxAsclin_enableCollisionDetectionErrorFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1759  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1760      asclin->FLAGSENABLE.B.CEE = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1761  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1762  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1763  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1764  IFX_INLINE void IfxAsclin_enableCts(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1765  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1766      asclin->IOCR.B.CTSEN = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1767  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1768  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1769  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1770  IFX_INLINE void IfxAsclin_enableFallingEdgeDetectedFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1771  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1772      asclin->FLAGSENABLE.B.FEDE = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1773  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1774  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1775  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1776  IFX_INLINE void IfxAsclin_enableFrameErrorFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1777  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1778      asclin->FLAGSENABLE.B.FEE = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1779  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1780  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1781  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1782  IFX_INLINE void IfxAsclin_enableHardwareChecksum(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1783  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1784      asclin->LIN.CON.B.CSEN = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1785  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1786  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1787  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1788  IFX_INLINE void IfxAsclin_enableHeaderTimeoutFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1789  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1790      asclin->FLAGSENABLE.B.HTE = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1791  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1792  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1793  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1794  IFX_INLINE void IfxAsclin_enableLinAutoBaudDetectionErrorFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1795  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1796      asclin->FLAGSENABLE.B.ABE = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1797  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1798  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1799  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1800  IFX_INLINE void IfxAsclin_enableLinChecksumErrorFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1801  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1802      asclin->FLAGSENABLE.B.LCE = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1803  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1804  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1805  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1806  IFX_INLINE void IfxAsclin_enableLinParityErrorFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1807  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1808      asclin->FLAGSENABLE.B.LPE = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1809  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1810  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1811  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1812  IFX_INLINE void IfxAsclin_enableLoopBackMode(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1813  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1814      asclin->IOCR.B.LB = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1815  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1816  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1817  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1818  IFX_INLINE void IfxAsclin_enableParity(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1819  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1820      asclin->FRAMECON.B.PEN = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1821  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1822  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1823  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1824  IFX_INLINE void IfxAsclin_enableParityErrorFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1825  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1826      asclin->FLAGSENABLE.B.PEE = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1827  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1828  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1829  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1830  IFX_INLINE void IfxAsclin_enableRaisingEdgeDetectedFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1831  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1832      asclin->FLAGSENABLE.B.REDE = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1833  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1834  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1835  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1836  IFX_INLINE void IfxAsclin_enableResponseTimeoutFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1837  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1838      asclin->FLAGSENABLE.B.RTE = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1839  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1840  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1841  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1842  IFX_INLINE void IfxAsclin_enableRxFifoFillLevelFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1843  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1844      asclin->FLAGSENABLE.B.RFLE = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1845  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1846  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1847  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1848  IFX_INLINE void IfxAsclin_enableRxFifoInlet(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1849  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1850      asclin->RXFIFOCON.B.ENI = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1851  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1852  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1853  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1854  IFX_INLINE void IfxAsclin_enableRxFifoOverflowFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1855  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1856      asclin->FLAGSENABLE.B.RFOE = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1857  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1858  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1859  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1860  IFX_INLINE void IfxAsclin_enableRxFifoUnderflowFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1861  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1862      asclin->FLAGSENABLE.B.RFUE = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1863  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1864  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1865  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1866  IFX_INLINE void IfxAsclin_enableRxHeaderEndFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1867  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1868      asclin->FLAGSENABLE.B.RHE = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1869  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1870  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1871  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1872  IFX_INLINE void IfxAsclin_enableRxResponseEndFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1873  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1874      asclin->FLAGSENABLE.B.RRE = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1875  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1876  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1877  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1878  IFX_INLINE void IfxAsclin_enableTransmissionCompletedFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1879  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1880      asclin->FLAGSENABLE.B.TCE = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1881  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1882  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1883  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1884  IFX_INLINE void IfxAsclin_enableTxFifoFillLevelFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1885  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1886      asclin->FLAGSENABLE.B.TFLE = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1887  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1888  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1889  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1890  IFX_INLINE void IfxAsclin_enableTxFifoOutlet(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1891  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1892      asclin->TXFIFOCON.B.ENO = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1893  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1894  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1895  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1896  IFX_INLINE void IfxAsclin_enableTxFifoOverflowFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1897  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1898      asclin->FLAGSENABLE.B.TFOE = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1899  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1900  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1901  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1902  IFX_INLINE void IfxAsclin_enableTxHeaderEndFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1903  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1904      asclin->FLAGSENABLE.B.THE = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1905  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1906  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1907  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1908  IFX_INLINE void IfxAsclin_enableTxResponseEndFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1909  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1910      asclin->FLAGSENABLE.B.TRE = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1911  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1912  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1913  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1914  IFX_INLINE void IfxAsclin_flushRxFifo(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1915  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1916      asclin->RXFIFOCON.B.FLUSH = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1917  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1918  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1919  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1920  IFX_INLINE void IfxAsclin_flushTxFifo(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1921  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1922      asclin->TXFIFOCON.B.FLUSH = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1923  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1924  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1925  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1926  IFX_INLINE boolean IfxAsclin_getBreakDetectedFlagStatus(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1927  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1928      return asclin->FLAGS.B.BD;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1929  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1930  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1931  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1932  IFX_INLINE uint8 IfxAsclin_getClockSource(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1933  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1934      return asclin->CSR.B.CLKSEL;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1935  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1936  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1937  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1938  IFX_INLINE boolean IfxAsclin_getClockStatus(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1939  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1940      return asclin->CSR.B.CON;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1941  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1942  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1943  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1944  IFX_INLINE boolean IfxAsclin_getCollisionDetectionErrorFlagStatus(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1945  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1946      return asclin->FLAGS.B.CE;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1947  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1948  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1949  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1950  IFX_INLINE boolean IfxAsclin_getFallingEdgeDetectedFlagStatus(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1951  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1952      return asclin->FLAGS.B.FED;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1953  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1954  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1955  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1956  IFX_INLINE boolean IfxAsclin_getFrameErrorFlagStatus(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1957  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1958      return asclin->FLAGS.B.FE;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1959  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1960  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1961  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1962  IFX_INLINE boolean IfxAsclin_getHeaderTimeoutFlagStatus(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1963  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1964      return asclin->FLAGS.B.HT;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1965  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1966  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1967  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1968  IFX_INLINE boolean IfxAsclin_getKernelResetStatus(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1969  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1970      return asclin->KRST0.B.RSTSTAT;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1971  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1972  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1973  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1974  IFX_INLINE boolean IfxAsclin_getLinAutoBaudDetectionErrorFlagStatus(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1975  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1976      return asclin->FLAGS.B.LA;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1977  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1978  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1979  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1980  IFX_INLINE boolean IfxAsclin_getLinChecksumErrorFlagStatus(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1981  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1982      return asclin->FLAGS.B.LC;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1983  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1984  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1985  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1986  IFX_INLINE boolean IfxAsclin_getLinParityErrorFlagStatus(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1987  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1988      return asclin->FLAGS.B.LP;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1989  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1990  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1991  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1992  IFX_INLINE boolean IfxAsclin_getModuleStatus(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1993  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1994      return asclin->CLC.B.DISS;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1995  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1996  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1997  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1998  IFX_INLINE boolean IfxAsclin_getParityErrorFlagStatus(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1999  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2000      return asclin->FLAGS.B.PE;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2001  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2002  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2003  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2004  IFX_INLINE uint16 IfxAsclin_getPrescaler(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2005  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2006      return asclin->BITCON.B.PRESCALER + 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2007  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2008  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2009  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2010  IFX_INLINE boolean IfxAsclin_getRaisingEdgeDetectedFlagStatus(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2011  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2012      return asclin->FLAGS.B.RED;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2013  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2014  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2015  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2016  IFX_INLINE boolean IfxAsclin_getReceiveSignalStatus(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2017  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2018      return asclin->IOCR.B.RXM;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2019  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2020  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2021  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2022  IFX_INLINE boolean IfxAsclin_getResponseTimeoutFlagStatus(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2023  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2024      return asclin->FLAGS.B.RT;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2025  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2026  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2027  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2028  IFX_INLINE uint8 IfxAsclin_getRxFifoFillLevel(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2029  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2030      return asclin->RXFIFOCON.B.FILL;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2031  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2032  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2033  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2034  IFX_INLINE boolean IfxAsclin_getRxFifoFillLevelFlagStatus(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2035  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2036      return asclin->FLAGS.B.RFL;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2037  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2038  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2039  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2040  IFX_INLINE uint8 IfxAsclin_getRxFifoOutletWidth(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2041  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2042      return asclin->RXFIFOCON.B.OUTW;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2043  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2044  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2045  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2046  IFX_INLINE boolean IfxAsclin_getRxFifoOverflowFlagStatus(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2047  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2048      return asclin->FLAGS.B.RFO;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2049  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2050  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2051  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2052  IFX_INLINE boolean IfxAsclin_getRxFifoUnderflowFlagStatus(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2053  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2054      return asclin->FLAGS.B.RFU;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2055  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2056  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2057  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2058  IFX_INLINE boolean IfxAsclin_getRxHeaderEndFlagStatus(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2059  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2060      return asclin->FLAGS.B.RH;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2061  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2062  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2063  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2064  IFX_INLINE boolean IfxAsclin_getRxResponseEndFlagStatus(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2065  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2066      return asclin->FLAGS.B.RR;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2067  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2068  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2069  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2070  IFX_INLINE boolean IfxAsclin_getTransmissionCompletedFlagStatus(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2071  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2072      return asclin->FLAGS.B.TC;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2073  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2074  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2075  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2076  IFX_INLINE boolean IfxAsclin_getTransmitSignalStatus(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2077  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2078      return asclin->IOCR.B.TXM;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2079  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2080  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2081  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2082  IFX_INLINE uint8 IfxAsclin_getTxFifoFillLevel(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2083  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2084      return asclin->TXFIFOCON.B.FILL;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2085  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2086  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2087  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2088  IFX_INLINE boolean IfxAsclin_getTxFifoFillLevelFlagStatus(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2089  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2090      return asclin->FLAGS.B.TFL;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2091  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2092  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2093  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2094  IFX_INLINE uint8 IfxAsclin_getTxFifoInletWidth(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2095  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2096      return asclin->TXFIFOCON.B.INW;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2097  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2098  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2099  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2100  IFX_INLINE boolean IfxAsclin_getTxFifoOverflowFlagStatus(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2101  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2102      return asclin->FLAGS.B.TFO;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2103  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2104  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2105  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2106  IFX_INLINE boolean IfxAsclin_getTxHeaderEndFlagStatus(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2107  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2108      return asclin->FLAGS.B.TH;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2109  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2110  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2111  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2112  IFX_INLINE boolean IfxAsclin_getTxResponseEndFlagStatus(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2113  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2114      return asclin->FLAGS.B.TR;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2115  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2116  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2117  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2118  IFX_INLINE void IfxAsclin_initCtsPin(const IfxAsclin_Cts_In *cts, IfxPort_InputMode inputMode, IfxPort_PadDriver padDriver)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2119  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2120      if (cts->pin.port != NULL_PTR)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2121      {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2122          IfxPort_setPinModeInput(cts->pin.port, cts->pin.pinIndex, inputMode);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2123          IfxPort_setPinPadDriver(cts->pin.port, cts->pin.pinIndex, padDriver);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2124          IfxAsclin_enableCts(cts->module, TRUE);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2125          IfxAsclin_setCtsInput(cts->module, (IfxAsclin_CtsInputSelect)cts->select);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2126      }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2127  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2128  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2129  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2130  IFX_INLINE void IfxAsclin_initRtsPin(const IfxAsclin_Rts_Out *rts, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2131  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2132      IfxPort_setPinModeOutput(rts->pin.port, rts->pin.pinIndex, outputMode, rts->select);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2133      IfxPort_setPinPadDriver(rts->pin.port, rts->pin.pinIndex, padDriver);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2134  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2135  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2136  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2137  IFX_INLINE void IfxAsclin_initRxPin(const IfxAsclin_Rx_In *rx, IfxPort_InputMode inputMode, IfxPort_PadDriver padDriver)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2138  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2139      if (rx->pin.port != NULL_PTR)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2140      {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2141          IfxPort_setPinModeInput(rx->pin.port, rx->pin.pinIndex, inputMode);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2142          IfxPort_setPinPadDriver(rx->pin.port, rx->pin.pinIndex, padDriver);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2143          IfxAsclin_setRxInput(rx->module, (IfxAsclin_RxInputSelect)rx->select);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2144      }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2145  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2146  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2147  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2148  IFX_INLINE void IfxAsclin_initSclkPin(const IfxAsclin_Sclk_Out *sclk, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2149  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2150      IfxPort_setPinModeOutput(sclk->pin.port, sclk->pin.pinIndex, outputMode, sclk->select);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2151      IfxPort_setPinPadDriver(sclk->pin.port, sclk->pin.pinIndex, padDriver);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2152  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2153  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2154  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2155  IFX_INLINE void IfxAsclin_initSlsoPin(const IfxAsclin_Slso_Out *slso, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2156  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2157      IfxPort_setPinModeOutput(slso->pin.port, slso->pin.pinIndex, outputMode, slso->select);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2158      IfxPort_setPinPadDriver(slso->pin.port, slso->pin.pinIndex, padDriver);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2159  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2160  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2161  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2162  IFX_INLINE void IfxAsclin_initTxPin(const IfxAsclin_Tx_Out *tx, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2163  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2164      IfxPort_setPinModeOutput(tx->pin.port, tx->pin.pinIndex, outputMode, tx->select);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2165      IfxPort_setPinPadDriver(tx->pin.port, tx->pin.pinIndex, padDriver);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2166  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2167  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2168  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2169  IFX_INLINE boolean IfxAsclin_isModuleSuspended(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2170  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2171      Ifx_ASCLIN_OCS ocs;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2172  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2173      // read the status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2174      ocs.U = asclin->OCS.U;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2175  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2176      // return the status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2177      return ocs.B.SUSSTA;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2178  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2179  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2180  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2181  IFX_INLINE uint32 IfxAsclin_readRxData(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2182  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2183      return asclin->RXDATA.U;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2184  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2185  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2186  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2187  IFX_INLINE void IfxAsclin_setBrdLowerlimt(Ifx_ASCLIN *asclin, uint8 limit)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2188  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2189      asclin->BRD.B.LOWERLIMIT = limit;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2190  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2191  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2192  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2193  IFX_INLINE void IfxAsclin_setBrdUpperlimt(Ifx_ASCLIN *asclin, uint8 limit)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2194  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2195      asclin->BRD.B.UPPERLIMIT = limit;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2196  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2197  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2198  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2199  IFX_INLINE void IfxAsclin_setChecksumInjection(Ifx_ASCLIN *asclin, IfxAsclin_ChecksumInjection csi)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2200  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2201      asclin->LIN.CON.B.CSI = csi;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2202  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2203  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2204  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2205  IFX_INLINE void IfxAsclin_setChecksumMode(Ifx_ASCLIN *asclin, IfxAsclin_Checksum mode)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2206  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2207      asclin->DATCON.B.CSM = mode;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2208  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2209  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2210  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2211  IFX_INLINE void IfxAsclin_setClockPolarity(Ifx_ASCLIN *asclin, IfxAsclin_ClockPolarity cpol)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2212  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2213      asclin->IOCR.B.CPOL = cpol;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2214  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2215  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2216  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2217  IFX_INLINE void IfxAsclin_setCtsInput(Ifx_ASCLIN *asclin, IfxAsclin_CtsInputSelect ctsi)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2218  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2219      asclin->IOCR.B.CTS = ctsi;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2220  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2221  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2222  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2223  IFX_INLINE void IfxAsclin_setDataLength(Ifx_ASCLIN *asclin, IfxAsclin_DataLength length)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2224  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2225      asclin->DATCON.B.DATLEN = length;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2226  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2227  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2228  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2229  IFX_INLINE void IfxAsclin_setDenominator(Ifx_ASCLIN *asclin, uint16 denominator)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2230  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2231      asclin->BRG.B.DENOMINATOR = denominator;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2232  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2233  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2234  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2235  IFX_INLINE void IfxAsclin_setDisableModuleRequest(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2236  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2237      asclin->CLC.B.DISR = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2238  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2239  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2240  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2241  IFX_INLINE void IfxAsclin_setEnableModuleRequest(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2242  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2243      asclin->CLC.B.DISR = 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2244  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2245  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2246  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2247  IFX_INLINE void IfxAsclin_setFilterDepth(Ifx_ASCLIN *asclin, uint8 depth)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2248  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2249      asclin->IOCR.B.DEPTH = __minu(depth, 63);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2250  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2251  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2252  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2253  IFX_INLINE void IfxAsclin_setFrameMode(Ifx_ASCLIN *asclin, IfxAsclin_FrameMode mode)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2254  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2255      asclin->FRAMECON.B.MODE = mode;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2256  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2257  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2258  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2259  IFX_INLINE void IfxAsclin_setHeaderResponseSelect(Ifx_ASCLIN *asclin, IfxAsclin_HeaderResponseSelect type)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2260  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2261      asclin->DATCON.B.HO = type;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2262  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2263  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2264  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2265  IFX_INLINE void IfxAsclin_setIdleDelay(Ifx_ASCLIN *asclin, IfxAsclin_IdleDelay delay)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2266  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2267      asclin->FRAMECON.B.IDLE = delay;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2268  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2269  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2270  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2271  IFX_INLINE void IfxAsclin_setKernelResetOne(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2272  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2273      asclin->KRST1.B.RST = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2274  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2275  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2276  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2277  IFX_INLINE void IfxAsclin_setKernelResetZero(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2278  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2279      asclin->KRST0.B.RST = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2280  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2281  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2282  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2283  IFX_INLINE void IfxAsclin_setLeadDelay(Ifx_ASCLIN *asclin, IfxAsclin_LeadDelay delay)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2284  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2285      asclin->FRAMECON.B.LEAD = delay;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2286  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2287  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2288  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2289  IFX_INLINE void IfxAsclin_setLinBreakLength(Ifx_ASCLIN *asclin, uint8 length)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2290  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2291      asclin->LIN.BTIMER.B.BREAK = length;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2292  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2293  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2294  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2295  IFX_INLINE void IfxAsclin_setLinHeaderTimeout(Ifx_ASCLIN *asclin, uint8 timeout)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2296  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2297      asclin->LIN.HTIMER.B.HEADER = timeout;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2298  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2299  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2300  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2301  IFX_INLINE void IfxAsclin_setLinMode(Ifx_ASCLIN *asclin, IfxAsclin_LinMode mode)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2302  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2303      asclin->LIN.CON.B.MS = mode;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2304  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2305  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2306  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2307  IFX_INLINE void IfxAsclin_setLinResponseTimeoutMode(Ifx_ASCLIN *asclin, IfxAsclin_LinResponseTimeoutMode mode)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2308  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2309      asclin->DATCON.B.RM = mode;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2310  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2311  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2312  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2313  IFX_INLINE void IfxAsclin_setLinResponseTimeoutThreshold(Ifx_ASCLIN *asclin, uint16 threshold)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2314  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2315      asclin->DATCON.B.RESPONSE = __minu(threshold, 256);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2316  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2317  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2318  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2319  IFX_INLINE void IfxAsclin_setNumerator(Ifx_ASCLIN *asclin, uint16 numerator)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2320  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  2321      asclin->BRG.B.NUMERATOR = numerator;
	ld.hu	d15,[a15]34
.L478:
	insert	d15,d15,d9,#0,#12
	st.h	[a15]34,d15
.L477:
	fret
.L238:
	; End of function
	.sdecl	'.text.IfxAsclin.IfxAsclin_setBitTiming',code,cluster('IfxAsclin_setBitTiming')
	.sect	'.text.IfxAsclin.IfxAsclin_setBitTiming'
	.align	2
	
	.global	IfxAsclin_setBitTiming

; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	   252  olean IfxAsclin_setBitTiming(Ifx_ASCLIN *asclin, float32 baudrate, IfxAsclin_OversamplingFactor oversampling, IfxAsclin_SamplePointPosition samplepoint, IfxAsclin_SamplesPerBit medianFilter)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	   253  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	   254      IfxAsclin_ClockSource source = (IfxAsclin_ClockSource)IfxAsclin_getClockSource(asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	   255      float32               fOvs;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	   256      uint32                d      = 0, n, dBest = 1, nBest = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	   257      float32               f;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	   258  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	   259      /* Set the PD frequency */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	   260      float32               fpd = IfxAsclin_getPdFrequency(asclin);
; Function IfxAsclin_setBitTiming
.L106:
IfxAsclin_setBitTiming:	.type	func
	mov.aa	a15,a4
.L292:

; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	     1  /**
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	     2   * \file IfxAsclin.h
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	     3   * \brief ASCLIN  basic functionality
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	     4   * \ingroup IfxLld_Asclin
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	     5   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	     6   * \version iLLD_1_0_1_11_0
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	     7   * \copyright Copyright (c) 2018 Infineon Technologies AG. All rights reserved.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	     8   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	     9   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    10   *                                 IMPORTANT NOTICE
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    11   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    12   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    13   * Use of this file is subject to the terms of use agreed between (i) you or 
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    14   * the company in which ordinary course of business you are acting and (ii) 
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    15   * Infineon Technologies AG or its licensees. If and as long as no such 
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    16   * terms of use are agreed, use of this file is subject to following:
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    17  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    18  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    19   * Boost Software License - Version 1.0 - August 17th, 2003
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    20  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    21   * Permission is hereby granted, free of charge, to any person or 
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    22   * organization obtaining a copy of the software and accompanying 
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    23   * documentation covered by this license (the "Software") to use, reproduce,
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    24   * display, distribute, execute, and transmit the Software, and to prepare
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    25   * derivative works of the Software, and to permit third-parties to whom the 
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    26   * Software is furnished to do so, all subject to the following:
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    27  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    28   * The copyright notices in the Software and this entire statement, including
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    29   * the above license grant, this restriction and the following disclaimer, must
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    30   * be included in all copies of the Software, in whole or in part, and all
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    31   * derivative works of the Software, unless such copies or derivative works are
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    32   * solely in the form of machine-executable object code generated by a source
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    33   * language processor.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    34  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    35   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR 
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    36   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    37   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    38   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE 
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    39   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    40   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    41   * DEALINGS IN THE SOFTWARE.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    42  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    43   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    44   * \defgroup IfxLld_Asclin_Std_Enumerations Enumerations
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    45   * \ingroup IfxLld_Asclin_Std
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    46   * \defgroup IfxLld_Asclin_Std_Operative Operative Functions
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    47   * \ingroup IfxLld_Asclin_Std
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    48   * \defgroup IfxLld_Asclin_Std_Utility Utility Functions
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    49   * \ingroup IfxLld_Asclin_Std
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    50   * \defgroup IfxLld_Asclin_Std_Configuration Configuration Functions
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    51   * \ingroup IfxLld_Asclin_Std
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    52   * \defgroup IfxLld_Asclin_Std_External External Functions
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    53   * \ingroup IfxLld_Asclin_Std
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    54   * \defgroup IfxLld_Asclin_Std_IO IO Pin Configuration Functions
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    55   * \ingroup IfxLld_Asclin_Std
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    56   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    57  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    58  #ifndef IFXASCLIN_H
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    59  #define IFXASCLIN_H 1
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    60  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    61  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    62  /*----------------------------------Includes----------------------------------*/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    63  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    64  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    65  #include "_Impl/IfxAsclin_cfg.h"
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    66  #include "Scu/Std/IfxScuCcu.h"
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    67  #include "Scu/Std/IfxScuWdt.h"
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    68  #include "Cpu/Std/IfxCpu_Intrinsics.h"
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    69  #include "IfxAsclin_reg.h"
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    70  #include "Src/Std/IfxSrc.h"
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    71  #include "_PinMap/IfxAsclin_PinMap.h"
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    72  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    73  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    74  /*--------------------------------Enumerations--------------------------------*/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    75  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    76  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    77  /** \addtogroup IfxLld_Asclin_Std_Enumerations
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    78   * \{ */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    79  /** \brief Defines if the classic or the enhanced checksum will be calculated by the checksum block.\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    80   * Definition in Ifx_ASCLIN.DATCON.B.CSM
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    81   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    82  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    83  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    84      IfxAsclin_Checksum_classic  = 0, /**< \brief classic checksum */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    85      IfxAsclin_Checksum_enhanced = 1  /**< \brief enhanced checksum */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    86  } IfxAsclin_Checksum;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    87  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    88  /** \brief Defines if the received checksum byte is written into the RXFifo or not.\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    89   * Definition in Ifx_ASCLIN.LIN.CON.B.CSI
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    90   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    91  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    92  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    93      IfxAsclin_ChecksumInjection_notWritten = 0,  /**< \brief checksum byte is not written */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    94      IfxAsclin_ChecksumInjection_written    = 1   /**< \brief checksum byte is written */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    95  } IfxAsclin_ChecksumInjection;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    96  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    97  /** \brief CPOL defines the idle level of the clock signal in the SPI mode.\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    98   * Idle level is the level outside the data transmission time intervals.\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    99   * Definition in Ifx_ASCLIN.IOCR.B.CPOL
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   100   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   101  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   102  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   103      IfxAsclin_ClockPolarity_idleLow  = 0, /**< \brief idle low */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   104      IfxAsclin_ClockPolarity_idleHigh = 1  /**< \brief idle high */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   105  } IfxAsclin_ClockPolarity;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   106  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   107  /** \brief Selection of clock source\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   108   * Definition in Ifx_ASCLIN.CSR.B.CLKSEL
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   109   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   110  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   111  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   112      IfxAsclin_ClockSource_noClock         = 0,  /**< \brief no clock will be supplied */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   113      IfxAsclin_ClockSource_kernelClock     = 1,  /**< \brief f clc will be supplied */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   114      IfxAsclin_ClockSource_oscillatorClock = 2,  /**< \brief XTAL oscillator clock foso0 will be supplied */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   115      IfxAsclin_ClockSource_flexRayClock    = 4,  /**< \brief f eray will be supplied */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   116      IfxAsclin_ClockSource_ascFastClock    = 8,  /**< \brief f asclinf wiil be supplied */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   117      IfxAsclin_ClockSource_ascSlowClock    = 16  /**< \brief f asclins will be supplied */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   118  } IfxAsclin_ClockSource;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   119  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   120  /** \brief CTS input pin selection\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   121   * Definition in Ifx_ASCLIN.IOCR.B.CTS
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   122   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   123  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   124  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   125      IfxAsclin_CtsInputSelect_0,     /**< \brief CTS input pin 0  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   126      IfxAsclin_CtsInputSelect_1,     /**< \brief CTS input pin 1  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   127      IfxAsclin_CtsInputSelect_2,     /**< \brief CTS input pin 2  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   128      IfxAsclin_CtsInputSelect_3      /**< \brief CTS input pin 3  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   129  } IfxAsclin_CtsInputSelect;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   130  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   131  /** \brief Number of bits per transfer\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   132   * Definition in Ifx_ASCLIN.FRAMECON.B.DATALEN
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   133   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   134  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   135  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   136      IfxAsclin_DataLength_1 = 0,      /**< \brief number of bits per transfer 0  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   137      IfxAsclin_DataLength_2,          /**< \brief number of bits per transfer 1  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   138      IfxAsclin_DataLength_3,          /**< \brief number of bits per transfer 2  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   139      IfxAsclin_DataLength_4,          /**< \brief number of bits per transfer 3  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   140      IfxAsclin_DataLength_5,          /**< \brief number of bits per transfer 4  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   141      IfxAsclin_DataLength_6,          /**< \brief number of bits per transfer 5  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   142      IfxAsclin_DataLength_7,          /**< \brief number of bits per transfer 6  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   143      IfxAsclin_DataLength_8,          /**< \brief number of bits per transfer 7  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   144      IfxAsclin_DataLength_9,          /**< \brief number of bits per transfer 8  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   145      IfxAsclin_DataLength_10,         /**< \brief number of bits per transfer 9  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   146      IfxAsclin_DataLength_11,         /**< \brief number of bits per transfer 10  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   147      IfxAsclin_DataLength_12,         /**< \brief number of bits per transfer 11  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   148      IfxAsclin_DataLength_13,         /**< \brief number of bits per transfer 12  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   149      IfxAsclin_DataLength_14,         /**< \brief number of bits per transfer 13  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   150      IfxAsclin_DataLength_15,         /**< \brief number of bits per transfer 14  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   151      IfxAsclin_DataLength_16          /**< \brief number of bits per transfer 15  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   152  } IfxAsclin_DataLength;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   153  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   154  /** \brief Defines the basic operating mode of the module. Changing the mode must be done by switching first to initialize mode, and then to the other mode.\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   155   * Definition in Ifx_ASCLIN.FRAMECON.B.MODE
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   156   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   157  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   158  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   159      IfxAsclin_FrameMode_initialise = 0,  /**< \brief initialise mode */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   160      IfxAsclin_FrameMode_asc        = 1,  /**< \brief asc mode */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   161      IfxAsclin_FrameMode_spi        = 2,  /**< \brief spi mode */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   162      IfxAsclin_FrameMode_lin        = 3   /**< \brief lin mode */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   163  } IfxAsclin_FrameMode;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   164  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   165  /** \brief Defines if LIN frame shall consist of a header and response or of a header only.\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   166   * Definition in Ifx_ASCLIN.DATCON.B.HO
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   167   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   168  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   169  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   170      IfxAsclin_HeaderResponseSelect_headerAndResponse = 0,  /**< \brief header and response expected */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   171      IfxAsclin_HeaderResponseSelect_headerOnly        = 1   /**< \brief header only expected */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   172  } IfxAsclin_HeaderResponseSelect;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   173  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   174  /** \brief Defines the duration of the IDLE delay in bit times.\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   175   * SPI mode: this is the idle time between the frames.\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   176   * ASC and LIN mode: this is the pause inserted between transmission of bytes.\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   177   * Definition in Ifx_ASCLIN.FRAMECON.B.IDLE
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   178   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   179  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   180  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   181      IfxAsclin_IdleDelay_0,     /**< \brief idle delay in 0 bit times  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   182      IfxAsclin_IdleDelay_1,     /**< \brief idle delay in 1 bit times  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   183      IfxAsclin_IdleDelay_2,     /**< \brief idle delay in 2 bit times  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   184      IfxAsclin_IdleDelay_3,     /**< \brief idle delay in 3 bit times  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   185      IfxAsclin_IdleDelay_4,     /**< \brief idle delay in 4 bit times  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   186      IfxAsclin_IdleDelay_5,     /**< \brief idle delay in 5 bit times  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   187      IfxAsclin_IdleDelay_6,     /**< \brief idle delay in 6 bit times  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   188      IfxAsclin_IdleDelay_7      /**< \brief idle delay in 7 bit times  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   189  } IfxAsclin_IdleDelay;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   190  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   191  /** \brief Defines the leading delay in bit times in SPI mode. ASC mode: not applicable.\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   192   * LIN mode: delay between the end of the break and the start of the sync character.\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   193   * Definition in Ifx_ASCLIN.FRAMECON.B.LEAD
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   194   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   195  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   196  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   197      IfxAsclin_LeadDelay_0,     /**< \brief lead delay in 0 bit times  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   198      IfxAsclin_LeadDelay_1,     /**< \brief lead delay in 1 bit times  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   199      IfxAsclin_LeadDelay_2,     /**< \brief lead delay in 2 bit times  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   200      IfxAsclin_LeadDelay_3,     /**< \brief lead delay in 3 bit times  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   201      IfxAsclin_LeadDelay_4,     /**< \brief lead delay in 4 bit times  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   202      IfxAsclin_LeadDelay_5,     /**< \brief lead delay in 5 bit times  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   203      IfxAsclin_LeadDelay_6,     /**< \brief lead delay in 6 bit times  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   204      IfxAsclin_LeadDelay_7      /**< \brief lead delay in 7 bit times  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   205  } IfxAsclin_LeadDelay;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   206  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   207  /** \brief Configures if the module in LIN mode operates as master or slave\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   208   * Definition in Ifx_ASCLIN.LIN.CON.B.MS
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   209   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   210  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   211  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   212      IfxAsclin_LinMode_slave  = 0, /**< \brief operates in slave mode */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   213      IfxAsclin_LinMode_master = 1  /**< \brief operates in master mode */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   214  } IfxAsclin_LinMode;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   215  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   216  /** \brief Defines the timeout threshold of RESPOSE bit is for LIN response timeout or LIN frame timeout.\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   217   * Definition in Ifx_ASCLIN.DATCON.B.RM
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   218   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   219  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   220  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   221      IfxAsclin_LinResponseTimeoutMode_frameTimeout    = 0, /**< \brief timeout threshold is for frame */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   222      IfxAsclin_LinResponseTimeoutMode_responseTimeout = 1  /**< \brief timeout threshold is for reponse */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   223  } IfxAsclin_LinResponseTimeoutMode;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   224  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   225  /** \brief Defines the bit length in ticks in the range of 1 to 16. The lengths of 1 to 3 are not allowed\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   226   * Definition in Ifx_ASCLIN.BITCON.B.OVERSAMPLING
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   227   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   228  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   229  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   230      IfxAsclin_OversamplingFactor_4  = 3,   /**< \brief oversampling factor 4 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   231      IfxAsclin_OversamplingFactor_5  = 4,   /**< \brief oversampling factor 5 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   232      IfxAsclin_OversamplingFactor_6  = 5,   /**< \brief oversampling factor 6 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   233      IfxAsclin_OversamplingFactor_7  = 6,   /**< \brief oversampling factor 7 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   234      IfxAsclin_OversamplingFactor_8  = 7,   /**< \brief oversampling factor 8 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   235      IfxAsclin_OversamplingFactor_9  = 8,   /**< \brief oversampling factor 9 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   236      IfxAsclin_OversamplingFactor_10 = 9,   /**< \brief oversampling factor 10 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   237      IfxAsclin_OversamplingFactor_11 = 10,  /**< \brief oversampling factor 11 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   238      IfxAsclin_OversamplingFactor_12 = 11,  /**< \brief oversampling factor 12 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   239      IfxAsclin_OversamplingFactor_13 = 12,  /**< \brief oversampling factor 13 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   240      IfxAsclin_OversamplingFactor_14 = 13,  /**< \brief oversampling factor 14 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   241      IfxAsclin_OversamplingFactor_15 = 14,  /**< \brief oversampling factor 15 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   242      IfxAsclin_OversamplingFactor_16 = 15   /**< \brief oversampling factor 16 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   243  } IfxAsclin_OversamplingFactor;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   244  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   245  /** \brief Type of parity bit attached to data bits\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   246   * Definition in Ifx_ASCLIN.FRAMECON.B.ODD
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   247   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   248  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   249  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   250      IfxAsclin_ParityType_even = 0,  /**< \brief even parity */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   251      IfxAsclin_ParityType_odd  = 1   /**< \brief odd parity */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   252  } IfxAsclin_ParityType;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   253  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   254  /** \brief Receive buffer mode\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   255   * Definition in Ifx_ASCLIN.RXFIFOCON.B.BUF
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   256   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   257  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   258  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   259      IfxAsclin_ReceiveBufferMode_rxFifo   = 0, /**< \brief RxFIFO mode */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   260      IfxAsclin_ReceiveBufferMode_rxBuffer = 1  /**< \brief single stage Rx buffer */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   261  } IfxAsclin_ReceiveBufferMode;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   262  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   263  /** \brief Polarity of the RTS and CTS signals\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   264   * Definition in Ifx_ASCLIN.IOCR.B.RCPOL
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   265   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   266  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   267  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   268      IfxAsclin_RtsCtsPolarity_activeHigh = 0,  /**< \brief ready/clear are active-high */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   269      IfxAsclin_RtsCtsPolarity_activeLow  = 1   /**< \brief ready/clear are active-low */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   270  } IfxAsclin_RtsCtsPolarity;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   271  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   272  /** \brief Defines the filling level that triggers a drain (RX) interrupt or DMA access\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   273   * Definition in Ifx_ASCLIN.RXFIFOCON.B.INTLEVEL
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   274   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   275  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   276  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   277      IfxAsclin_RxFifoInterruptLevel_1,     /**< \brief RX FIFO level 1  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   278      IfxAsclin_RxFifoInterruptLevel_2,     /**< \brief RX FIFO level 2  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   279      IfxAsclin_RxFifoInterruptLevel_3,     /**< \brief RX FIFO level 3  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   280      IfxAsclin_RxFifoInterruptLevel_4,     /**< \brief RX FIFO level 4  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   281      IfxAsclin_RxFifoInterruptLevel_5,     /**< \brief RX FIFO level 5  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   282      IfxAsclin_RxFifoInterruptLevel_6,     /**< \brief RX FIFO level 6  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   283      IfxAsclin_RxFifoInterruptLevel_7,     /**< \brief RX FIFO level 7  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   284      IfxAsclin_RxFifoInterruptLevel_8,     /**< \brief RX FIFO level 8  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   285      IfxAsclin_RxFifoInterruptLevel_9,     /**< \brief RX FIFO level 9  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   286      IfxAsclin_RxFifoInterruptLevel_10,    /**< \brief RX FIFO level 10  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   287      IfxAsclin_RxFifoInterruptLevel_11,    /**< \brief RX FIFO level 11  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   288      IfxAsclin_RxFifoInterruptLevel_12,    /**< \brief RX FIFO level 12  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   289      IfxAsclin_RxFifoInterruptLevel_13,    /**< \brief RX FIFO level 13  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   290      IfxAsclin_RxFifoInterruptLevel_14,    /**< \brief RX FIFO level 14  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   291      IfxAsclin_RxFifoInterruptLevel_15,    /**< \brief RX FIFO level 15  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   292      IfxAsclin_RxFifoInterruptLevel_16     /**< \brief RX FIFO level 16  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   293  } IfxAsclin_RxFifoInterruptLevel;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   294  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   295  /** \brief Defines the number of bytes read from the Rx FIFO with one FPI bus read\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   296   * Definition in Ifx_ASCLIN.RXFIFOCON.B.OUTW
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   297   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   298  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   299  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   300      IfxAsclin_RxFifoOutletWidth_0,     /**< \brief number of bytes 0  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   301      IfxAsclin_RxFifoOutletWidth_1,     /**< \brief number of bytes 1  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   302      IfxAsclin_RxFifoOutletWidth_2,     /**< \brief number of bytes 2  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   303      IfxAsclin_RxFifoOutletWidth_3      /**< \brief number of bytes 3  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   304  } IfxAsclin_RxFifoOutletWidth;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   305  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   306  /** \brief Alternate input selection for Rx signal.\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   307   * Definition in Ifx_ASCLIN.IOCR.B.ALTI
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   308   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   309  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   310  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   311      IfxAsclin_RxInputSelect_0,     /**< \brief alternate input selection 0  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   312      IfxAsclin_RxInputSelect_1,     /**< \brief alternate input selection 1  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   313      IfxAsclin_RxInputSelect_2,     /**< \brief alternate input selection 2  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   314      IfxAsclin_RxInputSelect_3,     /**< \brief alternate input selection 3  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   315      IfxAsclin_RxInputSelect_4,     /**< \brief alternate input selection 4  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   316      IfxAsclin_RxInputSelect_5,     /**< \brief alternate input selection 5  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   317      IfxAsclin_RxInputSelect_6,     /**< \brief alternate input selection 6  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   318      IfxAsclin_RxInputSelect_7      /**< \brief alternate input selection 7  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   319  } IfxAsclin_RxInputSelect;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   320  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   321  /** \brief Sample point position\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   322   * Definition in Ifx_ASCLIN.BITCON.B.SAMPLEPOINT
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   323   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   324  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   325  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   326      IfxAsclin_SamplePointPosition_1  = 1,   /**< \brief sample point position at 1 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   327      IfxAsclin_SamplePointPosition_2  = 2,   /**< \brief sample point position at 2 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   328      IfxAsclin_SamplePointPosition_3  = 3,   /**< \brief sample point position at 3 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   329      IfxAsclin_SamplePointPosition_4  = 4,   /**< \brief sample point position at 4 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   330      IfxAsclin_SamplePointPosition_5  = 5,   /**< \brief sample point position at 5 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   331      IfxAsclin_SamplePointPosition_6  = 6,   /**< \brief sample point position at 6 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   332      IfxAsclin_SamplePointPosition_7  = 7,   /**< \brief sample point position at 7 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   333      IfxAsclin_SamplePointPosition_8  = 8,   /**< \brief sample point position at 8 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   334      IfxAsclin_SamplePointPosition_9  = 9,   /**< \brief sample point position at 9 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   335      IfxAsclin_SamplePointPosition_10 = 10,  /**< \brief sample point position at 10 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   336      IfxAsclin_SamplePointPosition_11 = 11,  /**< \brief sample point position at 11 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   337      IfxAsclin_SamplePointPosition_12 = 12,  /**< \brief sample point position at 12 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   338      IfxAsclin_SamplePointPosition_13 = 13,  /**< \brief sample point position at 13 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   339      IfxAsclin_SamplePointPosition_14 = 14,  /**< \brief sample point position at 14 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   340      IfxAsclin_SamplePointPosition_15 = 15   /**< \brief sample point position at 15 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   341  } IfxAsclin_SamplePointPosition;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   342  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   343  /** \brief Number of samples per bit, sample mode/medianfilter\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   344   * Definition in Ifx_ASCLIN.BITCON.B.SM
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   345   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   346  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   347  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   348      IfxAsclin_SamplesPerBit_one   = 0, /**< \brief one sample per bit */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   349      IfxAsclin_SamplesPerBit_three = 1  /**< \brief three samples per bit */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   350  } IfxAsclin_SamplesPerBit;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   351  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   352  /** \brief SPI mode: defines the shift direction of the shift register.\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   353   * ASC and LIN mode: should be set to 0.\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   354   * Definition in Ifx_ASCLIN.FRAMECON.B.MSB
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   355   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   356  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   357  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   358      IfxAsclin_ShiftDirection_lsbFirst = 0,  /**< \brief LSB first */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   359      IfxAsclin_ShiftDirection_msbFirst = 1   /**< \brief MSB first */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   360  } IfxAsclin_ShiftDirection;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   361  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   362  /** \brief Defines the idle level of the SLSO signal, which is the level.\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   363   * Outside the data transmission, leading and trailing time intervals.\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   364   * Definition in Ifx_ASCLIN.IOCR.B.SPOL
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   365   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   366  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   367  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   368      IfxAsclin_SlavePolarity_idleLow  = 0, /**< \brief idle low */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   369      IfxAsclin_SlavePolarity_idlehigh = 1  /**< \brief idle high */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   370  } IfxAsclin_SlavePolarity;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   371  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   372  /** \brief Enable/disable the sensitivity of the module to sleep signal\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   373   * Definition in Ifx_ASCLIN.CLC.B.EDIS
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   374   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   375  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   376  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   377      IfxAsclin_SleepMode_enable  = 0, /**< \brief enables sleep mode */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   378      IfxAsclin_SleepMode_disable = 1  /**< \brief disables sleep mode */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   379  } IfxAsclin_SleepMode;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   380  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   381  /** \brief Error status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   382   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   383  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   384  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   385      IfxAsclin_Status_configurationError = 0,  /**< \brief Configuration error */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   386      IfxAsclin_Status_noError            = 1   /**< \brief No error */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   387  } IfxAsclin_Status;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   388  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   389  /** \brief ASC and LIN mode: number of stop bits (0 is not allowed), SPI mode: trailing delay.\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   390   * Definition in Ifx_ASCLIN.FRAMECON.B.STOP
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   391   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   392  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   393  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   394      IfxAsclin_StopBit_0,     /**< \brief number of stop bits 0  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   395      IfxAsclin_StopBit_1,     /**< \brief number of stop bits 1  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   396      IfxAsclin_StopBit_2,     /**< \brief number of stop bits 2  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   397      IfxAsclin_StopBit_3,     /**< \brief number of stop bits 3  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   398      IfxAsclin_StopBit_4,     /**< \brief number of stop bits 4  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   399      IfxAsclin_StopBit_5,     /**< \brief number of stop bits 5  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   400      IfxAsclin_StopBit_6,     /**< \brief number of stop bits 6  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   401      IfxAsclin_StopBit_7      /**< \brief number of stop bits 7  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   402  } IfxAsclin_StopBit;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   403  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   404  /** \brief OCDS Suspend Control (OCDS.SUS)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   405   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   406  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   407  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   408      IfxAsclin_SuspendMode_none = 0,  /**< \brief No suspend */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   409      IfxAsclin_SuspendMode_hard = 1,  /**< \brief Hard Suspend */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   410      IfxAsclin_SuspendMode_soft = 2   /**< \brief Soft Suspend */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   411  } IfxAsclin_SuspendMode;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   412  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   413  /** \brief Defines the number of bytes written to the Tx FIFO with one FPI bus write\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   414   * Definition in Ifx_ASCLIN.TXFIFOCON.B.INW
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   415   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   416  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   417  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   418      IfxAsclin_TxFifoInletWidth_0,     /**< \brief number of bytes 0  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   419      IfxAsclin_TxFifoInletWidth_1,     /**< \brief number of bytes 1  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   420      IfxAsclin_TxFifoInletWidth_2,     /**< \brief number of bytes 2  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   421      IfxAsclin_TxFifoInletWidth_3      /**< \brief number of bytes 3  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   422  } IfxAsclin_TxFifoInletWidth;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   423  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   424  /** \brief Defines the filling level that triggers a refill (TX) interrupt or DMA access\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   425   * Definition in Ifx_ASCLIN.TXFIFOCON.B.INTLEVEL
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   426   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   427  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   428  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   429      IfxAsclin_TxFifoInterruptLevel_0,     /**< \brief TX FIFO level 0  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   430      IfxAsclin_TxFifoInterruptLevel_1,     /**< \brief TX FIFO level 1  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   431      IfxAsclin_TxFifoInterruptLevel_2,     /**< \brief TX FIFO level 2  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   432      IfxAsclin_TxFifoInterruptLevel_3,     /**< \brief TX FIFO level 3  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   433      IfxAsclin_TxFifoInterruptLevel_4,     /**< \brief TX FIFO level 4  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   434      IfxAsclin_TxFifoInterruptLevel_5,     /**< \brief TX FIFO level 5  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   435      IfxAsclin_TxFifoInterruptLevel_6,     /**< \brief TX FIFO level 6  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   436      IfxAsclin_TxFifoInterruptLevel_7,     /**< \brief TX FIFO level 7  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   437      IfxAsclin_TxFifoInterruptLevel_8,     /**< \brief TX FIFO level 8  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   438      IfxAsclin_TxFifoInterruptLevel_9,     /**< \brief TX FIFO level 9  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   439      IfxAsclin_TxFifoInterruptLevel_10,    /**< \brief TX FIFO level 10  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   440      IfxAsclin_TxFifoInterruptLevel_11,    /**< \brief TX FIFO level 11  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   441      IfxAsclin_TxFifoInterruptLevel_12,    /**< \brief TX FIFO level 12  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   442      IfxAsclin_TxFifoInterruptLevel_13,    /**< \brief TX FIFO level 13  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   443      IfxAsclin_TxFifoInterruptLevel_14,    /**< \brief TX FIFO level 14  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   444      IfxAsclin_TxFifoInterruptLevel_15     /**< \brief TX FIFO level 15  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   445  } IfxAsclin_TxFifoInterruptLevel;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   446  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   447  /** \} */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   448  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   449  /** \addtogroup IfxLld_Asclin_Std_Operative
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   450   * \{ */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   451  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   452  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   453  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   454  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   455  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   456  /** \brief clears all the flags
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   457   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   458   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   459   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   460  IFX_INLINE void IfxAsclin_clearAllFlags(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   461  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   462  /** \brief Clears the break detected flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   463   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   464   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   465   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   466  IFX_INLINE void IfxAsclin_clearBreakDetectedFlag(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   467  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   468  /** \brief Clears the collision detection error flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   469   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   470   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   471   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   472  IFX_INLINE void IfxAsclin_clearCollisionDetectionErrorFlag(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   473  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   474  /** \brief Clears the falling edge detected flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   475   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   476   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   477   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   478  IFX_INLINE void IfxAsclin_clearFallingEdgeDetectedFlag(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   479  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   480  /** \brief Clears the frame error flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   481   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   482   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   483   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   484  IFX_INLINE void IfxAsclin_clearFrameErrorFlag(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   485  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   486  /** \brief Clears the header timeout flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   487   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   488   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   489   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   490  IFX_INLINE void IfxAsclin_clearHeaderTimeoutFlag(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   491  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   492  /** \brief Clears the kernel reset status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   493   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   494   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   495   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   496  IFX_INLINE void IfxAsclin_clearKernelResetStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   497  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   498  /** \brief Clears the auto baudrate detection error flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   499   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   500   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   501   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   502  IFX_INLINE void IfxAsclin_clearLinAutoBaudDetectionErrorFlag(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   503  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   504  /** \brief Clears the LIN checksum error flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   505   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   506   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   507   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   508  IFX_INLINE void IfxAsclin_clearLinChecksumErrorFlag(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   509  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   510  /** \brief Clears the LIN parity error flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   511   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   512   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   513   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   514  IFX_INLINE void IfxAsclin_clearLinParityErrorFlag(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   515  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   516  /** \brief Clears the parity error flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   517   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   518   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   519   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   520  IFX_INLINE void IfxAsclin_clearParityErrorFlag(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   521  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   522  /** \brief Clears the raising edge detected flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   523   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   524   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   525   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   526  IFX_INLINE void IfxAsclin_clearRaisingEdgeDetectedFlag(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   527  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   528  /** \brief Clears the response timeout flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   529   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   530   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   531   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   532  IFX_INLINE void IfxAsclin_clearResponseTimeoutFlag(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   533  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   534  /** \brief Clears the Rx FIFO level flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   535   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   536   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   537   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   538  IFX_INLINE void IfxAsclin_clearRxFifoFillLevelFlag(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   539  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   540  /** \brief Clears the Rx FIFO overflow flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   541   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   542   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   543   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   544  IFX_INLINE void IfxAsclin_clearRxFifoOverflowFlag(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   545  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   546  /** \brief Clears the Rx FIFO underflow flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   547   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   548   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   549   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   550  IFX_INLINE void IfxAsclin_clearRxFifoUnderflowFlag(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   551  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   552  /** \brief Clears the receive header end flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   553   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   554   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   555   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   556  IFX_INLINE void IfxAsclin_clearRxHeaderEndFlag(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   557  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   558  /** \brief Clears the receive response end flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   559   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   560   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   561   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   562  IFX_INLINE void IfxAsclin_clearRxResponseEndFlag(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   563  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   564  /** \brief Clears the transmission pending flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   565   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   566   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   567   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   568  IFX_INLINE void IfxAsclin_clearTransmissionCompletedFlag(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   569  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   570  /** \brief Clears the Tx FIFO level flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   571   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   572   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   573   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   574  IFX_INLINE void IfxAsclin_clearTxFifoFillLevelFlag(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   575  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   576  /** \brief Clears the Tx FIFO overflow flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   577   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   578   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   579   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   580  IFX_INLINE void IfxAsclin_clearTxFifoOverflowFlag(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   581  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   582  /** \brief Clears the transmit header end flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   583   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   584   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   585   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   586  IFX_INLINE void IfxAsclin_clearTxHeaderEndFlag(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   587  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   588  /** \brief Clears the transmit response end flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   589   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   590   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   591   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   592  IFX_INLINE void IfxAsclin_clearTxResponseEndFlag(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   593  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   594  /** \brief Flushes (empties) the Rx FIFO
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   595   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   596   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   597   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   598  IFX_INLINE void IfxAsclin_flushRxFifo(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   599  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   600  /** \brief Flushes (empties) the Tx FIFO
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   601   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   602   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   603   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   604  IFX_INLINE void IfxAsclin_flushTxFifo(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   605  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   606  /** \brief Sets the baudrate detection's lower limit
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   607   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   608   * \param limit value of the lower limit
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   609   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   610   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   611  IFX_INLINE void IfxAsclin_setBrdLowerlimt(Ifx_ASCLIN *asclin, uint8 limit);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   612  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   613  /** \brief Sets the baudrate detection's upper limit
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   614   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   615   * \param limit value of the upper limit
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   616   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   617   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   618  IFX_INLINE void IfxAsclin_setBrdUpperlimt(Ifx_ASCLIN *asclin, uint8 limit);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   619  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   620  /** \brief Sets the checksum injection
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   621   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   622   * \param csi checksum injection selection (not written / written)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   623   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   624   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   625  IFX_INLINE void IfxAsclin_setChecksumInjection(Ifx_ASCLIN *asclin, IfxAsclin_ChecksumInjection csi);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   626  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   627  /** \brief Sets the checksum mode
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   628   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   629   * \param mode checksum mode selection (classic / enhanced)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   630   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   631   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   632  IFX_INLINE void IfxAsclin_setChecksumMode(Ifx_ASCLIN *asclin, IfxAsclin_Checksum mode);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   633  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   634  /** \brief Sets the data length (number of bits per transfer)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   635   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   636   * \param length data length selection
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   637   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   638   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   639  IFX_INLINE void IfxAsclin_setDataLength(Ifx_ASCLIN *asclin, IfxAsclin_DataLength length);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   640  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   641  /** \brief Sets the denominator of the fractional divider
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   642   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   643   * \param denominator value of the denominator
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   644   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   645   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   646  IFX_INLINE void IfxAsclin_setDenominator(Ifx_ASCLIN *asclin, uint16 denominator);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   647  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   648  /** \brief Sets the disable module request
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   649   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   650   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   651   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   652  IFX_INLINE void IfxAsclin_setDisableModuleRequest(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   653  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   654  /** \brief Sets the enable module request
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   655   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   656   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   657   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   658  IFX_INLINE void IfxAsclin_setEnableModuleRequest(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   659  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   660  /** \brief Sets digital glitch filter depth
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   661   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   662   * \param depth digital glitch filter depth selection (1 to 63)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   663   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   664   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   665  IFX_INLINE void IfxAsclin_setFilterDepth(Ifx_ASCLIN *asclin, uint8 depth);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   666  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   667  /** \brief Sets the header response selection
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   668   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   669   * \param type type of selection (header and response or header only)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   670   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   671   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   672  IFX_INLINE void IfxAsclin_setHeaderResponseSelect(Ifx_ASCLIN *asclin, IfxAsclin_HeaderResponseSelect type);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   673  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   674  /** \brief Sets the idle delay
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   675   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   676   * \param delay idle delay selection
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   677   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   678   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   679  IFX_INLINE void IfxAsclin_setIdleDelay(Ifx_ASCLIN *asclin, IfxAsclin_IdleDelay delay);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   680  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   681  /** \brief Sets the kernal reset of the KRST1
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   682   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   683   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   684   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   685  IFX_INLINE void IfxAsclin_setKernelResetOne(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   686  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   687  /** \brief Sets the kernel reset of the KRST0
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   688   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   689   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   690   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   691  IFX_INLINE void IfxAsclin_setKernelResetZero(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   692  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   693  /** \brief Sets the lead delay
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   694   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   695   * \param delay lead delay selection
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   696   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   697   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   698  IFX_INLINE void IfxAsclin_setLeadDelay(Ifx_ASCLIN *asclin, IfxAsclin_LeadDelay delay);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   699  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   700  /** \brief Sets the LIN break length
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   701   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   702   * \param length value of the break length
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   703   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   704   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   705  IFX_INLINE void IfxAsclin_setLinBreakLength(Ifx_ASCLIN *asclin, uint8 length);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   706  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   707  /** \brief Sets the LIN header timeout
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   708   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   709   * \param timeout value of the header timeout
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   710   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   711   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   712  IFX_INLINE void IfxAsclin_setLinHeaderTimeout(Ifx_ASCLIN *asclin, uint8 timeout);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   713  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   714  /** \brief Sets the LIN mode of operation
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   715   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   716   * \param mode mode selection (slave / master)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   717   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   718   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   719  IFX_INLINE void IfxAsclin_setLinMode(Ifx_ASCLIN *asclin, IfxAsclin_LinMode mode);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   720  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   721  /** \brief Sets the LIN response timeout mode
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   722   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   723   * \param mode LIN response timeout mode selection
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   724   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   725   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   726  IFX_INLINE void IfxAsclin_setLinResponseTimeoutMode(Ifx_ASCLIN *asclin, IfxAsclin_LinResponseTimeoutMode mode);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   727  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   728  /** \brief Sets the LIN response timeout threshold
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   729   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   730   * \param threshold value of the tomeout threshold (1 to 256 bit times)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   731   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   732   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   733  IFX_INLINE void IfxAsclin_setLinResponseTimeoutThreshold(Ifx_ASCLIN *asclin, uint16 threshold);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   734  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   735  /** \brief Sets the numerator of the fractional divider
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   736   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   737   * \param numerator value of the numerator
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   738   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   739   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   740  IFX_INLINE void IfxAsclin_setNumerator(Ifx_ASCLIN *asclin, uint16 numerator);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   741  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   742  /** \brief Sets the division ratio of the baudrate post divider
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   743   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   744   * \param ovsFactor value of oversampling factor
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   745   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   746   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   747  IFX_INLINE void IfxAsclin_setOversampling(Ifx_ASCLIN *asclin, IfxAsclin_OversamplingFactor ovsFactor);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   748  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   749  /** \brief Sets the parity type
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   750   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   751   * \param type parity type selction (even / odd)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   752   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   753   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   754  IFX_INLINE void IfxAsclin_setParityType(Ifx_ASCLIN *asclin, IfxAsclin_ParityType type);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   755  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   756  /** \brief Sets the division ratio of the predivider (prescaler)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   757   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   758   * \param prescaler value of prescaler
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   759   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   760   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   761  IFX_INLINE void IfxAsclin_setPrescaler(Ifx_ASCLIN *asclin, uint16 prescaler);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   762  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   763  /** \brief Sets the receive buffer mode
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   764   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   765   * \param mode receive buffer mode selection (Rx FIFO or single stage Rx buffer)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   766   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   767   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   768  IFX_INLINE void IfxAsclin_setRxBufferMode(Ifx_ASCLIN *asclin, IfxAsclin_ReceiveBufferMode mode);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   769  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   770  /** \brief Sets the Tx FIFO interrupt level
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   771   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   772   * \param level interrupt level selection
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   773   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   774   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   775  IFX_INLINE void IfxAsclin_setRxFifoInterruptLevel(Ifx_ASCLIN *asclin, IfxAsclin_RxFifoInterruptLevel level);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   776  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   777  /** \brief Sets the receive FIFO outlet width
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   778   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   779   * \param width number of bytes read to the Rx FIFO with one FPI bus read
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   780   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   781   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   782  IFX_INLINE void IfxAsclin_setRxFifoOutletWidth(Ifx_ASCLIN *asclin, IfxAsclin_RxFifoOutletWidth width);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   783  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   784  /** \brief Sets the sample mode (number of samples per bit / median filter)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   785   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   786   * \param medianFilter value of the median filter
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   787   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   788   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   789  IFX_INLINE void IfxAsclin_setSampleMode(Ifx_ASCLIN *asclin, IfxAsclin_SamplesPerBit medianFilter);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   790  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   791  /** \brief Sets the sampling point position
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   792   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   793   * \param spPosition sample point position selection
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   794   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   795   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   796  IFX_INLINE void IfxAsclin_setSamplePointPosition(Ifx_ASCLIN *asclin, IfxAsclin_SamplePointPosition spPosition);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   797  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   798  /** \brief Sets the shift direction
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   799   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   800   * \param dir shift direction selection (LSB / MSB first)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   801   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   802   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   803  IFX_INLINE void IfxAsclin_setShiftDirection(Ifx_ASCLIN *asclin, IfxAsclin_ShiftDirection dir);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   804  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   805  /** \brief Sets the number of stop bits
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   806   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   807   * \param stopBit number of stop bits selection
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   808   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   809   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   810  IFX_INLINE void IfxAsclin_setStopBit(Ifx_ASCLIN *asclin, IfxAsclin_StopBit stopBit);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   811  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   812  /** \brief Sets the transmit header request flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   813   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   814   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   815   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   816  IFX_INLINE void IfxAsclin_setTransmitHeaderRequestFlag(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   817  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   818  /** \brief Sets the transmit response request flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   819   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   820   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   821   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   822  IFX_INLINE void IfxAsclin_setTransmitResponseRequestFlag(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   823  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   824  /** \brief Sets the transmission wake request flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   825   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   826   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   827   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   828  IFX_INLINE void IfxAsclin_setTransmitWakeRequestFlag(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   829  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   830  /** \brief Sets the transmit FIFO inlet width
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   831   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   832   * \param width number of bytes written to the Tx FIFO with one FPI bus write
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   833   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   834   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   835  IFX_INLINE void IfxAsclin_setTxFifoInletWidth(Ifx_ASCLIN *asclin, IfxAsclin_TxFifoInletWidth width);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   836  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   837  /** \brief Sets the Tx FIFO interrupt level
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   838   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   839   * \param level interrupt level selection
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   840   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   841   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   842  IFX_INLINE void IfxAsclin_setTxFifoInterruptLevel(Ifx_ASCLIN *asclin, IfxAsclin_TxFifoInterruptLevel level);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   843  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   844  /** \} */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   845  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   846  /** \addtogroup IfxLld_Asclin_Std_Utility
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   847   * \{ */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   848  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   849  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   850  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   851  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   852  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   853  /** \brief Returns the break detected flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   854   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   855   * \return break detected flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   856   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   857  IFX_INLINE boolean IfxAsclin_getBreakDetectedFlagStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   858  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   859  /** \brief Returns the clock source
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   860   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   861   * \return clock source
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   862   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   863  IFX_INLINE uint8 IfxAsclin_getClockSource(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   864  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   865  /** \brief Returns the clock status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   866   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   867   * \return clock status (off / on)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   868   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   869  IFX_INLINE boolean IfxAsclin_getClockStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   870  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   871  /** \brief Returns the collision detection error flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   872   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   873   * \return collision detection error flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   874   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   875  IFX_INLINE boolean IfxAsclin_getCollisionDetectionErrorFlagStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   876  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   877  /** \brief Returns  the falling edge detected flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   878   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   879   * \return falling edge detected flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   880   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   881  IFX_INLINE boolean IfxAsclin_getFallingEdgeDetectedFlagStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   882  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   883  /** \brief Returns the frame error flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   884   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   885   * \return frame error flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   886   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   887  IFX_INLINE boolean IfxAsclin_getFrameErrorFlagStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   888  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   889  /** \brief Returns the header timeout flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   890   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   891   * \return header timeout flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   892   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   893  IFX_INLINE boolean IfxAsclin_getHeaderTimeoutFlagStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   894  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   895  /** \brief Returns the kernel reset status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   896   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   897   * \return kernel reset status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   898   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   899  IFX_INLINE boolean IfxAsclin_getKernelResetStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   900  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   901  /** \brief Returns the LIN auto baudrate detection error flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   902   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   903   * \return LIN auto baudrate detection error flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   904   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   905  IFX_INLINE boolean IfxAsclin_getLinAutoBaudDetectionErrorFlagStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   906  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   907  /** \brief Returns the LIN checksum error flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   908   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   909   * \return LIN checksum error flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   910   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   911  IFX_INLINE boolean IfxAsclin_getLinChecksumErrorFlagStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   912  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   913  /** \brief Returns the LIN parity error flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   914   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   915   * \return LIN parity error flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   916   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   917  IFX_INLINE boolean IfxAsclin_getLinParityErrorFlagStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   918  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   919  /** \brief Returns the module status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   920   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   921   * \return module status (enabled / disabled)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   922   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   923  IFX_INLINE boolean IfxAsclin_getModuleStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   924  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   925  /** \brief Returns the parity error flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   926   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   927   * \return parity error flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   928   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   929  IFX_INLINE boolean IfxAsclin_getParityErrorFlagStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   930  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   931  /** \brief Returns the division ratio of the predivider (prescaler)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   932   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   933   * \return value of prescaler
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   934   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   935  IFX_INLINE uint16 IfxAsclin_getPrescaler(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   936  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   937  /** \brief Returns the raising edge detected flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   938   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   939   * \return raising edge detected flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   940   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   941  IFX_INLINE boolean IfxAsclin_getRaisingEdgeDetectedFlagStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   942  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   943  /** \brief Returns the received signal status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   944   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   945   * \return received signal status (0 is low & 1 is high)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   946   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   947  IFX_INLINE boolean IfxAsclin_getReceiveSignalStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   948  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   949  /** \brief Returns the response timeout flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   950   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   951   * \return response timeout flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   952   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   953  IFX_INLINE boolean IfxAsclin_getResponseTimeoutFlagStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   954  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   955  /** \brief Returns the current filling level of Tx FIFO
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   956   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   957   * \return current filling level of Rx FIFO
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   958   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   959  IFX_INLINE uint8 IfxAsclin_getRxFifoFillLevel(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   960  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   961  /** \brief Returns the Rx FIFO level flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   962   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   963   * \return Rx FIFO level flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   964   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   965  IFX_INLINE boolean IfxAsclin_getRxFifoFillLevelFlagStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   966  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   967  /** \brief Returns the receive FIFO inlet width
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   968   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   969   * \return number of bytes read to the Rx FIFO with one FPI bus read
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   970   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   971  IFX_INLINE uint8 IfxAsclin_getRxFifoOutletWidth(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   972  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   973  /** \brief Returns the Rx FIFO overflow flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   974   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   975   * \return Rx FIFO overflow flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   976   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   977  IFX_INLINE boolean IfxAsclin_getRxFifoOverflowFlagStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   978  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   979  /** \brief Returns the Rx FIFO underflow flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   980   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   981   * \return Rx FIFO underflow flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   982   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   983  IFX_INLINE boolean IfxAsclin_getRxFifoUnderflowFlagStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   984  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   985  /** \brief Returns the receive header end flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   986   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   987   * \return receive header end flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   988   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   989  IFX_INLINE boolean IfxAsclin_getRxHeaderEndFlagStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   990  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   991  /** \brief Returns the receive response end flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   992   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   993   * \return receive response end flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   994   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   995  IFX_INLINE boolean IfxAsclin_getRxResponseEndFlagStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   996  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   997  /** \brief Returns the transmission pending flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   998   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   999   * \return transmission pending flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1000   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1001  IFX_INLINE boolean IfxAsclin_getTransmissionCompletedFlagStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1002  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1003  /** \brief Returns the transmit signal status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1004   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1005   * \return transmit signal status (0 is low & 1 is high)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1006   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1007  IFX_INLINE boolean IfxAsclin_getTransmitSignalStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1008  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1009  /** \brief Returns the current filling level of Tx FIFO
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1010   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1011   * \return current filling level of Tx FIFO
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1012   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1013  IFX_INLINE uint8 IfxAsclin_getTxFifoFillLevel(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1014  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1015  /** \brief Returns the Tx FIFO level flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1016   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1017   * \return Tx FIFO level flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1018   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1019  IFX_INLINE boolean IfxAsclin_getTxFifoFillLevelFlagStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1020  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1021  /** \brief Returns the transmit FIFO inlet width
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1022   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1023   * \return number of bytes written to the Tx FIFO with one FPI bus write
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1024   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1025  IFX_INLINE uint8 IfxAsclin_getTxFifoInletWidth(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1026  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1027  /** \brief Returns the Tx FIFO overflow flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1028   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1029   * \return Tx FIFO overflow flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1030   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1031  IFX_INLINE boolean IfxAsclin_getTxFifoOverflowFlagStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1032  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1033  /** \brief Returns the transmit header end flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1034   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1035   * \return transmit header end flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1036   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1037  IFX_INLINE boolean IfxAsclin_getTxHeaderEndFlagStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1038  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1039  /** \brief Returns the transmit response end flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1040   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1041   * \return transmit response end flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1042   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1043  IFX_INLINE boolean IfxAsclin_getTxResponseEndFlagStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1044  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1045  /** \brief Sets the sensitivity of the module to sleep signal
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1046   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1047   * \param mode mode selection (enable / disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1048   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1049   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1050  IFX_INLINE void IfxAsclin_setSleepMode(Ifx_ASCLIN *asclin, IfxAsclin_SleepMode mode);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1051  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1052  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1053  /*-------------------------Global Function Prototypes-------------------------*/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1054  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1055  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1056  /** \brief API to get the address for ASCLIN HW module register memory map
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1057   * \param asclin Resource index of the ASCLIN
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1058   * \return ASCLIN module register address
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1059   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1060  IFX_EXTERN Ifx_ASCLIN *IfxAsclin_getAddress(IfxAsclin_Index asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1061  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1062  /** \brief Returns the ASCLIN module FA frequency in Hz
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1063   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1064   * \return Returns the ASCLIN module FA frequency in Hz
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1065   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1066  IFX_EXTERN float32 IfxAsclin_getFaFrequency(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1067  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1068  /** \brief API to get the resource index of the ASCLIN specified.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1069   * \return asclin resource index
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1070   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1071  IFX_EXTERN IfxAsclin_Index IfxAsclin_getIndex(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1072  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1073  /** \brief Returns the OVS frequency
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1074   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1075   * \return Returns the ASCLIN module OVS frequency in Hz
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1076   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1077  IFX_EXTERN float32 IfxAsclin_getOvsFrequency(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1078  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1079  /** \brief Returns the PD frequency
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1080   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1081   * \return Returns the ASCLIN module PD frequency in Hz
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1082   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1083  IFX_EXTERN float32 IfxAsclin_getPdFrequency(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1084  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1085  /** \brief Returns the SHIFT frequency
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1086   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1087   * \return Returns the ASCLIN module SHIFT frequency in Hz
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1088   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1089  IFX_EXTERN float32 IfxAsclin_getShiftFrequency(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1090  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1091  /** \brief resets Asclin kernel
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1092   * \param asclin pointer to ASCLIN resgisters
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1093   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1094   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1095  IFX_EXTERN void IfxAsclin_resetModule(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1096  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1097  /** \} */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1098  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1099  /** \addtogroup IfxLld_Asclin_Std_Configuration
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1100   * \{ */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1101  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1102  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1103  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1104  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1105  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1106  /** \brief disables all flags
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1107   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1108   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1109   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1110  IFX_INLINE void IfxAsclin_disableAllFlags(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1111  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1112  /** \brief Enables/disables the auto baudrate detection
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1113   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1114   * \param enable choice (enable / disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1115   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1116   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1117  IFX_INLINE void IfxAsclin_enableAutoBaudrateDetection(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1118  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1119  /** \brief Enables/disables break detected flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1120   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1121   * \param enable choice (enable / disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1122   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1123   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1124  IFX_INLINE void IfxAsclin_enableBreakDetectedFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1125  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1126  /** \brief Enables/disables the collision detection
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1127   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1128   * \param enable choice (enable/disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1129   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1130   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1131  IFX_INLINE void IfxAsclin_enableCollisionDetection(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1132  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1133  /** \brief Enables/disables LIN collision detection error flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1134   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1135   * \param enable choice (enable / disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1136   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1137   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1138  IFX_INLINE void IfxAsclin_enableCollisionDetectionErrorFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1139  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1140  /** \brief Enables/disables CTS
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1141   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1142   * \param enable choice (enable/disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1143   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1144   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1145  IFX_INLINE void IfxAsclin_enableCts(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1146  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1147  /** \brief Enables/disables falling edge detected flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1148   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1149   * \param enable choice (enable / disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1150   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1151   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1152  IFX_INLINE void IfxAsclin_enableFallingEdgeDetectedFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1153  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1154  /** \brief Enables/disables frame error flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1155   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1156   * \param enable choice (enable / disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1157   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1158   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1159  IFX_INLINE void IfxAsclin_enableFrameErrorFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1160  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1161  /** \brief Enables/disables the hardware checksum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1162   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1163   * \param enable choice (enable / disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1164   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1165   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1166  IFX_INLINE void IfxAsclin_enableHardwareChecksum(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1167  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1168  /** \brief Enables/disables header timeout flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1169   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1170   * \param enable choice (enable / disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1171   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1172   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1173  IFX_INLINE void IfxAsclin_enableHeaderTimeoutFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1174  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1175  /** \brief Enables/disables LIN auto baudrate detection error flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1176   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1177   * \param enable choice (enable / disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1178   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1179   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1180  IFX_INLINE void IfxAsclin_enableLinAutoBaudDetectionErrorFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1181  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1182  /** \brief Enables/disables LIN checksum error flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1183   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1184   * \param enable choice (enable / disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1185   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1186   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1187  IFX_INLINE void IfxAsclin_enableLinChecksumErrorFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1188  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1189  /** \brief Enables/disables LIN parity error flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1190   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1191   * \param enable choice (enable / disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1192   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1193   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1194  IFX_INLINE void IfxAsclin_enableLinParityErrorFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1195  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1196  /** \brief Enables/disables the loop back mode
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1197   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1198   * \param enable choice (enable/disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1199   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1200   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1201  IFX_INLINE void IfxAsclin_enableLoopBackMode(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1202  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1203  /** \brief Enables/disables the parity bit attachment to tha data bits
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1204   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1205   * \param enable choice (enable/disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1206   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1207   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1208  IFX_INLINE void IfxAsclin_enableParity(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1209  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1210  /** \brief Enables/disables parity error flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1211   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1212   * \param enable choice (enable / disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1213   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1214   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1215  IFX_INLINE void IfxAsclin_enableParityErrorFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1216  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1217  /** \brief Enables/disables raising edge detected flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1218   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1219   * \param enable choice (enable / disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1220   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1221   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1222  IFX_INLINE void IfxAsclin_enableRaisingEdgeDetectedFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1223  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1224  /** \brief Enables/disables response timeout flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1225   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1226   * \param enable choice (enable / disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1227   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1228   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1229  IFX_INLINE void IfxAsclin_enableResponseTimeoutFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1230  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1231  /** \brief Enables/disables Rx FIFO level flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1232   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1233   * \param enable choice (enable / disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1234   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1235   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1236  IFX_INLINE void IfxAsclin_enableRxFifoFillLevelFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1237  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1238  /** \brief Enables/disables the receive FIFO outlet to allow filling of Rx FIFO through shift register
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1239   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1240   * \param enable choice (enable/disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1241   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1242   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1243  IFX_INLINE void IfxAsclin_enableRxFifoInlet(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1244  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1245  /** \brief Enables/disables Rx FIFO overflow flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1246   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1247   * \param enable choice (enable / disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1248   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1249   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1250  IFX_INLINE void IfxAsclin_enableRxFifoOverflowFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1251  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1252  /** \brief Enables/disables Rx FIFO underflow flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1253   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1254   * \param enable choice (enable / disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1255   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1256   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1257  IFX_INLINE void IfxAsclin_enableRxFifoUnderflowFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1258  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1259  /** \brief Enables/disables receive header end flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1260   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1261   * \param enable choice (enable / disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1262   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1263   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1264  IFX_INLINE void IfxAsclin_enableRxHeaderEndFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1265  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1266  /** \brief Enables/disables receive response end flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1267   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1268   * \param enable choice (enable / disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1269   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1270   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1271  IFX_INLINE void IfxAsclin_enableRxResponseEndFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1272  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1273  /** \brief Enables/disables transmission completed flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1274   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1275   * \param enable choice (enable / disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1276   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1277   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1278  IFX_INLINE void IfxAsclin_enableTransmissionCompletedFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1279  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1280  /** \brief Enables/disables Tx FIFO level flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1281   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1282   * \param enable choice (enable / disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1283   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1284   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1285  IFX_INLINE void IfxAsclin_enableTxFifoFillLevelFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1286  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1287  /** \brief Enables/disables the transmit FIFO outlet to allow transmission
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1288   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1289   * \param enable choice (enable/disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1290   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1291   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1292  IFX_INLINE void IfxAsclin_enableTxFifoOutlet(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1293  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1294  /** \brief Enables/disables Tx FIFO overflow flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1295   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1296   * \param enable choice (enable / disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1297   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1298   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1299  IFX_INLINE void IfxAsclin_enableTxFifoOverflowFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1300  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1301  /** \brief Enables/disables transmit header end flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1302   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1303   * \param enable choice (enable / disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1304   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1305   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1306  IFX_INLINE void IfxAsclin_enableTxHeaderEndFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1307  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1308  /** \brief Enables/disables transmit response end flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1309   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1310   * \param enable choice (enable / disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1311   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1312   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1313  IFX_INLINE void IfxAsclin_enableTxResponseEndFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1314  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1315  /** \brief Returns the module's suspend state.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1316   * TRUE :if module is suspended.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1317   * FALSE:if module is not yet suspended.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1318   * \param asclin Pointer to ASCLIN module registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1319   * \return Suspend status (TRUE / FALSE)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1320   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1321  IFX_INLINE boolean IfxAsclin_isModuleSuspended(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1322  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1323  /** \brief Selects the clock polarity
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1324   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1325   * \param cpol CPOL selection
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1326   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1327   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1328  IFX_INLINE void IfxAsclin_setClockPolarity(Ifx_ASCLIN *asclin, IfxAsclin_ClockPolarity cpol);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1329  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1330  /** \brief Selects the CTS input pin
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1331   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1332   * \param ctsi CTS input pin selection
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1333   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1334   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1335  IFX_INLINE void IfxAsclin_setCtsInput(Ifx_ASCLIN *asclin, IfxAsclin_CtsInputSelect ctsi);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1336  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1337  /** \brief Selects the module's mode of operation
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1338   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1339   * \param mode mode selction
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1340   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1341   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1342  IFX_INLINE void IfxAsclin_setFrameMode(Ifx_ASCLIN *asclin, IfxAsclin_FrameMode mode);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1343  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1344  /** \brief Selects the RTS/CTS polarity
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1345   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1346   * \param rcpol RCPOL selection
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1347   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1348   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1349  IFX_INLINE void IfxAsclin_setRtsCtsPolarity(Ifx_ASCLIN *asclin, IfxAsclin_RtsCtsPolarity rcpol);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1350  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1351  /** \brief Selects the alternate input for Rx signal
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1352   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1353   * \param alti alternate input selection of Rx signal
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1354   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1355   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1356  IFX_INLINE void IfxAsclin_setRxInput(Ifx_ASCLIN *asclin, IfxAsclin_RxInputSelect alti);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1357  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1358  /** \brief Selects the slave polarity
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1359   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1360   * \param spol SPOL selection
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1361   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1362   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1363  IFX_INLINE void IfxAsclin_setSlavePolarity(Ifx_ASCLIN *asclin, IfxAsclin_SlavePolarity spol);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1364  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1365  /** \brief Configure the Module to Hard/Soft suspend mode.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1366   * Note: The api works only when the OCDS is enabled and in Supervisor Mode. When OCDS is disabled the OCS suspend control is ineffective.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1367   * \param asclin Pointer to ASCLIN module registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1368   * \param mode Module suspend mode
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1369   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1370   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1371  IFX_INLINE void IfxAsclin_setSuspendMode(Ifx_ASCLIN *asclin, IfxAsclin_SuspendMode mode);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1372  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1373  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1374  /*-------------------------Global Function Prototypes-------------------------*/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1375  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1376  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1377  /** \brief Set the bit timing
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1378   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1379   * \note this function required FA source and the PD frequency to be set to their final values
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1380   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1381   * \param baudrate Required baudrate
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1382   * \param oversampling The oversampling factor
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1383   * \param samplepoint The sample point position
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1384   * \param medianFilter Number of samples per bit (median filter)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1385   * \return TRUE if configuration was successfull
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1386   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1387  IFX_EXTERN boolean IfxAsclin_setBitTiming(Ifx_ASCLIN *asclin, float32 baudrate, IfxAsclin_OversamplingFactor oversampling, IfxAsclin_SamplePointPosition samplepoint, IfxAsclin_SamplesPerBit medianFilter);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1388  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1389  /** \} */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1390  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1391  /** \addtogroup IfxLld_Asclin_Std_External
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1392   * \{ */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1393  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1394  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1395  /*-------------------------Global Function Prototypes-------------------------*/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1396  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1397  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1398  /** \brief Disables the module
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1399   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1400   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1401   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1402  IFX_EXTERN void IfxAsclin_disableModule(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1403  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1404  /** \brief Enables the ASC error interrupt Flags
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1405   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1406   * \param parEnable parity error
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1407   * \param rfoEnable Rx FIFO overflow error
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1408   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1409   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1410  IFX_EXTERN void IfxAsclin_enableAscErrorFlags(Ifx_ASCLIN *asclin, boolean parEnable, boolean rfoEnable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1411  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1412  /** \brief Enables the module
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1413   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1414   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1415   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1416  IFX_EXTERN void IfxAsclin_enableModule(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1417  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1418  /** \brief Returns the SRC pointer for ERR
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1419   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1420   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1421  IFX_EXTERN volatile Ifx_SRC_SRCR *IfxAsclin_getSrcPointerEr(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1422  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1423  /** \brief Returns the  SRC pointer for Rx
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1424   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1425   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1426  IFX_EXTERN volatile Ifx_SRC_SRCR *IfxAsclin_getSrcPointerRx(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1427  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1428  /** \brief Returns the SRC pointer for Tx
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1429   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1430   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1431  IFX_EXTERN volatile Ifx_SRC_SRCR *IfxAsclin_getSrcPointerTx(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1432  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1433  /** \brief Reads data up to 16 bits
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1434   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1435   * \param data Array where the read data shall be stored
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1436   * \param count number of items to read
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1437   * \return number of items that could not be read
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1438   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1439  IFX_EXTERN uint32 IfxAsclin_read16(Ifx_ASCLIN *asclin, uint16 *data, uint32 count);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1440  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1441  /** \brief Reads data up to 32 bits
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1442   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1443   * \param data Array where the read data shall be stored
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1444   * \param count number of items to read
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1445   * \return number of items that could not be read
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1446   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1447  IFX_EXTERN uint32 IfxAsclin_read32(Ifx_ASCLIN *asclin, uint32 *data, uint32 count);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1448  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1449  /** \brief Reads data up to 8 bits
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1450   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1451   * \param data Array where the read data shall be stored
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1452   * \param count number of items to read
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1453   * \return number of items that could not be read
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1454   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1455  IFX_EXTERN uint32 IfxAsclin_read8(Ifx_ASCLIN *asclin, uint8 *data, uint32 count);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1456  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1457  /** \brief Sets the baudrate bit fields
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1458   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1459   * \param prescaler division ratio of the predivider
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1460   * \param numerator numerator of the fractional divider
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1461   * \param denominator denominator of the fractional divider
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1462   * \param oversampling division ratio of the baudrate postdivider
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1463   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1464   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1465  IFX_EXTERN void IfxAsclin_setBaudrateBitFields(Ifx_ASCLIN *asclin, uint16 prescaler, uint16 numerator, uint16 denominator, IfxAsclin_OversamplingFactor oversampling);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1466  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1467  /** \brief Sets the  clock source
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1468   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1469   * \param clockSource clock source selection
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1470   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1471   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1472  IFX_EXTERN void IfxAsclin_setClockSource(Ifx_ASCLIN *asclin, IfxAsclin_ClockSource clockSource);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1473  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1474  /** \brief Writes data up to 16 bits
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1475   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1476   * \param data Array of data to be send
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1477   * \param count number of items to be send
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1478   * \return the number of items that could not be send
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1479   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1480  IFX_EXTERN uint32 IfxAsclin_write16(Ifx_ASCLIN *asclin, uint16 *data, uint32 count);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1481  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1482  /** \brief Writes data up to 32 bits
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1483   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1484   * \param data Array of data to be send
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1485   * \param count number of items to be send
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1486   * \return the number of items that could not be send
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1487   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1488  IFX_EXTERN uint32 IfxAsclin_write32(Ifx_ASCLIN *asclin, uint32 *data, uint32 count);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1489  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1490  /** \brief Writes data up to 8 bits
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1491   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1492   * \param data Array of data to be send
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1493   * \param count number of items to be send
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1494   * \return the number of items that could not be send
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1495   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1496  IFX_EXTERN uint32 IfxAsclin_write8(Ifx_ASCLIN *asclin, uint8 *data, uint32 count);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1497  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1498  /** \} */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1499  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1500  /** \addtogroup IfxLld_Asclin_Std_IO
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1501   * \{ */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1502  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1503  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1504  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1505  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1506  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1507  /** \brief Initializes a CTS input
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1508   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1509   * Attention: the kernel clock has to be disabled whenever the input multiplexer is changed.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1510   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1511   * This can be done with IfxAsclin_setClockSource(asclinSFR, IfxAsclin_ClockSource_noClock);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1512   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1513   * After the function call, the current clock can be enabled again.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1514   * \param cts the CTS Pin which should be configured
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1515   * \param inputMode the pin input mode which should be configured
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1516   * \param padDriver the pad driver mode which should be configured
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1517   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1518   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1519  IFX_INLINE void IfxAsclin_initCtsPin(const IfxAsclin_Cts_In *cts, IfxPort_InputMode inputMode, IfxPort_PadDriver padDriver);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1520  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1521  /** \brief Initializes a RTS output
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1522   * \param rts the RTS Pin which should be configured
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1523   * \param outputMode the pin output mode which should be configured
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1524   * \param padDriver the pad driver mode which should be configured
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1525   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1526   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1527  IFX_INLINE void IfxAsclin_initRtsPin(const IfxAsclin_Rts_Out *rts, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1528  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1529  /** \brief Initializes a RX input
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1530   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1531   * Attention: the kernel clock has to be disabled whenever the input multiplexer is changed.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1532   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1533   * This can be done with IfxAsclin_setClockSource(asclinSFR, IfxAsclin_ClockSource_noClock);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1534   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1535   * After the function call, the current clock can be enabled again.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1536   * \param rx the RX Pin which should be configured
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1537   * \param inputMode the pin input mode which should be configured
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1538   * \param padDriver the pad driver mode which should be configured
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1539   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1540   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1541  IFX_INLINE void IfxAsclin_initRxPin(const IfxAsclin_Rx_In *rx, IfxPort_InputMode inputMode, IfxPort_PadDriver padDriver);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1542  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1543  /** \brief Initializes a SCLK output
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1544   * \param sclk the SCLK Pin which should be configured
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1545   * \param outputMode the pin output mode which should be configured
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1546   * \param padDriver the pad driver mode which should be configured
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1547   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1548   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1549  IFX_INLINE void IfxAsclin_initSclkPin(const IfxAsclin_Sclk_Out *sclk, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1550  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1551  /** \brief Initializes a SLSO output
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1552   * \param slso the SLSO Pin which should be configured
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1553   * \param outputMode the pin output mode which should be configured
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1554   * \param padDriver the pad driver mode which should be configured
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1555   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1556   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1557  IFX_INLINE void IfxAsclin_initSlsoPin(const IfxAsclin_Slso_Out *slso, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1558  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1559  /** \brief Initializes a TX output
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1560   * \param tx the TX Pin which should be configured
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1561   * \param outputMode the pin output mode which should be configured
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1562   * \param padDriver the pad driver mode which should be configured
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1563   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1564   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1565  IFX_INLINE void IfxAsclin_initTxPin(const IfxAsclin_Tx_Out *tx, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1566  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1567  /** \} */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1568  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1569  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1570  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1571  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1572  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1573  /**
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1574   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1575   * \return returns the value of RxDATA register
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1576   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1577  IFX_INLINE uint32 IfxAsclin_readRxData(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1578  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1579  /**
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1580   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1581   * \param data data to be written
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1582   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1583   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1584  IFX_INLINE void IfxAsclin_writeTxData(Ifx_ASCLIN *asclin, uint32 data);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1585  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1586  /** \brief Returns the status of all error flags
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1587   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1588   * \return status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1589   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1590  IFX_INLINE uint16 IfxAsclin_getAllErrorFlagsStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1591  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1592  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1593  /*---------------------Inline Function Implementations------------------------*/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1594  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1595  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1596  IFX_INLINE void IfxAsclin_clearAllFlags(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1597  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1598      asclin->FLAGSCLEAR.U = 0xFFFFFFFF;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1599  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1600  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1601  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1602  IFX_INLINE void IfxAsclin_clearBreakDetectedFlag(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1603  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1604      asclin->FLAGSCLEAR.B.BDC = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1605  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1606  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1607  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1608  IFX_INLINE void IfxAsclin_clearCollisionDetectionErrorFlag(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1609  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1610      asclin->FLAGSCLEAR.B.CEC = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1611  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1612  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1613  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1614  IFX_INLINE void IfxAsclin_clearFallingEdgeDetectedFlag(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1615  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1616      asclin->FLAGSCLEAR.B.FEDC = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1617  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1618  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1619  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1620  IFX_INLINE void IfxAsclin_clearFrameErrorFlag(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1621  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1622      asclin->FLAGSCLEAR.B.FEC = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1623  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1624  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1625  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1626  IFX_INLINE void IfxAsclin_clearHeaderTimeoutFlag(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1627  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1628      asclin->FLAGSCLEAR.B.HTC = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1629  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1630  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1631  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1632  IFX_INLINE void IfxAsclin_clearKernelResetStatus(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1633  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1634      asclin->KRSTCLR.B.CLR = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1635  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1636  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1637  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1638  IFX_INLINE void IfxAsclin_clearLinAutoBaudDetectionErrorFlag(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1639  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1640      asclin->FLAGSCLEAR.B.LAC = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1641  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1642  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1643  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1644  IFX_INLINE void IfxAsclin_clearLinChecksumErrorFlag(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1645  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1646      asclin->FLAGSCLEAR.B.LCC = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1647  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1648  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1649  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1650  IFX_INLINE void IfxAsclin_clearLinParityErrorFlag(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1651  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1652      asclin->FLAGSCLEAR.B.LPC = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1653  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1654  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1655  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1656  IFX_INLINE void IfxAsclin_clearParityErrorFlag(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1657  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1658      asclin->FLAGSCLEAR.B.PEC = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1659  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1660  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1661  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1662  IFX_INLINE void IfxAsclin_clearRaisingEdgeDetectedFlag(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1663  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1664      asclin->FLAGSCLEAR.B.REDC = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1665  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1666  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1667  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1668  IFX_INLINE void IfxAsclin_clearResponseTimeoutFlag(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1669  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1670      asclin->FLAGSCLEAR.B.RTC = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1671  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1672  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1673  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1674  IFX_INLINE void IfxAsclin_clearRxFifoFillLevelFlag(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1675  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1676      asclin->FLAGSCLEAR.B.RFLC = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1677  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1678  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1679  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1680  IFX_INLINE void IfxAsclin_clearRxFifoOverflowFlag(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1681  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1682      asclin->FLAGSCLEAR.B.RFOC = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1683  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1684  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1685  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1686  IFX_INLINE void IfxAsclin_clearRxFifoUnderflowFlag(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1687  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1688      asclin->FLAGSCLEAR.B.RFUC = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1689  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1690  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1691  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1692  IFX_INLINE void IfxAsclin_clearRxHeaderEndFlag(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1693  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1694      asclin->FLAGSCLEAR.B.RHC = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1695  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1696  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1697  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1698  IFX_INLINE void IfxAsclin_clearRxResponseEndFlag(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1699  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1700      asclin->FLAGSCLEAR.B.RRC = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1701  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1702  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1703  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1704  IFX_INLINE void IfxAsclin_clearTransmissionCompletedFlag(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1705  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1706      asclin->FLAGSCLEAR.B.TCC = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1707  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1708  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1709  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1710  IFX_INLINE void IfxAsclin_clearTxFifoFillLevelFlag(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1711  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1712      asclin->FLAGSCLEAR.B.TFLC = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1713  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1714  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1715  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1716  IFX_INLINE void IfxAsclin_clearTxFifoOverflowFlag(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1717  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1718      asclin->FLAGSCLEAR.B.TFOC = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1719  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1720  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1721  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1722  IFX_INLINE void IfxAsclin_clearTxHeaderEndFlag(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1723  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1724      asclin->FLAGSCLEAR.B.THC = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1725  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1726  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1727  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1728  IFX_INLINE void IfxAsclin_clearTxResponseEndFlag(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1729  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1730      asclin->FLAGSCLEAR.B.TRC = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1731  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1732  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1733  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1734  IFX_INLINE void IfxAsclin_disableAllFlags(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1735  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1736      asclin->FLAGSENABLE.U = 0x00000000;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1737  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1738  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1739  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1740  IFX_INLINE void IfxAsclin_enableAutoBaudrateDetection(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1741  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1742      asclin->LIN.CON.B.ABD = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1743  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1744  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1745  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1746  IFX_INLINE void IfxAsclin_enableBreakDetectedFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1747  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1748      asclin->FLAGSENABLE.B.BDE = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1749  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1750  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1751  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1752  IFX_INLINE void IfxAsclin_enableCollisionDetection(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1753  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1754      asclin->FRAMECON.B.CEN = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1755  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1756  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1757  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1758  IFX_INLINE void IfxAsclin_enableCollisionDetectionErrorFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1759  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1760      asclin->FLAGSENABLE.B.CEE = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1761  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1762  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1763  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1764  IFX_INLINE void IfxAsclin_enableCts(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1765  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1766      asclin->IOCR.B.CTSEN = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1767  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1768  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1769  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1770  IFX_INLINE void IfxAsclin_enableFallingEdgeDetectedFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1771  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1772      asclin->FLAGSENABLE.B.FEDE = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1773  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1774  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1775  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1776  IFX_INLINE void IfxAsclin_enableFrameErrorFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1777  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1778      asclin->FLAGSENABLE.B.FEE = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1779  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1780  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1781  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1782  IFX_INLINE void IfxAsclin_enableHardwareChecksum(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1783  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1784      asclin->LIN.CON.B.CSEN = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1785  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1786  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1787  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1788  IFX_INLINE void IfxAsclin_enableHeaderTimeoutFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1789  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1790      asclin->FLAGSENABLE.B.HTE = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1791  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1792  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1793  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1794  IFX_INLINE void IfxAsclin_enableLinAutoBaudDetectionErrorFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1795  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1796      asclin->FLAGSENABLE.B.ABE = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1797  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1798  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1799  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1800  IFX_INLINE void IfxAsclin_enableLinChecksumErrorFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1801  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1802      asclin->FLAGSENABLE.B.LCE = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1803  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1804  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1805  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1806  IFX_INLINE void IfxAsclin_enableLinParityErrorFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1807  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1808      asclin->FLAGSENABLE.B.LPE = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1809  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1810  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1811  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1812  IFX_INLINE void IfxAsclin_enableLoopBackMode(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1813  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1814      asclin->IOCR.B.LB = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1815  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1816  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1817  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1818  IFX_INLINE void IfxAsclin_enableParity(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1819  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1820      asclin->FRAMECON.B.PEN = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1821  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1822  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1823  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1824  IFX_INLINE void IfxAsclin_enableParityErrorFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1825  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1826      asclin->FLAGSENABLE.B.PEE = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1827  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1828  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1829  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1830  IFX_INLINE void IfxAsclin_enableRaisingEdgeDetectedFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1831  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1832      asclin->FLAGSENABLE.B.REDE = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1833  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1834  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1835  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1836  IFX_INLINE void IfxAsclin_enableResponseTimeoutFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1837  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1838      asclin->FLAGSENABLE.B.RTE = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1839  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1840  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1841  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1842  IFX_INLINE void IfxAsclin_enableRxFifoFillLevelFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1843  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1844      asclin->FLAGSENABLE.B.RFLE = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1845  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1846  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1847  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1848  IFX_INLINE void IfxAsclin_enableRxFifoInlet(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1849  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1850      asclin->RXFIFOCON.B.ENI = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1851  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1852  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1853  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1854  IFX_INLINE void IfxAsclin_enableRxFifoOverflowFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1855  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1856      asclin->FLAGSENABLE.B.RFOE = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1857  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1858  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1859  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1860  IFX_INLINE void IfxAsclin_enableRxFifoUnderflowFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1861  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1862      asclin->FLAGSENABLE.B.RFUE = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1863  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1864  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1865  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1866  IFX_INLINE void IfxAsclin_enableRxHeaderEndFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1867  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1868      asclin->FLAGSENABLE.B.RHE = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1869  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1870  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1871  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1872  IFX_INLINE void IfxAsclin_enableRxResponseEndFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1873  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1874      asclin->FLAGSENABLE.B.RRE = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1875  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1876  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1877  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1878  IFX_INLINE void IfxAsclin_enableTransmissionCompletedFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1879  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1880      asclin->FLAGSENABLE.B.TCE = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1881  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1882  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1883  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1884  IFX_INLINE void IfxAsclin_enableTxFifoFillLevelFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1885  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1886      asclin->FLAGSENABLE.B.TFLE = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1887  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1888  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1889  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1890  IFX_INLINE void IfxAsclin_enableTxFifoOutlet(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1891  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1892      asclin->TXFIFOCON.B.ENO = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1893  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1894  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1895  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1896  IFX_INLINE void IfxAsclin_enableTxFifoOverflowFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1897  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1898      asclin->FLAGSENABLE.B.TFOE = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1899  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1900  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1901  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1902  IFX_INLINE void IfxAsclin_enableTxHeaderEndFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1903  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1904      asclin->FLAGSENABLE.B.THE = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1905  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1906  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1907  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1908  IFX_INLINE void IfxAsclin_enableTxResponseEndFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1909  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1910      asclin->FLAGSENABLE.B.TRE = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1911  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1912  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1913  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1914  IFX_INLINE void IfxAsclin_flushRxFifo(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1915  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1916      asclin->RXFIFOCON.B.FLUSH = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1917  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1918  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1919  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1920  IFX_INLINE void IfxAsclin_flushTxFifo(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1921  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1922      asclin->TXFIFOCON.B.FLUSH = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1923  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1924  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1925  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1926  IFX_INLINE boolean IfxAsclin_getBreakDetectedFlagStatus(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1927  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1928      return asclin->FLAGS.B.BD;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1929  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1930  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1931  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1932  IFX_INLINE uint8 IfxAsclin_getClockSource(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1933  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1934      return asclin->CSR.B.CLKSEL;
	ld.bu	d15,[a15]76
.L293:
	sub.a	a10,#24
.L296:

; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	     1  /**
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	     2   * \file IfxAsclin.h
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	     3   * \brief ASCLIN  basic functionality
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	     4   * \ingroup IfxLld_Asclin
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	     5   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	     6   * \version iLLD_1_0_1_11_0
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	     7   * \copyright Copyright (c) 2018 Infineon Technologies AG. All rights reserved.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	     8   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	     9   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    10   *                                 IMPORTANT NOTICE
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    11   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    12   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    13   * Use of this file is subject to the terms of use agreed between (i) you or 
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    14   * the company in which ordinary course of business you are acting and (ii) 
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    15   * Infineon Technologies AG or its licensees. If and as long as no such 
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    16   * terms of use are agreed, use of this file is subject to following:
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    17  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    18  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    19   * Boost Software License - Version 1.0 - August 17th, 2003
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    20  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    21   * Permission is hereby granted, free of charge, to any person or 
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    22   * organization obtaining a copy of the software and accompanying 
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    23   * documentation covered by this license (the "Software") to use, reproduce,
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    24   * display, distribute, execute, and transmit the Software, and to prepare
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    25   * derivative works of the Software, and to permit third-parties to whom the 
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    26   * Software is furnished to do so, all subject to the following:
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    27  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    28   * The copyright notices in the Software and this entire statement, including
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    29   * the above license grant, this restriction and the following disclaimer, must
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    30   * be included in all copies of the Software, in whole or in part, and all
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    31   * derivative works of the Software, unless such copies or derivative works are
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    32   * solely in the form of machine-executable object code generated by a source
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    33   * language processor.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    34  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    35   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR 
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    36   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    37   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    38   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE 
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    39   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    40   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    41   * DEALINGS IN THE SOFTWARE.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    42  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    43   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    44   * \defgroup IfxLld_Asclin_Std_Enumerations Enumerations
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    45   * \ingroup IfxLld_Asclin_Std
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    46   * \defgroup IfxLld_Asclin_Std_Operative Operative Functions
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    47   * \ingroup IfxLld_Asclin_Std
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    48   * \defgroup IfxLld_Asclin_Std_Utility Utility Functions
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    49   * \ingroup IfxLld_Asclin_Std
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    50   * \defgroup IfxLld_Asclin_Std_Configuration Configuration Functions
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    51   * \ingroup IfxLld_Asclin_Std
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    52   * \defgroup IfxLld_Asclin_Std_External External Functions
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    53   * \ingroup IfxLld_Asclin_Std
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    54   * \defgroup IfxLld_Asclin_Std_IO IO Pin Configuration Functions
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    55   * \ingroup IfxLld_Asclin_Std
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    56   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    57  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    58  #ifndef IFXASCLIN_H
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    59  #define IFXASCLIN_H 1
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    60  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    61  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    62  /*----------------------------------Includes----------------------------------*/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    63  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    64  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    65  #include "_Impl/IfxAsclin_cfg.h"
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    66  #include "Scu/Std/IfxScuCcu.h"
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    67  #include "Scu/Std/IfxScuWdt.h"
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    68  #include "Cpu/Std/IfxCpu_Intrinsics.h"
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    69  #include "IfxAsclin_reg.h"
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    70  #include "Src/Std/IfxSrc.h"
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    71  #include "_PinMap/IfxAsclin_PinMap.h"
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    72  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    73  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    74  /*--------------------------------Enumerations--------------------------------*/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    75  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    76  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    77  /** \addtogroup IfxLld_Asclin_Std_Enumerations
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    78   * \{ */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    79  /** \brief Defines if the classic or the enhanced checksum will be calculated by the checksum block.\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    80   * Definition in Ifx_ASCLIN.DATCON.B.CSM
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    81   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    82  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    83  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    84      IfxAsclin_Checksum_classic  = 0, /**< \brief classic checksum */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    85      IfxAsclin_Checksum_enhanced = 1  /**< \brief enhanced checksum */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    86  } IfxAsclin_Checksum;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    87  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    88  /** \brief Defines if the received checksum byte is written into the RXFifo or not.\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    89   * Definition in Ifx_ASCLIN.LIN.CON.B.CSI
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    90   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    91  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    92  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    93      IfxAsclin_ChecksumInjection_notWritten = 0,  /**< \brief checksum byte is not written */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    94      IfxAsclin_ChecksumInjection_written    = 1   /**< \brief checksum byte is written */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    95  } IfxAsclin_ChecksumInjection;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    96  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    97  /** \brief CPOL defines the idle level of the clock signal in the SPI mode.\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    98   * Idle level is the level outside the data transmission time intervals.\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    99   * Definition in Ifx_ASCLIN.IOCR.B.CPOL
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   100   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   101  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   102  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   103      IfxAsclin_ClockPolarity_idleLow  = 0, /**< \brief idle low */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   104      IfxAsclin_ClockPolarity_idleHigh = 1  /**< \brief idle high */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   105  } IfxAsclin_ClockPolarity;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   106  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   107  /** \brief Selection of clock source\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   108   * Definition in Ifx_ASCLIN.CSR.B.CLKSEL
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   109   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   110  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   111  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   112      IfxAsclin_ClockSource_noClock         = 0,  /**< \brief no clock will be supplied */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   113      IfxAsclin_ClockSource_kernelClock     = 1,  /**< \brief f clc will be supplied */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   114      IfxAsclin_ClockSource_oscillatorClock = 2,  /**< \brief XTAL oscillator clock foso0 will be supplied */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   115      IfxAsclin_ClockSource_flexRayClock    = 4,  /**< \brief f eray will be supplied */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   116      IfxAsclin_ClockSource_ascFastClock    = 8,  /**< \brief f asclinf wiil be supplied */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   117      IfxAsclin_ClockSource_ascSlowClock    = 16  /**< \brief f asclins will be supplied */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   118  } IfxAsclin_ClockSource;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   119  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   120  /** \brief CTS input pin selection\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   121   * Definition in Ifx_ASCLIN.IOCR.B.CTS
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   122   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   123  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   124  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   125      IfxAsclin_CtsInputSelect_0,     /**< \brief CTS input pin 0  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   126      IfxAsclin_CtsInputSelect_1,     /**< \brief CTS input pin 1  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   127      IfxAsclin_CtsInputSelect_2,     /**< \brief CTS input pin 2  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   128      IfxAsclin_CtsInputSelect_3      /**< \brief CTS input pin 3  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   129  } IfxAsclin_CtsInputSelect;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   130  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   131  /** \brief Number of bits per transfer\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   132   * Definition in Ifx_ASCLIN.FRAMECON.B.DATALEN
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   133   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   134  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   135  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   136      IfxAsclin_DataLength_1 = 0,      /**< \brief number of bits per transfer 0  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   137      IfxAsclin_DataLength_2,          /**< \brief number of bits per transfer 1  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   138      IfxAsclin_DataLength_3,          /**< \brief number of bits per transfer 2  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   139      IfxAsclin_DataLength_4,          /**< \brief number of bits per transfer 3  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   140      IfxAsclin_DataLength_5,          /**< \brief number of bits per transfer 4  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   141      IfxAsclin_DataLength_6,          /**< \brief number of bits per transfer 5  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   142      IfxAsclin_DataLength_7,          /**< \brief number of bits per transfer 6  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   143      IfxAsclin_DataLength_8,          /**< \brief number of bits per transfer 7  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   144      IfxAsclin_DataLength_9,          /**< \brief number of bits per transfer 8  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   145      IfxAsclin_DataLength_10,         /**< \brief number of bits per transfer 9  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   146      IfxAsclin_DataLength_11,         /**< \brief number of bits per transfer 10  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   147      IfxAsclin_DataLength_12,         /**< \brief number of bits per transfer 11  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   148      IfxAsclin_DataLength_13,         /**< \brief number of bits per transfer 12  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   149      IfxAsclin_DataLength_14,         /**< \brief number of bits per transfer 13  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   150      IfxAsclin_DataLength_15,         /**< \brief number of bits per transfer 14  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   151      IfxAsclin_DataLength_16          /**< \brief number of bits per transfer 15  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   152  } IfxAsclin_DataLength;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   153  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   154  /** \brief Defines the basic operating mode of the module. Changing the mode must be done by switching first to initialize mode, and then to the other mode.\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   155   * Definition in Ifx_ASCLIN.FRAMECON.B.MODE
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   156   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   157  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   158  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   159      IfxAsclin_FrameMode_initialise = 0,  /**< \brief initialise mode */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   160      IfxAsclin_FrameMode_asc        = 1,  /**< \brief asc mode */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   161      IfxAsclin_FrameMode_spi        = 2,  /**< \brief spi mode */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   162      IfxAsclin_FrameMode_lin        = 3   /**< \brief lin mode */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   163  } IfxAsclin_FrameMode;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   164  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   165  /** \brief Defines if LIN frame shall consist of a header and response or of a header only.\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   166   * Definition in Ifx_ASCLIN.DATCON.B.HO
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   167   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   168  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   169  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   170      IfxAsclin_HeaderResponseSelect_headerAndResponse = 0,  /**< \brief header and response expected */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   171      IfxAsclin_HeaderResponseSelect_headerOnly        = 1   /**< \brief header only expected */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   172  } IfxAsclin_HeaderResponseSelect;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   173  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   174  /** \brief Defines the duration of the IDLE delay in bit times.\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   175   * SPI mode: this is the idle time between the frames.\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   176   * ASC and LIN mode: this is the pause inserted between transmission of bytes.\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   177   * Definition in Ifx_ASCLIN.FRAMECON.B.IDLE
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   178   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   179  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   180  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   181      IfxAsclin_IdleDelay_0,     /**< \brief idle delay in 0 bit times  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   182      IfxAsclin_IdleDelay_1,     /**< \brief idle delay in 1 bit times  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   183      IfxAsclin_IdleDelay_2,     /**< \brief idle delay in 2 bit times  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   184      IfxAsclin_IdleDelay_3,     /**< \brief idle delay in 3 bit times  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   185      IfxAsclin_IdleDelay_4,     /**< \brief idle delay in 4 bit times  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   186      IfxAsclin_IdleDelay_5,     /**< \brief idle delay in 5 bit times  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   187      IfxAsclin_IdleDelay_6,     /**< \brief idle delay in 6 bit times  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   188      IfxAsclin_IdleDelay_7      /**< \brief idle delay in 7 bit times  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   189  } IfxAsclin_IdleDelay;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   190  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   191  /** \brief Defines the leading delay in bit times in SPI mode. ASC mode: not applicable.\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   192   * LIN mode: delay between the end of the break and the start of the sync character.\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   193   * Definition in Ifx_ASCLIN.FRAMECON.B.LEAD
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   194   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   195  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   196  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   197      IfxAsclin_LeadDelay_0,     /**< \brief lead delay in 0 bit times  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   198      IfxAsclin_LeadDelay_1,     /**< \brief lead delay in 1 bit times  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   199      IfxAsclin_LeadDelay_2,     /**< \brief lead delay in 2 bit times  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   200      IfxAsclin_LeadDelay_3,     /**< \brief lead delay in 3 bit times  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   201      IfxAsclin_LeadDelay_4,     /**< \brief lead delay in 4 bit times  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   202      IfxAsclin_LeadDelay_5,     /**< \brief lead delay in 5 bit times  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   203      IfxAsclin_LeadDelay_6,     /**< \brief lead delay in 6 bit times  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   204      IfxAsclin_LeadDelay_7      /**< \brief lead delay in 7 bit times  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   205  } IfxAsclin_LeadDelay;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   206  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   207  /** \brief Configures if the module in LIN mode operates as master or slave\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   208   * Definition in Ifx_ASCLIN.LIN.CON.B.MS
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   209   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   210  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   211  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   212      IfxAsclin_LinMode_slave  = 0, /**< \brief operates in slave mode */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   213      IfxAsclin_LinMode_master = 1  /**< \brief operates in master mode */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   214  } IfxAsclin_LinMode;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   215  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   216  /** \brief Defines the timeout threshold of RESPOSE bit is for LIN response timeout or LIN frame timeout.\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   217   * Definition in Ifx_ASCLIN.DATCON.B.RM
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   218   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   219  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   220  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   221      IfxAsclin_LinResponseTimeoutMode_frameTimeout    = 0, /**< \brief timeout threshold is for frame */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   222      IfxAsclin_LinResponseTimeoutMode_responseTimeout = 1  /**< \brief timeout threshold is for reponse */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   223  } IfxAsclin_LinResponseTimeoutMode;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   224  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   225  /** \brief Defines the bit length in ticks in the range of 1 to 16. The lengths of 1 to 3 are not allowed\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   226   * Definition in Ifx_ASCLIN.BITCON.B.OVERSAMPLING
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   227   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   228  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   229  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   230      IfxAsclin_OversamplingFactor_4  = 3,   /**< \brief oversampling factor 4 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   231      IfxAsclin_OversamplingFactor_5  = 4,   /**< \brief oversampling factor 5 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   232      IfxAsclin_OversamplingFactor_6  = 5,   /**< \brief oversampling factor 6 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   233      IfxAsclin_OversamplingFactor_7  = 6,   /**< \brief oversampling factor 7 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   234      IfxAsclin_OversamplingFactor_8  = 7,   /**< \brief oversampling factor 8 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   235      IfxAsclin_OversamplingFactor_9  = 8,   /**< \brief oversampling factor 9 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   236      IfxAsclin_OversamplingFactor_10 = 9,   /**< \brief oversampling factor 10 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   237      IfxAsclin_OversamplingFactor_11 = 10,  /**< \brief oversampling factor 11 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   238      IfxAsclin_OversamplingFactor_12 = 11,  /**< \brief oversampling factor 12 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   239      IfxAsclin_OversamplingFactor_13 = 12,  /**< \brief oversampling factor 13 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   240      IfxAsclin_OversamplingFactor_14 = 13,  /**< \brief oversampling factor 14 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   241      IfxAsclin_OversamplingFactor_15 = 14,  /**< \brief oversampling factor 15 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   242      IfxAsclin_OversamplingFactor_16 = 15   /**< \brief oversampling factor 16 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   243  } IfxAsclin_OversamplingFactor;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   244  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   245  /** \brief Type of parity bit attached to data bits\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   246   * Definition in Ifx_ASCLIN.FRAMECON.B.ODD
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   247   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   248  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   249  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   250      IfxAsclin_ParityType_even = 0,  /**< \brief even parity */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   251      IfxAsclin_ParityType_odd  = 1   /**< \brief odd parity */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   252  } IfxAsclin_ParityType;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   253  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   254  /** \brief Receive buffer mode\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   255   * Definition in Ifx_ASCLIN.RXFIFOCON.B.BUF
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   256   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   257  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   258  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   259      IfxAsclin_ReceiveBufferMode_rxFifo   = 0, /**< \brief RxFIFO mode */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   260      IfxAsclin_ReceiveBufferMode_rxBuffer = 1  /**< \brief single stage Rx buffer */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   261  } IfxAsclin_ReceiveBufferMode;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   262  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   263  /** \brief Polarity of the RTS and CTS signals\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   264   * Definition in Ifx_ASCLIN.IOCR.B.RCPOL
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   265   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   266  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   267  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   268      IfxAsclin_RtsCtsPolarity_activeHigh = 0,  /**< \brief ready/clear are active-high */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   269      IfxAsclin_RtsCtsPolarity_activeLow  = 1   /**< \brief ready/clear are active-low */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   270  } IfxAsclin_RtsCtsPolarity;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   271  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   272  /** \brief Defines the filling level that triggers a drain (RX) interrupt or DMA access\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   273   * Definition in Ifx_ASCLIN.RXFIFOCON.B.INTLEVEL
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   274   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   275  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   276  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   277      IfxAsclin_RxFifoInterruptLevel_1,     /**< \brief RX FIFO level 1  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   278      IfxAsclin_RxFifoInterruptLevel_2,     /**< \brief RX FIFO level 2  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   279      IfxAsclin_RxFifoInterruptLevel_3,     /**< \brief RX FIFO level 3  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   280      IfxAsclin_RxFifoInterruptLevel_4,     /**< \brief RX FIFO level 4  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   281      IfxAsclin_RxFifoInterruptLevel_5,     /**< \brief RX FIFO level 5  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   282      IfxAsclin_RxFifoInterruptLevel_6,     /**< \brief RX FIFO level 6  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   283      IfxAsclin_RxFifoInterruptLevel_7,     /**< \brief RX FIFO level 7  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   284      IfxAsclin_RxFifoInterruptLevel_8,     /**< \brief RX FIFO level 8  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   285      IfxAsclin_RxFifoInterruptLevel_9,     /**< \brief RX FIFO level 9  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   286      IfxAsclin_RxFifoInterruptLevel_10,    /**< \brief RX FIFO level 10  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   287      IfxAsclin_RxFifoInterruptLevel_11,    /**< \brief RX FIFO level 11  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   288      IfxAsclin_RxFifoInterruptLevel_12,    /**< \brief RX FIFO level 12  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   289      IfxAsclin_RxFifoInterruptLevel_13,    /**< \brief RX FIFO level 13  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   290      IfxAsclin_RxFifoInterruptLevel_14,    /**< \brief RX FIFO level 14  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   291      IfxAsclin_RxFifoInterruptLevel_15,    /**< \brief RX FIFO level 15  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   292      IfxAsclin_RxFifoInterruptLevel_16     /**< \brief RX FIFO level 16  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   293  } IfxAsclin_RxFifoInterruptLevel;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   294  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   295  /** \brief Defines the number of bytes read from the Rx FIFO with one FPI bus read\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   296   * Definition in Ifx_ASCLIN.RXFIFOCON.B.OUTW
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   297   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   298  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   299  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   300      IfxAsclin_RxFifoOutletWidth_0,     /**< \brief number of bytes 0  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   301      IfxAsclin_RxFifoOutletWidth_1,     /**< \brief number of bytes 1  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   302      IfxAsclin_RxFifoOutletWidth_2,     /**< \brief number of bytes 2  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   303      IfxAsclin_RxFifoOutletWidth_3      /**< \brief number of bytes 3  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   304  } IfxAsclin_RxFifoOutletWidth;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   305  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   306  /** \brief Alternate input selection for Rx signal.\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   307   * Definition in Ifx_ASCLIN.IOCR.B.ALTI
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   308   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   309  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   310  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   311      IfxAsclin_RxInputSelect_0,     /**< \brief alternate input selection 0  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   312      IfxAsclin_RxInputSelect_1,     /**< \brief alternate input selection 1  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   313      IfxAsclin_RxInputSelect_2,     /**< \brief alternate input selection 2  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   314      IfxAsclin_RxInputSelect_3,     /**< \brief alternate input selection 3  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   315      IfxAsclin_RxInputSelect_4,     /**< \brief alternate input selection 4  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   316      IfxAsclin_RxInputSelect_5,     /**< \brief alternate input selection 5  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   317      IfxAsclin_RxInputSelect_6,     /**< \brief alternate input selection 6  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   318      IfxAsclin_RxInputSelect_7      /**< \brief alternate input selection 7  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   319  } IfxAsclin_RxInputSelect;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   320  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   321  /** \brief Sample point position\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   322   * Definition in Ifx_ASCLIN.BITCON.B.SAMPLEPOINT
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   323   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   324  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   325  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   326      IfxAsclin_SamplePointPosition_1  = 1,   /**< \brief sample point position at 1 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   327      IfxAsclin_SamplePointPosition_2  = 2,   /**< \brief sample point position at 2 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   328      IfxAsclin_SamplePointPosition_3  = 3,   /**< \brief sample point position at 3 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   329      IfxAsclin_SamplePointPosition_4  = 4,   /**< \brief sample point position at 4 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   330      IfxAsclin_SamplePointPosition_5  = 5,   /**< \brief sample point position at 5 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   331      IfxAsclin_SamplePointPosition_6  = 6,   /**< \brief sample point position at 6 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   332      IfxAsclin_SamplePointPosition_7  = 7,   /**< \brief sample point position at 7 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   333      IfxAsclin_SamplePointPosition_8  = 8,   /**< \brief sample point position at 8 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   334      IfxAsclin_SamplePointPosition_9  = 9,   /**< \brief sample point position at 9 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   335      IfxAsclin_SamplePointPosition_10 = 10,  /**< \brief sample point position at 10 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   336      IfxAsclin_SamplePointPosition_11 = 11,  /**< \brief sample point position at 11 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   337      IfxAsclin_SamplePointPosition_12 = 12,  /**< \brief sample point position at 12 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   338      IfxAsclin_SamplePointPosition_13 = 13,  /**< \brief sample point position at 13 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   339      IfxAsclin_SamplePointPosition_14 = 14,  /**< \brief sample point position at 14 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   340      IfxAsclin_SamplePointPosition_15 = 15   /**< \brief sample point position at 15 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   341  } IfxAsclin_SamplePointPosition;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   342  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   343  /** \brief Number of samples per bit, sample mode/medianfilter\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   344   * Definition in Ifx_ASCLIN.BITCON.B.SM
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   345   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   346  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   347  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   348      IfxAsclin_SamplesPerBit_one   = 0, /**< \brief one sample per bit */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   349      IfxAsclin_SamplesPerBit_three = 1  /**< \brief three samples per bit */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   350  } IfxAsclin_SamplesPerBit;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   351  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   352  /** \brief SPI mode: defines the shift direction of the shift register.\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   353   * ASC and LIN mode: should be set to 0.\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   354   * Definition in Ifx_ASCLIN.FRAMECON.B.MSB
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   355   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   356  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   357  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   358      IfxAsclin_ShiftDirection_lsbFirst = 0,  /**< \brief LSB first */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   359      IfxAsclin_ShiftDirection_msbFirst = 1   /**< \brief MSB first */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   360  } IfxAsclin_ShiftDirection;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   361  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   362  /** \brief Defines the idle level of the SLSO signal, which is the level.\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   363   * Outside the data transmission, leading and trailing time intervals.\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   364   * Definition in Ifx_ASCLIN.IOCR.B.SPOL
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   365   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   366  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   367  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   368      IfxAsclin_SlavePolarity_idleLow  = 0, /**< \brief idle low */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   369      IfxAsclin_SlavePolarity_idlehigh = 1  /**< \brief idle high */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   370  } IfxAsclin_SlavePolarity;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   371  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   372  /** \brief Enable/disable the sensitivity of the module to sleep signal\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   373   * Definition in Ifx_ASCLIN.CLC.B.EDIS
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   374   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   375  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   376  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   377      IfxAsclin_SleepMode_enable  = 0, /**< \brief enables sleep mode */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   378      IfxAsclin_SleepMode_disable = 1  /**< \brief disables sleep mode */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   379  } IfxAsclin_SleepMode;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   380  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   381  /** \brief Error status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   382   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   383  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   384  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   385      IfxAsclin_Status_configurationError = 0,  /**< \brief Configuration error */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   386      IfxAsclin_Status_noError            = 1   /**< \brief No error */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   387  } IfxAsclin_Status;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   388  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   389  /** \brief ASC and LIN mode: number of stop bits (0 is not allowed), SPI mode: trailing delay.\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   390   * Definition in Ifx_ASCLIN.FRAMECON.B.STOP
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   391   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   392  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   393  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   394      IfxAsclin_StopBit_0,     /**< \brief number of stop bits 0  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   395      IfxAsclin_StopBit_1,     /**< \brief number of stop bits 1  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   396      IfxAsclin_StopBit_2,     /**< \brief number of stop bits 2  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   397      IfxAsclin_StopBit_3,     /**< \brief number of stop bits 3  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   398      IfxAsclin_StopBit_4,     /**< \brief number of stop bits 4  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   399      IfxAsclin_StopBit_5,     /**< \brief number of stop bits 5  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   400      IfxAsclin_StopBit_6,     /**< \brief number of stop bits 6  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   401      IfxAsclin_StopBit_7      /**< \brief number of stop bits 7  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   402  } IfxAsclin_StopBit;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   403  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   404  /** \brief OCDS Suspend Control (OCDS.SUS)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   405   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   406  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   407  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   408      IfxAsclin_SuspendMode_none = 0,  /**< \brief No suspend */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   409      IfxAsclin_SuspendMode_hard = 1,  /**< \brief Hard Suspend */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   410      IfxAsclin_SuspendMode_soft = 2   /**< \brief Soft Suspend */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   411  } IfxAsclin_SuspendMode;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   412  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   413  /** \brief Defines the number of bytes written to the Tx FIFO with one FPI bus write\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   414   * Definition in Ifx_ASCLIN.TXFIFOCON.B.INW
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   415   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   416  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   417  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   418      IfxAsclin_TxFifoInletWidth_0,     /**< \brief number of bytes 0  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   419      IfxAsclin_TxFifoInletWidth_1,     /**< \brief number of bytes 1  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   420      IfxAsclin_TxFifoInletWidth_2,     /**< \brief number of bytes 2  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   421      IfxAsclin_TxFifoInletWidth_3      /**< \brief number of bytes 3  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   422  } IfxAsclin_TxFifoInletWidth;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   423  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   424  /** \brief Defines the filling level that triggers a refill (TX) interrupt or DMA access\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   425   * Definition in Ifx_ASCLIN.TXFIFOCON.B.INTLEVEL
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   426   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   427  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   428  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   429      IfxAsclin_TxFifoInterruptLevel_0,     /**< \brief TX FIFO level 0  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   430      IfxAsclin_TxFifoInterruptLevel_1,     /**< \brief TX FIFO level 1  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   431      IfxAsclin_TxFifoInterruptLevel_2,     /**< \brief TX FIFO level 2  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   432      IfxAsclin_TxFifoInterruptLevel_3,     /**< \brief TX FIFO level 3  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   433      IfxAsclin_TxFifoInterruptLevel_4,     /**< \brief TX FIFO level 4  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   434      IfxAsclin_TxFifoInterruptLevel_5,     /**< \brief TX FIFO level 5  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   435      IfxAsclin_TxFifoInterruptLevel_6,     /**< \brief TX FIFO level 6  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   436      IfxAsclin_TxFifoInterruptLevel_7,     /**< \brief TX FIFO level 7  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   437      IfxAsclin_TxFifoInterruptLevel_8,     /**< \brief TX FIFO level 8  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   438      IfxAsclin_TxFifoInterruptLevel_9,     /**< \brief TX FIFO level 9  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   439      IfxAsclin_TxFifoInterruptLevel_10,    /**< \brief TX FIFO level 10  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   440      IfxAsclin_TxFifoInterruptLevel_11,    /**< \brief TX FIFO level 11  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   441      IfxAsclin_TxFifoInterruptLevel_12,    /**< \brief TX FIFO level 12  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   442      IfxAsclin_TxFifoInterruptLevel_13,    /**< \brief TX FIFO level 13  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   443      IfxAsclin_TxFifoInterruptLevel_14,    /**< \brief TX FIFO level 14  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   444      IfxAsclin_TxFifoInterruptLevel_15     /**< \brief TX FIFO level 15  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   445  } IfxAsclin_TxFifoInterruptLevel;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   446  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   447  /** \} */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   448  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   449  /** \addtogroup IfxLld_Asclin_Std_Operative
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   450   * \{ */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   451  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   452  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   453  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   454  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   455  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   456  /** \brief clears all the flags
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   457   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   458   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   459   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   460  IFX_INLINE void IfxAsclin_clearAllFlags(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   461  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   462  /** \brief Clears the break detected flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   463   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   464   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   465   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   466  IFX_INLINE void IfxAsclin_clearBreakDetectedFlag(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   467  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   468  /** \brief Clears the collision detection error flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   469   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   470   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   471   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   472  IFX_INLINE void IfxAsclin_clearCollisionDetectionErrorFlag(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   473  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   474  /** \brief Clears the falling edge detected flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   475   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   476   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   477   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   478  IFX_INLINE void IfxAsclin_clearFallingEdgeDetectedFlag(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   479  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   480  /** \brief Clears the frame error flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   481   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   482   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   483   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   484  IFX_INLINE void IfxAsclin_clearFrameErrorFlag(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   485  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   486  /** \brief Clears the header timeout flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   487   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   488   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   489   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   490  IFX_INLINE void IfxAsclin_clearHeaderTimeoutFlag(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   491  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   492  /** \brief Clears the kernel reset status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   493   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   494   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   495   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   496  IFX_INLINE void IfxAsclin_clearKernelResetStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   497  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   498  /** \brief Clears the auto baudrate detection error flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   499   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   500   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   501   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   502  IFX_INLINE void IfxAsclin_clearLinAutoBaudDetectionErrorFlag(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   503  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   504  /** \brief Clears the LIN checksum error flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   505   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   506   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   507   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   508  IFX_INLINE void IfxAsclin_clearLinChecksumErrorFlag(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   509  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   510  /** \brief Clears the LIN parity error flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   511   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   512   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   513   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   514  IFX_INLINE void IfxAsclin_clearLinParityErrorFlag(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   515  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   516  /** \brief Clears the parity error flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   517   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   518   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   519   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   520  IFX_INLINE void IfxAsclin_clearParityErrorFlag(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   521  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   522  /** \brief Clears the raising edge detected flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   523   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   524   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   525   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   526  IFX_INLINE void IfxAsclin_clearRaisingEdgeDetectedFlag(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   527  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   528  /** \brief Clears the response timeout flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   529   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   530   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   531   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   532  IFX_INLINE void IfxAsclin_clearResponseTimeoutFlag(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   533  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   534  /** \brief Clears the Rx FIFO level flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   535   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   536   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   537   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   538  IFX_INLINE void IfxAsclin_clearRxFifoFillLevelFlag(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   539  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   540  /** \brief Clears the Rx FIFO overflow flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   541   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   542   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   543   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   544  IFX_INLINE void IfxAsclin_clearRxFifoOverflowFlag(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   545  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   546  /** \brief Clears the Rx FIFO underflow flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   547   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   548   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   549   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   550  IFX_INLINE void IfxAsclin_clearRxFifoUnderflowFlag(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   551  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   552  /** \brief Clears the receive header end flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   553   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   554   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   555   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   556  IFX_INLINE void IfxAsclin_clearRxHeaderEndFlag(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   557  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   558  /** \brief Clears the receive response end flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   559   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   560   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   561   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   562  IFX_INLINE void IfxAsclin_clearRxResponseEndFlag(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   563  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   564  /** \brief Clears the transmission pending flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   565   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   566   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   567   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   568  IFX_INLINE void IfxAsclin_clearTransmissionCompletedFlag(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   569  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   570  /** \brief Clears the Tx FIFO level flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   571   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   572   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   573   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   574  IFX_INLINE void IfxAsclin_clearTxFifoFillLevelFlag(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   575  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   576  /** \brief Clears the Tx FIFO overflow flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   577   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   578   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   579   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   580  IFX_INLINE void IfxAsclin_clearTxFifoOverflowFlag(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   581  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   582  /** \brief Clears the transmit header end flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   583   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   584   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   585   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   586  IFX_INLINE void IfxAsclin_clearTxHeaderEndFlag(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   587  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   588  /** \brief Clears the transmit response end flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   589   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   590   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   591   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   592  IFX_INLINE void IfxAsclin_clearTxResponseEndFlag(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   593  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   594  /** \brief Flushes (empties) the Rx FIFO
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   595   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   596   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   597   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   598  IFX_INLINE void IfxAsclin_flushRxFifo(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   599  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   600  /** \brief Flushes (empties) the Tx FIFO
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   601   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   602   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   603   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   604  IFX_INLINE void IfxAsclin_flushTxFifo(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   605  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   606  /** \brief Sets the baudrate detection's lower limit
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   607   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   608   * \param limit value of the lower limit
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   609   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   610   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   611  IFX_INLINE void IfxAsclin_setBrdLowerlimt(Ifx_ASCLIN *asclin, uint8 limit);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   612  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   613  /** \brief Sets the baudrate detection's upper limit
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   614   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   615   * \param limit value of the upper limit
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   616   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   617   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   618  IFX_INLINE void IfxAsclin_setBrdUpperlimt(Ifx_ASCLIN *asclin, uint8 limit);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   619  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   620  /** \brief Sets the checksum injection
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   621   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   622   * \param csi checksum injection selection (not written / written)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   623   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   624   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   625  IFX_INLINE void IfxAsclin_setChecksumInjection(Ifx_ASCLIN *asclin, IfxAsclin_ChecksumInjection csi);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   626  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   627  /** \brief Sets the checksum mode
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   628   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   629   * \param mode checksum mode selection (classic / enhanced)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   630   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   631   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   632  IFX_INLINE void IfxAsclin_setChecksumMode(Ifx_ASCLIN *asclin, IfxAsclin_Checksum mode);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   633  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   634  /** \brief Sets the data length (number of bits per transfer)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   635   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   636   * \param length data length selection
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   637   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   638   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   639  IFX_INLINE void IfxAsclin_setDataLength(Ifx_ASCLIN *asclin, IfxAsclin_DataLength length);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   640  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   641  /** \brief Sets the denominator of the fractional divider
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   642   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   643   * \param denominator value of the denominator
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   644   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   645   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   646  IFX_INLINE void IfxAsclin_setDenominator(Ifx_ASCLIN *asclin, uint16 denominator);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   647  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   648  /** \brief Sets the disable module request
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   649   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   650   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   651   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   652  IFX_INLINE void IfxAsclin_setDisableModuleRequest(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   653  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   654  /** \brief Sets the enable module request
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   655   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   656   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   657   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   658  IFX_INLINE void IfxAsclin_setEnableModuleRequest(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   659  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   660  /** \brief Sets digital glitch filter depth
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   661   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   662   * \param depth digital glitch filter depth selection (1 to 63)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   663   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   664   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   665  IFX_INLINE void IfxAsclin_setFilterDepth(Ifx_ASCLIN *asclin, uint8 depth);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   666  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   667  /** \brief Sets the header response selection
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   668   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   669   * \param type type of selection (header and response or header only)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   670   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   671   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   672  IFX_INLINE void IfxAsclin_setHeaderResponseSelect(Ifx_ASCLIN *asclin, IfxAsclin_HeaderResponseSelect type);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   673  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   674  /** \brief Sets the idle delay
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   675   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   676   * \param delay idle delay selection
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   677   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   678   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   679  IFX_INLINE void IfxAsclin_setIdleDelay(Ifx_ASCLIN *asclin, IfxAsclin_IdleDelay delay);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   680  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   681  /** \brief Sets the kernal reset of the KRST1
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   682   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   683   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   684   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   685  IFX_INLINE void IfxAsclin_setKernelResetOne(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   686  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   687  /** \brief Sets the kernel reset of the KRST0
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   688   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   689   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   690   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   691  IFX_INLINE void IfxAsclin_setKernelResetZero(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   692  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   693  /** \brief Sets the lead delay
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   694   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   695   * \param delay lead delay selection
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   696   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   697   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   698  IFX_INLINE void IfxAsclin_setLeadDelay(Ifx_ASCLIN *asclin, IfxAsclin_LeadDelay delay);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   699  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   700  /** \brief Sets the LIN break length
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   701   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   702   * \param length value of the break length
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   703   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   704   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   705  IFX_INLINE void IfxAsclin_setLinBreakLength(Ifx_ASCLIN *asclin, uint8 length);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   706  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   707  /** \brief Sets the LIN header timeout
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   708   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   709   * \param timeout value of the header timeout
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   710   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   711   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   712  IFX_INLINE void IfxAsclin_setLinHeaderTimeout(Ifx_ASCLIN *asclin, uint8 timeout);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   713  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   714  /** \brief Sets the LIN mode of operation
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   715   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   716   * \param mode mode selection (slave / master)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   717   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   718   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   719  IFX_INLINE void IfxAsclin_setLinMode(Ifx_ASCLIN *asclin, IfxAsclin_LinMode mode);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   720  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   721  /** \brief Sets the LIN response timeout mode
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   722   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   723   * \param mode LIN response timeout mode selection
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   724   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   725   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   726  IFX_INLINE void IfxAsclin_setLinResponseTimeoutMode(Ifx_ASCLIN *asclin, IfxAsclin_LinResponseTimeoutMode mode);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   727  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   728  /** \brief Sets the LIN response timeout threshold
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   729   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   730   * \param threshold value of the tomeout threshold (1 to 256 bit times)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   731   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   732   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   733  IFX_INLINE void IfxAsclin_setLinResponseTimeoutThreshold(Ifx_ASCLIN *asclin, uint16 threshold);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   734  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   735  /** \brief Sets the numerator of the fractional divider
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   736   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   737   * \param numerator value of the numerator
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   738   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   739   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   740  IFX_INLINE void IfxAsclin_setNumerator(Ifx_ASCLIN *asclin, uint16 numerator);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   741  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   742  /** \brief Sets the division ratio of the baudrate post divider
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   743   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   744   * \param ovsFactor value of oversampling factor
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   745   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   746   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   747  IFX_INLINE void IfxAsclin_setOversampling(Ifx_ASCLIN *asclin, IfxAsclin_OversamplingFactor ovsFactor);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   748  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   749  /** \brief Sets the parity type
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   750   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   751   * \param type parity type selction (even / odd)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   752   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   753   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   754  IFX_INLINE void IfxAsclin_setParityType(Ifx_ASCLIN *asclin, IfxAsclin_ParityType type);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   755  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   756  /** \brief Sets the division ratio of the predivider (prescaler)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   757   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   758   * \param prescaler value of prescaler
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   759   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   760   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   761  IFX_INLINE void IfxAsclin_setPrescaler(Ifx_ASCLIN *asclin, uint16 prescaler);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   762  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   763  /** \brief Sets the receive buffer mode
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   764   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   765   * \param mode receive buffer mode selection (Rx FIFO or single stage Rx buffer)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   766   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   767   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   768  IFX_INLINE void IfxAsclin_setRxBufferMode(Ifx_ASCLIN *asclin, IfxAsclin_ReceiveBufferMode mode);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   769  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   770  /** \brief Sets the Tx FIFO interrupt level
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   771   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   772   * \param level interrupt level selection
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   773   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   774   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   775  IFX_INLINE void IfxAsclin_setRxFifoInterruptLevel(Ifx_ASCLIN *asclin, IfxAsclin_RxFifoInterruptLevel level);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   776  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   777  /** \brief Sets the receive FIFO outlet width
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   778   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   779   * \param width number of bytes read to the Rx FIFO with one FPI bus read
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   780   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   781   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   782  IFX_INLINE void IfxAsclin_setRxFifoOutletWidth(Ifx_ASCLIN *asclin, IfxAsclin_RxFifoOutletWidth width);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   783  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   784  /** \brief Sets the sample mode (number of samples per bit / median filter)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   785   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   786   * \param medianFilter value of the median filter
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   787   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   788   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   789  IFX_INLINE void IfxAsclin_setSampleMode(Ifx_ASCLIN *asclin, IfxAsclin_SamplesPerBit medianFilter);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   790  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   791  /** \brief Sets the sampling point position
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   792   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   793   * \param spPosition sample point position selection
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   794   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   795   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   796  IFX_INLINE void IfxAsclin_setSamplePointPosition(Ifx_ASCLIN *asclin, IfxAsclin_SamplePointPosition spPosition);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   797  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   798  /** \brief Sets the shift direction
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   799   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   800   * \param dir shift direction selection (LSB / MSB first)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   801   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   802   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   803  IFX_INLINE void IfxAsclin_setShiftDirection(Ifx_ASCLIN *asclin, IfxAsclin_ShiftDirection dir);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   804  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   805  /** \brief Sets the number of stop bits
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   806   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   807   * \param stopBit number of stop bits selection
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   808   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   809   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   810  IFX_INLINE void IfxAsclin_setStopBit(Ifx_ASCLIN *asclin, IfxAsclin_StopBit stopBit);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   811  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   812  /** \brief Sets the transmit header request flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   813   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   814   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   815   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   816  IFX_INLINE void IfxAsclin_setTransmitHeaderRequestFlag(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   817  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   818  /** \brief Sets the transmit response request flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   819   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   820   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   821   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   822  IFX_INLINE void IfxAsclin_setTransmitResponseRequestFlag(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   823  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   824  /** \brief Sets the transmission wake request flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   825   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   826   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   827   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   828  IFX_INLINE void IfxAsclin_setTransmitWakeRequestFlag(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   829  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   830  /** \brief Sets the transmit FIFO inlet width
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   831   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   832   * \param width number of bytes written to the Tx FIFO with one FPI bus write
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   833   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   834   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   835  IFX_INLINE void IfxAsclin_setTxFifoInletWidth(Ifx_ASCLIN *asclin, IfxAsclin_TxFifoInletWidth width);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   836  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   837  /** \brief Sets the Tx FIFO interrupt level
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   838   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   839   * \param level interrupt level selection
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   840   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   841   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   842  IFX_INLINE void IfxAsclin_setTxFifoInterruptLevel(Ifx_ASCLIN *asclin, IfxAsclin_TxFifoInterruptLevel level);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   843  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   844  /** \} */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   845  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   846  /** \addtogroup IfxLld_Asclin_Std_Utility
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   847   * \{ */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   848  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   849  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   850  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   851  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   852  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   853  /** \brief Returns the break detected flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   854   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   855   * \return break detected flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   856   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   857  IFX_INLINE boolean IfxAsclin_getBreakDetectedFlagStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   858  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   859  /** \brief Returns the clock source
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   860   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   861   * \return clock source
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   862   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   863  IFX_INLINE uint8 IfxAsclin_getClockSource(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   864  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   865  /** \brief Returns the clock status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   866   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   867   * \return clock status (off / on)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   868   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   869  IFX_INLINE boolean IfxAsclin_getClockStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   870  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   871  /** \brief Returns the collision detection error flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   872   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   873   * \return collision detection error flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   874   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   875  IFX_INLINE boolean IfxAsclin_getCollisionDetectionErrorFlagStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   876  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   877  /** \brief Returns  the falling edge detected flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   878   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   879   * \return falling edge detected flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   880   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   881  IFX_INLINE boolean IfxAsclin_getFallingEdgeDetectedFlagStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   882  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   883  /** \brief Returns the frame error flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   884   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   885   * \return frame error flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   886   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   887  IFX_INLINE boolean IfxAsclin_getFrameErrorFlagStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   888  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   889  /** \brief Returns the header timeout flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   890   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   891   * \return header timeout flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   892   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   893  IFX_INLINE boolean IfxAsclin_getHeaderTimeoutFlagStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   894  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   895  /** \brief Returns the kernel reset status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   896   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   897   * \return kernel reset status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   898   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   899  IFX_INLINE boolean IfxAsclin_getKernelResetStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   900  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   901  /** \brief Returns the LIN auto baudrate detection error flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   902   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   903   * \return LIN auto baudrate detection error flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   904   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   905  IFX_INLINE boolean IfxAsclin_getLinAutoBaudDetectionErrorFlagStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   906  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   907  /** \brief Returns the LIN checksum error flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   908   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   909   * \return LIN checksum error flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   910   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   911  IFX_INLINE boolean IfxAsclin_getLinChecksumErrorFlagStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   912  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   913  /** \brief Returns the LIN parity error flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   914   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   915   * \return LIN parity error flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   916   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   917  IFX_INLINE boolean IfxAsclin_getLinParityErrorFlagStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   918  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   919  /** \brief Returns the module status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   920   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   921   * \return module status (enabled / disabled)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   922   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   923  IFX_INLINE boolean IfxAsclin_getModuleStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   924  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   925  /** \brief Returns the parity error flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   926   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   927   * \return parity error flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   928   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   929  IFX_INLINE boolean IfxAsclin_getParityErrorFlagStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   930  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   931  /** \brief Returns the division ratio of the predivider (prescaler)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   932   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   933   * \return value of prescaler
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   934   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   935  IFX_INLINE uint16 IfxAsclin_getPrescaler(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   936  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   937  /** \brief Returns the raising edge detected flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   938   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   939   * \return raising edge detected flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   940   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   941  IFX_INLINE boolean IfxAsclin_getRaisingEdgeDetectedFlagStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   942  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   943  /** \brief Returns the received signal status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   944   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   945   * \return received signal status (0 is low & 1 is high)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   946   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   947  IFX_INLINE boolean IfxAsclin_getReceiveSignalStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   948  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   949  /** \brief Returns the response timeout flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   950   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   951   * \return response timeout flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   952   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   953  IFX_INLINE boolean IfxAsclin_getResponseTimeoutFlagStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   954  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   955  /** \brief Returns the current filling level of Tx FIFO
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   956   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   957   * \return current filling level of Rx FIFO
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   958   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   959  IFX_INLINE uint8 IfxAsclin_getRxFifoFillLevel(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   960  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   961  /** \brief Returns the Rx FIFO level flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   962   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   963   * \return Rx FIFO level flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   964   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   965  IFX_INLINE boolean IfxAsclin_getRxFifoFillLevelFlagStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   966  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   967  /** \brief Returns the receive FIFO inlet width
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   968   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   969   * \return number of bytes read to the Rx FIFO with one FPI bus read
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   970   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   971  IFX_INLINE uint8 IfxAsclin_getRxFifoOutletWidth(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   972  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   973  /** \brief Returns the Rx FIFO overflow flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   974   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   975   * \return Rx FIFO overflow flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   976   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   977  IFX_INLINE boolean IfxAsclin_getRxFifoOverflowFlagStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   978  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   979  /** \brief Returns the Rx FIFO underflow flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   980   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   981   * \return Rx FIFO underflow flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   982   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   983  IFX_INLINE boolean IfxAsclin_getRxFifoUnderflowFlagStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   984  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   985  /** \brief Returns the receive header end flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   986   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   987   * \return receive header end flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   988   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   989  IFX_INLINE boolean IfxAsclin_getRxHeaderEndFlagStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   990  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   991  /** \brief Returns the receive response end flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   992   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   993   * \return receive response end flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   994   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   995  IFX_INLINE boolean IfxAsclin_getRxResponseEndFlagStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   996  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   997  /** \brief Returns the transmission pending flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   998   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   999   * \return transmission pending flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1000   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1001  IFX_INLINE boolean IfxAsclin_getTransmissionCompletedFlagStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1002  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1003  /** \brief Returns the transmit signal status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1004   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1005   * \return transmit signal status (0 is low & 1 is high)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1006   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1007  IFX_INLINE boolean IfxAsclin_getTransmitSignalStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1008  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1009  /** \brief Returns the current filling level of Tx FIFO
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1010   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1011   * \return current filling level of Tx FIFO
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1012   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1013  IFX_INLINE uint8 IfxAsclin_getTxFifoFillLevel(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1014  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1015  /** \brief Returns the Tx FIFO level flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1016   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1017   * \return Tx FIFO level flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1018   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1019  IFX_INLINE boolean IfxAsclin_getTxFifoFillLevelFlagStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1020  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1021  /** \brief Returns the transmit FIFO inlet width
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1022   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1023   * \return number of bytes written to the Tx FIFO with one FPI bus write
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1024   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1025  IFX_INLINE uint8 IfxAsclin_getTxFifoInletWidth(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1026  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1027  /** \brief Returns the Tx FIFO overflow flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1028   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1029   * \return Tx FIFO overflow flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1030   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1031  IFX_INLINE boolean IfxAsclin_getTxFifoOverflowFlagStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1032  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1033  /** \brief Returns the transmit header end flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1034   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1035   * \return transmit header end flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1036   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1037  IFX_INLINE boolean IfxAsclin_getTxHeaderEndFlagStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1038  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1039  /** \brief Returns the transmit response end flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1040   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1041   * \return transmit response end flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1042   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1043  IFX_INLINE boolean IfxAsclin_getTxResponseEndFlagStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1044  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1045  /** \brief Sets the sensitivity of the module to sleep signal
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1046   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1047   * \param mode mode selection (enable / disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1048   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1049   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1050  IFX_INLINE void IfxAsclin_setSleepMode(Ifx_ASCLIN *asclin, IfxAsclin_SleepMode mode);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1051  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1052  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1053  /*-------------------------Global Function Prototypes-------------------------*/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1054  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1055  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1056  /** \brief API to get the address for ASCLIN HW module register memory map
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1057   * \param asclin Resource index of the ASCLIN
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1058   * \return ASCLIN module register address
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1059   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1060  IFX_EXTERN Ifx_ASCLIN *IfxAsclin_getAddress(IfxAsclin_Index asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1061  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1062  /** \brief Returns the ASCLIN module FA frequency in Hz
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1063   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1064   * \return Returns the ASCLIN module FA frequency in Hz
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1065   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1066  IFX_EXTERN float32 IfxAsclin_getFaFrequency(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1067  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1068  /** \brief API to get the resource index of the ASCLIN specified.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1069   * \return asclin resource index
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1070   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1071  IFX_EXTERN IfxAsclin_Index IfxAsclin_getIndex(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1072  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1073  /** \brief Returns the OVS frequency
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1074   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1075   * \return Returns the ASCLIN module OVS frequency in Hz
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1076   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1077  IFX_EXTERN float32 IfxAsclin_getOvsFrequency(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1078  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1079  /** \brief Returns the PD frequency
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1080   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1081   * \return Returns the ASCLIN module PD frequency in Hz
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1082   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1083  IFX_EXTERN float32 IfxAsclin_getPdFrequency(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1084  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1085  /** \brief Returns the SHIFT frequency
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1086   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1087   * \return Returns the ASCLIN module SHIFT frequency in Hz
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1088   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1089  IFX_EXTERN float32 IfxAsclin_getShiftFrequency(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1090  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1091  /** \brief resets Asclin kernel
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1092   * \param asclin pointer to ASCLIN resgisters
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1093   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1094   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1095  IFX_EXTERN void IfxAsclin_resetModule(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1096  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1097  /** \} */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1098  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1099  /** \addtogroup IfxLld_Asclin_Std_Configuration
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1100   * \{ */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1101  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1102  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1103  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1104  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1105  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1106  /** \brief disables all flags
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1107   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1108   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1109   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1110  IFX_INLINE void IfxAsclin_disableAllFlags(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1111  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1112  /** \brief Enables/disables the auto baudrate detection
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1113   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1114   * \param enable choice (enable / disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1115   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1116   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1117  IFX_INLINE void IfxAsclin_enableAutoBaudrateDetection(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1118  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1119  /** \brief Enables/disables break detected flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1120   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1121   * \param enable choice (enable / disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1122   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1123   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1124  IFX_INLINE void IfxAsclin_enableBreakDetectedFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1125  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1126  /** \brief Enables/disables the collision detection
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1127   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1128   * \param enable choice (enable/disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1129   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1130   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1131  IFX_INLINE void IfxAsclin_enableCollisionDetection(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1132  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1133  /** \brief Enables/disables LIN collision detection error flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1134   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1135   * \param enable choice (enable / disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1136   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1137   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1138  IFX_INLINE void IfxAsclin_enableCollisionDetectionErrorFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1139  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1140  /** \brief Enables/disables CTS
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1141   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1142   * \param enable choice (enable/disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1143   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1144   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1145  IFX_INLINE void IfxAsclin_enableCts(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1146  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1147  /** \brief Enables/disables falling edge detected flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1148   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1149   * \param enable choice (enable / disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1150   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1151   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1152  IFX_INLINE void IfxAsclin_enableFallingEdgeDetectedFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1153  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1154  /** \brief Enables/disables frame error flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1155   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1156   * \param enable choice (enable / disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1157   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1158   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1159  IFX_INLINE void IfxAsclin_enableFrameErrorFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1160  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1161  /** \brief Enables/disables the hardware checksum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1162   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1163   * \param enable choice (enable / disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1164   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1165   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1166  IFX_INLINE void IfxAsclin_enableHardwareChecksum(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1167  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1168  /** \brief Enables/disables header timeout flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1169   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1170   * \param enable choice (enable / disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1171   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1172   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1173  IFX_INLINE void IfxAsclin_enableHeaderTimeoutFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1174  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1175  /** \brief Enables/disables LIN auto baudrate detection error flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1176   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1177   * \param enable choice (enable / disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1178   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1179   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1180  IFX_INLINE void IfxAsclin_enableLinAutoBaudDetectionErrorFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1181  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1182  /** \brief Enables/disables LIN checksum error flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1183   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1184   * \param enable choice (enable / disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1185   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1186   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1187  IFX_INLINE void IfxAsclin_enableLinChecksumErrorFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1188  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1189  /** \brief Enables/disables LIN parity error flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1190   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1191   * \param enable choice (enable / disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1192   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1193   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1194  IFX_INLINE void IfxAsclin_enableLinParityErrorFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1195  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1196  /** \brief Enables/disables the loop back mode
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1197   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1198   * \param enable choice (enable/disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1199   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1200   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1201  IFX_INLINE void IfxAsclin_enableLoopBackMode(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1202  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1203  /** \brief Enables/disables the parity bit attachment to tha data bits
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1204   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1205   * \param enable choice (enable/disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1206   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1207   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1208  IFX_INLINE void IfxAsclin_enableParity(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1209  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1210  /** \brief Enables/disables parity error flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1211   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1212   * \param enable choice (enable / disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1213   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1214   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1215  IFX_INLINE void IfxAsclin_enableParityErrorFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1216  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1217  /** \brief Enables/disables raising edge detected flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1218   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1219   * \param enable choice (enable / disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1220   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1221   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1222  IFX_INLINE void IfxAsclin_enableRaisingEdgeDetectedFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1223  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1224  /** \brief Enables/disables response timeout flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1225   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1226   * \param enable choice (enable / disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1227   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1228   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1229  IFX_INLINE void IfxAsclin_enableResponseTimeoutFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1230  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1231  /** \brief Enables/disables Rx FIFO level flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1232   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1233   * \param enable choice (enable / disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1234   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1235   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1236  IFX_INLINE void IfxAsclin_enableRxFifoFillLevelFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1237  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1238  /** \brief Enables/disables the receive FIFO outlet to allow filling of Rx FIFO through shift register
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1239   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1240   * \param enable choice (enable/disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1241   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1242   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1243  IFX_INLINE void IfxAsclin_enableRxFifoInlet(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1244  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1245  /** \brief Enables/disables Rx FIFO overflow flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1246   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1247   * \param enable choice (enable / disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1248   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1249   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1250  IFX_INLINE void IfxAsclin_enableRxFifoOverflowFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1251  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1252  /** \brief Enables/disables Rx FIFO underflow flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1253   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1254   * \param enable choice (enable / disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1255   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1256   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1257  IFX_INLINE void IfxAsclin_enableRxFifoUnderflowFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1258  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1259  /** \brief Enables/disables receive header end flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1260   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1261   * \param enable choice (enable / disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1262   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1263   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1264  IFX_INLINE void IfxAsclin_enableRxHeaderEndFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1265  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1266  /** \brief Enables/disables receive response end flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1267   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1268   * \param enable choice (enable / disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1269   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1270   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1271  IFX_INLINE void IfxAsclin_enableRxResponseEndFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1272  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1273  /** \brief Enables/disables transmission completed flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1274   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1275   * \param enable choice (enable / disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1276   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1277   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1278  IFX_INLINE void IfxAsclin_enableTransmissionCompletedFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1279  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1280  /** \brief Enables/disables Tx FIFO level flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1281   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1282   * \param enable choice (enable / disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1283   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1284   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1285  IFX_INLINE void IfxAsclin_enableTxFifoFillLevelFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1286  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1287  /** \brief Enables/disables the transmit FIFO outlet to allow transmission
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1288   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1289   * \param enable choice (enable/disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1290   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1291   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1292  IFX_INLINE void IfxAsclin_enableTxFifoOutlet(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1293  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1294  /** \brief Enables/disables Tx FIFO overflow flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1295   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1296   * \param enable choice (enable / disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1297   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1298   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1299  IFX_INLINE void IfxAsclin_enableTxFifoOverflowFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1300  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1301  /** \brief Enables/disables transmit header end flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1302   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1303   * \param enable choice (enable / disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1304   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1305   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1306  IFX_INLINE void IfxAsclin_enableTxHeaderEndFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1307  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1308  /** \brief Enables/disables transmit response end flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1309   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1310   * \param enable choice (enable / disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1311   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1312   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1313  IFX_INLINE void IfxAsclin_enableTxResponseEndFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1314  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1315  /** \brief Returns the module's suspend state.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1316   * TRUE :if module is suspended.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1317   * FALSE:if module is not yet suspended.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1318   * \param asclin Pointer to ASCLIN module registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1319   * \return Suspend status (TRUE / FALSE)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1320   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1321  IFX_INLINE boolean IfxAsclin_isModuleSuspended(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1322  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1323  /** \brief Selects the clock polarity
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1324   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1325   * \param cpol CPOL selection
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1326   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1327   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1328  IFX_INLINE void IfxAsclin_setClockPolarity(Ifx_ASCLIN *asclin, IfxAsclin_ClockPolarity cpol);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1329  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1330  /** \brief Selects the CTS input pin
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1331   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1332   * \param ctsi CTS input pin selection
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1333   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1334   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1335  IFX_INLINE void IfxAsclin_setCtsInput(Ifx_ASCLIN *asclin, IfxAsclin_CtsInputSelect ctsi);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1336  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1337  /** \brief Selects the module's mode of operation
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1338   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1339   * \param mode mode selction
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1340   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1341   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1342  IFX_INLINE void IfxAsclin_setFrameMode(Ifx_ASCLIN *asclin, IfxAsclin_FrameMode mode);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1343  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1344  /** \brief Selects the RTS/CTS polarity
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1345   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1346   * \param rcpol RCPOL selection
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1347   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1348   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1349  IFX_INLINE void IfxAsclin_setRtsCtsPolarity(Ifx_ASCLIN *asclin, IfxAsclin_RtsCtsPolarity rcpol);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1350  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1351  /** \brief Selects the alternate input for Rx signal
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1352   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1353   * \param alti alternate input selection of Rx signal
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1354   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1355   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1356  IFX_INLINE void IfxAsclin_setRxInput(Ifx_ASCLIN *asclin, IfxAsclin_RxInputSelect alti);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1357  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1358  /** \brief Selects the slave polarity
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1359   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1360   * \param spol SPOL selection
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1361   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1362   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1363  IFX_INLINE void IfxAsclin_setSlavePolarity(Ifx_ASCLIN *asclin, IfxAsclin_SlavePolarity spol);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1364  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1365  /** \brief Configure the Module to Hard/Soft suspend mode.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1366   * Note: The api works only when the OCDS is enabled and in Supervisor Mode. When OCDS is disabled the OCS suspend control is ineffective.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1367   * \param asclin Pointer to ASCLIN module registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1368   * \param mode Module suspend mode
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1369   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1370   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1371  IFX_INLINE void IfxAsclin_setSuspendMode(Ifx_ASCLIN *asclin, IfxAsclin_SuspendMode mode);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1372  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1373  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1374  /*-------------------------Global Function Prototypes-------------------------*/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1375  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1376  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1377  /** \brief Set the bit timing
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1378   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1379   * \note this function required FA source and the PD frequency to be set to their final values
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1380   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1381   * \param baudrate Required baudrate
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1382   * \param oversampling The oversampling factor
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1383   * \param samplepoint The sample point position
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1384   * \param medianFilter Number of samples per bit (median filter)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1385   * \return TRUE if configuration was successfull
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1386   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1387  IFX_EXTERN boolean IfxAsclin_setBitTiming(Ifx_ASCLIN *asclin, float32 baudrate, IfxAsclin_OversamplingFactor oversampling, IfxAsclin_SamplePointPosition samplepoint, IfxAsclin_SamplesPerBit medianFilter);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1388  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1389  /** \} */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1390  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1391  /** \addtogroup IfxLld_Asclin_Std_External
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1392   * \{ */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1393  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1394  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1395  /*-------------------------Global Function Prototypes-------------------------*/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1396  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1397  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1398  /** \brief Disables the module
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1399   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1400   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1401   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1402  IFX_EXTERN void IfxAsclin_disableModule(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1403  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1404  /** \brief Enables the ASC error interrupt Flags
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1405   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1406   * \param parEnable parity error
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1407   * \param rfoEnable Rx FIFO overflow error
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1408   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1409   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1410  IFX_EXTERN void IfxAsclin_enableAscErrorFlags(Ifx_ASCLIN *asclin, boolean parEnable, boolean rfoEnable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1411  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1412  /** \brief Enables the module
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1413   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1414   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1415   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1416  IFX_EXTERN void IfxAsclin_enableModule(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1417  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1418  /** \brief Returns the SRC pointer for ERR
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1419   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1420   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1421  IFX_EXTERN volatile Ifx_SRC_SRCR *IfxAsclin_getSrcPointerEr(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1422  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1423  /** \brief Returns the  SRC pointer for Rx
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1424   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1425   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1426  IFX_EXTERN volatile Ifx_SRC_SRCR *IfxAsclin_getSrcPointerRx(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1427  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1428  /** \brief Returns the SRC pointer for Tx
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1429   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1430   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1431  IFX_EXTERN volatile Ifx_SRC_SRCR *IfxAsclin_getSrcPointerTx(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1432  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1433  /** \brief Reads data up to 16 bits
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1434   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1435   * \param data Array where the read data shall be stored
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1436   * \param count number of items to read
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1437   * \return number of items that could not be read
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1438   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1439  IFX_EXTERN uint32 IfxAsclin_read16(Ifx_ASCLIN *asclin, uint16 *data, uint32 count);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1440  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1441  /** \brief Reads data up to 32 bits
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1442   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1443   * \param data Array where the read data shall be stored
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1444   * \param count number of items to read
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1445   * \return number of items that could not be read
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1446   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1447  IFX_EXTERN uint32 IfxAsclin_read32(Ifx_ASCLIN *asclin, uint32 *data, uint32 count);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1448  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1449  /** \brief Reads data up to 8 bits
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1450   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1451   * \param data Array where the read data shall be stored
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1452   * \param count number of items to read
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1453   * \return number of items that could not be read
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1454   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1455  IFX_EXTERN uint32 IfxAsclin_read8(Ifx_ASCLIN *asclin, uint8 *data, uint32 count);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1456  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1457  /** \brief Sets the baudrate bit fields
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1458   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1459   * \param prescaler division ratio of the predivider
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1460   * \param numerator numerator of the fractional divider
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1461   * \param denominator denominator of the fractional divider
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1462   * \param oversampling division ratio of the baudrate postdivider
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1463   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1464   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1465  IFX_EXTERN void IfxAsclin_setBaudrateBitFields(Ifx_ASCLIN *asclin, uint16 prescaler, uint16 numerator, uint16 denominator, IfxAsclin_OversamplingFactor oversampling);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1466  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1467  /** \brief Sets the  clock source
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1468   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1469   * \param clockSource clock source selection
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1470   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1471   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1472  IFX_EXTERN void IfxAsclin_setClockSource(Ifx_ASCLIN *asclin, IfxAsclin_ClockSource clockSource);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1473  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1474  /** \brief Writes data up to 16 bits
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1475   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1476   * \param data Array of data to be send
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1477   * \param count number of items to be send
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1478   * \return the number of items that could not be send
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1479   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1480  IFX_EXTERN uint32 IfxAsclin_write16(Ifx_ASCLIN *asclin, uint16 *data, uint32 count);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1481  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1482  /** \brief Writes data up to 32 bits
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1483   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1484   * \param data Array of data to be send
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1485   * \param count number of items to be send
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1486   * \return the number of items that could not be send
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1487   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1488  IFX_EXTERN uint32 IfxAsclin_write32(Ifx_ASCLIN *asclin, uint32 *data, uint32 count);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1489  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1490  /** \brief Writes data up to 8 bits
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1491   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1492   * \param data Array of data to be send
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1493   * \param count number of items to be send
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1494   * \return the number of items that could not be send
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1495   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1496  IFX_EXTERN uint32 IfxAsclin_write8(Ifx_ASCLIN *asclin, uint8 *data, uint32 count);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1497  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1498  /** \} */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1499  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1500  /** \addtogroup IfxLld_Asclin_Std_IO
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1501   * \{ */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1502  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1503  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1504  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1505  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1506  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1507  /** \brief Initializes a CTS input
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1508   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1509   * Attention: the kernel clock has to be disabled whenever the input multiplexer is changed.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1510   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1511   * This can be done with IfxAsclin_setClockSource(asclinSFR, IfxAsclin_ClockSource_noClock);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1512   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1513   * After the function call, the current clock can be enabled again.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1514   * \param cts the CTS Pin which should be configured
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1515   * \param inputMode the pin input mode which should be configured
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1516   * \param padDriver the pad driver mode which should be configured
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1517   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1518   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1519  IFX_INLINE void IfxAsclin_initCtsPin(const IfxAsclin_Cts_In *cts, IfxPort_InputMode inputMode, IfxPort_PadDriver padDriver);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1520  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1521  /** \brief Initializes a RTS output
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1522   * \param rts the RTS Pin which should be configured
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1523   * \param outputMode the pin output mode which should be configured
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1524   * \param padDriver the pad driver mode which should be configured
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1525   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1526   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1527  IFX_INLINE void IfxAsclin_initRtsPin(const IfxAsclin_Rts_Out *rts, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1528  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1529  /** \brief Initializes a RX input
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1530   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1531   * Attention: the kernel clock has to be disabled whenever the input multiplexer is changed.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1532   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1533   * This can be done with IfxAsclin_setClockSource(asclinSFR, IfxAsclin_ClockSource_noClock);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1534   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1535   * After the function call, the current clock can be enabled again.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1536   * \param rx the RX Pin which should be configured
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1537   * \param inputMode the pin input mode which should be configured
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1538   * \param padDriver the pad driver mode which should be configured
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1539   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1540   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1541  IFX_INLINE void IfxAsclin_initRxPin(const IfxAsclin_Rx_In *rx, IfxPort_InputMode inputMode, IfxPort_PadDriver padDriver);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1542  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1543  /** \brief Initializes a SCLK output
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1544   * \param sclk the SCLK Pin which should be configured
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1545   * \param outputMode the pin output mode which should be configured
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1546   * \param padDriver the pad driver mode which should be configured
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1547   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1548   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1549  IFX_INLINE void IfxAsclin_initSclkPin(const IfxAsclin_Sclk_Out *sclk, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1550  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1551  /** \brief Initializes a SLSO output
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1552   * \param slso the SLSO Pin which should be configured
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1553   * \param outputMode the pin output mode which should be configured
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1554   * \param padDriver the pad driver mode which should be configured
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1555   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1556   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1557  IFX_INLINE void IfxAsclin_initSlsoPin(const IfxAsclin_Slso_Out *slso, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1558  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1559  /** \brief Initializes a TX output
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1560   * \param tx the TX Pin which should be configured
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1561   * \param outputMode the pin output mode which should be configured
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1562   * \param padDriver the pad driver mode which should be configured
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1563   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1564   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1565  IFX_INLINE void IfxAsclin_initTxPin(const IfxAsclin_Tx_Out *tx, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1566  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1567  /** \} */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1568  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1569  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1570  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1571  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1572  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1573  /**
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1574   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1575   * \return returns the value of RxDATA register
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1576   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1577  IFX_INLINE uint32 IfxAsclin_readRxData(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1578  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1579  /**
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1580   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1581   * \param data data to be written
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1582   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1583   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1584  IFX_INLINE void IfxAsclin_writeTxData(Ifx_ASCLIN *asclin, uint32 data);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1585  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1586  /** \brief Returns the status of all error flags
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1587   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1588   * \return status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1589   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1590  IFX_INLINE uint16 IfxAsclin_getAllErrorFlagsStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1591  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1592  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1593  /*---------------------Inline Function Implementations------------------------*/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1594  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1595  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1596  IFX_INLINE void IfxAsclin_clearAllFlags(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1597  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1598      asclin->FLAGSCLEAR.U = 0xFFFFFFFF;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1599  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1600  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1601  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1602  IFX_INLINE void IfxAsclin_clearBreakDetectedFlag(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1603  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1604      asclin->FLAGSCLEAR.B.BDC = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1605  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1606  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1607  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1608  IFX_INLINE void IfxAsclin_clearCollisionDetectionErrorFlag(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1609  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1610      asclin->FLAGSCLEAR.B.CEC = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1611  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1612  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1613  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1614  IFX_INLINE void IfxAsclin_clearFallingEdgeDetectedFlag(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1615  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1616      asclin->FLAGSCLEAR.B.FEDC = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1617  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1618  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1619  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1620  IFX_INLINE void IfxAsclin_clearFrameErrorFlag(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1621  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1622      asclin->FLAGSCLEAR.B.FEC = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1623  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1624  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1625  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1626  IFX_INLINE void IfxAsclin_clearHeaderTimeoutFlag(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1627  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1628      asclin->FLAGSCLEAR.B.HTC = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1629  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1630  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1631  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1632  IFX_INLINE void IfxAsclin_clearKernelResetStatus(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1633  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1634      asclin->KRSTCLR.B.CLR = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1635  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1636  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1637  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1638  IFX_INLINE void IfxAsclin_clearLinAutoBaudDetectionErrorFlag(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1639  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1640      asclin->FLAGSCLEAR.B.LAC = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1641  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1642  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1643  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1644  IFX_INLINE void IfxAsclin_clearLinChecksumErrorFlag(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1645  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1646      asclin->FLAGSCLEAR.B.LCC = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1647  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1648  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1649  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1650  IFX_INLINE void IfxAsclin_clearLinParityErrorFlag(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1651  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1652      asclin->FLAGSCLEAR.B.LPC = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1653  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1654  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1655  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1656  IFX_INLINE void IfxAsclin_clearParityErrorFlag(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1657  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1658      asclin->FLAGSCLEAR.B.PEC = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1659  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1660  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1661  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1662  IFX_INLINE void IfxAsclin_clearRaisingEdgeDetectedFlag(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1663  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1664      asclin->FLAGSCLEAR.B.REDC = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1665  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1666  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1667  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1668  IFX_INLINE void IfxAsclin_clearResponseTimeoutFlag(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1669  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1670      asclin->FLAGSCLEAR.B.RTC = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1671  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1672  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1673  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1674  IFX_INLINE void IfxAsclin_clearRxFifoFillLevelFlag(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1675  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1676      asclin->FLAGSCLEAR.B.RFLC = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1677  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1678  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1679  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1680  IFX_INLINE void IfxAsclin_clearRxFifoOverflowFlag(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1681  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1682      asclin->FLAGSCLEAR.B.RFOC = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1683  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1684  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1685  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1686  IFX_INLINE void IfxAsclin_clearRxFifoUnderflowFlag(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1687  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1688      asclin->FLAGSCLEAR.B.RFUC = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1689  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1690  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1691  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1692  IFX_INLINE void IfxAsclin_clearRxHeaderEndFlag(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1693  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1694      asclin->FLAGSCLEAR.B.RHC = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1695  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1696  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1697  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1698  IFX_INLINE void IfxAsclin_clearRxResponseEndFlag(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1699  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1700      asclin->FLAGSCLEAR.B.RRC = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1701  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1702  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1703  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1704  IFX_INLINE void IfxAsclin_clearTransmissionCompletedFlag(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1705  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1706      asclin->FLAGSCLEAR.B.TCC = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1707  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1708  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1709  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1710  IFX_INLINE void IfxAsclin_clearTxFifoFillLevelFlag(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1711  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1712      asclin->FLAGSCLEAR.B.TFLC = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1713  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1714  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1715  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1716  IFX_INLINE void IfxAsclin_clearTxFifoOverflowFlag(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1717  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1718      asclin->FLAGSCLEAR.B.TFOC = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1719  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1720  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1721  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1722  IFX_INLINE void IfxAsclin_clearTxHeaderEndFlag(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1723  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1724      asclin->FLAGSCLEAR.B.THC = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1725  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1726  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1727  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1728  IFX_INLINE void IfxAsclin_clearTxResponseEndFlag(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1729  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1730      asclin->FLAGSCLEAR.B.TRC = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1731  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1732  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1733  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1734  IFX_INLINE void IfxAsclin_disableAllFlags(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1735  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1736      asclin->FLAGSENABLE.U = 0x00000000;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1737  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1738  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1739  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1740  IFX_INLINE void IfxAsclin_enableAutoBaudrateDetection(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1741  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1742      asclin->LIN.CON.B.ABD = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1743  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1744  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1745  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1746  IFX_INLINE void IfxAsclin_enableBreakDetectedFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1747  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1748      asclin->FLAGSENABLE.B.BDE = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1749  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1750  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1751  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1752  IFX_INLINE void IfxAsclin_enableCollisionDetection(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1753  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1754      asclin->FRAMECON.B.CEN = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1755  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1756  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1757  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1758  IFX_INLINE void IfxAsclin_enableCollisionDetectionErrorFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1759  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1760      asclin->FLAGSENABLE.B.CEE = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1761  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1762  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1763  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1764  IFX_INLINE void IfxAsclin_enableCts(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1765  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1766      asclin->IOCR.B.CTSEN = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1767  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1768  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1769  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1770  IFX_INLINE void IfxAsclin_enableFallingEdgeDetectedFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1771  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1772      asclin->FLAGSENABLE.B.FEDE = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1773  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1774  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1775  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1776  IFX_INLINE void IfxAsclin_enableFrameErrorFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1777  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1778      asclin->FLAGSENABLE.B.FEE = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1779  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1780  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1781  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1782  IFX_INLINE void IfxAsclin_enableHardwareChecksum(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1783  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1784      asclin->LIN.CON.B.CSEN = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1785  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1786  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1787  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1788  IFX_INLINE void IfxAsclin_enableHeaderTimeoutFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1789  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1790      asclin->FLAGSENABLE.B.HTE = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1791  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1792  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1793  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1794  IFX_INLINE void IfxAsclin_enableLinAutoBaudDetectionErrorFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1795  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1796      asclin->FLAGSENABLE.B.ABE = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1797  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1798  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1799  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1800  IFX_INLINE void IfxAsclin_enableLinChecksumErrorFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1801  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1802      asclin->FLAGSENABLE.B.LCE = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1803  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1804  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1805  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1806  IFX_INLINE void IfxAsclin_enableLinParityErrorFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1807  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1808      asclin->FLAGSENABLE.B.LPE = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1809  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1810  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1811  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1812  IFX_INLINE void IfxAsclin_enableLoopBackMode(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1813  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1814      asclin->IOCR.B.LB = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1815  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1816  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1817  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1818  IFX_INLINE void IfxAsclin_enableParity(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1819  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1820      asclin->FRAMECON.B.PEN = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1821  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1822  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1823  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1824  IFX_INLINE void IfxAsclin_enableParityErrorFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1825  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1826      asclin->FLAGSENABLE.B.PEE = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1827  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1828  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1829  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1830  IFX_INLINE void IfxAsclin_enableRaisingEdgeDetectedFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1831  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1832      asclin->FLAGSENABLE.B.REDE = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1833  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1834  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1835  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1836  IFX_INLINE void IfxAsclin_enableResponseTimeoutFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1837  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1838      asclin->FLAGSENABLE.B.RTE = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1839  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1840  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1841  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1842  IFX_INLINE void IfxAsclin_enableRxFifoFillLevelFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1843  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1844      asclin->FLAGSENABLE.B.RFLE = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1845  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1846  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1847  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1848  IFX_INLINE void IfxAsclin_enableRxFifoInlet(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1849  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1850      asclin->RXFIFOCON.B.ENI = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1851  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1852  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1853  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1854  IFX_INLINE void IfxAsclin_enableRxFifoOverflowFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1855  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1856      asclin->FLAGSENABLE.B.RFOE = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1857  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1858  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1859  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1860  IFX_INLINE void IfxAsclin_enableRxFifoUnderflowFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1861  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1862      asclin->FLAGSENABLE.B.RFUE = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1863  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1864  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1865  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1866  IFX_INLINE void IfxAsclin_enableRxHeaderEndFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1867  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1868      asclin->FLAGSENABLE.B.RHE = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1869  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1870  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1871  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1872  IFX_INLINE void IfxAsclin_enableRxResponseEndFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1873  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1874      asclin->FLAGSENABLE.B.RRE = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1875  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1876  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1877  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1878  IFX_INLINE void IfxAsclin_enableTransmissionCompletedFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1879  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1880      asclin->FLAGSENABLE.B.TCE = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1881  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1882  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1883  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1884  IFX_INLINE void IfxAsclin_enableTxFifoFillLevelFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1885  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1886      asclin->FLAGSENABLE.B.TFLE = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1887  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1888  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1889  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1890  IFX_INLINE void IfxAsclin_enableTxFifoOutlet(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1891  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1892      asclin->TXFIFOCON.B.ENO = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1893  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1894  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1895  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1896  IFX_INLINE void IfxAsclin_enableTxFifoOverflowFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1897  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1898      asclin->FLAGSENABLE.B.TFOE = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1899  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1900  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1901  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1902  IFX_INLINE void IfxAsclin_enableTxHeaderEndFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1903  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1904      asclin->FLAGSENABLE.B.THE = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1905  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1906  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1907  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1908  IFX_INLINE void IfxAsclin_enableTxResponseEndFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1909  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1910      asclin->FLAGSENABLE.B.TRE = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1911  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1912  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1913  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1914  IFX_INLINE void IfxAsclin_flushRxFifo(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1915  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1916      asclin->RXFIFOCON.B.FLUSH = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1917  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1918  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1919  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1920  IFX_INLINE void IfxAsclin_flushTxFifo(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1921  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1922      asclin->TXFIFOCON.B.FLUSH = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1923  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1924  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1925  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1926  IFX_INLINE boolean IfxAsclin_getBreakDetectedFlagStatus(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1927  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1928      return asclin->FLAGS.B.BD;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1929  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1930  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1931  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1932  IFX_INLINE uint8 IfxAsclin_getClockSource(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1933  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1934      return asclin->CSR.B.CLKSEL;
	and	d15,#31
	st.w	[a10]12,d7
.L297:
	mov	d10,d6

; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	     1  /**
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	     2   * \file IfxAsclin.h
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	     3   * \brief ASCLIN  basic functionality
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	     4   * \ingroup IfxLld_Asclin
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	     5   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	     6   * \version iLLD_1_0_1_11_0
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	     7   * \copyright Copyright (c) 2018 Infineon Technologies AG. All rights reserved.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	     8   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	     9   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    10   *                                 IMPORTANT NOTICE
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    11   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    12   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    13   * Use of this file is subject to the terms of use agreed between (i) you or 
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    14   * the company in which ordinary course of business you are acting and (ii) 
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    15   * Infineon Technologies AG or its licensees. If and as long as no such 
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    16   * terms of use are agreed, use of this file is subject to following:
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    17  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    18  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    19   * Boost Software License - Version 1.0 - August 17th, 2003
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    20  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    21   * Permission is hereby granted, free of charge, to any person or 
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    22   * organization obtaining a copy of the software and accompanying 
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    23   * documentation covered by this license (the "Software") to use, reproduce,
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    24   * display, distribute, execute, and transmit the Software, and to prepare
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    25   * derivative works of the Software, and to permit third-parties to whom the 
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    26   * Software is furnished to do so, all subject to the following:
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    27  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    28   * The copyright notices in the Software and this entire statement, including
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    29   * the above license grant, this restriction and the following disclaimer, must
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    30   * be included in all copies of the Software, in whole or in part, and all
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    31   * derivative works of the Software, unless such copies or derivative works are
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    32   * solely in the form of machine-executable object code generated by a source
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    33   * language processor.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    34  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    35   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR 
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    36   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    37   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    38   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE 
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    39   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    40   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    41   * DEALINGS IN THE SOFTWARE.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    42  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    43   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    44   * \defgroup IfxLld_Asclin_Std_Enumerations Enumerations
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    45   * \ingroup IfxLld_Asclin_Std
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    46   * \defgroup IfxLld_Asclin_Std_Operative Operative Functions
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    47   * \ingroup IfxLld_Asclin_Std
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    48   * \defgroup IfxLld_Asclin_Std_Utility Utility Functions
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    49   * \ingroup IfxLld_Asclin_Std
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    50   * \defgroup IfxLld_Asclin_Std_Configuration Configuration Functions
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    51   * \ingroup IfxLld_Asclin_Std
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    52   * \defgroup IfxLld_Asclin_Std_External External Functions
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    53   * \ingroup IfxLld_Asclin_Std
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    54   * \defgroup IfxLld_Asclin_Std_IO IO Pin Configuration Functions
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    55   * \ingroup IfxLld_Asclin_Std
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    56   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    57  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    58  #ifndef IFXASCLIN_H
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    59  #define IFXASCLIN_H 1
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    60  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    61  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    62  /*----------------------------------Includes----------------------------------*/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    63  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    64  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    65  #include "_Impl/IfxAsclin_cfg.h"
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    66  #include "Scu/Std/IfxScuCcu.h"
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    67  #include "Scu/Std/IfxScuWdt.h"
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    68  #include "Cpu/Std/IfxCpu_Intrinsics.h"
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    69  #include "IfxAsclin_reg.h"
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    70  #include "Src/Std/IfxSrc.h"
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    71  #include "_PinMap/IfxAsclin_PinMap.h"
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    72  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    73  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    74  /*--------------------------------Enumerations--------------------------------*/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    75  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    76  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    77  /** \addtogroup IfxLld_Asclin_Std_Enumerations
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    78   * \{ */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    79  /** \brief Defines if the classic or the enhanced checksum will be calculated by the checksum block.\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    80   * Definition in Ifx_ASCLIN.DATCON.B.CSM
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    81   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    82  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    83  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    84      IfxAsclin_Checksum_classic  = 0, /**< \brief classic checksum */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    85      IfxAsclin_Checksum_enhanced = 1  /**< \brief enhanced checksum */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    86  } IfxAsclin_Checksum;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    87  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    88  /** \brief Defines if the received checksum byte is written into the RXFifo or not.\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    89   * Definition in Ifx_ASCLIN.LIN.CON.B.CSI
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    90   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    91  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    92  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    93      IfxAsclin_ChecksumInjection_notWritten = 0,  /**< \brief checksum byte is not written */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    94      IfxAsclin_ChecksumInjection_written    = 1   /**< \brief checksum byte is written */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    95  } IfxAsclin_ChecksumInjection;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    96  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    97  /** \brief CPOL defines the idle level of the clock signal in the SPI mode.\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    98   * Idle level is the level outside the data transmission time intervals.\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    99   * Definition in Ifx_ASCLIN.IOCR.B.CPOL
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   100   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   101  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   102  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   103      IfxAsclin_ClockPolarity_idleLow  = 0, /**< \brief idle low */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   104      IfxAsclin_ClockPolarity_idleHigh = 1  /**< \brief idle high */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   105  } IfxAsclin_ClockPolarity;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   106  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   107  /** \brief Selection of clock source\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   108   * Definition in Ifx_ASCLIN.CSR.B.CLKSEL
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   109   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   110  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   111  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   112      IfxAsclin_ClockSource_noClock         = 0,  /**< \brief no clock will be supplied */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   113      IfxAsclin_ClockSource_kernelClock     = 1,  /**< \brief f clc will be supplied */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   114      IfxAsclin_ClockSource_oscillatorClock = 2,  /**< \brief XTAL oscillator clock foso0 will be supplied */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   115      IfxAsclin_ClockSource_flexRayClock    = 4,  /**< \brief f eray will be supplied */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   116      IfxAsclin_ClockSource_ascFastClock    = 8,  /**< \brief f asclinf wiil be supplied */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   117      IfxAsclin_ClockSource_ascSlowClock    = 16  /**< \brief f asclins will be supplied */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   118  } IfxAsclin_ClockSource;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   119  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   120  /** \brief CTS input pin selection\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   121   * Definition in Ifx_ASCLIN.IOCR.B.CTS
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   122   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   123  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   124  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   125      IfxAsclin_CtsInputSelect_0,     /**< \brief CTS input pin 0  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   126      IfxAsclin_CtsInputSelect_1,     /**< \brief CTS input pin 1  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   127      IfxAsclin_CtsInputSelect_2,     /**< \brief CTS input pin 2  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   128      IfxAsclin_CtsInputSelect_3      /**< \brief CTS input pin 3  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   129  } IfxAsclin_CtsInputSelect;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   130  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   131  /** \brief Number of bits per transfer\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   132   * Definition in Ifx_ASCLIN.FRAMECON.B.DATALEN
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   133   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   134  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   135  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   136      IfxAsclin_DataLength_1 = 0,      /**< \brief number of bits per transfer 0  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   137      IfxAsclin_DataLength_2,          /**< \brief number of bits per transfer 1  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   138      IfxAsclin_DataLength_3,          /**< \brief number of bits per transfer 2  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   139      IfxAsclin_DataLength_4,          /**< \brief number of bits per transfer 3  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   140      IfxAsclin_DataLength_5,          /**< \brief number of bits per transfer 4  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   141      IfxAsclin_DataLength_6,          /**< \brief number of bits per transfer 5  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   142      IfxAsclin_DataLength_7,          /**< \brief number of bits per transfer 6  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   143      IfxAsclin_DataLength_8,          /**< \brief number of bits per transfer 7  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   144      IfxAsclin_DataLength_9,          /**< \brief number of bits per transfer 8  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   145      IfxAsclin_DataLength_10,         /**< \brief number of bits per transfer 9  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   146      IfxAsclin_DataLength_11,         /**< \brief number of bits per transfer 10  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   147      IfxAsclin_DataLength_12,         /**< \brief number of bits per transfer 11  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   148      IfxAsclin_DataLength_13,         /**< \brief number of bits per transfer 12  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   149      IfxAsclin_DataLength_14,         /**< \brief number of bits per transfer 13  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   150      IfxAsclin_DataLength_15,         /**< \brief number of bits per transfer 14  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   151      IfxAsclin_DataLength_16          /**< \brief number of bits per transfer 15  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   152  } IfxAsclin_DataLength;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   153  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   154  /** \brief Defines the basic operating mode of the module. Changing the mode must be done by switching first to initialize mode, and then to the other mode.\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   155   * Definition in Ifx_ASCLIN.FRAMECON.B.MODE
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   156   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   157  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   158  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   159      IfxAsclin_FrameMode_initialise = 0,  /**< \brief initialise mode */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   160      IfxAsclin_FrameMode_asc        = 1,  /**< \brief asc mode */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   161      IfxAsclin_FrameMode_spi        = 2,  /**< \brief spi mode */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   162      IfxAsclin_FrameMode_lin        = 3   /**< \brief lin mode */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   163  } IfxAsclin_FrameMode;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   164  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   165  /** \brief Defines if LIN frame shall consist of a header and response or of a header only.\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   166   * Definition in Ifx_ASCLIN.DATCON.B.HO
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   167   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   168  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   169  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   170      IfxAsclin_HeaderResponseSelect_headerAndResponse = 0,  /**< \brief header and response expected */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   171      IfxAsclin_HeaderResponseSelect_headerOnly        = 1   /**< \brief header only expected */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   172  } IfxAsclin_HeaderResponseSelect;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   173  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   174  /** \brief Defines the duration of the IDLE delay in bit times.\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   175   * SPI mode: this is the idle time between the frames.\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   176   * ASC and LIN mode: this is the pause inserted between transmission of bytes.\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   177   * Definition in Ifx_ASCLIN.FRAMECON.B.IDLE
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   178   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   179  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   180  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   181      IfxAsclin_IdleDelay_0,     /**< \brief idle delay in 0 bit times  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   182      IfxAsclin_IdleDelay_1,     /**< \brief idle delay in 1 bit times  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   183      IfxAsclin_IdleDelay_2,     /**< \brief idle delay in 2 bit times  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   184      IfxAsclin_IdleDelay_3,     /**< \brief idle delay in 3 bit times  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   185      IfxAsclin_IdleDelay_4,     /**< \brief idle delay in 4 bit times  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   186      IfxAsclin_IdleDelay_5,     /**< \brief idle delay in 5 bit times  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   187      IfxAsclin_IdleDelay_6,     /**< \brief idle delay in 6 bit times  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   188      IfxAsclin_IdleDelay_7      /**< \brief idle delay in 7 bit times  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   189  } IfxAsclin_IdleDelay;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   190  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   191  /** \brief Defines the leading delay in bit times in SPI mode. ASC mode: not applicable.\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   192   * LIN mode: delay between the end of the break and the start of the sync character.\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   193   * Definition in Ifx_ASCLIN.FRAMECON.B.LEAD
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   194   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   195  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   196  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   197      IfxAsclin_LeadDelay_0,     /**< \brief lead delay in 0 bit times  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   198      IfxAsclin_LeadDelay_1,     /**< \brief lead delay in 1 bit times  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   199      IfxAsclin_LeadDelay_2,     /**< \brief lead delay in 2 bit times  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   200      IfxAsclin_LeadDelay_3,     /**< \brief lead delay in 3 bit times  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   201      IfxAsclin_LeadDelay_4,     /**< \brief lead delay in 4 bit times  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   202      IfxAsclin_LeadDelay_5,     /**< \brief lead delay in 5 bit times  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   203      IfxAsclin_LeadDelay_6,     /**< \brief lead delay in 6 bit times  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   204      IfxAsclin_LeadDelay_7      /**< \brief lead delay in 7 bit times  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   205  } IfxAsclin_LeadDelay;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   206  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   207  /** \brief Configures if the module in LIN mode operates as master or slave\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   208   * Definition in Ifx_ASCLIN.LIN.CON.B.MS
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   209   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   210  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   211  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   212      IfxAsclin_LinMode_slave  = 0, /**< \brief operates in slave mode */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   213      IfxAsclin_LinMode_master = 1  /**< \brief operates in master mode */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   214  } IfxAsclin_LinMode;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   215  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   216  /** \brief Defines the timeout threshold of RESPOSE bit is for LIN response timeout or LIN frame timeout.\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   217   * Definition in Ifx_ASCLIN.DATCON.B.RM
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   218   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   219  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   220  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   221      IfxAsclin_LinResponseTimeoutMode_frameTimeout    = 0, /**< \brief timeout threshold is for frame */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   222      IfxAsclin_LinResponseTimeoutMode_responseTimeout = 1  /**< \brief timeout threshold is for reponse */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   223  } IfxAsclin_LinResponseTimeoutMode;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   224  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   225  /** \brief Defines the bit length in ticks in the range of 1 to 16. The lengths of 1 to 3 are not allowed\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   226   * Definition in Ifx_ASCLIN.BITCON.B.OVERSAMPLING
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   227   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   228  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   229  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   230      IfxAsclin_OversamplingFactor_4  = 3,   /**< \brief oversampling factor 4 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   231      IfxAsclin_OversamplingFactor_5  = 4,   /**< \brief oversampling factor 5 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   232      IfxAsclin_OversamplingFactor_6  = 5,   /**< \brief oversampling factor 6 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   233      IfxAsclin_OversamplingFactor_7  = 6,   /**< \brief oversampling factor 7 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   234      IfxAsclin_OversamplingFactor_8  = 7,   /**< \brief oversampling factor 8 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   235      IfxAsclin_OversamplingFactor_9  = 8,   /**< \brief oversampling factor 9 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   236      IfxAsclin_OversamplingFactor_10 = 9,   /**< \brief oversampling factor 10 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   237      IfxAsclin_OversamplingFactor_11 = 10,  /**< \brief oversampling factor 11 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   238      IfxAsclin_OversamplingFactor_12 = 11,  /**< \brief oversampling factor 12 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   239      IfxAsclin_OversamplingFactor_13 = 12,  /**< \brief oversampling factor 13 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   240      IfxAsclin_OversamplingFactor_14 = 13,  /**< \brief oversampling factor 14 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   241      IfxAsclin_OversamplingFactor_15 = 14,  /**< \brief oversampling factor 15 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   242      IfxAsclin_OversamplingFactor_16 = 15   /**< \brief oversampling factor 16 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   243  } IfxAsclin_OversamplingFactor;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   244  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   245  /** \brief Type of parity bit attached to data bits\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   246   * Definition in Ifx_ASCLIN.FRAMECON.B.ODD
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   247   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   248  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   249  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   250      IfxAsclin_ParityType_even = 0,  /**< \brief even parity */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   251      IfxAsclin_ParityType_odd  = 1   /**< \brief odd parity */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   252  } IfxAsclin_ParityType;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   253  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   254  /** \brief Receive buffer mode\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   255   * Definition in Ifx_ASCLIN.RXFIFOCON.B.BUF
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   256   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   257  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   258  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   259      IfxAsclin_ReceiveBufferMode_rxFifo   = 0, /**< \brief RxFIFO mode */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   260      IfxAsclin_ReceiveBufferMode_rxBuffer = 1  /**< \brief single stage Rx buffer */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   261  } IfxAsclin_ReceiveBufferMode;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   262  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   263  /** \brief Polarity of the RTS and CTS signals\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   264   * Definition in Ifx_ASCLIN.IOCR.B.RCPOL
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   265   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   266  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   267  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   268      IfxAsclin_RtsCtsPolarity_activeHigh = 0,  /**< \brief ready/clear are active-high */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   269      IfxAsclin_RtsCtsPolarity_activeLow  = 1   /**< \brief ready/clear are active-low */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   270  } IfxAsclin_RtsCtsPolarity;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   271  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   272  /** \brief Defines the filling level that triggers a drain (RX) interrupt or DMA access\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   273   * Definition in Ifx_ASCLIN.RXFIFOCON.B.INTLEVEL
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   274   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   275  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   276  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   277      IfxAsclin_RxFifoInterruptLevel_1,     /**< \brief RX FIFO level 1  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   278      IfxAsclin_RxFifoInterruptLevel_2,     /**< \brief RX FIFO level 2  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   279      IfxAsclin_RxFifoInterruptLevel_3,     /**< \brief RX FIFO level 3  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   280      IfxAsclin_RxFifoInterruptLevel_4,     /**< \brief RX FIFO level 4  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   281      IfxAsclin_RxFifoInterruptLevel_5,     /**< \brief RX FIFO level 5  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   282      IfxAsclin_RxFifoInterruptLevel_6,     /**< \brief RX FIFO level 6  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   283      IfxAsclin_RxFifoInterruptLevel_7,     /**< \brief RX FIFO level 7  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   284      IfxAsclin_RxFifoInterruptLevel_8,     /**< \brief RX FIFO level 8  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   285      IfxAsclin_RxFifoInterruptLevel_9,     /**< \brief RX FIFO level 9  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   286      IfxAsclin_RxFifoInterruptLevel_10,    /**< \brief RX FIFO level 10  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   287      IfxAsclin_RxFifoInterruptLevel_11,    /**< \brief RX FIFO level 11  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   288      IfxAsclin_RxFifoInterruptLevel_12,    /**< \brief RX FIFO level 12  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   289      IfxAsclin_RxFifoInterruptLevel_13,    /**< \brief RX FIFO level 13  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   290      IfxAsclin_RxFifoInterruptLevel_14,    /**< \brief RX FIFO level 14  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   291      IfxAsclin_RxFifoInterruptLevel_15,    /**< \brief RX FIFO level 15  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   292      IfxAsclin_RxFifoInterruptLevel_16     /**< \brief RX FIFO level 16  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   293  } IfxAsclin_RxFifoInterruptLevel;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   294  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   295  /** \brief Defines the number of bytes read from the Rx FIFO with one FPI bus read\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   296   * Definition in Ifx_ASCLIN.RXFIFOCON.B.OUTW
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   297   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   298  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   299  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   300      IfxAsclin_RxFifoOutletWidth_0,     /**< \brief number of bytes 0  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   301      IfxAsclin_RxFifoOutletWidth_1,     /**< \brief number of bytes 1  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   302      IfxAsclin_RxFifoOutletWidth_2,     /**< \brief number of bytes 2  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   303      IfxAsclin_RxFifoOutletWidth_3      /**< \brief number of bytes 3  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   304  } IfxAsclin_RxFifoOutletWidth;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   305  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   306  /** \brief Alternate input selection for Rx signal.\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   307   * Definition in Ifx_ASCLIN.IOCR.B.ALTI
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   308   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   309  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   310  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   311      IfxAsclin_RxInputSelect_0,     /**< \brief alternate input selection 0  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   312      IfxAsclin_RxInputSelect_1,     /**< \brief alternate input selection 1  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   313      IfxAsclin_RxInputSelect_2,     /**< \brief alternate input selection 2  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   314      IfxAsclin_RxInputSelect_3,     /**< \brief alternate input selection 3  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   315      IfxAsclin_RxInputSelect_4,     /**< \brief alternate input selection 4  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   316      IfxAsclin_RxInputSelect_5,     /**< \brief alternate input selection 5  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   317      IfxAsclin_RxInputSelect_6,     /**< \brief alternate input selection 6  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   318      IfxAsclin_RxInputSelect_7      /**< \brief alternate input selection 7  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   319  } IfxAsclin_RxInputSelect;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   320  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   321  /** \brief Sample point position\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   322   * Definition in Ifx_ASCLIN.BITCON.B.SAMPLEPOINT
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   323   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   324  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   325  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   326      IfxAsclin_SamplePointPosition_1  = 1,   /**< \brief sample point position at 1 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   327      IfxAsclin_SamplePointPosition_2  = 2,   /**< \brief sample point position at 2 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   328      IfxAsclin_SamplePointPosition_3  = 3,   /**< \brief sample point position at 3 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   329      IfxAsclin_SamplePointPosition_4  = 4,   /**< \brief sample point position at 4 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   330      IfxAsclin_SamplePointPosition_5  = 5,   /**< \brief sample point position at 5 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   331      IfxAsclin_SamplePointPosition_6  = 6,   /**< \brief sample point position at 6 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   332      IfxAsclin_SamplePointPosition_7  = 7,   /**< \brief sample point position at 7 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   333      IfxAsclin_SamplePointPosition_8  = 8,   /**< \brief sample point position at 8 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   334      IfxAsclin_SamplePointPosition_9  = 9,   /**< \brief sample point position at 9 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   335      IfxAsclin_SamplePointPosition_10 = 10,  /**< \brief sample point position at 10 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   336      IfxAsclin_SamplePointPosition_11 = 11,  /**< \brief sample point position at 11 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   337      IfxAsclin_SamplePointPosition_12 = 12,  /**< \brief sample point position at 12 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   338      IfxAsclin_SamplePointPosition_13 = 13,  /**< \brief sample point position at 13 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   339      IfxAsclin_SamplePointPosition_14 = 14,  /**< \brief sample point position at 14 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   340      IfxAsclin_SamplePointPosition_15 = 15   /**< \brief sample point position at 15 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   341  } IfxAsclin_SamplePointPosition;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   342  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   343  /** \brief Number of samples per bit, sample mode/medianfilter\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   344   * Definition in Ifx_ASCLIN.BITCON.B.SM
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   345   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   346  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   347  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   348      IfxAsclin_SamplesPerBit_one   = 0, /**< \brief one sample per bit */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   349      IfxAsclin_SamplesPerBit_three = 1  /**< \brief three samples per bit */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   350  } IfxAsclin_SamplesPerBit;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   351  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   352  /** \brief SPI mode: defines the shift direction of the shift register.\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   353   * ASC and LIN mode: should be set to 0.\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   354   * Definition in Ifx_ASCLIN.FRAMECON.B.MSB
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   355   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   356  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   357  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   358      IfxAsclin_ShiftDirection_lsbFirst = 0,  /**< \brief LSB first */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   359      IfxAsclin_ShiftDirection_msbFirst = 1   /**< \brief MSB first */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   360  } IfxAsclin_ShiftDirection;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   361  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   362  /** \brief Defines the idle level of the SLSO signal, which is the level.\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   363   * Outside the data transmission, leading and trailing time intervals.\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   364   * Definition in Ifx_ASCLIN.IOCR.B.SPOL
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   365   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   366  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   367  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   368      IfxAsclin_SlavePolarity_idleLow  = 0, /**< \brief idle low */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   369      IfxAsclin_SlavePolarity_idlehigh = 1  /**< \brief idle high */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   370  } IfxAsclin_SlavePolarity;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   371  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   372  /** \brief Enable/disable the sensitivity of the module to sleep signal\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   373   * Definition in Ifx_ASCLIN.CLC.B.EDIS
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   374   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   375  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   376  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   377      IfxAsclin_SleepMode_enable  = 0, /**< \brief enables sleep mode */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   378      IfxAsclin_SleepMode_disable = 1  /**< \brief disables sleep mode */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   379  } IfxAsclin_SleepMode;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   380  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   381  /** \brief Error status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   382   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   383  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   384  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   385      IfxAsclin_Status_configurationError = 0,  /**< \brief Configuration error */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   386      IfxAsclin_Status_noError            = 1   /**< \brief No error */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   387  } IfxAsclin_Status;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   388  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   389  /** \brief ASC and LIN mode: number of stop bits (0 is not allowed), SPI mode: trailing delay.\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   390   * Definition in Ifx_ASCLIN.FRAMECON.B.STOP
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   391   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   392  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   393  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   394      IfxAsclin_StopBit_0,     /**< \brief number of stop bits 0  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   395      IfxAsclin_StopBit_1,     /**< \brief number of stop bits 1  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   396      IfxAsclin_StopBit_2,     /**< \brief number of stop bits 2  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   397      IfxAsclin_StopBit_3,     /**< \brief number of stop bits 3  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   398      IfxAsclin_StopBit_4,     /**< \brief number of stop bits 4  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   399      IfxAsclin_StopBit_5,     /**< \brief number of stop bits 5  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   400      IfxAsclin_StopBit_6,     /**< \brief number of stop bits 6  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   401      IfxAsclin_StopBit_7      /**< \brief number of stop bits 7  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   402  } IfxAsclin_StopBit;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   403  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   404  /** \brief OCDS Suspend Control (OCDS.SUS)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   405   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   406  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   407  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   408      IfxAsclin_SuspendMode_none = 0,  /**< \brief No suspend */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   409      IfxAsclin_SuspendMode_hard = 1,  /**< \brief Hard Suspend */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   410      IfxAsclin_SuspendMode_soft = 2   /**< \brief Soft Suspend */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   411  } IfxAsclin_SuspendMode;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   412  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   413  /** \brief Defines the number of bytes written to the Tx FIFO with one FPI bus write\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   414   * Definition in Ifx_ASCLIN.TXFIFOCON.B.INW
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   415   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   416  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   417  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   418      IfxAsclin_TxFifoInletWidth_0,     /**< \brief number of bytes 0  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   419      IfxAsclin_TxFifoInletWidth_1,     /**< \brief number of bytes 1  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   420      IfxAsclin_TxFifoInletWidth_2,     /**< \brief number of bytes 2  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   421      IfxAsclin_TxFifoInletWidth_3      /**< \brief number of bytes 3  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   422  } IfxAsclin_TxFifoInletWidth;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   423  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   424  /** \brief Defines the filling level that triggers a refill (TX) interrupt or DMA access\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   425   * Definition in Ifx_ASCLIN.TXFIFOCON.B.INTLEVEL
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   426   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   427  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   428  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   429      IfxAsclin_TxFifoInterruptLevel_0,     /**< \brief TX FIFO level 0  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   430      IfxAsclin_TxFifoInterruptLevel_1,     /**< \brief TX FIFO level 1  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   431      IfxAsclin_TxFifoInterruptLevel_2,     /**< \brief TX FIFO level 2  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   432      IfxAsclin_TxFifoInterruptLevel_3,     /**< \brief TX FIFO level 3  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   433      IfxAsclin_TxFifoInterruptLevel_4,     /**< \brief TX FIFO level 4  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   434      IfxAsclin_TxFifoInterruptLevel_5,     /**< \brief TX FIFO level 5  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   435      IfxAsclin_TxFifoInterruptLevel_6,     /**< \brief TX FIFO level 6  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   436      IfxAsclin_TxFifoInterruptLevel_7,     /**< \brief TX FIFO level 7  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   437      IfxAsclin_TxFifoInterruptLevel_8,     /**< \brief TX FIFO level 8  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   438      IfxAsclin_TxFifoInterruptLevel_9,     /**< \brief TX FIFO level 9  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   439      IfxAsclin_TxFifoInterruptLevel_10,    /**< \brief TX FIFO level 10  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   440      IfxAsclin_TxFifoInterruptLevel_11,    /**< \brief TX FIFO level 11  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   441      IfxAsclin_TxFifoInterruptLevel_12,    /**< \brief TX FIFO level 12  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   442      IfxAsclin_TxFifoInterruptLevel_13,    /**< \brief TX FIFO level 13  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   443      IfxAsclin_TxFifoInterruptLevel_14,    /**< \brief TX FIFO level 14  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   444      IfxAsclin_TxFifoInterruptLevel_15     /**< \brief TX FIFO level 15  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   445  } IfxAsclin_TxFifoInterruptLevel;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   446  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   447  /** \} */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   448  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   449  /** \addtogroup IfxLld_Asclin_Std_Operative
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   450   * \{ */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   451  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   452  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   453  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   454  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   455  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   456  /** \brief clears all the flags
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   457   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   458   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   459   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   460  IFX_INLINE void IfxAsclin_clearAllFlags(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   461  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   462  /** \brief Clears the break detected flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   463   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   464   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   465   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   466  IFX_INLINE void IfxAsclin_clearBreakDetectedFlag(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   467  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   468  /** \brief Clears the collision detection error flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   469   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   470   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   471   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   472  IFX_INLINE void IfxAsclin_clearCollisionDetectionErrorFlag(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   473  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   474  /** \brief Clears the falling edge detected flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   475   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   476   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   477   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   478  IFX_INLINE void IfxAsclin_clearFallingEdgeDetectedFlag(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   479  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   480  /** \brief Clears the frame error flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   481   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   482   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   483   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   484  IFX_INLINE void IfxAsclin_clearFrameErrorFlag(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   485  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   486  /** \brief Clears the header timeout flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   487   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   488   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   489   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   490  IFX_INLINE void IfxAsclin_clearHeaderTimeoutFlag(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   491  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   492  /** \brief Clears the kernel reset status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   493   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   494   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   495   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   496  IFX_INLINE void IfxAsclin_clearKernelResetStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   497  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   498  /** \brief Clears the auto baudrate detection error flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   499   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   500   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   501   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   502  IFX_INLINE void IfxAsclin_clearLinAutoBaudDetectionErrorFlag(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   503  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   504  /** \brief Clears the LIN checksum error flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   505   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   506   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   507   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   508  IFX_INLINE void IfxAsclin_clearLinChecksumErrorFlag(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   509  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   510  /** \brief Clears the LIN parity error flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   511   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   512   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   513   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   514  IFX_INLINE void IfxAsclin_clearLinParityErrorFlag(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   515  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   516  /** \brief Clears the parity error flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   517   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   518   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   519   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   520  IFX_INLINE void IfxAsclin_clearParityErrorFlag(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   521  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   522  /** \brief Clears the raising edge detected flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   523   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   524   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   525   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   526  IFX_INLINE void IfxAsclin_clearRaisingEdgeDetectedFlag(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   527  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   528  /** \brief Clears the response timeout flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   529   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   530   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   531   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   532  IFX_INLINE void IfxAsclin_clearResponseTimeoutFlag(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   533  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   534  /** \brief Clears the Rx FIFO level flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   535   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   536   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   537   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   538  IFX_INLINE void IfxAsclin_clearRxFifoFillLevelFlag(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   539  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   540  /** \brief Clears the Rx FIFO overflow flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   541   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   542   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   543   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   544  IFX_INLINE void IfxAsclin_clearRxFifoOverflowFlag(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   545  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   546  /** \brief Clears the Rx FIFO underflow flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   547   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   548   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   549   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   550  IFX_INLINE void IfxAsclin_clearRxFifoUnderflowFlag(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   551  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   552  /** \brief Clears the receive header end flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   553   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   554   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   555   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   556  IFX_INLINE void IfxAsclin_clearRxHeaderEndFlag(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   557  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   558  /** \brief Clears the receive response end flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   559   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   560   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   561   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   562  IFX_INLINE void IfxAsclin_clearRxResponseEndFlag(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   563  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   564  /** \brief Clears the transmission pending flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   565   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   566   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   567   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   568  IFX_INLINE void IfxAsclin_clearTransmissionCompletedFlag(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   569  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   570  /** \brief Clears the Tx FIFO level flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   571   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   572   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   573   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   574  IFX_INLINE void IfxAsclin_clearTxFifoFillLevelFlag(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   575  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   576  /** \brief Clears the Tx FIFO overflow flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   577   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   578   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   579   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   580  IFX_INLINE void IfxAsclin_clearTxFifoOverflowFlag(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   581  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   582  /** \brief Clears the transmit header end flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   583   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   584   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   585   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   586  IFX_INLINE void IfxAsclin_clearTxHeaderEndFlag(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   587  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   588  /** \brief Clears the transmit response end flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   589   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   590   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   591   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   592  IFX_INLINE void IfxAsclin_clearTxResponseEndFlag(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   593  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   594  /** \brief Flushes (empties) the Rx FIFO
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   595   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   596   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   597   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   598  IFX_INLINE void IfxAsclin_flushRxFifo(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   599  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   600  /** \brief Flushes (empties) the Tx FIFO
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   601   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   602   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   603   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   604  IFX_INLINE void IfxAsclin_flushTxFifo(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   605  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   606  /** \brief Sets the baudrate detection's lower limit
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   607   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   608   * \param limit value of the lower limit
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   609   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   610   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   611  IFX_INLINE void IfxAsclin_setBrdLowerlimt(Ifx_ASCLIN *asclin, uint8 limit);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   612  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   613  /** \brief Sets the baudrate detection's upper limit
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   614   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   615   * \param limit value of the upper limit
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   616   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   617   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   618  IFX_INLINE void IfxAsclin_setBrdUpperlimt(Ifx_ASCLIN *asclin, uint8 limit);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   619  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   620  /** \brief Sets the checksum injection
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   621   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   622   * \param csi checksum injection selection (not written / written)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   623   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   624   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   625  IFX_INLINE void IfxAsclin_setChecksumInjection(Ifx_ASCLIN *asclin, IfxAsclin_ChecksumInjection csi);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   626  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   627  /** \brief Sets the checksum mode
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   628   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   629   * \param mode checksum mode selection (classic / enhanced)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   630   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   631   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   632  IFX_INLINE void IfxAsclin_setChecksumMode(Ifx_ASCLIN *asclin, IfxAsclin_Checksum mode);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   633  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   634  /** \brief Sets the data length (number of bits per transfer)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   635   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   636   * \param length data length selection
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   637   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   638   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   639  IFX_INLINE void IfxAsclin_setDataLength(Ifx_ASCLIN *asclin, IfxAsclin_DataLength length);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   640  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   641  /** \brief Sets the denominator of the fractional divider
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   642   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   643   * \param denominator value of the denominator
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   644   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   645   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   646  IFX_INLINE void IfxAsclin_setDenominator(Ifx_ASCLIN *asclin, uint16 denominator);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   647  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   648  /** \brief Sets the disable module request
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   649   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   650   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   651   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   652  IFX_INLINE void IfxAsclin_setDisableModuleRequest(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   653  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   654  /** \brief Sets the enable module request
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   655   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   656   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   657   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   658  IFX_INLINE void IfxAsclin_setEnableModuleRequest(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   659  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   660  /** \brief Sets digital glitch filter depth
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   661   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   662   * \param depth digital glitch filter depth selection (1 to 63)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   663   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   664   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   665  IFX_INLINE void IfxAsclin_setFilterDepth(Ifx_ASCLIN *asclin, uint8 depth);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   666  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   667  /** \brief Sets the header response selection
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   668   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   669   * \param type type of selection (header and response or header only)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   670   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   671   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   672  IFX_INLINE void IfxAsclin_setHeaderResponseSelect(Ifx_ASCLIN *asclin, IfxAsclin_HeaderResponseSelect type);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   673  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   674  /** \brief Sets the idle delay
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   675   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   676   * \param delay idle delay selection
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   677   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   678   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   679  IFX_INLINE void IfxAsclin_setIdleDelay(Ifx_ASCLIN *asclin, IfxAsclin_IdleDelay delay);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   680  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   681  /** \brief Sets the kernal reset of the KRST1
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   682   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   683   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   684   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   685  IFX_INLINE void IfxAsclin_setKernelResetOne(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   686  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   687  /** \brief Sets the kernel reset of the KRST0
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   688   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   689   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   690   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   691  IFX_INLINE void IfxAsclin_setKernelResetZero(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   692  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   693  /** \brief Sets the lead delay
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   694   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   695   * \param delay lead delay selection
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   696   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   697   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   698  IFX_INLINE void IfxAsclin_setLeadDelay(Ifx_ASCLIN *asclin, IfxAsclin_LeadDelay delay);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   699  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   700  /** \brief Sets the LIN break length
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   701   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   702   * \param length value of the break length
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   703   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   704   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   705  IFX_INLINE void IfxAsclin_setLinBreakLength(Ifx_ASCLIN *asclin, uint8 length);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   706  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   707  /** \brief Sets the LIN header timeout
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   708   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   709   * \param timeout value of the header timeout
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   710   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   711   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   712  IFX_INLINE void IfxAsclin_setLinHeaderTimeout(Ifx_ASCLIN *asclin, uint8 timeout);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   713  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   714  /** \brief Sets the LIN mode of operation
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   715   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   716   * \param mode mode selection (slave / master)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   717   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   718   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   719  IFX_INLINE void IfxAsclin_setLinMode(Ifx_ASCLIN *asclin, IfxAsclin_LinMode mode);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   720  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   721  /** \brief Sets the LIN response timeout mode
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   722   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   723   * \param mode LIN response timeout mode selection
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   724   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   725   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   726  IFX_INLINE void IfxAsclin_setLinResponseTimeoutMode(Ifx_ASCLIN *asclin, IfxAsclin_LinResponseTimeoutMode mode);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   727  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   728  /** \brief Sets the LIN response timeout threshold
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   729   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   730   * \param threshold value of the tomeout threshold (1 to 256 bit times)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   731   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   732   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   733  IFX_INLINE void IfxAsclin_setLinResponseTimeoutThreshold(Ifx_ASCLIN *asclin, uint16 threshold);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   734  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   735  /** \brief Sets the numerator of the fractional divider
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   736   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   737   * \param numerator value of the numerator
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   738   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   739   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   740  IFX_INLINE void IfxAsclin_setNumerator(Ifx_ASCLIN *asclin, uint16 numerator);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   741  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   742  /** \brief Sets the division ratio of the baudrate post divider
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   743   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   744   * \param ovsFactor value of oversampling factor
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   745   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   746   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   747  IFX_INLINE void IfxAsclin_setOversampling(Ifx_ASCLIN *asclin, IfxAsclin_OversamplingFactor ovsFactor);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   748  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   749  /** \brief Sets the parity type
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   750   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   751   * \param type parity type selction (even / odd)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   752   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   753   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   754  IFX_INLINE void IfxAsclin_setParityType(Ifx_ASCLIN *asclin, IfxAsclin_ParityType type);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   755  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   756  /** \brief Sets the division ratio of the predivider (prescaler)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   757   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   758   * \param prescaler value of prescaler
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   759   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   760   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   761  IFX_INLINE void IfxAsclin_setPrescaler(Ifx_ASCLIN *asclin, uint16 prescaler);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   762  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   763  /** \brief Sets the receive buffer mode
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   764   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   765   * \param mode receive buffer mode selection (Rx FIFO or single stage Rx buffer)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   766   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   767   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   768  IFX_INLINE void IfxAsclin_setRxBufferMode(Ifx_ASCLIN *asclin, IfxAsclin_ReceiveBufferMode mode);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   769  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   770  /** \brief Sets the Tx FIFO interrupt level
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   771   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   772   * \param level interrupt level selection
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   773   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   774   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   775  IFX_INLINE void IfxAsclin_setRxFifoInterruptLevel(Ifx_ASCLIN *asclin, IfxAsclin_RxFifoInterruptLevel level);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   776  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   777  /** \brief Sets the receive FIFO outlet width
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   778   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   779   * \param width number of bytes read to the Rx FIFO with one FPI bus read
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   780   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   781   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   782  IFX_INLINE void IfxAsclin_setRxFifoOutletWidth(Ifx_ASCLIN *asclin, IfxAsclin_RxFifoOutletWidth width);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   783  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   784  /** \brief Sets the sample mode (number of samples per bit / median filter)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   785   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   786   * \param medianFilter value of the median filter
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   787   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   788   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   789  IFX_INLINE void IfxAsclin_setSampleMode(Ifx_ASCLIN *asclin, IfxAsclin_SamplesPerBit medianFilter);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   790  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   791  /** \brief Sets the sampling point position
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   792   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   793   * \param spPosition sample point position selection
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   794   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   795   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   796  IFX_INLINE void IfxAsclin_setSamplePointPosition(Ifx_ASCLIN *asclin, IfxAsclin_SamplePointPosition spPosition);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   797  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   798  /** \brief Sets the shift direction
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   799   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   800   * \param dir shift direction selection (LSB / MSB first)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   801   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   802   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   803  IFX_INLINE void IfxAsclin_setShiftDirection(Ifx_ASCLIN *asclin, IfxAsclin_ShiftDirection dir);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   804  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   805  /** \brief Sets the number of stop bits
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   806   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   807   * \param stopBit number of stop bits selection
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   808   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   809   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   810  IFX_INLINE void IfxAsclin_setStopBit(Ifx_ASCLIN *asclin, IfxAsclin_StopBit stopBit);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   811  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   812  /** \brief Sets the transmit header request flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   813   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   814   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   815   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   816  IFX_INLINE void IfxAsclin_setTransmitHeaderRequestFlag(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   817  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   818  /** \brief Sets the transmit response request flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   819   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   820   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   821   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   822  IFX_INLINE void IfxAsclin_setTransmitResponseRequestFlag(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   823  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   824  /** \brief Sets the transmission wake request flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   825   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   826   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   827   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   828  IFX_INLINE void IfxAsclin_setTransmitWakeRequestFlag(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   829  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   830  /** \brief Sets the transmit FIFO inlet width
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   831   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   832   * \param width number of bytes written to the Tx FIFO with one FPI bus write
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   833   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   834   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   835  IFX_INLINE void IfxAsclin_setTxFifoInletWidth(Ifx_ASCLIN *asclin, IfxAsclin_TxFifoInletWidth width);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   836  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   837  /** \brief Sets the Tx FIFO interrupt level
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   838   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   839   * \param level interrupt level selection
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   840   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   841   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   842  IFX_INLINE void IfxAsclin_setTxFifoInterruptLevel(Ifx_ASCLIN *asclin, IfxAsclin_TxFifoInterruptLevel level);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   843  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   844  /** \} */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   845  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   846  /** \addtogroup IfxLld_Asclin_Std_Utility
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   847   * \{ */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   848  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   849  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   850  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   851  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   852  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   853  /** \brief Returns the break detected flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   854   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   855   * \return break detected flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   856   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   857  IFX_INLINE boolean IfxAsclin_getBreakDetectedFlagStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   858  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   859  /** \brief Returns the clock source
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   860   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   861   * \return clock source
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   862   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   863  IFX_INLINE uint8 IfxAsclin_getClockSource(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   864  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   865  /** \brief Returns the clock status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   866   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   867   * \return clock status (off / on)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   868   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   869  IFX_INLINE boolean IfxAsclin_getClockStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   870  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   871  /** \brief Returns the collision detection error flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   872   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   873   * \return collision detection error flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   874   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   875  IFX_INLINE boolean IfxAsclin_getCollisionDetectionErrorFlagStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   876  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   877  /** \brief Returns  the falling edge detected flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   878   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   879   * \return falling edge detected flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   880   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   881  IFX_INLINE boolean IfxAsclin_getFallingEdgeDetectedFlagStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   882  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   883  /** \brief Returns the frame error flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   884   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   885   * \return frame error flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   886   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   887  IFX_INLINE boolean IfxAsclin_getFrameErrorFlagStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   888  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   889  /** \brief Returns the header timeout flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   890   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   891   * \return header timeout flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   892   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   893  IFX_INLINE boolean IfxAsclin_getHeaderTimeoutFlagStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   894  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   895  /** \brief Returns the kernel reset status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   896   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   897   * \return kernel reset status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   898   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   899  IFX_INLINE boolean IfxAsclin_getKernelResetStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   900  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   901  /** \brief Returns the LIN auto baudrate detection error flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   902   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   903   * \return LIN auto baudrate detection error flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   904   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   905  IFX_INLINE boolean IfxAsclin_getLinAutoBaudDetectionErrorFlagStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   906  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   907  /** \brief Returns the LIN checksum error flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   908   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   909   * \return LIN checksum error flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   910   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   911  IFX_INLINE boolean IfxAsclin_getLinChecksumErrorFlagStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   912  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   913  /** \brief Returns the LIN parity error flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   914   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   915   * \return LIN parity error flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   916   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   917  IFX_INLINE boolean IfxAsclin_getLinParityErrorFlagStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   918  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   919  /** \brief Returns the module status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   920   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   921   * \return module status (enabled / disabled)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   922   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   923  IFX_INLINE boolean IfxAsclin_getModuleStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   924  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   925  /** \brief Returns the parity error flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   926   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   927   * \return parity error flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   928   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   929  IFX_INLINE boolean IfxAsclin_getParityErrorFlagStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   930  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   931  /** \brief Returns the division ratio of the predivider (prescaler)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   932   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   933   * \return value of prescaler
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   934   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   935  IFX_INLINE uint16 IfxAsclin_getPrescaler(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   936  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   937  /** \brief Returns the raising edge detected flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   938   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   939   * \return raising edge detected flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   940   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   941  IFX_INLINE boolean IfxAsclin_getRaisingEdgeDetectedFlagStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   942  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   943  /** \brief Returns the received signal status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   944   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   945   * \return received signal status (0 is low & 1 is high)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   946   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   947  IFX_INLINE boolean IfxAsclin_getReceiveSignalStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   948  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   949  /** \brief Returns the response timeout flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   950   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   951   * \return response timeout flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   952   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   953  IFX_INLINE boolean IfxAsclin_getResponseTimeoutFlagStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   954  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   955  /** \brief Returns the current filling level of Tx FIFO
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   956   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   957   * \return current filling level of Rx FIFO
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   958   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   959  IFX_INLINE uint8 IfxAsclin_getRxFifoFillLevel(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   960  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   961  /** \brief Returns the Rx FIFO level flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   962   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   963   * \return Rx FIFO level flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   964   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   965  IFX_INLINE boolean IfxAsclin_getRxFifoFillLevelFlagStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   966  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   967  /** \brief Returns the receive FIFO inlet width
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   968   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   969   * \return number of bytes read to the Rx FIFO with one FPI bus read
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   970   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   971  IFX_INLINE uint8 IfxAsclin_getRxFifoOutletWidth(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   972  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   973  /** \brief Returns the Rx FIFO overflow flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   974   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   975   * \return Rx FIFO overflow flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   976   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   977  IFX_INLINE boolean IfxAsclin_getRxFifoOverflowFlagStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   978  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   979  /** \brief Returns the Rx FIFO underflow flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   980   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   981   * \return Rx FIFO underflow flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   982   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   983  IFX_INLINE boolean IfxAsclin_getRxFifoUnderflowFlagStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   984  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   985  /** \brief Returns the receive header end flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   986   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   987   * \return receive header end flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   988   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   989  IFX_INLINE boolean IfxAsclin_getRxHeaderEndFlagStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   990  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   991  /** \brief Returns the receive response end flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   992   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   993   * \return receive response end flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   994   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   995  IFX_INLINE boolean IfxAsclin_getRxResponseEndFlagStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   996  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   997  /** \brief Returns the transmission pending flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   998   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   999   * \return transmission pending flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1000   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1001  IFX_INLINE boolean IfxAsclin_getTransmissionCompletedFlagStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1002  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1003  /** \brief Returns the transmit signal status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1004   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1005   * \return transmit signal status (0 is low & 1 is high)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1006   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1007  IFX_INLINE boolean IfxAsclin_getTransmitSignalStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1008  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1009  /** \brief Returns the current filling level of Tx FIFO
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1010   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1011   * \return current filling level of Tx FIFO
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1012   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1013  IFX_INLINE uint8 IfxAsclin_getTxFifoFillLevel(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1014  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1015  /** \brief Returns the Tx FIFO level flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1016   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1017   * \return Tx FIFO level flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1018   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1019  IFX_INLINE boolean IfxAsclin_getTxFifoFillLevelFlagStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1020  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1021  /** \brief Returns the transmit FIFO inlet width
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1022   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1023   * \return number of bytes written to the Tx FIFO with one FPI bus write
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1024   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1025  IFX_INLINE uint8 IfxAsclin_getTxFifoInletWidth(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1026  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1027  /** \brief Returns the Tx FIFO overflow flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1028   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1029   * \return Tx FIFO overflow flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1030   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1031  IFX_INLINE boolean IfxAsclin_getTxFifoOverflowFlagStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1032  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1033  /** \brief Returns the transmit header end flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1034   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1035   * \return transmit header end flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1036   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1037  IFX_INLINE boolean IfxAsclin_getTxHeaderEndFlagStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1038  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1039  /** \brief Returns the transmit response end flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1040   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1041   * \return transmit response end flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1042   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1043  IFX_INLINE boolean IfxAsclin_getTxResponseEndFlagStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1044  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1045  /** \brief Sets the sensitivity of the module to sleep signal
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1046   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1047   * \param mode mode selection (enable / disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1048   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1049   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1050  IFX_INLINE void IfxAsclin_setSleepMode(Ifx_ASCLIN *asclin, IfxAsclin_SleepMode mode);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1051  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1052  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1053  /*-------------------------Global Function Prototypes-------------------------*/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1054  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1055  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1056  /** \brief API to get the address for ASCLIN HW module register memory map
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1057   * \param asclin Resource index of the ASCLIN
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1058   * \return ASCLIN module register address
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1059   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1060  IFX_EXTERN Ifx_ASCLIN *IfxAsclin_getAddress(IfxAsclin_Index asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1061  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1062  /** \brief Returns the ASCLIN module FA frequency in Hz
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1063   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1064   * \return Returns the ASCLIN module FA frequency in Hz
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1065   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1066  IFX_EXTERN float32 IfxAsclin_getFaFrequency(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1067  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1068  /** \brief API to get the resource index of the ASCLIN specified.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1069   * \return asclin resource index
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1070   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1071  IFX_EXTERN IfxAsclin_Index IfxAsclin_getIndex(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1072  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1073  /** \brief Returns the OVS frequency
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1074   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1075   * \return Returns the ASCLIN module OVS frequency in Hz
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1076   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1077  IFX_EXTERN float32 IfxAsclin_getOvsFrequency(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1078  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1079  /** \brief Returns the PD frequency
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1080   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1081   * \return Returns the ASCLIN module PD frequency in Hz
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1082   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1083  IFX_EXTERN float32 IfxAsclin_getPdFrequency(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1084  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1085  /** \brief Returns the SHIFT frequency
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1086   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1087   * \return Returns the ASCLIN module SHIFT frequency in Hz
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1088   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1089  IFX_EXTERN float32 IfxAsclin_getShiftFrequency(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1090  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1091  /** \brief resets Asclin kernel
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1092   * \param asclin pointer to ASCLIN resgisters
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1093   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1094   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1095  IFX_EXTERN void IfxAsclin_resetModule(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1096  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1097  /** \} */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1098  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1099  /** \addtogroup IfxLld_Asclin_Std_Configuration
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1100   * \{ */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1101  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1102  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1103  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1104  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1105  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1106  /** \brief disables all flags
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1107   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1108   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1109   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1110  IFX_INLINE void IfxAsclin_disableAllFlags(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1111  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1112  /** \brief Enables/disables the auto baudrate detection
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1113   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1114   * \param enable choice (enable / disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1115   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1116   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1117  IFX_INLINE void IfxAsclin_enableAutoBaudrateDetection(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1118  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1119  /** \brief Enables/disables break detected flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1120   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1121   * \param enable choice (enable / disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1122   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1123   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1124  IFX_INLINE void IfxAsclin_enableBreakDetectedFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1125  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1126  /** \brief Enables/disables the collision detection
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1127   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1128   * \param enable choice (enable/disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1129   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1130   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1131  IFX_INLINE void IfxAsclin_enableCollisionDetection(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1132  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1133  /** \brief Enables/disables LIN collision detection error flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1134   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1135   * \param enable choice (enable / disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1136   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1137   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1138  IFX_INLINE void IfxAsclin_enableCollisionDetectionErrorFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1139  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1140  /** \brief Enables/disables CTS
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1141   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1142   * \param enable choice (enable/disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1143   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1144   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1145  IFX_INLINE void IfxAsclin_enableCts(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1146  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1147  /** \brief Enables/disables falling edge detected flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1148   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1149   * \param enable choice (enable / disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1150   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1151   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1152  IFX_INLINE void IfxAsclin_enableFallingEdgeDetectedFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1153  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1154  /** \brief Enables/disables frame error flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1155   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1156   * \param enable choice (enable / disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1157   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1158   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1159  IFX_INLINE void IfxAsclin_enableFrameErrorFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1160  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1161  /** \brief Enables/disables the hardware checksum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1162   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1163   * \param enable choice (enable / disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1164   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1165   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1166  IFX_INLINE void IfxAsclin_enableHardwareChecksum(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1167  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1168  /** \brief Enables/disables header timeout flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1169   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1170   * \param enable choice (enable / disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1171   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1172   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1173  IFX_INLINE void IfxAsclin_enableHeaderTimeoutFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1174  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1175  /** \brief Enables/disables LIN auto baudrate detection error flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1176   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1177   * \param enable choice (enable / disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1178   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1179   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1180  IFX_INLINE void IfxAsclin_enableLinAutoBaudDetectionErrorFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1181  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1182  /** \brief Enables/disables LIN checksum error flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1183   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1184   * \param enable choice (enable / disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1185   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1186   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1187  IFX_INLINE void IfxAsclin_enableLinChecksumErrorFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1188  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1189  /** \brief Enables/disables LIN parity error flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1190   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1191   * \param enable choice (enable / disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1192   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1193   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1194  IFX_INLINE void IfxAsclin_enableLinParityErrorFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1195  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1196  /** \brief Enables/disables the loop back mode
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1197   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1198   * \param enable choice (enable/disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1199   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1200   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1201  IFX_INLINE void IfxAsclin_enableLoopBackMode(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1202  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1203  /** \brief Enables/disables the parity bit attachment to tha data bits
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1204   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1205   * \param enable choice (enable/disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1206   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1207   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1208  IFX_INLINE void IfxAsclin_enableParity(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1209  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1210  /** \brief Enables/disables parity error flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1211   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1212   * \param enable choice (enable / disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1213   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1214   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1215  IFX_INLINE void IfxAsclin_enableParityErrorFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1216  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1217  /** \brief Enables/disables raising edge detected flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1218   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1219   * \param enable choice (enable / disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1220   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1221   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1222  IFX_INLINE void IfxAsclin_enableRaisingEdgeDetectedFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1223  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1224  /** \brief Enables/disables response timeout flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1225   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1226   * \param enable choice (enable / disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1227   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1228   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1229  IFX_INLINE void IfxAsclin_enableResponseTimeoutFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1230  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1231  /** \brief Enables/disables Rx FIFO level flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1232   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1233   * \param enable choice (enable / disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1234   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1235   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1236  IFX_INLINE void IfxAsclin_enableRxFifoFillLevelFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1237  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1238  /** \brief Enables/disables the receive FIFO outlet to allow filling of Rx FIFO through shift register
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1239   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1240   * \param enable choice (enable/disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1241   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1242   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1243  IFX_INLINE void IfxAsclin_enableRxFifoInlet(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1244  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1245  /** \brief Enables/disables Rx FIFO overflow flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1246   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1247   * \param enable choice (enable / disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1248   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1249   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1250  IFX_INLINE void IfxAsclin_enableRxFifoOverflowFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1251  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1252  /** \brief Enables/disables Rx FIFO underflow flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1253   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1254   * \param enable choice (enable / disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1255   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1256   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1257  IFX_INLINE void IfxAsclin_enableRxFifoUnderflowFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1258  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1259  /** \brief Enables/disables receive header end flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1260   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1261   * \param enable choice (enable / disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1262   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1263   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1264  IFX_INLINE void IfxAsclin_enableRxHeaderEndFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1265  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1266  /** \brief Enables/disables receive response end flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1267   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1268   * \param enable choice (enable / disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1269   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1270   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1271  IFX_INLINE void IfxAsclin_enableRxResponseEndFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1272  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1273  /** \brief Enables/disables transmission completed flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1274   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1275   * \param enable choice (enable / disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1276   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1277   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1278  IFX_INLINE void IfxAsclin_enableTransmissionCompletedFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1279  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1280  /** \brief Enables/disables Tx FIFO level flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1281   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1282   * \param enable choice (enable / disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1283   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1284   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1285  IFX_INLINE void IfxAsclin_enableTxFifoFillLevelFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1286  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1287  /** \brief Enables/disables the transmit FIFO outlet to allow transmission
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1288   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1289   * \param enable choice (enable/disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1290   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1291   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1292  IFX_INLINE void IfxAsclin_enableTxFifoOutlet(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1293  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1294  /** \brief Enables/disables Tx FIFO overflow flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1295   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1296   * \param enable choice (enable / disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1297   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1298   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1299  IFX_INLINE void IfxAsclin_enableTxFifoOverflowFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1300  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1301  /** \brief Enables/disables transmit header end flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1302   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1303   * \param enable choice (enable / disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1304   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1305   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1306  IFX_INLINE void IfxAsclin_enableTxHeaderEndFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1307  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1308  /** \brief Enables/disables transmit response end flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1309   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1310   * \param enable choice (enable / disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1311   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1312   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1313  IFX_INLINE void IfxAsclin_enableTxResponseEndFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1314  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1315  /** \brief Returns the module's suspend state.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1316   * TRUE :if module is suspended.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1317   * FALSE:if module is not yet suspended.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1318   * \param asclin Pointer to ASCLIN module registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1319   * \return Suspend status (TRUE / FALSE)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1320   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1321  IFX_INLINE boolean IfxAsclin_isModuleSuspended(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1322  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1323  /** \brief Selects the clock polarity
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1324   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1325   * \param cpol CPOL selection
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1326   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1327   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1328  IFX_INLINE void IfxAsclin_setClockPolarity(Ifx_ASCLIN *asclin, IfxAsclin_ClockPolarity cpol);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1329  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1330  /** \brief Selects the CTS input pin
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1331   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1332   * \param ctsi CTS input pin selection
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1333   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1334   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1335  IFX_INLINE void IfxAsclin_setCtsInput(Ifx_ASCLIN *asclin, IfxAsclin_CtsInputSelect ctsi);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1336  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1337  /** \brief Selects the module's mode of operation
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1338   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1339   * \param mode mode selction
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1340   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1341   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1342  IFX_INLINE void IfxAsclin_setFrameMode(Ifx_ASCLIN *asclin, IfxAsclin_FrameMode mode);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1343  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1344  /** \brief Selects the RTS/CTS polarity
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1345   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1346   * \param rcpol RCPOL selection
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1347   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1348   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1349  IFX_INLINE void IfxAsclin_setRtsCtsPolarity(Ifx_ASCLIN *asclin, IfxAsclin_RtsCtsPolarity rcpol);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1350  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1351  /** \brief Selects the alternate input for Rx signal
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1352   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1353   * \param alti alternate input selection of Rx signal
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1354   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1355   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1356  IFX_INLINE void IfxAsclin_setRxInput(Ifx_ASCLIN *asclin, IfxAsclin_RxInputSelect alti);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1357  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1358  /** \brief Selects the slave polarity
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1359   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1360   * \param spol SPOL selection
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1361   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1362   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1363  IFX_INLINE void IfxAsclin_setSlavePolarity(Ifx_ASCLIN *asclin, IfxAsclin_SlavePolarity spol);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1364  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1365  /** \brief Configure the Module to Hard/Soft suspend mode.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1366   * Note: The api works only when the OCDS is enabled and in Supervisor Mode. When OCDS is disabled the OCS suspend control is ineffective.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1367   * \param asclin Pointer to ASCLIN module registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1368   * \param mode Module suspend mode
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1369   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1370   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1371  IFX_INLINE void IfxAsclin_setSuspendMode(Ifx_ASCLIN *asclin, IfxAsclin_SuspendMode mode);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1372  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1373  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1374  /*-------------------------Global Function Prototypes-------------------------*/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1375  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1376  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1377  /** \brief Set the bit timing
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1378   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1379   * \note this function required FA source and the PD frequency to be set to their final values
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1380   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1381   * \param baudrate Required baudrate
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1382   * \param oversampling The oversampling factor
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1383   * \param samplepoint The sample point position
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1384   * \param medianFilter Number of samples per bit (median filter)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1385   * \return TRUE if configuration was successfull
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1386   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1387  IFX_EXTERN boolean IfxAsclin_setBitTiming(Ifx_ASCLIN *asclin, float32 baudrate, IfxAsclin_OversamplingFactor oversampling, IfxAsclin_SamplePointPosition samplepoint, IfxAsclin_SamplesPerBit medianFilter);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1388  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1389  /** \} */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1390  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1391  /** \addtogroup IfxLld_Asclin_Std_External
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1392   * \{ */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1393  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1394  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1395  /*-------------------------Global Function Prototypes-------------------------*/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1396  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1397  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1398  /** \brief Disables the module
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1399   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1400   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1401   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1402  IFX_EXTERN void IfxAsclin_disableModule(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1403  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1404  /** \brief Enables the ASC error interrupt Flags
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1405   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1406   * \param parEnable parity error
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1407   * \param rfoEnable Rx FIFO overflow error
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1408   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1409   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1410  IFX_EXTERN void IfxAsclin_enableAscErrorFlags(Ifx_ASCLIN *asclin, boolean parEnable, boolean rfoEnable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1411  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1412  /** \brief Enables the module
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1413   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1414   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1415   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1416  IFX_EXTERN void IfxAsclin_enableModule(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1417  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1418  /** \brief Returns the SRC pointer for ERR
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1419   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1420   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1421  IFX_EXTERN volatile Ifx_SRC_SRCR *IfxAsclin_getSrcPointerEr(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1422  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1423  /** \brief Returns the  SRC pointer for Rx
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1424   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1425   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1426  IFX_EXTERN volatile Ifx_SRC_SRCR *IfxAsclin_getSrcPointerRx(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1427  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1428  /** \brief Returns the SRC pointer for Tx
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1429   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1430   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1431  IFX_EXTERN volatile Ifx_SRC_SRCR *IfxAsclin_getSrcPointerTx(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1432  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1433  /** \brief Reads data up to 16 bits
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1434   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1435   * \param data Array where the read data shall be stored
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1436   * \param count number of items to read
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1437   * \return number of items that could not be read
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1438   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1439  IFX_EXTERN uint32 IfxAsclin_read16(Ifx_ASCLIN *asclin, uint16 *data, uint32 count);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1440  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1441  /** \brief Reads data up to 32 bits
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1442   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1443   * \param data Array where the read data shall be stored
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1444   * \param count number of items to read
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1445   * \return number of items that could not be read
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1446   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1447  IFX_EXTERN uint32 IfxAsclin_read32(Ifx_ASCLIN *asclin, uint32 *data, uint32 count);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1448  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1449  /** \brief Reads data up to 8 bits
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1450   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1451   * \param data Array where the read data shall be stored
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1452   * \param count number of items to read
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1453   * \return number of items that could not be read
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1454   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1455  IFX_EXTERN uint32 IfxAsclin_read8(Ifx_ASCLIN *asclin, uint8 *data, uint32 count);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1456  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1457  /** \brief Sets the baudrate bit fields
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1458   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1459   * \param prescaler division ratio of the predivider
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1460   * \param numerator numerator of the fractional divider
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1461   * \param denominator denominator of the fractional divider
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1462   * \param oversampling division ratio of the baudrate postdivider
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1463   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1464   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1465  IFX_EXTERN void IfxAsclin_setBaudrateBitFields(Ifx_ASCLIN *asclin, uint16 prescaler, uint16 numerator, uint16 denominator, IfxAsclin_OversamplingFactor oversampling);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1466  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1467  /** \brief Sets the  clock source
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1468   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1469   * \param clockSource clock source selection
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1470   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1471   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1472  IFX_EXTERN void IfxAsclin_setClockSource(Ifx_ASCLIN *asclin, IfxAsclin_ClockSource clockSource);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1473  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1474  /** \brief Writes data up to 16 bits
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1475   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1476   * \param data Array of data to be send
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1477   * \param count number of items to be send
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1478   * \return the number of items that could not be send
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1479   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1480  IFX_EXTERN uint32 IfxAsclin_write16(Ifx_ASCLIN *asclin, uint16 *data, uint32 count);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1481  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1482  /** \brief Writes data up to 32 bits
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1483   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1484   * \param data Array of data to be send
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1485   * \param count number of items to be send
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1486   * \return the number of items that could not be send
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1487   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1488  IFX_EXTERN uint32 IfxAsclin_write32(Ifx_ASCLIN *asclin, uint32 *data, uint32 count);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1489  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1490  /** \brief Writes data up to 8 bits
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1491   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1492   * \param data Array of data to be send
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1493   * \param count number of items to be send
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1494   * \return the number of items that could not be send
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1495   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1496  IFX_EXTERN uint32 IfxAsclin_write8(Ifx_ASCLIN *asclin, uint8 *data, uint32 count);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1497  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1498  /** \} */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1499  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1500  /** \addtogroup IfxLld_Asclin_Std_IO
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1501   * \{ */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1502  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1503  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1504  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1505  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1506  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1507  /** \brief Initializes a CTS input
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1508   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1509   * Attention: the kernel clock has to be disabled whenever the input multiplexer is changed.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1510   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1511   * This can be done with IfxAsclin_setClockSource(asclinSFR, IfxAsclin_ClockSource_noClock);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1512   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1513   * After the function call, the current clock can be enabled again.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1514   * \param cts the CTS Pin which should be configured
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1515   * \param inputMode the pin input mode which should be configured
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1516   * \param padDriver the pad driver mode which should be configured
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1517   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1518   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1519  IFX_INLINE void IfxAsclin_initCtsPin(const IfxAsclin_Cts_In *cts, IfxPort_InputMode inputMode, IfxPort_PadDriver padDriver);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1520  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1521  /** \brief Initializes a RTS output
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1522   * \param rts the RTS Pin which should be configured
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1523   * \param outputMode the pin output mode which should be configured
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1524   * \param padDriver the pad driver mode which should be configured
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1525   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1526   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1527  IFX_INLINE void IfxAsclin_initRtsPin(const IfxAsclin_Rts_Out *rts, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1528  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1529  /** \brief Initializes a RX input
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1530   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1531   * Attention: the kernel clock has to be disabled whenever the input multiplexer is changed.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1532   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1533   * This can be done with IfxAsclin_setClockSource(asclinSFR, IfxAsclin_ClockSource_noClock);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1534   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1535   * After the function call, the current clock can be enabled again.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1536   * \param rx the RX Pin which should be configured
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1537   * \param inputMode the pin input mode which should be configured
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1538   * \param padDriver the pad driver mode which should be configured
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1539   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1540   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1541  IFX_INLINE void IfxAsclin_initRxPin(const IfxAsclin_Rx_In *rx, IfxPort_InputMode inputMode, IfxPort_PadDriver padDriver);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1542  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1543  /** \brief Initializes a SCLK output
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1544   * \param sclk the SCLK Pin which should be configured
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1545   * \param outputMode the pin output mode which should be configured
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1546   * \param padDriver the pad driver mode which should be configured
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1547   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1548   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1549  IFX_INLINE void IfxAsclin_initSclkPin(const IfxAsclin_Sclk_Out *sclk, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1550  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1551  /** \brief Initializes a SLSO output
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1552   * \param slso the SLSO Pin which should be configured
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1553   * \param outputMode the pin output mode which should be configured
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1554   * \param padDriver the pad driver mode which should be configured
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1555   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1556   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1557  IFX_INLINE void IfxAsclin_initSlsoPin(const IfxAsclin_Slso_Out *slso, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1558  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1559  /** \brief Initializes a TX output
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1560   * \param tx the TX Pin which should be configured
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1561   * \param outputMode the pin output mode which should be configured
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1562   * \param padDriver the pad driver mode which should be configured
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1563   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1564   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1565  IFX_INLINE void IfxAsclin_initTxPin(const IfxAsclin_Tx_Out *tx, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1566  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1567  /** \} */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1568  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1569  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1570  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1571  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1572  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1573  /**
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1574   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1575   * \return returns the value of RxDATA register
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1576   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1577  IFX_INLINE uint32 IfxAsclin_readRxData(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1578  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1579  /**
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1580   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1581   * \param data data to be written
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1582   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1583   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1584  IFX_INLINE void IfxAsclin_writeTxData(Ifx_ASCLIN *asclin, uint32 data);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1585  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1586  /** \brief Returns the status of all error flags
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1587   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1588   * \return status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1589   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1590  IFX_INLINE uint16 IfxAsclin_getAllErrorFlagsStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1591  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1592  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1593  /*---------------------Inline Function Implementations------------------------*/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1594  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1595  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1596  IFX_INLINE void IfxAsclin_clearAllFlags(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1597  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1598      asclin->FLAGSCLEAR.U = 0xFFFFFFFF;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1599  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1600  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1601  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1602  IFX_INLINE void IfxAsclin_clearBreakDetectedFlag(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1603  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1604      asclin->FLAGSCLEAR.B.BDC = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1605  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1606  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1607  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1608  IFX_INLINE void IfxAsclin_clearCollisionDetectionErrorFlag(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1609  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1610      asclin->FLAGSCLEAR.B.CEC = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1611  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1612  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1613  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1614  IFX_INLINE void IfxAsclin_clearFallingEdgeDetectedFlag(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1615  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1616      asclin->FLAGSCLEAR.B.FEDC = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1617  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1618  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1619  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1620  IFX_INLINE void IfxAsclin_clearFrameErrorFlag(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1621  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1622      asclin->FLAGSCLEAR.B.FEC = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1623  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1624  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1625  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1626  IFX_INLINE void IfxAsclin_clearHeaderTimeoutFlag(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1627  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1628      asclin->FLAGSCLEAR.B.HTC = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1629  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1630  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1631  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1632  IFX_INLINE void IfxAsclin_clearKernelResetStatus(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1633  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1634      asclin->KRSTCLR.B.CLR = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1635  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1636  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1637  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1638  IFX_INLINE void IfxAsclin_clearLinAutoBaudDetectionErrorFlag(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1639  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1640      asclin->FLAGSCLEAR.B.LAC = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1641  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1642  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1643  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1644  IFX_INLINE void IfxAsclin_clearLinChecksumErrorFlag(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1645  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1646      asclin->FLAGSCLEAR.B.LCC = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1647  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1648  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1649  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1650  IFX_INLINE void IfxAsclin_clearLinParityErrorFlag(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1651  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1652      asclin->FLAGSCLEAR.B.LPC = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1653  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1654  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1655  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1656  IFX_INLINE void IfxAsclin_clearParityErrorFlag(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1657  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1658      asclin->FLAGSCLEAR.B.PEC = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1659  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1660  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1661  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1662  IFX_INLINE void IfxAsclin_clearRaisingEdgeDetectedFlag(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1663  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1664      asclin->FLAGSCLEAR.B.REDC = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1665  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1666  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1667  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1668  IFX_INLINE void IfxAsclin_clearResponseTimeoutFlag(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1669  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1670      asclin->FLAGSCLEAR.B.RTC = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1671  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1672  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1673  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1674  IFX_INLINE void IfxAsclin_clearRxFifoFillLevelFlag(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1675  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1676      asclin->FLAGSCLEAR.B.RFLC = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1677  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1678  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1679  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1680  IFX_INLINE void IfxAsclin_clearRxFifoOverflowFlag(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1681  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1682      asclin->FLAGSCLEAR.B.RFOC = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1683  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1684  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1685  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1686  IFX_INLINE void IfxAsclin_clearRxFifoUnderflowFlag(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1687  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1688      asclin->FLAGSCLEAR.B.RFUC = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1689  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1690  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1691  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1692  IFX_INLINE void IfxAsclin_clearRxHeaderEndFlag(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1693  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1694      asclin->FLAGSCLEAR.B.RHC = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1695  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1696  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1697  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1698  IFX_INLINE void IfxAsclin_clearRxResponseEndFlag(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1699  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1700      asclin->FLAGSCLEAR.B.RRC = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1701  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1702  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1703  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1704  IFX_INLINE void IfxAsclin_clearTransmissionCompletedFlag(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1705  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1706      asclin->FLAGSCLEAR.B.TCC = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1707  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1708  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1709  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1710  IFX_INLINE void IfxAsclin_clearTxFifoFillLevelFlag(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1711  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1712      asclin->FLAGSCLEAR.B.TFLC = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1713  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1714  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1715  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1716  IFX_INLINE void IfxAsclin_clearTxFifoOverflowFlag(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1717  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1718      asclin->FLAGSCLEAR.B.TFOC = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1719  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1720  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1721  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1722  IFX_INLINE void IfxAsclin_clearTxHeaderEndFlag(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1723  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1724      asclin->FLAGSCLEAR.B.THC = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1725  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1726  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1727  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1728  IFX_INLINE void IfxAsclin_clearTxResponseEndFlag(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1729  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1730      asclin->FLAGSCLEAR.B.TRC = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1731  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1732  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1733  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1734  IFX_INLINE void IfxAsclin_disableAllFlags(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1735  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1736      asclin->FLAGSENABLE.U = 0x00000000;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1737  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1738  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1739  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1740  IFX_INLINE void IfxAsclin_enableAutoBaudrateDetection(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1741  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1742      asclin->LIN.CON.B.ABD = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1743  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1744  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1745  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1746  IFX_INLINE void IfxAsclin_enableBreakDetectedFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1747  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1748      asclin->FLAGSENABLE.B.BDE = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1749  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1750  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1751  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1752  IFX_INLINE void IfxAsclin_enableCollisionDetection(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1753  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1754      asclin->FRAMECON.B.CEN = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1755  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1756  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1757  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1758  IFX_INLINE void IfxAsclin_enableCollisionDetectionErrorFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1759  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1760      asclin->FLAGSENABLE.B.CEE = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1761  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1762  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1763  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1764  IFX_INLINE void IfxAsclin_enableCts(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1765  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1766      asclin->IOCR.B.CTSEN = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1767  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1768  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1769  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1770  IFX_INLINE void IfxAsclin_enableFallingEdgeDetectedFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1771  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1772      asclin->FLAGSENABLE.B.FEDE = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1773  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1774  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1775  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1776  IFX_INLINE void IfxAsclin_enableFrameErrorFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1777  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1778      asclin->FLAGSENABLE.B.FEE = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1779  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1780  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1781  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1782  IFX_INLINE void IfxAsclin_enableHardwareChecksum(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1783  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1784      asclin->LIN.CON.B.CSEN = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1785  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1786  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1787  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1788  IFX_INLINE void IfxAsclin_enableHeaderTimeoutFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1789  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1790      asclin->FLAGSENABLE.B.HTE = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1791  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1792  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1793  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1794  IFX_INLINE void IfxAsclin_enableLinAutoBaudDetectionErrorFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1795  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1796      asclin->FLAGSENABLE.B.ABE = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1797  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1798  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1799  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1800  IFX_INLINE void IfxAsclin_enableLinChecksumErrorFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1801  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1802      asclin->FLAGSENABLE.B.LCE = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1803  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1804  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1805  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1806  IFX_INLINE void IfxAsclin_enableLinParityErrorFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1807  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1808      asclin->FLAGSENABLE.B.LPE = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1809  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1810  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1811  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1812  IFX_INLINE void IfxAsclin_enableLoopBackMode(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1813  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1814      asclin->IOCR.B.LB = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1815  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1816  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1817  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1818  IFX_INLINE void IfxAsclin_enableParity(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1819  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1820      asclin->FRAMECON.B.PEN = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1821  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1822  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1823  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1824  IFX_INLINE void IfxAsclin_enableParityErrorFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1825  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1826      asclin->FLAGSENABLE.B.PEE = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1827  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1828  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1829  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1830  IFX_INLINE void IfxAsclin_enableRaisingEdgeDetectedFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1831  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1832      asclin->FLAGSENABLE.B.REDE = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1833  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1834  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1835  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1836  IFX_INLINE void IfxAsclin_enableResponseTimeoutFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1837  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1838      asclin->FLAGSENABLE.B.RTE = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1839  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1840  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1841  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1842  IFX_INLINE void IfxAsclin_enableRxFifoFillLevelFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1843  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1844      asclin->FLAGSENABLE.B.RFLE = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1845  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1846  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1847  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1848  IFX_INLINE void IfxAsclin_enableRxFifoInlet(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1849  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1850      asclin->RXFIFOCON.B.ENI = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1851  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1852  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1853  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1854  IFX_INLINE void IfxAsclin_enableRxFifoOverflowFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1855  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1856      asclin->FLAGSENABLE.B.RFOE = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1857  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1858  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1859  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1860  IFX_INLINE void IfxAsclin_enableRxFifoUnderflowFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1861  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1862      asclin->FLAGSENABLE.B.RFUE = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1863  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1864  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1865  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1866  IFX_INLINE void IfxAsclin_enableRxHeaderEndFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1867  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1868      asclin->FLAGSENABLE.B.RHE = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1869  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1870  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1871  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1872  IFX_INLINE void IfxAsclin_enableRxResponseEndFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1873  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1874      asclin->FLAGSENABLE.B.RRE = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1875  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1876  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1877  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1878  IFX_INLINE void IfxAsclin_enableTransmissionCompletedFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1879  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1880      asclin->FLAGSENABLE.B.TCE = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1881  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1882  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1883  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1884  IFX_INLINE void IfxAsclin_enableTxFifoFillLevelFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1885  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1886      asclin->FLAGSENABLE.B.TFLE = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1887  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1888  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1889  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1890  IFX_INLINE void IfxAsclin_enableTxFifoOutlet(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1891  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1892      asclin->TXFIFOCON.B.ENO = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1893  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1894  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1895  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1896  IFX_INLINE void IfxAsclin_enableTxFifoOverflowFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1897  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1898      asclin->FLAGSENABLE.B.TFOE = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1899  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1900  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1901  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1902  IFX_INLINE void IfxAsclin_enableTxHeaderEndFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1903  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1904      asclin->FLAGSENABLE.B.THE = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1905  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1906  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1907  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1908  IFX_INLINE void IfxAsclin_enableTxResponseEndFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1909  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1910      asclin->FLAGSENABLE.B.TRE = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1911  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1912  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1913  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1914  IFX_INLINE void IfxAsclin_flushRxFifo(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1915  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1916      asclin->RXFIFOCON.B.FLUSH = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1917  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1918  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1919  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1920  IFX_INLINE void IfxAsclin_flushTxFifo(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1921  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1922      asclin->TXFIFOCON.B.FLUSH = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1923  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1924  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1925  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1926  IFX_INLINE boolean IfxAsclin_getBreakDetectedFlagStatus(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1927  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1928      return asclin->FLAGS.B.BD;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1929  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1930  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1931  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1932  IFX_INLINE uint8 IfxAsclin_getClockSource(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1933  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1934      return asclin->CSR.B.CLKSEL;
	st.w	[a10]16,d15
.L482:

; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	   261  ampling = (IfxAsclin_OversamplingFactor)__maxu((oversampling + 1), 4);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	   262      samplepoint  = (IfxAsclin_SamplePointPosition)__maxu(samplepoint, 1);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	   263      fOvs         = baudrate * oversampling;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	   264      float32               relError   = fOvs;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	   265      float32               limit      = 0.001 * fOvs;                     // save the error limit
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	   266  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	   267      boolean               terminated = FALSE;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	   268      float32               newRelError;                                   //modified by Hassan
	mov	e8,d4,d5
	call	IfxAsclin_getPdFrequency
.L480:

; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	   269      uint32                adder_facL, adder_facH, adder_facL_min, count; //modified by Hassan
	add	d8,#1
.L578:
	max.u	d15,d8,#4
.L579:
	extr.u	d15,d15,#0,#8
	st.w	[a10]4,d15
.L484:

; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	   270  
	max.u	d15,d10,#1
	st.w	[a10]8,d15
.L299:

; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	   271      d = (uint32)(fpd / fOvs);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	   272      n = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	   273  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	   274      if (d >> 12)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	   275      {
	mov	d5,#0
.L300:
	ld.w	d15,[a10]4
.L301:

; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	   276          if (((uint32)(fpd / (baudrate * 16))) >> 12)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	   277          {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	   278              /* Increase the value of the prescalar to generate the required baudrate */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	   279              IFX_ASSERT(IFX_VERBOSE_LEVEL_WARNING, FALSE);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	   280          }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	   281          else
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	   282          {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	   283              /* Increase the value of the oversampling to generate the required baudrate */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	   284              IFX_ASSERT(IFX_VERBOSE_LEVEL_WARNING, FALSE);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	   285          }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	   286      }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	   287  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	   288      dBest          = d;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	   289      nBest          = n;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	   290      adder_facL_min = 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	   291      f              = (fpd * n) / d;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	   292      relError       = __absf(fOvs - f);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	   293  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	   294      if (relError <= limit)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	   295      {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	   296          terminated = TRUE;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	   297      }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	   298  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	   299      for (n = 2; ((!terminated) && ((n * d) <= 0xFFF)); n++)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	   300      {
	mov	d10,d5
.L302:
	utof	d15,d15
.L303:
	mov	d3,d5
.L304:
	mul.f	d4,d9,d15
.L305:
	mov	d15,#4719
.L580:
	div.f	d0,d2,d4
.L581:
	addih	d15,d15,#14979
.L582:
	mul.f	d15,d4,d15
	st.w	[a10],d15
.L486:
	ftouz	d1,d0
.L488:
	mov	d9,#1
.L489:
	utof	d0,d1
.L583:
	mov	d8,d1
.L490:
	div.f	d0,d2,d0
.L491:
	sub.f	d11,d4,d0
.L493:
	cmp.f	d15,d11,d10
.L487:
	jz.t	d15:0,.L38
	insn.t	d11,d11:31,d11:31
.L38:

; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	   301          if (n == 2)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	   302          {
	ld.w	d0,[a10]
.L492:

; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	   303              adder_facL = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	   304              adder_facH = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	   305          }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	   306          else
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	   307          {
	mov	d13,#2
.L494:
	cmp.f	d15,d11,d0
	and	d15,#3
	ne	d15,d15,#0
.L584:
	cmov	d5,d15,#1
	j	.L40
.L41:

; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	   308              adder_facL = (adder_facL_min * n) / nBest;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	   309              adder_facH = adder_facL + 1;
	jne	d13,#2,.L42
.L585:

; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	   310          }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	   311  
	mov	d6,#1
.L495:

; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	   312          for (count = adder_facL; count <= adder_facH; count++)
	mov	d12,#1
	j	.L44
.L42:

; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	   313          {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	   314              f           = (fpd * n) / (n * d + count);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	   315              newRelError = __absf(fOvs - f);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	   316  
	mul	d0,d3,d13
.L496:
	div.u	e6,d0,d9
.L497:

; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	   317              if (relError > (newRelError))
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	   318              {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	   319                  relError       = newRelError;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	   320                  nBest          = n;
	add	d12,d6,#1
	j	.L44
.L45:

; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	   321                  dBest          = (n * d + count);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	   322                  adder_facL_min = count;
	madd	d14,d6,d13,d1
.L586:
	utof	d0,d13
.L587:
	mul.f	d0,d2,d0
.L588:
	utof	d15,d14
.L589:
	div.f	d15,d0,d15
.L498:

; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	   323              }
	sub.f	d0,d4,d15
	cmp.f	d15,d0,d10
.L499:
	jz.t	d15:0,.L47
	insn.t	d0,d0:31,d0:31
.L47:

; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	   324          }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	   325  
	cmp.f	d15,d11,d0
.L590:
	jz.t	d15:2,.L48
.L591:

; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	   326          if (relError <= limit)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	   327          {
	mov	d11,d0
.L592:

; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	   328              break;
	mov	e8,d13,d14
.L593:

; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	   329          }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	   330      }
	mov	d3,d6
.L48:
	add	d6,#1
.L44:
	jge.u	d12,d6,.L45
.L594:

; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	   331  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	   332      IfxAsclin_setClockSource(asclin, IfxAsclin_ClockSource_noClock);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	   333      asclin->BRG.B.DENOMINATOR = dBest;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	   334      asclin->BRG.B.NUMERATOR   = nBest;
	ld.w	d15,[a10]
.L500:
	cmp.f	d15,d11,d15
.L501:
	and	d15,#3
.L595:
	jne	d15,#0,.L49
.L596:
	add	d13,#1
.L40:
	jne	d5,#0,.L50
.L597:
	mul	d15,d13,d1
.L598:
	mov	d0,#4095
.L599:
	jge.u	d0,d15,.L41
.L50:

; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	   335  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	   336      /* Set the SHIFT frequency */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	   337      asclin->BITCON.B.OVERSAMPLING = oversampling - 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	   338  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	   339      /* Set the sampling point */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	   340      asclin->BITCON.B.SAMPLEPOINT = samplepoint;
.L49:
	mov	d4,#0
	mov.aa	a4,a15
.L485:
	call	IfxAsclin_setClockSource
.L483:

; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	   341  
	ld.hu	d15,[a15]32
.L502:
	insert	d15,d15,d8,#0,#12
	st.h	[a15]32,d15
.L481:

; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	   342      /* Set the median filter */
	fcall	.cocofun_2
.L503:

; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	   343      asclin->BITCON.B.SM = medianFilter ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	   344  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	   345      IfxAsclin_setClockSource(asclin, source);
	ld.w	d15,[a10]4
.L504:
	ld.bu	d0,[a15]22
.L600:

; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	   346  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	   347      return TRUE;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	   348  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	   349  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	   350  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	   351  void IfxAsclin_setClockSource(Ifx_ASCLIN *asclin, IfxAsclin_ClockSource clockSource)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	   352  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	   353      asclin->CSR.B.CLKSEL = clockSource; /* selects the given clock source*/
	add	d15,#-1
	mov.aa	a4,a15
.L505:
	insert	d15,d0,d15,#0,#4
	st.b	[a15]22,d15
.L601:
	ld.w	d15,[a10]8
.L507:
	ld.bu	d0,[a15]23
.L602:
	ld.w	d4,[a10]16
.L603:
	insert	d15,d0,d15,#0,#4
	st.b	[a15]23,d15
.L508:
	ld.w	d15,[a10]12
.L509:
	ld.bu	d0,[a15]23
.L604:
	ne	d15,d15,#0
.L510:
	insert	d15,d0,d15,#7,#1
	st.b	[a15]23,d15
.L605:
	call	IfxAsclin_setClockSource
.L506:

; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	   354  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	   355      /* Waits TW or polls for CSR.CON to change */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	   356      if (clockSource == IfxAsclin_ClockSource_noClock)
	mov	d2,#1
	ret
.L274:
	
__IfxAsclin_setBitTiming_function_end:
	.size	IfxAsclin_setBitTiming,__IfxAsclin_setBitTiming_function_end-IfxAsclin_setBitTiming
.L158:
	; End of function
	
	.sdecl	'.text.IfxAsclin.IfxAsclin_setClockSource',code,cluster('IfxAsclin_setClockSource')
	.sect	'.text.IfxAsclin.IfxAsclin_setClockSource'
	.align	2
	
	.global	IfxAsclin_setClockSource

; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	   357      {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	   358          while (IfxAsclin_getClockStatus(asclin) != 0U)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	   359          {}
; Function IfxAsclin_setClockSource
.L108:
IfxAsclin_setClockSource:	.type	func

; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	   360      }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	   361      else
	ld.bu	d15,[a4]76
.L667:
	insert	d15,d15,d4,#0,#5
	st.b	[a4]76,d15
.L668:

; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	   362      {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	   363          while (IfxAsclin_getClockStatus(asclin) != 1U)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	   364          {}
	jne	d4,#0,.L52

; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	   365      }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	   366  }
.L53:

; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	     1  /**
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	     2   * \file IfxAsclin.h
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	     3   * \brief ASCLIN  basic functionality
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	     4   * \ingroup IfxLld_Asclin
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	     5   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	     6   * \version iLLD_1_0_1_11_0
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	     7   * \copyright Copyright (c) 2018 Infineon Technologies AG. All rights reserved.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	     8   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	     9   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    10   *                                 IMPORTANT NOTICE
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    11   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    12   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    13   * Use of this file is subject to the terms of use agreed between (i) you or 
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    14   * the company in which ordinary course of business you are acting and (ii) 
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    15   * Infineon Technologies AG or its licensees. If and as long as no such 
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    16   * terms of use are agreed, use of this file is subject to following:
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    17  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    18  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    19   * Boost Software License - Version 1.0 - August 17th, 2003
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    20  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    21   * Permission is hereby granted, free of charge, to any person or 
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    22   * organization obtaining a copy of the software and accompanying 
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    23   * documentation covered by this license (the "Software") to use, reproduce,
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    24   * display, distribute, execute, and transmit the Software, and to prepare
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    25   * derivative works of the Software, and to permit third-parties to whom the 
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    26   * Software is furnished to do so, all subject to the following:
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    27  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    28   * The copyright notices in the Software and this entire statement, including
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    29   * the above license grant, this restriction and the following disclaimer, must
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    30   * be included in all copies of the Software, in whole or in part, and all
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    31   * derivative works of the Software, unless such copies or derivative works are
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    32   * solely in the form of machine-executable object code generated by a source
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    33   * language processor.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    34  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    35   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR 
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    36   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    37   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    38   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE 
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    39   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    40   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    41   * DEALINGS IN THE SOFTWARE.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    42  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    43   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    44   * \defgroup IfxLld_Asclin_Std_Enumerations Enumerations
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    45   * \ingroup IfxLld_Asclin_Std
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    46   * \defgroup IfxLld_Asclin_Std_Operative Operative Functions
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    47   * \ingroup IfxLld_Asclin_Std
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    48   * \defgroup IfxLld_Asclin_Std_Utility Utility Functions
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    49   * \ingroup IfxLld_Asclin_Std
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    50   * \defgroup IfxLld_Asclin_Std_Configuration Configuration Functions
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    51   * \ingroup IfxLld_Asclin_Std
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    52   * \defgroup IfxLld_Asclin_Std_External External Functions
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    53   * \ingroup IfxLld_Asclin_Std
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    54   * \defgroup IfxLld_Asclin_Std_IO IO Pin Configuration Functions
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    55   * \ingroup IfxLld_Asclin_Std
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    56   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    57  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    58  #ifndef IFXASCLIN_H
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    59  #define IFXASCLIN_H 1
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    60  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    61  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    62  /*----------------------------------Includes----------------------------------*/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    63  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    64  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    65  #include "_Impl/IfxAsclin_cfg.h"
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    66  #include "Scu/Std/IfxScuCcu.h"
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    67  #include "Scu/Std/IfxScuWdt.h"
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    68  #include "Cpu/Std/IfxCpu_Intrinsics.h"
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    69  #include "IfxAsclin_reg.h"
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    70  #include "Src/Std/IfxSrc.h"
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    71  #include "_PinMap/IfxAsclin_PinMap.h"
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    72  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    73  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    74  /*--------------------------------Enumerations--------------------------------*/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    75  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    76  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    77  /** \addtogroup IfxLld_Asclin_Std_Enumerations
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    78   * \{ */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    79  /** \brief Defines if the classic or the enhanced checksum will be calculated by the checksum block.\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    80   * Definition in Ifx_ASCLIN.DATCON.B.CSM
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    81   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    82  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    83  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    84      IfxAsclin_Checksum_classic  = 0, /**< \brief classic checksum */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    85      IfxAsclin_Checksum_enhanced = 1  /**< \brief enhanced checksum */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    86  } IfxAsclin_Checksum;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    87  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    88  /** \brief Defines if the received checksum byte is written into the RXFifo or not.\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    89   * Definition in Ifx_ASCLIN.LIN.CON.B.CSI
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    90   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    91  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    92  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    93      IfxAsclin_ChecksumInjection_notWritten = 0,  /**< \brief checksum byte is not written */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    94      IfxAsclin_ChecksumInjection_written    = 1   /**< \brief checksum byte is written */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    95  } IfxAsclin_ChecksumInjection;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    96  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    97  /** \brief CPOL defines the idle level of the clock signal in the SPI mode.\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    98   * Idle level is the level outside the data transmission time intervals.\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    99   * Definition in Ifx_ASCLIN.IOCR.B.CPOL
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   100   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   101  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   102  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   103      IfxAsclin_ClockPolarity_idleLow  = 0, /**< \brief idle low */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   104      IfxAsclin_ClockPolarity_idleHigh = 1  /**< \brief idle high */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   105  } IfxAsclin_ClockPolarity;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   106  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   107  /** \brief Selection of clock source\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   108   * Definition in Ifx_ASCLIN.CSR.B.CLKSEL
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   109   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   110  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   111  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   112      IfxAsclin_ClockSource_noClock         = 0,  /**< \brief no clock will be supplied */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   113      IfxAsclin_ClockSource_kernelClock     = 1,  /**< \brief f clc will be supplied */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   114      IfxAsclin_ClockSource_oscillatorClock = 2,  /**< \brief XTAL oscillator clock foso0 will be supplied */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   115      IfxAsclin_ClockSource_flexRayClock    = 4,  /**< \brief f eray will be supplied */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   116      IfxAsclin_ClockSource_ascFastClock    = 8,  /**< \brief f asclinf wiil be supplied */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   117      IfxAsclin_ClockSource_ascSlowClock    = 16  /**< \brief f asclins will be supplied */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   118  } IfxAsclin_ClockSource;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   119  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   120  /** \brief CTS input pin selection\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   121   * Definition in Ifx_ASCLIN.IOCR.B.CTS
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   122   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   123  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   124  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   125      IfxAsclin_CtsInputSelect_0,     /**< \brief CTS input pin 0  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   126      IfxAsclin_CtsInputSelect_1,     /**< \brief CTS input pin 1  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   127      IfxAsclin_CtsInputSelect_2,     /**< \brief CTS input pin 2  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   128      IfxAsclin_CtsInputSelect_3      /**< \brief CTS input pin 3  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   129  } IfxAsclin_CtsInputSelect;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   130  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   131  /** \brief Number of bits per transfer\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   132   * Definition in Ifx_ASCLIN.FRAMECON.B.DATALEN
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   133   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   134  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   135  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   136      IfxAsclin_DataLength_1 = 0,      /**< \brief number of bits per transfer 0  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   137      IfxAsclin_DataLength_2,          /**< \brief number of bits per transfer 1  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   138      IfxAsclin_DataLength_3,          /**< \brief number of bits per transfer 2  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   139      IfxAsclin_DataLength_4,          /**< \brief number of bits per transfer 3  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   140      IfxAsclin_DataLength_5,          /**< \brief number of bits per transfer 4  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   141      IfxAsclin_DataLength_6,          /**< \brief number of bits per transfer 5  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   142      IfxAsclin_DataLength_7,          /**< \brief number of bits per transfer 6  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   143      IfxAsclin_DataLength_8,          /**< \brief number of bits per transfer 7  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   144      IfxAsclin_DataLength_9,          /**< \brief number of bits per transfer 8  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   145      IfxAsclin_DataLength_10,         /**< \brief number of bits per transfer 9  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   146      IfxAsclin_DataLength_11,         /**< \brief number of bits per transfer 10  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   147      IfxAsclin_DataLength_12,         /**< \brief number of bits per transfer 11  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   148      IfxAsclin_DataLength_13,         /**< \brief number of bits per transfer 12  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   149      IfxAsclin_DataLength_14,         /**< \brief number of bits per transfer 13  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   150      IfxAsclin_DataLength_15,         /**< \brief number of bits per transfer 14  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   151      IfxAsclin_DataLength_16          /**< \brief number of bits per transfer 15  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   152  } IfxAsclin_DataLength;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   153  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   154  /** \brief Defines the basic operating mode of the module. Changing the mode must be done by switching first to initialize mode, and then to the other mode.\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   155   * Definition in Ifx_ASCLIN.FRAMECON.B.MODE
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   156   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   157  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   158  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   159      IfxAsclin_FrameMode_initialise = 0,  /**< \brief initialise mode */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   160      IfxAsclin_FrameMode_asc        = 1,  /**< \brief asc mode */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   161      IfxAsclin_FrameMode_spi        = 2,  /**< \brief spi mode */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   162      IfxAsclin_FrameMode_lin        = 3   /**< \brief lin mode */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   163  } IfxAsclin_FrameMode;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   164  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   165  /** \brief Defines if LIN frame shall consist of a header and response or of a header only.\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   166   * Definition in Ifx_ASCLIN.DATCON.B.HO
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   167   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   168  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   169  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   170      IfxAsclin_HeaderResponseSelect_headerAndResponse = 0,  /**< \brief header and response expected */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   171      IfxAsclin_HeaderResponseSelect_headerOnly        = 1   /**< \brief header only expected */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   172  } IfxAsclin_HeaderResponseSelect;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   173  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   174  /** \brief Defines the duration of the IDLE delay in bit times.\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   175   * SPI mode: this is the idle time between the frames.\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   176   * ASC and LIN mode: this is the pause inserted between transmission of bytes.\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   177   * Definition in Ifx_ASCLIN.FRAMECON.B.IDLE
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   178   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   179  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   180  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   181      IfxAsclin_IdleDelay_0,     /**< \brief idle delay in 0 bit times  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   182      IfxAsclin_IdleDelay_1,     /**< \brief idle delay in 1 bit times  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   183      IfxAsclin_IdleDelay_2,     /**< \brief idle delay in 2 bit times  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   184      IfxAsclin_IdleDelay_3,     /**< \brief idle delay in 3 bit times  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   185      IfxAsclin_IdleDelay_4,     /**< \brief idle delay in 4 bit times  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   186      IfxAsclin_IdleDelay_5,     /**< \brief idle delay in 5 bit times  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   187      IfxAsclin_IdleDelay_6,     /**< \brief idle delay in 6 bit times  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   188      IfxAsclin_IdleDelay_7      /**< \brief idle delay in 7 bit times  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   189  } IfxAsclin_IdleDelay;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   190  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   191  /** \brief Defines the leading delay in bit times in SPI mode. ASC mode: not applicable.\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   192   * LIN mode: delay between the end of the break and the start of the sync character.\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   193   * Definition in Ifx_ASCLIN.FRAMECON.B.LEAD
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   194   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   195  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   196  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   197      IfxAsclin_LeadDelay_0,     /**< \brief lead delay in 0 bit times  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   198      IfxAsclin_LeadDelay_1,     /**< \brief lead delay in 1 bit times  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   199      IfxAsclin_LeadDelay_2,     /**< \brief lead delay in 2 bit times  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   200      IfxAsclin_LeadDelay_3,     /**< \brief lead delay in 3 bit times  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   201      IfxAsclin_LeadDelay_4,     /**< \brief lead delay in 4 bit times  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   202      IfxAsclin_LeadDelay_5,     /**< \brief lead delay in 5 bit times  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   203      IfxAsclin_LeadDelay_6,     /**< \brief lead delay in 6 bit times  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   204      IfxAsclin_LeadDelay_7      /**< \brief lead delay in 7 bit times  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   205  } IfxAsclin_LeadDelay;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   206  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   207  /** \brief Configures if the module in LIN mode operates as master or slave\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   208   * Definition in Ifx_ASCLIN.LIN.CON.B.MS
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   209   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   210  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   211  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   212      IfxAsclin_LinMode_slave  = 0, /**< \brief operates in slave mode */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   213      IfxAsclin_LinMode_master = 1  /**< \brief operates in master mode */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   214  } IfxAsclin_LinMode;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   215  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   216  /** \brief Defines the timeout threshold of RESPOSE bit is for LIN response timeout or LIN frame timeout.\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   217   * Definition in Ifx_ASCLIN.DATCON.B.RM
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   218   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   219  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   220  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   221      IfxAsclin_LinResponseTimeoutMode_frameTimeout    = 0, /**< \brief timeout threshold is for frame */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   222      IfxAsclin_LinResponseTimeoutMode_responseTimeout = 1  /**< \brief timeout threshold is for reponse */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   223  } IfxAsclin_LinResponseTimeoutMode;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   224  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   225  /** \brief Defines the bit length in ticks in the range of 1 to 16. The lengths of 1 to 3 are not allowed\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   226   * Definition in Ifx_ASCLIN.BITCON.B.OVERSAMPLING
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   227   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   228  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   229  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   230      IfxAsclin_OversamplingFactor_4  = 3,   /**< \brief oversampling factor 4 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   231      IfxAsclin_OversamplingFactor_5  = 4,   /**< \brief oversampling factor 5 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   232      IfxAsclin_OversamplingFactor_6  = 5,   /**< \brief oversampling factor 6 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   233      IfxAsclin_OversamplingFactor_7  = 6,   /**< \brief oversampling factor 7 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   234      IfxAsclin_OversamplingFactor_8  = 7,   /**< \brief oversampling factor 8 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   235      IfxAsclin_OversamplingFactor_9  = 8,   /**< \brief oversampling factor 9 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   236      IfxAsclin_OversamplingFactor_10 = 9,   /**< \brief oversampling factor 10 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   237      IfxAsclin_OversamplingFactor_11 = 10,  /**< \brief oversampling factor 11 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   238      IfxAsclin_OversamplingFactor_12 = 11,  /**< \brief oversampling factor 12 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   239      IfxAsclin_OversamplingFactor_13 = 12,  /**< \brief oversampling factor 13 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   240      IfxAsclin_OversamplingFactor_14 = 13,  /**< \brief oversampling factor 14 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   241      IfxAsclin_OversamplingFactor_15 = 14,  /**< \brief oversampling factor 15 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   242      IfxAsclin_OversamplingFactor_16 = 15   /**< \brief oversampling factor 16 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   243  } IfxAsclin_OversamplingFactor;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   244  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   245  /** \brief Type of parity bit attached to data bits\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   246   * Definition in Ifx_ASCLIN.FRAMECON.B.ODD
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   247   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   248  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   249  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   250      IfxAsclin_ParityType_even = 0,  /**< \brief even parity */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   251      IfxAsclin_ParityType_odd  = 1   /**< \brief odd parity */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   252  } IfxAsclin_ParityType;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   253  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   254  /** \brief Receive buffer mode\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   255   * Definition in Ifx_ASCLIN.RXFIFOCON.B.BUF
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   256   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   257  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   258  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   259      IfxAsclin_ReceiveBufferMode_rxFifo   = 0, /**< \brief RxFIFO mode */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   260      IfxAsclin_ReceiveBufferMode_rxBuffer = 1  /**< \brief single stage Rx buffer */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   261  } IfxAsclin_ReceiveBufferMode;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   262  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   263  /** \brief Polarity of the RTS and CTS signals\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   264   * Definition in Ifx_ASCLIN.IOCR.B.RCPOL
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   265   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   266  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   267  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   268      IfxAsclin_RtsCtsPolarity_activeHigh = 0,  /**< \brief ready/clear are active-high */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   269      IfxAsclin_RtsCtsPolarity_activeLow  = 1   /**< \brief ready/clear are active-low */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   270  } IfxAsclin_RtsCtsPolarity;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   271  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   272  /** \brief Defines the filling level that triggers a drain (RX) interrupt or DMA access\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   273   * Definition in Ifx_ASCLIN.RXFIFOCON.B.INTLEVEL
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   274   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   275  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   276  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   277      IfxAsclin_RxFifoInterruptLevel_1,     /**< \brief RX FIFO level 1  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   278      IfxAsclin_RxFifoInterruptLevel_2,     /**< \brief RX FIFO level 2  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   279      IfxAsclin_RxFifoInterruptLevel_3,     /**< \brief RX FIFO level 3  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   280      IfxAsclin_RxFifoInterruptLevel_4,     /**< \brief RX FIFO level 4  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   281      IfxAsclin_RxFifoInterruptLevel_5,     /**< \brief RX FIFO level 5  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   282      IfxAsclin_RxFifoInterruptLevel_6,     /**< \brief RX FIFO level 6  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   283      IfxAsclin_RxFifoInterruptLevel_7,     /**< \brief RX FIFO level 7  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   284      IfxAsclin_RxFifoInterruptLevel_8,     /**< \brief RX FIFO level 8  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   285      IfxAsclin_RxFifoInterruptLevel_9,     /**< \brief RX FIFO level 9  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   286      IfxAsclin_RxFifoInterruptLevel_10,    /**< \brief RX FIFO level 10  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   287      IfxAsclin_RxFifoInterruptLevel_11,    /**< \brief RX FIFO level 11  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   288      IfxAsclin_RxFifoInterruptLevel_12,    /**< \brief RX FIFO level 12  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   289      IfxAsclin_RxFifoInterruptLevel_13,    /**< \brief RX FIFO level 13  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   290      IfxAsclin_RxFifoInterruptLevel_14,    /**< \brief RX FIFO level 14  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   291      IfxAsclin_RxFifoInterruptLevel_15,    /**< \brief RX FIFO level 15  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   292      IfxAsclin_RxFifoInterruptLevel_16     /**< \brief RX FIFO level 16  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   293  } IfxAsclin_RxFifoInterruptLevel;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   294  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   295  /** \brief Defines the number of bytes read from the Rx FIFO with one FPI bus read\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   296   * Definition in Ifx_ASCLIN.RXFIFOCON.B.OUTW
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   297   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   298  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   299  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   300      IfxAsclin_RxFifoOutletWidth_0,     /**< \brief number of bytes 0  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   301      IfxAsclin_RxFifoOutletWidth_1,     /**< \brief number of bytes 1  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   302      IfxAsclin_RxFifoOutletWidth_2,     /**< \brief number of bytes 2  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   303      IfxAsclin_RxFifoOutletWidth_3      /**< \brief number of bytes 3  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   304  } IfxAsclin_RxFifoOutletWidth;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   305  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   306  /** \brief Alternate input selection for Rx signal.\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   307   * Definition in Ifx_ASCLIN.IOCR.B.ALTI
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   308   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   309  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   310  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   311      IfxAsclin_RxInputSelect_0,     /**< \brief alternate input selection 0  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   312      IfxAsclin_RxInputSelect_1,     /**< \brief alternate input selection 1  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   313      IfxAsclin_RxInputSelect_2,     /**< \brief alternate input selection 2  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   314      IfxAsclin_RxInputSelect_3,     /**< \brief alternate input selection 3  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   315      IfxAsclin_RxInputSelect_4,     /**< \brief alternate input selection 4  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   316      IfxAsclin_RxInputSelect_5,     /**< \brief alternate input selection 5  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   317      IfxAsclin_RxInputSelect_6,     /**< \brief alternate input selection 6  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   318      IfxAsclin_RxInputSelect_7      /**< \brief alternate input selection 7  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   319  } IfxAsclin_RxInputSelect;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   320  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   321  /** \brief Sample point position\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   322   * Definition in Ifx_ASCLIN.BITCON.B.SAMPLEPOINT
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   323   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   324  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   325  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   326      IfxAsclin_SamplePointPosition_1  = 1,   /**< \brief sample point position at 1 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   327      IfxAsclin_SamplePointPosition_2  = 2,   /**< \brief sample point position at 2 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   328      IfxAsclin_SamplePointPosition_3  = 3,   /**< \brief sample point position at 3 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   329      IfxAsclin_SamplePointPosition_4  = 4,   /**< \brief sample point position at 4 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   330      IfxAsclin_SamplePointPosition_5  = 5,   /**< \brief sample point position at 5 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   331      IfxAsclin_SamplePointPosition_6  = 6,   /**< \brief sample point position at 6 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   332      IfxAsclin_SamplePointPosition_7  = 7,   /**< \brief sample point position at 7 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   333      IfxAsclin_SamplePointPosition_8  = 8,   /**< \brief sample point position at 8 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   334      IfxAsclin_SamplePointPosition_9  = 9,   /**< \brief sample point position at 9 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   335      IfxAsclin_SamplePointPosition_10 = 10,  /**< \brief sample point position at 10 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   336      IfxAsclin_SamplePointPosition_11 = 11,  /**< \brief sample point position at 11 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   337      IfxAsclin_SamplePointPosition_12 = 12,  /**< \brief sample point position at 12 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   338      IfxAsclin_SamplePointPosition_13 = 13,  /**< \brief sample point position at 13 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   339      IfxAsclin_SamplePointPosition_14 = 14,  /**< \brief sample point position at 14 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   340      IfxAsclin_SamplePointPosition_15 = 15   /**< \brief sample point position at 15 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   341  } IfxAsclin_SamplePointPosition;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   342  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   343  /** \brief Number of samples per bit, sample mode/medianfilter\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   344   * Definition in Ifx_ASCLIN.BITCON.B.SM
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   345   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   346  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   347  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   348      IfxAsclin_SamplesPerBit_one   = 0, /**< \brief one sample per bit */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   349      IfxAsclin_SamplesPerBit_three = 1  /**< \brief three samples per bit */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   350  } IfxAsclin_SamplesPerBit;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   351  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   352  /** \brief SPI mode: defines the shift direction of the shift register.\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   353   * ASC and LIN mode: should be set to 0.\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   354   * Definition in Ifx_ASCLIN.FRAMECON.B.MSB
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   355   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   356  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   357  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   358      IfxAsclin_ShiftDirection_lsbFirst = 0,  /**< \brief LSB first */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   359      IfxAsclin_ShiftDirection_msbFirst = 1   /**< \brief MSB first */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   360  } IfxAsclin_ShiftDirection;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   361  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   362  /** \brief Defines the idle level of the SLSO signal, which is the level.\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   363   * Outside the data transmission, leading and trailing time intervals.\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   364   * Definition in Ifx_ASCLIN.IOCR.B.SPOL
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   365   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   366  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   367  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   368      IfxAsclin_SlavePolarity_idleLow  = 0, /**< \brief idle low */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   369      IfxAsclin_SlavePolarity_idlehigh = 1  /**< \brief idle high */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   370  } IfxAsclin_SlavePolarity;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   371  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   372  /** \brief Enable/disable the sensitivity of the module to sleep signal\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   373   * Definition in Ifx_ASCLIN.CLC.B.EDIS
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   374   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   375  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   376  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   377      IfxAsclin_SleepMode_enable  = 0, /**< \brief enables sleep mode */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   378      IfxAsclin_SleepMode_disable = 1  /**< \brief disables sleep mode */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   379  } IfxAsclin_SleepMode;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   380  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   381  /** \brief Error status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   382   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   383  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   384  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   385      IfxAsclin_Status_configurationError = 0,  /**< \brief Configuration error */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   386      IfxAsclin_Status_noError            = 1   /**< \brief No error */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   387  } IfxAsclin_Status;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   388  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   389  /** \brief ASC and LIN mode: number of stop bits (0 is not allowed), SPI mode: trailing delay.\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   390   * Definition in Ifx_ASCLIN.FRAMECON.B.STOP
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   391   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   392  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   393  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   394      IfxAsclin_StopBit_0,     /**< \brief number of stop bits 0  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   395      IfxAsclin_StopBit_1,     /**< \brief number of stop bits 1  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   396      IfxAsclin_StopBit_2,     /**< \brief number of stop bits 2  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   397      IfxAsclin_StopBit_3,     /**< \brief number of stop bits 3  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   398      IfxAsclin_StopBit_4,     /**< \brief number of stop bits 4  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   399      IfxAsclin_StopBit_5,     /**< \brief number of stop bits 5  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   400      IfxAsclin_StopBit_6,     /**< \brief number of stop bits 6  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   401      IfxAsclin_StopBit_7      /**< \brief number of stop bits 7  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   402  } IfxAsclin_StopBit;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   403  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   404  /** \brief OCDS Suspend Control (OCDS.SUS)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   405   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   406  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   407  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   408      IfxAsclin_SuspendMode_none = 0,  /**< \brief No suspend */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   409      IfxAsclin_SuspendMode_hard = 1,  /**< \brief Hard Suspend */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   410      IfxAsclin_SuspendMode_soft = 2   /**< \brief Soft Suspend */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   411  } IfxAsclin_SuspendMode;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   412  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   413  /** \brief Defines the number of bytes written to the Tx FIFO with one FPI bus write\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   414   * Definition in Ifx_ASCLIN.TXFIFOCON.B.INW
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   415   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   416  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   417  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   418      IfxAsclin_TxFifoInletWidth_0,     /**< \brief number of bytes 0  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   419      IfxAsclin_TxFifoInletWidth_1,     /**< \brief number of bytes 1  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   420      IfxAsclin_TxFifoInletWidth_2,     /**< \brief number of bytes 2  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   421      IfxAsclin_TxFifoInletWidth_3      /**< \brief number of bytes 3  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   422  } IfxAsclin_TxFifoInletWidth;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   423  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   424  /** \brief Defines the filling level that triggers a refill (TX) interrupt or DMA access\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   425   * Definition in Ifx_ASCLIN.TXFIFOCON.B.INTLEVEL
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   426   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   427  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   428  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   429      IfxAsclin_TxFifoInterruptLevel_0,     /**< \brief TX FIFO level 0  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   430      IfxAsclin_TxFifoInterruptLevel_1,     /**< \brief TX FIFO level 1  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   431      IfxAsclin_TxFifoInterruptLevel_2,     /**< \brief TX FIFO level 2  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   432      IfxAsclin_TxFifoInterruptLevel_3,     /**< \brief TX FIFO level 3  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   433      IfxAsclin_TxFifoInterruptLevel_4,     /**< \brief TX FIFO level 4  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   434      IfxAsclin_TxFifoInterruptLevel_5,     /**< \brief TX FIFO level 5  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   435      IfxAsclin_TxFifoInterruptLevel_6,     /**< \brief TX FIFO level 6  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   436      IfxAsclin_TxFifoInterruptLevel_7,     /**< \brief TX FIFO level 7  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   437      IfxAsclin_TxFifoInterruptLevel_8,     /**< \brief TX FIFO level 8  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   438      IfxAsclin_TxFifoInterruptLevel_9,     /**< \brief TX FIFO level 9  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   439      IfxAsclin_TxFifoInterruptLevel_10,    /**< \brief TX FIFO level 10  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   440      IfxAsclin_TxFifoInterruptLevel_11,    /**< \brief TX FIFO level 11  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   441      IfxAsclin_TxFifoInterruptLevel_12,    /**< \brief TX FIFO level 12  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   442      IfxAsclin_TxFifoInterruptLevel_13,    /**< \brief TX FIFO level 13  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   443      IfxAsclin_TxFifoInterruptLevel_14,    /**< \brief TX FIFO level 14  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   444      IfxAsclin_TxFifoInterruptLevel_15     /**< \brief TX FIFO level 15  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   445  } IfxAsclin_TxFifoInterruptLevel;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   446  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   447  /** \} */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   448  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   449  /** \addtogroup IfxLld_Asclin_Std_Operative
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   450   * \{ */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   451  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   452  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   453  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   454  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   455  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   456  /** \brief clears all the flags
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   457   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   458   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   459   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   460  IFX_INLINE void IfxAsclin_clearAllFlags(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   461  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   462  /** \brief Clears the break detected flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   463   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   464   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   465   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   466  IFX_INLINE void IfxAsclin_clearBreakDetectedFlag(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   467  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   468  /** \brief Clears the collision detection error flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   469   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   470   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   471   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   472  IFX_INLINE void IfxAsclin_clearCollisionDetectionErrorFlag(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   473  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   474  /** \brief Clears the falling edge detected flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   475   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   476   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   477   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   478  IFX_INLINE void IfxAsclin_clearFallingEdgeDetectedFlag(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   479  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   480  /** \brief Clears the frame error flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   481   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   482   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   483   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   484  IFX_INLINE void IfxAsclin_clearFrameErrorFlag(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   485  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   486  /** \brief Clears the header timeout flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   487   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   488   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   489   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   490  IFX_INLINE void IfxAsclin_clearHeaderTimeoutFlag(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   491  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   492  /** \brief Clears the kernel reset status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   493   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   494   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   495   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   496  IFX_INLINE void IfxAsclin_clearKernelResetStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   497  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   498  /** \brief Clears the auto baudrate detection error flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   499   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   500   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   501   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   502  IFX_INLINE void IfxAsclin_clearLinAutoBaudDetectionErrorFlag(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   503  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   504  /** \brief Clears the LIN checksum error flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   505   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   506   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   507   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   508  IFX_INLINE void IfxAsclin_clearLinChecksumErrorFlag(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   509  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   510  /** \brief Clears the LIN parity error flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   511   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   512   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   513   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   514  IFX_INLINE void IfxAsclin_clearLinParityErrorFlag(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   515  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   516  /** \brief Clears the parity error flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   517   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   518   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   519   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   520  IFX_INLINE void IfxAsclin_clearParityErrorFlag(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   521  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   522  /** \brief Clears the raising edge detected flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   523   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   524   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   525   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   526  IFX_INLINE void IfxAsclin_clearRaisingEdgeDetectedFlag(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   527  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   528  /** \brief Clears the response timeout flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   529   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   530   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   531   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   532  IFX_INLINE void IfxAsclin_clearResponseTimeoutFlag(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   533  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   534  /** \brief Clears the Rx FIFO level flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   535   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   536   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   537   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   538  IFX_INLINE void IfxAsclin_clearRxFifoFillLevelFlag(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   539  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   540  /** \brief Clears the Rx FIFO overflow flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   541   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   542   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   543   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   544  IFX_INLINE void IfxAsclin_clearRxFifoOverflowFlag(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   545  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   546  /** \brief Clears the Rx FIFO underflow flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   547   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   548   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   549   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   550  IFX_INLINE void IfxAsclin_clearRxFifoUnderflowFlag(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   551  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   552  /** \brief Clears the receive header end flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   553   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   554   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   555   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   556  IFX_INLINE void IfxAsclin_clearRxHeaderEndFlag(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   557  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   558  /** \brief Clears the receive response end flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   559   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   560   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   561   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   562  IFX_INLINE void IfxAsclin_clearRxResponseEndFlag(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   563  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   564  /** \brief Clears the transmission pending flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   565   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   566   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   567   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   568  IFX_INLINE void IfxAsclin_clearTransmissionCompletedFlag(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   569  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   570  /** \brief Clears the Tx FIFO level flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   571   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   572   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   573   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   574  IFX_INLINE void IfxAsclin_clearTxFifoFillLevelFlag(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   575  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   576  /** \brief Clears the Tx FIFO overflow flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   577   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   578   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   579   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   580  IFX_INLINE void IfxAsclin_clearTxFifoOverflowFlag(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   581  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   582  /** \brief Clears the transmit header end flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   583   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   584   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   585   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   586  IFX_INLINE void IfxAsclin_clearTxHeaderEndFlag(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   587  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   588  /** \brief Clears the transmit response end flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   589   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   590   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   591   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   592  IFX_INLINE void IfxAsclin_clearTxResponseEndFlag(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   593  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   594  /** \brief Flushes (empties) the Rx FIFO
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   595   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   596   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   597   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   598  IFX_INLINE void IfxAsclin_flushRxFifo(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   599  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   600  /** \brief Flushes (empties) the Tx FIFO
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   601   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   602   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   603   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   604  IFX_INLINE void IfxAsclin_flushTxFifo(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   605  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   606  /** \brief Sets the baudrate detection's lower limit
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   607   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   608   * \param limit value of the lower limit
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   609   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   610   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   611  IFX_INLINE void IfxAsclin_setBrdLowerlimt(Ifx_ASCLIN *asclin, uint8 limit);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   612  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   613  /** \brief Sets the baudrate detection's upper limit
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   614   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   615   * \param limit value of the upper limit
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   616   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   617   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   618  IFX_INLINE void IfxAsclin_setBrdUpperlimt(Ifx_ASCLIN *asclin, uint8 limit);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   619  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   620  /** \brief Sets the checksum injection
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   621   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   622   * \param csi checksum injection selection (not written / written)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   623   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   624   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   625  IFX_INLINE void IfxAsclin_setChecksumInjection(Ifx_ASCLIN *asclin, IfxAsclin_ChecksumInjection csi);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   626  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   627  /** \brief Sets the checksum mode
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   628   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   629   * \param mode checksum mode selection (classic / enhanced)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   630   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   631   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   632  IFX_INLINE void IfxAsclin_setChecksumMode(Ifx_ASCLIN *asclin, IfxAsclin_Checksum mode);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   633  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   634  /** \brief Sets the data length (number of bits per transfer)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   635   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   636   * \param length data length selection
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   637   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   638   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   639  IFX_INLINE void IfxAsclin_setDataLength(Ifx_ASCLIN *asclin, IfxAsclin_DataLength length);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   640  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   641  /** \brief Sets the denominator of the fractional divider
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   642   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   643   * \param denominator value of the denominator
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   644   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   645   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   646  IFX_INLINE void IfxAsclin_setDenominator(Ifx_ASCLIN *asclin, uint16 denominator);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   647  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   648  /** \brief Sets the disable module request
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   649   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   650   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   651   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   652  IFX_INLINE void IfxAsclin_setDisableModuleRequest(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   653  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   654  /** \brief Sets the enable module request
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   655   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   656   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   657   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   658  IFX_INLINE void IfxAsclin_setEnableModuleRequest(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   659  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   660  /** \brief Sets digital glitch filter depth
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   661   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   662   * \param depth digital glitch filter depth selection (1 to 63)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   663   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   664   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   665  IFX_INLINE void IfxAsclin_setFilterDepth(Ifx_ASCLIN *asclin, uint8 depth);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   666  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   667  /** \brief Sets the header response selection
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   668   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   669   * \param type type of selection (header and response or header only)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   670   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   671   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   672  IFX_INLINE void IfxAsclin_setHeaderResponseSelect(Ifx_ASCLIN *asclin, IfxAsclin_HeaderResponseSelect type);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   673  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   674  /** \brief Sets the idle delay
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   675   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   676   * \param delay idle delay selection
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   677   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   678   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   679  IFX_INLINE void IfxAsclin_setIdleDelay(Ifx_ASCLIN *asclin, IfxAsclin_IdleDelay delay);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   680  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   681  /** \brief Sets the kernal reset of the KRST1
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   682   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   683   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   684   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   685  IFX_INLINE void IfxAsclin_setKernelResetOne(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   686  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   687  /** \brief Sets the kernel reset of the KRST0
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   688   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   689   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   690   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   691  IFX_INLINE void IfxAsclin_setKernelResetZero(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   692  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   693  /** \brief Sets the lead delay
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   694   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   695   * \param delay lead delay selection
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   696   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   697   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   698  IFX_INLINE void IfxAsclin_setLeadDelay(Ifx_ASCLIN *asclin, IfxAsclin_LeadDelay delay);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   699  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   700  /** \brief Sets the LIN break length
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   701   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   702   * \param length value of the break length
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   703   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   704   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   705  IFX_INLINE void IfxAsclin_setLinBreakLength(Ifx_ASCLIN *asclin, uint8 length);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   706  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   707  /** \brief Sets the LIN header timeout
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   708   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   709   * \param timeout value of the header timeout
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   710   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   711   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   712  IFX_INLINE void IfxAsclin_setLinHeaderTimeout(Ifx_ASCLIN *asclin, uint8 timeout);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   713  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   714  /** \brief Sets the LIN mode of operation
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   715   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   716   * \param mode mode selection (slave / master)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   717   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   718   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   719  IFX_INLINE void IfxAsclin_setLinMode(Ifx_ASCLIN *asclin, IfxAsclin_LinMode mode);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   720  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   721  /** \brief Sets the LIN response timeout mode
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   722   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   723   * \param mode LIN response timeout mode selection
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   724   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   725   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   726  IFX_INLINE void IfxAsclin_setLinResponseTimeoutMode(Ifx_ASCLIN *asclin, IfxAsclin_LinResponseTimeoutMode mode);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   727  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   728  /** \brief Sets the LIN response timeout threshold
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   729   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   730   * \param threshold value of the tomeout threshold (1 to 256 bit times)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   731   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   732   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   733  IFX_INLINE void IfxAsclin_setLinResponseTimeoutThreshold(Ifx_ASCLIN *asclin, uint16 threshold);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   734  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   735  /** \brief Sets the numerator of the fractional divider
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   736   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   737   * \param numerator value of the numerator
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   738   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   739   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   740  IFX_INLINE void IfxAsclin_setNumerator(Ifx_ASCLIN *asclin, uint16 numerator);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   741  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   742  /** \brief Sets the division ratio of the baudrate post divider
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   743   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   744   * \param ovsFactor value of oversampling factor
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   745   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   746   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   747  IFX_INLINE void IfxAsclin_setOversampling(Ifx_ASCLIN *asclin, IfxAsclin_OversamplingFactor ovsFactor);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   748  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   749  /** \brief Sets the parity type
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   750   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   751   * \param type parity type selction (even / odd)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   752   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   753   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   754  IFX_INLINE void IfxAsclin_setParityType(Ifx_ASCLIN *asclin, IfxAsclin_ParityType type);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   755  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   756  /** \brief Sets the division ratio of the predivider (prescaler)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   757   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   758   * \param prescaler value of prescaler
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   759   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   760   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   761  IFX_INLINE void IfxAsclin_setPrescaler(Ifx_ASCLIN *asclin, uint16 prescaler);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   762  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   763  /** \brief Sets the receive buffer mode
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   764   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   765   * \param mode receive buffer mode selection (Rx FIFO or single stage Rx buffer)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   766   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   767   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   768  IFX_INLINE void IfxAsclin_setRxBufferMode(Ifx_ASCLIN *asclin, IfxAsclin_ReceiveBufferMode mode);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   769  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   770  /** \brief Sets the Tx FIFO interrupt level
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   771   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   772   * \param level interrupt level selection
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   773   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   774   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   775  IFX_INLINE void IfxAsclin_setRxFifoInterruptLevel(Ifx_ASCLIN *asclin, IfxAsclin_RxFifoInterruptLevel level);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   776  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   777  /** \brief Sets the receive FIFO outlet width
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   778   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   779   * \param width number of bytes read to the Rx FIFO with one FPI bus read
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   780   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   781   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   782  IFX_INLINE void IfxAsclin_setRxFifoOutletWidth(Ifx_ASCLIN *asclin, IfxAsclin_RxFifoOutletWidth width);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   783  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   784  /** \brief Sets the sample mode (number of samples per bit / median filter)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   785   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   786   * \param medianFilter value of the median filter
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   787   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   788   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   789  IFX_INLINE void IfxAsclin_setSampleMode(Ifx_ASCLIN *asclin, IfxAsclin_SamplesPerBit medianFilter);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   790  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   791  /** \brief Sets the sampling point position
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   792   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   793   * \param spPosition sample point position selection
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   794   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   795   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   796  IFX_INLINE void IfxAsclin_setSamplePointPosition(Ifx_ASCLIN *asclin, IfxAsclin_SamplePointPosition spPosition);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   797  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   798  /** \brief Sets the shift direction
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   799   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   800   * \param dir shift direction selection (LSB / MSB first)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   801   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   802   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   803  IFX_INLINE void IfxAsclin_setShiftDirection(Ifx_ASCLIN *asclin, IfxAsclin_ShiftDirection dir);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   804  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   805  /** \brief Sets the number of stop bits
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   806   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   807   * \param stopBit number of stop bits selection
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   808   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   809   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   810  IFX_INLINE void IfxAsclin_setStopBit(Ifx_ASCLIN *asclin, IfxAsclin_StopBit stopBit);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   811  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   812  /** \brief Sets the transmit header request flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   813   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   814   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   815   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   816  IFX_INLINE void IfxAsclin_setTransmitHeaderRequestFlag(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   817  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   818  /** \brief Sets the transmit response request flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   819   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   820   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   821   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   822  IFX_INLINE void IfxAsclin_setTransmitResponseRequestFlag(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   823  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   824  /** \brief Sets the transmission wake request flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   825   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   826   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   827   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   828  IFX_INLINE void IfxAsclin_setTransmitWakeRequestFlag(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   829  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   830  /** \brief Sets the transmit FIFO inlet width
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   831   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   832   * \param width number of bytes written to the Tx FIFO with one FPI bus write
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   833   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   834   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   835  IFX_INLINE void IfxAsclin_setTxFifoInletWidth(Ifx_ASCLIN *asclin, IfxAsclin_TxFifoInletWidth width);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   836  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   837  /** \brief Sets the Tx FIFO interrupt level
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   838   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   839   * \param level interrupt level selection
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   840   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   841   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   842  IFX_INLINE void IfxAsclin_setTxFifoInterruptLevel(Ifx_ASCLIN *asclin, IfxAsclin_TxFifoInterruptLevel level);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   843  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   844  /** \} */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   845  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   846  /** \addtogroup IfxLld_Asclin_Std_Utility
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   847   * \{ */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   848  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   849  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   850  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   851  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   852  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   853  /** \brief Returns the break detected flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   854   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   855   * \return break detected flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   856   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   857  IFX_INLINE boolean IfxAsclin_getBreakDetectedFlagStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   858  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   859  /** \brief Returns the clock source
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   860   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   861   * \return clock source
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   862   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   863  IFX_INLINE uint8 IfxAsclin_getClockSource(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   864  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   865  /** \brief Returns the clock status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   866   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   867   * \return clock status (off / on)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   868   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   869  IFX_INLINE boolean IfxAsclin_getClockStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   870  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   871  /** \brief Returns the collision detection error flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   872   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   873   * \return collision detection error flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   874   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   875  IFX_INLINE boolean IfxAsclin_getCollisionDetectionErrorFlagStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   876  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   877  /** \brief Returns  the falling edge detected flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   878   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   879   * \return falling edge detected flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   880   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   881  IFX_INLINE boolean IfxAsclin_getFallingEdgeDetectedFlagStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   882  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   883  /** \brief Returns the frame error flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   884   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   885   * \return frame error flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   886   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   887  IFX_INLINE boolean IfxAsclin_getFrameErrorFlagStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   888  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   889  /** \brief Returns the header timeout flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   890   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   891   * \return header timeout flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   892   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   893  IFX_INLINE boolean IfxAsclin_getHeaderTimeoutFlagStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   894  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   895  /** \brief Returns the kernel reset status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   896   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   897   * \return kernel reset status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   898   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   899  IFX_INLINE boolean IfxAsclin_getKernelResetStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   900  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   901  /** \brief Returns the LIN auto baudrate detection error flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   902   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   903   * \return LIN auto baudrate detection error flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   904   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   905  IFX_INLINE boolean IfxAsclin_getLinAutoBaudDetectionErrorFlagStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   906  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   907  /** \brief Returns the LIN checksum error flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   908   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   909   * \return LIN checksum error flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   910   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   911  IFX_INLINE boolean IfxAsclin_getLinChecksumErrorFlagStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   912  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   913  /** \brief Returns the LIN parity error flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   914   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   915   * \return LIN parity error flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   916   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   917  IFX_INLINE boolean IfxAsclin_getLinParityErrorFlagStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   918  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   919  /** \brief Returns the module status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   920   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   921   * \return module status (enabled / disabled)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   922   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   923  IFX_INLINE boolean IfxAsclin_getModuleStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   924  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   925  /** \brief Returns the parity error flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   926   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   927   * \return parity error flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   928   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   929  IFX_INLINE boolean IfxAsclin_getParityErrorFlagStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   930  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   931  /** \brief Returns the division ratio of the predivider (prescaler)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   932   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   933   * \return value of prescaler
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   934   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   935  IFX_INLINE uint16 IfxAsclin_getPrescaler(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   936  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   937  /** \brief Returns the raising edge detected flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   938   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   939   * \return raising edge detected flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   940   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   941  IFX_INLINE boolean IfxAsclin_getRaisingEdgeDetectedFlagStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   942  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   943  /** \brief Returns the received signal status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   944   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   945   * \return received signal status (0 is low & 1 is high)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   946   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   947  IFX_INLINE boolean IfxAsclin_getReceiveSignalStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   948  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   949  /** \brief Returns the response timeout flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   950   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   951   * \return response timeout flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   952   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   953  IFX_INLINE boolean IfxAsclin_getResponseTimeoutFlagStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   954  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   955  /** \brief Returns the current filling level of Tx FIFO
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   956   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   957   * \return current filling level of Rx FIFO
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   958   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   959  IFX_INLINE uint8 IfxAsclin_getRxFifoFillLevel(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   960  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   961  /** \brief Returns the Rx FIFO level flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   962   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   963   * \return Rx FIFO level flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   964   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   965  IFX_INLINE boolean IfxAsclin_getRxFifoFillLevelFlagStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   966  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   967  /** \brief Returns the receive FIFO inlet width
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   968   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   969   * \return number of bytes read to the Rx FIFO with one FPI bus read
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   970   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   971  IFX_INLINE uint8 IfxAsclin_getRxFifoOutletWidth(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   972  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   973  /** \brief Returns the Rx FIFO overflow flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   974   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   975   * \return Rx FIFO overflow flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   976   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   977  IFX_INLINE boolean IfxAsclin_getRxFifoOverflowFlagStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   978  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   979  /** \brief Returns the Rx FIFO underflow flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   980   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   981   * \return Rx FIFO underflow flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   982   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   983  IFX_INLINE boolean IfxAsclin_getRxFifoUnderflowFlagStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   984  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   985  /** \brief Returns the receive header end flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   986   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   987   * \return receive header end flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   988   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   989  IFX_INLINE boolean IfxAsclin_getRxHeaderEndFlagStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   990  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   991  /** \brief Returns the receive response end flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   992   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   993   * \return receive response end flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   994   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   995  IFX_INLINE boolean IfxAsclin_getRxResponseEndFlagStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   996  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   997  /** \brief Returns the transmission pending flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   998   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   999   * \return transmission pending flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1000   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1001  IFX_INLINE boolean IfxAsclin_getTransmissionCompletedFlagStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1002  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1003  /** \brief Returns the transmit signal status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1004   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1005   * \return transmit signal status (0 is low & 1 is high)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1006   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1007  IFX_INLINE boolean IfxAsclin_getTransmitSignalStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1008  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1009  /** \brief Returns the current filling level of Tx FIFO
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1010   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1011   * \return current filling level of Tx FIFO
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1012   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1013  IFX_INLINE uint8 IfxAsclin_getTxFifoFillLevel(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1014  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1015  /** \brief Returns the Tx FIFO level flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1016   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1017   * \return Tx FIFO level flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1018   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1019  IFX_INLINE boolean IfxAsclin_getTxFifoFillLevelFlagStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1020  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1021  /** \brief Returns the transmit FIFO inlet width
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1022   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1023   * \return number of bytes written to the Tx FIFO with one FPI bus write
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1024   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1025  IFX_INLINE uint8 IfxAsclin_getTxFifoInletWidth(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1026  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1027  /** \brief Returns the Tx FIFO overflow flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1028   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1029   * \return Tx FIFO overflow flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1030   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1031  IFX_INLINE boolean IfxAsclin_getTxFifoOverflowFlagStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1032  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1033  /** \brief Returns the transmit header end flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1034   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1035   * \return transmit header end flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1036   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1037  IFX_INLINE boolean IfxAsclin_getTxHeaderEndFlagStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1038  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1039  /** \brief Returns the transmit response end flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1040   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1041   * \return transmit response end flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1042   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1043  IFX_INLINE boolean IfxAsclin_getTxResponseEndFlagStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1044  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1045  /** \brief Sets the sensitivity of the module to sleep signal
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1046   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1047   * \param mode mode selection (enable / disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1048   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1049   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1050  IFX_INLINE void IfxAsclin_setSleepMode(Ifx_ASCLIN *asclin, IfxAsclin_SleepMode mode);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1051  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1052  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1053  /*-------------------------Global Function Prototypes-------------------------*/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1054  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1055  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1056  /** \brief API to get the address for ASCLIN HW module register memory map
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1057   * \param asclin Resource index of the ASCLIN
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1058   * \return ASCLIN module register address
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1059   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1060  IFX_EXTERN Ifx_ASCLIN *IfxAsclin_getAddress(IfxAsclin_Index asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1061  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1062  /** \brief Returns the ASCLIN module FA frequency in Hz
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1063   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1064   * \return Returns the ASCLIN module FA frequency in Hz
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1065   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1066  IFX_EXTERN float32 IfxAsclin_getFaFrequency(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1067  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1068  /** \brief API to get the resource index of the ASCLIN specified.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1069   * \return asclin resource index
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1070   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1071  IFX_EXTERN IfxAsclin_Index IfxAsclin_getIndex(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1072  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1073  /** \brief Returns the OVS frequency
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1074   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1075   * \return Returns the ASCLIN module OVS frequency in Hz
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1076   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1077  IFX_EXTERN float32 IfxAsclin_getOvsFrequency(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1078  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1079  /** \brief Returns the PD frequency
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1080   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1081   * \return Returns the ASCLIN module PD frequency in Hz
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1082   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1083  IFX_EXTERN float32 IfxAsclin_getPdFrequency(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1084  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1085  /** \brief Returns the SHIFT frequency
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1086   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1087   * \return Returns the ASCLIN module SHIFT frequency in Hz
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1088   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1089  IFX_EXTERN float32 IfxAsclin_getShiftFrequency(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1090  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1091  /** \brief resets Asclin kernel
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1092   * \param asclin pointer to ASCLIN resgisters
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1093   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1094   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1095  IFX_EXTERN void IfxAsclin_resetModule(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1096  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1097  /** \} */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1098  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1099  /** \addtogroup IfxLld_Asclin_Std_Configuration
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1100   * \{ */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1101  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1102  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1103  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1104  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1105  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1106  /** \brief disables all flags
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1107   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1108   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1109   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1110  IFX_INLINE void IfxAsclin_disableAllFlags(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1111  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1112  /** \brief Enables/disables the auto baudrate detection
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1113   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1114   * \param enable choice (enable / disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1115   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1116   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1117  IFX_INLINE void IfxAsclin_enableAutoBaudrateDetection(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1118  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1119  /** \brief Enables/disables break detected flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1120   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1121   * \param enable choice (enable / disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1122   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1123   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1124  IFX_INLINE void IfxAsclin_enableBreakDetectedFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1125  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1126  /** \brief Enables/disables the collision detection
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1127   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1128   * \param enable choice (enable/disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1129   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1130   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1131  IFX_INLINE void IfxAsclin_enableCollisionDetection(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1132  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1133  /** \brief Enables/disables LIN collision detection error flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1134   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1135   * \param enable choice (enable / disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1136   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1137   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1138  IFX_INLINE void IfxAsclin_enableCollisionDetectionErrorFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1139  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1140  /** \brief Enables/disables CTS
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1141   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1142   * \param enable choice (enable/disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1143   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1144   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1145  IFX_INLINE void IfxAsclin_enableCts(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1146  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1147  /** \brief Enables/disables falling edge detected flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1148   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1149   * \param enable choice (enable / disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1150   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1151   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1152  IFX_INLINE void IfxAsclin_enableFallingEdgeDetectedFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1153  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1154  /** \brief Enables/disables frame error flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1155   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1156   * \param enable choice (enable / disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1157   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1158   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1159  IFX_INLINE void IfxAsclin_enableFrameErrorFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1160  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1161  /** \brief Enables/disables the hardware checksum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1162   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1163   * \param enable choice (enable / disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1164   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1165   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1166  IFX_INLINE void IfxAsclin_enableHardwareChecksum(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1167  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1168  /** \brief Enables/disables header timeout flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1169   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1170   * \param enable choice (enable / disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1171   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1172   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1173  IFX_INLINE void IfxAsclin_enableHeaderTimeoutFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1174  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1175  /** \brief Enables/disables LIN auto baudrate detection error flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1176   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1177   * \param enable choice (enable / disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1178   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1179   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1180  IFX_INLINE void IfxAsclin_enableLinAutoBaudDetectionErrorFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1181  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1182  /** \brief Enables/disables LIN checksum error flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1183   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1184   * \param enable choice (enable / disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1185   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1186   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1187  IFX_INLINE void IfxAsclin_enableLinChecksumErrorFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1188  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1189  /** \brief Enables/disables LIN parity error flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1190   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1191   * \param enable choice (enable / disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1192   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1193   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1194  IFX_INLINE void IfxAsclin_enableLinParityErrorFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1195  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1196  /** \brief Enables/disables the loop back mode
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1197   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1198   * \param enable choice (enable/disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1199   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1200   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1201  IFX_INLINE void IfxAsclin_enableLoopBackMode(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1202  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1203  /** \brief Enables/disables the parity bit attachment to tha data bits
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1204   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1205   * \param enable choice (enable/disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1206   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1207   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1208  IFX_INLINE void IfxAsclin_enableParity(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1209  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1210  /** \brief Enables/disables parity error flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1211   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1212   * \param enable choice (enable / disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1213   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1214   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1215  IFX_INLINE void IfxAsclin_enableParityErrorFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1216  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1217  /** \brief Enables/disables raising edge detected flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1218   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1219   * \param enable choice (enable / disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1220   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1221   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1222  IFX_INLINE void IfxAsclin_enableRaisingEdgeDetectedFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1223  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1224  /** \brief Enables/disables response timeout flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1225   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1226   * \param enable choice (enable / disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1227   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1228   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1229  IFX_INLINE void IfxAsclin_enableResponseTimeoutFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1230  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1231  /** \brief Enables/disables Rx FIFO level flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1232   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1233   * \param enable choice (enable / disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1234   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1235   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1236  IFX_INLINE void IfxAsclin_enableRxFifoFillLevelFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1237  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1238  /** \brief Enables/disables the receive FIFO outlet to allow filling of Rx FIFO through shift register
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1239   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1240   * \param enable choice (enable/disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1241   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1242   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1243  IFX_INLINE void IfxAsclin_enableRxFifoInlet(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1244  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1245  /** \brief Enables/disables Rx FIFO overflow flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1246   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1247   * \param enable choice (enable / disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1248   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1249   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1250  IFX_INLINE void IfxAsclin_enableRxFifoOverflowFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1251  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1252  /** \brief Enables/disables Rx FIFO underflow flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1253   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1254   * \param enable choice (enable / disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1255   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1256   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1257  IFX_INLINE void IfxAsclin_enableRxFifoUnderflowFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1258  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1259  /** \brief Enables/disables receive header end flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1260   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1261   * \param enable choice (enable / disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1262   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1263   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1264  IFX_INLINE void IfxAsclin_enableRxHeaderEndFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1265  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1266  /** \brief Enables/disables receive response end flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1267   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1268   * \param enable choice (enable / disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1269   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1270   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1271  IFX_INLINE void IfxAsclin_enableRxResponseEndFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1272  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1273  /** \brief Enables/disables transmission completed flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1274   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1275   * \param enable choice (enable / disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1276   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1277   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1278  IFX_INLINE void IfxAsclin_enableTransmissionCompletedFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1279  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1280  /** \brief Enables/disables Tx FIFO level flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1281   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1282   * \param enable choice (enable / disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1283   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1284   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1285  IFX_INLINE void IfxAsclin_enableTxFifoFillLevelFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1286  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1287  /** \brief Enables/disables the transmit FIFO outlet to allow transmission
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1288   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1289   * \param enable choice (enable/disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1290   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1291   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1292  IFX_INLINE void IfxAsclin_enableTxFifoOutlet(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1293  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1294  /** \brief Enables/disables Tx FIFO overflow flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1295   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1296   * \param enable choice (enable / disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1297   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1298   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1299  IFX_INLINE void IfxAsclin_enableTxFifoOverflowFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1300  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1301  /** \brief Enables/disables transmit header end flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1302   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1303   * \param enable choice (enable / disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1304   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1305   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1306  IFX_INLINE void IfxAsclin_enableTxHeaderEndFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1307  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1308  /** \brief Enables/disables transmit response end flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1309   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1310   * \param enable choice (enable / disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1311   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1312   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1313  IFX_INLINE void IfxAsclin_enableTxResponseEndFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1314  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1315  /** \brief Returns the module's suspend state.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1316   * TRUE :if module is suspended.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1317   * FALSE:if module is not yet suspended.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1318   * \param asclin Pointer to ASCLIN module registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1319   * \return Suspend status (TRUE / FALSE)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1320   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1321  IFX_INLINE boolean IfxAsclin_isModuleSuspended(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1322  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1323  /** \brief Selects the clock polarity
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1324   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1325   * \param cpol CPOL selection
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1326   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1327   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1328  IFX_INLINE void IfxAsclin_setClockPolarity(Ifx_ASCLIN *asclin, IfxAsclin_ClockPolarity cpol);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1329  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1330  /** \brief Selects the CTS input pin
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1331   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1332   * \param ctsi CTS input pin selection
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1333   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1334   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1335  IFX_INLINE void IfxAsclin_setCtsInput(Ifx_ASCLIN *asclin, IfxAsclin_CtsInputSelect ctsi);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1336  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1337  /** \brief Selects the module's mode of operation
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1338   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1339   * \param mode mode selction
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1340   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1341   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1342  IFX_INLINE void IfxAsclin_setFrameMode(Ifx_ASCLIN *asclin, IfxAsclin_FrameMode mode);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1343  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1344  /** \brief Selects the RTS/CTS polarity
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1345   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1346   * \param rcpol RCPOL selection
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1347   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1348   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1349  IFX_INLINE void IfxAsclin_setRtsCtsPolarity(Ifx_ASCLIN *asclin, IfxAsclin_RtsCtsPolarity rcpol);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1350  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1351  /** \brief Selects the alternate input for Rx signal
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1352   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1353   * \param alti alternate input selection of Rx signal
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1354   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1355   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1356  IFX_INLINE void IfxAsclin_setRxInput(Ifx_ASCLIN *asclin, IfxAsclin_RxInputSelect alti);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1357  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1358  /** \brief Selects the slave polarity
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1359   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1360   * \param spol SPOL selection
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1361   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1362   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1363  IFX_INLINE void IfxAsclin_setSlavePolarity(Ifx_ASCLIN *asclin, IfxAsclin_SlavePolarity spol);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1364  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1365  /** \brief Configure the Module to Hard/Soft suspend mode.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1366   * Note: The api works only when the OCDS is enabled and in Supervisor Mode. When OCDS is disabled the OCS suspend control is ineffective.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1367   * \param asclin Pointer to ASCLIN module registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1368   * \param mode Module suspend mode
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1369   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1370   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1371  IFX_INLINE void IfxAsclin_setSuspendMode(Ifx_ASCLIN *asclin, IfxAsclin_SuspendMode mode);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1372  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1373  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1374  /*-------------------------Global Function Prototypes-------------------------*/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1375  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1376  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1377  /** \brief Set the bit timing
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1378   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1379   * \note this function required FA source and the PD frequency to be set to their final values
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1380   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1381   * \param baudrate Required baudrate
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1382   * \param oversampling The oversampling factor
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1383   * \param samplepoint The sample point position
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1384   * \param medianFilter Number of samples per bit (median filter)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1385   * \return TRUE if configuration was successfull
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1386   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1387  IFX_EXTERN boolean IfxAsclin_setBitTiming(Ifx_ASCLIN *asclin, float32 baudrate, IfxAsclin_OversamplingFactor oversampling, IfxAsclin_SamplePointPosition samplepoint, IfxAsclin_SamplesPerBit medianFilter);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1388  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1389  /** \} */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1390  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1391  /** \addtogroup IfxLld_Asclin_Std_External
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1392   * \{ */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1393  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1394  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1395  /*-------------------------Global Function Prototypes-------------------------*/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1396  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1397  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1398  /** \brief Disables the module
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1399   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1400   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1401   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1402  IFX_EXTERN void IfxAsclin_disableModule(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1403  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1404  /** \brief Enables the ASC error interrupt Flags
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1405   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1406   * \param parEnable parity error
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1407   * \param rfoEnable Rx FIFO overflow error
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1408   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1409   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1410  IFX_EXTERN void IfxAsclin_enableAscErrorFlags(Ifx_ASCLIN *asclin, boolean parEnable, boolean rfoEnable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1411  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1412  /** \brief Enables the module
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1413   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1414   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1415   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1416  IFX_EXTERN void IfxAsclin_enableModule(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1417  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1418  /** \brief Returns the SRC pointer for ERR
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1419   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1420   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1421  IFX_EXTERN volatile Ifx_SRC_SRCR *IfxAsclin_getSrcPointerEr(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1422  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1423  /** \brief Returns the  SRC pointer for Rx
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1424   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1425   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1426  IFX_EXTERN volatile Ifx_SRC_SRCR *IfxAsclin_getSrcPointerRx(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1427  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1428  /** \brief Returns the SRC pointer for Tx
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1429   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1430   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1431  IFX_EXTERN volatile Ifx_SRC_SRCR *IfxAsclin_getSrcPointerTx(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1432  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1433  /** \brief Reads data up to 16 bits
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1434   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1435   * \param data Array where the read data shall be stored
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1436   * \param count number of items to read
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1437   * \return number of items that could not be read
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1438   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1439  IFX_EXTERN uint32 IfxAsclin_read16(Ifx_ASCLIN *asclin, uint16 *data, uint32 count);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1440  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1441  /** \brief Reads data up to 32 bits
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1442   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1443   * \param data Array where the read data shall be stored
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1444   * \param count number of items to read
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1445   * \return number of items that could not be read
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1446   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1447  IFX_EXTERN uint32 IfxAsclin_read32(Ifx_ASCLIN *asclin, uint32 *data, uint32 count);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1448  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1449  /** \brief Reads data up to 8 bits
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1450   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1451   * \param data Array where the read data shall be stored
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1452   * \param count number of items to read
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1453   * \return number of items that could not be read
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1454   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1455  IFX_EXTERN uint32 IfxAsclin_read8(Ifx_ASCLIN *asclin, uint8 *data, uint32 count);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1456  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1457  /** \brief Sets the baudrate bit fields
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1458   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1459   * \param prescaler division ratio of the predivider
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1460   * \param numerator numerator of the fractional divider
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1461   * \param denominator denominator of the fractional divider
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1462   * \param oversampling division ratio of the baudrate postdivider
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1463   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1464   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1465  IFX_EXTERN void IfxAsclin_setBaudrateBitFields(Ifx_ASCLIN *asclin, uint16 prescaler, uint16 numerator, uint16 denominator, IfxAsclin_OversamplingFactor oversampling);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1466  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1467  /** \brief Sets the  clock source
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1468   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1469   * \param clockSource clock source selection
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1470   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1471   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1472  IFX_EXTERN void IfxAsclin_setClockSource(Ifx_ASCLIN *asclin, IfxAsclin_ClockSource clockSource);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1473  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1474  /** \brief Writes data up to 16 bits
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1475   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1476   * \param data Array of data to be send
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1477   * \param count number of items to be send
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1478   * \return the number of items that could not be send
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1479   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1480  IFX_EXTERN uint32 IfxAsclin_write16(Ifx_ASCLIN *asclin, uint16 *data, uint32 count);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1481  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1482  /** \brief Writes data up to 32 bits
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1483   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1484   * \param data Array of data to be send
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1485   * \param count number of items to be send
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1486   * \return the number of items that could not be send
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1487   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1488  IFX_EXTERN uint32 IfxAsclin_write32(Ifx_ASCLIN *asclin, uint32 *data, uint32 count);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1489  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1490  /** \brief Writes data up to 8 bits
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1491   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1492   * \param data Array of data to be send
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1493   * \param count number of items to be send
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1494   * \return the number of items that could not be send
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1495   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1496  IFX_EXTERN uint32 IfxAsclin_write8(Ifx_ASCLIN *asclin, uint8 *data, uint32 count);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1497  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1498  /** \} */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1499  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1500  /** \addtogroup IfxLld_Asclin_Std_IO
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1501   * \{ */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1502  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1503  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1504  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1505  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1506  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1507  /** \brief Initializes a CTS input
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1508   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1509   * Attention: the kernel clock has to be disabled whenever the input multiplexer is changed.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1510   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1511   * This can be done with IfxAsclin_setClockSource(asclinSFR, IfxAsclin_ClockSource_noClock);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1512   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1513   * After the function call, the current clock can be enabled again.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1514   * \param cts the CTS Pin which should be configured
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1515   * \param inputMode the pin input mode which should be configured
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1516   * \param padDriver the pad driver mode which should be configured
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1517   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1518   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1519  IFX_INLINE void IfxAsclin_initCtsPin(const IfxAsclin_Cts_In *cts, IfxPort_InputMode inputMode, IfxPort_PadDriver padDriver);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1520  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1521  /** \brief Initializes a RTS output
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1522   * \param rts the RTS Pin which should be configured
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1523   * \param outputMode the pin output mode which should be configured
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1524   * \param padDriver the pad driver mode which should be configured
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1525   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1526   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1527  IFX_INLINE void IfxAsclin_initRtsPin(const IfxAsclin_Rts_Out *rts, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1528  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1529  /** \brief Initializes a RX input
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1530   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1531   * Attention: the kernel clock has to be disabled whenever the input multiplexer is changed.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1532   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1533   * This can be done with IfxAsclin_setClockSource(asclinSFR, IfxAsclin_ClockSource_noClock);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1534   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1535   * After the function call, the current clock can be enabled again.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1536   * \param rx the RX Pin which should be configured
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1537   * \param inputMode the pin input mode which should be configured
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1538   * \param padDriver the pad driver mode which should be configured
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1539   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1540   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1541  IFX_INLINE void IfxAsclin_initRxPin(const IfxAsclin_Rx_In *rx, IfxPort_InputMode inputMode, IfxPort_PadDriver padDriver);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1542  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1543  /** \brief Initializes a SCLK output
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1544   * \param sclk the SCLK Pin which should be configured
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1545   * \param outputMode the pin output mode which should be configured
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1546   * \param padDriver the pad driver mode which should be configured
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1547   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1548   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1549  IFX_INLINE void IfxAsclin_initSclkPin(const IfxAsclin_Sclk_Out *sclk, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1550  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1551  /** \brief Initializes a SLSO output
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1552   * \param slso the SLSO Pin which should be configured
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1553   * \param outputMode the pin output mode which should be configured
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1554   * \param padDriver the pad driver mode which should be configured
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1555   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1556   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1557  IFX_INLINE void IfxAsclin_initSlsoPin(const IfxAsclin_Slso_Out *slso, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1558  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1559  /** \brief Initializes a TX output
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1560   * \param tx the TX Pin which should be configured
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1561   * \param outputMode the pin output mode which should be configured
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1562   * \param padDriver the pad driver mode which should be configured
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1563   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1564   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1565  IFX_INLINE void IfxAsclin_initTxPin(const IfxAsclin_Tx_Out *tx, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1566  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1567  /** \} */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1568  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1569  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1570  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1571  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1572  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1573  /**
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1574   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1575   * \return returns the value of RxDATA register
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1576   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1577  IFX_INLINE uint32 IfxAsclin_readRxData(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1578  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1579  /**
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1580   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1581   * \param data data to be written
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1582   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1583   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1584  IFX_INLINE void IfxAsclin_writeTxData(Ifx_ASCLIN *asclin, uint32 data);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1585  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1586  /** \brief Returns the status of all error flags
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1587   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1588   * \return status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1589   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1590  IFX_INLINE uint16 IfxAsclin_getAllErrorFlagsStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1591  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1592  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1593  /*---------------------Inline Function Implementations------------------------*/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1594  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1595  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1596  IFX_INLINE void IfxAsclin_clearAllFlags(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1597  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1598      asclin->FLAGSCLEAR.U = 0xFFFFFFFF;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1599  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1600  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1601  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1602  IFX_INLINE void IfxAsclin_clearBreakDetectedFlag(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1603  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1604      asclin->FLAGSCLEAR.B.BDC = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1605  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1606  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1607  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1608  IFX_INLINE void IfxAsclin_clearCollisionDetectionErrorFlag(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1609  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1610      asclin->FLAGSCLEAR.B.CEC = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1611  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1612  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1613  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1614  IFX_INLINE void IfxAsclin_clearFallingEdgeDetectedFlag(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1615  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1616      asclin->FLAGSCLEAR.B.FEDC = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1617  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1618  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1619  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1620  IFX_INLINE void IfxAsclin_clearFrameErrorFlag(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1621  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1622      asclin->FLAGSCLEAR.B.FEC = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1623  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1624  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1625  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1626  IFX_INLINE void IfxAsclin_clearHeaderTimeoutFlag(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1627  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1628      asclin->FLAGSCLEAR.B.HTC = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1629  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1630  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1631  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1632  IFX_INLINE void IfxAsclin_clearKernelResetStatus(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1633  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1634      asclin->KRSTCLR.B.CLR = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1635  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1636  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1637  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1638  IFX_INLINE void IfxAsclin_clearLinAutoBaudDetectionErrorFlag(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1639  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1640      asclin->FLAGSCLEAR.B.LAC = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1641  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1642  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1643  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1644  IFX_INLINE void IfxAsclin_clearLinChecksumErrorFlag(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1645  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1646      asclin->FLAGSCLEAR.B.LCC = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1647  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1648  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1649  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1650  IFX_INLINE void IfxAsclin_clearLinParityErrorFlag(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1651  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1652      asclin->FLAGSCLEAR.B.LPC = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1653  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1654  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1655  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1656  IFX_INLINE void IfxAsclin_clearParityErrorFlag(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1657  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1658      asclin->FLAGSCLEAR.B.PEC = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1659  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1660  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1661  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1662  IFX_INLINE void IfxAsclin_clearRaisingEdgeDetectedFlag(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1663  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1664      asclin->FLAGSCLEAR.B.REDC = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1665  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1666  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1667  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1668  IFX_INLINE void IfxAsclin_clearResponseTimeoutFlag(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1669  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1670      asclin->FLAGSCLEAR.B.RTC = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1671  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1672  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1673  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1674  IFX_INLINE void IfxAsclin_clearRxFifoFillLevelFlag(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1675  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1676      asclin->FLAGSCLEAR.B.RFLC = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1677  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1678  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1679  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1680  IFX_INLINE void IfxAsclin_clearRxFifoOverflowFlag(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1681  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1682      asclin->FLAGSCLEAR.B.RFOC = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1683  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1684  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1685  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1686  IFX_INLINE void IfxAsclin_clearRxFifoUnderflowFlag(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1687  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1688      asclin->FLAGSCLEAR.B.RFUC = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1689  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1690  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1691  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1692  IFX_INLINE void IfxAsclin_clearRxHeaderEndFlag(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1693  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1694      asclin->FLAGSCLEAR.B.RHC = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1695  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1696  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1697  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1698  IFX_INLINE void IfxAsclin_clearRxResponseEndFlag(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1699  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1700      asclin->FLAGSCLEAR.B.RRC = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1701  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1702  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1703  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1704  IFX_INLINE void IfxAsclin_clearTransmissionCompletedFlag(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1705  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1706      asclin->FLAGSCLEAR.B.TCC = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1707  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1708  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1709  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1710  IFX_INLINE void IfxAsclin_clearTxFifoFillLevelFlag(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1711  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1712      asclin->FLAGSCLEAR.B.TFLC = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1713  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1714  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1715  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1716  IFX_INLINE void IfxAsclin_clearTxFifoOverflowFlag(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1717  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1718      asclin->FLAGSCLEAR.B.TFOC = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1719  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1720  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1721  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1722  IFX_INLINE void IfxAsclin_clearTxHeaderEndFlag(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1723  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1724      asclin->FLAGSCLEAR.B.THC = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1725  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1726  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1727  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1728  IFX_INLINE void IfxAsclin_clearTxResponseEndFlag(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1729  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1730      asclin->FLAGSCLEAR.B.TRC = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1731  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1732  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1733  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1734  IFX_INLINE void IfxAsclin_disableAllFlags(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1735  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1736      asclin->FLAGSENABLE.U = 0x00000000;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1737  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1738  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1739  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1740  IFX_INLINE void IfxAsclin_enableAutoBaudrateDetection(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1741  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1742      asclin->LIN.CON.B.ABD = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1743  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1744  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1745  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1746  IFX_INLINE void IfxAsclin_enableBreakDetectedFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1747  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1748      asclin->FLAGSENABLE.B.BDE = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1749  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1750  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1751  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1752  IFX_INLINE void IfxAsclin_enableCollisionDetection(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1753  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1754      asclin->FRAMECON.B.CEN = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1755  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1756  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1757  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1758  IFX_INLINE void IfxAsclin_enableCollisionDetectionErrorFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1759  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1760      asclin->FLAGSENABLE.B.CEE = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1761  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1762  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1763  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1764  IFX_INLINE void IfxAsclin_enableCts(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1765  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1766      asclin->IOCR.B.CTSEN = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1767  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1768  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1769  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1770  IFX_INLINE void IfxAsclin_enableFallingEdgeDetectedFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1771  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1772      asclin->FLAGSENABLE.B.FEDE = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1773  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1774  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1775  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1776  IFX_INLINE void IfxAsclin_enableFrameErrorFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1777  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1778      asclin->FLAGSENABLE.B.FEE = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1779  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1780  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1781  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1782  IFX_INLINE void IfxAsclin_enableHardwareChecksum(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1783  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1784      asclin->LIN.CON.B.CSEN = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1785  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1786  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1787  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1788  IFX_INLINE void IfxAsclin_enableHeaderTimeoutFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1789  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1790      asclin->FLAGSENABLE.B.HTE = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1791  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1792  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1793  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1794  IFX_INLINE void IfxAsclin_enableLinAutoBaudDetectionErrorFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1795  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1796      asclin->FLAGSENABLE.B.ABE = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1797  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1798  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1799  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1800  IFX_INLINE void IfxAsclin_enableLinChecksumErrorFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1801  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1802      asclin->FLAGSENABLE.B.LCE = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1803  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1804  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1805  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1806  IFX_INLINE void IfxAsclin_enableLinParityErrorFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1807  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1808      asclin->FLAGSENABLE.B.LPE = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1809  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1810  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1811  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1812  IFX_INLINE void IfxAsclin_enableLoopBackMode(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1813  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1814      asclin->IOCR.B.LB = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1815  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1816  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1817  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1818  IFX_INLINE void IfxAsclin_enableParity(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1819  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1820      asclin->FRAMECON.B.PEN = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1821  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1822  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1823  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1824  IFX_INLINE void IfxAsclin_enableParityErrorFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1825  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1826      asclin->FLAGSENABLE.B.PEE = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1827  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1828  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1829  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1830  IFX_INLINE void IfxAsclin_enableRaisingEdgeDetectedFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1831  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1832      asclin->FLAGSENABLE.B.REDE = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1833  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1834  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1835  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1836  IFX_INLINE void IfxAsclin_enableResponseTimeoutFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1837  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1838      asclin->FLAGSENABLE.B.RTE = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1839  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1840  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1841  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1842  IFX_INLINE void IfxAsclin_enableRxFifoFillLevelFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1843  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1844      asclin->FLAGSENABLE.B.RFLE = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1845  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1846  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1847  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1848  IFX_INLINE void IfxAsclin_enableRxFifoInlet(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1849  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1850      asclin->RXFIFOCON.B.ENI = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1851  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1852  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1853  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1854  IFX_INLINE void IfxAsclin_enableRxFifoOverflowFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1855  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1856      asclin->FLAGSENABLE.B.RFOE = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1857  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1858  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1859  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1860  IFX_INLINE void IfxAsclin_enableRxFifoUnderflowFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1861  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1862      asclin->FLAGSENABLE.B.RFUE = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1863  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1864  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1865  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1866  IFX_INLINE void IfxAsclin_enableRxHeaderEndFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1867  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1868      asclin->FLAGSENABLE.B.RHE = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1869  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1870  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1871  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1872  IFX_INLINE void IfxAsclin_enableRxResponseEndFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1873  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1874      asclin->FLAGSENABLE.B.RRE = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1875  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1876  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1877  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1878  IFX_INLINE void IfxAsclin_enableTransmissionCompletedFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1879  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1880      asclin->FLAGSENABLE.B.TCE = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1881  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1882  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1883  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1884  IFX_INLINE void IfxAsclin_enableTxFifoFillLevelFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1885  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1886      asclin->FLAGSENABLE.B.TFLE = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1887  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1888  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1889  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1890  IFX_INLINE void IfxAsclin_enableTxFifoOutlet(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1891  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1892      asclin->TXFIFOCON.B.ENO = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1893  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1894  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1895  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1896  IFX_INLINE void IfxAsclin_enableTxFifoOverflowFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1897  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1898      asclin->FLAGSENABLE.B.TFOE = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1899  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1900  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1901  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1902  IFX_INLINE void IfxAsclin_enableTxHeaderEndFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1903  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1904      asclin->FLAGSENABLE.B.THE = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1905  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1906  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1907  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1908  IFX_INLINE void IfxAsclin_enableTxResponseEndFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1909  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1910      asclin->FLAGSENABLE.B.TRE = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1911  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1912  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1913  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1914  IFX_INLINE void IfxAsclin_flushRxFifo(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1915  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1916      asclin->RXFIFOCON.B.FLUSH = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1917  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1918  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1919  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1920  IFX_INLINE void IfxAsclin_flushTxFifo(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1921  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1922      asclin->TXFIFOCON.B.FLUSH = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1923  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1924  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1925  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1926  IFX_INLINE boolean IfxAsclin_getBreakDetectedFlagStatus(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1927  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1928      return asclin->FLAGS.B.BD;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1929  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1930  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1931  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1932  IFX_INLINE uint8 IfxAsclin_getClockSource(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1933  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1934      return asclin->CSR.B.CLKSEL;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1935  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1936  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1937  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1938  IFX_INLINE boolean IfxAsclin_getClockStatus(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1939  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1940      return asclin->CSR.B.CON;
	ld.bu	d15,[a4]79
.L426:
	jnz.t	d15:7,.L53
.L669:

; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	   367  kStatus(asclin) != 1U)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	   368          {}
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	   369      }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	   370  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	   371  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	   372  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	   373  uint32 IfxAsclin_write16(Ifx_ASCLIN *asclin, uint16 *data, uint32 count)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	   374  {
	ret
.L52:
.L55:

; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	     1  /**
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	     2   * \file IfxAsclin.h
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	     3   * \brief ASCLIN  basic functionality
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	     4   * \ingroup IfxLld_Asclin
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	     5   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	     6   * \version iLLD_1_0_1_11_0
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	     7   * \copyright Copyright (c) 2018 Infineon Technologies AG. All rights reserved.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	     8   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	     9   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    10   *                                 IMPORTANT NOTICE
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    11   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    12   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    13   * Use of this file is subject to the terms of use agreed between (i) you or 
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    14   * the company in which ordinary course of business you are acting and (ii) 
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    15   * Infineon Technologies AG or its licensees. If and as long as no such 
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    16   * terms of use are agreed, use of this file is subject to following:
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    17  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    18  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    19   * Boost Software License - Version 1.0 - August 17th, 2003
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    20  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    21   * Permission is hereby granted, free of charge, to any person or 
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    22   * organization obtaining a copy of the software and accompanying 
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    23   * documentation covered by this license (the "Software") to use, reproduce,
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    24   * display, distribute, execute, and transmit the Software, and to prepare
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    25   * derivative works of the Software, and to permit third-parties to whom the 
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    26   * Software is furnished to do so, all subject to the following:
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    27  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    28   * The copyright notices in the Software and this entire statement, including
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    29   * the above license grant, this restriction and the following disclaimer, must
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    30   * be included in all copies of the Software, in whole or in part, and all
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    31   * derivative works of the Software, unless such copies or derivative works are
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    32   * solely in the form of machine-executable object code generated by a source
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    33   * language processor.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    34  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    35   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR 
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    36   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    37   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    38   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE 
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    39   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    40   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    41   * DEALINGS IN THE SOFTWARE.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    42  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    43   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    44   * \defgroup IfxLld_Asclin_Std_Enumerations Enumerations
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    45   * \ingroup IfxLld_Asclin_Std
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    46   * \defgroup IfxLld_Asclin_Std_Operative Operative Functions
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    47   * \ingroup IfxLld_Asclin_Std
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    48   * \defgroup IfxLld_Asclin_Std_Utility Utility Functions
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    49   * \ingroup IfxLld_Asclin_Std
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    50   * \defgroup IfxLld_Asclin_Std_Configuration Configuration Functions
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    51   * \ingroup IfxLld_Asclin_Std
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    52   * \defgroup IfxLld_Asclin_Std_External External Functions
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    53   * \ingroup IfxLld_Asclin_Std
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    54   * \defgroup IfxLld_Asclin_Std_IO IO Pin Configuration Functions
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    55   * \ingroup IfxLld_Asclin_Std
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    56   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    57  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    58  #ifndef IFXASCLIN_H
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    59  #define IFXASCLIN_H 1
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    60  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    61  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    62  /*----------------------------------Includes----------------------------------*/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    63  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    64  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    65  #include "_Impl/IfxAsclin_cfg.h"
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    66  #include "Scu/Std/IfxScuCcu.h"
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    67  #include "Scu/Std/IfxScuWdt.h"
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    68  #include "Cpu/Std/IfxCpu_Intrinsics.h"
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    69  #include "IfxAsclin_reg.h"
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    70  #include "Src/Std/IfxSrc.h"
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    71  #include "_PinMap/IfxAsclin_PinMap.h"
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    72  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    73  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    74  /*--------------------------------Enumerations--------------------------------*/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    75  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    76  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    77  /** \addtogroup IfxLld_Asclin_Std_Enumerations
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    78   * \{ */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    79  /** \brief Defines if the classic or the enhanced checksum will be calculated by the checksum block.\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    80   * Definition in Ifx_ASCLIN.DATCON.B.CSM
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    81   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    82  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    83  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    84      IfxAsclin_Checksum_classic  = 0, /**< \brief classic checksum */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    85      IfxAsclin_Checksum_enhanced = 1  /**< \brief enhanced checksum */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    86  } IfxAsclin_Checksum;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    87  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    88  /** \brief Defines if the received checksum byte is written into the RXFifo or not.\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    89   * Definition in Ifx_ASCLIN.LIN.CON.B.CSI
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    90   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    91  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    92  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    93      IfxAsclin_ChecksumInjection_notWritten = 0,  /**< \brief checksum byte is not written */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    94      IfxAsclin_ChecksumInjection_written    = 1   /**< \brief checksum byte is written */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    95  } IfxAsclin_ChecksumInjection;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    96  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    97  /** \brief CPOL defines the idle level of the clock signal in the SPI mode.\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    98   * Idle level is the level outside the data transmission time intervals.\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	    99   * Definition in Ifx_ASCLIN.IOCR.B.CPOL
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   100   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   101  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   102  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   103      IfxAsclin_ClockPolarity_idleLow  = 0, /**< \brief idle low */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   104      IfxAsclin_ClockPolarity_idleHigh = 1  /**< \brief idle high */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   105  } IfxAsclin_ClockPolarity;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   106  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   107  /** \brief Selection of clock source\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   108   * Definition in Ifx_ASCLIN.CSR.B.CLKSEL
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   109   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   110  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   111  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   112      IfxAsclin_ClockSource_noClock         = 0,  /**< \brief no clock will be supplied */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   113      IfxAsclin_ClockSource_kernelClock     = 1,  /**< \brief f clc will be supplied */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   114      IfxAsclin_ClockSource_oscillatorClock = 2,  /**< \brief XTAL oscillator clock foso0 will be supplied */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   115      IfxAsclin_ClockSource_flexRayClock    = 4,  /**< \brief f eray will be supplied */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   116      IfxAsclin_ClockSource_ascFastClock    = 8,  /**< \brief f asclinf wiil be supplied */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   117      IfxAsclin_ClockSource_ascSlowClock    = 16  /**< \brief f asclins will be supplied */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   118  } IfxAsclin_ClockSource;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   119  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   120  /** \brief CTS input pin selection\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   121   * Definition in Ifx_ASCLIN.IOCR.B.CTS
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   122   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   123  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   124  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   125      IfxAsclin_CtsInputSelect_0,     /**< \brief CTS input pin 0  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   126      IfxAsclin_CtsInputSelect_1,     /**< \brief CTS input pin 1  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   127      IfxAsclin_CtsInputSelect_2,     /**< \brief CTS input pin 2  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   128      IfxAsclin_CtsInputSelect_3      /**< \brief CTS input pin 3  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   129  } IfxAsclin_CtsInputSelect;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   130  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   131  /** \brief Number of bits per transfer\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   132   * Definition in Ifx_ASCLIN.FRAMECON.B.DATALEN
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   133   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   134  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   135  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   136      IfxAsclin_DataLength_1 = 0,      /**< \brief number of bits per transfer 0  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   137      IfxAsclin_DataLength_2,          /**< \brief number of bits per transfer 1  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   138      IfxAsclin_DataLength_3,          /**< \brief number of bits per transfer 2  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   139      IfxAsclin_DataLength_4,          /**< \brief number of bits per transfer 3  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   140      IfxAsclin_DataLength_5,          /**< \brief number of bits per transfer 4  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   141      IfxAsclin_DataLength_6,          /**< \brief number of bits per transfer 5  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   142      IfxAsclin_DataLength_7,          /**< \brief number of bits per transfer 6  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   143      IfxAsclin_DataLength_8,          /**< \brief number of bits per transfer 7  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   144      IfxAsclin_DataLength_9,          /**< \brief number of bits per transfer 8  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   145      IfxAsclin_DataLength_10,         /**< \brief number of bits per transfer 9  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   146      IfxAsclin_DataLength_11,         /**< \brief number of bits per transfer 10  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   147      IfxAsclin_DataLength_12,         /**< \brief number of bits per transfer 11  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   148      IfxAsclin_DataLength_13,         /**< \brief number of bits per transfer 12  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   149      IfxAsclin_DataLength_14,         /**< \brief number of bits per transfer 13  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   150      IfxAsclin_DataLength_15,         /**< \brief number of bits per transfer 14  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   151      IfxAsclin_DataLength_16          /**< \brief number of bits per transfer 15  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   152  } IfxAsclin_DataLength;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   153  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   154  /** \brief Defines the basic operating mode of the module. Changing the mode must be done by switching first to initialize mode, and then to the other mode.\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   155   * Definition in Ifx_ASCLIN.FRAMECON.B.MODE
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   156   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   157  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   158  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   159      IfxAsclin_FrameMode_initialise = 0,  /**< \brief initialise mode */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   160      IfxAsclin_FrameMode_asc        = 1,  /**< \brief asc mode */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   161      IfxAsclin_FrameMode_spi        = 2,  /**< \brief spi mode */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   162      IfxAsclin_FrameMode_lin        = 3   /**< \brief lin mode */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   163  } IfxAsclin_FrameMode;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   164  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   165  /** \brief Defines if LIN frame shall consist of a header and response or of a header only.\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   166   * Definition in Ifx_ASCLIN.DATCON.B.HO
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   167   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   168  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   169  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   170      IfxAsclin_HeaderResponseSelect_headerAndResponse = 0,  /**< \brief header and response expected */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   171      IfxAsclin_HeaderResponseSelect_headerOnly        = 1   /**< \brief header only expected */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   172  } IfxAsclin_HeaderResponseSelect;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   173  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   174  /** \brief Defines the duration of the IDLE delay in bit times.\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   175   * SPI mode: this is the idle time between the frames.\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   176   * ASC and LIN mode: this is the pause inserted between transmission of bytes.\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   177   * Definition in Ifx_ASCLIN.FRAMECON.B.IDLE
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   178   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   179  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   180  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   181      IfxAsclin_IdleDelay_0,     /**< \brief idle delay in 0 bit times  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   182      IfxAsclin_IdleDelay_1,     /**< \brief idle delay in 1 bit times  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   183      IfxAsclin_IdleDelay_2,     /**< \brief idle delay in 2 bit times  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   184      IfxAsclin_IdleDelay_3,     /**< \brief idle delay in 3 bit times  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   185      IfxAsclin_IdleDelay_4,     /**< \brief idle delay in 4 bit times  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   186      IfxAsclin_IdleDelay_5,     /**< \brief idle delay in 5 bit times  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   187      IfxAsclin_IdleDelay_6,     /**< \brief idle delay in 6 bit times  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   188      IfxAsclin_IdleDelay_7      /**< \brief idle delay in 7 bit times  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   189  } IfxAsclin_IdleDelay;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   190  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   191  /** \brief Defines the leading delay in bit times in SPI mode. ASC mode: not applicable.\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   192   * LIN mode: delay between the end of the break and the start of the sync character.\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   193   * Definition in Ifx_ASCLIN.FRAMECON.B.LEAD
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   194   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   195  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   196  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   197      IfxAsclin_LeadDelay_0,     /**< \brief lead delay in 0 bit times  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   198      IfxAsclin_LeadDelay_1,     /**< \brief lead delay in 1 bit times  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   199      IfxAsclin_LeadDelay_2,     /**< \brief lead delay in 2 bit times  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   200      IfxAsclin_LeadDelay_3,     /**< \brief lead delay in 3 bit times  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   201      IfxAsclin_LeadDelay_4,     /**< \brief lead delay in 4 bit times  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   202      IfxAsclin_LeadDelay_5,     /**< \brief lead delay in 5 bit times  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   203      IfxAsclin_LeadDelay_6,     /**< \brief lead delay in 6 bit times  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   204      IfxAsclin_LeadDelay_7      /**< \brief lead delay in 7 bit times  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   205  } IfxAsclin_LeadDelay;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   206  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   207  /** \brief Configures if the module in LIN mode operates as master or slave\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   208   * Definition in Ifx_ASCLIN.LIN.CON.B.MS
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   209   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   210  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   211  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   212      IfxAsclin_LinMode_slave  = 0, /**< \brief operates in slave mode */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   213      IfxAsclin_LinMode_master = 1  /**< \brief operates in master mode */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   214  } IfxAsclin_LinMode;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   215  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   216  /** \brief Defines the timeout threshold of RESPOSE bit is for LIN response timeout or LIN frame timeout.\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   217   * Definition in Ifx_ASCLIN.DATCON.B.RM
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   218   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   219  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   220  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   221      IfxAsclin_LinResponseTimeoutMode_frameTimeout    = 0, /**< \brief timeout threshold is for frame */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   222      IfxAsclin_LinResponseTimeoutMode_responseTimeout = 1  /**< \brief timeout threshold is for reponse */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   223  } IfxAsclin_LinResponseTimeoutMode;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   224  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   225  /** \brief Defines the bit length in ticks in the range of 1 to 16. The lengths of 1 to 3 are not allowed\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   226   * Definition in Ifx_ASCLIN.BITCON.B.OVERSAMPLING
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   227   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   228  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   229  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   230      IfxAsclin_OversamplingFactor_4  = 3,   /**< \brief oversampling factor 4 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   231      IfxAsclin_OversamplingFactor_5  = 4,   /**< \brief oversampling factor 5 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   232      IfxAsclin_OversamplingFactor_6  = 5,   /**< \brief oversampling factor 6 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   233      IfxAsclin_OversamplingFactor_7  = 6,   /**< \brief oversampling factor 7 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   234      IfxAsclin_OversamplingFactor_8  = 7,   /**< \brief oversampling factor 8 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   235      IfxAsclin_OversamplingFactor_9  = 8,   /**< \brief oversampling factor 9 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   236      IfxAsclin_OversamplingFactor_10 = 9,   /**< \brief oversampling factor 10 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   237      IfxAsclin_OversamplingFactor_11 = 10,  /**< \brief oversampling factor 11 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   238      IfxAsclin_OversamplingFactor_12 = 11,  /**< \brief oversampling factor 12 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   239      IfxAsclin_OversamplingFactor_13 = 12,  /**< \brief oversampling factor 13 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   240      IfxAsclin_OversamplingFactor_14 = 13,  /**< \brief oversampling factor 14 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   241      IfxAsclin_OversamplingFactor_15 = 14,  /**< \brief oversampling factor 15 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   242      IfxAsclin_OversamplingFactor_16 = 15   /**< \brief oversampling factor 16 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   243  } IfxAsclin_OversamplingFactor;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   244  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   245  /** \brief Type of parity bit attached to data bits\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   246   * Definition in Ifx_ASCLIN.FRAMECON.B.ODD
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   247   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   248  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   249  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   250      IfxAsclin_ParityType_even = 0,  /**< \brief even parity */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   251      IfxAsclin_ParityType_odd  = 1   /**< \brief odd parity */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   252  } IfxAsclin_ParityType;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   253  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   254  /** \brief Receive buffer mode\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   255   * Definition in Ifx_ASCLIN.RXFIFOCON.B.BUF
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   256   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   257  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   258  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   259      IfxAsclin_ReceiveBufferMode_rxFifo   = 0, /**< \brief RxFIFO mode */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   260      IfxAsclin_ReceiveBufferMode_rxBuffer = 1  /**< \brief single stage Rx buffer */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   261  } IfxAsclin_ReceiveBufferMode;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   262  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   263  /** \brief Polarity of the RTS and CTS signals\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   264   * Definition in Ifx_ASCLIN.IOCR.B.RCPOL
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   265   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   266  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   267  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   268      IfxAsclin_RtsCtsPolarity_activeHigh = 0,  /**< \brief ready/clear are active-high */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   269      IfxAsclin_RtsCtsPolarity_activeLow  = 1   /**< \brief ready/clear are active-low */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   270  } IfxAsclin_RtsCtsPolarity;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   271  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   272  /** \brief Defines the filling level that triggers a drain (RX) interrupt or DMA access\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   273   * Definition in Ifx_ASCLIN.RXFIFOCON.B.INTLEVEL
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   274   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   275  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   276  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   277      IfxAsclin_RxFifoInterruptLevel_1,     /**< \brief RX FIFO level 1  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   278      IfxAsclin_RxFifoInterruptLevel_2,     /**< \brief RX FIFO level 2  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   279      IfxAsclin_RxFifoInterruptLevel_3,     /**< \brief RX FIFO level 3  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   280      IfxAsclin_RxFifoInterruptLevel_4,     /**< \brief RX FIFO level 4  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   281      IfxAsclin_RxFifoInterruptLevel_5,     /**< \brief RX FIFO level 5  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   282      IfxAsclin_RxFifoInterruptLevel_6,     /**< \brief RX FIFO level 6  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   283      IfxAsclin_RxFifoInterruptLevel_7,     /**< \brief RX FIFO level 7  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   284      IfxAsclin_RxFifoInterruptLevel_8,     /**< \brief RX FIFO level 8  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   285      IfxAsclin_RxFifoInterruptLevel_9,     /**< \brief RX FIFO level 9  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   286      IfxAsclin_RxFifoInterruptLevel_10,    /**< \brief RX FIFO level 10  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   287      IfxAsclin_RxFifoInterruptLevel_11,    /**< \brief RX FIFO level 11  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   288      IfxAsclin_RxFifoInterruptLevel_12,    /**< \brief RX FIFO level 12  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   289      IfxAsclin_RxFifoInterruptLevel_13,    /**< \brief RX FIFO level 13  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   290      IfxAsclin_RxFifoInterruptLevel_14,    /**< \brief RX FIFO level 14  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   291      IfxAsclin_RxFifoInterruptLevel_15,    /**< \brief RX FIFO level 15  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   292      IfxAsclin_RxFifoInterruptLevel_16     /**< \brief RX FIFO level 16  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   293  } IfxAsclin_RxFifoInterruptLevel;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   294  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   295  /** \brief Defines the number of bytes read from the Rx FIFO with one FPI bus read\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   296   * Definition in Ifx_ASCLIN.RXFIFOCON.B.OUTW
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   297   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   298  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   299  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   300      IfxAsclin_RxFifoOutletWidth_0,     /**< \brief number of bytes 0  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   301      IfxAsclin_RxFifoOutletWidth_1,     /**< \brief number of bytes 1  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   302      IfxAsclin_RxFifoOutletWidth_2,     /**< \brief number of bytes 2  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   303      IfxAsclin_RxFifoOutletWidth_3      /**< \brief number of bytes 3  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   304  } IfxAsclin_RxFifoOutletWidth;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   305  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   306  /** \brief Alternate input selection for Rx signal.\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   307   * Definition in Ifx_ASCLIN.IOCR.B.ALTI
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   308   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   309  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   310  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   311      IfxAsclin_RxInputSelect_0,     /**< \brief alternate input selection 0  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   312      IfxAsclin_RxInputSelect_1,     /**< \brief alternate input selection 1  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   313      IfxAsclin_RxInputSelect_2,     /**< \brief alternate input selection 2  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   314      IfxAsclin_RxInputSelect_3,     /**< \brief alternate input selection 3  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   315      IfxAsclin_RxInputSelect_4,     /**< \brief alternate input selection 4  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   316      IfxAsclin_RxInputSelect_5,     /**< \brief alternate input selection 5  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   317      IfxAsclin_RxInputSelect_6,     /**< \brief alternate input selection 6  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   318      IfxAsclin_RxInputSelect_7      /**< \brief alternate input selection 7  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   319  } IfxAsclin_RxInputSelect;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   320  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   321  /** \brief Sample point position\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   322   * Definition in Ifx_ASCLIN.BITCON.B.SAMPLEPOINT
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   323   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   324  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   325  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   326      IfxAsclin_SamplePointPosition_1  = 1,   /**< \brief sample point position at 1 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   327      IfxAsclin_SamplePointPosition_2  = 2,   /**< \brief sample point position at 2 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   328      IfxAsclin_SamplePointPosition_3  = 3,   /**< \brief sample point position at 3 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   329      IfxAsclin_SamplePointPosition_4  = 4,   /**< \brief sample point position at 4 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   330      IfxAsclin_SamplePointPosition_5  = 5,   /**< \brief sample point position at 5 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   331      IfxAsclin_SamplePointPosition_6  = 6,   /**< \brief sample point position at 6 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   332      IfxAsclin_SamplePointPosition_7  = 7,   /**< \brief sample point position at 7 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   333      IfxAsclin_SamplePointPosition_8  = 8,   /**< \brief sample point position at 8 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   334      IfxAsclin_SamplePointPosition_9  = 9,   /**< \brief sample point position at 9 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   335      IfxAsclin_SamplePointPosition_10 = 10,  /**< \brief sample point position at 10 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   336      IfxAsclin_SamplePointPosition_11 = 11,  /**< \brief sample point position at 11 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   337      IfxAsclin_SamplePointPosition_12 = 12,  /**< \brief sample point position at 12 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   338      IfxAsclin_SamplePointPosition_13 = 13,  /**< \brief sample point position at 13 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   339      IfxAsclin_SamplePointPosition_14 = 14,  /**< \brief sample point position at 14 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   340      IfxAsclin_SamplePointPosition_15 = 15   /**< \brief sample point position at 15 */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   341  } IfxAsclin_SamplePointPosition;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   342  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   343  /** \brief Number of samples per bit, sample mode/medianfilter\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   344   * Definition in Ifx_ASCLIN.BITCON.B.SM
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   345   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   346  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   347  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   348      IfxAsclin_SamplesPerBit_one   = 0, /**< \brief one sample per bit */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   349      IfxAsclin_SamplesPerBit_three = 1  /**< \brief three samples per bit */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   350  } IfxAsclin_SamplesPerBit;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   351  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   352  /** \brief SPI mode: defines the shift direction of the shift register.\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   353   * ASC and LIN mode: should be set to 0.\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   354   * Definition in Ifx_ASCLIN.FRAMECON.B.MSB
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   355   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   356  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   357  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   358      IfxAsclin_ShiftDirection_lsbFirst = 0,  /**< \brief LSB first */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   359      IfxAsclin_ShiftDirection_msbFirst = 1   /**< \brief MSB first */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   360  } IfxAsclin_ShiftDirection;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   361  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   362  /** \brief Defines the idle level of the SLSO signal, which is the level.\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   363   * Outside the data transmission, leading and trailing time intervals.\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   364   * Definition in Ifx_ASCLIN.IOCR.B.SPOL
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   365   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   366  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   367  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   368      IfxAsclin_SlavePolarity_idleLow  = 0, /**< \brief idle low */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   369      IfxAsclin_SlavePolarity_idlehigh = 1  /**< \brief idle high */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   370  } IfxAsclin_SlavePolarity;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   371  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   372  /** \brief Enable/disable the sensitivity of the module to sleep signal\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   373   * Definition in Ifx_ASCLIN.CLC.B.EDIS
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   374   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   375  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   376  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   377      IfxAsclin_SleepMode_enable  = 0, /**< \brief enables sleep mode */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   378      IfxAsclin_SleepMode_disable = 1  /**< \brief disables sleep mode */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   379  } IfxAsclin_SleepMode;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   380  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   381  /** \brief Error status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   382   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   383  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   384  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   385      IfxAsclin_Status_configurationError = 0,  /**< \brief Configuration error */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   386      IfxAsclin_Status_noError            = 1   /**< \brief No error */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   387  } IfxAsclin_Status;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   388  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   389  /** \brief ASC and LIN mode: number of stop bits (0 is not allowed), SPI mode: trailing delay.\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   390   * Definition in Ifx_ASCLIN.FRAMECON.B.STOP
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   391   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   392  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   393  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   394      IfxAsclin_StopBit_0,     /**< \brief number of stop bits 0  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   395      IfxAsclin_StopBit_1,     /**< \brief number of stop bits 1  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   396      IfxAsclin_StopBit_2,     /**< \brief number of stop bits 2  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   397      IfxAsclin_StopBit_3,     /**< \brief number of stop bits 3  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   398      IfxAsclin_StopBit_4,     /**< \brief number of stop bits 4  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   399      IfxAsclin_StopBit_5,     /**< \brief number of stop bits 5  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   400      IfxAsclin_StopBit_6,     /**< \brief number of stop bits 6  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   401      IfxAsclin_StopBit_7      /**< \brief number of stop bits 7  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   402  } IfxAsclin_StopBit;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   403  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   404  /** \brief OCDS Suspend Control (OCDS.SUS)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   405   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   406  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   407  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   408      IfxAsclin_SuspendMode_none = 0,  /**< \brief No suspend */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   409      IfxAsclin_SuspendMode_hard = 1,  /**< \brief Hard Suspend */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   410      IfxAsclin_SuspendMode_soft = 2   /**< \brief Soft Suspend */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   411  } IfxAsclin_SuspendMode;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   412  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   413  /** \brief Defines the number of bytes written to the Tx FIFO with one FPI bus write\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   414   * Definition in Ifx_ASCLIN.TXFIFOCON.B.INW
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   415   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   416  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   417  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   418      IfxAsclin_TxFifoInletWidth_0,     /**< \brief number of bytes 0  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   419      IfxAsclin_TxFifoInletWidth_1,     /**< \brief number of bytes 1  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   420      IfxAsclin_TxFifoInletWidth_2,     /**< \brief number of bytes 2  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   421      IfxAsclin_TxFifoInletWidth_3      /**< \brief number of bytes 3  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   422  } IfxAsclin_TxFifoInletWidth;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   423  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   424  /** \brief Defines the filling level that triggers a refill (TX) interrupt or DMA access\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   425   * Definition in Ifx_ASCLIN.TXFIFOCON.B.INTLEVEL
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   426   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   427  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   428  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   429      IfxAsclin_TxFifoInterruptLevel_0,     /**< \brief TX FIFO level 0  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   430      IfxAsclin_TxFifoInterruptLevel_1,     /**< \brief TX FIFO level 1  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   431      IfxAsclin_TxFifoInterruptLevel_2,     /**< \brief TX FIFO level 2  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   432      IfxAsclin_TxFifoInterruptLevel_3,     /**< \brief TX FIFO level 3  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   433      IfxAsclin_TxFifoInterruptLevel_4,     /**< \brief TX FIFO level 4  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   434      IfxAsclin_TxFifoInterruptLevel_5,     /**< \brief TX FIFO level 5  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   435      IfxAsclin_TxFifoInterruptLevel_6,     /**< \brief TX FIFO level 6  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   436      IfxAsclin_TxFifoInterruptLevel_7,     /**< \brief TX FIFO level 7  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   437      IfxAsclin_TxFifoInterruptLevel_8,     /**< \brief TX FIFO level 8  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   438      IfxAsclin_TxFifoInterruptLevel_9,     /**< \brief TX FIFO level 9  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   439      IfxAsclin_TxFifoInterruptLevel_10,    /**< \brief TX FIFO level 10  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   440      IfxAsclin_TxFifoInterruptLevel_11,    /**< \brief TX FIFO level 11  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   441      IfxAsclin_TxFifoInterruptLevel_12,    /**< \brief TX FIFO level 12  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   442      IfxAsclin_TxFifoInterruptLevel_13,    /**< \brief TX FIFO level 13  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   443      IfxAsclin_TxFifoInterruptLevel_14,    /**< \brief TX FIFO level 14  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   444      IfxAsclin_TxFifoInterruptLevel_15     /**< \brief TX FIFO level 15  */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   445  } IfxAsclin_TxFifoInterruptLevel;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   446  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   447  /** \} */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   448  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   449  /** \addtogroup IfxLld_Asclin_Std_Operative
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   450   * \{ */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   451  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   452  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   453  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   454  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   455  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   456  /** \brief clears all the flags
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   457   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   458   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   459   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   460  IFX_INLINE void IfxAsclin_clearAllFlags(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   461  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   462  /** \brief Clears the break detected flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   463   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   464   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   465   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   466  IFX_INLINE void IfxAsclin_clearBreakDetectedFlag(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   467  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   468  /** \brief Clears the collision detection error flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   469   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   470   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   471   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   472  IFX_INLINE void IfxAsclin_clearCollisionDetectionErrorFlag(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   473  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   474  /** \brief Clears the falling edge detected flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   475   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   476   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   477   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   478  IFX_INLINE void IfxAsclin_clearFallingEdgeDetectedFlag(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   479  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   480  /** \brief Clears the frame error flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   481   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   482   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   483   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   484  IFX_INLINE void IfxAsclin_clearFrameErrorFlag(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   485  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   486  /** \brief Clears the header timeout flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   487   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   488   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   489   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   490  IFX_INLINE void IfxAsclin_clearHeaderTimeoutFlag(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   491  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   492  /** \brief Clears the kernel reset status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   493   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   494   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   495   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   496  IFX_INLINE void IfxAsclin_clearKernelResetStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   497  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   498  /** \brief Clears the auto baudrate detection error flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   499   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   500   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   501   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   502  IFX_INLINE void IfxAsclin_clearLinAutoBaudDetectionErrorFlag(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   503  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   504  /** \brief Clears the LIN checksum error flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   505   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   506   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   507   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   508  IFX_INLINE void IfxAsclin_clearLinChecksumErrorFlag(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   509  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   510  /** \brief Clears the LIN parity error flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   511   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   512   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   513   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   514  IFX_INLINE void IfxAsclin_clearLinParityErrorFlag(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   515  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   516  /** \brief Clears the parity error flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   517   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   518   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   519   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   520  IFX_INLINE void IfxAsclin_clearParityErrorFlag(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   521  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   522  /** \brief Clears the raising edge detected flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   523   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   524   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   525   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   526  IFX_INLINE void IfxAsclin_clearRaisingEdgeDetectedFlag(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   527  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   528  /** \brief Clears the response timeout flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   529   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   530   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   531   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   532  IFX_INLINE void IfxAsclin_clearResponseTimeoutFlag(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   533  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   534  /** \brief Clears the Rx FIFO level flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   535   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   536   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   537   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   538  IFX_INLINE void IfxAsclin_clearRxFifoFillLevelFlag(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   539  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   540  /** \brief Clears the Rx FIFO overflow flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   541   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   542   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   543   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   544  IFX_INLINE void IfxAsclin_clearRxFifoOverflowFlag(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   545  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   546  /** \brief Clears the Rx FIFO underflow flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   547   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   548   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   549   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   550  IFX_INLINE void IfxAsclin_clearRxFifoUnderflowFlag(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   551  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   552  /** \brief Clears the receive header end flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   553   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   554   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   555   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   556  IFX_INLINE void IfxAsclin_clearRxHeaderEndFlag(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   557  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   558  /** \brief Clears the receive response end flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   559   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   560   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   561   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   562  IFX_INLINE void IfxAsclin_clearRxResponseEndFlag(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   563  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   564  /** \brief Clears the transmission pending flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   565   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   566   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   567   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   568  IFX_INLINE void IfxAsclin_clearTransmissionCompletedFlag(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   569  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   570  /** \brief Clears the Tx FIFO level flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   571   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   572   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   573   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   574  IFX_INLINE void IfxAsclin_clearTxFifoFillLevelFlag(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   575  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   576  /** \brief Clears the Tx FIFO overflow flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   577   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   578   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   579   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   580  IFX_INLINE void IfxAsclin_clearTxFifoOverflowFlag(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   581  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   582  /** \brief Clears the transmit header end flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   583   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   584   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   585   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   586  IFX_INLINE void IfxAsclin_clearTxHeaderEndFlag(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   587  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   588  /** \brief Clears the transmit response end flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   589   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   590   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   591   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   592  IFX_INLINE void IfxAsclin_clearTxResponseEndFlag(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   593  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   594  /** \brief Flushes (empties) the Rx FIFO
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   595   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   596   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   597   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   598  IFX_INLINE void IfxAsclin_flushRxFifo(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   599  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   600  /** \brief Flushes (empties) the Tx FIFO
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   601   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   602   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   603   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   604  IFX_INLINE void IfxAsclin_flushTxFifo(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   605  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   606  /** \brief Sets the baudrate detection's lower limit
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   607   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   608   * \param limit value of the lower limit
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   609   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   610   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   611  IFX_INLINE void IfxAsclin_setBrdLowerlimt(Ifx_ASCLIN *asclin, uint8 limit);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   612  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   613  /** \brief Sets the baudrate detection's upper limit
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   614   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   615   * \param limit value of the upper limit
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   616   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   617   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   618  IFX_INLINE void IfxAsclin_setBrdUpperlimt(Ifx_ASCLIN *asclin, uint8 limit);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   619  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   620  /** \brief Sets the checksum injection
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   621   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   622   * \param csi checksum injection selection (not written / written)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   623   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   624   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   625  IFX_INLINE void IfxAsclin_setChecksumInjection(Ifx_ASCLIN *asclin, IfxAsclin_ChecksumInjection csi);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   626  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   627  /** \brief Sets the checksum mode
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   628   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   629   * \param mode checksum mode selection (classic / enhanced)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   630   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   631   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   632  IFX_INLINE void IfxAsclin_setChecksumMode(Ifx_ASCLIN *asclin, IfxAsclin_Checksum mode);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   633  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   634  /** \brief Sets the data length (number of bits per transfer)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   635   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   636   * \param length data length selection
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   637   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   638   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   639  IFX_INLINE void IfxAsclin_setDataLength(Ifx_ASCLIN *asclin, IfxAsclin_DataLength length);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   640  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   641  /** \brief Sets the denominator of the fractional divider
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   642   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   643   * \param denominator value of the denominator
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   644   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   645   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   646  IFX_INLINE void IfxAsclin_setDenominator(Ifx_ASCLIN *asclin, uint16 denominator);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   647  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   648  /** \brief Sets the disable module request
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   649   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   650   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   651   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   652  IFX_INLINE void IfxAsclin_setDisableModuleRequest(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   653  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   654  /** \brief Sets the enable module request
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   655   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   656   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   657   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   658  IFX_INLINE void IfxAsclin_setEnableModuleRequest(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   659  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   660  /** \brief Sets digital glitch filter depth
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   661   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   662   * \param depth digital glitch filter depth selection (1 to 63)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   663   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   664   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   665  IFX_INLINE void IfxAsclin_setFilterDepth(Ifx_ASCLIN *asclin, uint8 depth);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   666  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   667  /** \brief Sets the header response selection
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   668   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   669   * \param type type of selection (header and response or header only)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   670   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   671   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   672  IFX_INLINE void IfxAsclin_setHeaderResponseSelect(Ifx_ASCLIN *asclin, IfxAsclin_HeaderResponseSelect type);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   673  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   674  /** \brief Sets the idle delay
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   675   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   676   * \param delay idle delay selection
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   677   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   678   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   679  IFX_INLINE void IfxAsclin_setIdleDelay(Ifx_ASCLIN *asclin, IfxAsclin_IdleDelay delay);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   680  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   681  /** \brief Sets the kernal reset of the KRST1
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   682   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   683   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   684   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   685  IFX_INLINE void IfxAsclin_setKernelResetOne(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   686  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   687  /** \brief Sets the kernel reset of the KRST0
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   688   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   689   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   690   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   691  IFX_INLINE void IfxAsclin_setKernelResetZero(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   692  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   693  /** \brief Sets the lead delay
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   694   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   695   * \param delay lead delay selection
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   696   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   697   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   698  IFX_INLINE void IfxAsclin_setLeadDelay(Ifx_ASCLIN *asclin, IfxAsclin_LeadDelay delay);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   699  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   700  /** \brief Sets the LIN break length
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   701   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   702   * \param length value of the break length
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   703   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   704   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   705  IFX_INLINE void IfxAsclin_setLinBreakLength(Ifx_ASCLIN *asclin, uint8 length);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   706  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   707  /** \brief Sets the LIN header timeout
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   708   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   709   * \param timeout value of the header timeout
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   710   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   711   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   712  IFX_INLINE void IfxAsclin_setLinHeaderTimeout(Ifx_ASCLIN *asclin, uint8 timeout);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   713  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   714  /** \brief Sets the LIN mode of operation
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   715   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   716   * \param mode mode selection (slave / master)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   717   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   718   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   719  IFX_INLINE void IfxAsclin_setLinMode(Ifx_ASCLIN *asclin, IfxAsclin_LinMode mode);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   720  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   721  /** \brief Sets the LIN response timeout mode
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   722   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   723   * \param mode LIN response timeout mode selection
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   724   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   725   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   726  IFX_INLINE void IfxAsclin_setLinResponseTimeoutMode(Ifx_ASCLIN *asclin, IfxAsclin_LinResponseTimeoutMode mode);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   727  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   728  /** \brief Sets the LIN response timeout threshold
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   729   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   730   * \param threshold value of the tomeout threshold (1 to 256 bit times)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   731   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   732   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   733  IFX_INLINE void IfxAsclin_setLinResponseTimeoutThreshold(Ifx_ASCLIN *asclin, uint16 threshold);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   734  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   735  /** \brief Sets the numerator of the fractional divider
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   736   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   737   * \param numerator value of the numerator
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   738   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   739   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   740  IFX_INLINE void IfxAsclin_setNumerator(Ifx_ASCLIN *asclin, uint16 numerator);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   741  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   742  /** \brief Sets the division ratio of the baudrate post divider
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   743   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   744   * \param ovsFactor value of oversampling factor
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   745   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   746   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   747  IFX_INLINE void IfxAsclin_setOversampling(Ifx_ASCLIN *asclin, IfxAsclin_OversamplingFactor ovsFactor);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   748  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   749  /** \brief Sets the parity type
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   750   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   751   * \param type parity type selction (even / odd)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   752   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   753   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   754  IFX_INLINE void IfxAsclin_setParityType(Ifx_ASCLIN *asclin, IfxAsclin_ParityType type);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   755  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   756  /** \brief Sets the division ratio of the predivider (prescaler)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   757   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   758   * \param prescaler value of prescaler
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   759   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   760   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   761  IFX_INLINE void IfxAsclin_setPrescaler(Ifx_ASCLIN *asclin, uint16 prescaler);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   762  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   763  /** \brief Sets the receive buffer mode
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   764   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   765   * \param mode receive buffer mode selection (Rx FIFO or single stage Rx buffer)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   766   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   767   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   768  IFX_INLINE void IfxAsclin_setRxBufferMode(Ifx_ASCLIN *asclin, IfxAsclin_ReceiveBufferMode mode);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   769  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   770  /** \brief Sets the Tx FIFO interrupt level
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   771   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   772   * \param level interrupt level selection
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   773   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   774   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   775  IFX_INLINE void IfxAsclin_setRxFifoInterruptLevel(Ifx_ASCLIN *asclin, IfxAsclin_RxFifoInterruptLevel level);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   776  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   777  /** \brief Sets the receive FIFO outlet width
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   778   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   779   * \param width number of bytes read to the Rx FIFO with one FPI bus read
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   780   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   781   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   782  IFX_INLINE void IfxAsclin_setRxFifoOutletWidth(Ifx_ASCLIN *asclin, IfxAsclin_RxFifoOutletWidth width);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   783  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   784  /** \brief Sets the sample mode (number of samples per bit / median filter)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   785   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   786   * \param medianFilter value of the median filter
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   787   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   788   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   789  IFX_INLINE void IfxAsclin_setSampleMode(Ifx_ASCLIN *asclin, IfxAsclin_SamplesPerBit medianFilter);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   790  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   791  /** \brief Sets the sampling point position
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   792   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   793   * \param spPosition sample point position selection
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   794   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   795   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   796  IFX_INLINE void IfxAsclin_setSamplePointPosition(Ifx_ASCLIN *asclin, IfxAsclin_SamplePointPosition spPosition);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   797  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   798  /** \brief Sets the shift direction
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   799   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   800   * \param dir shift direction selection (LSB / MSB first)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   801   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   802   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   803  IFX_INLINE void IfxAsclin_setShiftDirection(Ifx_ASCLIN *asclin, IfxAsclin_ShiftDirection dir);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   804  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   805  /** \brief Sets the number of stop bits
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   806   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   807   * \param stopBit number of stop bits selection
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   808   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   809   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   810  IFX_INLINE void IfxAsclin_setStopBit(Ifx_ASCLIN *asclin, IfxAsclin_StopBit stopBit);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   811  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   812  /** \brief Sets the transmit header request flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   813   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   814   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   815   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   816  IFX_INLINE void IfxAsclin_setTransmitHeaderRequestFlag(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   817  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   818  /** \brief Sets the transmit response request flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   819   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   820   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   821   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   822  IFX_INLINE void IfxAsclin_setTransmitResponseRequestFlag(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   823  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   824  /** \brief Sets the transmission wake request flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   825   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   826   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   827   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   828  IFX_INLINE void IfxAsclin_setTransmitWakeRequestFlag(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   829  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   830  /** \brief Sets the transmit FIFO inlet width
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   831   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   832   * \param width number of bytes written to the Tx FIFO with one FPI bus write
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   833   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   834   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   835  IFX_INLINE void IfxAsclin_setTxFifoInletWidth(Ifx_ASCLIN *asclin, IfxAsclin_TxFifoInletWidth width);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   836  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   837  /** \brief Sets the Tx FIFO interrupt level
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   838   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   839   * \param level interrupt level selection
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   840   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   841   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   842  IFX_INLINE void IfxAsclin_setTxFifoInterruptLevel(Ifx_ASCLIN *asclin, IfxAsclin_TxFifoInterruptLevel level);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   843  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   844  /** \} */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   845  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   846  /** \addtogroup IfxLld_Asclin_Std_Utility
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   847   * \{ */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   848  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   849  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   850  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   851  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   852  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   853  /** \brief Returns the break detected flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   854   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   855   * \return break detected flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   856   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   857  IFX_INLINE boolean IfxAsclin_getBreakDetectedFlagStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   858  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   859  /** \brief Returns the clock source
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   860   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   861   * \return clock source
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   862   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   863  IFX_INLINE uint8 IfxAsclin_getClockSource(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   864  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   865  /** \brief Returns the clock status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   866   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   867   * \return clock status (off / on)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   868   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   869  IFX_INLINE boolean IfxAsclin_getClockStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   870  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   871  /** \brief Returns the collision detection error flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   872   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   873   * \return collision detection error flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   874   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   875  IFX_INLINE boolean IfxAsclin_getCollisionDetectionErrorFlagStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   876  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   877  /** \brief Returns  the falling edge detected flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   878   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   879   * \return falling edge detected flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   880   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   881  IFX_INLINE boolean IfxAsclin_getFallingEdgeDetectedFlagStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   882  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   883  /** \brief Returns the frame error flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   884   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   885   * \return frame error flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   886   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   887  IFX_INLINE boolean IfxAsclin_getFrameErrorFlagStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   888  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   889  /** \brief Returns the header timeout flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   890   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   891   * \return header timeout flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   892   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   893  IFX_INLINE boolean IfxAsclin_getHeaderTimeoutFlagStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   894  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   895  /** \brief Returns the kernel reset status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   896   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   897   * \return kernel reset status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   898   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   899  IFX_INLINE boolean IfxAsclin_getKernelResetStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   900  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   901  /** \brief Returns the LIN auto baudrate detection error flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   902   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   903   * \return LIN auto baudrate detection error flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   904   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   905  IFX_INLINE boolean IfxAsclin_getLinAutoBaudDetectionErrorFlagStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   906  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   907  /** \brief Returns the LIN checksum error flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   908   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   909   * \return LIN checksum error flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   910   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   911  IFX_INLINE boolean IfxAsclin_getLinChecksumErrorFlagStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   912  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   913  /** \brief Returns the LIN parity error flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   914   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   915   * \return LIN parity error flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   916   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   917  IFX_INLINE boolean IfxAsclin_getLinParityErrorFlagStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   918  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   919  /** \brief Returns the module status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   920   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   921   * \return module status (enabled / disabled)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   922   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   923  IFX_INLINE boolean IfxAsclin_getModuleStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   924  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   925  /** \brief Returns the parity error flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   926   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   927   * \return parity error flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   928   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   929  IFX_INLINE boolean IfxAsclin_getParityErrorFlagStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   930  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   931  /** \brief Returns the division ratio of the predivider (prescaler)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   932   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   933   * \return value of prescaler
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   934   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   935  IFX_INLINE uint16 IfxAsclin_getPrescaler(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   936  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   937  /** \brief Returns the raising edge detected flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   938   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   939   * \return raising edge detected flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   940   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   941  IFX_INLINE boolean IfxAsclin_getRaisingEdgeDetectedFlagStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   942  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   943  /** \brief Returns the received signal status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   944   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   945   * \return received signal status (0 is low & 1 is high)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   946   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   947  IFX_INLINE boolean IfxAsclin_getReceiveSignalStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   948  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   949  /** \brief Returns the response timeout flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   950   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   951   * \return response timeout flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   952   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   953  IFX_INLINE boolean IfxAsclin_getResponseTimeoutFlagStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   954  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   955  /** \brief Returns the current filling level of Tx FIFO
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   956   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   957   * \return current filling level of Rx FIFO
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   958   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   959  IFX_INLINE uint8 IfxAsclin_getRxFifoFillLevel(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   960  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   961  /** \brief Returns the Rx FIFO level flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   962   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   963   * \return Rx FIFO level flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   964   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   965  IFX_INLINE boolean IfxAsclin_getRxFifoFillLevelFlagStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   966  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   967  /** \brief Returns the receive FIFO inlet width
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   968   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   969   * \return number of bytes read to the Rx FIFO with one FPI bus read
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   970   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   971  IFX_INLINE uint8 IfxAsclin_getRxFifoOutletWidth(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   972  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   973  /** \brief Returns the Rx FIFO overflow flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   974   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   975   * \return Rx FIFO overflow flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   976   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   977  IFX_INLINE boolean IfxAsclin_getRxFifoOverflowFlagStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   978  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   979  /** \brief Returns the Rx FIFO underflow flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   980   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   981   * \return Rx FIFO underflow flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   982   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   983  IFX_INLINE boolean IfxAsclin_getRxFifoUnderflowFlagStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   984  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   985  /** \brief Returns the receive header end flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   986   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   987   * \return receive header end flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   988   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   989  IFX_INLINE boolean IfxAsclin_getRxHeaderEndFlagStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   990  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   991  /** \brief Returns the receive response end flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   992   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   993   * \return receive response end flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   994   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   995  IFX_INLINE boolean IfxAsclin_getRxResponseEndFlagStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   996  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   997  /** \brief Returns the transmission pending flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   998   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	   999   * \return transmission pending flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1000   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1001  IFX_INLINE boolean IfxAsclin_getTransmissionCompletedFlagStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1002  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1003  /** \brief Returns the transmit signal status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1004   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1005   * \return transmit signal status (0 is low & 1 is high)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1006   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1007  IFX_INLINE boolean IfxAsclin_getTransmitSignalStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1008  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1009  /** \brief Returns the current filling level of Tx FIFO
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1010   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1011   * \return current filling level of Tx FIFO
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1012   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1013  IFX_INLINE uint8 IfxAsclin_getTxFifoFillLevel(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1014  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1015  /** \brief Returns the Tx FIFO level flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1016   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1017   * \return Tx FIFO level flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1018   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1019  IFX_INLINE boolean IfxAsclin_getTxFifoFillLevelFlagStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1020  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1021  /** \brief Returns the transmit FIFO inlet width
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1022   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1023   * \return number of bytes written to the Tx FIFO with one FPI bus write
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1024   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1025  IFX_INLINE uint8 IfxAsclin_getTxFifoInletWidth(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1026  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1027  /** \brief Returns the Tx FIFO overflow flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1028   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1029   * \return Tx FIFO overflow flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1030   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1031  IFX_INLINE boolean IfxAsclin_getTxFifoOverflowFlagStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1032  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1033  /** \brief Returns the transmit header end flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1034   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1035   * \return transmit header end flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1036   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1037  IFX_INLINE boolean IfxAsclin_getTxHeaderEndFlagStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1038  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1039  /** \brief Returns the transmit response end flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1040   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1041   * \return transmit response end flag status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1042   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1043  IFX_INLINE boolean IfxAsclin_getTxResponseEndFlagStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1044  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1045  /** \brief Sets the sensitivity of the module to sleep signal
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1046   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1047   * \param mode mode selection (enable / disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1048   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1049   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1050  IFX_INLINE void IfxAsclin_setSleepMode(Ifx_ASCLIN *asclin, IfxAsclin_SleepMode mode);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1051  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1052  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1053  /*-------------------------Global Function Prototypes-------------------------*/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1054  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1055  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1056  /** \brief API to get the address for ASCLIN HW module register memory map
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1057   * \param asclin Resource index of the ASCLIN
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1058   * \return ASCLIN module register address
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1059   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1060  IFX_EXTERN Ifx_ASCLIN *IfxAsclin_getAddress(IfxAsclin_Index asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1061  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1062  /** \brief Returns the ASCLIN module FA frequency in Hz
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1063   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1064   * \return Returns the ASCLIN module FA frequency in Hz
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1065   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1066  IFX_EXTERN float32 IfxAsclin_getFaFrequency(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1067  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1068  /** \brief API to get the resource index of the ASCLIN specified.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1069   * \return asclin resource index
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1070   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1071  IFX_EXTERN IfxAsclin_Index IfxAsclin_getIndex(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1072  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1073  /** \brief Returns the OVS frequency
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1074   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1075   * \return Returns the ASCLIN module OVS frequency in Hz
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1076   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1077  IFX_EXTERN float32 IfxAsclin_getOvsFrequency(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1078  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1079  /** \brief Returns the PD frequency
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1080   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1081   * \return Returns the ASCLIN module PD frequency in Hz
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1082   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1083  IFX_EXTERN float32 IfxAsclin_getPdFrequency(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1084  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1085  /** \brief Returns the SHIFT frequency
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1086   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1087   * \return Returns the ASCLIN module SHIFT frequency in Hz
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1088   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1089  IFX_EXTERN float32 IfxAsclin_getShiftFrequency(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1090  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1091  /** \brief resets Asclin kernel
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1092   * \param asclin pointer to ASCLIN resgisters
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1093   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1094   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1095  IFX_EXTERN void IfxAsclin_resetModule(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1096  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1097  /** \} */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1098  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1099  /** \addtogroup IfxLld_Asclin_Std_Configuration
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1100   * \{ */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1101  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1102  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1103  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1104  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1105  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1106  /** \brief disables all flags
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1107   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1108   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1109   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1110  IFX_INLINE void IfxAsclin_disableAllFlags(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1111  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1112  /** \brief Enables/disables the auto baudrate detection
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1113   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1114   * \param enable choice (enable / disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1115   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1116   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1117  IFX_INLINE void IfxAsclin_enableAutoBaudrateDetection(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1118  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1119  /** \brief Enables/disables break detected flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1120   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1121   * \param enable choice (enable / disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1122   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1123   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1124  IFX_INLINE void IfxAsclin_enableBreakDetectedFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1125  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1126  /** \brief Enables/disables the collision detection
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1127   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1128   * \param enable choice (enable/disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1129   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1130   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1131  IFX_INLINE void IfxAsclin_enableCollisionDetection(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1132  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1133  /** \brief Enables/disables LIN collision detection error flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1134   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1135   * \param enable choice (enable / disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1136   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1137   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1138  IFX_INLINE void IfxAsclin_enableCollisionDetectionErrorFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1139  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1140  /** \brief Enables/disables CTS
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1141   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1142   * \param enable choice (enable/disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1143   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1144   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1145  IFX_INLINE void IfxAsclin_enableCts(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1146  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1147  /** \brief Enables/disables falling edge detected flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1148   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1149   * \param enable choice (enable / disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1150   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1151   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1152  IFX_INLINE void IfxAsclin_enableFallingEdgeDetectedFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1153  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1154  /** \brief Enables/disables frame error flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1155   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1156   * \param enable choice (enable / disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1157   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1158   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1159  IFX_INLINE void IfxAsclin_enableFrameErrorFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1160  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1161  /** \brief Enables/disables the hardware checksum
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1162   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1163   * \param enable choice (enable / disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1164   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1165   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1166  IFX_INLINE void IfxAsclin_enableHardwareChecksum(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1167  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1168  /** \brief Enables/disables header timeout flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1169   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1170   * \param enable choice (enable / disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1171   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1172   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1173  IFX_INLINE void IfxAsclin_enableHeaderTimeoutFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1174  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1175  /** \brief Enables/disables LIN auto baudrate detection error flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1176   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1177   * \param enable choice (enable / disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1178   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1179   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1180  IFX_INLINE void IfxAsclin_enableLinAutoBaudDetectionErrorFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1181  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1182  /** \brief Enables/disables LIN checksum error flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1183   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1184   * \param enable choice (enable / disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1185   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1186   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1187  IFX_INLINE void IfxAsclin_enableLinChecksumErrorFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1188  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1189  /** \brief Enables/disables LIN parity error flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1190   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1191   * \param enable choice (enable / disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1192   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1193   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1194  IFX_INLINE void IfxAsclin_enableLinParityErrorFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1195  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1196  /** \brief Enables/disables the loop back mode
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1197   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1198   * \param enable choice (enable/disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1199   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1200   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1201  IFX_INLINE void IfxAsclin_enableLoopBackMode(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1202  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1203  /** \brief Enables/disables the parity bit attachment to tha data bits
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1204   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1205   * \param enable choice (enable/disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1206   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1207   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1208  IFX_INLINE void IfxAsclin_enableParity(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1209  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1210  /** \brief Enables/disables parity error flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1211   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1212   * \param enable choice (enable / disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1213   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1214   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1215  IFX_INLINE void IfxAsclin_enableParityErrorFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1216  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1217  /** \brief Enables/disables raising edge detected flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1218   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1219   * \param enable choice (enable / disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1220   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1221   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1222  IFX_INLINE void IfxAsclin_enableRaisingEdgeDetectedFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1223  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1224  /** \brief Enables/disables response timeout flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1225   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1226   * \param enable choice (enable / disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1227   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1228   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1229  IFX_INLINE void IfxAsclin_enableResponseTimeoutFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1230  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1231  /** \brief Enables/disables Rx FIFO level flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1232   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1233   * \param enable choice (enable / disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1234   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1235   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1236  IFX_INLINE void IfxAsclin_enableRxFifoFillLevelFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1237  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1238  /** \brief Enables/disables the receive FIFO outlet to allow filling of Rx FIFO through shift register
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1239   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1240   * \param enable choice (enable/disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1241   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1242   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1243  IFX_INLINE void IfxAsclin_enableRxFifoInlet(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1244  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1245  /** \brief Enables/disables Rx FIFO overflow flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1246   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1247   * \param enable choice (enable / disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1248   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1249   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1250  IFX_INLINE void IfxAsclin_enableRxFifoOverflowFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1251  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1252  /** \brief Enables/disables Rx FIFO underflow flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1253   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1254   * \param enable choice (enable / disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1255   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1256   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1257  IFX_INLINE void IfxAsclin_enableRxFifoUnderflowFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1258  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1259  /** \brief Enables/disables receive header end flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1260   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1261   * \param enable choice (enable / disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1262   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1263   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1264  IFX_INLINE void IfxAsclin_enableRxHeaderEndFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1265  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1266  /** \brief Enables/disables receive response end flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1267   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1268   * \param enable choice (enable / disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1269   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1270   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1271  IFX_INLINE void IfxAsclin_enableRxResponseEndFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1272  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1273  /** \brief Enables/disables transmission completed flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1274   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1275   * \param enable choice (enable / disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1276   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1277   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1278  IFX_INLINE void IfxAsclin_enableTransmissionCompletedFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1279  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1280  /** \brief Enables/disables Tx FIFO level flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1281   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1282   * \param enable choice (enable / disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1283   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1284   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1285  IFX_INLINE void IfxAsclin_enableTxFifoFillLevelFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1286  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1287  /** \brief Enables/disables the transmit FIFO outlet to allow transmission
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1288   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1289   * \param enable choice (enable/disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1290   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1291   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1292  IFX_INLINE void IfxAsclin_enableTxFifoOutlet(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1293  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1294  /** \brief Enables/disables Tx FIFO overflow flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1295   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1296   * \param enable choice (enable / disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1297   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1298   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1299  IFX_INLINE void IfxAsclin_enableTxFifoOverflowFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1300  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1301  /** \brief Enables/disables transmit header end flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1302   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1303   * \param enable choice (enable / disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1304   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1305   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1306  IFX_INLINE void IfxAsclin_enableTxHeaderEndFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1307  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1308  /** \brief Enables/disables transmit response end flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1309   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1310   * \param enable choice (enable / disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1311   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1312   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1313  IFX_INLINE void IfxAsclin_enableTxResponseEndFlag(Ifx_ASCLIN *asclin, boolean enable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1314  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1315  /** \brief Returns the module's suspend state.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1316   * TRUE :if module is suspended.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1317   * FALSE:if module is not yet suspended.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1318   * \param asclin Pointer to ASCLIN module registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1319   * \return Suspend status (TRUE / FALSE)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1320   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1321  IFX_INLINE boolean IfxAsclin_isModuleSuspended(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1322  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1323  /** \brief Selects the clock polarity
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1324   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1325   * \param cpol CPOL selection
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1326   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1327   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1328  IFX_INLINE void IfxAsclin_setClockPolarity(Ifx_ASCLIN *asclin, IfxAsclin_ClockPolarity cpol);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1329  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1330  /** \brief Selects the CTS input pin
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1331   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1332   * \param ctsi CTS input pin selection
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1333   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1334   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1335  IFX_INLINE void IfxAsclin_setCtsInput(Ifx_ASCLIN *asclin, IfxAsclin_CtsInputSelect ctsi);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1336  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1337  /** \brief Selects the module's mode of operation
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1338   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1339   * \param mode mode selction
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1340   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1341   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1342  IFX_INLINE void IfxAsclin_setFrameMode(Ifx_ASCLIN *asclin, IfxAsclin_FrameMode mode);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1343  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1344  /** \brief Selects the RTS/CTS polarity
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1345   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1346   * \param rcpol RCPOL selection
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1347   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1348   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1349  IFX_INLINE void IfxAsclin_setRtsCtsPolarity(Ifx_ASCLIN *asclin, IfxAsclin_RtsCtsPolarity rcpol);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1350  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1351  /** \brief Selects the alternate input for Rx signal
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1352   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1353   * \param alti alternate input selection of Rx signal
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1354   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1355   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1356  IFX_INLINE void IfxAsclin_setRxInput(Ifx_ASCLIN *asclin, IfxAsclin_RxInputSelect alti);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1357  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1358  /** \brief Selects the slave polarity
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1359   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1360   * \param spol SPOL selection
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1361   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1362   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1363  IFX_INLINE void IfxAsclin_setSlavePolarity(Ifx_ASCLIN *asclin, IfxAsclin_SlavePolarity spol);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1364  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1365  /** \brief Configure the Module to Hard/Soft suspend mode.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1366   * Note: The api works only when the OCDS is enabled and in Supervisor Mode. When OCDS is disabled the OCS suspend control is ineffective.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1367   * \param asclin Pointer to ASCLIN module registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1368   * \param mode Module suspend mode
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1369   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1370   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1371  IFX_INLINE void IfxAsclin_setSuspendMode(Ifx_ASCLIN *asclin, IfxAsclin_SuspendMode mode);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1372  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1373  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1374  /*-------------------------Global Function Prototypes-------------------------*/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1375  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1376  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1377  /** \brief Set the bit timing
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1378   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1379   * \note this function required FA source and the PD frequency to be set to their final values
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1380   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1381   * \param baudrate Required baudrate
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1382   * \param oversampling The oversampling factor
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1383   * \param samplepoint The sample point position
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1384   * \param medianFilter Number of samples per bit (median filter)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1385   * \return TRUE if configuration was successfull
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1386   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1387  IFX_EXTERN boolean IfxAsclin_setBitTiming(Ifx_ASCLIN *asclin, float32 baudrate, IfxAsclin_OversamplingFactor oversampling, IfxAsclin_SamplePointPosition samplepoint, IfxAsclin_SamplesPerBit medianFilter);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1388  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1389  /** \} */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1390  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1391  /** \addtogroup IfxLld_Asclin_Std_External
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1392   * \{ */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1393  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1394  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1395  /*-------------------------Global Function Prototypes-------------------------*/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1396  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1397  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1398  /** \brief Disables the module
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1399   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1400   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1401   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1402  IFX_EXTERN void IfxAsclin_disableModule(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1403  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1404  /** \brief Enables the ASC error interrupt Flags
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1405   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1406   * \param parEnable parity error
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1407   * \param rfoEnable Rx FIFO overflow error
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1408   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1409   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1410  IFX_EXTERN void IfxAsclin_enableAscErrorFlags(Ifx_ASCLIN *asclin, boolean parEnable, boolean rfoEnable);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1411  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1412  /** \brief Enables the module
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1413   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1414   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1415   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1416  IFX_EXTERN void IfxAsclin_enableModule(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1417  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1418  /** \brief Returns the SRC pointer for ERR
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1419   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1420   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1421  IFX_EXTERN volatile Ifx_SRC_SRCR *IfxAsclin_getSrcPointerEr(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1422  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1423  /** \brief Returns the  SRC pointer for Rx
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1424   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1425   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1426  IFX_EXTERN volatile Ifx_SRC_SRCR *IfxAsclin_getSrcPointerRx(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1427  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1428  /** \brief Returns the SRC pointer for Tx
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1429   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1430   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1431  IFX_EXTERN volatile Ifx_SRC_SRCR *IfxAsclin_getSrcPointerTx(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1432  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1433  /** \brief Reads data up to 16 bits
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1434   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1435   * \param data Array where the read data shall be stored
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1436   * \param count number of items to read
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1437   * \return number of items that could not be read
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1438   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1439  IFX_EXTERN uint32 IfxAsclin_read16(Ifx_ASCLIN *asclin, uint16 *data, uint32 count);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1440  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1441  /** \brief Reads data up to 32 bits
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1442   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1443   * \param data Array where the read data shall be stored
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1444   * \param count number of items to read
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1445   * \return number of items that could not be read
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1446   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1447  IFX_EXTERN uint32 IfxAsclin_read32(Ifx_ASCLIN *asclin, uint32 *data, uint32 count);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1448  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1449  /** \brief Reads data up to 8 bits
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1450   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1451   * \param data Array where the read data shall be stored
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1452   * \param count number of items to read
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1453   * \return number of items that could not be read
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1454   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1455  IFX_EXTERN uint32 IfxAsclin_read8(Ifx_ASCLIN *asclin, uint8 *data, uint32 count);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1456  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1457  /** \brief Sets the baudrate bit fields
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1458   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1459   * \param prescaler division ratio of the predivider
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1460   * \param numerator numerator of the fractional divider
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1461   * \param denominator denominator of the fractional divider
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1462   * \param oversampling division ratio of the baudrate postdivider
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1463   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1464   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1465  IFX_EXTERN void IfxAsclin_setBaudrateBitFields(Ifx_ASCLIN *asclin, uint16 prescaler, uint16 numerator, uint16 denominator, IfxAsclin_OversamplingFactor oversampling);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1466  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1467  /** \brief Sets the  clock source
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1468   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1469   * \param clockSource clock source selection
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1470   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1471   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1472  IFX_EXTERN void IfxAsclin_setClockSource(Ifx_ASCLIN *asclin, IfxAsclin_ClockSource clockSource);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1473  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1474  /** \brief Writes data up to 16 bits
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1475   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1476   * \param data Array of data to be send
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1477   * \param count number of items to be send
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1478   * \return the number of items that could not be send
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1479   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1480  IFX_EXTERN uint32 IfxAsclin_write16(Ifx_ASCLIN *asclin, uint16 *data, uint32 count);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1481  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1482  /** \brief Writes data up to 32 bits
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1483   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1484   * \param data Array of data to be send
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1485   * \param count number of items to be send
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1486   * \return the number of items that could not be send
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1487   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1488  IFX_EXTERN uint32 IfxAsclin_write32(Ifx_ASCLIN *asclin, uint32 *data, uint32 count);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1489  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1490  /** \brief Writes data up to 8 bits
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1491   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1492   * \param data Array of data to be send
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1493   * \param count number of items to be send
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1494   * \return the number of items that could not be send
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1495   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1496  IFX_EXTERN uint32 IfxAsclin_write8(Ifx_ASCLIN *asclin, uint8 *data, uint32 count);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1497  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1498  /** \} */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1499  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1500  /** \addtogroup IfxLld_Asclin_Std_IO
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1501   * \{ */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1502  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1503  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1504  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1505  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1506  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1507  /** \brief Initializes a CTS input
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1508   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1509   * Attention: the kernel clock has to be disabled whenever the input multiplexer is changed.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1510   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1511   * This can be done with IfxAsclin_setClockSource(asclinSFR, IfxAsclin_ClockSource_noClock);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1512   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1513   * After the function call, the current clock can be enabled again.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1514   * \param cts the CTS Pin which should be configured
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1515   * \param inputMode the pin input mode which should be configured
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1516   * \param padDriver the pad driver mode which should be configured
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1517   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1518   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1519  IFX_INLINE void IfxAsclin_initCtsPin(const IfxAsclin_Cts_In *cts, IfxPort_InputMode inputMode, IfxPort_PadDriver padDriver);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1520  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1521  /** \brief Initializes a RTS output
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1522   * \param rts the RTS Pin which should be configured
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1523   * \param outputMode the pin output mode which should be configured
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1524   * \param padDriver the pad driver mode which should be configured
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1525   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1526   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1527  IFX_INLINE void IfxAsclin_initRtsPin(const IfxAsclin_Rts_Out *rts, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1528  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1529  /** \brief Initializes a RX input
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1530   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1531   * Attention: the kernel clock has to be disabled whenever the input multiplexer is changed.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1532   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1533   * This can be done with IfxAsclin_setClockSource(asclinSFR, IfxAsclin_ClockSource_noClock);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1534   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1535   * After the function call, the current clock can be enabled again.
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1536   * \param rx the RX Pin which should be configured
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1537   * \param inputMode the pin input mode which should be configured
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1538   * \param padDriver the pad driver mode which should be configured
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1539   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1540   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1541  IFX_INLINE void IfxAsclin_initRxPin(const IfxAsclin_Rx_In *rx, IfxPort_InputMode inputMode, IfxPort_PadDriver padDriver);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1542  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1543  /** \brief Initializes a SCLK output
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1544   * \param sclk the SCLK Pin which should be configured
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1545   * \param outputMode the pin output mode which should be configured
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1546   * \param padDriver the pad driver mode which should be configured
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1547   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1548   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1549  IFX_INLINE void IfxAsclin_initSclkPin(const IfxAsclin_Sclk_Out *sclk, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1550  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1551  /** \brief Initializes a SLSO output
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1552   * \param slso the SLSO Pin which should be configured
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1553   * \param outputMode the pin output mode which should be configured
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1554   * \param padDriver the pad driver mode which should be configured
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1555   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1556   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1557  IFX_INLINE void IfxAsclin_initSlsoPin(const IfxAsclin_Slso_Out *slso, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1558  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1559  /** \brief Initializes a TX output
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1560   * \param tx the TX Pin which should be configured
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1561   * \param outputMode the pin output mode which should be configured
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1562   * \param padDriver the pad driver mode which should be configured
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1563   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1564   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1565  IFX_INLINE void IfxAsclin_initTxPin(const IfxAsclin_Tx_Out *tx, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1566  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1567  /** \} */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1568  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1569  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1570  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1571  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1572  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1573  /**
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1574   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1575   * \return returns the value of RxDATA register
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1576   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1577  IFX_INLINE uint32 IfxAsclin_readRxData(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1578  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1579  /**
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1580   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1581   * \param data data to be written
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1582   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1583   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1584  IFX_INLINE void IfxAsclin_writeTxData(Ifx_ASCLIN *asclin, uint32 data);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1585  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1586  /** \brief Returns the status of all error flags
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1587   * \param asclin pointer to ASCLIN registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1588   * \return status
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1589   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1590  IFX_INLINE uint16 IfxAsclin_getAllErrorFlagsStatus(Ifx_ASCLIN *asclin);
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1591  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1592  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1593  /*---------------------Inline Function Implementations------------------------*/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1594  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1595  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1596  IFX_INLINE void IfxAsclin_clearAllFlags(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1597  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1598      asclin->FLAGSCLEAR.U = 0xFFFFFFFF;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1599  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1600  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1601  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1602  IFX_INLINE void IfxAsclin_clearBreakDetectedFlag(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1603  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1604      asclin->FLAGSCLEAR.B.BDC = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1605  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1606  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1607  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1608  IFX_INLINE void IfxAsclin_clearCollisionDetectionErrorFlag(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1609  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1610      asclin->FLAGSCLEAR.B.CEC = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1611  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1612  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1613  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1614  IFX_INLINE void IfxAsclin_clearFallingEdgeDetectedFlag(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1615  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1616      asclin->FLAGSCLEAR.B.FEDC = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1617  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1618  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1619  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1620  IFX_INLINE void IfxAsclin_clearFrameErrorFlag(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1621  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1622      asclin->FLAGSCLEAR.B.FEC = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1623  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1624  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1625  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1626  IFX_INLINE void IfxAsclin_clearHeaderTimeoutFlag(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1627  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1628      asclin->FLAGSCLEAR.B.HTC = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1629  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1630  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1631  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1632  IFX_INLINE void IfxAsclin_clearKernelResetStatus(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1633  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1634      asclin->KRSTCLR.B.CLR = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1635  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1636  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1637  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1638  IFX_INLINE void IfxAsclin_clearLinAutoBaudDetectionErrorFlag(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1639  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1640      asclin->FLAGSCLEAR.B.LAC = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1641  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1642  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1643  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1644  IFX_INLINE void IfxAsclin_clearLinChecksumErrorFlag(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1645  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1646      asclin->FLAGSCLEAR.B.LCC = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1647  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1648  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1649  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1650  IFX_INLINE void IfxAsclin_clearLinParityErrorFlag(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1651  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1652      asclin->FLAGSCLEAR.B.LPC = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1653  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1654  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1655  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1656  IFX_INLINE void IfxAsclin_clearParityErrorFlag(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1657  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1658      asclin->FLAGSCLEAR.B.PEC = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1659  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1660  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1661  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1662  IFX_INLINE void IfxAsclin_clearRaisingEdgeDetectedFlag(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1663  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1664      asclin->FLAGSCLEAR.B.REDC = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1665  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1666  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1667  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1668  IFX_INLINE void IfxAsclin_clearResponseTimeoutFlag(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1669  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1670      asclin->FLAGSCLEAR.B.RTC = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1671  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1672  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1673  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1674  IFX_INLINE void IfxAsclin_clearRxFifoFillLevelFlag(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1675  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1676      asclin->FLAGSCLEAR.B.RFLC = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1677  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1678  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1679  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1680  IFX_INLINE void IfxAsclin_clearRxFifoOverflowFlag(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1681  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1682      asclin->FLAGSCLEAR.B.RFOC = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1683  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1684  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1685  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1686  IFX_INLINE void IfxAsclin_clearRxFifoUnderflowFlag(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1687  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1688      asclin->FLAGSCLEAR.B.RFUC = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1689  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1690  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1691  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1692  IFX_INLINE void IfxAsclin_clearRxHeaderEndFlag(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1693  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1694      asclin->FLAGSCLEAR.B.RHC = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1695  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1696  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1697  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1698  IFX_INLINE void IfxAsclin_clearRxResponseEndFlag(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1699  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1700      asclin->FLAGSCLEAR.B.RRC = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1701  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1702  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1703  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1704  IFX_INLINE void IfxAsclin_clearTransmissionCompletedFlag(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1705  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1706      asclin->FLAGSCLEAR.B.TCC = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1707  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1708  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1709  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1710  IFX_INLINE void IfxAsclin_clearTxFifoFillLevelFlag(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1711  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1712      asclin->FLAGSCLEAR.B.TFLC = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1713  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1714  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1715  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1716  IFX_INLINE void IfxAsclin_clearTxFifoOverflowFlag(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1717  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1718      asclin->FLAGSCLEAR.B.TFOC = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1719  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1720  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1721  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1722  IFX_INLINE void IfxAsclin_clearTxHeaderEndFlag(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1723  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1724      asclin->FLAGSCLEAR.B.THC = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1725  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1726  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1727  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1728  IFX_INLINE void IfxAsclin_clearTxResponseEndFlag(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1729  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1730      asclin->FLAGSCLEAR.B.TRC = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1731  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1732  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1733  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1734  IFX_INLINE void IfxAsclin_disableAllFlags(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1735  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1736      asclin->FLAGSENABLE.U = 0x00000000;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1737  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1738  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1739  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1740  IFX_INLINE void IfxAsclin_enableAutoBaudrateDetection(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1741  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1742      asclin->LIN.CON.B.ABD = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1743  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1744  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1745  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1746  IFX_INLINE void IfxAsclin_enableBreakDetectedFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1747  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1748      asclin->FLAGSENABLE.B.BDE = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1749  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1750  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1751  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1752  IFX_INLINE void IfxAsclin_enableCollisionDetection(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1753  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1754      asclin->FRAMECON.B.CEN = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1755  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1756  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1757  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1758  IFX_INLINE void IfxAsclin_enableCollisionDetectionErrorFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1759  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1760      asclin->FLAGSENABLE.B.CEE = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1761  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1762  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1763  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1764  IFX_INLINE void IfxAsclin_enableCts(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1765  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1766      asclin->IOCR.B.CTSEN = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1767  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1768  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1769  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1770  IFX_INLINE void IfxAsclin_enableFallingEdgeDetectedFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1771  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1772      asclin->FLAGSENABLE.B.FEDE = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1773  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1774  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1775  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1776  IFX_INLINE void IfxAsclin_enableFrameErrorFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1777  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1778      asclin->FLAGSENABLE.B.FEE = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1779  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1780  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1781  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1782  IFX_INLINE void IfxAsclin_enableHardwareChecksum(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1783  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1784      asclin->LIN.CON.B.CSEN = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1785  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1786  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1787  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1788  IFX_INLINE void IfxAsclin_enableHeaderTimeoutFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1789  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1790      asclin->FLAGSENABLE.B.HTE = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1791  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1792  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1793  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1794  IFX_INLINE void IfxAsclin_enableLinAutoBaudDetectionErrorFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1795  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1796      asclin->FLAGSENABLE.B.ABE = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1797  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1798  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1799  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1800  IFX_INLINE void IfxAsclin_enableLinChecksumErrorFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1801  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1802      asclin->FLAGSENABLE.B.LCE = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1803  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1804  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1805  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1806  IFX_INLINE void IfxAsclin_enableLinParityErrorFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1807  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1808      asclin->FLAGSENABLE.B.LPE = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1809  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1810  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1811  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1812  IFX_INLINE void IfxAsclin_enableLoopBackMode(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1813  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1814      asclin->IOCR.B.LB = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1815  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1816  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1817  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1818  IFX_INLINE void IfxAsclin_enableParity(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1819  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1820      asclin->FRAMECON.B.PEN = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1821  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1822  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1823  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1824  IFX_INLINE void IfxAsclin_enableParityErrorFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1825  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1826      asclin->FLAGSENABLE.B.PEE = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1827  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1828  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1829  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1830  IFX_INLINE void IfxAsclin_enableRaisingEdgeDetectedFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1831  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1832      asclin->FLAGSENABLE.B.REDE = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1833  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1834  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1835  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1836  IFX_INLINE void IfxAsclin_enableResponseTimeoutFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1837  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1838      asclin->FLAGSENABLE.B.RTE = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1839  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1840  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1841  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1842  IFX_INLINE void IfxAsclin_enableRxFifoFillLevelFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1843  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1844      asclin->FLAGSENABLE.B.RFLE = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1845  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1846  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1847  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1848  IFX_INLINE void IfxAsclin_enableRxFifoInlet(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1849  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1850      asclin->RXFIFOCON.B.ENI = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1851  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1852  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1853  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1854  IFX_INLINE void IfxAsclin_enableRxFifoOverflowFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1855  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1856      asclin->FLAGSENABLE.B.RFOE = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1857  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1858  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1859  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1860  IFX_INLINE void IfxAsclin_enableRxFifoUnderflowFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1861  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1862      asclin->FLAGSENABLE.B.RFUE = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1863  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1864  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1865  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1866  IFX_INLINE void IfxAsclin_enableRxHeaderEndFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1867  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1868      asclin->FLAGSENABLE.B.RHE = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1869  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1870  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1871  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1872  IFX_INLINE void IfxAsclin_enableRxResponseEndFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1873  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1874      asclin->FLAGSENABLE.B.RRE = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1875  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1876  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1877  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1878  IFX_INLINE void IfxAsclin_enableTransmissionCompletedFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1879  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1880      asclin->FLAGSENABLE.B.TCE = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1881  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1882  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1883  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1884  IFX_INLINE void IfxAsclin_enableTxFifoFillLevelFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1885  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1886      asclin->FLAGSENABLE.B.TFLE = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1887  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1888  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1889  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1890  IFX_INLINE void IfxAsclin_enableTxFifoOutlet(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1891  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1892      asclin->TXFIFOCON.B.ENO = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1893  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1894  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1895  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1896  IFX_INLINE void IfxAsclin_enableTxFifoOverflowFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1897  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1898      asclin->FLAGSENABLE.B.TFOE = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1899  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1900  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1901  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1902  IFX_INLINE void IfxAsclin_enableTxHeaderEndFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1903  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1904      asclin->FLAGSENABLE.B.THE = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1905  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1906  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1907  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1908  IFX_INLINE void IfxAsclin_enableTxResponseEndFlag(Ifx_ASCLIN *asclin, boolean enable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1909  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1910      asclin->FLAGSENABLE.B.TRE = enable ? 1 : 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1911  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1912  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1913  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1914  IFX_INLINE void IfxAsclin_flushRxFifo(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1915  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1916      asclin->RXFIFOCON.B.FLUSH = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1917  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1918  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1919  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1920  IFX_INLINE void IfxAsclin_flushTxFifo(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1921  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1922      asclin->TXFIFOCON.B.FLUSH = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1923  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1924  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1925  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1926  IFX_INLINE boolean IfxAsclin_getBreakDetectedFlagStatus(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1927  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1928      return asclin->FLAGS.B.BD;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1929  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1930  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1931  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1932  IFX_INLINE uint8 IfxAsclin_getClockSource(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1933  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1934      return asclin->CSR.B.CLKSEL;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1935  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1936  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1937  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1938  IFX_INLINE boolean IfxAsclin_getClockStatus(Ifx_ASCLIN *asclin)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1939  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.h	  1940      return asclin->CSR.B.CON;
	ld.bu	d15,[a4]79
.L430:
	jz.t	d15:7,.L55
.L670:
	ret
.L422:
	
__IfxAsclin_setClockSource_function_end:
	.size	IfxAsclin_setClockSource,__IfxAsclin_setClockSource_function_end-IfxAsclin_setClockSource
.L213:
	; End of function
	
	.sdecl	'.text.IfxAsclin.IfxAsclin_write16',code,cluster('IfxAsclin_write16')
	.sect	'.text.IfxAsclin.IfxAsclin_write16'
	.align	2
	
	.global	IfxAsclin_write16

; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	   375  asclin, uint16 *data, uint32 count)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	   376  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	   377      volatile Ifx_ASCLIN_TXDATA *txData = (volatile Ifx_ASCLIN_TXDATA *)&asclin->TXDATA.U;
; Function IfxAsclin_write16
.L110:
IfxAsclin_write16:	.type	func

; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	   378  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	   379      while ((count > 0))
	lea	a15,[a4]68
.L511:

; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	   380      {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	   381          txData->U = *data++;
	j	.L56
.L57:

; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	   382          count--;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	   383      }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	   384  
	add	d4,#-1
	ld.hu	d15,[a5+]2
.L675:
	st.w	[a15],d15
.L56:
	jne	d4,#0,.L57
.L676:

; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	   385      return count;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	   386  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	   387  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	   388  
	mov	d2,#0
	ret
.L431:
	
__IfxAsclin_write16_function_end:
	.size	IfxAsclin_write16,__IfxAsclin_write16_function_end-IfxAsclin_write16
.L218:
	; End of function
	
	.sdecl	'.text.IfxAsclin.IfxAsclin_write32',code,cluster('IfxAsclin_write32')
	.sect	'.text.IfxAsclin.IfxAsclin_write32'
	.align	2
	
	.global	IfxAsclin_write32

; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	   389  uint32 IfxAsclin_write32(Ifx_ASCLIN *asclin, uint32 *data, uint32 count)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	   390  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	   391      volatile Ifx_ASCLIN_TXDATA *txData = (volatile Ifx_ASCLIN_TXDATA *)&asclin->TXDATA.U;
; Function IfxAsclin_write32
.L112:
IfxAsclin_write32:	.type	func

; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	   392  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	   393      while ((count > 0))
	lea	a15,[a4]68
.L512:

; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	   394      {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	   395          txData->U = *data++;
	j	.L59
.L60:

; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	   396          count--;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	   397      }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	   398  
	add	d4,#-1
	ld.w	d15,[a5+]
.L681:
	st.w	[a15],d15
.L59:
	jne	d4,#0,.L60
.L682:

; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	   399      return count;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	   400  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	   401  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	   402  
	mov	d2,#0
	ret
.L437:
	
__IfxAsclin_write32_function_end:
	.size	IfxAsclin_write32,__IfxAsclin_write32_function_end-IfxAsclin_write32
.L223:
	; End of function
	
	.sdecl	'.text.IfxAsclin.IfxAsclin_write8',code,cluster('IfxAsclin_write8')
	.sect	'.text.IfxAsclin.IfxAsclin_write8'
	.align	2
	
	.global	IfxAsclin_write8

; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	   403  uint32 IfxAsclin_write8(Ifx_ASCLIN *asclin, uint8 *data, uint32 count)
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	   404  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	   405      volatile Ifx_ASCLIN_TXDATA *txData = (volatile Ifx_ASCLIN_TXDATA *)&asclin->TXDATA.U;
; Function IfxAsclin_write8
.L114:
IfxAsclin_write8:	.type	func

; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	   406  
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	   407      while ((count > 0))
	lea	a15,[a4]68
.L513:

; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	   408      {
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	   409          txData->U = *data++;
	j	.L62
.L63:

; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	   410          count--;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	   411      }
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	   412  
	add	d4,#-1
	ld.bu	d15,[a5+]
.L687:
	st.w	[a15],d15
.L62:
	jne	d4,#0,.L63
.L688:

; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	   413      return count;
; ..\src\BaseSw\iLLD\TC26B\Tricore\Asclin\Std\IfxAsclin.c	   414  }

	mov	d2,#0


	ret
.L442:
	
__IfxAsclin_write8_function_end:
	.size	IfxAsclin_write8,__IfxAsclin_write8_function_end-IfxAsclin_write8
.L228:
	; End of function
	
	.calls	'IfxAsclin_disableModule','IfxScuWdt_getCpuWatchdogPassword'
	.calls	'IfxAsclin_disableModule','IfxScuWdt_clearCpuEndinit'
	.calls	'IfxAsclin_disableModule','IfxScuWdt_setCpuEndinit'
	.calls	'IfxAsclin_enableModule','IfxScuWdt_getCpuWatchdogPassword'
	.calls	'IfxAsclin_enableModule','IfxScuWdt_clearCpuEndinit'
	.calls	'IfxAsclin_enableModule','IfxScuWdt_setCpuEndinit'
	.calls	'IfxAsclin_getFaFrequency','IfxScuCcu_getSpbFrequency'
	.calls	'IfxAsclin_getFaFrequency','IfxScuCcu_getOsc0Frequency'
	.calls	'IfxAsclin_getFaFrequency','IfxScuCcu_getPllErayFrequency'
	.calls	'IfxAsclin_getFaFrequency','IfxScuCcu_getBaud2Frequency'
	.calls	'IfxAsclin_getFaFrequency','IfxScuCcu_getBaud1Frequency'
	.calls	'IfxAsclin_getOvsFrequency','IfxAsclin_getPdFrequency'
	.calls	'IfxAsclin_getPdFrequency','IfxAsclin_getFaFrequency'
	.calls	'IfxAsclin_getShiftFrequency','IfxAsclin_getOvsFrequency'
	.calls	'IfxAsclin_getSrcPointerEr','IfxAsclin_getIndex'
	.calls	'IfxAsclin_getSrcPointerRx','IfxAsclin_getIndex'
	.calls	'IfxAsclin_getSrcPointerTx','IfxAsclin_getIndex'
	.calls	'IfxAsclin_resetModule','IfxScuWdt_getCpuWatchdogPassword'
	.calls	'IfxAsclin_resetModule','IfxScuWdt_clearCpuEndinit'
	.calls	'IfxAsclin_resetModule','IfxScuWdt_setCpuEndinit'
	.calls	'IfxAsclin_setBaudrateBitFields','IfxAsclin_setClockSource'
	.calls	'IfxAsclin_setBitTiming','IfxAsclin_getPdFrequency'
	.calls	'IfxAsclin_setBitTiming','IfxAsclin_setClockSource'
	.calls	'IfxAsclin_getSrcPointerEr','.cocofun_3'
	.calls	'IfxAsclin_getSrcPointerRx','.cocofun_1'
	.calls	'.cocofun_1','.cocofun_3'
	.calls	'IfxAsclin_getSrcPointerTx','.cocofun_1'
	.calls	'IfxAsclin_setBaudrateBitFields','.cocofun_2'
	.calls	'IfxAsclin_setBitTiming','.cocofun_2'
	.calls	'IfxAsclin_disableModule','',0
	.calls	'IfxAsclin_enableAscErrorFlags','',0
	.calls	'IfxAsclin_enableModule','',0
	.calls	'IfxAsclin_getAddress','',0
	.calls	'IfxAsclin_getFaFrequency','',0
	.calls	'IfxAsclin_getIndex','',0
	.calls	'IfxAsclin_getOvsFrequency','',0
	.calls	'IfxAsclin_getPdFrequency','',0
	.calls	'IfxAsclin_getShiftFrequency','',0
	.calls	'IfxAsclin_getSrcPointerEr','',0
	.calls	'.cocofun_3','',0
	.calls	'IfxAsclin_getSrcPointerRx','',0
	.calls	'.cocofun_1','',0
	.calls	'IfxAsclin_getSrcPointerTx','',0
	.calls	'IfxAsclin_read16','',0
	.calls	'IfxAsclin_read32','',0
	.calls	'IfxAsclin_read8','',0
	.calls	'IfxAsclin_resetModule','',0
	.calls	'IfxAsclin_setBaudrateBitFields','',0
	.calls	'.cocofun_2','',0
	.calls	'IfxAsclin_setBitTiming','',24
	.calls	'IfxAsclin_setClockSource','',0
	.calls	'IfxAsclin_write16','',0
	.calls	'IfxAsclin_write32','',0
	.extern	IfxAsclin_cfg_indexMap
	.extern	IfxScuWdt_clearCpuEndinit
	.extern	IfxScuWdt_setCpuEndinit
	.extern	IfxScuWdt_getCpuWatchdogPassword
	.extern	IfxScuCcu_getBaud1Frequency
	.extern	IfxScuCcu_getBaud2Frequency
	.extern	IfxScuCcu_getOsc0Frequency
	.extern	IfxScuCcu_getPllErayFrequency
	.extern	IfxScuCcu_getSpbFrequency
	.calls	'IfxAsclin_write8','',0
	.sdecl	'.debug_info',debug
	.sect	'.debug_info'
.L116:
	.word	94303
	.half	3
	.word	.L117
	.byte	4
.L115:
	.byte	1
	.byte	'..\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Asclin\\Std\\IfxAsclin.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'E:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\Debug\\',0,12,1
	.word	.L118
	.byte	2,1,1,3
	.word	179
	.byte	4
	.byte	'Ifx__jump_and_link',0,3,1,61,17,1,1,5
	.byte	'fun',0,1,61,43
	.word	182
	.byte	6,0,7
	.byte	'__fract',0,4,128,1
.L249:
	.byte	7
	.byte	'float',0,4,4,8
	.byte	'Ifx__float_to_fract',0,3,1,152,2,18
	.word	227
	.byte	1,1,5
	.byte	'a',0,1,152,2,44
	.word	239
	.byte	6,0,4
	.byte	'Ifx__stopPerfCounters',0,3,1,172,2,17,1,1,6,0,7
	.byte	'unsigned long long int',0,8,7,9
	.byte	'void',0,3
	.word	351
	.byte	8
	.byte	'__ld64',0,3,2,135,1,19
	.word	325
	.byte	1,1,5
	.byte	'addr',0,2,135,1,32
	.word	357
	.byte	6,0,4
	.byte	'__st64',0,3,2,143,1,17,1,1,5
	.byte	'addr',0,2,143,1,30
	.word	357
	.byte	5
	.byte	'value',0,2,143,1,43
	.word	325
	.byte	6,0,7
	.byte	'unsigned int',0,4,7,7
	.byte	'int',0,4,5,7
	.byte	'unsigned int',0,4,7,10
	.byte	'_Ifx_SCU_WDTCPU_CON0_Bits',0,4,241,8,16,4,11
	.byte	'ENDINIT',0,4
	.word	466
	.byte	1,31,2,35,0,11
	.byte	'LCK',0,4
	.word	466
	.byte	1,30,2,35,0,11
	.byte	'PW',0,4
	.word	466
	.byte	14,16,2,35,0,11
	.byte	'REL',0,4
	.word	466
	.byte	16,0,2,35,0,0,12,4,247,14,9,4,13
	.byte	'U',0
	.word	443
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	459
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	482
	.byte	4,2,35,0,0
.L273:
	.byte	7
	.byte	'unsigned char',0,1,8
.L271:
	.byte	7
	.byte	'unsigned short int',0,2,7,10
	.byte	'_Ifx_SCU_WDTCPU_CON1_Bits',0,4,250,8,16,4,11
	.byte	'reserved_0',0,1
	.word	618
	.byte	2,6,2,35,0,11
	.byte	'IR0',0,1
	.word	618
	.byte	1,5,2,35,0,11
	.byte	'DR',0,1
	.word	618
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,1
	.word	618
	.byte	1,3,2,35,0,11
	.byte	'IR1',0,1
	.word	618
	.byte	1,2,2,35,0,11
	.byte	'UR',0,1
	.word	618
	.byte	1,1,2,35,0,11
	.byte	'PAR',0,1
	.word	618
	.byte	1,0,2,35,0,11
	.byte	'TCR',0,1
	.word	618
	.byte	1,7,2,35,1,11
	.byte	'TCTR',0,1
	.word	618
	.byte	7,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	635
	.byte	16,0,2,35,2,0,12,4,255,14,9,4,13
	.byte	'U',0
	.word	443
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	459
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	657
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_SCU_WDTCPU_SR_Bits',0,4,137,9,16,4,11
	.byte	'AE',0,1
	.word	618
	.byte	1,7,2,35,0,11
	.byte	'OE',0,1
	.word	618
	.byte	1,6,2,35,0,11
	.byte	'IS0',0,1
	.word	618
	.byte	1,5,2,35,0,11
	.byte	'DS',0,1
	.word	618
	.byte	1,4,2,35,0,11
	.byte	'TO',0,1
	.word	618
	.byte	1,3,2,35,0,11
	.byte	'IS1',0,1
	.word	618
	.byte	1,2,2,35,0,11
	.byte	'US',0,1
	.word	618
	.byte	1,1,2,35,0,11
	.byte	'PAS',0,1
	.word	618
	.byte	1,0,2,35,0,11
	.byte	'TCS',0,1
	.word	618
	.byte	1,7,2,35,1,11
	.byte	'TCT',0,1
	.word	618
	.byte	7,0,2,35,1,11
	.byte	'TIM',0,2
	.word	635
	.byte	16,0,2,35,2,0,12,4,135,15,9,4,13
	.byte	'U',0
	.word	443
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	459
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	901
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_SCU_WDTCPU',0,4,175,15,25,12,13
	.byte	'CON0',0
	.word	578
	.byte	4,2,35,0,13
	.byte	'CON1',0
	.word	861
	.byte	4,2,35,4,13
	.byte	'SR',0
	.word	1092
	.byte	4,2,35,8,0,14
	.word	1132
	.byte	3
	.word	1195
	.byte	4
	.byte	'IfxScuWdt_clearCpuEndinitInline',0,3,3,181,3,17,1,1,5
	.byte	'watchdog',0,3,181,3,65
	.word	1200
	.byte	5
	.byte	'password',0,3,181,3,82
	.word	635
	.byte	6,0,4
	.byte	'IfxScuWdt_setCpuEndinitInline',0,3,3,140,4,17,1,1,5
	.byte	'watchdog',0,3,140,4,63
	.word	1200
	.byte	5
	.byte	'password',0,3,140,4,80
	.word	635
	.byte	6,0,8
	.byte	'IfxScuWdt_getCpuWatchdogPasswordInline',0,3,3,227,3,19
	.word	635
	.byte	1,1,5
	.byte	'watchdog',0,3,227,3,74
	.word	1200
	.byte	6,0,15,6,156,1,9,1,16
	.byte	'IfxCpu_ResourceCpu_0',0,0,16
	.byte	'IfxCpu_ResourceCpu_1',0,1,16
	.byte	'IfxCpu_ResourceCpu_none',0,2,0,8
	.byte	'IfxCpu_getCoreIndex',0,3,5,141,6,31
	.word	1430
	.byte	1,1,6,0,8
	.byte	'IfxCpu_areInterruptsEnabled',0,3,5,139,5,20
	.word	618
	.byte	1,1,6,0
.L260:
	.byte	7
	.byte	'unsigned long int',0,4,7,8
	.byte	'IfxCpu_getPerformanceCounter',0,3,5,161,6,19
	.word	1585
	.byte	1,1,5
	.byte	'address',0,5,161,6,55
	.word	635
	.byte	6,0,8
	.byte	'IfxCpu_getPerformanceCounterStickyOverflow',0,3,5,190,6,20
	.word	618
	.byte	1,1,5
	.byte	'address',0,5,190,6,70
	.word	635
	.byte	6,0,4
	.byte	'IfxCpu_updatePerformanceCounter',0,3,5,172,8,17,1,1,5
	.byte	'address',0,5,172,8,56
	.word	1585
	.byte	5
	.byte	'count',0,5,172,8,72
	.word	1585
	.byte	17,6,0,0,10
	.byte	'_Ifx_P_OUT_Bits',0,8,143,3,16,4,11
	.byte	'P0',0,1
	.word	618
	.byte	1,7,2,35,0,11
	.byte	'P1',0,1
	.word	618
	.byte	1,6,2,35,0,11
	.byte	'P2',0,1
	.word	618
	.byte	1,5,2,35,0,11
	.byte	'P3',0,1
	.word	618
	.byte	1,4,2,35,0,11
	.byte	'P4',0,1
	.word	618
	.byte	1,3,2,35,0,11
	.byte	'P5',0,1
	.word	618
	.byte	1,2,2,35,0,11
	.byte	'P6',0,1
	.word	618
	.byte	1,1,2,35,0,11
	.byte	'P7',0,1
	.word	618
	.byte	1,0,2,35,0,11
	.byte	'P8',0,1
	.word	618
	.byte	1,7,2,35,1,11
	.byte	'P9',0,1
	.word	618
	.byte	1,6,2,35,1,11
	.byte	'P10',0,1
	.word	618
	.byte	1,5,2,35,1,11
	.byte	'P11',0,1
	.word	618
	.byte	1,4,2,35,1,11
	.byte	'P12',0,1
	.word	618
	.byte	1,3,2,35,1,11
	.byte	'P13',0,1
	.word	618
	.byte	1,2,2,35,1,11
	.byte	'P14',0,1
	.word	618
	.byte	1,1,2,35,1,11
	.byte	'P15',0,1
	.word	618
	.byte	1,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	635
	.byte	16,0,2,35,2,0,12,8,181,5,9,4,13
	.byte	'U',0
	.word	443
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	459
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	1816
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_OMR_Bits',0,8,169,2,16,4,11
	.byte	'PS0',0,1
	.word	618
	.byte	1,7,2,35,0,11
	.byte	'PS1',0,1
	.word	618
	.byte	1,6,2,35,0,11
	.byte	'PS2',0,1
	.word	618
	.byte	1,5,2,35,0,11
	.byte	'PS3',0,1
	.word	618
	.byte	1,4,2,35,0,11
	.byte	'PS4',0,1
	.word	618
	.byte	1,3,2,35,0,11
	.byte	'PS5',0,1
	.word	618
	.byte	1,2,2,35,0,11
	.byte	'PS6',0,1
	.word	618
	.byte	1,1,2,35,0,11
	.byte	'PS7',0,1
	.word	618
	.byte	1,0,2,35,0,11
	.byte	'PS8',0,1
	.word	618
	.byte	1,7,2,35,1,11
	.byte	'PS9',0,1
	.word	618
	.byte	1,6,2,35,1,11
	.byte	'PS10',0,1
	.word	618
	.byte	1,5,2,35,1,11
	.byte	'PS11',0,1
	.word	618
	.byte	1,4,2,35,1,11
	.byte	'PS12',0,1
	.word	618
	.byte	1,3,2,35,1,11
	.byte	'PS13',0,1
	.word	618
	.byte	1,2,2,35,1,11
	.byte	'PS14',0,1
	.word	618
	.byte	1,1,2,35,1,11
	.byte	'PS15',0,1
	.word	618
	.byte	1,0,2,35,1,11
	.byte	'PCL0',0,1
	.word	618
	.byte	1,7,2,35,2,11
	.byte	'PCL1',0,1
	.word	618
	.byte	1,6,2,35,2,11
	.byte	'PCL2',0,1
	.word	618
	.byte	1,5,2,35,2,11
	.byte	'PCL3',0,1
	.word	618
	.byte	1,4,2,35,2,11
	.byte	'PCL4',0,1
	.word	618
	.byte	1,3,2,35,2,11
	.byte	'PCL5',0,1
	.word	618
	.byte	1,2,2,35,2,11
	.byte	'PCL6',0,1
	.word	618
	.byte	1,1,2,35,2,11
	.byte	'PCL7',0,1
	.word	618
	.byte	1,0,2,35,2,11
	.byte	'PCL8',0,1
	.word	618
	.byte	1,7,2,35,3,11
	.byte	'PCL9',0,1
	.word	618
	.byte	1,6,2,35,3,11
	.byte	'PCL10',0,1
	.word	618
	.byte	1,5,2,35,3,11
	.byte	'PCL11',0,1
	.word	618
	.byte	1,4,2,35,3,11
	.byte	'PCL12',0,1
	.word	618
	.byte	1,3,2,35,3,11
	.byte	'PCL13',0,1
	.word	618
	.byte	1,2,2,35,3,11
	.byte	'PCL14',0,1
	.word	618
	.byte	1,1,2,35,3,11
	.byte	'PCL15',0,1
	.word	618
	.byte	1,0,2,35,3,0,12,8,133,5,9,4,13
	.byte	'U',0
	.word	443
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	459
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	2132
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_ID_Bits',0,8,110,16,4,11
	.byte	'MODREV',0,1
	.word	618
	.byte	8,0,2,35,0,11
	.byte	'MODTYPE',0,1
	.word	618
	.byte	8,0,2,35,1,11
	.byte	'MODNUMBER',0,2
	.word	635
	.byte	16,0,2,35,2,0,12,8,148,4,9,4,13
	.byte	'U',0
	.word	443
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	459
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	2703
	.byte	4,2,35,0,0,18,4
	.word	618
	.byte	19,3,0,10
	.byte	'_Ifx_P_IOCR0_Bits',0,8,140,1,16,4,11
	.byte	'reserved_0',0,1
	.word	618
	.byte	3,5,2,35,0,11
	.byte	'PC0',0,1
	.word	618
	.byte	5,0,2,35,0,11
	.byte	'reserved_8',0,1
	.word	618
	.byte	3,5,2,35,1,11
	.byte	'PC1',0,1
	.word	618
	.byte	5,0,2,35,1,11
	.byte	'reserved_16',0,1
	.word	618
	.byte	3,5,2,35,2,11
	.byte	'PC2',0,1
	.word	618
	.byte	5,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	618
	.byte	3,5,2,35,3,11
	.byte	'PC3',0,1
	.word	618
	.byte	5,0,2,35,3,0,12,8,164,4,9,4,13
	.byte	'U',0
	.word	443
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	459
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	2831
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_IOCR4_Bits',0,8,166,1,16,4,11
	.byte	'reserved_0',0,1
	.word	618
	.byte	3,5,2,35,0,11
	.byte	'PC4',0,1
	.word	618
	.byte	5,0,2,35,0,11
	.byte	'reserved_8',0,1
	.word	618
	.byte	3,5,2,35,1,11
	.byte	'PC5',0,1
	.word	618
	.byte	5,0,2,35,1,11
	.byte	'reserved_16',0,1
	.word	618
	.byte	3,5,2,35,2,11
	.byte	'PC6',0,1
	.word	618
	.byte	5,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	618
	.byte	3,5,2,35,3,11
	.byte	'PC7',0,1
	.word	618
	.byte	5,0,2,35,3,0,12,8,180,4,9,4,13
	.byte	'U',0
	.word	443
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	459
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	3046
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_IOCR8_Bits',0,8,179,1,16,4,11
	.byte	'reserved_0',0,1
	.word	618
	.byte	3,5,2,35,0,11
	.byte	'PC8',0,1
	.word	618
	.byte	5,0,2,35,0,11
	.byte	'reserved_8',0,1
	.word	618
	.byte	3,5,2,35,1,11
	.byte	'PC9',0,1
	.word	618
	.byte	5,0,2,35,1,11
	.byte	'reserved_16',0,1
	.word	618
	.byte	3,5,2,35,2,11
	.byte	'PC10',0,1
	.word	618
	.byte	5,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	618
	.byte	3,5,2,35,3,11
	.byte	'PC11',0,1
	.word	618
	.byte	5,0,2,35,3,0,12,8,188,4,9,4,13
	.byte	'U',0
	.word	443
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	459
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	3261
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_IOCR12_Bits',0,8,153,1,16,4,11
	.byte	'reserved_0',0,1
	.word	618
	.byte	3,5,2,35,0,11
	.byte	'PC12',0,1
	.word	618
	.byte	5,0,2,35,0,11
	.byte	'reserved_8',0,1
	.word	618
	.byte	3,5,2,35,1,11
	.byte	'PC13',0,1
	.word	618
	.byte	5,0,2,35,1,11
	.byte	'reserved_16',0,1
	.word	618
	.byte	3,5,2,35,2,11
	.byte	'PC14',0,1
	.word	618
	.byte	5,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	618
	.byte	3,5,2,35,3,11
	.byte	'PC15',0,1
	.word	618
	.byte	5,0,2,35,3,0,12,8,172,4,9,4,13
	.byte	'U',0
	.word	443
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	459
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	3478
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_IN_Bits',0,8,118,16,4,11
	.byte	'P0',0,1
	.word	618
	.byte	1,7,2,35,0,11
	.byte	'P1',0,1
	.word	618
	.byte	1,6,2,35,0,11
	.byte	'P2',0,1
	.word	618
	.byte	1,5,2,35,0,11
	.byte	'P3',0,1
	.word	618
	.byte	1,4,2,35,0,11
	.byte	'P4',0,1
	.word	618
	.byte	1,3,2,35,0,11
	.byte	'P5',0,1
	.word	618
	.byte	1,2,2,35,0,11
	.byte	'P6',0,1
	.word	618
	.byte	1,1,2,35,0,11
	.byte	'P7',0,1
	.word	618
	.byte	1,0,2,35,0,11
	.byte	'P8',0,1
	.word	618
	.byte	1,7,2,35,1,11
	.byte	'P9',0,1
	.word	618
	.byte	1,6,2,35,1,11
	.byte	'P10',0,1
	.word	618
	.byte	1,5,2,35,1,11
	.byte	'P11',0,1
	.word	618
	.byte	1,4,2,35,1,11
	.byte	'P12',0,1
	.word	618
	.byte	1,3,2,35,1,11
	.byte	'P13',0,1
	.word	618
	.byte	1,2,2,35,1,11
	.byte	'P14',0,1
	.word	618
	.byte	1,1,2,35,1,11
	.byte	'P15',0,1
	.word	618
	.byte	1,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	635
	.byte	16,0,2,35,2,0,12,8,156,4,9,4,13
	.byte	'U',0
	.word	443
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	459
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	3698
	.byte	4,2,35,0,0,18,24
	.word	618
	.byte	19,23,0,10
	.byte	'_Ifx_P_PDR0_Bits',0,8,205,3,16,4,11
	.byte	'PD0',0,1
	.word	618
	.byte	3,5,2,35,0,11
	.byte	'PL0',0,1
	.word	618
	.byte	1,4,2,35,0,11
	.byte	'PD1',0,1
	.word	618
	.byte	3,1,2,35,0,11
	.byte	'PL1',0,1
	.word	618
	.byte	1,0,2,35,0,11
	.byte	'PD2',0,1
	.word	618
	.byte	3,5,2,35,1,11
	.byte	'PL2',0,1
	.word	618
	.byte	1,4,2,35,1,11
	.byte	'PD3',0,1
	.word	618
	.byte	3,1,2,35,1,11
	.byte	'PL3',0,1
	.word	618
	.byte	1,0,2,35,1,11
	.byte	'PD4',0,1
	.word	618
	.byte	3,5,2,35,2,11
	.byte	'PL4',0,1
	.word	618
	.byte	1,4,2,35,2,11
	.byte	'PD5',0,1
	.word	618
	.byte	3,1,2,35,2,11
	.byte	'PL5',0,1
	.word	618
	.byte	1,0,2,35,2,11
	.byte	'PD6',0,1
	.word	618
	.byte	3,5,2,35,3,11
	.byte	'PL6',0,1
	.word	618
	.byte	1,4,2,35,3,11
	.byte	'PD7',0,1
	.word	618
	.byte	3,1,2,35,3,11
	.byte	'PL7',0,1
	.word	618
	.byte	1,0,2,35,3,0,12,8,205,5,9,4,13
	.byte	'U',0
	.word	443
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	459
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	4021
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_PDR1_Bits',0,8,226,3,16,4,11
	.byte	'PD8',0,1
	.word	618
	.byte	3,5,2,35,0,11
	.byte	'PL8',0,1
	.word	618
	.byte	1,4,2,35,0,11
	.byte	'PD9',0,1
	.word	618
	.byte	3,1,2,35,0,11
	.byte	'PL9',0,1
	.word	618
	.byte	1,0,2,35,0,11
	.byte	'PD10',0,1
	.word	618
	.byte	3,5,2,35,1,11
	.byte	'PL10',0,1
	.word	618
	.byte	1,4,2,35,1,11
	.byte	'PD11',0,1
	.word	618
	.byte	3,1,2,35,1,11
	.byte	'PL11',0,1
	.word	618
	.byte	1,0,2,35,1,11
	.byte	'PD12',0,1
	.word	618
	.byte	3,5,2,35,2,11
	.byte	'PL12',0,1
	.word	618
	.byte	1,4,2,35,2,11
	.byte	'PD13',0,1
	.word	618
	.byte	3,1,2,35,2,11
	.byte	'PL13',0,1
	.word	618
	.byte	1,0,2,35,2,11
	.byte	'PD14',0,1
	.word	618
	.byte	3,5,2,35,3,11
	.byte	'PL14',0,1
	.word	618
	.byte	1,4,2,35,3,11
	.byte	'PD15',0,1
	.word	618
	.byte	3,1,2,35,3,11
	.byte	'PL15',0,1
	.word	618
	.byte	1,0,2,35,3,0,12,8,213,5,9,4,13
	.byte	'U',0
	.word	443
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	459
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	4325
	.byte	4,2,35,0,0,18,8
	.word	618
	.byte	19,7,0,10
	.byte	'_Ifx_P_ESR_Bits',0,8,88,16,4,11
	.byte	'EN0',0,1
	.word	618
	.byte	1,7,2,35,0,11
	.byte	'EN1',0,1
	.word	618
	.byte	1,6,2,35,0,11
	.byte	'EN2',0,1
	.word	618
	.byte	1,5,2,35,0,11
	.byte	'EN3',0,1
	.word	618
	.byte	1,4,2,35,0,11
	.byte	'EN4',0,1
	.word	618
	.byte	1,3,2,35,0,11
	.byte	'EN5',0,1
	.word	618
	.byte	1,2,2,35,0,11
	.byte	'EN6',0,1
	.word	618
	.byte	1,1,2,35,0,11
	.byte	'EN7',0,1
	.word	618
	.byte	1,0,2,35,0,11
	.byte	'EN8',0,1
	.word	618
	.byte	1,7,2,35,1,11
	.byte	'EN9',0,1
	.word	618
	.byte	1,6,2,35,1,11
	.byte	'EN10',0,1
	.word	618
	.byte	1,5,2,35,1,11
	.byte	'EN11',0,1
	.word	618
	.byte	1,4,2,35,1,11
	.byte	'EN12',0,1
	.word	618
	.byte	1,3,2,35,1,11
	.byte	'EN13',0,1
	.word	618
	.byte	1,2,2,35,1,11
	.byte	'EN14',0,1
	.word	618
	.byte	1,1,2,35,1,11
	.byte	'EN15',0,1
	.word	618
	.byte	1,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	635
	.byte	16,0,2,35,2,0,12,8,140,4,9,4,13
	.byte	'U',0
	.word	443
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	459
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	4650
	.byte	4,2,35,0,0,18,12
	.word	618
	.byte	19,11,0,10
	.byte	'_Ifx_P_PDISC_Bits',0,8,183,3,16,4,11
	.byte	'PDIS0',0,1
	.word	618
	.byte	1,7,2,35,0,11
	.byte	'PDIS1',0,1
	.word	618
	.byte	1,6,2,35,0,11
	.byte	'PDIS2',0,1
	.word	618
	.byte	1,5,2,35,0,11
	.byte	'PDIS3',0,1
	.word	618
	.byte	1,4,2,35,0,11
	.byte	'PDIS4',0,1
	.word	618
	.byte	1,3,2,35,0,11
	.byte	'PDIS5',0,1
	.word	618
	.byte	1,2,2,35,0,11
	.byte	'PDIS6',0,1
	.word	618
	.byte	1,1,2,35,0,11
	.byte	'PDIS7',0,1
	.word	618
	.byte	1,0,2,35,0,11
	.byte	'PDIS8',0,1
	.word	618
	.byte	1,7,2,35,1,11
	.byte	'PDIS9',0,1
	.word	618
	.byte	1,6,2,35,1,11
	.byte	'PDIS10',0,1
	.word	618
	.byte	1,5,2,35,1,11
	.byte	'PDIS11',0,1
	.word	618
	.byte	1,4,2,35,1,11
	.byte	'PDIS12',0,1
	.word	618
	.byte	1,3,2,35,1,11
	.byte	'PDIS13',0,1
	.word	618
	.byte	1,2,2,35,1,11
	.byte	'PDIS14',0,1
	.word	618
	.byte	1,1,2,35,1,11
	.byte	'PDIS15',0,1
	.word	618
	.byte	1,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	635
	.byte	16,0,2,35,2,0,12,8,197,5,9,4,13
	.byte	'U',0
	.word	443
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	459
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	4990
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_PCSR_Bits',0,8,165,3,16,4,11
	.byte	'SEL0',0,1
	.word	618
	.byte	1,7,2,35,0,11
	.byte	'SEL1',0,1
	.word	618
	.byte	1,6,2,35,0,11
	.byte	'SEL2',0,1
	.word	618
	.byte	1,5,2,35,0,11
	.byte	'SEL3',0,1
	.word	618
	.byte	1,4,2,35,0,11
	.byte	'SEL4',0,1
	.word	618
	.byte	1,3,2,35,0,11
	.byte	'SEL5',0,1
	.word	618
	.byte	1,2,2,35,0,11
	.byte	'SEL6',0,1
	.word	618
	.byte	1,1,2,35,0,11
	.byte	'SEL7',0,1
	.word	618
	.byte	1,0,2,35,0,11
	.byte	'reserved_8',0,1
	.word	618
	.byte	2,6,2,35,1,11
	.byte	'SEL10',0,1
	.word	618
	.byte	1,5,2,35,1,11
	.byte	'SEL11',0,1
	.word	618
	.byte	1,4,2,35,1,11
	.byte	'reserved_12',0,4
	.word	443
	.byte	19,1,2,35,0,11
	.byte	'LCK',0,1
	.word	618
	.byte	1,0,2,35,3,0,12,8,189,5,9,4,13
	.byte	'U',0
	.word	443
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	459
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	5356
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_OMSR0_Bits',0,8,206,2,16,4,11
	.byte	'PS0',0,1
	.word	618
	.byte	1,7,2,35,0,11
	.byte	'PS1',0,1
	.word	618
	.byte	1,6,2,35,0,11
	.byte	'PS2',0,1
	.word	618
	.byte	1,5,2,35,0,11
	.byte	'PS3',0,1
	.word	618
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,4
	.word	443
	.byte	28,0,2,35,0,0,12,8,149,5,9,4,13
	.byte	'U',0
	.word	443
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	459
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	5642
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_OMSR4_Bits',0,8,227,2,16,4,11
	.byte	'reserved_0',0,1
	.word	618
	.byte	4,4,2,35,0,11
	.byte	'PS4',0,1
	.word	618
	.byte	1,3,2,35,0,11
	.byte	'PS5',0,1
	.word	618
	.byte	1,2,2,35,0,11
	.byte	'PS6',0,1
	.word	618
	.byte	1,1,2,35,0,11
	.byte	'PS7',0,1
	.word	618
	.byte	1,0,2,35,0,11
	.byte	'reserved_8',0,4
	.word	443
	.byte	24,0,2,35,0,0,12,8,165,5,9,4,13
	.byte	'U',0
	.word	443
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	459
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	5789
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_OMSR8_Bits',0,8,238,2,16,4,11
	.byte	'reserved_0',0,1
	.word	618
	.byte	8,0,2,35,0,11
	.byte	'PS8',0,1
	.word	618
	.byte	1,7,2,35,1,11
	.byte	'PS9',0,1
	.word	618
	.byte	1,6,2,35,1,11
	.byte	'PS10',0,1
	.word	618
	.byte	1,5,2,35,1,11
	.byte	'PS11',0,1
	.word	618
	.byte	1,4,2,35,1,11
	.byte	'reserved_12',0,4
	.word	443
	.byte	20,0,2,35,0,0,12,8,173,5,9,4,13
	.byte	'U',0
	.word	443
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	459
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	5958
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_OMSR12_Bits',0,8,216,2,16,4,11
	.byte	'reserved_0',0,2
	.word	635
	.byte	12,4,2,35,0,11
	.byte	'PS12',0,1
	.word	618
	.byte	1,3,2,35,1,11
	.byte	'PS13',0,1
	.word	618
	.byte	1,2,2,35,1,11
	.byte	'PS14',0,1
	.word	618
	.byte	1,1,2,35,1,11
	.byte	'PS15',0,1
	.word	618
	.byte	1,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	635
	.byte	16,0,2,35,2,0,12,8,157,5,9,4,13
	.byte	'U',0
	.word	443
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	459
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	6130
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_OMCR0_Bits',0,8,232,1,16,4,11
	.byte	'reserved_0',0,2
	.word	635
	.byte	16,0,2,35,0,11
	.byte	'PCL0',0,1
	.word	618
	.byte	1,7,2,35,2,11
	.byte	'PCL1',0,1
	.word	618
	.byte	1,6,2,35,2,11
	.byte	'PCL2',0,1
	.word	618
	.byte	1,5,2,35,2,11
	.byte	'PCL3',0,1
	.word	618
	.byte	1,4,2,35,2,11
	.byte	'reserved_20',0,2
	.word	635
	.byte	12,0,2,35,2,0,12,8,229,4,9,4,13
	.byte	'U',0
	.word	443
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	459
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	6305
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_OMCR4_Bits',0,8,253,1,16,4,11
	.byte	'reserved_0',0,4
	.word	443
	.byte	20,12,2,35,0,11
	.byte	'PCL4',0,1
	.word	618
	.byte	1,3,2,35,2,11
	.byte	'PCL5',0,1
	.word	618
	.byte	1,2,2,35,2,11
	.byte	'PCL6',0,1
	.word	618
	.byte	1,1,2,35,2,11
	.byte	'PCL7',0,1
	.word	618
	.byte	1,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	618
	.byte	8,0,2,35,3,0,12,8,245,4,9,4,13
	.byte	'U',0
	.word	443
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	459
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	6479
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_OMCR8_Bits',0,8,136,2,16,4,11
	.byte	'reserved_0',0,4
	.word	443
	.byte	24,8,2,35,0,11
	.byte	'PCL8',0,1
	.word	618
	.byte	1,7,2,35,3,11
	.byte	'PCL9',0,1
	.word	618
	.byte	1,6,2,35,3,11
	.byte	'PCL10',0,1
	.word	618
	.byte	1,5,2,35,3,11
	.byte	'PCL11',0,1
	.word	618
	.byte	1,4,2,35,3,11
	.byte	'reserved_28',0,1
	.word	618
	.byte	4,0,2,35,3,0,12,8,253,4,9,4,13
	.byte	'U',0
	.word	443
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	459
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	6653
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_OMCR12_Bits',0,8,243,1,16,4,11
	.byte	'reserved_0',0,4
	.word	443
	.byte	28,4,2,35,0,11
	.byte	'PCL12',0,1
	.word	618
	.byte	1,3,2,35,3,11
	.byte	'PCL13',0,1
	.word	618
	.byte	1,2,2,35,3,11
	.byte	'PCL14',0,1
	.word	618
	.byte	1,1,2,35,3,11
	.byte	'PCL15',0,1
	.word	618
	.byte	1,0,2,35,3,0,12,8,237,4,9,4,13
	.byte	'U',0
	.word	443
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	459
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	6829
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_OMSR_Bits',0,8,249,2,16,4,11
	.byte	'PS0',0,1
	.word	618
	.byte	1,7,2,35,0,11
	.byte	'PS1',0,1
	.word	618
	.byte	1,6,2,35,0,11
	.byte	'PS2',0,1
	.word	618
	.byte	1,5,2,35,0,11
	.byte	'PS3',0,1
	.word	618
	.byte	1,4,2,35,0,11
	.byte	'PS4',0,1
	.word	618
	.byte	1,3,2,35,0,11
	.byte	'PS5',0,1
	.word	618
	.byte	1,2,2,35,0,11
	.byte	'PS6',0,1
	.word	618
	.byte	1,1,2,35,0,11
	.byte	'PS7',0,1
	.word	618
	.byte	1,0,2,35,0,11
	.byte	'PS8',0,1
	.word	618
	.byte	1,7,2,35,1,11
	.byte	'PS9',0,1
	.word	618
	.byte	1,6,2,35,1,11
	.byte	'PS10',0,1
	.word	618
	.byte	1,5,2,35,1,11
	.byte	'PS11',0,1
	.word	618
	.byte	1,4,2,35,1,11
	.byte	'PS12',0,1
	.word	618
	.byte	1,3,2,35,1,11
	.byte	'PS13',0,1
	.word	618
	.byte	1,2,2,35,1,11
	.byte	'PS14',0,1
	.word	618
	.byte	1,1,2,35,1,11
	.byte	'PS15',0,1
	.word	618
	.byte	1,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	635
	.byte	16,0,2,35,2,0,12,8,141,5,9,4,13
	.byte	'U',0
	.word	443
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	459
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	6985
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_OMCR_Bits',0,8,147,2,16,4,11
	.byte	'reserved_0',0,2
	.word	635
	.byte	16,0,2,35,0,11
	.byte	'PCL0',0,1
	.word	618
	.byte	1,7,2,35,2,11
	.byte	'PCL1',0,1
	.word	618
	.byte	1,6,2,35,2,11
	.byte	'PCL2',0,1
	.word	618
	.byte	1,5,2,35,2,11
	.byte	'PCL3',0,1
	.word	618
	.byte	1,4,2,35,2,11
	.byte	'PCL4',0,1
	.word	618
	.byte	1,3,2,35,2,11
	.byte	'PCL5',0,1
	.word	618
	.byte	1,2,2,35,2,11
	.byte	'PCL6',0,1
	.word	618
	.byte	1,1,2,35,2,11
	.byte	'PCL7',0,1
	.word	618
	.byte	1,0,2,35,2,11
	.byte	'PCL8',0,1
	.word	618
	.byte	1,7,2,35,3,11
	.byte	'PCL9',0,1
	.word	618
	.byte	1,6,2,35,3,11
	.byte	'PCL10',0,1
	.word	618
	.byte	1,5,2,35,3,11
	.byte	'PCL11',0,1
	.word	618
	.byte	1,4,2,35,3,11
	.byte	'PCL12',0,1
	.word	618
	.byte	1,3,2,35,3,11
	.byte	'PCL13',0,1
	.word	618
	.byte	1,2,2,35,3,11
	.byte	'PCL14',0,1
	.word	618
	.byte	1,1,2,35,3,11
	.byte	'PCL15',0,1
	.word	618
	.byte	1,0,2,35,3,0,12,8,221,4,9,4,13
	.byte	'U',0
	.word	443
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	459
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	7318
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_LPCR0_Bits',0,8,192,1,16,4,11
	.byte	'reserved_0',0,1
	.word	618
	.byte	1,7,2,35,0,11
	.byte	'PS1',0,1
	.word	618
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,4
	.word	443
	.byte	30,0,2,35,0,0,12,8,196,4,9,4,13
	.byte	'U',0
	.word	443
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	459
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	7666
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_LPCR1_Bits',0,8,200,1,16,4,11
	.byte	'reserved_0',0,1
	.word	618
	.byte	1,7,2,35,0,11
	.byte	'PS1',0,1
	.word	618
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,4
	.word	443
	.byte	30,0,2,35,0,0,10
	.byte	'_Ifx_P_LPCR1_P21_Bits',0,8,208,1,16,4,11
	.byte	'RDIS_CTRL',0,1
	.word	618
	.byte	1,7,2,35,0,11
	.byte	'RX_DIS',0,1
	.word	618
	.byte	1,6,2,35,0,11
	.byte	'TERM',0,1
	.word	618
	.byte	1,5,2,35,0,11
	.byte	'LRXTERM',0,1
	.word	618
	.byte	5,0,2,35,0,11
	.byte	'reserved_8',0,4
	.word	443
	.byte	24,0,2,35,0,0,12,8,204,4,9,4,13
	.byte	'U',0
	.word	443
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	459
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	7790
	.byte	4,2,35,0,13
	.byte	'B_P21',0
	.word	7874
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_LPCR2_Bits',0,8,218,1,16,4,11
	.byte	'reserved_0',0,1
	.word	618
	.byte	8,0,2,35,0,11
	.byte	'LVDSR',0,1
	.word	618
	.byte	1,7,2,35,1,11
	.byte	'LVDSRL',0,1
	.word	618
	.byte	1,6,2,35,1,11
	.byte	'reserved_10',0,1
	.word	618
	.byte	2,4,2,35,1,11
	.byte	'TDIS_CTRL',0,1
	.word	618
	.byte	1,3,2,35,1,11
	.byte	'TX_DIS',0,1
	.word	618
	.byte	1,2,2,35,1,11
	.byte	'TX_PD',0,1
	.word	618
	.byte	1,1,2,35,1,11
	.byte	'TX_PWDPD',0,1
	.word	618
	.byte	1,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	635
	.byte	16,0,2,35,2,0,12,8,213,4,9,4,13
	.byte	'U',0
	.word	443
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	459
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	8054
	.byte	4,2,35,0,0,18,76
	.word	618
	.byte	19,75,0,10
	.byte	'_Ifx_P_ACCEN1_Bits',0,8,82,16,4,11
	.byte	'reserved_0',0,4
	.word	443
	.byte	32,0,2,35,0,0,12,8,132,4,9,4,13
	.byte	'U',0
	.word	443
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	459
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	8307
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_ACCEN0_Bits',0,8,45,16,4,11
	.byte	'EN0',0,1
	.word	618
	.byte	1,7,2,35,0,11
	.byte	'EN1',0,1
	.word	618
	.byte	1,6,2,35,0,11
	.byte	'EN2',0,1
	.word	618
	.byte	1,5,2,35,0,11
	.byte	'EN3',0,1
	.word	618
	.byte	1,4,2,35,0,11
	.byte	'EN4',0,1
	.word	618
	.byte	1,3,2,35,0,11
	.byte	'EN5',0,1
	.word	618
	.byte	1,2,2,35,0,11
	.byte	'EN6',0,1
	.word	618
	.byte	1,1,2,35,0,11
	.byte	'EN7',0,1
	.word	618
	.byte	1,0,2,35,0,11
	.byte	'EN8',0,1
	.word	618
	.byte	1,7,2,35,1,11
	.byte	'EN9',0,1
	.word	618
	.byte	1,6,2,35,1,11
	.byte	'EN10',0,1
	.word	618
	.byte	1,5,2,35,1,11
	.byte	'EN11',0,1
	.word	618
	.byte	1,4,2,35,1,11
	.byte	'EN12',0,1
	.word	618
	.byte	1,3,2,35,1,11
	.byte	'EN13',0,1
	.word	618
	.byte	1,2,2,35,1,11
	.byte	'EN14',0,1
	.word	618
	.byte	1,1,2,35,1,11
	.byte	'EN15',0,1
	.word	618
	.byte	1,0,2,35,1,11
	.byte	'EN16',0,1
	.word	618
	.byte	1,7,2,35,2,11
	.byte	'EN17',0,1
	.word	618
	.byte	1,6,2,35,2,11
	.byte	'EN18',0,1
	.word	618
	.byte	1,5,2,35,2,11
	.byte	'EN19',0,1
	.word	618
	.byte	1,4,2,35,2,11
	.byte	'EN20',0,1
	.word	618
	.byte	1,3,2,35,2,11
	.byte	'EN21',0,1
	.word	618
	.byte	1,2,2,35,2,11
	.byte	'EN22',0,1
	.word	618
	.byte	1,1,2,35,2,11
	.byte	'EN23',0,1
	.word	618
	.byte	1,0,2,35,2,11
	.byte	'EN24',0,1
	.word	618
	.byte	1,7,2,35,3,11
	.byte	'EN25',0,1
	.word	618
	.byte	1,6,2,35,3,11
	.byte	'EN26',0,1
	.word	618
	.byte	1,5,2,35,3,11
	.byte	'EN27',0,1
	.word	618
	.byte	1,4,2,35,3,11
	.byte	'EN28',0,1
	.word	618
	.byte	1,3,2,35,3,11
	.byte	'EN29',0,1
	.word	618
	.byte	1,2,2,35,3,11
	.byte	'EN30',0,1
	.word	618
	.byte	1,1,2,35,3,11
	.byte	'EN31',0,1
	.word	618
	.byte	1,0,2,35,3,0,12,8,252,3,9,4,13
	.byte	'U',0
	.word	443
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	459
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	8394
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P',0,8,229,5,25,128,2,13
	.byte	'OUT',0
	.word	2092
	.byte	4,2,35,0,13
	.byte	'OMR',0
	.word	2663
	.byte	4,2,35,4,13
	.byte	'ID',0
	.word	2782
	.byte	4,2,35,8,13
	.byte	'reserved_C',0
	.word	2822
	.byte	4,2,35,12,13
	.byte	'IOCR0',0
	.word	3006
	.byte	4,2,35,16,13
	.byte	'IOCR4',0
	.word	3221
	.byte	4,2,35,20,13
	.byte	'IOCR8',0
	.word	3438
	.byte	4,2,35,24,13
	.byte	'IOCR12',0
	.word	3658
	.byte	4,2,35,28,13
	.byte	'reserved_20',0
	.word	2822
	.byte	4,2,35,32,13
	.byte	'IN',0
	.word	3972
	.byte	4,2,35,36,13
	.byte	'reserved_28',0
	.word	4012
	.byte	24,2,35,40,13
	.byte	'PDR0',0
	.word	4285
	.byte	4,2,35,64,13
	.byte	'PDR1',0
	.word	4601
	.byte	4,2,35,68,13
	.byte	'reserved_48',0
	.word	4641
	.byte	8,2,35,72,13
	.byte	'ESR',0
	.word	4941
	.byte	4,2,35,80,13
	.byte	'reserved_54',0
	.word	4981
	.byte	12,2,35,84,13
	.byte	'PDISC',0
	.word	5316
	.byte	4,2,35,96,13
	.byte	'PCSR',0
	.word	5602
	.byte	4,2,35,100,13
	.byte	'reserved_68',0
	.word	4641
	.byte	8,2,35,104,13
	.byte	'OMSR0',0
	.word	5749
	.byte	4,2,35,112,13
	.byte	'OMSR4',0
	.word	5918
	.byte	4,2,35,116,13
	.byte	'OMSR8',0
	.word	6090
	.byte	4,2,35,120,13
	.byte	'OMSR12',0
	.word	6265
	.byte	4,2,35,124,13
	.byte	'OMCR0',0
	.word	6439
	.byte	4,3,35,128,1,13
	.byte	'OMCR4',0
	.word	6613
	.byte	4,3,35,132,1,13
	.byte	'OMCR8',0
	.word	6789
	.byte	4,3,35,136,1,13
	.byte	'OMCR12',0
	.word	6945
	.byte	4,3,35,140,1,13
	.byte	'OMSR',0
	.word	7278
	.byte	4,3,35,144,1,13
	.byte	'OMCR',0
	.word	7626
	.byte	4,3,35,148,1,13
	.byte	'reserved_98',0
	.word	4641
	.byte	8,3,35,152,1,13
	.byte	'LPCR0',0
	.word	7750
	.byte	4,3,35,160,1,13
	.byte	'LPCR1',0
	.word	7999
	.byte	4,3,35,164,1,13
	.byte	'LPCR2',0
	.word	8258
	.byte	4,3,35,168,1,13
	.byte	'reserved_A4',0
	.word	8298
	.byte	76,3,35,172,1,13
	.byte	'ACCEN1',0
	.word	8354
	.byte	4,3,35,248,1,13
	.byte	'ACCEN0',0
	.word	8921
	.byte	4,3,35,252,1,0,14
	.word	8961
	.byte	3
	.word	9564
	.byte	15,7,83,9,1,16
	.byte	'IfxPort_InputMode_undefined',0,127,16
	.byte	'IfxPort_InputMode_noPullDevice',0,0,16
	.byte	'IfxPort_InputMode_pullDown',0,8,16
	.byte	'IfxPort_InputMode_pullUp',0,16,0,4
	.byte	'IfxPort_setPinModeInput',0,3,7,196,4,17,1,1,5
	.byte	'port',0,7,196,4,48
	.word	9569
	.byte	5
	.byte	'pinIndex',0,7,196,4,60
	.word	618
	.byte	5
	.byte	'mode',0,7,196,4,88
	.word	9574
	.byte	6,0,15,7,134,1,9,1,16
	.byte	'IfxPort_OutputMode_pushPull',0,128,1,16
	.byte	'IfxPort_OutputMode_openDrain',0,192,1,0,15,7,120,9,1,16
	.byte	'IfxPort_OutputIdx_general',0,128,1,16
	.byte	'IfxPort_OutputIdx_alt1',0,136,1,16
	.byte	'IfxPort_OutputIdx_alt2',0,144,1,16
	.byte	'IfxPort_OutputIdx_alt3',0,152,1,16
	.byte	'IfxPort_OutputIdx_alt4',0,160,1,16
	.byte	'IfxPort_OutputIdx_alt5',0,168,1,16
	.byte	'IfxPort_OutputIdx_alt6',0,176,1,16
	.byte	'IfxPort_OutputIdx_alt7',0,184,1,0,4
	.byte	'IfxPort_setPinModeOutput',0,3,7,202,4,17,1,1,5
	.byte	'port',0,7,202,4,49
	.word	9569
	.byte	5
	.byte	'pinIndex',0,7,202,4,61
	.word	618
	.byte	5
	.byte	'mode',0,7,202,4,90
	.word	9779
	.byte	5
	.byte	'index',0,7,202,4,114
	.word	9849
	.byte	6,0,15,7,172,1,9,4,16
	.byte	'IfxPort_State_notChanged',0,0,16
	.byte	'IfxPort_State_high',0,1,16
	.byte	'IfxPort_State_low',0,128,128,4,16
	.byte	'IfxPort_State_toggled',0,129,128,4,0,4
	.byte	'IfxPort_setPinState',0,3,7,208,4,17,1,1,5
	.byte	'port',0,7,208,4,44
	.word	9569
	.byte	5
	.byte	'pinIndex',0,7,208,4,56
	.word	618
	.byte	5
	.byte	'action',0,7,208,4,80
	.word	10162
	.byte	6,0,10
	.byte	'_Ifx_SRC_SRCR_Bits',0,10,45,16,4,11
	.byte	'SRPN',0,1
	.word	618
	.byte	8,0,2,35,0,11
	.byte	'reserved_8',0,1
	.word	618
	.byte	2,6,2,35,1,11
	.byte	'SRE',0,1
	.word	618
	.byte	1,5,2,35,1,11
	.byte	'TOS',0,1
	.word	618
	.byte	2,3,2,35,1,11
	.byte	'reserved_13',0,1
	.word	618
	.byte	3,0,2,35,1,11
	.byte	'ECC',0,1
	.word	618
	.byte	6,2,2,35,2,11
	.byte	'reserved_22',0,1
	.word	618
	.byte	2,0,2,35,2,11
	.byte	'SRR',0,1
	.word	618
	.byte	1,7,2,35,3,11
	.byte	'CLRR',0,1
	.word	618
	.byte	1,6,2,35,3,11
	.byte	'SETR',0,1
	.word	618
	.byte	1,5,2,35,3,11
	.byte	'IOV',0,1
	.word	618
	.byte	1,4,2,35,3,11
	.byte	'IOVCLR',0,1
	.word	618
	.byte	1,3,2,35,3,11
	.byte	'SWS',0,1
	.word	618
	.byte	1,2,2,35,3,11
	.byte	'SWSCLR',0,1
	.word	618
	.byte	1,1,2,35,3,11
	.byte	'reserved_31',0,1
	.word	618
	.byte	1,0,2,35,3,0,12,10,70,9,4,13
	.byte	'U',0
	.word	443
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	459
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	10343
	.byte	4,2,35,0,0,14
	.word	10633
.L349:
	.byte	3
	.word	10672
	.byte	4
	.byte	'IfxSrc_clearRequest',0,3,9,250,1,17,1,1,5
	.byte	'src',0,9,250,1,60
	.word	10677
	.byte	6,0,10
	.byte	'_Ifx_ASCLIN_CLC_Bits',0,12,118,16,4,11
	.byte	'DISR',0,1
	.word	618
	.byte	1,7,2,35,0,11
	.byte	'DISS',0,1
	.word	618
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	618
	.byte	1,5,2,35,0,11
	.byte	'EDIS',0,1
	.word	618
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,4
	.word	443
	.byte	28,0,2,35,0,0,12,12,207,3,9,4,13
	.byte	'U',0
	.word	443
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	459
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	10725
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_ASCLIN_IOCR_Bits',0,12,169,2,16,4,11
	.byte	'ALTI',0,1
	.word	618
	.byte	3,5,2,35,0,11
	.byte	'reserved_3',0,1
	.word	618
	.byte	1,4,2,35,0,11
	.byte	'DEPTH',0,2
	.word	635
	.byte	6,6,2,35,0,11
	.byte	'reserved_10',0,1
	.word	618
	.byte	6,0,2,35,1,11
	.byte	'CTS',0,1
	.word	618
	.byte	2,6,2,35,2,11
	.byte	'reserved_18',0,2
	.word	635
	.byte	7,7,2,35,2,11
	.byte	'RCPOL',0,1
	.word	618
	.byte	1,6,2,35,3,11
	.byte	'CPOL',0,1
	.word	618
	.byte	1,5,2,35,3,11
	.byte	'SPOL',0,1
	.word	618
	.byte	1,4,2,35,3,11
	.byte	'LB',0,1
	.word	618
	.byte	1,3,2,35,3,11
	.byte	'CTSEN',0,1
	.word	618
	.byte	1,2,2,35,3,11
	.byte	'RXM',0,1
	.word	618
	.byte	1,1,2,35,3,11
	.byte	'TXM',0,1
	.word	618
	.byte	1,0,2,35,3,0,12,12,151,4,9,4,13
	.byte	'U',0
	.word	443
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	459
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	10884
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_ASCLIN_ID_Bits',0,12,161,2,16,4,11
	.byte	'MODREV',0,1
	.word	618
	.byte	8,0,2,35,0,11
	.byte	'MODTYPE',0,1
	.word	618
	.byte	8,0,2,35,1,11
	.byte	'MODNUMBER',0,2
	.word	635
	.byte	16,0,2,35,2,0,12,12,143,4,9,4,13
	.byte	'U',0
	.word	443
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	459
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	11179
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_ASCLIN_TXFIFOCON_Bits',0,12,149,3,16,4,11
	.byte	'FLUSH',0,1
	.word	618
	.byte	1,7,2,35,0,11
	.byte	'ENO',0,1
	.word	618
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	618
	.byte	4,2,2,35,0,11
	.byte	'INW',0,1
	.word	618
	.byte	2,0,2,35,0,11
	.byte	'INTLEVEL',0,1
	.word	618
	.byte	4,4,2,35,1,11
	.byte	'reserved_12',0,1
	.word	618
	.byte	4,0,2,35,1,11
	.byte	'FILL',0,1
	.word	618
	.byte	5,3,2,35,2,11
	.byte	'reserved_21',0,2
	.word	635
	.byte	11,0,2,35,2,0,12,12,247,4,9,4,13
	.byte	'U',0
	.word	443
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	459
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	11304
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_ASCLIN_RXFIFOCON_Bits',0,12,129,3,16,4,11
	.byte	'FLUSH',0,1
	.word	618
	.byte	1,7,2,35,0,11
	.byte	'ENI',0,1
	.word	618
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	618
	.byte	4,2,2,35,0,11
	.byte	'OUTW',0,1
	.word	618
	.byte	2,0,2,35,0,11
	.byte	'INTLEVEL',0,1
	.word	618
	.byte	4,4,2,35,1,11
	.byte	'reserved_12',0,1
	.word	618
	.byte	4,0,2,35,1,11
	.byte	'FILL',0,1
	.word	618
	.byte	5,3,2,35,2,11
	.byte	'reserved_21',0,2
	.word	635
	.byte	10,1,2,35,2,11
	.byte	'BUF',0,1
	.word	618
	.byte	1,0,2,35,3,0,12,12,231,4,9,4,13
	.byte	'U',0
	.word	443
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	459
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	11529
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_ASCLIN_BITCON_Bits',0,12,88,16,4,11
	.byte	'PRESCALER',0,2
	.word	635
	.byte	12,4,2,35,0,11
	.byte	'reserved_12',0,1
	.word	618
	.byte	4,0,2,35,1,11
	.byte	'OVERSAMPLING',0,1
	.word	618
	.byte	4,4,2,35,2,11
	.byte	'reserved_20',0,1
	.word	618
	.byte	4,0,2,35,2,11
	.byte	'SAMPLEPOINT',0,1
	.word	618
	.byte	4,4,2,35,3,11
	.byte	'reserved_28',0,1
	.word	618
	.byte	3,1,2,35,3,11
	.byte	'SM',0,1
	.word	618
	.byte	1,0,2,35,3,0,12,12,183,3,9,4,13
	.byte	'U',0
	.word	443
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	459
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	11770
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_ASCLIN_FRAMECON_Bits',0,12,145,2,16,4,11
	.byte	'reserved_0',0,1
	.word	618
	.byte	6,2,2,35,0,11
	.byte	'IDLE',0,2
	.word	635
	.byte	3,7,2,35,0,11
	.byte	'STOP',0,1
	.word	618
	.byte	3,4,2,35,1,11
	.byte	'LEAD',0,1
	.word	618
	.byte	3,1,2,35,1,11
	.byte	'reserved_15',0,1
	.word	618
	.byte	1,0,2,35,1,11
	.byte	'MODE',0,1
	.word	618
	.byte	2,6,2,35,2,11
	.byte	'reserved_18',0,2
	.word	635
	.byte	10,4,2,35,2,11
	.byte	'MSB',0,1
	.word	618
	.byte	1,3,2,35,3,11
	.byte	'CEN',0,1
	.word	618
	.byte	1,2,2,35,3,11
	.byte	'PEN',0,1
	.word	618
	.byte	1,1,2,35,3,11
	.byte	'ODD',0,1
	.word	618
	.byte	1,0,2,35,3,0,12,12,135,4,9,4,13
	.byte	'U',0
	.word	443
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	459
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	11991
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_ASCLIN_DATCON_Bits',0,12,136,1,16,4,11
	.byte	'DATLEN',0,1
	.word	618
	.byte	4,4,2,35,0,11
	.byte	'reserved_4',0,2
	.word	635
	.byte	9,3,2,35,0,11
	.byte	'HO',0,1
	.word	618
	.byte	1,2,2,35,1,11
	.byte	'RM',0,1
	.word	618
	.byte	1,1,2,35,1,11
	.byte	'CSM',0,1
	.word	618
	.byte	1,0,2,35,1,11
	.byte	'RESPONSE',0,1
	.word	618
	.byte	8,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	618
	.byte	8,0,2,35,3,0,12,12,223,3,9,4,13
	.byte	'U',0
	.word	443
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	459
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	12256
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_ASCLIN_BRG_Bits',0,12,109,16,4,11
	.byte	'DENOMINATOR',0,2
	.word	635
	.byte	12,4,2,35,0,11
	.byte	'reserved_12',0,1
	.word	618
	.byte	4,0,2,35,1,11
	.byte	'NUMERATOR',0,2
	.word	635
	.byte	12,4,2,35,2,11
	.byte	'reserved_28',0,1
	.word	618
	.byte	4,0,2,35,3,0,12,12,199,3,9,4,13
	.byte	'U',0
	.word	443
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	459
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	12453
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_ASCLIN_BRD_Bits',0,12,100,16,4,11
	.byte	'LOWERLIMIT',0,1
	.word	618
	.byte	8,0,2,35,0,11
	.byte	'UPPERLIMIT',0,1
	.word	618
	.byte	8,0,2,35,1,11
	.byte	'MEASURED',0,2
	.word	635
	.byte	12,4,2,35,2,11
	.byte	'reserved_28',0,1
	.word	618
	.byte	4,0,2,35,3,0,12,12,191,3,9,4,13
	.byte	'U',0
	.word	443
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	459
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	12610
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_ASCLIN_LIN_CON_Bits',0,12,216,2,16,4,11
	.byte	'reserved_0',0,4
	.word	443
	.byte	23,9,2,35,0,11
	.byte	'CSI',0,1
	.word	618
	.byte	1,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	618
	.byte	1,7,2,35,3,11
	.byte	'CSEN',0,1
	.word	618
	.byte	1,6,2,35,3,11
	.byte	'MS',0,1
	.word	618
	.byte	1,5,2,35,3,11
	.byte	'ABD',0,1
	.word	618
	.byte	1,4,2,35,3,11
	.byte	'reserved_28',0,1
	.word	618
	.byte	4,0,2,35,3,0,12,12,191,4,9,4,13
	.byte	'U',0
	.word	443
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	459
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	12764
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_ASCLIN_LIN_BTIMER_Bits',0,12,209,2,16,4,11
	.byte	'BREAK',0,1
	.word	618
	.byte	6,2,2,35,0,11
	.byte	'reserved_6',0,4
	.word	443
	.byte	26,0,2,35,0,0,12,12,183,4,9,4,13
	.byte	'U',0
	.word	443
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	459
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	12964
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_ASCLIN_LIN_HTIMER_Bits',0,12,228,2,16,4,11
	.byte	'HEADER',0,1
	.word	618
	.byte	8,0,2,35,0,11
	.byte	'reserved_8',0,4
	.word	443
	.byte	24,0,2,35,0,0,12,12,199,4,9,4,13
	.byte	'U',0
	.word	443
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	459
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	13078
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_ASCLIN_LIN',0,12,135,5,25,12,13
	.byte	'CON',0
	.word	12924
	.byte	4,2,35,0,13
	.byte	'BTIMER',0
	.word	13038
	.byte	4,2,35,4,13
	.byte	'HTIMER',0
	.word	13153
	.byte	4,2,35,8,0,14
	.word	13193
	.byte	10
	.byte	'_Ifx_ASCLIN_FLAGS_Bits',0,12,148,1,16,4,11
	.byte	'TH',0,1
	.word	618
	.byte	1,7,2,35,0,11
	.byte	'TR',0,1
	.word	618
	.byte	1,6,2,35,0,11
	.byte	'RH',0,1
	.word	618
	.byte	1,5,2,35,0,11
	.byte	'RR',0,1
	.word	618
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,1
	.word	618
	.byte	1,3,2,35,0,11
	.byte	'FED',0,1
	.word	618
	.byte	1,2,2,35,0,11
	.byte	'RED',0,1
	.word	618
	.byte	1,1,2,35,0,11
	.byte	'reserved_7',0,2
	.word	635
	.byte	6,3,2,35,0,11
	.byte	'TWRQ',0,1
	.word	618
	.byte	1,2,2,35,1,11
	.byte	'THRQ',0,1
	.word	618
	.byte	1,1,2,35,1,11
	.byte	'TRRQ',0,1
	.word	618
	.byte	1,0,2,35,1,11
	.byte	'PE',0,1
	.word	618
	.byte	1,7,2,35,2,11
	.byte	'TC',0,1
	.word	618
	.byte	1,6,2,35,2,11
	.byte	'FE',0,1
	.word	618
	.byte	1,5,2,35,2,11
	.byte	'HT',0,1
	.word	618
	.byte	1,4,2,35,2,11
	.byte	'RT',0,1
	.word	618
	.byte	1,3,2,35,2,11
	.byte	'BD',0,1
	.word	618
	.byte	1,2,2,35,2,11
	.byte	'LP',0,1
	.word	618
	.byte	1,1,2,35,2,11
	.byte	'LA',0,1
	.word	618
	.byte	1,0,2,35,2,11
	.byte	'LC',0,1
	.word	618
	.byte	1,7,2,35,3,11
	.byte	'CE',0,1
	.word	618
	.byte	1,6,2,35,3,11
	.byte	'RFO',0,1
	.word	618
	.byte	1,5,2,35,3,11
	.byte	'RFU',0,1
	.word	618
	.byte	1,4,2,35,3,11
	.byte	'RFL',0,1
	.word	618
	.byte	1,3,2,35,3,11
	.byte	'reserved_29',0,1
	.word	618
	.byte	1,2,2,35,3,11
	.byte	'TFO',0,1
	.word	618
	.byte	1,1,2,35,3,11
	.byte	'TFL',0,1
	.word	618
	.byte	1,0,2,35,3,0,12,12,231,3,9,4,13
	.byte	'U',0
	.word	443
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	459
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	13266
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_ASCLIN_FLAGSSET_Bits',0,12,241,1,16,4,11
	.byte	'THS',0,1
	.word	618
	.byte	1,7,2,35,0,11
	.byte	'TRS',0,1
	.word	618
	.byte	1,6,2,35,0,11
	.byte	'RHS',0,1
	.word	618
	.byte	1,5,2,35,0,11
	.byte	'RRS',0,1
	.word	618
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,1
	.word	618
	.byte	1,3,2,35,0,11
	.byte	'FEDS',0,1
	.word	618
	.byte	1,2,2,35,0,11
	.byte	'REDS',0,1
	.word	618
	.byte	1,1,2,35,0,11
	.byte	'reserved_7',0,2
	.word	635
	.byte	6,3,2,35,0,11
	.byte	'TWRQS',0,1
	.word	618
	.byte	1,2,2,35,1,11
	.byte	'THRQS',0,1
	.word	618
	.byte	1,1,2,35,1,11
	.byte	'TRRQS',0,1
	.word	618
	.byte	1,0,2,35,1,11
	.byte	'PES',0,1
	.word	618
	.byte	1,7,2,35,2,11
	.byte	'TCS',0,1
	.word	618
	.byte	1,6,2,35,2,11
	.byte	'FES',0,1
	.word	618
	.byte	1,5,2,35,2,11
	.byte	'HTS',0,1
	.word	618
	.byte	1,4,2,35,2,11
	.byte	'RTS',0,1
	.word	618
	.byte	1,3,2,35,2,11
	.byte	'BDS',0,1
	.word	618
	.byte	1,2,2,35,2,11
	.byte	'LPS',0,1
	.word	618
	.byte	1,1,2,35,2,11
	.byte	'LAS',0,1
	.word	618
	.byte	1,0,2,35,2,11
	.byte	'LCS',0,1
	.word	618
	.byte	1,7,2,35,3,11
	.byte	'CES',0,1
	.word	618
	.byte	1,6,2,35,3,11
	.byte	'RFOS',0,1
	.word	618
	.byte	1,5,2,35,3,11
	.byte	'RFUS',0,1
	.word	618
	.byte	1,4,2,35,3,11
	.byte	'RFLS',0,1
	.word	618
	.byte	1,3,2,35,3,11
	.byte	'reserved_29',0,1
	.word	618
	.byte	1,2,2,35,3,11
	.byte	'TFOS',0,1
	.word	618
	.byte	1,1,2,35,3,11
	.byte	'TFLS',0,1
	.word	618
	.byte	1,0,2,35,3,0,12,12,255,3,9,4,13
	.byte	'U',0
	.word	443
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	459
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	13752
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_ASCLIN_FLAGSCLEAR_Bits',0,12,180,1,16,4,11
	.byte	'THC',0,1
	.word	618
	.byte	1,7,2,35,0,11
	.byte	'TRC',0,1
	.word	618
	.byte	1,6,2,35,0,11
	.byte	'RHC',0,1
	.word	618
	.byte	1,5,2,35,0,11
	.byte	'RRC',0,1
	.word	618
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,1
	.word	618
	.byte	1,3,2,35,0,11
	.byte	'FEDC',0,1
	.word	618
	.byte	1,2,2,35,0,11
	.byte	'REDC',0,1
	.word	618
	.byte	1,1,2,35,0,11
	.byte	'reserved_7',0,2
	.word	635
	.byte	6,3,2,35,0,11
	.byte	'TWRQC',0,1
	.word	618
	.byte	1,2,2,35,1,11
	.byte	'THRQC',0,1
	.word	618
	.byte	1,1,2,35,1,11
	.byte	'TRRQC',0,1
	.word	618
	.byte	1,0,2,35,1,11
	.byte	'PEC',0,1
	.word	618
	.byte	1,7,2,35,2,11
	.byte	'TCC',0,1
	.word	618
	.byte	1,6,2,35,2,11
	.byte	'FEC',0,1
	.word	618
	.byte	1,5,2,35,2,11
	.byte	'HTC',0,1
	.word	618
	.byte	1,4,2,35,2,11
	.byte	'RTC',0,1
	.word	618
	.byte	1,3,2,35,2,11
	.byte	'BDC',0,1
	.word	618
	.byte	1,2,2,35,2,11
	.byte	'LPC',0,1
	.word	618
	.byte	1,1,2,35,2,11
	.byte	'LAC',0,1
	.word	618
	.byte	1,0,2,35,2,11
	.byte	'LCC',0,1
	.word	618
	.byte	1,7,2,35,3,11
	.byte	'CEC',0,1
	.word	618
	.byte	1,6,2,35,3,11
	.byte	'RFOC',0,1
	.word	618
	.byte	1,5,2,35,3,11
	.byte	'RFUC',0,1
	.word	618
	.byte	1,4,2,35,3,11
	.byte	'RFLC',0,1
	.word	618
	.byte	1,3,2,35,3,11
	.byte	'reserved_29',0,1
	.word	618
	.byte	1,2,2,35,3,11
	.byte	'TFOC',0,1
	.word	618
	.byte	1,1,2,35,3,11
	.byte	'TFLC',0,1
	.word	618
	.byte	1,0,2,35,3,0,12,12,239,3,9,4,13
	.byte	'U',0
	.word	443
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	459
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	14265
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_ASCLIN_FLAGSENABLE_Bits',0,12,212,1,16,4,11
	.byte	'THE',0,1
	.word	618
	.byte	1,7,2,35,0,11
	.byte	'TRE',0,1
	.word	618
	.byte	1,6,2,35,0,11
	.byte	'RHE',0,1
	.word	618
	.byte	1,5,2,35,0,11
	.byte	'RRE',0,1
	.word	618
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,1
	.word	618
	.byte	1,3,2,35,0,11
	.byte	'FEDE',0,1
	.word	618
	.byte	1,2,2,35,0,11
	.byte	'REDE',0,1
	.word	618
	.byte	1,1,2,35,0,11
	.byte	'reserved_7',0,2
	.word	635
	.byte	9,0,2,35,0,11
	.byte	'PEE',0,1
	.word	618
	.byte	1,7,2,35,2,11
	.byte	'TCE',0,1
	.word	618
	.byte	1,6,2,35,2,11
	.byte	'FEE',0,1
	.word	618
	.byte	1,5,2,35,2,11
	.byte	'HTE',0,1
	.word	618
	.byte	1,4,2,35,2,11
	.byte	'RTE',0,1
	.word	618
	.byte	1,3,2,35,2,11
	.byte	'BDE',0,1
	.word	618
	.byte	1,2,2,35,2,11
	.byte	'LPE',0,1
	.word	618
	.byte	1,1,2,35,2,11
	.byte	'ABE',0,1
	.word	618
	.byte	1,0,2,35,2,11
	.byte	'LCE',0,1
	.word	618
	.byte	1,7,2,35,3,11
	.byte	'CEE',0,1
	.word	618
	.byte	1,6,2,35,3,11
	.byte	'RFOE',0,1
	.word	618
	.byte	1,5,2,35,3,11
	.byte	'RFUE',0,1
	.word	618
	.byte	1,4,2,35,3,11
	.byte	'RFLE',0,1
	.word	618
	.byte	1,3,2,35,3,11
	.byte	'reserved_29',0,1
	.word	618
	.byte	1,2,2,35,3,11
	.byte	'TFOE',0,1
	.word	618
	.byte	1,1,2,35,3,11
	.byte	'TFLE',0,1
	.word	618
	.byte	1,0,2,35,3,0,12,12,247,3,9,4,13
	.byte	'U',0
	.word	443
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	459
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	14780
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_ASCLIN_TXDATA_Bits',0,12,143,3,16,4,11
	.byte	'DATA',0,4
	.word	443
	.byte	32,0,2,35,0,0,12,12,239,4,9,4,13
	.byte	'U',0
	.word	443
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	459
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	15245
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_ASCLIN_RXDATA_Bits',0,12,245,2,16,4,11
	.byte	'DATA',0,4
	.word	443
	.byte	32,0,2,35,0,0,12,12,215,4,9,4,13
	.byte	'U',0
	.word	443
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	459
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	15332
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_ASCLIN_CSR_Bits',0,12,128,1,16,4,11
	.byte	'CLKSEL',0,1
	.word	618
	.byte	5,3,2,35,0,11
	.byte	'reserved_5',0,4
	.word	443
	.byte	26,1,2,35,0,11
	.byte	'CON',0,1
	.word	618
	.byte	1,0,2,35,3,0,12,12,215,3,9,4,13
	.byte	'U',0
	.word	443
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	459
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	15419
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_ASCLIN_RXDATAD_Bits',0,12,251,2,16,4,11
	.byte	'DATA',0,4
	.word	443
	.byte	32,0,2,35,0,0,12,12,223,4,9,4,13
	.byte	'U',0
	.word	443
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	459
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	15542
	.byte	4,2,35,0,0,18,148,1
	.word	618
	.byte	19,147,1,0,10
	.byte	'_Ifx_ASCLIN_OCS_Bits',0,12,235,2,16,4,11
	.byte	'reserved_0',0,4
	.word	443
	.byte	24,8,2,35,0,11
	.byte	'SUS',0,1
	.word	618
	.byte	4,4,2,35,3,11
	.byte	'SUS_P',0,1
	.word	618
	.byte	1,3,2,35,3,11
	.byte	'SUSSTA',0,1
	.word	618
	.byte	1,2,2,35,3,11
	.byte	'reserved_30',0,1
	.word	618
	.byte	2,0,2,35,3,0,12,12,207,4,9,4,13
	.byte	'U',0
	.word	443
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	459
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	15641
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_ASCLIN_KRSTCLR_Bits',0,12,202,2,16,4,11
	.byte	'CLR',0,1
	.word	618
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,4
	.word	443
	.byte	31,0,2,35,0,0,12,12,175,4,9,4,13
	.byte	'U',0
	.word	443
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	459
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	15804
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_ASCLIN_KRST1_Bits',0,12,195,2,16,4,11
	.byte	'RST',0,1
	.word	618
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,4
	.word	443
	.byte	31,0,2,35,0,0,12,12,167,4,9,4,13
	.byte	'U',0
	.word	443
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	459
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	15913
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_ASCLIN_KRST0_Bits',0,12,187,2,16,4,11
	.byte	'RST',0,1
	.word	618
	.byte	1,7,2,35,0,11
	.byte	'RSTSTAT',0,1
	.word	618
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,4
	.word	443
	.byte	30,0,2,35,0,0,12,12,159,4,9,4,13
	.byte	'U',0
	.word	443
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	459
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	16020
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_ASCLIN_ACCEN1_Bits',0,12,82,16,4,11
	.byte	'reserved_0',0,4
	.word	443
	.byte	32,0,2,35,0,0,12,12,175,3,9,4,13
	.byte	'U',0
	.word	443
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	459
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	16146
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_ASCLIN_ACCEN0_Bits',0,12,45,16,4,11
	.byte	'EN0',0,1
	.word	618
	.byte	1,7,2,35,0,11
	.byte	'EN1',0,1
	.word	618
	.byte	1,6,2,35,0,11
	.byte	'EN2',0,1
	.word	618
	.byte	1,5,2,35,0,11
	.byte	'EN3',0,1
	.word	618
	.byte	1,4,2,35,0,11
	.byte	'EN4',0,1
	.word	618
	.byte	1,3,2,35,0,11
	.byte	'EN5',0,1
	.word	618
	.byte	1,2,2,35,0,11
	.byte	'EN6',0,1
	.word	618
	.byte	1,1,2,35,0,11
	.byte	'EN7',0,1
	.word	618
	.byte	1,0,2,35,0,11
	.byte	'EN8',0,1
	.word	618
	.byte	1,7,2,35,1,11
	.byte	'EN9',0,1
	.word	618
	.byte	1,6,2,35,1,11
	.byte	'EN10',0,1
	.word	618
	.byte	1,5,2,35,1,11
	.byte	'EN11',0,1
	.word	618
	.byte	1,4,2,35,1,11
	.byte	'EN12',0,1
	.word	618
	.byte	1,3,2,35,1,11
	.byte	'EN13',0,1
	.word	618
	.byte	1,2,2,35,1,11
	.byte	'EN14',0,1
	.word	618
	.byte	1,1,2,35,1,11
	.byte	'EN15',0,1
	.word	618
	.byte	1,0,2,35,1,11
	.byte	'EN16',0,1
	.word	618
	.byte	1,7,2,35,2,11
	.byte	'EN17',0,1
	.word	618
	.byte	1,6,2,35,2,11
	.byte	'EN18',0,1
	.word	618
	.byte	1,5,2,35,2,11
	.byte	'EN19',0,1
	.word	618
	.byte	1,4,2,35,2,11
	.byte	'EN20',0,1
	.word	618
	.byte	1,3,2,35,2,11
	.byte	'EN21',0,1
	.word	618
	.byte	1,2,2,35,2,11
	.byte	'EN22',0,1
	.word	618
	.byte	1,1,2,35,2,11
	.byte	'EN23',0,1
	.word	618
	.byte	1,0,2,35,2,11
	.byte	'EN24',0,1
	.word	618
	.byte	1,7,2,35,3,11
	.byte	'EN25',0,1
	.word	618
	.byte	1,6,2,35,3,11
	.byte	'EN26',0,1
	.word	618
	.byte	1,5,2,35,3,11
	.byte	'EN27',0,1
	.word	618
	.byte	1,4,2,35,3,11
	.byte	'EN28',0,1
	.word	618
	.byte	1,3,2,35,3,11
	.byte	'EN29',0,1
	.word	618
	.byte	1,2,2,35,3,11
	.byte	'EN30',0,1
	.word	618
	.byte	1,1,2,35,3,11
	.byte	'EN31',0,1
	.word	618
	.byte	1,0,2,35,3,0,12,12,167,3,9,4,13
	.byte	'U',0
	.word	443
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	459
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	16238
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_ASCLIN',0,12,153,5,25,128,2,13
	.byte	'CLC',0
	.word	10844
	.byte	4,2,35,0,13
	.byte	'IOCR',0
	.word	11139
	.byte	4,2,35,4,13
	.byte	'ID',0
	.word	11264
	.byte	4,2,35,8,13
	.byte	'TXFIFOCON',0
	.word	11489
	.byte	4,2,35,12,13
	.byte	'RXFIFOCON',0
	.word	11730
	.byte	4,2,35,16,13
	.byte	'BITCON',0
	.word	11951
	.byte	4,2,35,20,13
	.byte	'FRAMECON',0
	.word	12216
	.byte	4,2,35,24,13
	.byte	'DATCON',0
	.word	12413
	.byte	4,2,35,28,13
	.byte	'BRG',0
	.word	12570
	.byte	4,2,35,32,13
	.byte	'BRD',0
	.word	12724
	.byte	4,2,35,36,13
	.byte	'LIN',0
	.word	13261
	.byte	12,2,35,40,13
	.byte	'FLAGS',0
	.word	13712
	.byte	4,2,35,52,13
	.byte	'FLAGSSET',0
	.word	14225
	.byte	4,2,35,56,13
	.byte	'FLAGSCLEAR',0
	.word	14740
	.byte	4,2,35,60,13
	.byte	'FLAGSENABLE',0
	.word	15205
	.byte	4,2,35,64,13
	.byte	'TXDATA',0
	.word	15292
	.byte	4,2,35,68,13
	.byte	'RXDATA',0
	.word	15379
	.byte	4,2,35,72,13
	.byte	'CSR',0
	.word	15502
	.byte	4,2,35,76,13
	.byte	'RXDATAD',0
	.word	15590
	.byte	4,2,35,80,13
	.byte	'reserved_54',0
	.word	15630
	.byte	148,1,2,35,84,13
	.byte	'OCS',0
	.word	15764
	.byte	4,3,35,232,1,13
	.byte	'KRSTCLR',0
	.word	15873
	.byte	4,3,35,236,1,13
	.byte	'KRST1',0
	.word	15980
	.byte	4,3,35,240,1,13
	.byte	'KRST0',0
	.word	16106
	.byte	4,3,35,244,1,13
	.byte	'ACCEN1',0
	.word	16198
	.byte	4,3,35,248,1,13
	.byte	'ACCEN0',0
	.word	16770
	.byte	4,3,35,252,1,0,14
	.word	16810
.L244:
	.byte	3
	.word	17252
.L405:
	.byte	4
	.byte	'IfxAsclin_setDenominator',0,3,11,181,17,17,1,1
.L407:
	.byte	5
	.byte	'asclin',0,11,181,17,54
	.word	17257
.L409:
	.byte	5
	.byte	'denominator',0,11,181,17,69
	.word	635
.L411:
	.byte	6,0
.L316:
	.byte	4
	.byte	'IfxAsclin_setDisableModuleRequest',0,3,11,187,17,17,1,1
.L319:
	.byte	5
	.byte	'asclin',0,11,187,17,63
	.word	17257
.L321:
	.byte	6,0
.L343:
	.byte	4
	.byte	'IfxAsclin_setEnableModuleRequest',0,3,11,193,17,17,1,1
.L346:
	.byte	5
	.byte	'asclin',0,11,193,17,62
	.word	17257
.L348:
	.byte	6,0
.L397:
	.byte	4
	.byte	'IfxAsclin_setNumerator',0,3,11,143,18,17,1,1
.L399:
	.byte	5
	.byte	'asclin',0,11,143,18,52
	.word	17257
.L401:
	.byte	5
	.byte	'numerator',0,11,143,18,67
	.word	635
.L403:
	.byte	6,0
.L277:
	.byte	15,11,228,1,9,1,16
	.byte	'IfxAsclin_OversamplingFactor_4',0,3,16
	.byte	'IfxAsclin_OversamplingFactor_5',0,4,16
	.byte	'IfxAsclin_OversamplingFactor_6',0,5,16
	.byte	'IfxAsclin_OversamplingFactor_7',0,6,16
	.byte	'IfxAsclin_OversamplingFactor_8',0,7,16
	.byte	'IfxAsclin_OversamplingFactor_9',0,8,16
	.byte	'IfxAsclin_OversamplingFactor_10',0,9,16
	.byte	'IfxAsclin_OversamplingFactor_11',0,10,16
	.byte	'IfxAsclin_OversamplingFactor_12',0,11,16
	.byte	'IfxAsclin_OversamplingFactor_13',0,12,16
	.byte	'IfxAsclin_OversamplingFactor_14',0,13,16
	.byte	'IfxAsclin_OversamplingFactor_15',0,14,16
	.byte	'IfxAsclin_OversamplingFactor_16',0,15,0
.L415:
	.byte	4
	.byte	'IfxAsclin_setOversampling',0,3,11,149,18,17,1,1
.L417:
	.byte	5
	.byte	'asclin',0,11,149,18,55
	.word	17257
.L419:
	.byte	5
	.byte	'ovsFactor',0,11,149,18,92
	.word	17521
.L421:
	.byte	6,0
.L389:
	.byte	4
	.byte	'IfxAsclin_setPrescaler',0,3,11,161,18,17,1,1
.L392:
	.byte	5
	.byte	'asclin',0,11,161,18,52
	.word	17257
.L394:
	.byte	5
	.byte	'prescaler',0,11,161,18,67
	.word	635
.L396:
	.byte	6,0
.L253:
	.byte	8
	.byte	'IfxAsclin_getClockSource',0,3,11,140,15,18
	.word	618
	.byte	1,1
.L255:
	.byte	5
	.byte	'asclin',0,11,140,15,55
	.word	17257
.L257:
	.byte	6,0
.L425:
	.byte	8
	.byte	'IfxAsclin_getClockStatus',0,3,11,146,15,20
	.word	618
	.byte	1,1
.L427:
	.byte	5
	.byte	'asclin',0,11,146,15,57
	.word	17257
.L429:
	.byte	6,0,4
	.byte	'IfxAsclin_enableCts',0,3,11,228,13,17,1,1,5
	.byte	'asclin',0,11,228,13,49
	.word	17257
	.byte	5
	.byte	'enable',0,11,228,13,65
	.word	618
	.byte	6,0
.L326:
	.byte	4
	.byte	'IfxAsclin_enableParityErrorFlag',0,3,11,160,14,17,1,1
.L328:
	.byte	5
	.byte	'asclin',0,11,160,14,61
	.word	17257
.L330:
	.byte	5
	.byte	'enable',0,11,160,14,77
	.word	618
.L332:
	.byte	6,0
.L333:
	.byte	4
	.byte	'IfxAsclin_enableRxFifoOverflowFlag',0,3,11,190,14,17,1,1
.L335:
	.byte	5
	.byte	'asclin',0,11,190,14,64
	.word	17257
.L337:
	.byte	5
	.byte	'enable',0,11,190,14,80
	.word	618
.L339:
	.byte	6,0,15,11,123,9,1,16
	.byte	'IfxAsclin_CtsInputSelect_0',0,0,16
	.byte	'IfxAsclin_CtsInputSelect_1',0,1,16
	.byte	'IfxAsclin_CtsInputSelect_2',0,2,16
	.byte	'IfxAsclin_CtsInputSelect_3',0,3,0,4
	.byte	'IfxAsclin_setCtsInput',0,3,11,169,17,17,1,1,5
	.byte	'asclin',0,11,169,17,51
	.word	17257
	.byte	5
	.byte	'ctsi',0,11,169,17,84
	.word	18426
	.byte	6,0,15,11,181,2,9,1,16
	.byte	'IfxAsclin_RxInputSelect_0',0,0,16
	.byte	'IfxAsclin_RxInputSelect_1',0,1,16
	.byte	'IfxAsclin_RxInputSelect_2',0,2,16
	.byte	'IfxAsclin_RxInputSelect_3',0,3,16
	.byte	'IfxAsclin_RxInputSelect_4',0,4,16
	.byte	'IfxAsclin_RxInputSelect_5',0,5,16
	.byte	'IfxAsclin_RxInputSelect_6',0,6,16
	.byte	'IfxAsclin_RxInputSelect_7',0,7,0,4
	.byte	'IfxAsclin_setRxInput',0,3,11,191,18,17,1,1,5
	.byte	'asclin',0,11,191,18,50
	.word	17257
	.byte	5
	.byte	'alti',0,11,191,18,82
	.word	18610
	.byte	6,0,20
	.word	459
	.byte	21
	.byte	'__c11_atomic_thread_fence',0,1,1,1,1,22
	.word	18902
	.byte	0,14
	.word	443
	.byte	3
	.word	443
	.byte	23
	.byte	'__cmpswapw',0
	.word	18944
	.byte	1,1,1,1,24
	.byte	'p',0
	.word	18949
	.byte	24
	.byte	'value',0
	.word	443
	.byte	24
	.byte	'compare',0
	.word	443
	.byte	0,23
	.byte	'__maxu',0
	.word	443
	.byte	1,1,1,1,22
	.word	443
	.byte	22
	.word	443
	.byte	0,25
	.word	187
	.byte	26
	.word	213
	.byte	6,0,25
	.word	248
	.byte	26
	.word	280
	.byte	6,0,25
	.word	293
	.byte	6,0,25
	.word	362
	.byte	26
	.word	381
	.byte	6,0,25
	.word	397
	.byte	26
	.word	412
	.byte	26
	.word	426
	.byte	6,0,25
	.word	1205
	.byte	26
	.word	1245
	.byte	26
	.word	1263
	.byte	6,0,25
	.word	1283
	.byte	26
	.word	1321
	.byte	26
	.word	1339
	.byte	6,0,27
	.byte	'IfxScuWdt_clearCpuEndinit',0,3,217,1,17,1,1,1,1,5
	.byte	'password',0,3,217,1,50
	.word	635
	.byte	0,27
	.byte	'IfxScuWdt_setCpuEndinit',0,3,239,1,17,1,1,1,1,5
	.byte	'password',0,3,239,1,48
	.word	635
	.byte	0,25
	.word	1359
	.byte	26
	.word	1410
	.byte	6,0,28
	.byte	'IfxScuWdt_getCpuWatchdogPassword',0,3,129,3,19
	.word	635
	.byte	1,1,1,1,25
	.word	1509
	.byte	6,0,25
	.word	1543
	.byte	6,0,25
	.word	1606
	.byte	26
	.word	1647
	.byte	6,0,25
	.word	1666
	.byte	26
	.word	1721
	.byte	6,0,25
	.word	1740
	.byte	26
	.word	1780
	.byte	26
	.word	1797
	.byte	17,6,0,0,25
	.word	9699
	.byte	26
	.word	9731
	.byte	26
	.word	9745
	.byte	26
	.word	9763
	.byte	6,0,25
	.word	10066
	.byte	26
	.word	10099
	.byte	26
	.word	10113
	.byte	26
	.word	10131
	.byte	26
	.word	10145
	.byte	6,0,25
	.word	10265
	.byte	26
	.word	10293
	.byte	26
	.word	10307
	.byte	26
	.word	10325
	.byte	6,0,28
	.byte	'IfxScuCcu_getBaud1Frequency',0,13,217,6,20
	.word	239
	.byte	1,1,1,1,28
	.byte	'IfxScuCcu_getBaud2Frequency',0,13,223,6,20
	.word	239
	.byte	1,1,1,1,28
	.byte	'IfxScuCcu_getOsc0Frequency',0,13,137,7,20
	.word	239
	.byte	1,1,1,1,28
	.byte	'IfxScuCcu_getPllErayFrequency',0,13,149,7,20
	.word	239
	.byte	1,1,1,1,28
	.byte	'IfxScuCcu_getSpbFrequency',0,13,179,7,20
	.word	239
	.byte	1,1,1,1,25
	.word	10682
	.byte	26
	.word	10710
	.byte	6,0,25
	.word	17262
	.byte	26
	.word	17295
	.byte	26
	.word	17311
	.byte	6,0,25
	.word	17334
	.byte	26
	.word	17376
	.byte	6,0,25
	.word	17394
	.byte	26
	.word	17435
	.byte	6,0,25
	.word	17453
	.byte	26
	.word	17484
	.byte	26
	.word	17500
	.byte	6,0,25
	.word	17964
	.byte	26
	.word	17998
	.byte	26
	.word	18014
	.byte	6,0,25
	.word	18035
	.byte	26
	.word	18066
	.byte	26
	.word	18082
	.byte	6,0,25
	.word	18103
	.byte	26
	.word	18140
	.byte	6,0,25
	.word	18158
	.byte	26
	.word	18195
	.byte	6,0
.L246:
	.byte	15,14,78,9,1,16
	.byte	'IfxAsclin_Index_none',0,127,16
	.byte	'IfxAsclin_Index_0',0,0,16
	.byte	'IfxAsclin_Index_1',0,1,16
	.byte	'IfxAsclin_Index_2',0,2,16
	.byte	'IfxAsclin_Index_3',0,3,0,25
	.word	18213
	.byte	26
	.word	18241
	.byte	26
	.word	18257
	.byte	6,0,25
	.word	18275
	.byte	26
	.word	18315
	.byte	26
	.word	18331
	.byte	6,0,25
	.word	18349
	.byte	26
	.word	18392
	.byte	26
	.word	18408
	.byte	6,0,25
	.word	18548
	.byte	26
	.word	18578
	.byte	26
	.word	18594
	.byte	6,0,25
	.word	18841
	.byte	26
	.word	18870
	.byte	26
	.word	18886
	.byte	6,0
.L279:
	.byte	15,11,196,2,9,1,16
	.byte	'IfxAsclin_SamplePointPosition_1',0,1,16
	.byte	'IfxAsclin_SamplePointPosition_2',0,2,16
	.byte	'IfxAsclin_SamplePointPosition_3',0,3,16
	.byte	'IfxAsclin_SamplePointPosition_4',0,4,16
	.byte	'IfxAsclin_SamplePointPosition_5',0,5,16
	.byte	'IfxAsclin_SamplePointPosition_6',0,6,16
	.byte	'IfxAsclin_SamplePointPosition_7',0,7,16
	.byte	'IfxAsclin_SamplePointPosition_8',0,8,16
	.byte	'IfxAsclin_SamplePointPosition_9',0,9,16
	.byte	'IfxAsclin_SamplePointPosition_10',0,10,16
	.byte	'IfxAsclin_SamplePointPosition_11',0,11,16
	.byte	'IfxAsclin_SamplePointPosition_12',0,12,16
	.byte	'IfxAsclin_SamplePointPosition_13',0,13,16
	.byte	'IfxAsclin_SamplePointPosition_14',0,14,16
	.byte	'IfxAsclin_SamplePointPosition_15',0,15,0
.L281:
	.byte	15,11,218,2,9,1,16
	.byte	'IfxAsclin_SamplesPerBit_one',0,0,16
	.byte	'IfxAsclin_SamplesPerBit_three',0,1,0
.L283:
	.byte	15,11,110,9,1,16
	.byte	'IfxAsclin_ClockSource_noClock',0,0,16
	.byte	'IfxAsclin_ClockSource_kernelClock',0,1,16
	.byte	'IfxAsclin_ClockSource_oscillatorClock',0,2,16
	.byte	'IfxAsclin_ClockSource_flexRayClock',0,4,16
	.byte	'IfxAsclin_ClockSource_ascFastClock',0,8,16
	.byte	'IfxAsclin_ClockSource_ascSlowClock',0,16,0
.L360:
	.byte	3
	.word	635
	.byte	14
	.word	15379
.L363:
	.byte	3
	.word	20767
.L367:
	.byte	3
	.word	1585
.L373:
	.byte	3
	.word	618
	.byte	14
	.word	15292
.L435:
	.byte	3
	.word	20787
	.byte	7
	.byte	'short int',0,2,5,29
	.byte	'__wchar_t',0,15,1,1
	.word	20797
	.byte	29
	.byte	'__size_t',0,15,1,1
	.word	443
	.byte	29
	.byte	'__ptrdiff_t',0,15,1,1
	.word	459
	.byte	30,1,3
	.word	20865
	.byte	29
	.byte	'__codeptr',0,15,1,1
	.word	20867
	.byte	29
	.byte	'boolean',0,16,101,29
	.word	618
	.byte	29
	.byte	'uint8',0,16,105,29
	.word	618
	.byte	29
	.byte	'uint16',0,16,109,29
	.word	635
	.byte	29
	.byte	'uint32',0,16,113,29
	.word	1585
	.byte	29
	.byte	'uint64',0,16,118,29
	.word	325
	.byte	29
	.byte	'sint16',0,16,126,29
	.word	20797
	.byte	7
	.byte	'long int',0,4,5,29
	.byte	'sint32',0,16,131,1,29
	.word	20980
	.byte	7
	.byte	'long long int',0,8,5,29
	.byte	'sint64',0,16,139,1,29
	.word	21008
	.byte	29
	.byte	'float32',0,16,168,1,29
	.word	239
	.byte	29
	.byte	'pvoid',0,17,57,28
	.word	357
	.byte	29
	.byte	'Ifx_TickTime',0,17,79,28
	.word	21008
	.byte	29
	.byte	'Ifx_Priority',0,17,103,16
	.word	635
	.byte	15,17,130,1,9,1,16
	.byte	'Ifx_RxSel_a',0,0,16
	.byte	'Ifx_RxSel_b',0,1,16
	.byte	'Ifx_RxSel_c',0,2,16
	.byte	'Ifx_RxSel_d',0,3,16
	.byte	'Ifx_RxSel_e',0,4,16
	.byte	'Ifx_RxSel_f',0,5,16
	.byte	'Ifx_RxSel_g',0,6,16
	.byte	'Ifx_RxSel_h',0,7,0,29
	.byte	'Ifx_RxSel',0,17,140,1,3
	.word	21114
	.byte	14
	.word	351
	.byte	3
	.word	21252
	.byte	31,17,143,1,9,8,13
	.byte	'module',0
	.word	21257
	.byte	4,2,35,0,13
	.byte	'index',0
	.word	20980
	.byte	4,2,35,4,0,29
	.byte	'IfxModule_IndexMap',0,17,147,1,3
	.word	21262
	.byte	29
	.byte	'Ifx_ASCLIN_ACCEN0_Bits',0,12,79,3
	.word	16238
	.byte	29
	.byte	'Ifx_ASCLIN_ACCEN1_Bits',0,12,85,3
	.word	16146
	.byte	29
	.byte	'Ifx_ASCLIN_BITCON_Bits',0,12,97,3
	.word	11770
	.byte	29
	.byte	'Ifx_ASCLIN_BRD_Bits',0,12,106,3
	.word	12610
	.byte	29
	.byte	'Ifx_ASCLIN_BRG_Bits',0,12,115,3
	.word	12453
	.byte	29
	.byte	'Ifx_ASCLIN_CLC_Bits',0,12,125,3
	.word	10725
	.byte	29
	.byte	'Ifx_ASCLIN_CSR_Bits',0,12,133,1,3
	.word	15419
	.byte	29
	.byte	'Ifx_ASCLIN_DATCON_Bits',0,12,145,1,3
	.word	12256
	.byte	29
	.byte	'Ifx_ASCLIN_FLAGS_Bits',0,12,177,1,3
	.word	13266
	.byte	29
	.byte	'Ifx_ASCLIN_FLAGSCLEAR_Bits',0,12,209,1,3
	.word	14265
	.byte	29
	.byte	'Ifx_ASCLIN_FLAGSENABLE_Bits',0,12,238,1,3
	.word	14780
	.byte	29
	.byte	'Ifx_ASCLIN_FLAGSSET_Bits',0,12,142,2,3
	.word	13752
	.byte	29
	.byte	'Ifx_ASCLIN_FRAMECON_Bits',0,12,158,2,3
	.word	11991
	.byte	29
	.byte	'Ifx_ASCLIN_ID_Bits',0,12,166,2,3
	.word	11179
	.byte	29
	.byte	'Ifx_ASCLIN_IOCR_Bits',0,12,184,2,3
	.word	10884
	.byte	29
	.byte	'Ifx_ASCLIN_KRST0_Bits',0,12,192,2,3
	.word	16020
	.byte	29
	.byte	'Ifx_ASCLIN_KRST1_Bits',0,12,199,2,3
	.word	15913
	.byte	29
	.byte	'Ifx_ASCLIN_KRSTCLR_Bits',0,12,206,2,3
	.word	15804
	.byte	29
	.byte	'Ifx_ASCLIN_LIN_BTIMER_Bits',0,12,213,2,3
	.word	12964
	.byte	29
	.byte	'Ifx_ASCLIN_LIN_CON_Bits',0,12,225,2,3
	.word	12764
	.byte	29
	.byte	'Ifx_ASCLIN_LIN_HTIMER_Bits',0,12,232,2,3
	.word	13078
	.byte	29
	.byte	'Ifx_ASCLIN_OCS_Bits',0,12,242,2,3
	.word	15641
	.byte	29
	.byte	'Ifx_ASCLIN_RXDATA_Bits',0,12,248,2,3
	.word	15332
	.byte	29
	.byte	'Ifx_ASCLIN_RXDATAD_Bits',0,12,254,2,3
	.word	15542
	.byte	29
	.byte	'Ifx_ASCLIN_RXFIFOCON_Bits',0,12,140,3,3
	.word	11529
	.byte	29
	.byte	'Ifx_ASCLIN_TXDATA_Bits',0,12,146,3,3
	.word	15245
	.byte	29
	.byte	'Ifx_ASCLIN_TXFIFOCON_Bits',0,12,159,3,3
	.word	11304
	.byte	29
	.byte	'Ifx_ASCLIN_ACCEN0',0,12,172,3,3
	.word	16770
	.byte	29
	.byte	'Ifx_ASCLIN_ACCEN1',0,12,180,3,3
	.word	16198
	.byte	29
	.byte	'Ifx_ASCLIN_BITCON',0,12,188,3,3
	.word	11951
	.byte	29
	.byte	'Ifx_ASCLIN_BRD',0,12,196,3,3
	.word	12724
	.byte	29
	.byte	'Ifx_ASCLIN_BRG',0,12,204,3,3
	.word	12570
	.byte	29
	.byte	'Ifx_ASCLIN_CLC',0,12,212,3,3
	.word	10844
	.byte	29
	.byte	'Ifx_ASCLIN_CSR',0,12,220,3,3
	.word	15502
	.byte	29
	.byte	'Ifx_ASCLIN_DATCON',0,12,228,3,3
	.word	12413
	.byte	29
	.byte	'Ifx_ASCLIN_FLAGS',0,12,236,3,3
	.word	13712
	.byte	29
	.byte	'Ifx_ASCLIN_FLAGSCLEAR',0,12,244,3,3
	.word	14740
	.byte	29
	.byte	'Ifx_ASCLIN_FLAGSENABLE',0,12,252,3,3
	.word	15205
	.byte	29
	.byte	'Ifx_ASCLIN_FLAGSSET',0,12,132,4,3
	.word	14225
	.byte	29
	.byte	'Ifx_ASCLIN_FRAMECON',0,12,140,4,3
	.word	12216
	.byte	29
	.byte	'Ifx_ASCLIN_ID',0,12,148,4,3
	.word	11264
	.byte	29
	.byte	'Ifx_ASCLIN_IOCR',0,12,156,4,3
	.word	11139
	.byte	29
	.byte	'Ifx_ASCLIN_KRST0',0,12,164,4,3
	.word	16106
	.byte	29
	.byte	'Ifx_ASCLIN_KRST1',0,12,172,4,3
	.word	15980
	.byte	29
	.byte	'Ifx_ASCLIN_KRSTCLR',0,12,180,4,3
	.word	15873
	.byte	29
	.byte	'Ifx_ASCLIN_LIN_BTIMER',0,12,188,4,3
	.word	13038
	.byte	29
	.byte	'Ifx_ASCLIN_LIN_CON',0,12,196,4,3
	.word	12924
	.byte	29
	.byte	'Ifx_ASCLIN_LIN_HTIMER',0,12,204,4,3
	.word	13153
	.byte	29
	.byte	'Ifx_ASCLIN_OCS',0,12,212,4,3
	.word	15764
	.byte	29
	.byte	'Ifx_ASCLIN_RXDATA',0,12,220,4,3
	.word	15379
	.byte	29
	.byte	'Ifx_ASCLIN_RXDATAD',0,12,228,4,3
	.word	15590
	.byte	29
	.byte	'Ifx_ASCLIN_RXFIFOCON',0,12,236,4,3
	.word	11730
	.byte	29
	.byte	'Ifx_ASCLIN_TXDATA',0,12,244,4,3
	.word	15292
	.byte	29
	.byte	'Ifx_ASCLIN_TXFIFOCON',0,12,252,4,3
	.word	11489
	.byte	14
	.word	13193
	.byte	29
	.byte	'Ifx_ASCLIN_LIN',0,12,140,5,3
	.word	22927
	.byte	14
	.word	16810
	.byte	29
	.byte	'Ifx_ASCLIN',0,12,181,5,3
	.word	22956
	.byte	29
	.byte	'IfxAsclin_Index',0,14,85,3
	.word	19751
	.byte	18,32
	.word	21262
	.byte	19,3,0,20
	.word	23005
	.byte	32
	.byte	'IfxAsclin_cfg_indexMap',0,14,93,41
	.word	23014
	.byte	1,1,15,18,236,10,9,1,16
	.byte	'IfxScu_CCUCON0_CLKSEL_fBack',0,0,16
	.byte	'IfxScu_CCUCON0_CLKSEL_fPll',0,1,0,29
	.byte	'IfxScu_CCUCON0_CLKSEL',0,18,240,10,3
	.word	23052
	.byte	15,18,250,10,9,1,16
	.byte	'IfxScu_WDTCON1_IR_divBy16384',0,0,16
	.byte	'IfxScu_WDTCON1_IR_divBy256',0,1,16
	.byte	'IfxScu_WDTCON1_IR_divBy64',0,2,0,29
	.byte	'IfxScu_WDTCON1_IR',0,18,255,10,3
	.word	23149
	.byte	10
	.byte	'_Ifx_SCU_ACCEN0_Bits',0,4,45,16,4,11
	.byte	'EN0',0,1
	.word	618
	.byte	1,7,2,35,0,11
	.byte	'EN1',0,1
	.word	618
	.byte	1,6,2,35,0,11
	.byte	'EN2',0,1
	.word	618
	.byte	1,5,2,35,0,11
	.byte	'EN3',0,1
	.word	618
	.byte	1,4,2,35,0,11
	.byte	'EN4',0,1
	.word	618
	.byte	1,3,2,35,0,11
	.byte	'EN5',0,1
	.word	618
	.byte	1,2,2,35,0,11
	.byte	'EN6',0,1
	.word	618
	.byte	1,1,2,35,0,11
	.byte	'EN7',0,1
	.word	618
	.byte	1,0,2,35,0,11
	.byte	'EN8',0,1
	.word	618
	.byte	1,7,2,35,1,11
	.byte	'EN9',0,1
	.word	618
	.byte	1,6,2,35,1,11
	.byte	'EN10',0,1
	.word	618
	.byte	1,5,2,35,1,11
	.byte	'EN11',0,1
	.word	618
	.byte	1,4,2,35,1,11
	.byte	'EN12',0,1
	.word	618
	.byte	1,3,2,35,1,11
	.byte	'EN13',0,1
	.word	618
	.byte	1,2,2,35,1,11
	.byte	'EN14',0,1
	.word	618
	.byte	1,1,2,35,1,11
	.byte	'EN15',0,1
	.word	618
	.byte	1,0,2,35,1,11
	.byte	'EN16',0,1
	.word	618
	.byte	1,7,2,35,2,11
	.byte	'EN17',0,1
	.word	618
	.byte	1,6,2,35,2,11
	.byte	'EN18',0,1
	.word	618
	.byte	1,5,2,35,2,11
	.byte	'EN19',0,1
	.word	618
	.byte	1,4,2,35,2,11
	.byte	'EN20',0,1
	.word	618
	.byte	1,3,2,35,2,11
	.byte	'EN21',0,1
	.word	618
	.byte	1,2,2,35,2,11
	.byte	'EN22',0,1
	.word	618
	.byte	1,1,2,35,2,11
	.byte	'EN23',0,1
	.word	618
	.byte	1,0,2,35,2,11
	.byte	'EN24',0,1
	.word	618
	.byte	1,7,2,35,3,11
	.byte	'EN25',0,1
	.word	618
	.byte	1,6,2,35,3,11
	.byte	'EN26',0,1
	.word	618
	.byte	1,5,2,35,3,11
	.byte	'EN27',0,1
	.word	618
	.byte	1,4,2,35,3,11
	.byte	'EN28',0,1
	.word	618
	.byte	1,3,2,35,3,11
	.byte	'EN29',0,1
	.word	618
	.byte	1,2,2,35,3,11
	.byte	'EN30',0,1
	.word	618
	.byte	1,1,2,35,3,11
	.byte	'EN31',0,1
	.word	618
	.byte	1,0,2,35,3,0,29
	.byte	'Ifx_SCU_ACCEN0_Bits',0,4,79,3
	.word	23271
	.byte	10
	.byte	'_Ifx_SCU_ACCEN1_Bits',0,4,82,16,4,11
	.byte	'reserved_0',0,4
	.word	443
	.byte	32,0,2,35,0,0,29
	.byte	'Ifx_SCU_ACCEN1_Bits',0,4,85,3
	.word	23828
	.byte	10
	.byte	'_Ifx_SCU_ARSTDIS_Bits',0,4,88,16,4,11
	.byte	'STM0DIS',0,1
	.word	618
	.byte	1,7,2,35,0,11
	.byte	'STM1DIS',0,1
	.word	618
	.byte	1,6,2,35,0,11
	.byte	'STM2DIS',0,1
	.word	618
	.byte	1,5,2,35,0,11
	.byte	'reserved_3',0,4
	.word	443
	.byte	29,0,2,35,0,0,29
	.byte	'Ifx_SCU_ARSTDIS_Bits',0,4,94,3
	.word	23905
	.byte	10
	.byte	'_Ifx_SCU_CCUCON0_Bits',0,4,97,16,4,11
	.byte	'BAUD1DIV',0,1
	.word	618
	.byte	4,4,2,35,0,11
	.byte	'BAUD2DIV',0,1
	.word	618
	.byte	4,0,2,35,0,11
	.byte	'SRIDIV',0,1
	.word	618
	.byte	4,4,2,35,1,11
	.byte	'LPDIV',0,1
	.word	618
	.byte	4,0,2,35,1,11
	.byte	'SPBDIV',0,1
	.word	618
	.byte	4,4,2,35,2,11
	.byte	'FSI2DIV',0,1
	.word	618
	.byte	2,2,2,35,2,11
	.byte	'reserved_22',0,1
	.word	618
	.byte	2,0,2,35,2,11
	.byte	'FSIDIV',0,1
	.word	618
	.byte	2,6,2,35,3,11
	.byte	'reserved_26',0,1
	.word	618
	.byte	2,4,2,35,3,11
	.byte	'CLKSEL',0,1
	.word	618
	.byte	2,2,2,35,3,11
	.byte	'UP',0,1
	.word	618
	.byte	1,1,2,35,3,11
	.byte	'LCK',0,1
	.word	618
	.byte	1,0,2,35,3,0,29
	.byte	'Ifx_SCU_CCUCON0_Bits',0,4,111,3
	.word	24041
	.byte	10
	.byte	'_Ifx_SCU_CCUCON1_Bits',0,4,114,16,4,11
	.byte	'CANDIV',0,1
	.word	618
	.byte	4,4,2,35,0,11
	.byte	'ERAYDIV',0,1
	.word	618
	.byte	4,0,2,35,0,11
	.byte	'STMDIV',0,1
	.word	618
	.byte	4,4,2,35,1,11
	.byte	'GTMDIV',0,1
	.word	618
	.byte	4,0,2,35,1,11
	.byte	'ETHDIV',0,1
	.word	618
	.byte	4,4,2,35,2,11
	.byte	'ASCLINFDIV',0,1
	.word	618
	.byte	4,0,2,35,2,11
	.byte	'ASCLINSDIV',0,1
	.word	618
	.byte	4,4,2,35,3,11
	.byte	'INSEL',0,1
	.word	618
	.byte	2,2,2,35,3,11
	.byte	'UP',0,1
	.word	618
	.byte	1,1,2,35,3,11
	.byte	'LCK',0,1
	.word	618
	.byte	1,0,2,35,3,0,29
	.byte	'Ifx_SCU_CCUCON1_Bits',0,4,126,3
	.word	24321
	.byte	10
	.byte	'_Ifx_SCU_CCUCON2_Bits',0,4,129,1,16,4,11
	.byte	'BBBDIV',0,1
	.word	618
	.byte	4,4,2,35,0,11
	.byte	'reserved_4',0,4
	.word	443
	.byte	26,2,2,35,0,11
	.byte	'UP',0,1
	.word	618
	.byte	1,1,2,35,3,11
	.byte	'LCK',0,1
	.word	618
	.byte	1,0,2,35,3,0,29
	.byte	'Ifx_SCU_CCUCON2_Bits',0,4,135,1,3
	.word	24559
	.byte	10
	.byte	'_Ifx_SCU_CCUCON3_Bits',0,4,138,1,16,4,11
	.byte	'PLLDIV',0,1
	.word	618
	.byte	6,2,2,35,0,11
	.byte	'PLLSEL',0,1
	.word	618
	.byte	2,0,2,35,0,11
	.byte	'PLLERAYDIV',0,1
	.word	618
	.byte	6,2,2,35,1,11
	.byte	'PLLERAYSEL',0,1
	.word	618
	.byte	2,0,2,35,1,11
	.byte	'SRIDIV',0,1
	.word	618
	.byte	6,2,2,35,2,11
	.byte	'SRISEL',0,1
	.word	618
	.byte	2,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	618
	.byte	5,3,2,35,3,11
	.byte	'SLCK',0,1
	.word	618
	.byte	1,2,2,35,3,11
	.byte	'UP',0,1
	.word	618
	.byte	1,1,2,35,3,11
	.byte	'LCK',0,1
	.word	618
	.byte	1,0,2,35,3,0,29
	.byte	'Ifx_SCU_CCUCON3_Bits',0,4,150,1,3
	.word	24687
	.byte	10
	.byte	'_Ifx_SCU_CCUCON4_Bits',0,4,153,1,16,4,11
	.byte	'SPBDIV',0,1
	.word	618
	.byte	6,2,2,35,0,11
	.byte	'SPBSEL',0,1
	.word	618
	.byte	2,0,2,35,0,11
	.byte	'GTMDIV',0,1
	.word	618
	.byte	6,2,2,35,1,11
	.byte	'GTMSEL',0,1
	.word	618
	.byte	2,0,2,35,1,11
	.byte	'STMDIV',0,1
	.word	618
	.byte	6,2,2,35,2,11
	.byte	'STMSEL',0,1
	.word	618
	.byte	2,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	618
	.byte	5,3,2,35,3,11
	.byte	'SLCK',0,1
	.word	618
	.byte	1,2,2,35,3,11
	.byte	'UP',0,1
	.word	618
	.byte	1,1,2,35,3,11
	.byte	'LCK',0,1
	.word	618
	.byte	1,0,2,35,3,0,29
	.byte	'Ifx_SCU_CCUCON4_Bits',0,4,165,1,3
	.word	24930
	.byte	10
	.byte	'_Ifx_SCU_CCUCON5_Bits',0,4,168,1,16,4,11
	.byte	'MAXDIV',0,1
	.word	618
	.byte	4,4,2,35,0,11
	.byte	'reserved_4',0,4
	.word	443
	.byte	26,2,2,35,0,11
	.byte	'UP',0,1
	.word	618
	.byte	1,1,2,35,3,11
	.byte	'LCK',0,1
	.word	618
	.byte	1,0,2,35,3,0,29
	.byte	'Ifx_SCU_CCUCON5_Bits',0,4,174,1,3
	.word	25165
	.byte	10
	.byte	'_Ifx_SCU_CCUCON6_Bits',0,4,177,1,16,4,11
	.byte	'CPU0DIV',0,1
	.word	618
	.byte	6,2,2,35,0,11
	.byte	'reserved_6',0,4
	.word	443
	.byte	26,0,2,35,0,0,29
	.byte	'Ifx_SCU_CCUCON6_Bits',0,4,181,1,3
	.word	25293
	.byte	10
	.byte	'_Ifx_SCU_CCUCON7_Bits',0,4,184,1,16,4,11
	.byte	'CPU1DIV',0,1
	.word	618
	.byte	6,2,2,35,0,11
	.byte	'reserved_6',0,4
	.word	443
	.byte	26,0,2,35,0,0,29
	.byte	'Ifx_SCU_CCUCON7_Bits',0,4,188,1,3
	.word	25393
	.byte	10
	.byte	'_Ifx_SCU_CHIPID_Bits',0,4,191,1,16,4,11
	.byte	'CHREV',0,1
	.word	618
	.byte	6,2,2,35,0,11
	.byte	'CHTEC',0,1
	.word	618
	.byte	2,0,2,35,0,11
	.byte	'CHID',0,1
	.word	618
	.byte	8,0,2,35,1,11
	.byte	'EEA',0,1
	.word	618
	.byte	1,7,2,35,2,11
	.byte	'UCODE',0,1
	.word	618
	.byte	7,0,2,35,2,11
	.byte	'FSIZE',0,1
	.word	618
	.byte	4,4,2,35,3,11
	.byte	'SP',0,1
	.word	618
	.byte	2,2,2,35,3,11
	.byte	'SEC',0,1
	.word	618
	.byte	1,1,2,35,3,11
	.byte	'reserved_31',0,1
	.word	618
	.byte	1,0,2,35,3,0,29
	.byte	'Ifx_SCU_CHIPID_Bits',0,4,202,1,3
	.word	25493
	.byte	10
	.byte	'_Ifx_SCU_DTSCON_Bits',0,4,205,1,16,4,11
	.byte	'PWD',0,1
	.word	618
	.byte	1,7,2,35,0,11
	.byte	'START',0,1
	.word	618
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	618
	.byte	2,4,2,35,0,11
	.byte	'CAL',0,4
	.word	443
	.byte	20,8,2,35,0,11
	.byte	'reserved_24',0,1
	.word	618
	.byte	7,1,2,35,3,11
	.byte	'SLCK',0,1
	.word	618
	.byte	1,0,2,35,3,0,29
	.byte	'Ifx_SCU_DTSCON_Bits',0,4,213,1,3
	.word	25701
	.byte	10
	.byte	'_Ifx_SCU_DTSLIM_Bits',0,4,216,1,16,4,11
	.byte	'LOWER',0,2
	.word	635
	.byte	10,6,2,35,0,11
	.byte	'reserved_10',0,1
	.word	618
	.byte	5,1,2,35,1,11
	.byte	'LLU',0,1
	.word	618
	.byte	1,0,2,35,1,11
	.byte	'UPPER',0,2
	.word	635
	.byte	10,6,2,35,2,11
	.byte	'reserved_26',0,1
	.word	618
	.byte	4,2,2,35,3,11
	.byte	'SLCK',0,1
	.word	618
	.byte	1,1,2,35,3,11
	.byte	'UOF',0,1
	.word	618
	.byte	1,0,2,35,3,0,29
	.byte	'Ifx_SCU_DTSLIM_Bits',0,4,225,1,3
	.word	25866
	.byte	10
	.byte	'_Ifx_SCU_DTSSTAT_Bits',0,4,228,1,16,4,11
	.byte	'RESULT',0,2
	.word	635
	.byte	10,6,2,35,0,11
	.byte	'reserved_10',0,1
	.word	618
	.byte	4,2,2,35,1,11
	.byte	'RDY',0,1
	.word	618
	.byte	1,1,2,35,1,11
	.byte	'BUSY',0,1
	.word	618
	.byte	1,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	635
	.byte	16,0,2,35,2,0,29
	.byte	'Ifx_SCU_DTSSTAT_Bits',0,4,235,1,3
	.word	26049
	.byte	10
	.byte	'_Ifx_SCU_EICR_Bits',0,4,238,1,16,4,11
	.byte	'reserved_0',0,1
	.word	618
	.byte	4,4,2,35,0,11
	.byte	'EXIS0',0,1
	.word	618
	.byte	3,1,2,35,0,11
	.byte	'reserved_7',0,1
	.word	618
	.byte	1,0,2,35,0,11
	.byte	'FEN0',0,1
	.word	618
	.byte	1,7,2,35,1,11
	.byte	'REN0',0,1
	.word	618
	.byte	1,6,2,35,1,11
	.byte	'LDEN0',0,1
	.word	618
	.byte	1,5,2,35,1,11
	.byte	'EIEN0',0,1
	.word	618
	.byte	1,4,2,35,1,11
	.byte	'INP0',0,1
	.word	618
	.byte	3,1,2,35,1,11
	.byte	'reserved_15',0,4
	.word	443
	.byte	5,12,2,35,0,11
	.byte	'EXIS1',0,1
	.word	618
	.byte	3,1,2,35,2,11
	.byte	'reserved_23',0,1
	.word	618
	.byte	1,0,2,35,2,11
	.byte	'FEN1',0,1
	.word	618
	.byte	1,7,2,35,3,11
	.byte	'REN1',0,1
	.word	618
	.byte	1,6,2,35,3,11
	.byte	'LDEN1',0,1
	.word	618
	.byte	1,5,2,35,3,11
	.byte	'EIEN1',0,1
	.word	618
	.byte	1,4,2,35,3,11
	.byte	'INP1',0,1
	.word	618
	.byte	3,1,2,35,3,11
	.byte	'reserved_31',0,1
	.word	618
	.byte	1,0,2,35,3,0,29
	.byte	'Ifx_SCU_EICR_Bits',0,4,129,2,3
	.word	26203
	.byte	10
	.byte	'_Ifx_SCU_EIFR_Bits',0,4,132,2,16,4,11
	.byte	'INTF0',0,1
	.word	618
	.byte	1,7,2,35,0,11
	.byte	'INTF1',0,1
	.word	618
	.byte	1,6,2,35,0,11
	.byte	'INTF2',0,1
	.word	618
	.byte	1,5,2,35,0,11
	.byte	'INTF3',0,1
	.word	618
	.byte	1,4,2,35,0,11
	.byte	'INTF4',0,1
	.word	618
	.byte	1,3,2,35,0,11
	.byte	'INTF5',0,1
	.word	618
	.byte	1,2,2,35,0,11
	.byte	'INTF6',0,1
	.word	618
	.byte	1,1,2,35,0,11
	.byte	'INTF7',0,1
	.word	618
	.byte	1,0,2,35,0,11
	.byte	'reserved_8',0,4
	.word	443
	.byte	24,0,2,35,0,0,29
	.byte	'Ifx_SCU_EIFR_Bits',0,4,143,2,3
	.word	26567
	.byte	10
	.byte	'_Ifx_SCU_EMSR_Bits',0,4,146,2,16,4,11
	.byte	'POL',0,1
	.word	618
	.byte	1,7,2,35,0,11
	.byte	'MODE',0,1
	.word	618
	.byte	1,6,2,35,0,11
	.byte	'ENON',0,1
	.word	618
	.byte	1,5,2,35,0,11
	.byte	'PSEL',0,1
	.word	618
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,2
	.word	635
	.byte	12,0,2,35,0,11
	.byte	'EMSF',0,1
	.word	618
	.byte	1,7,2,35,2,11
	.byte	'SEMSF',0,1
	.word	618
	.byte	1,6,2,35,2,11
	.byte	'reserved_18',0,1
	.word	618
	.byte	6,0,2,35,2,11
	.byte	'EMSFM',0,1
	.word	618
	.byte	2,6,2,35,3,11
	.byte	'SEMSFM',0,1
	.word	618
	.byte	2,4,2,35,3,11
	.byte	'reserved_28',0,1
	.word	618
	.byte	4,0,2,35,3,0,29
	.byte	'Ifx_SCU_EMSR_Bits',0,4,159,2,3
	.word	26778
	.byte	10
	.byte	'_Ifx_SCU_ESRCFG_Bits',0,4,162,2,16,4,11
	.byte	'reserved_0',0,1
	.word	618
	.byte	7,1,2,35,0,11
	.byte	'EDCON',0,2
	.word	635
	.byte	2,7,2,35,0,11
	.byte	'reserved_9',0,4
	.word	443
	.byte	23,0,2,35,0,0,29
	.byte	'Ifx_SCU_ESRCFG_Bits',0,4,167,2,3
	.word	27030
	.byte	10
	.byte	'_Ifx_SCU_ESROCFG_Bits',0,4,170,2,16,4,11
	.byte	'ARI',0,1
	.word	618
	.byte	1,7,2,35,0,11
	.byte	'ARC',0,1
	.word	618
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,4
	.word	443
	.byte	30,0,2,35,0,0,29
	.byte	'Ifx_SCU_ESROCFG_Bits',0,4,175,2,3
	.word	27148
	.byte	10
	.byte	'_Ifx_SCU_EVR13CON_Bits',0,4,178,2,16,4,11
	.byte	'reserved_0',0,4
	.word	443
	.byte	28,4,2,35,0,11
	.byte	'EVR13OFF',0,1
	.word	618
	.byte	1,3,2,35,3,11
	.byte	'BPEVR13OFF',0,1
	.word	618
	.byte	1,2,2,35,3,11
	.byte	'reserved_30',0,1
	.word	618
	.byte	1,1,2,35,3,11
	.byte	'LCK',0,1
	.word	618
	.byte	1,0,2,35,3,0,29
	.byte	'Ifx_SCU_EVR13CON_Bits',0,4,185,2,3
	.word	27259
	.byte	10
	.byte	'_Ifx_SCU_EVR33CON_Bits',0,4,188,2,16,4,11
	.byte	'reserved_0',0,4
	.word	443
	.byte	28,4,2,35,0,11
	.byte	'EVR33OFF',0,1
	.word	618
	.byte	1,3,2,35,3,11
	.byte	'BPEVR33OFF',0,1
	.word	618
	.byte	1,2,2,35,3,11
	.byte	'reserved_30',0,1
	.word	618
	.byte	1,1,2,35,3,11
	.byte	'LCK',0,1
	.word	618
	.byte	1,0,2,35,3,0,29
	.byte	'Ifx_SCU_EVR33CON_Bits',0,4,195,2,3
	.word	27422
	.byte	10
	.byte	'_Ifx_SCU_EVRADCSTAT_Bits',0,4,198,2,16,4,11
	.byte	'ADC13V',0,1
	.word	618
	.byte	8,0,2,35,0,11
	.byte	'ADC33V',0,1
	.word	618
	.byte	8,0,2,35,1,11
	.byte	'ADCSWDV',0,1
	.word	618
	.byte	8,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	618
	.byte	7,1,2,35,3,11
	.byte	'VAL',0,1
	.word	618
	.byte	1,0,2,35,3,0,29
	.byte	'Ifx_SCU_EVRADCSTAT_Bits',0,4,205,2,3
	.word	27585
	.byte	10
	.byte	'_Ifx_SCU_EVRDVSTAT_Bits',0,4,208,2,16,4,11
	.byte	'DVS13TRIM',0,1
	.word	618
	.byte	8,0,2,35,0,11
	.byte	'reserved_8',0,1
	.word	618
	.byte	8,0,2,35,1,11
	.byte	'DVS33TRIM',0,1
	.word	618
	.byte	8,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	618
	.byte	7,1,2,35,3,11
	.byte	'VAL',0,1
	.word	618
	.byte	1,0,2,35,3,0,29
	.byte	'Ifx_SCU_EVRDVSTAT_Bits',0,4,215,2,3
	.word	27743
	.byte	10
	.byte	'_Ifx_SCU_EVRMONCTRL_Bits',0,4,218,2,16,4,11
	.byte	'EVR13OVMOD',0,1
	.word	618
	.byte	2,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	618
	.byte	2,4,2,35,0,11
	.byte	'EVR13UVMOD',0,1
	.word	618
	.byte	2,2,2,35,0,11
	.byte	'reserved_6',0,1
	.word	618
	.byte	2,0,2,35,0,11
	.byte	'EVR33OVMOD',0,1
	.word	618
	.byte	2,6,2,35,1,11
	.byte	'reserved_10',0,1
	.word	618
	.byte	2,4,2,35,1,11
	.byte	'EVR33UVMOD',0,1
	.word	618
	.byte	2,2,2,35,1,11
	.byte	'reserved_14',0,1
	.word	618
	.byte	2,0,2,35,1,11
	.byte	'SWDOVMOD',0,1
	.word	618
	.byte	2,6,2,35,2,11
	.byte	'reserved_18',0,1
	.word	618
	.byte	2,4,2,35,2,11
	.byte	'SWDUVMOD',0,1
	.word	618
	.byte	2,2,2,35,2,11
	.byte	'reserved_22',0,2
	.word	635
	.byte	10,0,2,35,2,0,29
	.byte	'Ifx_SCU_EVRMONCTRL_Bits',0,4,232,2,3
	.word	27908
	.byte	10
	.byte	'_Ifx_SCU_EVROSCCTRL_Bits',0,4,235,2,16,4,11
	.byte	'OSCTRIM',0,2
	.word	635
	.byte	10,6,2,35,0,11
	.byte	'OSCPTAT',0,1
	.word	618
	.byte	6,0,2,35,1,11
	.byte	'OSCANASEL',0,1
	.word	618
	.byte	4,4,2,35,2,11
	.byte	'HPBGTRIM',0,2
	.word	635
	.byte	7,5,2,35,2,11
	.byte	'HPBGCLKEN',0,1
	.word	618
	.byte	1,4,2,35,3,11
	.byte	'OSC3V3',0,1
	.word	618
	.byte	1,3,2,35,3,11
	.byte	'reserved_29',0,1
	.word	618
	.byte	2,1,2,35,3,11
	.byte	'LCK',0,1
	.word	618
	.byte	1,0,2,35,3,0,29
	.byte	'Ifx_SCU_EVROSCCTRL_Bits',0,4,245,2,3
	.word	28237
	.byte	10
	.byte	'_Ifx_SCU_EVROVMON_Bits',0,4,248,2,16,4,11
	.byte	'EVR13OVVAL',0,1
	.word	618
	.byte	8,0,2,35,0,11
	.byte	'EVR33OVVAL',0,1
	.word	618
	.byte	8,0,2,35,1,11
	.byte	'SWDOVVAL',0,1
	.word	618
	.byte	8,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	618
	.byte	7,1,2,35,3,11
	.byte	'LCK',0,1
	.word	618
	.byte	1,0,2,35,3,0,29
	.byte	'Ifx_SCU_EVROVMON_Bits',0,4,255,2,3
	.word	28458
	.byte	10
	.byte	'_Ifx_SCU_EVRRSTCON_Bits',0,4,130,3,16,4,11
	.byte	'RST13TRIM',0,1
	.word	618
	.byte	8,0,2,35,0,11
	.byte	'reserved_8',0,4
	.word	443
	.byte	16,8,2,35,0,11
	.byte	'RST13OFF',0,1
	.word	618
	.byte	1,7,2,35,3,11
	.byte	'BPRST13OFF',0,1
	.word	618
	.byte	1,6,2,35,3,11
	.byte	'RST33OFF',0,1
	.word	618
	.byte	1,5,2,35,3,11
	.byte	'BPRST33OFF',0,1
	.word	618
	.byte	1,4,2,35,3,11
	.byte	'RSTSWDOFF',0,1
	.word	618
	.byte	1,3,2,35,3,11
	.byte	'BPRSTSWDOFF',0,1
	.word	618
	.byte	1,2,2,35,3,11
	.byte	'reserved_30',0,1
	.word	618
	.byte	1,1,2,35,3,11
	.byte	'LCK',0,1
	.word	618
	.byte	1,0,2,35,3,0,29
	.byte	'Ifx_SCU_EVRRSTCON_Bits',0,4,142,3,3
	.word	28621
	.byte	10
	.byte	'_Ifx_SCU_EVRSDCOEFF1_Bits',0,4,145,3,16,4,11
	.byte	'SD5P',0,1
	.word	618
	.byte	8,0,2,35,0,11
	.byte	'SD5I',0,1
	.word	618
	.byte	8,0,2,35,1,11
	.byte	'SD5D',0,1
	.word	618
	.byte	8,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	618
	.byte	7,1,2,35,3,11
	.byte	'LCK',0,1
	.word	618
	.byte	1,0,2,35,3,0,29
	.byte	'Ifx_SCU_EVRSDCOEFF1_Bits',0,4,152,3,3
	.word	28893
	.byte	10
	.byte	'_Ifx_SCU_EVRSDCOEFF2_Bits',0,4,155,3,16,4,11
	.byte	'SD33P',0,1
	.word	618
	.byte	8,0,2,35,0,11
	.byte	'SD33I',0,1
	.word	618
	.byte	8,0,2,35,1,11
	.byte	'SD33D',0,1
	.word	618
	.byte	8,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	618
	.byte	7,1,2,35,3,11
	.byte	'LCK',0,1
	.word	618
	.byte	1,0,2,35,3,0,29
	.byte	'Ifx_SCU_EVRSDCOEFF2_Bits',0,4,162,3,3
	.word	29046
	.byte	10
	.byte	'_Ifx_SCU_EVRSDCOEFF3_Bits',0,4,165,3,16,4,11
	.byte	'CT5REG0',0,1
	.word	618
	.byte	8,0,2,35,0,11
	.byte	'CT5REG1',0,1
	.word	618
	.byte	8,0,2,35,1,11
	.byte	'CT5REG2',0,1
	.word	618
	.byte	8,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	618
	.byte	7,1,2,35,3,11
	.byte	'LCK',0,1
	.word	618
	.byte	1,0,2,35,3,0,29
	.byte	'Ifx_SCU_EVRSDCOEFF3_Bits',0,4,172,3,3
	.word	29202
	.byte	10
	.byte	'_Ifx_SCU_EVRSDCOEFF4_Bits',0,4,175,3,16,4,11
	.byte	'CT5REG3',0,1
	.word	618
	.byte	8,0,2,35,0,11
	.byte	'CT5REG4',0,1
	.word	618
	.byte	8,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	635
	.byte	15,1,2,35,2,11
	.byte	'LCK',0,1
	.word	618
	.byte	1,0,2,35,3,0,29
	.byte	'Ifx_SCU_EVRSDCOEFF4_Bits',0,4,181,3,3
	.word	29364
	.byte	10
	.byte	'_Ifx_SCU_EVRSDCOEFF5_Bits',0,4,184,3,16,4,11
	.byte	'CT33REG0',0,1
	.word	618
	.byte	8,0,2,35,0,11
	.byte	'CT33REG1',0,1
	.word	618
	.byte	8,0,2,35,1,11
	.byte	'CT33REG2',0,1
	.word	618
	.byte	8,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	618
	.byte	7,1,2,35,3,11
	.byte	'LCK',0,1
	.word	618
	.byte	1,0,2,35,3,0,29
	.byte	'Ifx_SCU_EVRSDCOEFF5_Bits',0,4,191,3,3
	.word	29507
	.byte	10
	.byte	'_Ifx_SCU_EVRSDCOEFF6_Bits',0,4,194,3,16,4,11
	.byte	'CT33REG3',0,1
	.word	618
	.byte	8,0,2,35,0,11
	.byte	'CT33REG4',0,1
	.word	618
	.byte	8,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	635
	.byte	15,1,2,35,2,11
	.byte	'LCK',0,1
	.word	618
	.byte	1,0,2,35,3,0,29
	.byte	'Ifx_SCU_EVRSDCOEFF6_Bits',0,4,200,3,3
	.word	29672
	.byte	10
	.byte	'_Ifx_SCU_EVRSDCTRL1_Bits',0,4,203,3,16,4,11
	.byte	'SDFREQSPRD',0,2
	.word	635
	.byte	16,0,2,35,0,11
	.byte	'SDFREQ',0,1
	.word	618
	.byte	8,0,2,35,2,11
	.byte	'SDSTEP',0,1
	.word	618
	.byte	4,4,2,35,3,11
	.byte	'reserved_28',0,1
	.word	618
	.byte	2,2,2,35,3,11
	.byte	'SDSAMPLE',0,1
	.word	618
	.byte	1,1,2,35,3,11
	.byte	'LCK',0,1
	.word	618
	.byte	1,0,2,35,3,0,29
	.byte	'Ifx_SCU_EVRSDCTRL1_Bits',0,4,211,3,3
	.word	29817
	.byte	10
	.byte	'_Ifx_SCU_EVRSDCTRL2_Bits',0,4,214,3,16,4,11
	.byte	'DRVP',0,1
	.word	618
	.byte	8,0,2,35,0,11
	.byte	'SDMINMAXDC',0,1
	.word	618
	.byte	8,0,2,35,1,11
	.byte	'DRVN',0,1
	.word	618
	.byte	8,0,2,35,2,11
	.byte	'SDLUT',0,1
	.word	618
	.byte	6,2,2,35,3,11
	.byte	'reserved_30',0,1
	.word	618
	.byte	1,1,2,35,3,11
	.byte	'LCK',0,1
	.word	618
	.byte	1,0,2,35,3,0,29
	.byte	'Ifx_SCU_EVRSDCTRL2_Bits',0,4,222,3,3
	.word	29998
	.byte	10
	.byte	'_Ifx_SCU_EVRSDCTRL3_Bits',0,4,225,3,16,4,11
	.byte	'SDPWMPRE',0,1
	.word	618
	.byte	8,0,2,35,0,11
	.byte	'SDPID',0,1
	.word	618
	.byte	8,0,2,35,1,11
	.byte	'SDVOKLVL',0,1
	.word	618
	.byte	8,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	618
	.byte	7,1,2,35,3,11
	.byte	'LCK',0,1
	.word	618
	.byte	1,0,2,35,3,0,29
	.byte	'Ifx_SCU_EVRSDCTRL3_Bits',0,4,232,3,3
	.word	30172
	.byte	10
	.byte	'_Ifx_SCU_EVRSDCTRL4_Bits',0,4,235,3,16,4,11
	.byte	'reserved_0',0,1
	.word	618
	.byte	8,0,2,35,0,11
	.byte	'SYNCDIV',0,1
	.word	618
	.byte	3,5,2,35,1,11
	.byte	'reserved_11',0,4
	.word	443
	.byte	20,1,2,35,0,11
	.byte	'LCK',0,1
	.word	618
	.byte	1,0,2,35,3,0,29
	.byte	'Ifx_SCU_EVRSDCTRL4_Bits',0,4,241,3,3
	.word	30332
	.byte	10
	.byte	'_Ifx_SCU_EVRSTAT_Bits',0,4,244,3,16,4,11
	.byte	'EVR13',0,1
	.word	618
	.byte	1,7,2,35,0,11
	.byte	'OV13',0,1
	.word	618
	.byte	1,6,2,35,0,11
	.byte	'EVR33',0,1
	.word	618
	.byte	1,5,2,35,0,11
	.byte	'OV33',0,1
	.word	618
	.byte	1,4,2,35,0,11
	.byte	'OVSWD',0,1
	.word	618
	.byte	1,3,2,35,0,11
	.byte	'UV13',0,1
	.word	618
	.byte	1,2,2,35,0,11
	.byte	'UV33',0,1
	.word	618
	.byte	1,1,2,35,0,11
	.byte	'UVSWD',0,1
	.word	618
	.byte	1,0,2,35,0,11
	.byte	'EXTPASS13',0,1
	.word	618
	.byte	1,7,2,35,1,11
	.byte	'EXTPASS33',0,1
	.word	618
	.byte	1,6,2,35,1,11
	.byte	'BGPROK',0,1
	.word	618
	.byte	1,5,2,35,1,11
	.byte	'reserved_11',0,4
	.word	443
	.byte	21,0,2,35,0,0,29
	.byte	'Ifx_SCU_EVRSTAT_Bits',0,4,130,4,3
	.word	30476
	.byte	10
	.byte	'_Ifx_SCU_EVRTRIM_Bits',0,4,133,4,16,4,11
	.byte	'EVR13TRIM',0,1
	.word	618
	.byte	8,0,2,35,0,11
	.byte	'SDVOUTSEL',0,1
	.word	618
	.byte	8,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	635
	.byte	15,1,2,35,2,11
	.byte	'LCK',0,1
	.word	618
	.byte	1,0,2,35,3,0,29
	.byte	'Ifx_SCU_EVRTRIM_Bits',0,4,139,4,3
	.word	30750
	.byte	10
	.byte	'_Ifx_SCU_EVRUVMON_Bits',0,4,142,4,16,4,11
	.byte	'EVR13UVVAL',0,1
	.word	618
	.byte	8,0,2,35,0,11
	.byte	'EVR33UVVAL',0,1
	.word	618
	.byte	8,0,2,35,1,11
	.byte	'SWDUVVAL',0,1
	.word	618
	.byte	8,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	618
	.byte	7,1,2,35,3,11
	.byte	'LCK',0,1
	.word	618
	.byte	1,0,2,35,3,0,29
	.byte	'Ifx_SCU_EVRUVMON_Bits',0,4,149,4,3
	.word	30889
	.byte	10
	.byte	'_Ifx_SCU_EXTCON_Bits',0,4,152,4,16,4,11
	.byte	'EN0',0,1
	.word	618
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,1
	.word	618
	.byte	1,6,2,35,0,11
	.byte	'SEL0',0,1
	.word	618
	.byte	4,2,2,35,0,11
	.byte	'reserved_6',0,2
	.word	635
	.byte	10,0,2,35,0,11
	.byte	'EN1',0,1
	.word	618
	.byte	1,7,2,35,2,11
	.byte	'NSEL',0,1
	.word	618
	.byte	1,6,2,35,2,11
	.byte	'SEL1',0,1
	.word	618
	.byte	4,2,2,35,2,11
	.byte	'reserved_22',0,1
	.word	618
	.byte	2,0,2,35,2,11
	.byte	'DIV1',0,1
	.word	618
	.byte	8,0,2,35,3,0,29
	.byte	'Ifx_SCU_EXTCON_Bits',0,4,163,4,3
	.word	31052
	.byte	10
	.byte	'_Ifx_SCU_FDR_Bits',0,4,166,4,16,4,11
	.byte	'STEP',0,2
	.word	635
	.byte	10,6,2,35,0,11
	.byte	'reserved_10',0,1
	.word	618
	.byte	4,2,2,35,1,11
	.byte	'DM',0,1
	.word	618
	.byte	2,0,2,35,1,11
	.byte	'RESULT',0,2
	.word	635
	.byte	10,6,2,35,2,11
	.byte	'reserved_26',0,1
	.word	618
	.byte	5,1,2,35,3,11
	.byte	'DISCLK',0,1
	.word	618
	.byte	1,0,2,35,3,0,29
	.byte	'Ifx_SCU_FDR_Bits',0,4,174,4,3
	.word	31270
	.byte	10
	.byte	'_Ifx_SCU_FMR_Bits',0,4,177,4,16,4,11
	.byte	'FS0',0,1
	.word	618
	.byte	1,7,2,35,0,11
	.byte	'FS1',0,1
	.word	618
	.byte	1,6,2,35,0,11
	.byte	'FS2',0,1
	.word	618
	.byte	1,5,2,35,0,11
	.byte	'FS3',0,1
	.word	618
	.byte	1,4,2,35,0,11
	.byte	'FS4',0,1
	.word	618
	.byte	1,3,2,35,0,11
	.byte	'FS5',0,1
	.word	618
	.byte	1,2,2,35,0,11
	.byte	'FS6',0,1
	.word	618
	.byte	1,1,2,35,0,11
	.byte	'FS7',0,1
	.word	618
	.byte	1,0,2,35,0,11
	.byte	'reserved_8',0,1
	.word	618
	.byte	8,0,2,35,1,11
	.byte	'FC0',0,1
	.word	618
	.byte	1,7,2,35,2,11
	.byte	'FC1',0,1
	.word	618
	.byte	1,6,2,35,2,11
	.byte	'FC2',0,1
	.word	618
	.byte	1,5,2,35,2,11
	.byte	'FC3',0,1
	.word	618
	.byte	1,4,2,35,2,11
	.byte	'FC4',0,1
	.word	618
	.byte	1,3,2,35,2,11
	.byte	'FC5',0,1
	.word	618
	.byte	1,2,2,35,2,11
	.byte	'FC6',0,1
	.word	618
	.byte	1,1,2,35,2,11
	.byte	'FC7',0,1
	.word	618
	.byte	1,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	618
	.byte	8,0,2,35,3,0,29
	.byte	'Ifx_SCU_FMR_Bits',0,4,197,4,3
	.word	31433
	.byte	10
	.byte	'_Ifx_SCU_ID_Bits',0,4,200,4,16,4,11
	.byte	'MODREV',0,1
	.word	618
	.byte	8,0,2,35,0,11
	.byte	'MODTYPE',0,1
	.word	618
	.byte	8,0,2,35,1,11
	.byte	'MODNUMBER',0,2
	.word	635
	.byte	16,0,2,35,2,0,29
	.byte	'Ifx_SCU_ID_Bits',0,4,205,4,3
	.word	31769
	.byte	10
	.byte	'_Ifx_SCU_IGCR_Bits',0,4,208,4,16,4,11
	.byte	'IPEN00',0,1
	.word	618
	.byte	1,7,2,35,0,11
	.byte	'IPEN01',0,1
	.word	618
	.byte	1,6,2,35,0,11
	.byte	'IPEN02',0,1
	.word	618
	.byte	1,5,2,35,0,11
	.byte	'IPEN03',0,1
	.word	618
	.byte	1,4,2,35,0,11
	.byte	'IPEN04',0,1
	.word	618
	.byte	1,3,2,35,0,11
	.byte	'IPEN05',0,1
	.word	618
	.byte	1,2,2,35,0,11
	.byte	'IPEN06',0,1
	.word	618
	.byte	1,1,2,35,0,11
	.byte	'IPEN07',0,1
	.word	618
	.byte	1,0,2,35,0,11
	.byte	'reserved_8',0,1
	.word	618
	.byte	5,3,2,35,1,11
	.byte	'GEEN0',0,1
	.word	618
	.byte	1,2,2,35,1,11
	.byte	'IGP0',0,1
	.word	618
	.byte	2,0,2,35,1,11
	.byte	'IPEN10',0,1
	.word	618
	.byte	1,7,2,35,2,11
	.byte	'IPEN11',0,1
	.word	618
	.byte	1,6,2,35,2,11
	.byte	'IPEN12',0,1
	.word	618
	.byte	1,5,2,35,2,11
	.byte	'IPEN13',0,1
	.word	618
	.byte	1,4,2,35,2,11
	.byte	'IPEN14',0,1
	.word	618
	.byte	1,3,2,35,2,11
	.byte	'IPEN15',0,1
	.word	618
	.byte	1,2,2,35,2,11
	.byte	'IPEN16',0,1
	.word	618
	.byte	1,1,2,35,2,11
	.byte	'IPEN17',0,1
	.word	618
	.byte	1,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	618
	.byte	5,3,2,35,3,11
	.byte	'GEEN1',0,1
	.word	618
	.byte	1,2,2,35,3,11
	.byte	'IGP1',0,1
	.word	618
	.byte	2,0,2,35,3,0,29
	.byte	'Ifx_SCU_IGCR_Bits',0,4,232,4,3
	.word	31876
	.byte	10
	.byte	'_Ifx_SCU_IN_Bits',0,4,235,4,16,4,11
	.byte	'P0',0,1
	.word	618
	.byte	1,7,2,35,0,11
	.byte	'P1',0,1
	.word	618
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,4
	.word	443
	.byte	30,0,2,35,0,0,29
	.byte	'Ifx_SCU_IN_Bits',0,4,240,4,3
	.word	32328
	.byte	10
	.byte	'_Ifx_SCU_IOCR_Bits',0,4,243,4,16,4,11
	.byte	'reserved_0',0,1
	.word	618
	.byte	4,4,2,35,0,11
	.byte	'PC0',0,1
	.word	618
	.byte	4,0,2,35,0,11
	.byte	'reserved_8',0,1
	.word	618
	.byte	4,4,2,35,1,11
	.byte	'PC1',0,1
	.word	618
	.byte	4,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	635
	.byte	16,0,2,35,2,0,29
	.byte	'Ifx_SCU_IOCR_Bits',0,4,250,4,3
	.word	32427
	.byte	10
	.byte	'_Ifx_SCU_LBISTCTRL0_Bits',0,4,253,4,16,4,11
	.byte	'LBISTREQ',0,1
	.word	618
	.byte	1,7,2,35,0,11
	.byte	'LBISTREQP',0,1
	.word	618
	.byte	1,6,2,35,0,11
	.byte	'PATTERNS',0,2
	.word	635
	.byte	14,0,2,35,0,11
	.byte	'reserved_16',0,2
	.word	635
	.byte	16,0,2,35,2,0,29
	.byte	'Ifx_SCU_LBISTCTRL0_Bits',0,4,131,5,3
	.word	32577
	.byte	10
	.byte	'_Ifx_SCU_LBISTCTRL1_Bits',0,4,134,5,16,4,11
	.byte	'SEED',0,4
	.word	443
	.byte	23,9,2,35,0,11
	.byte	'reserved_23',0,1
	.word	618
	.byte	1,0,2,35,2,11
	.byte	'SPLITSH',0,1
	.word	618
	.byte	3,5,2,35,3,11
	.byte	'BODY',0,1
	.word	618
	.byte	1,4,2,35,3,11
	.byte	'LBISTFREQU',0,1
	.word	618
	.byte	4,0,2,35,3,0,29
	.byte	'Ifx_SCU_LBISTCTRL1_Bits',0,4,141,5,3
	.word	32726
	.byte	10
	.byte	'_Ifx_SCU_LBISTCTRL2_Bits',0,4,144,5,16,4,11
	.byte	'SIGNATURE',0,4
	.word	443
	.byte	24,8,2,35,0,11
	.byte	'reserved_24',0,1
	.word	618
	.byte	7,1,2,35,3,11
	.byte	'LBISTDONE',0,1
	.word	618
	.byte	1,0,2,35,3,0,29
	.byte	'Ifx_SCU_LBISTCTRL2_Bits',0,4,149,5,3
	.word	32887
	.byte	10
	.byte	'_Ifx_SCU_LCLCON_Bits',0,4,152,5,16,4,11
	.byte	'reserved_0',0,2
	.word	635
	.byte	16,0,2,35,0,11
	.byte	'LS',0,1
	.word	618
	.byte	1,7,2,35,2,11
	.byte	'reserved_17',0,2
	.word	635
	.byte	14,1,2,35,2,11
	.byte	'LSEN',0,1
	.word	618
	.byte	1,0,2,35,3,0,29
	.byte	'Ifx_SCU_LCLCON_Bits',0,4,158,5,3
	.word	33017
	.byte	10
	.byte	'_Ifx_SCU_LCLTEST_Bits',0,4,161,5,16,4,11
	.byte	'LCLT0',0,1
	.word	618
	.byte	1,7,2,35,0,11
	.byte	'LCLT1',0,1
	.word	618
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,4
	.word	443
	.byte	30,0,2,35,0,0,29
	.byte	'Ifx_SCU_LCLTEST_Bits',0,4,166,5,3
	.word	33149
	.byte	10
	.byte	'_Ifx_SCU_MANID_Bits',0,4,169,5,16,4,11
	.byte	'DEPT',0,1
	.word	618
	.byte	5,3,2,35,0,11
	.byte	'MANUF',0,2
	.word	635
	.byte	11,0,2,35,0,11
	.byte	'reserved_16',0,2
	.word	635
	.byte	16,0,2,35,2,0,29
	.byte	'Ifx_SCU_MANID_Bits',0,4,174,5,3
	.word	33264
	.byte	10
	.byte	'_Ifx_SCU_OMR_Bits',0,4,177,5,16,4,11
	.byte	'PS0',0,1
	.word	618
	.byte	1,7,2,35,0,11
	.byte	'PS1',0,1
	.word	618
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,2
	.word	635
	.byte	14,0,2,35,0,11
	.byte	'PCL0',0,1
	.word	618
	.byte	1,7,2,35,2,11
	.byte	'PCL1',0,1
	.word	618
	.byte	1,6,2,35,2,11
	.byte	'reserved_18',0,2
	.word	635
	.byte	14,0,2,35,2,0,29
	.byte	'Ifx_SCU_OMR_Bits',0,4,185,5,3
	.word	33375
	.byte	10
	.byte	'_Ifx_SCU_OSCCON_Bits',0,4,188,5,16,4,11
	.byte	'reserved_0',0,1
	.word	618
	.byte	1,7,2,35,0,11
	.byte	'PLLLV',0,1
	.word	618
	.byte	1,6,2,35,0,11
	.byte	'OSCRES',0,1
	.word	618
	.byte	1,5,2,35,0,11
	.byte	'GAINSEL',0,1
	.word	618
	.byte	2,3,2,35,0,11
	.byte	'MODE',0,1
	.word	618
	.byte	2,1,2,35,0,11
	.byte	'SHBY',0,1
	.word	618
	.byte	1,0,2,35,0,11
	.byte	'PLLHV',0,1
	.word	618
	.byte	1,7,2,35,1,11
	.byte	'reserved_9',0,1
	.word	618
	.byte	1,6,2,35,1,11
	.byte	'X1D',0,1
	.word	618
	.byte	1,5,2,35,1,11
	.byte	'X1DEN',0,1
	.word	618
	.byte	1,4,2,35,1,11
	.byte	'reserved_12',0,1
	.word	618
	.byte	4,0,2,35,1,11
	.byte	'OSCVAL',0,1
	.word	618
	.byte	5,3,2,35,2,11
	.byte	'reserved_21',0,1
	.word	618
	.byte	2,1,2,35,2,11
	.byte	'APREN',0,1
	.word	618
	.byte	1,0,2,35,2,11
	.byte	'CAP0EN',0,1
	.word	618
	.byte	1,7,2,35,3,11
	.byte	'CAP1EN',0,1
	.word	618
	.byte	1,6,2,35,3,11
	.byte	'CAP2EN',0,1
	.word	618
	.byte	1,5,2,35,3,11
	.byte	'CAP3EN',0,1
	.word	618
	.byte	1,4,2,35,3,11
	.byte	'reserved_28',0,1
	.word	618
	.byte	4,0,2,35,3,0,29
	.byte	'Ifx_SCU_OSCCON_Bits',0,4,209,5,3
	.word	33533
	.byte	10
	.byte	'_Ifx_SCU_OUT_Bits',0,4,212,5,16,4,11
	.byte	'P0',0,1
	.word	618
	.byte	1,7,2,35,0,11
	.byte	'P1',0,1
	.word	618
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,4
	.word	443
	.byte	30,0,2,35,0,0,29
	.byte	'Ifx_SCU_OUT_Bits',0,4,217,5,3
	.word	33945
	.byte	10
	.byte	'_Ifx_SCU_OVCCON_Bits',0,4,220,5,16,4,11
	.byte	'CSEL0',0,1
	.word	618
	.byte	1,7,2,35,0,11
	.byte	'CSEL1',0,1
	.word	618
	.byte	1,6,2,35,0,11
	.byte	'CSEL2',0,1
	.word	618
	.byte	1,5,2,35,0,11
	.byte	'reserved_3',0,2
	.word	635
	.byte	13,0,2,35,0,11
	.byte	'OVSTRT',0,1
	.word	618
	.byte	1,7,2,35,2,11
	.byte	'OVSTP',0,1
	.word	618
	.byte	1,6,2,35,2,11
	.byte	'DCINVAL',0,1
	.word	618
	.byte	1,5,2,35,2,11
	.byte	'reserved_19',0,1
	.word	618
	.byte	5,0,2,35,2,11
	.byte	'OVCONF',0,1
	.word	618
	.byte	1,7,2,35,3,11
	.byte	'POVCONF',0,1
	.word	618
	.byte	1,6,2,35,3,11
	.byte	'reserved_26',0,1
	.word	618
	.byte	6,0,2,35,3,0,29
	.byte	'Ifx_SCU_OVCCON_Bits',0,4,233,5,3
	.word	34046
	.byte	10
	.byte	'_Ifx_SCU_OVCENABLE_Bits',0,4,236,5,16,4,11
	.byte	'OVEN0',0,1
	.word	618
	.byte	1,7,2,35,0,11
	.byte	'OVEN1',0,1
	.word	618
	.byte	1,6,2,35,0,11
	.byte	'OVEN2',0,1
	.word	618
	.byte	1,5,2,35,0,11
	.byte	'reserved_3',0,4
	.word	443
	.byte	29,0,2,35,0,0,29
	.byte	'Ifx_SCU_OVCENABLE_Bits',0,4,242,5,3
	.word	34313
	.byte	10
	.byte	'_Ifx_SCU_PDISC_Bits',0,4,245,5,16,4,11
	.byte	'PDIS0',0,1
	.word	618
	.byte	1,7,2,35,0,11
	.byte	'PDIS1',0,1
	.word	618
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,4
	.word	443
	.byte	30,0,2,35,0,0,29
	.byte	'Ifx_SCU_PDISC_Bits',0,4,250,5,3
	.word	34449
	.byte	10
	.byte	'_Ifx_SCU_PDR_Bits',0,4,253,5,16,4,11
	.byte	'PD0',0,1
	.word	618
	.byte	3,5,2,35,0,11
	.byte	'PL0',0,1
	.word	618
	.byte	1,4,2,35,0,11
	.byte	'PD1',0,1
	.word	618
	.byte	3,1,2,35,0,11
	.byte	'PL1',0,1
	.word	618
	.byte	1,0,2,35,0,11
	.byte	'reserved_8',0,4
	.word	443
	.byte	24,0,2,35,0,0,29
	.byte	'Ifx_SCU_PDR_Bits',0,4,132,6,3
	.word	34560
	.byte	10
	.byte	'_Ifx_SCU_PDRR_Bits',0,4,135,6,16,4,11
	.byte	'PDR0',0,1
	.word	618
	.byte	1,7,2,35,0,11
	.byte	'PDR1',0,1
	.word	618
	.byte	1,6,2,35,0,11
	.byte	'PDR2',0,1
	.word	618
	.byte	1,5,2,35,0,11
	.byte	'PDR3',0,1
	.word	618
	.byte	1,4,2,35,0,11
	.byte	'PDR4',0,1
	.word	618
	.byte	1,3,2,35,0,11
	.byte	'PDR5',0,1
	.word	618
	.byte	1,2,2,35,0,11
	.byte	'PDR6',0,1
	.word	618
	.byte	1,1,2,35,0,11
	.byte	'PDR7',0,1
	.word	618
	.byte	1,0,2,35,0,11
	.byte	'reserved_8',0,4
	.word	443
	.byte	24,0,2,35,0,0,29
	.byte	'Ifx_SCU_PDRR_Bits',0,4,146,6,3
	.word	34693
	.byte	10
	.byte	'_Ifx_SCU_PLLCON0_Bits',0,4,149,6,16,4,11
	.byte	'VCOBYP',0,1
	.word	618
	.byte	1,7,2,35,0,11
	.byte	'VCOPWD',0,1
	.word	618
	.byte	1,6,2,35,0,11
	.byte	'MODEN',0,1
	.word	618
	.byte	1,5,2,35,0,11
	.byte	'reserved_3',0,1
	.word	618
	.byte	1,4,2,35,0,11
	.byte	'SETFINDIS',0,1
	.word	618
	.byte	1,3,2,35,0,11
	.byte	'CLRFINDIS',0,1
	.word	618
	.byte	1,2,2,35,0,11
	.byte	'OSCDISCDIS',0,1
	.word	618
	.byte	1,1,2,35,0,11
	.byte	'reserved_7',0,2
	.word	635
	.byte	2,7,2,35,0,11
	.byte	'NDIV',0,1
	.word	618
	.byte	7,0,2,35,1,11
	.byte	'PLLPWD',0,1
	.word	618
	.byte	1,7,2,35,2,11
	.byte	'reserved_17',0,1
	.word	618
	.byte	1,6,2,35,2,11
	.byte	'RESLD',0,1
	.word	618
	.byte	1,5,2,35,2,11
	.byte	'reserved_19',0,1
	.word	618
	.byte	5,0,2,35,2,11
	.byte	'PDIV',0,1
	.word	618
	.byte	4,4,2,35,3,11
	.byte	'reserved_28',0,1
	.word	618
	.byte	4,0,2,35,3,0,29
	.byte	'Ifx_SCU_PLLCON0_Bits',0,4,166,6,3
	.word	34896
	.byte	10
	.byte	'_Ifx_SCU_PLLCON1_Bits',0,4,169,6,16,4,11
	.byte	'K2DIV',0,1
	.word	618
	.byte	7,1,2,35,0,11
	.byte	'reserved_7',0,1
	.word	618
	.byte	1,0,2,35,0,11
	.byte	'K3DIV',0,1
	.word	618
	.byte	7,1,2,35,1,11
	.byte	'reserved_15',0,1
	.word	618
	.byte	1,0,2,35,1,11
	.byte	'K1DIV',0,1
	.word	618
	.byte	7,1,2,35,2,11
	.byte	'reserved_23',0,2
	.word	635
	.byte	9,0,2,35,2,0,29
	.byte	'Ifx_SCU_PLLCON1_Bits',0,4,177,6,3
	.word	35252
	.byte	10
	.byte	'_Ifx_SCU_PLLCON2_Bits',0,4,180,6,16,4,11
	.byte	'MODCFG',0,2
	.word	635
	.byte	16,0,2,35,0,11
	.byte	'reserved_16',0,2
	.word	635
	.byte	16,0,2,35,2,0,29
	.byte	'Ifx_SCU_PLLCON2_Bits',0,4,184,6,3
	.word	35430
	.byte	10
	.byte	'_Ifx_SCU_PLLERAYCON0_Bits',0,4,187,6,16,4,11
	.byte	'VCOBYP',0,1
	.word	618
	.byte	1,7,2,35,0,11
	.byte	'VCOPWD',0,1
	.word	618
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	618
	.byte	2,4,2,35,0,11
	.byte	'SETFINDIS',0,1
	.word	618
	.byte	1,3,2,35,0,11
	.byte	'CLRFINDIS',0,1
	.word	618
	.byte	1,2,2,35,0,11
	.byte	'OSCDISCDIS',0,1
	.word	618
	.byte	1,1,2,35,0,11
	.byte	'reserved_7',0,2
	.word	635
	.byte	2,7,2,35,0,11
	.byte	'NDIV',0,1
	.word	618
	.byte	5,2,2,35,1,11
	.byte	'reserved_14',0,1
	.word	618
	.byte	2,0,2,35,1,11
	.byte	'PLLPWD',0,1
	.word	618
	.byte	1,7,2,35,2,11
	.byte	'reserved_17',0,1
	.word	618
	.byte	1,6,2,35,2,11
	.byte	'RESLD',0,1
	.word	618
	.byte	1,5,2,35,2,11
	.byte	'reserved_19',0,1
	.word	618
	.byte	5,0,2,35,2,11
	.byte	'PDIV',0,1
	.word	618
	.byte	4,4,2,35,3,11
	.byte	'reserved_28',0,1
	.word	618
	.byte	4,0,2,35,3,0,29
	.byte	'Ifx_SCU_PLLERAYCON0_Bits',0,4,204,6,3
	.word	35530
	.byte	10
	.byte	'_Ifx_SCU_PLLERAYCON1_Bits',0,4,207,6,16,4,11
	.byte	'K2DIV',0,1
	.word	618
	.byte	7,1,2,35,0,11
	.byte	'reserved_7',0,1
	.word	618
	.byte	1,0,2,35,0,11
	.byte	'K3DIV',0,1
	.word	618
	.byte	4,4,2,35,1,11
	.byte	'reserved_12',0,1
	.word	618
	.byte	4,0,2,35,1,11
	.byte	'K1DIV',0,1
	.word	618
	.byte	7,1,2,35,2,11
	.byte	'reserved_23',0,2
	.word	635
	.byte	9,0,2,35,2,0,29
	.byte	'Ifx_SCU_PLLERAYCON1_Bits',0,4,215,6,3
	.word	35900
	.byte	10
	.byte	'_Ifx_SCU_PLLERAYSTAT_Bits',0,4,218,6,16,4,11
	.byte	'VCOBYST',0,1
	.word	618
	.byte	1,7,2,35,0,11
	.byte	'PWDSTAT',0,1
	.word	618
	.byte	1,6,2,35,0,11
	.byte	'VCOLOCK',0,1
	.word	618
	.byte	1,5,2,35,0,11
	.byte	'FINDIS',0,1
	.word	618
	.byte	1,4,2,35,0,11
	.byte	'K1RDY',0,1
	.word	618
	.byte	1,3,2,35,0,11
	.byte	'K2RDY',0,1
	.word	618
	.byte	1,2,2,35,0,11
	.byte	'reserved_6',0,4
	.word	443
	.byte	26,0,2,35,0,0,29
	.byte	'Ifx_SCU_PLLERAYSTAT_Bits',0,4,227,6,3
	.word	36086
	.byte	10
	.byte	'_Ifx_SCU_PLLSTAT_Bits',0,4,230,6,16,4,11
	.byte	'VCOBYST',0,1
	.word	618
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,1
	.word	618
	.byte	1,6,2,35,0,11
	.byte	'VCOLOCK',0,1
	.word	618
	.byte	1,5,2,35,0,11
	.byte	'FINDIS',0,1
	.word	618
	.byte	1,4,2,35,0,11
	.byte	'K1RDY',0,1
	.word	618
	.byte	1,3,2,35,0,11
	.byte	'K2RDY',0,1
	.word	618
	.byte	1,2,2,35,0,11
	.byte	'reserved_6',0,1
	.word	618
	.byte	1,1,2,35,0,11
	.byte	'MODRUN',0,1
	.word	618
	.byte	1,0,2,35,0,11
	.byte	'reserved_8',0,4
	.word	443
	.byte	24,0,2,35,0,0,29
	.byte	'Ifx_SCU_PLLSTAT_Bits',0,4,241,6,3
	.word	36284
	.byte	10
	.byte	'_Ifx_SCU_PMCSR_Bits',0,4,244,6,16,4,11
	.byte	'REQSLP',0,1
	.word	618
	.byte	2,6,2,35,0,11
	.byte	'SMUSLP',0,1
	.word	618
	.byte	1,5,2,35,0,11
	.byte	'reserved_3',0,1
	.word	618
	.byte	5,0,2,35,0,11
	.byte	'PMST',0,1
	.word	618
	.byte	3,5,2,35,1,11
	.byte	'reserved_11',0,4
	.word	443
	.byte	21,0,2,35,0,0,29
	.byte	'Ifx_SCU_PMCSR_Bits',0,4,251,6,3
	.word	36517
	.byte	10
	.byte	'_Ifx_SCU_PMSWCR0_Bits',0,4,254,6,16,4,11
	.byte	'reserved_0',0,1
	.word	618
	.byte	1,7,2,35,0,11
	.byte	'ESR1WKEN',0,1
	.word	618
	.byte	1,6,2,35,0,11
	.byte	'PINAWKEN',0,1
	.word	618
	.byte	1,5,2,35,0,11
	.byte	'PINBWKEN',0,1
	.word	618
	.byte	1,4,2,35,0,11
	.byte	'ESR0DFEN',0,1
	.word	618
	.byte	1,3,2,35,0,11
	.byte	'ESR0EDCON',0,1
	.word	618
	.byte	2,1,2,35,0,11
	.byte	'ESR1DFEN',0,1
	.word	618
	.byte	1,0,2,35,0,11
	.byte	'ESR1EDCON',0,1
	.word	618
	.byte	2,6,2,35,1,11
	.byte	'PINADFEN',0,1
	.word	618
	.byte	1,5,2,35,1,11
	.byte	'PINAEDCON',0,1
	.word	618
	.byte	2,3,2,35,1,11
	.byte	'PINBDFEN',0,1
	.word	618
	.byte	1,2,2,35,1,11
	.byte	'PINBEDCON',0,1
	.word	618
	.byte	2,0,2,35,1,11
	.byte	'SCREN',0,1
	.word	618
	.byte	1,7,2,35,2,11
	.byte	'STBYRAMSEL',0,1
	.word	618
	.byte	2,5,2,35,2,11
	.byte	'SCRCLKSEL',0,1
	.word	618
	.byte	1,4,2,35,2,11
	.byte	'SCRWKEN',0,1
	.word	618
	.byte	1,3,2,35,2,11
	.byte	'TRISTEN',0,1
	.word	618
	.byte	1,2,2,35,2,11
	.byte	'TRISTREQ',0,1
	.word	618
	.byte	1,1,2,35,2,11
	.byte	'PORSTDF',0,1
	.word	618
	.byte	1,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	618
	.byte	1,7,2,35,3,11
	.byte	'DCDCSYNC',0,1
	.word	618
	.byte	1,6,2,35,3,11
	.byte	'reserved_26',0,1
	.word	618
	.byte	3,3,2,35,3,11
	.byte	'ESR0TRIST',0,1
	.word	618
	.byte	1,2,2,35,3,11
	.byte	'reserved_30',0,1
	.word	618
	.byte	1,1,2,35,3,11
	.byte	'LCK',0,1
	.word	618
	.byte	1,0,2,35,3,0,29
	.byte	'Ifx_SCU_PMSWCR0_Bits',0,4,153,7,3
	.word	36669
	.byte	10
	.byte	'_Ifx_SCU_PMSWCR1_Bits',0,4,156,7,16,4,11
	.byte	'SCRSTEN',0,1
	.word	618
	.byte	1,7,2,35,0,11
	.byte	'SCRSTREQ',0,1
	.word	618
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	618
	.byte	6,0,2,35,0,11
	.byte	'CPUIDLSEL',0,1
	.word	618
	.byte	3,5,2,35,1,11
	.byte	'reserved_11',0,1
	.word	618
	.byte	1,4,2,35,1,11
	.byte	'IRADIS',0,1
	.word	618
	.byte	1,3,2,35,1,11
	.byte	'reserved_13',0,1
	.word	618
	.byte	3,0,2,35,1,11
	.byte	'SCRCFG',0,1
	.word	618
	.byte	8,0,2,35,2,11
	.byte	'CPUSEL',0,1
	.word	618
	.byte	3,5,2,35,3,11
	.byte	'STBYEVEN',0,1
	.word	618
	.byte	1,4,2,35,3,11
	.byte	'STBYEV',0,1
	.word	618
	.byte	3,1,2,35,3,11
	.byte	'LCK',0,1
	.word	618
	.byte	1,0,2,35,3,0,29
	.byte	'Ifx_SCU_PMSWCR1_Bits',0,4,170,7,3
	.word	37236
	.byte	10
	.byte	'_Ifx_SCU_PMSWCR2_Bits',0,4,173,7,16,4,11
	.byte	'SCRINT',0,1
	.word	618
	.byte	8,0,2,35,0,11
	.byte	'BUSY',0,1
	.word	618
	.byte	1,7,2,35,1,11
	.byte	'SCRECC',0,1
	.word	618
	.byte	1,6,2,35,1,11
	.byte	'SCRWDT',0,1
	.word	618
	.byte	1,5,2,35,1,11
	.byte	'SCRRST',0,1
	.word	618
	.byte	1,4,2,35,1,11
	.byte	'reserved_12',0,1
	.word	618
	.byte	4,0,2,35,1,11
	.byte	'TCINT',0,1
	.word	618
	.byte	8,0,2,35,2,11
	.byte	'TCINTREQ',0,1
	.word	618
	.byte	1,7,2,35,3,11
	.byte	'SMURST',0,1
	.word	618
	.byte	1,6,2,35,3,11
	.byte	'RST',0,1
	.word	618
	.byte	1,5,2,35,3,11
	.byte	'reserved_27',0,1
	.word	618
	.byte	4,1,2,35,3,11
	.byte	'LCK',0,1
	.word	618
	.byte	1,0,2,35,3,0,29
	.byte	'Ifx_SCU_PMSWCR2_Bits',0,4,187,7,3
	.word	37530
	.byte	10
	.byte	'_Ifx_SCU_PMSWSTAT_Bits',0,4,190,7,16,4,11
	.byte	'reserved_0',0,1
	.word	618
	.byte	2,6,2,35,0,11
	.byte	'ESR1WKP',0,1
	.word	618
	.byte	1,5,2,35,0,11
	.byte	'ESR1OVRUN',0,1
	.word	618
	.byte	1,4,2,35,0,11
	.byte	'PINAWKP',0,1
	.word	618
	.byte	1,3,2,35,0,11
	.byte	'PINAOVRUN',0,1
	.word	618
	.byte	1,2,2,35,0,11
	.byte	'PINBWKP',0,1
	.word	618
	.byte	1,1,2,35,0,11
	.byte	'PINBOVRUN',0,1
	.word	618
	.byte	1,0,2,35,0,11
	.byte	'reserved_8',0,1
	.word	618
	.byte	1,7,2,35,1,11
	.byte	'PORSTDF',0,1
	.word	618
	.byte	1,6,2,35,1,11
	.byte	'HWCFGEVR',0,1
	.word	618
	.byte	3,3,2,35,1,11
	.byte	'STBYRAM',0,1
	.word	618
	.byte	2,1,2,35,1,11
	.byte	'TRIST',0,1
	.word	618
	.byte	1,0,2,35,1,11
	.byte	'SCRST',0,1
	.word	618
	.byte	1,7,2,35,2,11
	.byte	'SCRWKP',0,1
	.word	618
	.byte	1,6,2,35,2,11
	.byte	'SCR',0,1
	.word	618
	.byte	1,5,2,35,2,11
	.byte	'SCRWKEN',0,1
	.word	618
	.byte	1,4,2,35,2,11
	.byte	'ESR1WKEN',0,1
	.word	618
	.byte	1,3,2,35,2,11
	.byte	'PINAWKEN',0,1
	.word	618
	.byte	1,2,2,35,2,11
	.byte	'PINBWKEN',0,1
	.word	618
	.byte	1,1,2,35,2,11
	.byte	'reserved_23',0,2
	.word	635
	.byte	4,5,2,35,2,11
	.byte	'ESR0TRIST',0,1
	.word	618
	.byte	1,4,2,35,3,11
	.byte	'reserved_28',0,1
	.word	618
	.byte	4,0,2,35,3,0,29
	.byte	'Ifx_SCU_PMSWSTAT_Bits',0,4,214,7,3
	.word	37808
	.byte	10
	.byte	'_Ifx_SCU_PMSWSTATCLR_Bits',0,4,217,7,16,4,11
	.byte	'reserved_0',0,1
	.word	618
	.byte	2,6,2,35,0,11
	.byte	'ESR1WKPCLR',0,1
	.word	618
	.byte	1,5,2,35,0,11
	.byte	'ESR1OVRUNCLR',0,1
	.word	618
	.byte	1,4,2,35,0,11
	.byte	'PINAWKPCLR',0,1
	.word	618
	.byte	1,3,2,35,0,11
	.byte	'PINAOVRUNCLR',0,1
	.word	618
	.byte	1,2,2,35,0,11
	.byte	'PINBWKPCLR',0,1
	.word	618
	.byte	1,1,2,35,0,11
	.byte	'PINBOVRUNCLR',0,1
	.word	618
	.byte	1,0,2,35,0,11
	.byte	'reserved_8',0,1
	.word	618
	.byte	8,0,2,35,1,11
	.byte	'SCRSTCLR',0,1
	.word	618
	.byte	1,7,2,35,2,11
	.byte	'SCRWKPCLR',0,1
	.word	618
	.byte	1,6,2,35,2,11
	.byte	'reserved_18',0,2
	.word	635
	.byte	14,0,2,35,2,0,29
	.byte	'Ifx_SCU_PMSWSTATCLR_Bits',0,4,230,7,3
	.word	38304
	.byte	10
	.byte	'_Ifx_SCU_RSTCON2_Bits',0,4,233,7,16,4,11
	.byte	'reserved_0',0,1
	.word	618
	.byte	1,7,2,35,0,11
	.byte	'CLRC',0,1
	.word	618
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,2
	.word	635
	.byte	10,4,2,35,0,11
	.byte	'CSS0',0,1
	.word	618
	.byte	1,3,2,35,1,11
	.byte	'CSS1',0,1
	.word	618
	.byte	1,2,2,35,1,11
	.byte	'CSS2',0,1
	.word	618
	.byte	1,1,2,35,1,11
	.byte	'reserved_15',0,1
	.word	618
	.byte	1,0,2,35,1,11
	.byte	'USRINFO',0,2
	.word	635
	.byte	16,0,2,35,2,0,29
	.byte	'Ifx_SCU_RSTCON2_Bits',0,4,243,7,3
	.word	38617
	.byte	10
	.byte	'_Ifx_SCU_RSTCON_Bits',0,4,246,7,16,4,11
	.byte	'ESR0',0,1
	.word	618
	.byte	2,6,2,35,0,11
	.byte	'ESR1',0,1
	.word	618
	.byte	2,4,2,35,0,11
	.byte	'reserved_4',0,1
	.word	618
	.byte	2,2,2,35,0,11
	.byte	'SMU',0,1
	.word	618
	.byte	2,0,2,35,0,11
	.byte	'SW',0,1
	.word	618
	.byte	2,6,2,35,1,11
	.byte	'STM0',0,1
	.word	618
	.byte	2,4,2,35,1,11
	.byte	'STM1',0,1
	.word	618
	.byte	2,2,2,35,1,11
	.byte	'STM2',0,1
	.word	618
	.byte	2,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	635
	.byte	16,0,2,35,2,0,29
	.byte	'Ifx_SCU_RSTCON_Bits',0,4,129,8,3
	.word	38826
	.byte	10
	.byte	'_Ifx_SCU_RSTSTAT_Bits',0,4,132,8,16,4,11
	.byte	'ESR0',0,1
	.word	618
	.byte	1,7,2,35,0,11
	.byte	'ESR1',0,1
	.word	618
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	618
	.byte	1,5,2,35,0,11
	.byte	'SMU',0,1
	.word	618
	.byte	1,4,2,35,0,11
	.byte	'SW',0,1
	.word	618
	.byte	1,3,2,35,0,11
	.byte	'STM0',0,1
	.word	618
	.byte	1,2,2,35,0,11
	.byte	'STM1',0,1
	.word	618
	.byte	1,1,2,35,0,11
	.byte	'STM2',0,1
	.word	618
	.byte	1,0,2,35,0,11
	.byte	'reserved_8',0,1
	.word	618
	.byte	8,0,2,35,1,11
	.byte	'PORST',0,1
	.word	618
	.byte	1,7,2,35,2,11
	.byte	'reserved_17',0,1
	.word	618
	.byte	1,6,2,35,2,11
	.byte	'CB0',0,1
	.word	618
	.byte	1,5,2,35,2,11
	.byte	'CB1',0,1
	.word	618
	.byte	1,4,2,35,2,11
	.byte	'CB3',0,1
	.word	618
	.byte	1,3,2,35,2,11
	.byte	'reserved_21',0,1
	.word	618
	.byte	2,1,2,35,2,11
	.byte	'EVR13',0,1
	.word	618
	.byte	1,0,2,35,2,11
	.byte	'EVR33',0,1
	.word	618
	.byte	1,7,2,35,3,11
	.byte	'SWD',0,1
	.word	618
	.byte	1,6,2,35,3,11
	.byte	'reserved_26',0,1
	.word	618
	.byte	2,4,2,35,3,11
	.byte	'STBYR',0,1
	.word	618
	.byte	1,3,2,35,3,11
	.byte	'reserved_29',0,1
	.word	618
	.byte	3,0,2,35,3,0,29
	.byte	'Ifx_SCU_RSTSTAT_Bits',0,4,155,8,3
	.word	39037
	.byte	10
	.byte	'_Ifx_SCU_SAFECON_Bits',0,4,158,8,16,4,11
	.byte	'HBT',0,1
	.word	618
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,4
	.word	443
	.byte	31,0,2,35,0,0,29
	.byte	'Ifx_SCU_SAFECON_Bits',0,4,162,8,3
	.word	39469
	.byte	10
	.byte	'_Ifx_SCU_STSTAT_Bits',0,4,165,8,16,4,11
	.byte	'HWCFG',0,1
	.word	618
	.byte	8,0,2,35,0,11
	.byte	'FTM',0,1
	.word	618
	.byte	7,1,2,35,1,11
	.byte	'MODE',0,1
	.word	618
	.byte	1,0,2,35,1,11
	.byte	'FCBAE',0,1
	.word	618
	.byte	1,7,2,35,2,11
	.byte	'LUDIS',0,1
	.word	618
	.byte	1,6,2,35,2,11
	.byte	'reserved_18',0,1
	.word	618
	.byte	1,5,2,35,2,11
	.byte	'TRSTL',0,1
	.word	618
	.byte	1,4,2,35,2,11
	.byte	'SPDEN',0,1
	.word	618
	.byte	1,3,2,35,2,11
	.byte	'reserved_21',0,1
	.word	618
	.byte	3,0,2,35,2,11
	.byte	'RAMINT',0,1
	.word	618
	.byte	1,7,2,35,3,11
	.byte	'reserved_25',0,1
	.word	618
	.byte	7,0,2,35,3,0,29
	.byte	'Ifx_SCU_STSTAT_Bits',0,4,178,8,3
	.word	39565
	.byte	10
	.byte	'_Ifx_SCU_SWRSTCON_Bits',0,4,181,8,16,4,11
	.byte	'reserved_0',0,1
	.word	618
	.byte	1,7,2,35,0,11
	.byte	'SWRSTREQ',0,1
	.word	618
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,4
	.word	443
	.byte	30,0,2,35,0,0,29
	.byte	'Ifx_SCU_SWRSTCON_Bits',0,4,186,8,3
	.word	39825
	.byte	10
	.byte	'_Ifx_SCU_SYSCON_Bits',0,4,189,8,16,4,11
	.byte	'CCTRIG0',0,1
	.word	618
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,1
	.word	618
	.byte	1,6,2,35,0,11
	.byte	'RAMINTM',0,1
	.word	618
	.byte	2,4,2,35,0,11
	.byte	'SETLUDIS',0,1
	.word	618
	.byte	1,3,2,35,0,11
	.byte	'reserved_5',0,1
	.word	618
	.byte	3,0,2,35,0,11
	.byte	'DATM',0,1
	.word	618
	.byte	1,7,2,35,1,11
	.byte	'reserved_9',0,4
	.word	443
	.byte	23,0,2,35,0,0,29
	.byte	'Ifx_SCU_SYSCON_Bits',0,4,198,8,3
	.word	39950
	.byte	10
	.byte	'_Ifx_SCU_TRAPCLR_Bits',0,4,201,8,16,4,11
	.byte	'ESR0T',0,1
	.word	618
	.byte	1,7,2,35,0,11
	.byte	'ESR1T',0,1
	.word	618
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	618
	.byte	1,5,2,35,0,11
	.byte	'SMUT',0,1
	.word	618
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,4
	.word	443
	.byte	28,0,2,35,0,0,29
	.byte	'Ifx_SCU_TRAPCLR_Bits',0,4,208,8,3
	.word	40147
	.byte	10
	.byte	'_Ifx_SCU_TRAPDIS_Bits',0,4,211,8,16,4,11
	.byte	'ESR0T',0,1
	.word	618
	.byte	1,7,2,35,0,11
	.byte	'ESR1T',0,1
	.word	618
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	618
	.byte	1,5,2,35,0,11
	.byte	'SMUT',0,1
	.word	618
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,4
	.word	443
	.byte	28,0,2,35,0,0,29
	.byte	'Ifx_SCU_TRAPDIS_Bits',0,4,218,8,3
	.word	40300
	.byte	10
	.byte	'_Ifx_SCU_TRAPSET_Bits',0,4,221,8,16,4,11
	.byte	'ESR0T',0,1
	.word	618
	.byte	1,7,2,35,0,11
	.byte	'ESR1T',0,1
	.word	618
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	618
	.byte	1,5,2,35,0,11
	.byte	'SMUT',0,1
	.word	618
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,4
	.word	443
	.byte	28,0,2,35,0,0,29
	.byte	'Ifx_SCU_TRAPSET_Bits',0,4,228,8,3
	.word	40453
	.byte	10
	.byte	'_Ifx_SCU_TRAPSTAT_Bits',0,4,231,8,16,4,11
	.byte	'ESR0T',0,1
	.word	618
	.byte	1,7,2,35,0,11
	.byte	'ESR1T',0,1
	.word	618
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	618
	.byte	1,5,2,35,0,11
	.byte	'SMUT',0,1
	.word	618
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,4
	.word	443
	.byte	28,0,2,35,0,0,29
	.byte	'Ifx_SCU_TRAPSTAT_Bits',0,4,238,8,3
	.word	40606
	.byte	29
	.byte	'Ifx_SCU_WDTCPU_CON0_Bits',0,4,247,8,3
	.word	482
	.byte	29
	.byte	'Ifx_SCU_WDTCPU_CON1_Bits',0,4,134,9,3
	.word	657
	.byte	29
	.byte	'Ifx_SCU_WDTCPU_SR_Bits',0,4,150,9,3
	.word	901
	.byte	10
	.byte	'_Ifx_SCU_WDTS_CON0_Bits',0,4,153,9,16,4,11
	.byte	'ENDINIT',0,4
	.word	466
	.byte	1,31,2,35,0,11
	.byte	'LCK',0,4
	.word	466
	.byte	1,30,2,35,0,11
	.byte	'PW',0,4
	.word	466
	.byte	14,16,2,35,0,11
	.byte	'REL',0,4
	.word	466
	.byte	16,0,2,35,0,0,29
	.byte	'Ifx_SCU_WDTS_CON0_Bits',0,4,159,9,3
	.word	40861
	.byte	10
	.byte	'_Ifx_SCU_WDTS_CON1_Bits',0,4,162,9,16,4,11
	.byte	'CLRIRF',0,1
	.word	618
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,1
	.word	618
	.byte	1,6,2,35,0,11
	.byte	'IR0',0,1
	.word	618
	.byte	1,5,2,35,0,11
	.byte	'DR',0,1
	.word	618
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,1
	.word	618
	.byte	1,3,2,35,0,11
	.byte	'IR1',0,1
	.word	618
	.byte	1,2,2,35,0,11
	.byte	'UR',0,1
	.word	618
	.byte	1,1,2,35,0,11
	.byte	'PAR',0,1
	.word	618
	.byte	1,0,2,35,0,11
	.byte	'TCR',0,1
	.word	618
	.byte	1,7,2,35,1,11
	.byte	'TCTR',0,1
	.word	618
	.byte	7,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	635
	.byte	16,0,2,35,2,0,29
	.byte	'Ifx_SCU_WDTS_CON1_Bits',0,4,175,9,3
	.word	40987
	.byte	10
	.byte	'_Ifx_SCU_WDTS_SR_Bits',0,4,178,9,16,4,11
	.byte	'AE',0,1
	.word	618
	.byte	1,7,2,35,0,11
	.byte	'OE',0,1
	.word	618
	.byte	1,6,2,35,0,11
	.byte	'IS0',0,1
	.word	618
	.byte	1,5,2,35,0,11
	.byte	'DS',0,1
	.word	618
	.byte	1,4,2,35,0,11
	.byte	'TO',0,1
	.word	618
	.byte	1,3,2,35,0,11
	.byte	'IS1',0,1
	.word	618
	.byte	1,2,2,35,0,11
	.byte	'US',0,1
	.word	618
	.byte	1,1,2,35,0,11
	.byte	'PAS',0,1
	.word	618
	.byte	1,0,2,35,0,11
	.byte	'TCS',0,1
	.word	618
	.byte	1,7,2,35,1,11
	.byte	'TCT',0,1
	.word	618
	.byte	7,0,2,35,1,11
	.byte	'TIM',0,2
	.word	635
	.byte	16,0,2,35,2,0,29
	.byte	'Ifx_SCU_WDTS_SR_Bits',0,4,191,9,3
	.word	41239
	.byte	12,4,199,9,9,4,13
	.byte	'U',0
	.word	443
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	459
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	23271
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_ACCEN0',0,4,204,9,3
	.word	41458
	.byte	12,4,207,9,9,4,13
	.byte	'U',0
	.word	443
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	459
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	23828
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_ACCEN1',0,4,212,9,3
	.word	41522
	.byte	12,4,215,9,9,4,13
	.byte	'U',0
	.word	443
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	459
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	23905
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_ARSTDIS',0,4,220,9,3
	.word	41586
	.byte	12,4,223,9,9,4,13
	.byte	'U',0
	.word	443
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	459
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	24041
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_CCUCON0',0,4,228,9,3
	.word	41651
	.byte	12,4,231,9,9,4,13
	.byte	'U',0
	.word	443
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	459
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	24321
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_CCUCON1',0,4,236,9,3
	.word	41716
	.byte	12,4,239,9,9,4,13
	.byte	'U',0
	.word	443
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	459
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	24559
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_CCUCON2',0,4,244,9,3
	.word	41781
	.byte	12,4,247,9,9,4,13
	.byte	'U',0
	.word	443
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	459
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	24687
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_CCUCON3',0,4,252,9,3
	.word	41846
	.byte	12,4,255,9,9,4,13
	.byte	'U',0
	.word	443
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	459
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	24930
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_CCUCON4',0,4,132,10,3
	.word	41911
	.byte	12,4,135,10,9,4,13
	.byte	'U',0
	.word	443
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	459
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	25165
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_CCUCON5',0,4,140,10,3
	.word	41976
	.byte	12,4,143,10,9,4,13
	.byte	'U',0
	.word	443
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	459
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	25293
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_CCUCON6',0,4,148,10,3
	.word	42041
	.byte	12,4,151,10,9,4,13
	.byte	'U',0
	.word	443
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	459
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	25393
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_CCUCON7',0,4,156,10,3
	.word	42106
	.byte	12,4,159,10,9,4,13
	.byte	'U',0
	.word	443
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	459
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	25493
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_CHIPID',0,4,164,10,3
	.word	42171
	.byte	12,4,167,10,9,4,13
	.byte	'U',0
	.word	443
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	459
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	25701
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_DTSCON',0,4,172,10,3
	.word	42235
	.byte	12,4,175,10,9,4,13
	.byte	'U',0
	.word	443
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	459
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	25866
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_DTSLIM',0,4,180,10,3
	.word	42299
	.byte	12,4,183,10,9,4,13
	.byte	'U',0
	.word	443
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	459
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	26049
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_DTSSTAT',0,4,188,10,3
	.word	42363
	.byte	12,4,191,10,9,4,13
	.byte	'U',0
	.word	443
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	459
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	26203
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_EICR',0,4,196,10,3
	.word	42428
	.byte	12,4,199,10,9,4,13
	.byte	'U',0
	.word	443
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	459
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	26567
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_EIFR',0,4,204,10,3
	.word	42490
	.byte	12,4,207,10,9,4,13
	.byte	'U',0
	.word	443
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	459
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	26778
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_EMSR',0,4,212,10,3
	.word	42552
	.byte	12,4,215,10,9,4,13
	.byte	'U',0
	.word	443
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	459
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	27030
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_ESRCFG',0,4,220,10,3
	.word	42614
	.byte	12,4,223,10,9,4,13
	.byte	'U',0
	.word	443
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	459
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	27148
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_ESROCFG',0,4,228,10,3
	.word	42678
	.byte	12,4,231,10,9,4,13
	.byte	'U',0
	.word	443
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	459
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	27259
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_EVR13CON',0,4,236,10,3
	.word	42743
	.byte	12,4,239,10,9,4,13
	.byte	'U',0
	.word	443
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	459
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	27422
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_EVR33CON',0,4,244,10,3
	.word	42809
	.byte	12,4,247,10,9,4,13
	.byte	'U',0
	.word	443
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	459
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	27585
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_EVRADCSTAT',0,4,252,10,3
	.word	42875
	.byte	12,4,255,10,9,4,13
	.byte	'U',0
	.word	443
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	459
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	27743
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_EVRDVSTAT',0,4,132,11,3
	.word	42943
	.byte	12,4,135,11,9,4,13
	.byte	'U',0
	.word	443
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	459
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	27908
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_EVRMONCTRL',0,4,140,11,3
	.word	43010
	.byte	12,4,143,11,9,4,13
	.byte	'U',0
	.word	443
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	459
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	28237
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_EVROSCCTRL',0,4,148,11,3
	.word	43078
	.byte	12,4,151,11,9,4,13
	.byte	'U',0
	.word	443
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	459
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	28458
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_EVROVMON',0,4,156,11,3
	.word	43146
	.byte	12,4,159,11,9,4,13
	.byte	'U',0
	.word	443
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	459
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	28621
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_EVRRSTCON',0,4,164,11,3
	.word	43212
	.byte	12,4,167,11,9,4,13
	.byte	'U',0
	.word	443
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	459
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	28893
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_EVRSDCOEFF1',0,4,172,11,3
	.word	43279
	.byte	12,4,175,11,9,4,13
	.byte	'U',0
	.word	443
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	459
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	29046
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_EVRSDCOEFF2',0,4,180,11,3
	.word	43348
	.byte	12,4,183,11,9,4,13
	.byte	'U',0
	.word	443
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	459
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	29202
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_EVRSDCOEFF3',0,4,188,11,3
	.word	43417
	.byte	12,4,191,11,9,4,13
	.byte	'U',0
	.word	443
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	459
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	29364
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_EVRSDCOEFF4',0,4,196,11,3
	.word	43486
	.byte	12,4,199,11,9,4,13
	.byte	'U',0
	.word	443
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	459
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	29507
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_EVRSDCOEFF5',0,4,204,11,3
	.word	43555
	.byte	12,4,207,11,9,4,13
	.byte	'U',0
	.word	443
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	459
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	29672
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_EVRSDCOEFF6',0,4,212,11,3
	.word	43624
	.byte	12,4,215,11,9,4,13
	.byte	'U',0
	.word	443
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	459
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	29817
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_EVRSDCTRL1',0,4,220,11,3
	.word	43693
	.byte	12,4,223,11,9,4,13
	.byte	'U',0
	.word	443
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	459
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	29998
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_EVRSDCTRL2',0,4,228,11,3
	.word	43761
	.byte	12,4,231,11,9,4,13
	.byte	'U',0
	.word	443
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	459
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	30172
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_EVRSDCTRL3',0,4,236,11,3
	.word	43829
	.byte	12,4,239,11,9,4,13
	.byte	'U',0
	.word	443
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	459
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	30332
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_EVRSDCTRL4',0,4,244,11,3
	.word	43897
	.byte	12,4,247,11,9,4,13
	.byte	'U',0
	.word	443
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	459
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	30476
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_EVRSTAT',0,4,252,11,3
	.word	43965
	.byte	12,4,255,11,9,4,13
	.byte	'U',0
	.word	443
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	459
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	30750
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_EVRTRIM',0,4,132,12,3
	.word	44030
	.byte	12,4,135,12,9,4,13
	.byte	'U',0
	.word	443
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	459
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	30889
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_EVRUVMON',0,4,140,12,3
	.word	44095
	.byte	12,4,143,12,9,4,13
	.byte	'U',0
	.word	443
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	459
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	31052
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_EXTCON',0,4,148,12,3
	.word	44161
	.byte	12,4,151,12,9,4,13
	.byte	'U',0
	.word	443
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	459
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	31270
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_FDR',0,4,156,12,3
	.word	44225
	.byte	12,4,159,12,9,4,13
	.byte	'U',0
	.word	443
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	459
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	31433
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_FMR',0,4,164,12,3
	.word	44286
	.byte	12,4,167,12,9,4,13
	.byte	'U',0
	.word	443
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	459
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	31769
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_ID',0,4,172,12,3
	.word	44347
	.byte	12,4,175,12,9,4,13
	.byte	'U',0
	.word	443
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	459
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	31876
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_IGCR',0,4,180,12,3
	.word	44407
	.byte	12,4,183,12,9,4,13
	.byte	'U',0
	.word	443
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	459
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	32328
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_IN',0,4,188,12,3
	.word	44469
	.byte	12,4,191,12,9,4,13
	.byte	'U',0
	.word	443
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	459
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	32427
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_IOCR',0,4,196,12,3
	.word	44529
	.byte	12,4,199,12,9,4,13
	.byte	'U',0
	.word	443
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	459
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	32577
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_LBISTCTRL0',0,4,204,12,3
	.word	44591
	.byte	12,4,207,12,9,4,13
	.byte	'U',0
	.word	443
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	459
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	32726
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_LBISTCTRL1',0,4,212,12,3
	.word	44659
	.byte	12,4,215,12,9,4,13
	.byte	'U',0
	.word	443
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	459
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	32887
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_LBISTCTRL2',0,4,220,12,3
	.word	44727
	.byte	12,4,223,12,9,4,13
	.byte	'U',0
	.word	443
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	459
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	33017
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_LCLCON',0,4,228,12,3
	.word	44795
	.byte	12,4,231,12,9,4,13
	.byte	'U',0
	.word	443
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	459
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	33149
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_LCLTEST',0,4,236,12,3
	.word	44859
	.byte	12,4,239,12,9,4,13
	.byte	'U',0
	.word	443
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	459
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	33264
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_MANID',0,4,244,12,3
	.word	44924
	.byte	12,4,247,12,9,4,13
	.byte	'U',0
	.word	443
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	459
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	33375
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_OMR',0,4,252,12,3
	.word	44987
	.byte	12,4,255,12,9,4,13
	.byte	'U',0
	.word	443
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	459
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	33533
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_OSCCON',0,4,132,13,3
	.word	45048
	.byte	12,4,135,13,9,4,13
	.byte	'U',0
	.word	443
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	459
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	33945
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_OUT',0,4,140,13,3
	.word	45112
	.byte	12,4,143,13,9,4,13
	.byte	'U',0
	.word	443
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	459
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	34046
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_OVCCON',0,4,148,13,3
	.word	45173
	.byte	12,4,151,13,9,4,13
	.byte	'U',0
	.word	443
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	459
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	34313
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_OVCENABLE',0,4,156,13,3
	.word	45237
	.byte	12,4,159,13,9,4,13
	.byte	'U',0
	.word	443
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	459
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	34449
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_PDISC',0,4,164,13,3
	.word	45304
	.byte	12,4,167,13,9,4,13
	.byte	'U',0
	.word	443
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	459
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	34560
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_PDR',0,4,172,13,3
	.word	45367
	.byte	12,4,175,13,9,4,13
	.byte	'U',0
	.word	443
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	459
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	34693
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_PDRR',0,4,180,13,3
	.word	45428
	.byte	12,4,183,13,9,4,13
	.byte	'U',0
	.word	443
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	459
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	34896
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_PLLCON0',0,4,188,13,3
	.word	45490
	.byte	12,4,191,13,9,4,13
	.byte	'U',0
	.word	443
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	459
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	35252
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_PLLCON1',0,4,196,13,3
	.word	45555
	.byte	12,4,199,13,9,4,13
	.byte	'U',0
	.word	443
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	459
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	35430
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_PLLCON2',0,4,204,13,3
	.word	45620
	.byte	12,4,207,13,9,4,13
	.byte	'U',0
	.word	443
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	459
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	35530
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_PLLERAYCON0',0,4,212,13,3
	.word	45685
	.byte	12,4,215,13,9,4,13
	.byte	'U',0
	.word	443
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	459
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	35900
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_PLLERAYCON1',0,4,220,13,3
	.word	45754
	.byte	12,4,223,13,9,4,13
	.byte	'U',0
	.word	443
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	459
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	36086
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_PLLERAYSTAT',0,4,228,13,3
	.word	45823
	.byte	12,4,231,13,9,4,13
	.byte	'U',0
	.word	443
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	459
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	36284
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_PLLSTAT',0,4,236,13,3
	.word	45892
	.byte	12,4,239,13,9,4,13
	.byte	'U',0
	.word	443
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	459
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	36517
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_PMCSR',0,4,244,13,3
	.word	45957
	.byte	12,4,247,13,9,4,13
	.byte	'U',0
	.word	443
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	459
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	36669
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_PMSWCR0',0,4,252,13,3
	.word	46020
	.byte	12,4,255,13,9,4,13
	.byte	'U',0
	.word	443
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	459
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	37236
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_PMSWCR1',0,4,132,14,3
	.word	46085
	.byte	12,4,135,14,9,4,13
	.byte	'U',0
	.word	443
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	459
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	37530
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_PMSWCR2',0,4,140,14,3
	.word	46150
	.byte	12,4,143,14,9,4,13
	.byte	'U',0
	.word	443
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	459
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	37808
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_PMSWSTAT',0,4,148,14,3
	.word	46215
	.byte	12,4,151,14,9,4,13
	.byte	'U',0
	.word	443
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	459
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	38304
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_PMSWSTATCLR',0,4,156,14,3
	.word	46281
	.byte	12,4,159,14,9,4,13
	.byte	'U',0
	.word	443
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	459
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	38826
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_RSTCON',0,4,164,14,3
	.word	46350
	.byte	12,4,167,14,9,4,13
	.byte	'U',0
	.word	443
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	459
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	38617
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_RSTCON2',0,4,172,14,3
	.word	46414
	.byte	12,4,175,14,9,4,13
	.byte	'U',0
	.word	443
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	459
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	39037
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_RSTSTAT',0,4,180,14,3
	.word	46479
	.byte	12,4,183,14,9,4,13
	.byte	'U',0
	.word	443
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	459
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	39469
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_SAFECON',0,4,188,14,3
	.word	46544
	.byte	12,4,191,14,9,4,13
	.byte	'U',0
	.word	443
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	459
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	39565
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_STSTAT',0,4,196,14,3
	.word	46609
	.byte	12,4,199,14,9,4,13
	.byte	'U',0
	.word	443
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	459
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	39825
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_SWRSTCON',0,4,204,14,3
	.word	46673
	.byte	12,4,207,14,9,4,13
	.byte	'U',0
	.word	443
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	459
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	39950
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_SYSCON',0,4,212,14,3
	.word	46739
	.byte	12,4,215,14,9,4,13
	.byte	'U',0
	.word	443
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	459
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	40147
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_TRAPCLR',0,4,220,14,3
	.word	46803
	.byte	12,4,223,14,9,4,13
	.byte	'U',0
	.word	443
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	459
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	40300
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_TRAPDIS',0,4,228,14,3
	.word	46868
	.byte	12,4,231,14,9,4,13
	.byte	'U',0
	.word	443
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	459
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	40453
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_TRAPSET',0,4,236,14,3
	.word	46933
	.byte	12,4,239,14,9,4,13
	.byte	'U',0
	.word	443
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	459
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	40606
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_TRAPSTAT',0,4,244,14,3
	.word	46998
	.byte	29
	.byte	'Ifx_SCU_WDTCPU_CON0',0,4,252,14,3
	.word	578
	.byte	29
	.byte	'Ifx_SCU_WDTCPU_CON1',0,4,132,15,3
	.word	861
	.byte	29
	.byte	'Ifx_SCU_WDTCPU_SR',0,4,140,15,3
	.word	1092
	.byte	12,4,143,15,9,4,13
	.byte	'U',0
	.word	443
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	459
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	40861
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_WDTS_CON0',0,4,148,15,3
	.word	47149
	.byte	12,4,151,15,9,4,13
	.byte	'U',0
	.word	443
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	459
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	40987
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_WDTS_CON1',0,4,156,15,3
	.word	47216
	.byte	12,4,159,15,9,4,13
	.byte	'U',0
	.word	443
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	459
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	41239
	.byte	4,2,35,0,0,29
	.byte	'Ifx_SCU_WDTS_SR',0,4,164,15,3
	.word	47283
	.byte	14
	.word	1132
	.byte	29
	.byte	'Ifx_SCU_WDTCPU',0,4,180,15,3
	.word	47348
	.byte	10
	.byte	'_Ifx_SCU_WDTS',0,4,183,15,25,12,13
	.byte	'CON0',0
	.word	47149
	.byte	4,2,35,0,13
	.byte	'CON1',0
	.word	47216
	.byte	4,2,35,4,13
	.byte	'SR',0
	.word	47283
	.byte	4,2,35,8,0,14
	.word	47377
	.byte	29
	.byte	'Ifx_SCU_WDTS',0,4,188,15,3
	.word	47438
	.byte	18,8
	.word	42614
	.byte	19,1,0,18,20
	.word	618
	.byte	19,19,0,18,8
	.word	45957
	.byte	19,1,0,14
	.word	47377
	.byte	18,24
	.word	1132
	.byte	19,1,0,14
	.word	47497
	.byte	18,16
	.word	618
	.byte	19,15,0,18,28
	.word	618
	.byte	19,27,0,18,40
	.word	618
	.byte	19,39,0,18,16
	.word	42428
	.byte	19,3,0,18,16
	.word	44407
	.byte	19,3,0,18,180,3
	.word	618
	.byte	19,179,3,0,10
	.byte	'_Ifx_SCU',0,4,201,15,25,128,8,13
	.byte	'reserved_0',0
	.word	4641
	.byte	8,2,35,0,13
	.byte	'ID',0
	.word	44347
	.byte	4,2,35,8,13
	.byte	'reserved_C',0
	.word	2822
	.byte	4,2,35,12,13
	.byte	'OSCCON',0
	.word	45048
	.byte	4,2,35,16,13
	.byte	'PLLSTAT',0
	.word	45892
	.byte	4,2,35,20,13
	.byte	'PLLCON0',0
	.word	45490
	.byte	4,2,35,24,13
	.byte	'PLLCON1',0
	.word	45555
	.byte	4,2,35,28,13
	.byte	'PLLCON2',0
	.word	45620
	.byte	4,2,35,32,13
	.byte	'PLLERAYSTAT',0
	.word	45823
	.byte	4,2,35,36,13
	.byte	'PLLERAYCON0',0
	.word	45685
	.byte	4,2,35,40,13
	.byte	'PLLERAYCON1',0
	.word	45754
	.byte	4,2,35,44,13
	.byte	'CCUCON0',0
	.word	41651
	.byte	4,2,35,48,13
	.byte	'CCUCON1',0
	.word	41716
	.byte	4,2,35,52,13
	.byte	'FDR',0
	.word	44225
	.byte	4,2,35,56,13
	.byte	'EXTCON',0
	.word	44161
	.byte	4,2,35,60,13
	.byte	'CCUCON2',0
	.word	41781
	.byte	4,2,35,64,13
	.byte	'CCUCON3',0
	.word	41846
	.byte	4,2,35,68,13
	.byte	'CCUCON4',0
	.word	41911
	.byte	4,2,35,72,13
	.byte	'CCUCON5',0
	.word	41976
	.byte	4,2,35,76,13
	.byte	'RSTSTAT',0
	.word	46479
	.byte	4,2,35,80,13
	.byte	'reserved_54',0
	.word	2822
	.byte	4,2,35,84,13
	.byte	'RSTCON',0
	.word	46350
	.byte	4,2,35,88,13
	.byte	'ARSTDIS',0
	.word	41586
	.byte	4,2,35,92,13
	.byte	'SWRSTCON',0
	.word	46673
	.byte	4,2,35,96,13
	.byte	'RSTCON2',0
	.word	46414
	.byte	4,2,35,100,13
	.byte	'reserved_68',0
	.word	2822
	.byte	4,2,35,104,13
	.byte	'EVRRSTCON',0
	.word	43212
	.byte	4,2,35,108,13
	.byte	'ESRCFG',0
	.word	47465
	.byte	8,2,35,112,13
	.byte	'ESROCFG',0
	.word	42678
	.byte	4,2,35,120,13
	.byte	'SYSCON',0
	.word	46739
	.byte	4,2,35,124,13
	.byte	'CCUCON6',0
	.word	42041
	.byte	4,3,35,128,1,13
	.byte	'CCUCON7',0
	.word	42106
	.byte	4,3,35,132,1,13
	.byte	'reserved_88',0
	.word	47474
	.byte	20,3,35,136,1,13
	.byte	'PDR',0
	.word	45367
	.byte	4,3,35,156,1,13
	.byte	'IOCR',0
	.word	44529
	.byte	4,3,35,160,1,13
	.byte	'OUT',0
	.word	45112
	.byte	4,3,35,164,1,13
	.byte	'OMR',0
	.word	44987
	.byte	4,3,35,168,1,13
	.byte	'IN',0
	.word	44469
	.byte	4,3,35,172,1,13
	.byte	'EVRSTAT',0
	.word	43965
	.byte	4,3,35,176,1,13
	.byte	'EVRDVSTAT',0
	.word	42943
	.byte	4,3,35,180,1,13
	.byte	'EVR13CON',0
	.word	42743
	.byte	4,3,35,184,1,13
	.byte	'EVR33CON',0
	.word	42809
	.byte	4,3,35,188,1,13
	.byte	'STSTAT',0
	.word	46609
	.byte	4,3,35,192,1,13
	.byte	'reserved_C4',0
	.word	2822
	.byte	4,3,35,196,1,13
	.byte	'PMSWCR0',0
	.word	46020
	.byte	4,3,35,200,1,13
	.byte	'PMSWSTAT',0
	.word	46215
	.byte	4,3,35,204,1,13
	.byte	'PMSWSTATCLR',0
	.word	46281
	.byte	4,3,35,208,1,13
	.byte	'PMCSR',0
	.word	47483
	.byte	8,3,35,212,1,13
	.byte	'reserved_DC',0
	.word	2822
	.byte	4,3,35,220,1,13
	.byte	'DTSSTAT',0
	.word	42363
	.byte	4,3,35,224,1,13
	.byte	'DTSCON',0
	.word	42235
	.byte	4,3,35,228,1,13
	.byte	'PMSWCR1',0
	.word	46085
	.byte	4,3,35,232,1,13
	.byte	'PMSWCR2',0
	.word	46150
	.byte	4,3,35,236,1,13
	.byte	'WDTS',0
	.word	47492
	.byte	12,3,35,240,1,13
	.byte	'EMSR',0
	.word	42552
	.byte	4,3,35,252,1,13
	.byte	'WDTCPU',0
	.word	47506
	.byte	24,3,35,128,2,13
	.byte	'reserved_118',0
	.word	4981
	.byte	12,3,35,152,2,13
	.byte	'TRAPSTAT',0
	.word	46998
	.byte	4,3,35,164,2,13
	.byte	'TRAPSET',0
	.word	46933
	.byte	4,3,35,168,2,13
	.byte	'TRAPCLR',0
	.word	46803
	.byte	4,3,35,172,2,13
	.byte	'TRAPDIS',0
	.word	46868
	.byte	4,3,35,176,2,13
	.byte	'reserved_134',0
	.word	2822
	.byte	4,3,35,180,2,13
	.byte	'LCLCON1',0
	.word	44795
	.byte	4,3,35,184,2,13
	.byte	'LCLTEST',0
	.word	44859
	.byte	4,3,35,188,2,13
	.byte	'CHIPID',0
	.word	42171
	.byte	4,3,35,192,2,13
	.byte	'MANID',0
	.word	44924
	.byte	4,3,35,196,2,13
	.byte	'reserved_148',0
	.word	4641
	.byte	8,3,35,200,2,13
	.byte	'SAFECON',0
	.word	46544
	.byte	4,3,35,208,2,13
	.byte	'reserved_154',0
	.word	47511
	.byte	16,3,35,212,2,13
	.byte	'LBISTCTRL0',0
	.word	44591
	.byte	4,3,35,228,2,13
	.byte	'LBISTCTRL1',0
	.word	44659
	.byte	4,3,35,232,2,13
	.byte	'LBISTCTRL2',0
	.word	44727
	.byte	4,3,35,236,2,13
	.byte	'reserved_170',0
	.word	47520
	.byte	28,3,35,240,2,13
	.byte	'PDISC',0
	.word	45304
	.byte	4,3,35,140,3,13
	.byte	'reserved_190',0
	.word	4641
	.byte	8,3,35,144,3,13
	.byte	'EVRTRIM',0
	.word	44030
	.byte	4,3,35,152,3,13
	.byte	'EVRADCSTAT',0
	.word	42875
	.byte	4,3,35,156,3,13
	.byte	'EVRUVMON',0
	.word	44095
	.byte	4,3,35,160,3,13
	.byte	'EVROVMON',0
	.word	43146
	.byte	4,3,35,164,3,13
	.byte	'EVRMONCTRL',0
	.word	43010
	.byte	4,3,35,168,3,13
	.byte	'reserved_1AC',0
	.word	2822
	.byte	4,3,35,172,3,13
	.byte	'EVRSDCTRL1',0
	.word	43693
	.byte	4,3,35,176,3,13
	.byte	'EVRSDCTRL2',0
	.word	43761
	.byte	4,3,35,180,3,13
	.byte	'EVRSDCTRL3',0
	.word	43829
	.byte	4,3,35,184,3,13
	.byte	'EVRSDCTRL4',0
	.word	43897
	.byte	4,3,35,188,3,13
	.byte	'EVRSDCOEFF1',0
	.word	43279
	.byte	4,3,35,192,3,13
	.byte	'EVRSDCOEFF2',0
	.word	43348
	.byte	4,3,35,196,3,13
	.byte	'EVRSDCOEFF3',0
	.word	43417
	.byte	4,3,35,200,3,13
	.byte	'EVRSDCOEFF4',0
	.word	43486
	.byte	4,3,35,204,3,13
	.byte	'EVRSDCOEFF5',0
	.word	43555
	.byte	4,3,35,208,3,13
	.byte	'EVRSDCOEFF6',0
	.word	43624
	.byte	4,3,35,212,3,13
	.byte	'EVROSCCTRL',0
	.word	43078
	.byte	4,3,35,216,3,13
	.byte	'reserved_1DC',0
	.word	2822
	.byte	4,3,35,220,3,13
	.byte	'OVCENABLE',0
	.word	45237
	.byte	4,3,35,224,3,13
	.byte	'OVCCON',0
	.word	45173
	.byte	4,3,35,228,3,13
	.byte	'reserved_1E8',0
	.word	47529
	.byte	40,3,35,232,3,13
	.byte	'EICR',0
	.word	47538
	.byte	16,3,35,144,4,13
	.byte	'EIFR',0
	.word	42490
	.byte	4,3,35,160,4,13
	.byte	'FMR',0
	.word	44286
	.byte	4,3,35,164,4,13
	.byte	'PDRR',0
	.word	45428
	.byte	4,3,35,168,4,13
	.byte	'IGCR',0
	.word	47547
	.byte	16,3,35,172,4,13
	.byte	'reserved_23C',0
	.word	2822
	.byte	4,3,35,188,4,13
	.byte	'DTSLIM',0
	.word	42299
	.byte	4,3,35,192,4,13
	.byte	'reserved_244',0
	.word	47556
	.byte	180,3,3,35,196,4,13
	.byte	'ACCEN1',0
	.word	41522
	.byte	4,3,35,248,7,13
	.byte	'ACCEN0',0
	.word	41458
	.byte	4,3,35,252,7,0,14
	.word	47567
	.byte	29
	.byte	'Ifx_SCU',0,4,181,16,3
	.word	49557
	.byte	10
	.byte	'_Ifx_CPU_A_Bits',0,19,45,16,4,11
	.byte	'ADDR',0,4
	.word	466
	.byte	32,0,2,35,0,0,29
	.byte	'Ifx_CPU_A_Bits',0,19,48,3
	.word	49579
	.byte	10
	.byte	'_Ifx_CPU_BIV_Bits',0,19,51,16,4,11
	.byte	'VSS',0,4
	.word	466
	.byte	1,31,2,35,0,11
	.byte	'BIV',0,4
	.word	466
	.byte	31,0,2,35,0,0,29
	.byte	'Ifx_CPU_BIV_Bits',0,19,55,3
	.word	49640
	.byte	10
	.byte	'_Ifx_CPU_BTV_Bits',0,19,58,16,4,11
	.byte	'reserved_0',0,4
	.word	466
	.byte	1,31,2,35,0,11
	.byte	'BTV',0,4
	.word	466
	.byte	31,0,2,35,0,0,29
	.byte	'Ifx_CPU_BTV_Bits',0,19,62,3
	.word	49719
	.byte	10
	.byte	'_Ifx_CPU_CCNT_Bits',0,19,65,16,4,11
	.byte	'CountValue',0,4
	.word	466
	.byte	31,1,2,35,0,11
	.byte	'SOvf',0,4
	.word	466
	.byte	1,0,2,35,0,0,29
	.byte	'Ifx_CPU_CCNT_Bits',0,19,69,3
	.word	49805
	.byte	10
	.byte	'_Ifx_CPU_CCTRL_Bits',0,19,72,16,4,11
	.byte	'CM',0,4
	.word	466
	.byte	1,31,2,35,0,11
	.byte	'CE',0,4
	.word	466
	.byte	1,30,2,35,0,11
	.byte	'M1',0,4
	.word	466
	.byte	3,27,2,35,0,11
	.byte	'M2',0,4
	.word	466
	.byte	3,24,2,35,0,11
	.byte	'M3',0,4
	.word	466
	.byte	3,21,2,35,0,11
	.byte	'reserved_11',0,4
	.word	466
	.byte	21,0,2,35,0,0,29
	.byte	'Ifx_CPU_CCTRL_Bits',0,19,80,3
	.word	49894
	.byte	10
	.byte	'_Ifx_CPU_COMPAT_Bits',0,19,83,16,4,11
	.byte	'reserved_0',0,4
	.word	466
	.byte	3,29,2,35,0,11
	.byte	'RM',0,4
	.word	466
	.byte	1,28,2,35,0,11
	.byte	'SP',0,4
	.word	466
	.byte	1,27,2,35,0,11
	.byte	'reserved_5',0,4
	.word	466
	.byte	27,0,2,35,0,0,29
	.byte	'Ifx_CPU_COMPAT_Bits',0,19,89,3
	.word	50040
	.byte	10
	.byte	'_Ifx_CPU_CORE_ID_Bits',0,19,92,16,4,11
	.byte	'CORE_ID',0,4
	.word	466
	.byte	3,29,2,35,0,11
	.byte	'reserved_3',0,4
	.word	466
	.byte	29,0,2,35,0,0,29
	.byte	'Ifx_CPU_CORE_ID_Bits',0,19,96,3
	.word	50167
	.byte	10
	.byte	'_Ifx_CPU_CPR_L_Bits',0,19,99,16,4,11
	.byte	'reserved_0',0,4
	.word	466
	.byte	3,29,2,35,0,11
	.byte	'LOWBND',0,4
	.word	466
	.byte	29,0,2,35,0,0,29
	.byte	'Ifx_CPU_CPR_L_Bits',0,19,103,3
	.word	50265
	.byte	10
	.byte	'_Ifx_CPU_CPR_U_Bits',0,19,106,16,4,11
	.byte	'reserved_0',0,4
	.word	466
	.byte	3,29,2,35,0,11
	.byte	'UPPBND',0,4
	.word	466
	.byte	29,0,2,35,0,0,29
	.byte	'Ifx_CPU_CPR_U_Bits',0,19,110,3
	.word	50358
	.byte	10
	.byte	'_Ifx_CPU_CPU_ID_Bits',0,19,113,16,4,11
	.byte	'MODREV',0,4
	.word	466
	.byte	8,24,2,35,0,11
	.byte	'MOD_32B',0,4
	.word	466
	.byte	8,16,2,35,0,11
	.byte	'MOD',0,4
	.word	466
	.byte	16,0,2,35,0,0,29
	.byte	'Ifx_CPU_CPU_ID_Bits',0,19,118,3
	.word	50451
	.byte	10
	.byte	'_Ifx_CPU_CPXE_Bits',0,19,121,16,4,11
	.byte	'XE',0,4
	.word	466
	.byte	8,24,2,35,0,11
	.byte	'reserved_8',0,4
	.word	466
	.byte	24,0,2,35,0,0,29
	.byte	'Ifx_CPU_CPXE_Bits',0,19,125,3
	.word	50558
	.byte	10
	.byte	'_Ifx_CPU_CREVT_Bits',0,19,128,1,16,4,11
	.byte	'EVTA',0,4
	.word	466
	.byte	3,29,2,35,0,11
	.byte	'BBM',0,4
	.word	466
	.byte	1,28,2,35,0,11
	.byte	'BOD',0,4
	.word	466
	.byte	1,27,2,35,0,11
	.byte	'SUSP',0,4
	.word	466
	.byte	1,26,2,35,0,11
	.byte	'CNT',0,4
	.word	466
	.byte	2,24,2,35,0,11
	.byte	'reserved_8',0,4
	.word	466
	.byte	24,0,2,35,0,0,29
	.byte	'Ifx_CPU_CREVT_Bits',0,19,136,1,3
	.word	50645
	.byte	10
	.byte	'_Ifx_CPU_CUS_ID_Bits',0,19,139,1,16,4,11
	.byte	'CID',0,4
	.word	466
	.byte	3,29,2,35,0,11
	.byte	'reserved_3',0,4
	.word	466
	.byte	29,0,2,35,0,0,29
	.byte	'Ifx_CPU_CUS_ID_Bits',0,19,143,1,3
	.word	50799
	.byte	10
	.byte	'_Ifx_CPU_D_Bits',0,19,146,1,16,4,11
	.byte	'DATA',0,4
	.word	466
	.byte	32,0,2,35,0,0,29
	.byte	'Ifx_CPU_D_Bits',0,19,149,1,3
	.word	50893
	.byte	10
	.byte	'_Ifx_CPU_DATR_Bits',0,19,152,1,16,4,11
	.byte	'reserved_0',0,4
	.word	466
	.byte	3,29,2,35,0,11
	.byte	'SBE',0,4
	.word	466
	.byte	1,28,2,35,0,11
	.byte	'reserved_4',0,4
	.word	466
	.byte	5,23,2,35,0,11
	.byte	'CWE',0,4
	.word	466
	.byte	1,22,2,35,0,11
	.byte	'CFE',0,4
	.word	466
	.byte	1,21,2,35,0,11
	.byte	'reserved_11',0,4
	.word	466
	.byte	3,18,2,35,0,11
	.byte	'SOE',0,4
	.word	466
	.byte	1,17,2,35,0,11
	.byte	'SME',0,4
	.word	466
	.byte	1,16,2,35,0,11
	.byte	'reserved_16',0,4
	.word	466
	.byte	16,0,2,35,0,0,29
	.byte	'Ifx_CPU_DATR_Bits',0,19,163,1,3
	.word	50956
	.byte	10
	.byte	'_Ifx_CPU_DBGSR_Bits',0,19,166,1,16,4,11
	.byte	'DE',0,4
	.word	466
	.byte	1,31,2,35,0,11
	.byte	'HALT',0,4
	.word	466
	.byte	2,29,2,35,0,11
	.byte	'SIH',0,4
	.word	466
	.byte	1,28,2,35,0,11
	.byte	'SUSP',0,4
	.word	466
	.byte	1,27,2,35,0,11
	.byte	'reserved_5',0,4
	.word	466
	.byte	1,26,2,35,0,11
	.byte	'PREVSUSP',0,4
	.word	466
	.byte	1,25,2,35,0,11
	.byte	'PEVT',0,4
	.word	466
	.byte	1,24,2,35,0,11
	.byte	'EVTSRC',0,4
	.word	466
	.byte	5,19,2,35,0,11
	.byte	'reserved_13',0,4
	.word	466
	.byte	19,0,2,35,0,0,29
	.byte	'Ifx_CPU_DBGSR_Bits',0,19,177,1,3
	.word	51174
	.byte	10
	.byte	'_Ifx_CPU_DBGTCR_Bits',0,19,180,1,16,4,11
	.byte	'DTA',0,4
	.word	466
	.byte	1,31,2,35,0,11
	.byte	'reserved_1',0,4
	.word	466
	.byte	31,0,2,35,0,0,29
	.byte	'Ifx_CPU_DBGTCR_Bits',0,19,184,1,3
	.word	51389
	.byte	10
	.byte	'_Ifx_CPU_DCON0_Bits',0,19,187,1,16,4,11
	.byte	'reserved_0',0,4
	.word	466
	.byte	1,31,2,35,0,11
	.byte	'DCBYP',0,4
	.word	466
	.byte	1,30,2,35,0,11
	.byte	'reserved_2',0,4
	.word	466
	.byte	30,0,2,35,0,0,29
	.byte	'Ifx_CPU_DCON0_Bits',0,19,192,1,3
	.word	51483
	.byte	10
	.byte	'_Ifx_CPU_DCON2_Bits',0,19,195,1,16,4,11
	.byte	'DCACHE_SZE',0,4
	.word	466
	.byte	16,16,2,35,0,11
	.byte	'DSCRATCH_SZE',0,4
	.word	466
	.byte	16,0,2,35,0,0,29
	.byte	'Ifx_CPU_DCON2_Bits',0,19,199,1,3
	.word	51599
	.byte	10
	.byte	'_Ifx_CPU_DCX_Bits',0,19,202,1,16,4,11
	.byte	'reserved_0',0,4
	.word	466
	.byte	6,26,2,35,0,11
	.byte	'DCXValue',0,4
	.word	466
	.byte	26,0,2,35,0,0,29
	.byte	'Ifx_CPU_DCX_Bits',0,19,206,1,3
	.word	51700
	.byte	10
	.byte	'_Ifx_CPU_DEADD_Bits',0,19,209,1,16,4,11
	.byte	'ERROR_ADDRESS',0,4
	.word	466
	.byte	32,0,2,35,0,0,29
	.byte	'Ifx_CPU_DEADD_Bits',0,19,212,1,3
	.word	51793
	.byte	10
	.byte	'_Ifx_CPU_DIEAR_Bits',0,19,215,1,16,4,11
	.byte	'TA',0,4
	.word	466
	.byte	32,0,2,35,0,0,29
	.byte	'Ifx_CPU_DIEAR_Bits',0,19,218,1,3
	.word	51873
	.byte	10
	.byte	'_Ifx_CPU_DIETR_Bits',0,19,221,1,16,4,11
	.byte	'IED',0,4
	.word	466
	.byte	1,31,2,35,0,11
	.byte	'IE_T',0,4
	.word	466
	.byte	1,30,2,35,0,11
	.byte	'IE_C',0,4
	.word	466
	.byte	1,29,2,35,0,11
	.byte	'IE_S',0,4
	.word	466
	.byte	1,28,2,35,0,11
	.byte	'IE_BI',0,4
	.word	466
	.byte	1,27,2,35,0,11
	.byte	'E_INFO',0,4
	.word	466
	.byte	6,21,2,35,0,11
	.byte	'IE_DUAL',0,4
	.word	466
	.byte	1,20,2,35,0,11
	.byte	'IE_SP',0,4
	.word	466
	.byte	1,19,2,35,0,11
	.byte	'IE_BS',0,4
	.word	466
	.byte	1,18,2,35,0,11
	.byte	'reserved_14',0,4
	.word	466
	.byte	18,0,2,35,0,0,29
	.byte	'Ifx_CPU_DIETR_Bits',0,19,233,1,3
	.word	51942
	.byte	10
	.byte	'_Ifx_CPU_DMS_Bits',0,19,236,1,16,4,11
	.byte	'reserved_0',0,4
	.word	466
	.byte	1,31,2,35,0,11
	.byte	'DMSValue',0,4
	.word	466
	.byte	31,0,2,35,0,0,29
	.byte	'Ifx_CPU_DMS_Bits',0,19,240,1,3
	.word	52171
	.byte	10
	.byte	'_Ifx_CPU_DPR_L_Bits',0,19,243,1,16,4,11
	.byte	'reserved_0',0,4
	.word	466
	.byte	3,29,2,35,0,11
	.byte	'LOWBND',0,4
	.word	466
	.byte	29,0,2,35,0,0,29
	.byte	'Ifx_CPU_DPR_L_Bits',0,19,247,1,3
	.word	52264
	.byte	10
	.byte	'_Ifx_CPU_DPR_U_Bits',0,19,250,1,16,4,11
	.byte	'reserved_0',0,4
	.word	466
	.byte	3,29,2,35,0,11
	.byte	'UPPBND',0,4
	.word	466
	.byte	29,0,2,35,0,0,29
	.byte	'Ifx_CPU_DPR_U_Bits',0,19,254,1,3
	.word	52359
	.byte	10
	.byte	'_Ifx_CPU_DPRE_Bits',0,19,129,2,16,4,11
	.byte	'RE',0,4
	.word	466
	.byte	16,16,2,35,0,11
	.byte	'reserved_16',0,4
	.word	466
	.byte	16,0,2,35,0,0,29
	.byte	'Ifx_CPU_DPRE_Bits',0,19,133,2,3
	.word	52454
	.byte	10
	.byte	'_Ifx_CPU_DPWE_Bits',0,19,136,2,16,4,11
	.byte	'WE',0,4
	.word	466
	.byte	16,16,2,35,0,11
	.byte	'reserved_16',0,4
	.word	466
	.byte	16,0,2,35,0,0,29
	.byte	'Ifx_CPU_DPWE_Bits',0,19,140,2,3
	.word	52544
	.byte	10
	.byte	'_Ifx_CPU_DSTR_Bits',0,19,143,2,16,4,11
	.byte	'SRE',0,4
	.word	466
	.byte	1,31,2,35,0,11
	.byte	'GAE',0,4
	.word	466
	.byte	1,30,2,35,0,11
	.byte	'LBE',0,4
	.word	466
	.byte	1,29,2,35,0,11
	.byte	'reserved_3',0,4
	.word	466
	.byte	3,26,2,35,0,11
	.byte	'CRE',0,4
	.word	466
	.byte	1,25,2,35,0,11
	.byte	'reserved_7',0,4
	.word	466
	.byte	7,18,2,35,0,11
	.byte	'DTME',0,4
	.word	466
	.byte	1,17,2,35,0,11
	.byte	'LOE',0,4
	.word	466
	.byte	1,16,2,35,0,11
	.byte	'SDE',0,4
	.word	466
	.byte	1,15,2,35,0,11
	.byte	'SCE',0,4
	.word	466
	.byte	1,14,2,35,0,11
	.byte	'CAC',0,4
	.word	466
	.byte	1,13,2,35,0,11
	.byte	'MPE',0,4
	.word	466
	.byte	1,12,2,35,0,11
	.byte	'CLE',0,4
	.word	466
	.byte	1,11,2,35,0,11
	.byte	'reserved_21',0,4
	.word	466
	.byte	3,8,2,35,0,11
	.byte	'ALN',0,4
	.word	466
	.byte	1,7,2,35,0,11
	.byte	'reserved_25',0,4
	.word	466
	.byte	7,0,2,35,0,0,29
	.byte	'Ifx_CPU_DSTR_Bits',0,19,161,2,3
	.word	52634
	.byte	10
	.byte	'_Ifx_CPU_EXEVT_Bits',0,19,164,2,16,4,11
	.byte	'EVTA',0,4
	.word	466
	.byte	3,29,2,35,0,11
	.byte	'BBM',0,4
	.word	466
	.byte	1,28,2,35,0,11
	.byte	'BOD',0,4
	.word	466
	.byte	1,27,2,35,0,11
	.byte	'SUSP',0,4
	.word	466
	.byte	1,26,2,35,0,11
	.byte	'CNT',0,4
	.word	466
	.byte	2,24,2,35,0,11
	.byte	'reserved_8',0,4
	.word	466
	.byte	24,0,2,35,0,0,29
	.byte	'Ifx_CPU_EXEVT_Bits',0,19,172,2,3
	.word	52958
	.byte	10
	.byte	'_Ifx_CPU_FCX_Bits',0,19,175,2,16,4,11
	.byte	'FCXO',0,4
	.word	466
	.byte	16,16,2,35,0,11
	.byte	'FCXS',0,4
	.word	466
	.byte	4,12,2,35,0,11
	.byte	'reserved_20',0,4
	.word	466
	.byte	12,0,2,35,0,0,29
	.byte	'Ifx_CPU_FCX_Bits',0,19,180,2,3
	.word	53112
	.byte	10
	.byte	'_Ifx_CPU_FPU_TRAP_CON_Bits',0,19,183,2,16,4,11
	.byte	'TST',0,4
	.word	466
	.byte	1,31,2,35,0,11
	.byte	'TCL',0,4
	.word	466
	.byte	1,30,2,35,0,11
	.byte	'reserved_2',0,4
	.word	466
	.byte	6,24,2,35,0,11
	.byte	'RM',0,4
	.word	466
	.byte	2,22,2,35,0,11
	.byte	'reserved_10',0,4
	.word	466
	.byte	8,14,2,35,0,11
	.byte	'FXE',0,4
	.word	466
	.byte	1,13,2,35,0,11
	.byte	'FUE',0,4
	.word	466
	.byte	1,12,2,35,0,11
	.byte	'FZE',0,4
	.word	466
	.byte	1,11,2,35,0,11
	.byte	'FVE',0,4
	.word	466
	.byte	1,10,2,35,0,11
	.byte	'FIE',0,4
	.word	466
	.byte	1,9,2,35,0,11
	.byte	'reserved_23',0,4
	.word	466
	.byte	3,6,2,35,0,11
	.byte	'FX',0,4
	.word	466
	.byte	1,5,2,35,0,11
	.byte	'FU',0,4
	.word	466
	.byte	1,4,2,35,0,11
	.byte	'FZ',0,4
	.word	466
	.byte	1,3,2,35,0,11
	.byte	'FV',0,4
	.word	466
	.byte	1,2,2,35,0,11
	.byte	'FI',0,4
	.word	466
	.byte	1,1,2,35,0,11
	.byte	'reserved_31',0,4
	.word	466
	.byte	1,0,2,35,0,0,29
	.byte	'Ifx_CPU_FPU_TRAP_CON_Bits',0,19,202,2,3
	.word	53218
	.byte	10
	.byte	'_Ifx_CPU_FPU_TRAP_OPC_Bits',0,19,205,2,16,4,11
	.byte	'OPC',0,4
	.word	466
	.byte	8,24,2,35,0,11
	.byte	'FMT',0,4
	.word	466
	.byte	1,23,2,35,0,11
	.byte	'reserved_9',0,4
	.word	466
	.byte	7,16,2,35,0,11
	.byte	'DREG',0,4
	.word	466
	.byte	4,12,2,35,0,11
	.byte	'reserved_20',0,4
	.word	466
	.byte	12,0,2,35,0,0,29
	.byte	'Ifx_CPU_FPU_TRAP_OPC_Bits',0,19,212,2,3
	.word	53567
	.byte	10
	.byte	'_Ifx_CPU_FPU_TRAP_PC_Bits',0,19,215,2,16,4,11
	.byte	'PC',0,4
	.word	466
	.byte	32,0,2,35,0,0,29
	.byte	'Ifx_CPU_FPU_TRAP_PC_Bits',0,19,218,2,3
	.word	53727
	.byte	10
	.byte	'_Ifx_CPU_FPU_TRAP_SRC1_Bits',0,19,221,2,16,4,11
	.byte	'SRC1',0,4
	.word	466
	.byte	32,0,2,35,0,0,29
	.byte	'Ifx_CPU_FPU_TRAP_SRC1_Bits',0,19,224,2,3
	.word	53808
	.byte	10
	.byte	'_Ifx_CPU_FPU_TRAP_SRC2_Bits',0,19,227,2,16,4,11
	.byte	'SRC2',0,4
	.word	466
	.byte	32,0,2,35,0,0,29
	.byte	'Ifx_CPU_FPU_TRAP_SRC2_Bits',0,19,230,2,3
	.word	53895
	.byte	10
	.byte	'_Ifx_CPU_FPU_TRAP_SRC3_Bits',0,19,233,2,16,4,11
	.byte	'SRC3',0,4
	.word	466
	.byte	32,0,2,35,0,0,29
	.byte	'Ifx_CPU_FPU_TRAP_SRC3_Bits',0,19,236,2,3
	.word	53982
	.byte	10
	.byte	'_Ifx_CPU_ICNT_Bits',0,19,239,2,16,4,11
	.byte	'CountValue',0,4
	.word	466
	.byte	31,1,2,35,0,11
	.byte	'SOvf',0,4
	.word	466
	.byte	1,0,2,35,0,0,29
	.byte	'Ifx_CPU_ICNT_Bits',0,19,243,2,3
	.word	54069
	.byte	10
	.byte	'_Ifx_CPU_ICR_Bits',0,19,246,2,16,4,11
	.byte	'CCPN',0,4
	.word	466
	.byte	10,22,2,35,0,11
	.byte	'reserved_10',0,4
	.word	466
	.byte	5,17,2,35,0,11
	.byte	'IE',0,4
	.word	466
	.byte	1,16,2,35,0,11
	.byte	'PIPN',0,4
	.word	466
	.byte	10,6,2,35,0,11
	.byte	'reserved_26',0,4
	.word	466
	.byte	6,0,2,35,0,0,29
	.byte	'Ifx_CPU_ICR_Bits',0,19,253,2,3
	.word	54160
	.byte	10
	.byte	'_Ifx_CPU_ISP_Bits',0,19,128,3,16,4,11
	.byte	'ISP',0,4
	.word	466
	.byte	32,0,2,35,0,0,29
	.byte	'Ifx_CPU_ISP_Bits',0,19,131,3,3
	.word	54303
	.byte	10
	.byte	'_Ifx_CPU_LCX_Bits',0,19,134,3,16,4,11
	.byte	'LCXO',0,4
	.word	466
	.byte	16,16,2,35,0,11
	.byte	'LCXS',0,4
	.word	466
	.byte	4,12,2,35,0,11
	.byte	'reserved_20',0,4
	.word	466
	.byte	12,0,2,35,0,0,29
	.byte	'Ifx_CPU_LCX_Bits',0,19,139,3,3
	.word	54369
	.byte	10
	.byte	'_Ifx_CPU_M1CNT_Bits',0,19,142,3,16,4,11
	.byte	'CountValue',0,4
	.word	466
	.byte	31,1,2,35,0,11
	.byte	'SOvf',0,4
	.word	466
	.byte	1,0,2,35,0,0,29
	.byte	'Ifx_CPU_M1CNT_Bits',0,19,146,3,3
	.word	54475
	.byte	10
	.byte	'_Ifx_CPU_M2CNT_Bits',0,19,149,3,16,4,11
	.byte	'CountValue',0,4
	.word	466
	.byte	31,1,2,35,0,11
	.byte	'SOvf',0,4
	.word	466
	.byte	1,0,2,35,0,0,29
	.byte	'Ifx_CPU_M2CNT_Bits',0,19,153,3,3
	.word	54568
	.byte	10
	.byte	'_Ifx_CPU_M3CNT_Bits',0,19,156,3,16,4,11
	.byte	'CountValue',0,4
	.word	466
	.byte	31,1,2,35,0,11
	.byte	'SOvf',0,4
	.word	466
	.byte	1,0,2,35,0,0,29
	.byte	'Ifx_CPU_M3CNT_Bits',0,19,160,3,3
	.word	54661
	.byte	10
	.byte	'_Ifx_CPU_PC_Bits',0,19,163,3,16,4,11
	.byte	'reserved_0',0,4
	.word	466
	.byte	1,31,2,35,0,11
	.byte	'PC',0,4
	.word	466
	.byte	31,0,2,35,0,0,29
	.byte	'Ifx_CPU_PC_Bits',0,19,167,3,3
	.word	54754
	.byte	10
	.byte	'_Ifx_CPU_PCON0_Bits',0,19,170,3,16,4,11
	.byte	'reserved_0',0,4
	.word	466
	.byte	1,31,2,35,0,11
	.byte	'PCBYP',0,4
	.word	466
	.byte	1,30,2,35,0,11
	.byte	'reserved_2',0,4
	.word	466
	.byte	30,0,2,35,0,0,29
	.byte	'Ifx_CPU_PCON0_Bits',0,19,175,3,3
	.word	54839
	.byte	10
	.byte	'_Ifx_CPU_PCON1_Bits',0,19,178,3,16,4,11
	.byte	'PCINV',0,4
	.word	466
	.byte	1,31,2,35,0,11
	.byte	'PBINV',0,4
	.word	466
	.byte	1,30,2,35,0,11
	.byte	'reserved_2',0,4
	.word	466
	.byte	30,0,2,35,0,0,29
	.byte	'Ifx_CPU_PCON1_Bits',0,19,183,3,3
	.word	54955
	.byte	10
	.byte	'_Ifx_CPU_PCON2_Bits',0,19,186,3,16,4,11
	.byte	'PCACHE_SZE',0,4
	.word	466
	.byte	16,16,2,35,0,11
	.byte	'PSCRATCH_SZE',0,4
	.word	466
	.byte	16,0,2,35,0,0,29
	.byte	'Ifx_CPU_PCON2_Bits',0,19,190,3,3
	.word	55066
	.byte	10
	.byte	'_Ifx_CPU_PCXI_Bits',0,19,193,3,16,4,11
	.byte	'PCXO',0,4
	.word	466
	.byte	16,16,2,35,0,11
	.byte	'PCXS',0,4
	.word	466
	.byte	4,12,2,35,0,11
	.byte	'UL',0,4
	.word	466
	.byte	1,11,2,35,0,11
	.byte	'PIE',0,4
	.word	466
	.byte	1,10,2,35,0,11
	.byte	'PCPN',0,4
	.word	466
	.byte	10,0,2,35,0,0,29
	.byte	'Ifx_CPU_PCXI_Bits',0,19,200,3,3
	.word	55167
	.byte	10
	.byte	'_Ifx_CPU_PIEAR_Bits',0,19,203,3,16,4,11
	.byte	'TA',0,4
	.word	466
	.byte	32,0,2,35,0,0,29
	.byte	'Ifx_CPU_PIEAR_Bits',0,19,206,3,3
	.word	55297
	.byte	10
	.byte	'_Ifx_CPU_PIETR_Bits',0,19,209,3,16,4,11
	.byte	'IED',0,4
	.word	466
	.byte	1,31,2,35,0,11
	.byte	'IE_T',0,4
	.word	466
	.byte	1,30,2,35,0,11
	.byte	'IE_C',0,4
	.word	466
	.byte	1,29,2,35,0,11
	.byte	'IE_S',0,4
	.word	466
	.byte	1,28,2,35,0,11
	.byte	'IE_BI',0,4
	.word	466
	.byte	1,27,2,35,0,11
	.byte	'E_INFO',0,4
	.word	466
	.byte	6,21,2,35,0,11
	.byte	'IE_DUAL',0,4
	.word	466
	.byte	1,20,2,35,0,11
	.byte	'IE_SP',0,4
	.word	466
	.byte	1,19,2,35,0,11
	.byte	'IE_BS',0,4
	.word	466
	.byte	1,18,2,35,0,11
	.byte	'reserved_14',0,4
	.word	466
	.byte	18,0,2,35,0,0,29
	.byte	'Ifx_CPU_PIETR_Bits',0,19,221,3,3
	.word	55366
	.byte	10
	.byte	'_Ifx_CPU_PMA0_Bits',0,19,224,3,16,4,11
	.byte	'reserved_0',0,4
	.word	466
	.byte	13,19,2,35,0,11
	.byte	'DAC',0,4
	.word	466
	.byte	3,16,2,35,0,11
	.byte	'reserved_16',0,4
	.word	466
	.byte	16,0,2,35,0,0,29
	.byte	'Ifx_CPU_PMA0_Bits',0,19,229,3,3
	.word	55595
	.byte	10
	.byte	'_Ifx_CPU_PMA1_Bits',0,19,232,3,16,4,11
	.byte	'reserved_0',0,4
	.word	466
	.byte	14,18,2,35,0,11
	.byte	'CAC',0,4
	.word	466
	.byte	2,16,2,35,0,11
	.byte	'reserved_16',0,4
	.word	466
	.byte	16,0,2,35,0,0,29
	.byte	'Ifx_CPU_PMA1_Bits',0,19,237,3,3
	.word	55708
	.byte	10
	.byte	'_Ifx_CPU_PMA2_Bits',0,19,240,3,16,4,11
	.byte	'PSI',0,4
	.word	466
	.byte	16,16,2,35,0,11
	.byte	'reserved_16',0,4
	.word	466
	.byte	16,0,2,35,0,0,29
	.byte	'Ifx_CPU_PMA2_Bits',0,19,244,3,3
	.word	55821
	.byte	10
	.byte	'_Ifx_CPU_PSTR_Bits',0,19,247,3,16,4,11
	.byte	'FRE',0,4
	.word	466
	.byte	1,31,2,35,0,11
	.byte	'reserved_1',0,4
	.word	466
	.byte	1,30,2,35,0,11
	.byte	'FBE',0,4
	.word	466
	.byte	1,29,2,35,0,11
	.byte	'reserved_3',0,4
	.word	466
	.byte	9,20,2,35,0,11
	.byte	'FPE',0,4
	.word	466
	.byte	1,19,2,35,0,11
	.byte	'reserved_13',0,4
	.word	466
	.byte	1,18,2,35,0,11
	.byte	'FME',0,4
	.word	466
	.byte	1,17,2,35,0,11
	.byte	'reserved_15',0,4
	.word	466
	.byte	17,0,2,35,0,0,29
	.byte	'Ifx_CPU_PSTR_Bits',0,19,129,4,3
	.word	55912
	.byte	10
	.byte	'_Ifx_CPU_PSW_Bits',0,19,132,4,16,4,11
	.byte	'CDC',0,4
	.word	466
	.byte	7,25,2,35,0,11
	.byte	'CDE',0,4
	.word	466
	.byte	1,24,2,35,0,11
	.byte	'GW',0,4
	.word	466
	.byte	1,23,2,35,0,11
	.byte	'IS',0,4
	.word	466
	.byte	1,22,2,35,0,11
	.byte	'IO',0,4
	.word	466
	.byte	2,20,2,35,0,11
	.byte	'PRS',0,4
	.word	466
	.byte	2,18,2,35,0,11
	.byte	'S',0,4
	.word	466
	.byte	1,17,2,35,0,11
	.byte	'reserved_15',0,4
	.word	466
	.byte	12,5,2,35,0,11
	.byte	'SAV',0,4
	.word	466
	.byte	1,4,2,35,0,11
	.byte	'AV',0,4
	.word	466
	.byte	1,3,2,35,0,11
	.byte	'SV',0,4
	.word	466
	.byte	1,2,2,35,0,11
	.byte	'V',0,4
	.word	466
	.byte	1,1,2,35,0,11
	.byte	'C',0,4
	.word	466
	.byte	1,0,2,35,0,0,29
	.byte	'Ifx_CPU_PSW_Bits',0,19,147,4,3
	.word	56115
	.byte	10
	.byte	'_Ifx_CPU_SEGEN_Bits',0,19,150,4,16,4,11
	.byte	'ADFLIP',0,4
	.word	466
	.byte	8,24,2,35,0,11
	.byte	'ADTYPE',0,4
	.word	466
	.byte	2,22,2,35,0,11
	.byte	'reserved_10',0,4
	.word	466
	.byte	21,1,2,35,0,11
	.byte	'AE',0,4
	.word	466
	.byte	1,0,2,35,0,0,29
	.byte	'Ifx_CPU_SEGEN_Bits',0,19,156,4,3
	.word	56358
	.byte	10
	.byte	'_Ifx_CPU_SMACON_Bits',0,19,159,4,16,4,11
	.byte	'PC',0,4
	.word	466
	.byte	1,31,2,35,0,11
	.byte	'reserved_1',0,4
	.word	466
	.byte	1,30,2,35,0,11
	.byte	'PT',0,4
	.word	466
	.byte	1,29,2,35,0,11
	.byte	'reserved_3',0,4
	.word	466
	.byte	5,24,2,35,0,11
	.byte	'DC',0,4
	.word	466
	.byte	1,23,2,35,0,11
	.byte	'reserved_9',0,4
	.word	466
	.byte	1,22,2,35,0,11
	.byte	'DT',0,4
	.word	466
	.byte	1,21,2,35,0,11
	.byte	'reserved_11',0,4
	.word	466
	.byte	13,8,2,35,0,11
	.byte	'IODT',0,4
	.word	466
	.byte	1,7,2,35,0,11
	.byte	'reserved_25',0,4
	.word	466
	.byte	7,0,2,35,0,0,29
	.byte	'Ifx_CPU_SMACON_Bits',0,19,171,4,3
	.word	56486
	.byte	10
	.byte	'_Ifx_CPU_SPROT_ACCENA_Bits',0,19,174,4,16,4,11
	.byte	'EN',0,4
	.word	443
	.byte	32,0,2,35,0,0,29
	.byte	'Ifx_CPU_SPROT_ACCENA_Bits',0,19,177,4,3
	.word	56727
	.byte	10
	.byte	'_Ifx_CPU_SPROT_ACCENB_Bits',0,19,180,4,16,4,11
	.byte	'reserved_0',0,4
	.word	443
	.byte	32,0,2,35,0,0,29
	.byte	'Ifx_CPU_SPROT_ACCENB_Bits',0,19,183,4,3
	.word	56810
	.byte	10
	.byte	'_Ifx_CPU_SPROT_RGN_ACCENA_Bits',0,19,186,4,16,4,11
	.byte	'EN',0,4
	.word	443
	.byte	32,0,2,35,0,0,29
	.byte	'Ifx_CPU_SPROT_RGN_ACCENA_Bits',0,19,189,4,3
	.word	56901
	.byte	10
	.byte	'_Ifx_CPU_SPROT_RGN_ACCENB_Bits',0,19,192,4,16,4,11
	.byte	'reserved_0',0,4
	.word	443
	.byte	32,0,2,35,0,0,29
	.byte	'Ifx_CPU_SPROT_RGN_ACCENB_Bits',0,19,195,4,3
	.word	56992
	.byte	10
	.byte	'_Ifx_CPU_SPROT_RGN_LA_Bits',0,19,198,4,16,4,11
	.byte	'reserved_0',0,1
	.word	618
	.byte	5,3,2,35,0,11
	.byte	'ADDR',0,4
	.word	443
	.byte	27,0,2,35,0,0,29
	.byte	'Ifx_CPU_SPROT_RGN_LA_Bits',0,19,202,4,3
	.word	57091
	.byte	10
	.byte	'_Ifx_CPU_SPROT_RGN_UA_Bits',0,19,205,4,16,4,11
	.byte	'reserved_0',0,1
	.word	618
	.byte	5,3,2,35,0,11
	.byte	'ADDR',0,4
	.word	443
	.byte	27,0,2,35,0,0,29
	.byte	'Ifx_CPU_SPROT_RGN_UA_Bits',0,19,209,4,3
	.word	57198
	.byte	10
	.byte	'_Ifx_CPU_SWEVT_Bits',0,19,212,4,16,4,11
	.byte	'EVTA',0,4
	.word	466
	.byte	3,29,2,35,0,11
	.byte	'BBM',0,4
	.word	466
	.byte	1,28,2,35,0,11
	.byte	'BOD',0,4
	.word	466
	.byte	1,27,2,35,0,11
	.byte	'SUSP',0,4
	.word	466
	.byte	1,26,2,35,0,11
	.byte	'CNT',0,4
	.word	466
	.byte	2,24,2,35,0,11
	.byte	'reserved_8',0,4
	.word	466
	.byte	24,0,2,35,0,0,29
	.byte	'Ifx_CPU_SWEVT_Bits',0,19,220,4,3
	.word	57305
	.byte	10
	.byte	'_Ifx_CPU_SYSCON_Bits',0,19,223,4,16,4,11
	.byte	'FCDSF',0,4
	.word	466
	.byte	1,31,2,35,0,11
	.byte	'PROTEN',0,4
	.word	466
	.byte	1,30,2,35,0,11
	.byte	'TPROTEN',0,4
	.word	466
	.byte	1,29,2,35,0,11
	.byte	'IS',0,4
	.word	466
	.byte	1,28,2,35,0,11
	.byte	'IT',0,4
	.word	466
	.byte	1,27,2,35,0,11
	.byte	'reserved_5',0,4
	.word	466
	.byte	27,0,2,35,0,0,29
	.byte	'Ifx_CPU_SYSCON_Bits',0,19,231,4,3
	.word	57459
	.byte	10
	.byte	'_Ifx_CPU_TASK_ASI_Bits',0,19,234,4,16,4,11
	.byte	'ASI',0,4
	.word	466
	.byte	5,27,2,35,0,11
	.byte	'reserved_5',0,4
	.word	466
	.byte	27,0,2,35,0,0,29
	.byte	'Ifx_CPU_TASK_ASI_Bits',0,19,238,4,3
	.word	57620
	.byte	10
	.byte	'_Ifx_CPU_TPS_CON_Bits',0,19,241,4,16,4,11
	.byte	'TEXP0',0,4
	.word	466
	.byte	1,31,2,35,0,11
	.byte	'TEXP1',0,4
	.word	466
	.byte	1,30,2,35,0,11
	.byte	'TEXP2',0,4
	.word	466
	.byte	1,29,2,35,0,11
	.byte	'reserved_3',0,4
	.word	466
	.byte	13,16,2,35,0,11
	.byte	'TTRAP',0,4
	.word	466
	.byte	1,15,2,35,0,11
	.byte	'reserved_17',0,4
	.word	466
	.byte	15,0,2,35,0,0,29
	.byte	'Ifx_CPU_TPS_CON_Bits',0,19,249,4,3
	.word	57718
	.byte	10
	.byte	'_Ifx_CPU_TPS_TIMER_Bits',0,19,252,4,16,4,11
	.byte	'Timer',0,4
	.word	466
	.byte	32,0,2,35,0,0,29
	.byte	'Ifx_CPU_TPS_TIMER_Bits',0,19,255,4,3
	.word	57890
	.byte	10
	.byte	'_Ifx_CPU_TR_ADR_Bits',0,19,130,5,16,4,11
	.byte	'ADDR',0,4
	.word	466
	.byte	32,0,2,35,0,0,29
	.byte	'Ifx_CPU_TR_ADR_Bits',0,19,133,5,3
	.word	57970
	.byte	10
	.byte	'_Ifx_CPU_TR_EVT_Bits',0,19,136,5,16,4,11
	.byte	'EVTA',0,4
	.word	466
	.byte	3,29,2,35,0,11
	.byte	'BBM',0,4
	.word	466
	.byte	1,28,2,35,0,11
	.byte	'BOD',0,4
	.word	466
	.byte	1,27,2,35,0,11
	.byte	'SUSP',0,4
	.word	466
	.byte	1,26,2,35,0,11
	.byte	'CNT',0,4
	.word	466
	.byte	2,24,2,35,0,11
	.byte	'reserved_8',0,4
	.word	466
	.byte	4,20,2,35,0,11
	.byte	'TYP',0,4
	.word	466
	.byte	1,19,2,35,0,11
	.byte	'RNG',0,4
	.word	466
	.byte	1,18,2,35,0,11
	.byte	'reserved_14',0,4
	.word	466
	.byte	1,17,2,35,0,11
	.byte	'ASI_EN',0,4
	.word	466
	.byte	1,16,2,35,0,11
	.byte	'ASI',0,4
	.word	466
	.byte	5,11,2,35,0,11
	.byte	'reserved_21',0,4
	.word	466
	.byte	6,5,2,35,0,11
	.byte	'AST',0,4
	.word	466
	.byte	1,4,2,35,0,11
	.byte	'ALD',0,4
	.word	466
	.byte	1,3,2,35,0,11
	.byte	'reserved_29',0,4
	.word	466
	.byte	3,0,2,35,0,0,29
	.byte	'Ifx_CPU_TR_EVT_Bits',0,19,153,5,3
	.word	58043
	.byte	10
	.byte	'_Ifx_CPU_TRIG_ACC_Bits',0,19,156,5,16,4,11
	.byte	'T0',0,4
	.word	466
	.byte	1,31,2,35,0,11
	.byte	'T1',0,4
	.word	466
	.byte	1,30,2,35,0,11
	.byte	'T2',0,4
	.word	466
	.byte	1,29,2,35,0,11
	.byte	'T3',0,4
	.word	466
	.byte	1,28,2,35,0,11
	.byte	'T4',0,4
	.word	466
	.byte	1,27,2,35,0,11
	.byte	'T5',0,4
	.word	466
	.byte	1,26,2,35,0,11
	.byte	'T6',0,4
	.word	466
	.byte	1,25,2,35,0,11
	.byte	'T7',0,4
	.word	466
	.byte	1,24,2,35,0,11
	.byte	'reserved_8',0,4
	.word	466
	.byte	24,0,2,35,0,0,29
	.byte	'Ifx_CPU_TRIG_ACC_Bits',0,19,167,5,3
	.word	58361
	.byte	12,19,175,5,9,4,13
	.byte	'U',0
	.word	443
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	459
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	49579
	.byte	4,2,35,0,0,29
	.byte	'Ifx_CPU_A',0,19,180,5,3
	.word	58556
	.byte	12,19,183,5,9,4,13
	.byte	'U',0
	.word	443
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	459
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	49640
	.byte	4,2,35,0,0,29
	.byte	'Ifx_CPU_BIV',0,19,188,5,3
	.word	58615
	.byte	12,19,191,5,9,4,13
	.byte	'U',0
	.word	443
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	459
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	49719
	.byte	4,2,35,0,0,29
	.byte	'Ifx_CPU_BTV',0,19,196,5,3
	.word	58676
	.byte	12,19,199,5,9,4,13
	.byte	'U',0
	.word	443
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	459
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	49805
	.byte	4,2,35,0,0,29
	.byte	'Ifx_CPU_CCNT',0,19,204,5,3
	.word	58737
	.byte	12,19,207,5,9,4,13
	.byte	'U',0
	.word	443
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	459
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	49894
	.byte	4,2,35,0,0,29
	.byte	'Ifx_CPU_CCTRL',0,19,212,5,3
	.word	58799
	.byte	12,19,215,5,9,4,13
	.byte	'U',0
	.word	443
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	459
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	50040
	.byte	4,2,35,0,0,29
	.byte	'Ifx_CPU_COMPAT',0,19,220,5,3
	.word	58862
	.byte	12,19,223,5,9,4,13
	.byte	'U',0
	.word	443
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	459
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	50167
	.byte	4,2,35,0,0,29
	.byte	'Ifx_CPU_CORE_ID',0,19,228,5,3
	.word	58926
	.byte	12,19,231,5,9,4,13
	.byte	'U',0
	.word	443
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	459
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	50265
	.byte	4,2,35,0,0,29
	.byte	'Ifx_CPU_CPR_L',0,19,236,5,3
	.word	58991
	.byte	12,19,239,5,9,4,13
	.byte	'U',0
	.word	443
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	459
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	50358
	.byte	4,2,35,0,0,29
	.byte	'Ifx_CPU_CPR_U',0,19,244,5,3
	.word	59054
	.byte	12,19,247,5,9,4,13
	.byte	'U',0
	.word	443
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	459
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	50451
	.byte	4,2,35,0,0,29
	.byte	'Ifx_CPU_CPU_ID',0,19,252,5,3
	.word	59117
	.byte	12,19,255,5,9,4,13
	.byte	'U',0
	.word	443
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	459
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	50558
	.byte	4,2,35,0,0,29
	.byte	'Ifx_CPU_CPXE',0,19,132,6,3
	.word	59181
	.byte	12,19,135,6,9,4,13
	.byte	'U',0
	.word	443
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	459
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	50645
	.byte	4,2,35,0,0,29
	.byte	'Ifx_CPU_CREVT',0,19,140,6,3
	.word	59243
	.byte	12,19,143,6,9,4,13
	.byte	'U',0
	.word	443
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	459
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	50799
	.byte	4,2,35,0,0,29
	.byte	'Ifx_CPU_CUS_ID',0,19,148,6,3
	.word	59306
	.byte	12,19,151,6,9,4,13
	.byte	'U',0
	.word	443
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	459
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	50893
	.byte	4,2,35,0,0,29
	.byte	'Ifx_CPU_D',0,19,156,6,3
	.word	59370
	.byte	12,19,159,6,9,4,13
	.byte	'U',0
	.word	443
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	459
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	50956
	.byte	4,2,35,0,0,29
	.byte	'Ifx_CPU_DATR',0,19,164,6,3
	.word	59429
	.byte	12,19,167,6,9,4,13
	.byte	'U',0
	.word	443
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	459
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	51174
	.byte	4,2,35,0,0,29
	.byte	'Ifx_CPU_DBGSR',0,19,172,6,3
	.word	59491
	.byte	12,19,175,6,9,4,13
	.byte	'U',0
	.word	443
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	459
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	51389
	.byte	4,2,35,0,0,29
	.byte	'Ifx_CPU_DBGTCR',0,19,180,6,3
	.word	59554
	.byte	12,19,183,6,9,4,13
	.byte	'U',0
	.word	443
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	459
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	51483
	.byte	4,2,35,0,0,29
	.byte	'Ifx_CPU_DCON0',0,19,188,6,3
	.word	59618
	.byte	12,19,191,6,9,4,13
	.byte	'U',0
	.word	443
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	459
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	51599
	.byte	4,2,35,0,0,29
	.byte	'Ifx_CPU_DCON2',0,19,196,6,3
	.word	59681
	.byte	12,19,199,6,9,4,13
	.byte	'U',0
	.word	443
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	459
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	51700
	.byte	4,2,35,0,0,29
	.byte	'Ifx_CPU_DCX',0,19,204,6,3
	.word	59744
	.byte	12,19,207,6,9,4,13
	.byte	'U',0
	.word	443
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	459
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	51793
	.byte	4,2,35,0,0,29
	.byte	'Ifx_CPU_DEADD',0,19,212,6,3
	.word	59805
	.byte	12,19,215,6,9,4,13
	.byte	'U',0
	.word	443
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	459
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	51873
	.byte	4,2,35,0,0,29
	.byte	'Ifx_CPU_DIEAR',0,19,220,6,3
	.word	59868
	.byte	12,19,223,6,9,4,13
	.byte	'U',0
	.word	443
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	459
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	51942
	.byte	4,2,35,0,0,29
	.byte	'Ifx_CPU_DIETR',0,19,228,6,3
	.word	59931
	.byte	12,19,231,6,9,4,13
	.byte	'U',0
	.word	443
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	459
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	52171
	.byte	4,2,35,0,0,29
	.byte	'Ifx_CPU_DMS',0,19,236,6,3
	.word	59994
	.byte	12,19,239,6,9,4,13
	.byte	'U',0
	.word	443
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	459
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	52264
	.byte	4,2,35,0,0,29
	.byte	'Ifx_CPU_DPR_L',0,19,244,6,3
	.word	60055
	.byte	12,19,247,6,9,4,13
	.byte	'U',0
	.word	443
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	459
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	52359
	.byte	4,2,35,0,0,29
	.byte	'Ifx_CPU_DPR_U',0,19,252,6,3
	.word	60118
	.byte	12,19,255,6,9,4,13
	.byte	'U',0
	.word	443
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	459
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	52454
	.byte	4,2,35,0,0,29
	.byte	'Ifx_CPU_DPRE',0,19,132,7,3
	.word	60181
	.byte	12,19,135,7,9,4,13
	.byte	'U',0
	.word	443
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	459
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	52544
	.byte	4,2,35,0,0,29
	.byte	'Ifx_CPU_DPWE',0,19,140,7,3
	.word	60243
	.byte	12,19,143,7,9,4,13
	.byte	'U',0
	.word	443
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	459
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	52634
	.byte	4,2,35,0,0,29
	.byte	'Ifx_CPU_DSTR',0,19,148,7,3
	.word	60305
	.byte	12,19,151,7,9,4,13
	.byte	'U',0
	.word	443
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	459
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	52958
	.byte	4,2,35,0,0,29
	.byte	'Ifx_CPU_EXEVT',0,19,156,7,3
	.word	60367
	.byte	12,19,159,7,9,4,13
	.byte	'U',0
	.word	443
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	459
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	53112
	.byte	4,2,35,0,0,29
	.byte	'Ifx_CPU_FCX',0,19,164,7,3
	.word	60430
	.byte	12,19,167,7,9,4,13
	.byte	'U',0
	.word	443
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	459
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	53218
	.byte	4,2,35,0,0,29
	.byte	'Ifx_CPU_FPU_TRAP_CON',0,19,172,7,3
	.word	60491
	.byte	12,19,175,7,9,4,13
	.byte	'U',0
	.word	443
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	459
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	53567
	.byte	4,2,35,0,0,29
	.byte	'Ifx_CPU_FPU_TRAP_OPC',0,19,180,7,3
	.word	60561
	.byte	12,19,183,7,9,4,13
	.byte	'U',0
	.word	443
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	459
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	53727
	.byte	4,2,35,0,0,29
	.byte	'Ifx_CPU_FPU_TRAP_PC',0,19,188,7,3
	.word	60631
	.byte	12,19,191,7,9,4,13
	.byte	'U',0
	.word	443
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	459
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	53808
	.byte	4,2,35,0,0,29
	.byte	'Ifx_CPU_FPU_TRAP_SRC1',0,19,196,7,3
	.word	60700
	.byte	12,19,199,7,9,4,13
	.byte	'U',0
	.word	443
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	459
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	53895
	.byte	4,2,35,0,0,29
	.byte	'Ifx_CPU_FPU_TRAP_SRC2',0,19,204,7,3
	.word	60771
	.byte	12,19,207,7,9,4,13
	.byte	'U',0
	.word	443
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	459
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	53982
	.byte	4,2,35,0,0,29
	.byte	'Ifx_CPU_FPU_TRAP_SRC3',0,19,212,7,3
	.word	60842
	.byte	12,19,215,7,9,4,13
	.byte	'U',0
	.word	443
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	459
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	54069
	.byte	4,2,35,0,0,29
	.byte	'Ifx_CPU_ICNT',0,19,220,7,3
	.word	60913
	.byte	12,19,223,7,9,4,13
	.byte	'U',0
	.word	443
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	459
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	54160
	.byte	4,2,35,0,0,29
	.byte	'Ifx_CPU_ICR',0,19,228,7,3
	.word	60975
	.byte	12,19,231,7,9,4,13
	.byte	'U',0
	.word	443
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	459
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	54303
	.byte	4,2,35,0,0,29
	.byte	'Ifx_CPU_ISP',0,19,236,7,3
	.word	61036
	.byte	12,19,239,7,9,4,13
	.byte	'U',0
	.word	443
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	459
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	54369
	.byte	4,2,35,0,0,29
	.byte	'Ifx_CPU_LCX',0,19,244,7,3
	.word	61097
	.byte	12,19,247,7,9,4,13
	.byte	'U',0
	.word	443
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	459
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	54475
	.byte	4,2,35,0,0,29
	.byte	'Ifx_CPU_M1CNT',0,19,252,7,3
	.word	61158
	.byte	12,19,255,7,9,4,13
	.byte	'U',0
	.word	443
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	459
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	54568
	.byte	4,2,35,0,0,29
	.byte	'Ifx_CPU_M2CNT',0,19,132,8,3
	.word	61221
	.byte	12,19,135,8,9,4,13
	.byte	'U',0
	.word	443
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	459
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	54661
	.byte	4,2,35,0,0,29
	.byte	'Ifx_CPU_M3CNT',0,19,140,8,3
	.word	61284
	.byte	12,19,143,8,9,4,13
	.byte	'U',0
	.word	443
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	459
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	54754
	.byte	4,2,35,0,0,29
	.byte	'Ifx_CPU_PC',0,19,148,8,3
	.word	61347
	.byte	12,19,151,8,9,4,13
	.byte	'U',0
	.word	443
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	459
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	54839
	.byte	4,2,35,0,0,29
	.byte	'Ifx_CPU_PCON0',0,19,156,8,3
	.word	61407
	.byte	12,19,159,8,9,4,13
	.byte	'U',0
	.word	443
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	459
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	54955
	.byte	4,2,35,0,0,29
	.byte	'Ifx_CPU_PCON1',0,19,164,8,3
	.word	61470
	.byte	12,19,167,8,9,4,13
	.byte	'U',0
	.word	443
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	459
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	55066
	.byte	4,2,35,0,0,29
	.byte	'Ifx_CPU_PCON2',0,19,172,8,3
	.word	61533
	.byte	12,19,175,8,9,4,13
	.byte	'U',0
	.word	443
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	459
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	55167
	.byte	4,2,35,0,0,29
	.byte	'Ifx_CPU_PCXI',0,19,180,8,3
	.word	61596
	.byte	12,19,183,8,9,4,13
	.byte	'U',0
	.word	443
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	459
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	55297
	.byte	4,2,35,0,0,29
	.byte	'Ifx_CPU_PIEAR',0,19,188,8,3
	.word	61658
	.byte	12,19,191,8,9,4,13
	.byte	'U',0
	.word	443
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	459
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	55366
	.byte	4,2,35,0,0,29
	.byte	'Ifx_CPU_PIETR',0,19,196,8,3
	.word	61721
	.byte	12,19,199,8,9,4,13
	.byte	'U',0
	.word	443
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	459
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	55595
	.byte	4,2,35,0,0,29
	.byte	'Ifx_CPU_PMA0',0,19,204,8,3
	.word	61784
	.byte	12,19,207,8,9,4,13
	.byte	'U',0
	.word	443
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	459
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	55708
	.byte	4,2,35,0,0,29
	.byte	'Ifx_CPU_PMA1',0,19,212,8,3
	.word	61846
	.byte	12,19,215,8,9,4,13
	.byte	'U',0
	.word	443
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	459
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	55821
	.byte	4,2,35,0,0,29
	.byte	'Ifx_CPU_PMA2',0,19,220,8,3
	.word	61908
	.byte	12,19,223,8,9,4,13
	.byte	'U',0
	.word	443
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	459
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	55912
	.byte	4,2,35,0,0,29
	.byte	'Ifx_CPU_PSTR',0,19,228,8,3
	.word	61970
	.byte	12,19,231,8,9,4,13
	.byte	'U',0
	.word	443
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	459
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	56115
	.byte	4,2,35,0,0,29
	.byte	'Ifx_CPU_PSW',0,19,236,8,3
	.word	62032
	.byte	12,19,239,8,9,4,13
	.byte	'U',0
	.word	443
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	459
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	56358
	.byte	4,2,35,0,0,29
	.byte	'Ifx_CPU_SEGEN',0,19,244,8,3
	.word	62093
	.byte	12,19,247,8,9,4,13
	.byte	'U',0
	.word	443
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	459
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	56486
	.byte	4,2,35,0,0,29
	.byte	'Ifx_CPU_SMACON',0,19,252,8,3
	.word	62156
	.byte	12,19,255,8,9,4,13
	.byte	'U',0
	.word	443
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	459
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	56727
	.byte	4,2,35,0,0,29
	.byte	'Ifx_CPU_SPROT_ACCENA',0,19,132,9,3
	.word	62220
	.byte	12,19,135,9,9,4,13
	.byte	'U',0
	.word	443
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	459
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	56810
	.byte	4,2,35,0,0,29
	.byte	'Ifx_CPU_SPROT_ACCENB',0,19,140,9,3
	.word	62290
	.byte	12,19,143,9,9,4,13
	.byte	'U',0
	.word	443
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	459
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	56901
	.byte	4,2,35,0,0,29
	.byte	'Ifx_CPU_SPROT_RGN_ACCENA',0,19,148,9,3
	.word	62360
	.byte	12,19,151,9,9,4,13
	.byte	'U',0
	.word	443
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	459
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	56992
	.byte	4,2,35,0,0,29
	.byte	'Ifx_CPU_SPROT_RGN_ACCENB',0,19,156,9,3
	.word	62434
	.byte	12,19,159,9,9,4,13
	.byte	'U',0
	.word	443
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	459
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	57091
	.byte	4,2,35,0,0,29
	.byte	'Ifx_CPU_SPROT_RGN_LA',0,19,164,9,3
	.word	62508
	.byte	12,19,167,9,9,4,13
	.byte	'U',0
	.word	443
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	459
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	57198
	.byte	4,2,35,0,0,29
	.byte	'Ifx_CPU_SPROT_RGN_UA',0,19,172,9,3
	.word	62578
	.byte	12,19,175,9,9,4,13
	.byte	'U',0
	.word	443
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	459
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	57305
	.byte	4,2,35,0,0,29
	.byte	'Ifx_CPU_SWEVT',0,19,180,9,3
	.word	62648
	.byte	12,19,183,9,9,4,13
	.byte	'U',0
	.word	443
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	459
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	57459
	.byte	4,2,35,0,0,29
	.byte	'Ifx_CPU_SYSCON',0,19,188,9,3
	.word	62711
	.byte	12,19,191,9,9,4,13
	.byte	'U',0
	.word	443
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	459
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	57620
	.byte	4,2,35,0,0,29
	.byte	'Ifx_CPU_TASK_ASI',0,19,196,9,3
	.word	62775
	.byte	12,19,199,9,9,4,13
	.byte	'U',0
	.word	443
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	459
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	57718
	.byte	4,2,35,0,0,29
	.byte	'Ifx_CPU_TPS_CON',0,19,204,9,3
	.word	62841
	.byte	12,19,207,9,9,4,13
	.byte	'U',0
	.word	443
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	459
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	57890
	.byte	4,2,35,0,0,29
	.byte	'Ifx_CPU_TPS_TIMER',0,19,212,9,3
	.word	62906
	.byte	12,19,215,9,9,4,13
	.byte	'U',0
	.word	443
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	459
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	57970
	.byte	4,2,35,0,0,29
	.byte	'Ifx_CPU_TR_ADR',0,19,220,9,3
	.word	62973
	.byte	12,19,223,9,9,4,13
	.byte	'U',0
	.word	443
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	459
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	58043
	.byte	4,2,35,0,0,29
	.byte	'Ifx_CPU_TR_EVT',0,19,228,9,3
	.word	63037
	.byte	12,19,231,9,9,4,13
	.byte	'U',0
	.word	443
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	459
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	58361
	.byte	4,2,35,0,0,29
	.byte	'Ifx_CPU_TRIG_ACC',0,19,236,9,3
	.word	63101
	.byte	10
	.byte	'_Ifx_CPU_CPR',0,19,247,9,25,8,13
	.byte	'L',0
	.word	58991
	.byte	4,2,35,0,13
	.byte	'U',0
	.word	59054
	.byte	4,2,35,4,0,14
	.word	63167
	.byte	29
	.byte	'Ifx_CPU_CPR',0,19,251,9,3
	.word	63209
	.byte	10
	.byte	'_Ifx_CPU_DPR',0,19,254,9,25,8,13
	.byte	'L',0
	.word	60055
	.byte	4,2,35,0,13
	.byte	'U',0
	.word	60118
	.byte	4,2,35,4,0,14
	.word	63235
	.byte	29
	.byte	'Ifx_CPU_DPR',0,19,130,10,3
	.word	63277
	.byte	10
	.byte	'_Ifx_CPU_SPROT_RGN',0,19,133,10,25,16,13
	.byte	'LA',0
	.word	62508
	.byte	4,2,35,0,13
	.byte	'UA',0
	.word	62578
	.byte	4,2,35,4,13
	.byte	'ACCENA',0
	.word	62360
	.byte	4,2,35,8,13
	.byte	'ACCENB',0
	.word	62434
	.byte	4,2,35,12,0,14
	.word	63303
	.byte	29
	.byte	'Ifx_CPU_SPROT_RGN',0,19,139,10,3
	.word	63385
	.byte	18,12
	.word	62906
	.byte	19,2,0,10
	.byte	'_Ifx_CPU_TPS',0,19,142,10,25,16,13
	.byte	'CON',0
	.word	62841
	.byte	4,2,35,0,13
	.byte	'TIMER',0
	.word	63417
	.byte	12,2,35,4,0,14
	.word	63426
	.byte	29
	.byte	'Ifx_CPU_TPS',0,19,146,10,3
	.word	63474
	.byte	10
	.byte	'_Ifx_CPU_TR',0,19,149,10,25,8,13
	.byte	'EVT',0
	.word	63037
	.byte	4,2,35,0,13
	.byte	'ADR',0
	.word	62973
	.byte	4,2,35,4,0,14
	.word	63500
	.byte	29
	.byte	'Ifx_CPU_TR',0,19,153,10,3
	.word	63545
	.byte	18,176,32
	.word	618
	.byte	19,175,32,0,18,208,223,1
	.word	618
	.byte	19,207,223,1,0,18,248,1
	.word	618
	.byte	19,247,1,0,18,244,29
	.word	618
	.byte	19,243,29,0,18,188,3
	.word	618
	.byte	19,187,3,0,18,232,3
	.word	618
	.byte	19,231,3,0,18,252,23
	.word	618
	.byte	19,251,23,0,18,228,63
	.word	618
	.byte	19,227,63,0,18,128,1
	.word	63235
	.byte	19,15,0,14
	.word	63660
	.byte	18,128,31
	.word	618
	.byte	19,255,30,0,18,64
	.word	63167
	.byte	19,7,0,14
	.word	63686
	.byte	18,192,31
	.word	618
	.byte	19,191,31,0,18,16
	.word	59181
	.byte	19,3,0,18,16
	.word	60181
	.byte	19,3,0,18,16
	.word	60243
	.byte	19,3,0,18,208,7
	.word	618
	.byte	19,207,7,0,14
	.word	63426
	.byte	18,240,23
	.word	618
	.byte	19,239,23,0,18,64
	.word	63500
	.byte	19,7,0,14
	.word	63765
	.byte	18,192,23
	.word	618
	.byte	19,191,23,0,18,232,1
	.word	618
	.byte	19,231,1,0,18,180,1
	.word	618
	.byte	19,179,1,0,18,172,1
	.word	618
	.byte	19,171,1,0,18,64
	.word	59370
	.byte	19,15,0,18,64
	.word	618
	.byte	19,63,0,18,64
	.word	58556
	.byte	19,15,0,10
	.byte	'_Ifx_CPU',0,19,166,10,25,128,128,4,13
	.byte	'reserved_0',0
	.word	63570
	.byte	176,32,2,35,0,13
	.byte	'SEGEN',0
	.word	62093
	.byte	4,3,35,176,32,13
	.byte	'reserved_1034',0
	.word	63581
	.byte	208,223,1,3,35,180,32,13
	.byte	'TASK_ASI',0
	.word	62775
	.byte	4,4,35,132,128,2,13
	.byte	'reserved_8008',0
	.word	63594
	.byte	248,1,4,35,136,128,2,13
	.byte	'PMA0',0
	.word	61784
	.byte	4,4,35,128,130,2,13
	.byte	'PMA1',0
	.word	61846
	.byte	4,4,35,132,130,2,13
	.byte	'PMA2',0
	.word	61908
	.byte	4,4,35,136,130,2,13
	.byte	'reserved_810C',0
	.word	63605
	.byte	244,29,4,35,140,130,2,13
	.byte	'DCON2',0
	.word	59681
	.byte	4,4,35,128,160,2,13
	.byte	'reserved_9004',0
	.word	4641
	.byte	8,4,35,132,160,2,13
	.byte	'SMACON',0
	.word	62156
	.byte	4,4,35,140,160,2,13
	.byte	'DSTR',0
	.word	60305
	.byte	4,4,35,144,160,2,13
	.byte	'reserved_9014',0
	.word	2822
	.byte	4,4,35,148,160,2,13
	.byte	'DATR',0
	.word	59429
	.byte	4,4,35,152,160,2,13
	.byte	'DEADD',0
	.word	59805
	.byte	4,4,35,156,160,2,13
	.byte	'DIEAR',0
	.word	59868
	.byte	4,4,35,160,160,2,13
	.byte	'DIETR',0
	.word	59931
	.byte	4,4,35,164,160,2,13
	.byte	'reserved_9028',0
	.word	4012
	.byte	24,4,35,168,160,2,13
	.byte	'DCON0',0
	.word	59618
	.byte	4,4,35,192,160,2,13
	.byte	'reserved_9044',0
	.word	63616
	.byte	188,3,4,35,196,160,2,13
	.byte	'PSTR',0
	.word	61970
	.byte	4,4,35,128,164,2,13
	.byte	'PCON1',0
	.word	61470
	.byte	4,4,35,132,164,2,13
	.byte	'PCON2',0
	.word	61533
	.byte	4,4,35,136,164,2,13
	.byte	'PCON0',0
	.word	61407
	.byte	4,4,35,140,164,2,13
	.byte	'PIEAR',0
	.word	61658
	.byte	4,4,35,144,164,2,13
	.byte	'PIETR',0
	.word	61721
	.byte	4,4,35,148,164,2,13
	.byte	'reserved_9218',0
	.word	63627
	.byte	232,3,4,35,152,164,2,13
	.byte	'COMPAT',0
	.word	58862
	.byte	4,4,35,128,168,2,13
	.byte	'reserved_9404',0
	.word	63638
	.byte	252,23,4,35,132,168,2,13
	.byte	'FPU_TRAP_CON',0
	.word	60491
	.byte	4,4,35,128,192,2,13
	.byte	'FPU_TRAP_PC',0
	.word	60631
	.byte	4,4,35,132,192,2,13
	.byte	'FPU_TRAP_OPC',0
	.word	60561
	.byte	4,4,35,136,192,2,13
	.byte	'reserved_A00C',0
	.word	2822
	.byte	4,4,35,140,192,2,13
	.byte	'FPU_TRAP_SRC1',0
	.word	60700
	.byte	4,4,35,144,192,2,13
	.byte	'FPU_TRAP_SRC2',0
	.word	60771
	.byte	4,4,35,148,192,2,13
	.byte	'FPU_TRAP_SRC3',0
	.word	60842
	.byte	4,4,35,152,192,2,13
	.byte	'reserved_A01C',0
	.word	63649
	.byte	228,63,4,35,156,192,2,13
	.byte	'DPR',0
	.word	63670
	.byte	128,1,4,35,128,128,3,13
	.byte	'reserved_C080',0
	.word	63675
	.byte	128,31,4,35,128,129,3,13
	.byte	'CPR',0
	.word	63695
	.byte	64,4,35,128,160,3,13
	.byte	'reserved_D040',0
	.word	63700
	.byte	192,31,4,35,192,160,3,13
	.byte	'CPXE',0
	.word	63711
	.byte	16,4,35,128,192,3,13
	.byte	'DPRE',0
	.word	63720
	.byte	16,4,35,144,192,3,13
	.byte	'DPWE',0
	.word	63729
	.byte	16,4,35,160,192,3,13
	.byte	'reserved_E030',0
	.word	63738
	.byte	208,7,4,35,176,192,3,13
	.byte	'TPS',0
	.word	63749
	.byte	16,4,35,128,200,3,13
	.byte	'reserved_E410',0
	.word	63754
	.byte	240,23,4,35,144,200,3,13
	.byte	'TR',0
	.word	63774
	.byte	64,4,35,128,224,3,13
	.byte	'reserved_F040',0
	.word	63779
	.byte	192,23,4,35,192,224,3,13
	.byte	'CCTRL',0
	.word	58799
	.byte	4,4,35,128,248,3,13
	.byte	'CCNT',0
	.word	58737
	.byte	4,4,35,132,248,3,13
	.byte	'ICNT',0
	.word	60913
	.byte	4,4,35,136,248,3,13
	.byte	'M1CNT',0
	.word	61158
	.byte	4,4,35,140,248,3,13
	.byte	'M2CNT',0
	.word	61221
	.byte	4,4,35,144,248,3,13
	.byte	'M3CNT',0
	.word	61284
	.byte	4,4,35,148,248,3,13
	.byte	'reserved_FC18',0
	.word	63790
	.byte	232,1,4,35,152,248,3,13
	.byte	'DBGSR',0
	.word	59491
	.byte	4,4,35,128,250,3,13
	.byte	'reserved_FD04',0
	.word	2822
	.byte	4,4,35,132,250,3,13
	.byte	'EXEVT',0
	.word	60367
	.byte	4,4,35,136,250,3,13
	.byte	'CREVT',0
	.word	59243
	.byte	4,4,35,140,250,3,13
	.byte	'SWEVT',0
	.word	62648
	.byte	4,4,35,144,250,3,13
	.byte	'reserved_FD14',0
	.word	47520
	.byte	28,4,35,148,250,3,13
	.byte	'TRIG_ACC',0
	.word	63101
	.byte	4,4,35,176,250,3,13
	.byte	'reserved_FD34',0
	.word	4981
	.byte	12,4,35,180,250,3,13
	.byte	'DMS',0
	.word	59994
	.byte	4,4,35,192,250,3,13
	.byte	'DCX',0
	.word	59744
	.byte	4,4,35,196,250,3,13
	.byte	'DBGTCR',0
	.word	59554
	.byte	4,4,35,200,250,3,13
	.byte	'reserved_FD4C',0
	.word	63801
	.byte	180,1,4,35,204,250,3,13
	.byte	'PCXI',0
	.word	61596
	.byte	4,4,35,128,252,3,13
	.byte	'PSW',0
	.word	62032
	.byte	4,4,35,132,252,3,13
	.byte	'PC',0
	.word	61347
	.byte	4,4,35,136,252,3,13
	.byte	'reserved_FE0C',0
	.word	4641
	.byte	8,4,35,140,252,3,13
	.byte	'SYSCON',0
	.word	62711
	.byte	4,4,35,148,252,3,13
	.byte	'CPU_ID',0
	.word	59117
	.byte	4,4,35,152,252,3,13
	.byte	'CORE_ID',0
	.word	58926
	.byte	4,4,35,156,252,3,13
	.byte	'BIV',0
	.word	58615
	.byte	4,4,35,160,252,3,13
	.byte	'BTV',0
	.word	58676
	.byte	4,4,35,164,252,3,13
	.byte	'ISP',0
	.word	61036
	.byte	4,4,35,168,252,3,13
	.byte	'ICR',0
	.word	60975
	.byte	4,4,35,172,252,3,13
	.byte	'reserved_FE30',0
	.word	4641
	.byte	8,4,35,176,252,3,13
	.byte	'FCX',0
	.word	60430
	.byte	4,4,35,184,252,3,13
	.byte	'LCX',0
	.word	61097
	.byte	4,4,35,188,252,3,13
	.byte	'reserved_FE40',0
	.word	47511
	.byte	16,4,35,192,252,3,13
	.byte	'CUS_ID',0
	.word	59306
	.byte	4,4,35,208,252,3,13
	.byte	'reserved_FE54',0
	.word	63812
	.byte	172,1,4,35,212,252,3,13
	.byte	'D',0
	.word	63823
	.byte	64,4,35,128,254,3,13
	.byte	'reserved_FF40',0
	.word	63832
	.byte	64,4,35,192,254,3,13
	.byte	'A',0
	.word	63841
	.byte	64,4,35,128,255,3,13
	.byte	'reserved_FFC0',0
	.word	63832
	.byte	64,4,35,192,255,3,0,14
	.word	63850
	.byte	29
	.byte	'Ifx_CPU',0,19,130,11,3
	.word	65641
	.byte	15,6,127,9,1,16
	.byte	'IfxCpu_Id_0',0,0,16
	.byte	'IfxCpu_Id_1',0,1,16
	.byte	'IfxCpu_Id_none',0,2,0,29
	.byte	'IfxCpu_Id',0,6,132,1,3
	.word	65663
	.byte	29
	.byte	'IfxCpu_ResourceCpu',0,6,161,1,3
	.word	1430
	.byte	29
	.byte	'Ifx_SRC_SRCR_Bits',0,10,62,3
	.word	10343
	.byte	29
	.byte	'Ifx_SRC_SRCR',0,10,75,3
	.word	10633
	.byte	10
	.byte	'_Ifx_SRC_AGBT',0,10,86,25,4,13
	.byte	'SR',0
	.word	10633
	.byte	4,2,35,0,0,14
	.word	65808
	.byte	29
	.byte	'Ifx_SRC_AGBT',0,10,89,3
	.word	65840
	.byte	10
	.byte	'_Ifx_SRC_ASCLIN',0,10,92,25,12,13
	.byte	'TX',0
	.word	10633
	.byte	4,2,35,0,13
	.byte	'RX',0
	.word	10633
	.byte	4,2,35,4,13
	.byte	'ERR',0
	.word	10633
	.byte	4,2,35,8,0,14
	.word	65866
	.byte	29
	.byte	'Ifx_SRC_ASCLIN',0,10,97,3
	.word	65925
	.byte	10
	.byte	'_Ifx_SRC_BCUSPB',0,10,100,25,4,13
	.byte	'SBSRC',0
	.word	10633
	.byte	4,2,35,0,0,14
	.word	65953
	.byte	29
	.byte	'Ifx_SRC_BCUSPB',0,10,103,3
	.word	65990
	.byte	18,64
	.word	10633
	.byte	19,15,0,10
	.byte	'_Ifx_SRC_CAN',0,10,106,25,64,13
	.byte	'INT',0
	.word	66018
	.byte	64,2,35,0,0,14
	.word	66027
	.byte	29
	.byte	'Ifx_SRC_CAN',0,10,109,3
	.word	66059
	.byte	10
	.byte	'_Ifx_SRC_CCU6',0,10,112,25,16,13
	.byte	'SR0',0
	.word	10633
	.byte	4,2,35,0,13
	.byte	'SR1',0
	.word	10633
	.byte	4,2,35,4,13
	.byte	'SR2',0
	.word	10633
	.byte	4,2,35,8,13
	.byte	'SR3',0
	.word	10633
	.byte	4,2,35,12,0,14
	.word	66084
	.byte	29
	.byte	'Ifx_SRC_CCU6',0,10,118,3
	.word	66156
	.byte	18,8
	.word	10633
	.byte	19,1,0,10
	.byte	'_Ifx_SRC_CERBERUS',0,10,121,25,8,13
	.byte	'SR',0
	.word	66182
	.byte	8,2,35,0,0,14
	.word	66191
	.byte	29
	.byte	'Ifx_SRC_CERBERUS',0,10,124,3
	.word	66227
	.byte	10
	.byte	'_Ifx_SRC_CIF',0,10,127,25,16,13
	.byte	'MI',0
	.word	10633
	.byte	4,2,35,0,13
	.byte	'MIEP',0
	.word	10633
	.byte	4,2,35,4,13
	.byte	'ISP',0
	.word	10633
	.byte	4,2,35,8,13
	.byte	'MJPEG',0
	.word	10633
	.byte	4,2,35,12,0,14
	.word	66257
	.byte	29
	.byte	'Ifx_SRC_CIF',0,10,133,1,3
	.word	66330
	.byte	10
	.byte	'_Ifx_SRC_CPU',0,10,136,1,25,4,13
	.byte	'SBSRC',0
	.word	10633
	.byte	4,2,35,0,0,14
	.word	66356
	.byte	29
	.byte	'Ifx_SRC_CPU',0,10,139,1,3
	.word	66391
	.byte	18,192,1
	.word	10633
	.byte	19,47,0,10
	.byte	'_Ifx_SRC_DMA',0,10,142,1,25,208,1,13
	.byte	'ERR',0
	.word	10633
	.byte	4,2,35,0,13
	.byte	'reserved_4',0
	.word	4981
	.byte	12,2,35,4,13
	.byte	'CH',0
	.word	66417
	.byte	192,1,2,35,16,0,14
	.word	66427
	.byte	29
	.byte	'Ifx_SRC_DMA',0,10,147,1,3
	.word	66494
	.byte	10
	.byte	'_Ifx_SRC_DSADC',0,10,150,1,25,8,13
	.byte	'SRM',0
	.word	10633
	.byte	4,2,35,0,13
	.byte	'SRA',0
	.word	10633
	.byte	4,2,35,4,0,14
	.word	66520
	.byte	29
	.byte	'Ifx_SRC_DSADC',0,10,154,1,3
	.word	66568
	.byte	10
	.byte	'_Ifx_SRC_EMEM',0,10,157,1,25,4,13
	.byte	'SR',0
	.word	10633
	.byte	4,2,35,0,0,14
	.word	66596
	.byte	29
	.byte	'Ifx_SRC_EMEM',0,10,160,1,3
	.word	66629
	.byte	10
	.byte	'_Ifx_SRC_ERAY',0,10,163,1,25,80,13
	.byte	'INT',0
	.word	66182
	.byte	8,2,35,0,13
	.byte	'TINT',0
	.word	66182
	.byte	8,2,35,8,13
	.byte	'NDAT',0
	.word	66182
	.byte	8,2,35,16,13
	.byte	'MBSC',0
	.word	66182
	.byte	8,2,35,24,13
	.byte	'OBUSY',0
	.word	10633
	.byte	4,2,35,32,13
	.byte	'IBUSY',0
	.word	10633
	.byte	4,2,35,36,13
	.byte	'reserved_28',0
	.word	47529
	.byte	40,2,35,40,0,14
	.word	66656
	.byte	29
	.byte	'Ifx_SRC_ERAY',0,10,172,1,3
	.word	66783
	.byte	10
	.byte	'_Ifx_SRC_ETH',0,10,175,1,25,4,13
	.byte	'SR',0
	.word	10633
	.byte	4,2,35,0,0,14
	.word	66810
	.byte	29
	.byte	'Ifx_SRC_ETH',0,10,178,1,3
	.word	66842
	.byte	10
	.byte	'_Ifx_SRC_FCE',0,10,181,1,25,4,13
	.byte	'SR',0
	.word	10633
	.byte	4,2,35,0,0,14
	.word	66868
	.byte	29
	.byte	'Ifx_SRC_FCE',0,10,184,1,3
	.word	66900
	.byte	10
	.byte	'_Ifx_SRC_FFT',0,10,187,1,25,12,13
	.byte	'DONE',0
	.word	10633
	.byte	4,2,35,0,13
	.byte	'ERR',0
	.word	10633
	.byte	4,2,35,4,13
	.byte	'RFS',0
	.word	10633
	.byte	4,2,35,8,0,14
	.word	66926
	.byte	29
	.byte	'Ifx_SRC_FFT',0,10,192,1,3
	.word	66986
	.byte	10
	.byte	'_Ifx_SRC_GPSR',0,10,195,1,25,32,13
	.byte	'SR0',0
	.word	10633
	.byte	4,2,35,0,13
	.byte	'SR1',0
	.word	10633
	.byte	4,2,35,4,13
	.byte	'SR2',0
	.word	10633
	.byte	4,2,35,8,13
	.byte	'SR3',0
	.word	10633
	.byte	4,2,35,12,13
	.byte	'reserved_10',0
	.word	47511
	.byte	16,2,35,16,0,14
	.word	67012
	.byte	29
	.byte	'Ifx_SRC_GPSR',0,10,202,1,3
	.word	67106
	.byte	10
	.byte	'_Ifx_SRC_GPT12',0,10,205,1,25,48,13
	.byte	'CIRQ',0
	.word	10633
	.byte	4,2,35,0,13
	.byte	'T2',0
	.word	10633
	.byte	4,2,35,4,13
	.byte	'T3',0
	.word	10633
	.byte	4,2,35,8,13
	.byte	'T4',0
	.word	10633
	.byte	4,2,35,12,13
	.byte	'T5',0
	.word	10633
	.byte	4,2,35,16,13
	.byte	'T6',0
	.word	10633
	.byte	4,2,35,20,13
	.byte	'reserved_18',0
	.word	4012
	.byte	24,2,35,24,0,14
	.word	67133
	.byte	29
	.byte	'Ifx_SRC_GPT12',0,10,214,1,3
	.word	67250
	.byte	18,12
	.word	10633
	.byte	19,2,0,18,32
	.word	10633
	.byte	19,7,0,18,32
	.word	67287
	.byte	19,0,0,18,88
	.word	618
	.byte	19,87,0,18,108
	.word	10633
	.byte	19,26,0,18,96
	.word	618
	.byte	19,95,0,18,96
	.word	67287
	.byte	19,2,0,18,160,3
	.word	618
	.byte	19,159,3,0,18,64
	.word	67287
	.byte	19,1,0,18,192,3
	.word	618
	.byte	19,191,3,0,18,16
	.word	10633
	.byte	19,3,0,18,64
	.word	67372
	.byte	19,3,0,18,192,2
	.word	618
	.byte	19,191,2,0,18,52
	.word	618
	.byte	19,51,0,10
	.byte	'_Ifx_SRC_GTM',0,10,217,1,25,204,18,13
	.byte	'AEIIRQ',0
	.word	10633
	.byte	4,2,35,0,13
	.byte	'ARUIRQ',0
	.word	67278
	.byte	12,2,35,4,13
	.byte	'reserved_10',0
	.word	2822
	.byte	4,2,35,16,13
	.byte	'BRCIRQ',0
	.word	10633
	.byte	4,2,35,20,13
	.byte	'CMPIRQ',0
	.word	10633
	.byte	4,2,35,24,13
	.byte	'SPEIRQ',0
	.word	66182
	.byte	8,2,35,28,13
	.byte	'reserved_24',0
	.word	4641
	.byte	8,2,35,36,13
	.byte	'PSM',0
	.word	67296
	.byte	32,2,35,44,13
	.byte	'reserved_4C',0
	.word	67305
	.byte	88,2,35,76,13
	.byte	'DPLL',0
	.word	67314
	.byte	108,3,35,164,1,13
	.byte	'reserved_110',0
	.word	67323
	.byte	96,3,35,144,2,13
	.byte	'ERR',0
	.word	10633
	.byte	4,3,35,240,2,13
	.byte	'reserved_174',0
	.word	4981
	.byte	12,3,35,244,2,13
	.byte	'TIM',0
	.word	67332
	.byte	96,3,35,128,3,13
	.byte	'reserved_1E0',0
	.word	67341
	.byte	160,3,3,35,224,3,13
	.byte	'MCS',0
	.word	67332
	.byte	96,3,35,128,7,13
	.byte	'reserved_3E0',0
	.word	67341
	.byte	160,3,3,35,224,7,13
	.byte	'TOM',0
	.word	67352
	.byte	64,3,35,128,11,13
	.byte	'reserved_5C0',0
	.word	67361
	.byte	192,3,3,35,192,11,13
	.byte	'ATOM',0
	.word	67381
	.byte	64,3,35,128,15,13
	.byte	'reserved_7C0',0
	.word	67390
	.byte	192,2,3,35,192,15,13
	.byte	'MCSW0',0
	.word	67278
	.byte	12,3,35,128,18,13
	.byte	'reserved_90C',0
	.word	67401
	.byte	52,3,35,140,18,13
	.byte	'MCSW1',0
	.word	67278
	.byte	12,3,35,192,18,0,14
	.word	67410
	.byte	29
	.byte	'Ifx_SRC_GTM',0,10,243,1,3
	.word	67870
	.byte	10
	.byte	'_Ifx_SRC_HSCT',0,10,246,1,25,4,13
	.byte	'SR',0
	.word	10633
	.byte	4,2,35,0,0,14
	.word	67896
	.byte	29
	.byte	'Ifx_SRC_HSCT',0,10,249,1,3
	.word	67929
	.byte	10
	.byte	'_Ifx_SRC_HSSL',0,10,252,1,25,16,13
	.byte	'COK',0
	.word	10633
	.byte	4,2,35,0,13
	.byte	'RDI',0
	.word	10633
	.byte	4,2,35,4,13
	.byte	'ERR',0
	.word	10633
	.byte	4,2,35,8,13
	.byte	'TRG',0
	.word	10633
	.byte	4,2,35,12,0,14
	.word	67956
	.byte	29
	.byte	'Ifx_SRC_HSSL',0,10,130,2,3
	.word	68029
	.byte	18,56
	.word	618
	.byte	19,55,0,10
	.byte	'_Ifx_SRC_I2C',0,10,133,2,25,80,13
	.byte	'BREQ',0
	.word	10633
	.byte	4,2,35,0,13
	.byte	'LBREQ',0
	.word	10633
	.byte	4,2,35,4,13
	.byte	'SREQ',0
	.word	10633
	.byte	4,2,35,8,13
	.byte	'LSREQ',0
	.word	10633
	.byte	4,2,35,12,13
	.byte	'ERR',0
	.word	10633
	.byte	4,2,35,16,13
	.byte	'P',0
	.word	10633
	.byte	4,2,35,20,13
	.byte	'reserved_18',0
	.word	68056
	.byte	56,2,35,24,0,14
	.word	68065
	.byte	29
	.byte	'Ifx_SRC_I2C',0,10,142,2,3
	.word	68188
	.byte	10
	.byte	'_Ifx_SRC_LMU',0,10,145,2,25,4,13
	.byte	'SR',0
	.word	10633
	.byte	4,2,35,0,0,14
	.word	68214
	.byte	29
	.byte	'Ifx_SRC_LMU',0,10,148,2,3
	.word	68246
	.byte	10
	.byte	'_Ifx_SRC_MSC',0,10,151,2,25,20,13
	.byte	'SR0',0
	.word	10633
	.byte	4,2,35,0,13
	.byte	'SR1',0
	.word	10633
	.byte	4,2,35,4,13
	.byte	'SR2',0
	.word	10633
	.byte	4,2,35,8,13
	.byte	'SR3',0
	.word	10633
	.byte	4,2,35,12,13
	.byte	'SR4',0
	.word	10633
	.byte	4,2,35,16,0,14
	.word	68272
	.byte	29
	.byte	'Ifx_SRC_MSC',0,10,158,2,3
	.word	68357
	.byte	10
	.byte	'_Ifx_SRC_PMU',0,10,161,2,25,4,13
	.byte	'SR',0
	.word	10633
	.byte	4,2,35,0,0,14
	.word	68383
	.byte	29
	.byte	'Ifx_SRC_PMU',0,10,164,2,3
	.word	68415
	.byte	10
	.byte	'_Ifx_SRC_PSI5',0,10,167,2,25,32,13
	.byte	'SR',0
	.word	67287
	.byte	32,2,35,0,0,14
	.word	68441
	.byte	29
	.byte	'Ifx_SRC_PSI5',0,10,170,2,3
	.word	68474
	.byte	10
	.byte	'_Ifx_SRC_PSI5S',0,10,173,2,25,32,13
	.byte	'SR',0
	.word	67287
	.byte	32,2,35,0,0,14
	.word	68501
	.byte	29
	.byte	'Ifx_SRC_PSI5S',0,10,176,2,3
	.word	68535
	.byte	10
	.byte	'_Ifx_SRC_QSPI',0,10,179,2,25,24,13
	.byte	'TX',0
	.word	10633
	.byte	4,2,35,0,13
	.byte	'RX',0
	.word	10633
	.byte	4,2,35,4,13
	.byte	'ERR',0
	.word	10633
	.byte	4,2,35,8,13
	.byte	'PT',0
	.word	10633
	.byte	4,2,35,12,13
	.byte	'HC',0
	.word	10633
	.byte	4,2,35,16,13
	.byte	'U',0
	.word	10633
	.byte	4,2,35,20,0,14
	.word	68563
	.byte	29
	.byte	'Ifx_SRC_QSPI',0,10,187,2,3
	.word	68656
	.byte	10
	.byte	'_Ifx_SRC_SCR',0,10,190,2,25,4,13
	.byte	'SR',0
	.word	10633
	.byte	4,2,35,0,0,14
	.word	68683
	.byte	29
	.byte	'Ifx_SRC_SCR',0,10,193,2,3
	.word	68715
	.byte	10
	.byte	'_Ifx_SRC_SCU',0,10,196,2,25,20,13
	.byte	'DTS',0
	.word	10633
	.byte	4,2,35,0,13
	.byte	'ERU',0
	.word	67372
	.byte	16,2,35,4,0,14
	.word	68741
	.byte	29
	.byte	'Ifx_SRC_SCU',0,10,200,2,3
	.word	68787
	.byte	18,24
	.word	10633
	.byte	19,5,0,10
	.byte	'_Ifx_SRC_SENT',0,10,203,2,25,24,13
	.byte	'SR',0
	.word	68813
	.byte	24,2,35,0,0,14
	.word	68822
	.byte	29
	.byte	'Ifx_SRC_SENT',0,10,206,2,3
	.word	68855
	.byte	10
	.byte	'_Ifx_SRC_SMU',0,10,209,2,25,12,13
	.byte	'SR',0
	.word	67278
	.byte	12,2,35,0,0,14
	.word	68882
	.byte	29
	.byte	'Ifx_SRC_SMU',0,10,212,2,3
	.word	68914
	.byte	10
	.byte	'_Ifx_SRC_STM',0,10,215,2,25,8,13
	.byte	'SR0',0
	.word	10633
	.byte	4,2,35,0,13
	.byte	'SR1',0
	.word	10633
	.byte	4,2,35,4,0,14
	.word	68940
	.byte	29
	.byte	'Ifx_SRC_STM',0,10,219,2,3
	.word	68986
	.byte	10
	.byte	'_Ifx_SRC_VADCCG',0,10,222,2,25,16,13
	.byte	'SR0',0
	.word	10633
	.byte	4,2,35,0,13
	.byte	'SR1',0
	.word	10633
	.byte	4,2,35,4,13
	.byte	'SR2',0
	.word	10633
	.byte	4,2,35,8,13
	.byte	'SR3',0
	.word	10633
	.byte	4,2,35,12,0,14
	.word	69012
	.byte	29
	.byte	'Ifx_SRC_VADCCG',0,10,228,2,3
	.word	69087
	.byte	10
	.byte	'_Ifx_SRC_VADCG',0,10,231,2,25,16,13
	.byte	'SR0',0
	.word	10633
	.byte	4,2,35,0,13
	.byte	'SR1',0
	.word	10633
	.byte	4,2,35,4,13
	.byte	'SR2',0
	.word	10633
	.byte	4,2,35,8,13
	.byte	'SR3',0
	.word	10633
	.byte	4,2,35,12,0,14
	.word	69116
	.byte	29
	.byte	'Ifx_SRC_VADCG',0,10,237,2,3
	.word	69190
	.byte	10
	.byte	'_Ifx_SRC_XBAR',0,10,240,2,25,4,13
	.byte	'SRC',0
	.word	10633
	.byte	4,2,35,0,0,14
	.word	69218
	.byte	29
	.byte	'Ifx_SRC_XBAR',0,10,243,2,3
	.word	69252
	.byte	18,4
	.word	65808
	.byte	19,0,0,14
	.word	69279
	.byte	10
	.byte	'_Ifx_SRC_GAGBT',0,10,128,3,25,4,13
	.byte	'AGBT',0
	.word	69288
	.byte	4,2,35,0,0,14
	.word	69293
	.byte	29
	.byte	'Ifx_SRC_GAGBT',0,10,131,3,3
	.word	69329
	.byte	18,48
	.word	65866
	.byte	19,3,0,14
	.word	69357
	.byte	10
	.byte	'_Ifx_SRC_GASCLIN',0,10,134,3,25,48,13
	.byte	'ASCLIN',0
	.word	69366
	.byte	48,2,35,0,0,14
	.word	69371
	.byte	29
	.byte	'Ifx_SRC_GASCLIN',0,10,137,3,3
	.word	69411
	.byte	14
	.word	65953
	.byte	10
	.byte	'_Ifx_SRC_GBCU',0,10,140,3,25,4,13
	.byte	'SPB',0
	.word	69441
	.byte	4,2,35,0,0,14
	.word	69446
	.byte	29
	.byte	'Ifx_SRC_GBCU',0,10,143,3,3
	.word	69480
	.byte	18,64
	.word	66027
	.byte	19,0,0,14
	.word	69507
	.byte	10
	.byte	'_Ifx_SRC_GCAN',0,10,146,3,25,64,13
	.byte	'CAN',0
	.word	69516
	.byte	64,2,35,0,0,14
	.word	69521
	.byte	29
	.byte	'Ifx_SRC_GCAN',0,10,149,3,3
	.word	69555
	.byte	18,32
	.word	66084
	.byte	19,1,0,14
	.word	69582
	.byte	10
	.byte	'_Ifx_SRC_GCCU6',0,10,152,3,25,32,13
	.byte	'CCU6',0
	.word	69591
	.byte	32,2,35,0,0,14
	.word	69596
	.byte	29
	.byte	'Ifx_SRC_GCCU6',0,10,155,3,3
	.word	69632
	.byte	14
	.word	66191
	.byte	10
	.byte	'_Ifx_SRC_GCERBERUS',0,10,158,3,25,8,13
	.byte	'CERBERUS',0
	.word	69660
	.byte	8,2,35,0,0,14
	.word	69665
	.byte	29
	.byte	'Ifx_SRC_GCERBERUS',0,10,161,3,3
	.word	69709
	.byte	18,16
	.word	66257
	.byte	19,0,0,14
	.word	69741
	.byte	10
	.byte	'_Ifx_SRC_GCIF',0,10,164,3,25,16,13
	.byte	'CIF',0
	.word	69750
	.byte	16,2,35,0,0,14
	.word	69755
	.byte	29
	.byte	'Ifx_SRC_GCIF',0,10,167,3,3
	.word	69789
	.byte	18,8
	.word	66356
	.byte	19,1,0,14
	.word	69816
	.byte	10
	.byte	'_Ifx_SRC_GCPU',0,10,170,3,25,8,13
	.byte	'CPU',0
	.word	69825
	.byte	8,2,35,0,0,14
	.word	69830
	.byte	29
	.byte	'Ifx_SRC_GCPU',0,10,173,3,3
	.word	69864
	.byte	18,208,1
	.word	66427
	.byte	19,0,0,14
	.word	69891
	.byte	10
	.byte	'_Ifx_SRC_GDMA',0,10,176,3,25,208,1,13
	.byte	'DMA',0
	.word	69901
	.byte	208,1,2,35,0,0,14
	.word	69906
	.byte	29
	.byte	'Ifx_SRC_GDMA',0,10,179,3,3
	.word	69942
	.byte	14
	.word	66520
	.byte	14
	.word	66520
	.byte	14
	.word	66520
	.byte	10
	.byte	'_Ifx_SRC_GDSADC',0,10,182,3,25,32,13
	.byte	'DSADC0',0
	.word	69969
	.byte	8,2,35,0,13
	.byte	'reserved_8',0
	.word	4641
	.byte	8,2,35,8,13
	.byte	'DSADC2',0
	.word	69974
	.byte	8,2,35,16,13
	.byte	'DSADC3',0
	.word	69979
	.byte	8,2,35,24,0,14
	.word	69984
	.byte	29
	.byte	'Ifx_SRC_GDSADC',0,10,188,3,3
	.word	70075
	.byte	18,4
	.word	66596
	.byte	19,0,0,14
	.word	70104
	.byte	10
	.byte	'_Ifx_SRC_GEMEM',0,10,191,3,25,4,13
	.byte	'EMEM',0
	.word	70113
	.byte	4,2,35,0,0,14
	.word	70118
	.byte	29
	.byte	'Ifx_SRC_GEMEM',0,10,194,3,3
	.word	70154
	.byte	18,80
	.word	66656
	.byte	19,0,0,14
	.word	70182
	.byte	10
	.byte	'_Ifx_SRC_GERAY',0,10,197,3,25,80,13
	.byte	'ERAY',0
	.word	70191
	.byte	80,2,35,0,0,14
	.word	70196
	.byte	29
	.byte	'Ifx_SRC_GERAY',0,10,200,3,3
	.word	70232
	.byte	18,4
	.word	66810
	.byte	19,0,0,14
	.word	70260
	.byte	10
	.byte	'_Ifx_SRC_GETH',0,10,203,3,25,4,13
	.byte	'ETH',0
	.word	70269
	.byte	4,2,35,0,0,14
	.word	70274
	.byte	29
	.byte	'Ifx_SRC_GETH',0,10,206,3,3
	.word	70308
	.byte	18,4
	.word	66868
	.byte	19,0,0,14
	.word	70335
	.byte	10
	.byte	'_Ifx_SRC_GFCE',0,10,209,3,25,4,13
	.byte	'FCE',0
	.word	70344
	.byte	4,2,35,0,0,14
	.word	70349
	.byte	29
	.byte	'Ifx_SRC_GFCE',0,10,212,3,3
	.word	70383
	.byte	18,12
	.word	66926
	.byte	19,0,0,14
	.word	70410
	.byte	10
	.byte	'_Ifx_SRC_GFFT',0,10,215,3,25,12,13
	.byte	'FFT',0
	.word	70419
	.byte	12,2,35,0,0,14
	.word	70424
	.byte	29
	.byte	'Ifx_SRC_GFFT',0,10,218,3,3
	.word	70458
	.byte	18,64
	.word	67012
	.byte	19,1,0,14
	.word	70485
	.byte	10
	.byte	'_Ifx_SRC_GGPSR',0,10,221,3,25,64,13
	.byte	'GPSR',0
	.word	70494
	.byte	64,2,35,0,0,14
	.word	70499
	.byte	29
	.byte	'Ifx_SRC_GGPSR',0,10,224,3,3
	.word	70535
	.byte	18,48
	.word	67133
	.byte	19,0,0,14
	.word	70563
	.byte	10
	.byte	'_Ifx_SRC_GGPT12',0,10,227,3,25,48,13
	.byte	'GPT12',0
	.word	70572
	.byte	48,2,35,0,0,14
	.word	70577
	.byte	29
	.byte	'Ifx_SRC_GGPT12',0,10,230,3,3
	.word	70615
	.byte	18,204,18
	.word	67410
	.byte	19,0,0,14
	.word	70644
	.byte	10
	.byte	'_Ifx_SRC_GGTM',0,10,233,3,25,204,18,13
	.byte	'GTM',0
	.word	70654
	.byte	204,18,2,35,0,0,14
	.word	70659
	.byte	29
	.byte	'Ifx_SRC_GGTM',0,10,236,3,3
	.word	70695
	.byte	18,4
	.word	67896
	.byte	19,0,0,14
	.word	70722
	.byte	10
	.byte	'_Ifx_SRC_GHSCT',0,10,239,3,25,4,13
	.byte	'HSCT',0
	.word	70731
	.byte	4,2,35,0,0,14
	.word	70736
	.byte	29
	.byte	'Ifx_SRC_GHSCT',0,10,242,3,3
	.word	70772
	.byte	18,64
	.word	67956
	.byte	19,3,0,14
	.word	70800
	.byte	10
	.byte	'_Ifx_SRC_GHSSL',0,10,245,3,25,68,13
	.byte	'HSSL',0
	.word	70809
	.byte	64,2,35,0,13
	.byte	'EXI',0
	.word	10633
	.byte	4,2,35,64,0,14
	.word	70814
	.byte	29
	.byte	'Ifx_SRC_GHSSL',0,10,249,3,3
	.word	70863
	.byte	18,80
	.word	68065
	.byte	19,0,0,14
	.word	70891
	.byte	10
	.byte	'_Ifx_SRC_GI2C',0,10,252,3,25,80,13
	.byte	'I2C',0
	.word	70900
	.byte	80,2,35,0,0,14
	.word	70905
	.byte	29
	.byte	'Ifx_SRC_GI2C',0,10,255,3,3
	.word	70939
	.byte	18,4
	.word	68214
	.byte	19,0,0,14
	.word	70966
	.byte	10
	.byte	'_Ifx_SRC_GLMU',0,10,130,4,25,4,13
	.byte	'LMU',0
	.word	70975
	.byte	4,2,35,0,0,14
	.word	70980
	.byte	29
	.byte	'Ifx_SRC_GLMU',0,10,133,4,3
	.word	71014
	.byte	18,40
	.word	68272
	.byte	19,1,0,14
	.word	71041
	.byte	10
	.byte	'_Ifx_SRC_GMSC',0,10,136,4,25,40,13
	.byte	'MSC',0
	.word	71050
	.byte	40,2,35,0,0,14
	.word	71055
	.byte	29
	.byte	'Ifx_SRC_GMSC',0,10,139,4,3
	.word	71089
	.byte	18,8
	.word	68383
	.byte	19,1,0,14
	.word	71116
	.byte	10
	.byte	'_Ifx_SRC_GPMU',0,10,142,4,25,8,13
	.byte	'PMU',0
	.word	71125
	.byte	8,2,35,0,0,14
	.word	71130
	.byte	29
	.byte	'Ifx_SRC_GPMU',0,10,145,4,3
	.word	71164
	.byte	18,32
	.word	68441
	.byte	19,0,0,14
	.word	71191
	.byte	10
	.byte	'_Ifx_SRC_GPSI5',0,10,148,4,25,32,13
	.byte	'PSI5',0
	.word	71200
	.byte	32,2,35,0,0,14
	.word	71205
	.byte	29
	.byte	'Ifx_SRC_GPSI5',0,10,151,4,3
	.word	71241
	.byte	18,32
	.word	68501
	.byte	19,0,0,14
	.word	71269
	.byte	10
	.byte	'_Ifx_SRC_GPSI5S',0,10,154,4,25,32,13
	.byte	'PSI5S',0
	.word	71278
	.byte	32,2,35,0,0,14
	.word	71283
	.byte	29
	.byte	'Ifx_SRC_GPSI5S',0,10,157,4,3
	.word	71321
	.byte	18,96
	.word	68563
	.byte	19,3,0,14
	.word	71350
	.byte	10
	.byte	'_Ifx_SRC_GQSPI',0,10,160,4,25,96,13
	.byte	'QSPI',0
	.word	71359
	.byte	96,2,35,0,0,14
	.word	71364
	.byte	29
	.byte	'Ifx_SRC_GQSPI',0,10,163,4,3
	.word	71400
	.byte	18,4
	.word	68683
	.byte	19,0,0,14
	.word	71428
	.byte	10
	.byte	'_Ifx_SRC_GSCR',0,10,166,4,25,4,13
	.byte	'SCR',0
	.word	71437
	.byte	4,2,35,0,0,14
	.word	71442
	.byte	29
	.byte	'Ifx_SRC_GSCR',0,10,169,4,3
	.word	71476
	.byte	14
	.word	68741
	.byte	10
	.byte	'_Ifx_SRC_GSCU',0,10,172,4,25,20,13
	.byte	'SCU',0
	.word	71503
	.byte	20,2,35,0,0,14
	.word	71508
	.byte	29
	.byte	'Ifx_SRC_GSCU',0,10,175,4,3
	.word	71542
	.byte	18,24
	.word	68822
	.byte	19,0,0,14
	.word	71569
	.byte	10
	.byte	'_Ifx_SRC_GSENT',0,10,178,4,25,24,13
	.byte	'SENT',0
	.word	71578
	.byte	24,2,35,0,0,14
	.word	71583
	.byte	29
	.byte	'Ifx_SRC_GSENT',0,10,181,4,3
	.word	71619
	.byte	18,12
	.word	68882
	.byte	19,0,0,14
	.word	71647
	.byte	10
	.byte	'_Ifx_SRC_GSMU',0,10,184,4,25,12,13
	.byte	'SMU',0
	.word	71656
	.byte	12,2,35,0,0,14
	.word	71661
	.byte	29
	.byte	'Ifx_SRC_GSMU',0,10,187,4,3
	.word	71695
	.byte	18,16
	.word	68940
	.byte	19,1,0,14
	.word	71722
	.byte	10
	.byte	'_Ifx_SRC_GSTM',0,10,190,4,25,16,13
	.byte	'STM',0
	.word	71731
	.byte	16,2,35,0,0,14
	.word	71736
	.byte	29
	.byte	'Ifx_SRC_GSTM',0,10,193,4,3
	.word	71770
	.byte	18,64
	.word	69116
	.byte	19,3,0,14
	.word	71797
	.byte	18,224,1
	.word	618
	.byte	19,223,1,0,18,32
	.word	69012
	.byte	19,1,0,14
	.word	71822
	.byte	10
	.byte	'_Ifx_SRC_GVADC',0,10,196,4,25,192,2,13
	.byte	'G',0
	.word	71806
	.byte	64,2,35,0,13
	.byte	'reserved_40',0
	.word	71811
	.byte	224,1,2,35,64,13
	.byte	'CG',0
	.word	71831
	.byte	32,3,35,160,2,0,14
	.word	71836
	.byte	29
	.byte	'Ifx_SRC_GVADC',0,10,201,4,3
	.word	71905
	.byte	14
	.word	69218
	.byte	10
	.byte	'_Ifx_SRC_GXBAR',0,10,204,4,25,4,13
	.byte	'XBAR',0
	.word	71933
	.byte	4,2,35,0,0,14
	.word	71938
	.byte	29
	.byte	'Ifx_SRC_GXBAR',0,10,207,4,3
	.word	71974
	.byte	10
	.byte	'_Ifx_STM_ACCEN0_Bits',0,20,45,16,4,11
	.byte	'EN0',0,1
	.word	618
	.byte	1,7,2,35,0,11
	.byte	'EN1',0,1
	.word	618
	.byte	1,6,2,35,0,11
	.byte	'EN2',0,1
	.word	618
	.byte	1,5,2,35,0,11
	.byte	'EN3',0,1
	.word	618
	.byte	1,4,2,35,0,11
	.byte	'EN4',0,1
	.word	618
	.byte	1,3,2,35,0,11
	.byte	'EN5',0,1
	.word	618
	.byte	1,2,2,35,0,11
	.byte	'EN6',0,1
	.word	618
	.byte	1,1,2,35,0,11
	.byte	'EN7',0,1
	.word	618
	.byte	1,0,2,35,0,11
	.byte	'EN8',0,1
	.word	618
	.byte	1,7,2,35,1,11
	.byte	'EN9',0,1
	.word	618
	.byte	1,6,2,35,1,11
	.byte	'EN10',0,1
	.word	618
	.byte	1,5,2,35,1,11
	.byte	'EN11',0,1
	.word	618
	.byte	1,4,2,35,1,11
	.byte	'EN12',0,1
	.word	618
	.byte	1,3,2,35,1,11
	.byte	'EN13',0,1
	.word	618
	.byte	1,2,2,35,1,11
	.byte	'EN14',0,1
	.word	618
	.byte	1,1,2,35,1,11
	.byte	'EN15',0,1
	.word	618
	.byte	1,0,2,35,1,11
	.byte	'EN16',0,1
	.word	618
	.byte	1,7,2,35,2,11
	.byte	'EN17',0,1
	.word	618
	.byte	1,6,2,35,2,11
	.byte	'EN18',0,1
	.word	618
	.byte	1,5,2,35,2,11
	.byte	'EN19',0,1
	.word	618
	.byte	1,4,2,35,2,11
	.byte	'EN20',0,1
	.word	618
	.byte	1,3,2,35,2,11
	.byte	'EN21',0,1
	.word	618
	.byte	1,2,2,35,2,11
	.byte	'EN22',0,1
	.word	618
	.byte	1,1,2,35,2,11
	.byte	'EN23',0,1
	.word	618
	.byte	1,0,2,35,2,11
	.byte	'EN24',0,1
	.word	618
	.byte	1,7,2,35,3,11
	.byte	'EN25',0,1
	.word	618
	.byte	1,6,2,35,3,11
	.byte	'EN26',0,1
	.word	618
	.byte	1,5,2,35,3,11
	.byte	'EN27',0,1
	.word	618
	.byte	1,4,2,35,3,11
	.byte	'EN28',0,1
	.word	618
	.byte	1,3,2,35,3,11
	.byte	'EN29',0,1
	.word	618
	.byte	1,2,2,35,3,11
	.byte	'EN30',0,1
	.word	618
	.byte	1,1,2,35,3,11
	.byte	'EN31',0,1
	.word	618
	.byte	1,0,2,35,3,0,29
	.byte	'Ifx_STM_ACCEN0_Bits',0,20,79,3
	.word	72002
	.byte	10
	.byte	'_Ifx_STM_ACCEN1_Bits',0,20,82,16,4,11
	.byte	'reserved_0',0,4
	.word	443
	.byte	32,0,2,35,0,0,29
	.byte	'Ifx_STM_ACCEN1_Bits',0,20,85,3
	.word	72559
	.byte	10
	.byte	'_Ifx_STM_CAP_Bits',0,20,88,16,4,11
	.byte	'STMCAP63_32',0,4
	.word	443
	.byte	32,0,2,35,0,0,29
	.byte	'Ifx_STM_CAP_Bits',0,20,91,3
	.word	72636
	.byte	10
	.byte	'_Ifx_STM_CAPSV_Bits',0,20,94,16,4,11
	.byte	'STMCAP63_32',0,4
	.word	443
	.byte	32,0,2,35,0,0,29
	.byte	'Ifx_STM_CAPSV_Bits',0,20,97,3
	.word	72708
	.byte	10
	.byte	'_Ifx_STM_CLC_Bits',0,20,100,16,4,11
	.byte	'DISR',0,1
	.word	618
	.byte	1,7,2,35,0,11
	.byte	'DISS',0,1
	.word	618
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	618
	.byte	1,5,2,35,0,11
	.byte	'EDIS',0,1
	.word	618
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,4
	.word	443
	.byte	28,0,2,35,0,0,29
	.byte	'Ifx_STM_CLC_Bits',0,20,107,3
	.word	72784
	.byte	10
	.byte	'_Ifx_STM_CMCON_Bits',0,20,110,16,4,11
	.byte	'MSIZE0',0,1
	.word	618
	.byte	5,3,2,35,0,11
	.byte	'reserved_5',0,1
	.word	618
	.byte	3,0,2,35,0,11
	.byte	'MSTART0',0,1
	.word	618
	.byte	5,3,2,35,1,11
	.byte	'reserved_13',0,1
	.word	618
	.byte	3,0,2,35,1,11
	.byte	'MSIZE1',0,1
	.word	618
	.byte	5,3,2,35,2,11
	.byte	'reserved_21',0,1
	.word	618
	.byte	3,0,2,35,2,11
	.byte	'MSTART1',0,1
	.word	618
	.byte	5,3,2,35,3,11
	.byte	'reserved_29',0,1
	.word	618
	.byte	3,0,2,35,3,0,29
	.byte	'Ifx_STM_CMCON_Bits',0,20,120,3
	.word	72925
	.byte	10
	.byte	'_Ifx_STM_CMP_Bits',0,20,123,16,4,11
	.byte	'CMPVAL',0,4
	.word	443
	.byte	32,0,2,35,0,0,29
	.byte	'Ifx_STM_CMP_Bits',0,20,126,3
	.word	73143
	.byte	10
	.byte	'_Ifx_STM_ICR_Bits',0,20,129,1,16,4,11
	.byte	'CMP0EN',0,1
	.word	618
	.byte	1,7,2,35,0,11
	.byte	'CMP0IR',0,1
	.word	618
	.byte	1,6,2,35,0,11
	.byte	'CMP0OS',0,1
	.word	618
	.byte	1,5,2,35,0,11
	.byte	'reserved_3',0,1
	.word	618
	.byte	1,4,2,35,0,11
	.byte	'CMP1EN',0,1
	.word	618
	.byte	1,3,2,35,0,11
	.byte	'CMP1IR',0,1
	.word	618
	.byte	1,2,2,35,0,11
	.byte	'CMP1OS',0,1
	.word	618
	.byte	1,1,2,35,0,11
	.byte	'reserved_7',0,4
	.word	443
	.byte	25,0,2,35,0,0,29
	.byte	'Ifx_STM_ICR_Bits',0,20,139,1,3
	.word	73210
	.byte	10
	.byte	'_Ifx_STM_ID_Bits',0,20,142,1,16,4,11
	.byte	'MODREV',0,1
	.word	618
	.byte	8,0,2,35,0,11
	.byte	'MODTYPE',0,1
	.word	618
	.byte	8,0,2,35,1,11
	.byte	'MODNUMBER',0,2
	.word	635
	.byte	16,0,2,35,2,0,29
	.byte	'Ifx_STM_ID_Bits',0,20,147,1,3
	.word	73413
	.byte	10
	.byte	'_Ifx_STM_ISCR_Bits',0,20,150,1,16,4,11
	.byte	'CMP0IRR',0,1
	.word	618
	.byte	1,7,2,35,0,11
	.byte	'CMP0IRS',0,1
	.word	618
	.byte	1,6,2,35,0,11
	.byte	'CMP1IRR',0,1
	.word	618
	.byte	1,5,2,35,0,11
	.byte	'CMP1IRS',0,1
	.word	618
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,4
	.word	443
	.byte	28,0,2,35,0,0,29
	.byte	'Ifx_STM_ISCR_Bits',0,20,157,1,3
	.word	73520
	.byte	10
	.byte	'_Ifx_STM_KRST0_Bits',0,20,160,1,16,4,11
	.byte	'RST',0,1
	.word	618
	.byte	1,7,2,35,0,11
	.byte	'RSTSTAT',0,1
	.word	618
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,4
	.word	443
	.byte	30,0,2,35,0,0,29
	.byte	'Ifx_STM_KRST0_Bits',0,20,165,1,3
	.word	73671
	.byte	10
	.byte	'_Ifx_STM_KRST1_Bits',0,20,168,1,16,4,11
	.byte	'RST',0,1
	.word	618
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,4
	.word	443
	.byte	31,0,2,35,0,0,29
	.byte	'Ifx_STM_KRST1_Bits',0,20,172,1,3
	.word	73782
	.byte	10
	.byte	'_Ifx_STM_KRSTCLR_Bits',0,20,175,1,16,4,11
	.byte	'CLR',0,1
	.word	618
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,4
	.word	443
	.byte	31,0,2,35,0,0,29
	.byte	'Ifx_STM_KRSTCLR_Bits',0,20,179,1,3
	.word	73874
	.byte	10
	.byte	'_Ifx_STM_OCS_Bits',0,20,182,1,16,4,11
	.byte	'reserved_0',0,4
	.word	443
	.byte	24,8,2,35,0,11
	.byte	'SUS',0,1
	.word	618
	.byte	4,4,2,35,3,11
	.byte	'SUS_P',0,1
	.word	618
	.byte	1,3,2,35,3,11
	.byte	'SUSSTA',0,1
	.word	618
	.byte	1,2,2,35,3,11
	.byte	'reserved_30',0,1
	.word	618
	.byte	2,0,2,35,3,0,29
	.byte	'Ifx_STM_OCS_Bits',0,20,189,1,3
	.word	73970
	.byte	10
	.byte	'_Ifx_STM_TIM0_Bits',0,20,192,1,16,4,11
	.byte	'STM31_0',0,4
	.word	443
	.byte	32,0,2,35,0,0,29
	.byte	'Ifx_STM_TIM0_Bits',0,20,195,1,3
	.word	74116
	.byte	10
	.byte	'_Ifx_STM_TIM0SV_Bits',0,20,198,1,16,4,11
	.byte	'STM31_0',0,4
	.word	443
	.byte	32,0,2,35,0,0,29
	.byte	'Ifx_STM_TIM0SV_Bits',0,20,201,1,3
	.word	74188
	.byte	10
	.byte	'_Ifx_STM_TIM1_Bits',0,20,204,1,16,4,11
	.byte	'STM35_4',0,4
	.word	443
	.byte	32,0,2,35,0,0,29
	.byte	'Ifx_STM_TIM1_Bits',0,20,207,1,3
	.word	74264
	.byte	10
	.byte	'_Ifx_STM_TIM2_Bits',0,20,210,1,16,4,11
	.byte	'STM39_8',0,4
	.word	443
	.byte	32,0,2,35,0,0,29
	.byte	'Ifx_STM_TIM2_Bits',0,20,213,1,3
	.word	74336
	.byte	10
	.byte	'_Ifx_STM_TIM3_Bits',0,20,216,1,16,4,11
	.byte	'STM43_12',0,4
	.word	443
	.byte	32,0,2,35,0,0,29
	.byte	'Ifx_STM_TIM3_Bits',0,20,219,1,3
	.word	74408
	.byte	10
	.byte	'_Ifx_STM_TIM4_Bits',0,20,222,1,16,4,11
	.byte	'STM47_16',0,4
	.word	443
	.byte	32,0,2,35,0,0,29
	.byte	'Ifx_STM_TIM4_Bits',0,20,225,1,3
	.word	74481
	.byte	10
	.byte	'_Ifx_STM_TIM5_Bits',0,20,228,1,16,4,11
	.byte	'STM51_20',0,4
	.word	443
	.byte	32,0,2,35,0,0,29
	.byte	'Ifx_STM_TIM5_Bits',0,20,231,1,3
	.word	74554
	.byte	10
	.byte	'_Ifx_STM_TIM6_Bits',0,20,234,1,16,4,11
	.byte	'STM63_32',0,4
	.word	443
	.byte	32,0,2,35,0,0,29
	.byte	'Ifx_STM_TIM6_Bits',0,20,237,1,3
	.word	74627
	.byte	12,20,245,1,9,4,13
	.byte	'U',0
	.word	443
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	459
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	72002
	.byte	4,2,35,0,0,29
	.byte	'Ifx_STM_ACCEN0',0,20,250,1,3
	.word	74700
	.byte	12,20,253,1,9,4,13
	.byte	'U',0
	.word	443
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	459
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	72559
	.byte	4,2,35,0,0,29
	.byte	'Ifx_STM_ACCEN1',0,20,130,2,3
	.word	74764
	.byte	12,20,133,2,9,4,13
	.byte	'U',0
	.word	443
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	459
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	72636
	.byte	4,2,35,0,0,29
	.byte	'Ifx_STM_CAP',0,20,138,2,3
	.word	74828
	.byte	12,20,141,2,9,4,13
	.byte	'U',0
	.word	443
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	459
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	72708
	.byte	4,2,35,0,0,29
	.byte	'Ifx_STM_CAPSV',0,20,146,2,3
	.word	74889
	.byte	12,20,149,2,9,4,13
	.byte	'U',0
	.word	443
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	459
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	72784
	.byte	4,2,35,0,0,29
	.byte	'Ifx_STM_CLC',0,20,154,2,3
	.word	74952
	.byte	12,20,157,2,9,4,13
	.byte	'U',0
	.word	443
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	459
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	72925
	.byte	4,2,35,0,0,29
	.byte	'Ifx_STM_CMCON',0,20,162,2,3
	.word	75013
	.byte	12,20,165,2,9,4,13
	.byte	'U',0
	.word	443
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	459
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	73143
	.byte	4,2,35,0,0,29
	.byte	'Ifx_STM_CMP',0,20,170,2,3
	.word	75076
	.byte	12,20,173,2,9,4,13
	.byte	'U',0
	.word	443
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	459
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	73210
	.byte	4,2,35,0,0,29
	.byte	'Ifx_STM_ICR',0,20,178,2,3
	.word	75137
	.byte	12,20,181,2,9,4,13
	.byte	'U',0
	.word	443
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	459
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	73413
	.byte	4,2,35,0,0,29
	.byte	'Ifx_STM_ID',0,20,186,2,3
	.word	75198
	.byte	12,20,189,2,9,4,13
	.byte	'U',0
	.word	443
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	459
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	73520
	.byte	4,2,35,0,0,29
	.byte	'Ifx_STM_ISCR',0,20,194,2,3
	.word	75258
	.byte	12,20,197,2,9,4,13
	.byte	'U',0
	.word	443
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	459
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	73671
	.byte	4,2,35,0,0,29
	.byte	'Ifx_STM_KRST0',0,20,202,2,3
	.word	75320
	.byte	12,20,205,2,9,4,13
	.byte	'U',0
	.word	443
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	459
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	73782
	.byte	4,2,35,0,0,29
	.byte	'Ifx_STM_KRST1',0,20,210,2,3
	.word	75383
	.byte	12,20,213,2,9,4,13
	.byte	'U',0
	.word	443
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	459
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	73874
	.byte	4,2,35,0,0,29
	.byte	'Ifx_STM_KRSTCLR',0,20,218,2,3
	.word	75446
	.byte	12,20,221,2,9,4,13
	.byte	'U',0
	.word	443
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	459
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	73970
	.byte	4,2,35,0,0,29
	.byte	'Ifx_STM_OCS',0,20,226,2,3
	.word	75511
	.byte	12,20,229,2,9,4,13
	.byte	'U',0
	.word	443
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	459
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	74116
	.byte	4,2,35,0,0,29
	.byte	'Ifx_STM_TIM0',0,20,234,2,3
	.word	75572
	.byte	12,20,237,2,9,4,13
	.byte	'U',0
	.word	443
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	459
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	74188
	.byte	4,2,35,0,0,29
	.byte	'Ifx_STM_TIM0SV',0,20,242,2,3
	.word	75634
	.byte	12,20,245,2,9,4,13
	.byte	'U',0
	.word	443
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	459
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	74264
	.byte	4,2,35,0,0,29
	.byte	'Ifx_STM_TIM1',0,20,250,2,3
	.word	75698
	.byte	12,20,253,2,9,4,13
	.byte	'U',0
	.word	443
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	459
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	74336
	.byte	4,2,35,0,0,29
	.byte	'Ifx_STM_TIM2',0,20,130,3,3
	.word	75760
	.byte	12,20,133,3,9,4,13
	.byte	'U',0
	.word	443
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	459
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	74408
	.byte	4,2,35,0,0,29
	.byte	'Ifx_STM_TIM3',0,20,138,3,3
	.word	75822
	.byte	12,20,141,3,9,4,13
	.byte	'U',0
	.word	443
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	459
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	74481
	.byte	4,2,35,0,0,29
	.byte	'Ifx_STM_TIM4',0,20,146,3,3
	.word	75884
	.byte	12,20,149,3,9,4,13
	.byte	'U',0
	.word	443
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	459
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	74554
	.byte	4,2,35,0,0,29
	.byte	'Ifx_STM_TIM5',0,20,154,3,3
	.word	75946
	.byte	12,20,157,3,9,4,13
	.byte	'U',0
	.word	443
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	459
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	74627
	.byte	4,2,35,0,0,29
	.byte	'Ifx_STM_TIM6',0,20,162,3,3
	.word	76008
	.byte	15,5,144,1,9,1,16
	.byte	'IfxCpu_CounterMode_normal',0,0,16
	.byte	'IfxCpu_CounterMode_task',0,1,0,29
	.byte	'IfxCpu_CounterMode',0,5,148,1,3
	.word	76070
	.byte	31,5,160,1,9,6,13
	.byte	'counter',0
	.word	1585
	.byte	4,2,35,0,13
	.byte	'overlfow',0
	.word	618
	.byte	1,2,35,4,0,29
	.byte	'IfxCpu_Counter',0,5,164,1,3
	.word	76159
	.byte	31,5,172,1,9,32,13
	.byte	'instruction',0
	.word	76159
	.byte	6,2,35,0,13
	.byte	'clock',0
	.word	76159
	.byte	6,2,35,6,13
	.byte	'counter1',0
	.word	76159
	.byte	6,2,35,12,13
	.byte	'counter2',0
	.word	76159
	.byte	6,2,35,18,13
	.byte	'counter3',0
	.word	76159
	.byte	6,2,35,24,0,29
	.byte	'IfxCpu_Perf',0,5,179,1,3
	.word	76225
	.byte	10
	.byte	'_Ifx_FLASH_ACCEN0_Bits',0,21,45,16,4,11
	.byte	'EN0',0,1
	.word	618
	.byte	1,7,2,35,0,11
	.byte	'EN1',0,1
	.word	618
	.byte	1,6,2,35,0,11
	.byte	'EN2',0,1
	.word	618
	.byte	1,5,2,35,0,11
	.byte	'EN3',0,1
	.word	618
	.byte	1,4,2,35,0,11
	.byte	'EN4',0,1
	.word	618
	.byte	1,3,2,35,0,11
	.byte	'EN5',0,1
	.word	618
	.byte	1,2,2,35,0,11
	.byte	'EN6',0,1
	.word	618
	.byte	1,1,2,35,0,11
	.byte	'EN7',0,1
	.word	618
	.byte	1,0,2,35,0,11
	.byte	'EN8',0,1
	.word	618
	.byte	1,7,2,35,1,11
	.byte	'EN9',0,1
	.word	618
	.byte	1,6,2,35,1,11
	.byte	'EN10',0,1
	.word	618
	.byte	1,5,2,35,1,11
	.byte	'EN11',0,1
	.word	618
	.byte	1,4,2,35,1,11
	.byte	'EN12',0,1
	.word	618
	.byte	1,3,2,35,1,11
	.byte	'EN13',0,1
	.word	618
	.byte	1,2,2,35,1,11
	.byte	'EN14',0,1
	.word	618
	.byte	1,1,2,35,1,11
	.byte	'EN15',0,1
	.word	618
	.byte	1,0,2,35,1,11
	.byte	'EN16',0,1
	.word	618
	.byte	1,7,2,35,2,11
	.byte	'EN17',0,1
	.word	618
	.byte	1,6,2,35,2,11
	.byte	'EN18',0,1
	.word	618
	.byte	1,5,2,35,2,11
	.byte	'EN19',0,1
	.word	618
	.byte	1,4,2,35,2,11
	.byte	'EN20',0,1
	.word	618
	.byte	1,3,2,35,2,11
	.byte	'EN21',0,1
	.word	618
	.byte	1,2,2,35,2,11
	.byte	'EN22',0,1
	.word	618
	.byte	1,1,2,35,2,11
	.byte	'EN23',0,1
	.word	618
	.byte	1,0,2,35,2,11
	.byte	'EN24',0,1
	.word	618
	.byte	1,7,2,35,3,11
	.byte	'EN25',0,1
	.word	618
	.byte	1,6,2,35,3,11
	.byte	'EN26',0,1
	.word	618
	.byte	1,5,2,35,3,11
	.byte	'EN27',0,1
	.word	618
	.byte	1,4,2,35,3,11
	.byte	'EN28',0,1
	.word	618
	.byte	1,3,2,35,3,11
	.byte	'EN29',0,1
	.word	618
	.byte	1,2,2,35,3,11
	.byte	'EN30',0,1
	.word	618
	.byte	1,1,2,35,3,11
	.byte	'EN31',0,1
	.word	618
	.byte	1,0,2,35,3,0,29
	.byte	'Ifx_FLASH_ACCEN0_Bits',0,21,79,3
	.word	76343
	.byte	10
	.byte	'_Ifx_FLASH_ACCEN1_Bits',0,21,82,16,4,11
	.byte	'reserved_0',0,4
	.word	443
	.byte	32,0,2,35,0,0,29
	.byte	'Ifx_FLASH_ACCEN1_Bits',0,21,85,3
	.word	76904
	.byte	10
	.byte	'_Ifx_FLASH_CBAB_CFG_Bits',0,21,88,16,4,11
	.byte	'SEL',0,1
	.word	618
	.byte	6,2,2,35,0,11
	.byte	'reserved_6',0,1
	.word	618
	.byte	2,0,2,35,0,11
	.byte	'CLR',0,1
	.word	618
	.byte	1,7,2,35,1,11
	.byte	'DIS',0,1
	.word	618
	.byte	1,6,2,35,1,11
	.byte	'reserved_10',0,4
	.word	443
	.byte	22,0,2,35,0,0,29
	.byte	'Ifx_FLASH_CBAB_CFG_Bits',0,21,95,3
	.word	76985
	.byte	10
	.byte	'_Ifx_FLASH_CBAB_STAT_Bits',0,21,98,16,4,11
	.byte	'VLD0',0,1
	.word	618
	.byte	1,7,2,35,0,11
	.byte	'VLD1',0,1
	.word	618
	.byte	1,6,2,35,0,11
	.byte	'VLD2',0,1
	.word	618
	.byte	1,5,2,35,0,11
	.byte	'VLD3',0,1
	.word	618
	.byte	1,4,2,35,0,11
	.byte	'VLD4',0,1
	.word	618
	.byte	1,3,2,35,0,11
	.byte	'VLD5',0,1
	.word	618
	.byte	1,2,2,35,0,11
	.byte	'VLD6',0,1
	.word	618
	.byte	1,1,2,35,0,11
	.byte	'VLD7',0,1
	.word	618
	.byte	1,0,2,35,0,11
	.byte	'VLD8',0,1
	.word	618
	.byte	1,7,2,35,1,11
	.byte	'VLD9',0,1
	.word	618
	.byte	1,6,2,35,1,11
	.byte	'reserved_10',0,4
	.word	443
	.byte	22,0,2,35,0,0,29
	.byte	'Ifx_FLASH_CBAB_STAT_Bits',0,21,111,3
	.word	77138
	.byte	10
	.byte	'_Ifx_FLASH_CBAB_TOP_Bits',0,21,114,16,4,11
	.byte	'reserved_0',0,1
	.word	618
	.byte	5,3,2,35,0,11
	.byte	'ADDR',0,4
	.word	443
	.byte	19,8,2,35,0,11
	.byte	'ERR',0,1
	.word	618
	.byte	6,2,2,35,3,11
	.byte	'VLD',0,1
	.word	618
	.byte	1,1,2,35,3,11
	.byte	'CLR',0,1
	.word	618
	.byte	1,0,2,35,3,0,29
	.byte	'Ifx_FLASH_CBAB_TOP_Bits',0,21,121,3
	.word	77386
	.byte	10
	.byte	'_Ifx_FLASH_COMM0_Bits',0,21,124,16,4,11
	.byte	'STATUS',0,1
	.word	618
	.byte	8,0,2,35,0,11
	.byte	'reserved_8',0,4
	.word	443
	.byte	24,0,2,35,0,0,29
	.byte	'Ifx_FLASH_COMM0_Bits',0,21,128,1,3
	.word	77532
	.byte	10
	.byte	'_Ifx_FLASH_COMM1_Bits',0,21,131,1,16,4,11
	.byte	'STATUS',0,1
	.word	618
	.byte	8,0,2,35,0,11
	.byte	'DATA',0,1
	.word	618
	.byte	8,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	635
	.byte	16,0,2,35,2,0,29
	.byte	'Ifx_FLASH_COMM1_Bits',0,21,136,1,3
	.word	77630
	.byte	10
	.byte	'_Ifx_FLASH_COMM2_Bits',0,21,139,1,16,4,11
	.byte	'STATUS',0,1
	.word	618
	.byte	8,0,2,35,0,11
	.byte	'DATA',0,1
	.word	618
	.byte	8,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	635
	.byte	16,0,2,35,2,0,29
	.byte	'Ifx_FLASH_COMM2_Bits',0,21,144,1,3
	.word	77746
	.byte	10
	.byte	'_Ifx_FLASH_ECCRD_Bits',0,21,147,1,16,4,11
	.byte	'RCODE',0,4
	.word	443
	.byte	22,10,2,35,0,11
	.byte	'reserved_22',0,2
	.word	635
	.byte	8,2,2,35,2,11
	.byte	'EDCERRINJ',0,1
	.word	618
	.byte	1,1,2,35,3,11
	.byte	'ECCORDIS',0,1
	.word	618
	.byte	1,0,2,35,3,0,29
	.byte	'Ifx_FLASH_ECCRD_Bits',0,21,153,1,3
	.word	77862
	.byte	10
	.byte	'_Ifx_FLASH_ECCRP_Bits',0,21,156,1,16,4,11
	.byte	'RCODE',0,4
	.word	443
	.byte	22,10,2,35,0,11
	.byte	'reserved_22',0,2
	.word	635
	.byte	8,2,2,35,2,11
	.byte	'EDCERRINJ',0,1
	.word	618
	.byte	1,1,2,35,3,11
	.byte	'ECCORDIS',0,1
	.word	618
	.byte	1,0,2,35,3,0,29
	.byte	'Ifx_FLASH_ECCRP_Bits',0,21,162,1,3
	.word	78002
	.byte	10
	.byte	'_Ifx_FLASH_ECCW_Bits',0,21,165,1,16,4,11
	.byte	'WCODE',0,4
	.word	443
	.byte	22,10,2,35,0,11
	.byte	'reserved_22',0,2
	.word	635
	.byte	8,2,2,35,2,11
	.byte	'DECENCDIS',0,1
	.word	618
	.byte	1,1,2,35,3,11
	.byte	'PECENCDIS',0,1
	.word	618
	.byte	1,0,2,35,3,0,29
	.byte	'Ifx_FLASH_ECCW_Bits',0,21,171,1,3
	.word	78142
	.byte	10
	.byte	'_Ifx_FLASH_FCON_Bits',0,21,174,1,16,4,11
	.byte	'WSPFLASH',0,1
	.word	618
	.byte	4,4,2,35,0,11
	.byte	'WSECPF',0,1
	.word	618
	.byte	2,2,2,35,0,11
	.byte	'WSDFLASH',0,2
	.word	635
	.byte	6,4,2,35,0,11
	.byte	'WSECDF',0,1
	.word	618
	.byte	3,1,2,35,1,11
	.byte	'IDLE',0,1
	.word	618
	.byte	1,0,2,35,1,11
	.byte	'ESLDIS',0,1
	.word	618
	.byte	1,7,2,35,2,11
	.byte	'SLEEP',0,1
	.word	618
	.byte	1,6,2,35,2,11
	.byte	'NSAFECC',0,1
	.word	618
	.byte	1,5,2,35,2,11
	.byte	'STALL',0,1
	.word	618
	.byte	1,4,2,35,2,11
	.byte	'RES21',0,1
	.word	618
	.byte	2,2,2,35,2,11
	.byte	'RES23',0,1
	.word	618
	.byte	2,0,2,35,2,11
	.byte	'VOPERM',0,1
	.word	618
	.byte	1,7,2,35,3,11
	.byte	'SQERM',0,1
	.word	618
	.byte	1,6,2,35,3,11
	.byte	'PROERM',0,1
	.word	618
	.byte	1,5,2,35,3,11
	.byte	'reserved_27',0,1
	.word	618
	.byte	3,2,2,35,3,11
	.byte	'PR5V',0,1
	.word	618
	.byte	1,1,2,35,3,11
	.byte	'EOBM',0,1
	.word	618
	.byte	1,0,2,35,3,0,29
	.byte	'Ifx_FLASH_FCON_Bits',0,21,193,1,3
	.word	78281
	.byte	10
	.byte	'_Ifx_FLASH_FPRO_Bits',0,21,196,1,16,4,11
	.byte	'PROINP',0,1
	.word	618
	.byte	1,7,2,35,0,11
	.byte	'PRODISP',0,1
	.word	618
	.byte	1,6,2,35,0,11
	.byte	'PROIND',0,1
	.word	618
	.byte	1,5,2,35,0,11
	.byte	'PRODISD',0,1
	.word	618
	.byte	1,4,2,35,0,11
	.byte	'PROINHSMCOTP',0,1
	.word	618
	.byte	1,3,2,35,0,11
	.byte	'RES5',0,1
	.word	618
	.byte	1,2,2,35,0,11
	.byte	'PROINOTP',0,1
	.word	618
	.byte	1,1,2,35,0,11
	.byte	'RES7',0,1
	.word	618
	.byte	1,0,2,35,0,11
	.byte	'PROINDBG',0,1
	.word	618
	.byte	1,7,2,35,1,11
	.byte	'PRODISDBG',0,1
	.word	618
	.byte	1,6,2,35,1,11
	.byte	'PROINHSM',0,1
	.word	618
	.byte	1,5,2,35,1,11
	.byte	'reserved_11',0,1
	.word	618
	.byte	5,0,2,35,1,11
	.byte	'DCFP',0,1
	.word	618
	.byte	1,7,2,35,2,11
	.byte	'DDFP',0,1
	.word	618
	.byte	1,6,2,35,2,11
	.byte	'DDFPX',0,1
	.word	618
	.byte	1,5,2,35,2,11
	.byte	'reserved_19',0,1
	.word	618
	.byte	1,4,2,35,2,11
	.byte	'DDFD',0,1
	.word	618
	.byte	1,3,2,35,2,11
	.byte	'reserved_21',0,1
	.word	618
	.byte	1,2,2,35,2,11
	.byte	'ENPE',0,1
	.word	618
	.byte	2,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	618
	.byte	8,0,2,35,3,0,29
	.byte	'Ifx_FLASH_FPRO_Bits',0,21,218,1,3
	.word	78643
	.byte	10
	.byte	'_Ifx_FLASH_FSR_Bits',0,21,221,1,16,4,11
	.byte	'FABUSY',0,1
	.word	618
	.byte	1,7,2,35,0,11
	.byte	'D0BUSY',0,1
	.word	618
	.byte	1,6,2,35,0,11
	.byte	'RES1',0,1
	.word	618
	.byte	1,5,2,35,0,11
	.byte	'P0BUSY',0,1
	.word	618
	.byte	1,4,2,35,0,11
	.byte	'P1BUSY',0,1
	.word	618
	.byte	1,3,2,35,0,11
	.byte	'RES5',0,1
	.word	618
	.byte	1,2,2,35,0,11
	.byte	'RES6',0,1
	.word	618
	.byte	1,1,2,35,0,11
	.byte	'PROG',0,1
	.word	618
	.byte	1,0,2,35,0,11
	.byte	'ERASE',0,1
	.word	618
	.byte	1,7,2,35,1,11
	.byte	'PFPAGE',0,1
	.word	618
	.byte	1,6,2,35,1,11
	.byte	'DFPAGE',0,1
	.word	618
	.byte	1,5,2,35,1,11
	.byte	'OPER',0,1
	.word	618
	.byte	1,4,2,35,1,11
	.byte	'SQER',0,1
	.word	618
	.byte	1,3,2,35,1,11
	.byte	'PROER',0,1
	.word	618
	.byte	1,2,2,35,1,11
	.byte	'PFSBER',0,1
	.word	618
	.byte	1,1,2,35,1,11
	.byte	'PFDBER',0,1
	.word	618
	.byte	1,0,2,35,1,11
	.byte	'PFMBER',0,1
	.word	618
	.byte	1,7,2,35,2,11
	.byte	'RES17',0,1
	.word	618
	.byte	1,6,2,35,2,11
	.byte	'DFSBER',0,1
	.word	618
	.byte	1,5,2,35,2,11
	.byte	'DFDBER',0,1
	.word	618
	.byte	1,4,2,35,2,11
	.byte	'DFTBER',0,1
	.word	618
	.byte	1,3,2,35,2,11
	.byte	'DFMBER',0,1
	.word	618
	.byte	1,2,2,35,2,11
	.byte	'SRIADDERR',0,1
	.word	618
	.byte	1,1,2,35,2,11
	.byte	'reserved_23',0,2
	.word	635
	.byte	2,7,2,35,2,11
	.byte	'PVER',0,1
	.word	618
	.byte	1,6,2,35,3,11
	.byte	'EVER',0,1
	.word	618
	.byte	1,5,2,35,3,11
	.byte	'SPND',0,1
	.word	618
	.byte	1,4,2,35,3,11
	.byte	'SLM',0,1
	.word	618
	.byte	1,3,2,35,3,11
	.byte	'reserved_29',0,1
	.word	618
	.byte	1,2,2,35,3,11
	.byte	'ORIER',0,1
	.word	618
	.byte	1,1,2,35,3,11
	.byte	'reserved_31',0,1
	.word	618
	.byte	1,0,2,35,3,0,29
	.byte	'Ifx_FLASH_FSR_Bits',0,21,254,1,3
	.word	79084
	.byte	10
	.byte	'_Ifx_FLASH_ID_Bits',0,21,129,2,16,4,11
	.byte	'MODREV',0,1
	.word	618
	.byte	8,0,2,35,0,11
	.byte	'MODTYPE',0,1
	.word	618
	.byte	8,0,2,35,1,11
	.byte	'MODNUMBER',0,2
	.word	635
	.byte	16,0,2,35,2,0,29
	.byte	'Ifx_FLASH_ID_Bits',0,21,134,2,3
	.word	79690
	.byte	10
	.byte	'_Ifx_FLASH_MARD_Bits',0,21,137,2,16,4,11
	.byte	'HMARGIN',0,1
	.word	618
	.byte	1,7,2,35,0,11
	.byte	'SELD0',0,1
	.word	618
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	618
	.byte	1,5,2,35,0,11
	.byte	'SPND',0,1
	.word	618
	.byte	1,4,2,35,0,11
	.byte	'SPNDERR',0,1
	.word	618
	.byte	1,3,2,35,0,11
	.byte	'reserved_5',0,2
	.word	635
	.byte	10,1,2,35,0,11
	.byte	'TRAPDIS',0,1
	.word	618
	.byte	1,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	635
	.byte	16,0,2,35,2,0,29
	.byte	'Ifx_FLASH_MARD_Bits',0,21,147,2,3
	.word	79801
	.byte	10
	.byte	'_Ifx_FLASH_MARP_Bits',0,21,150,2,16,4,11
	.byte	'SELP0',0,1
	.word	618
	.byte	1,7,2,35,0,11
	.byte	'SELP1',0,1
	.word	618
	.byte	1,6,2,35,0,11
	.byte	'RES2',0,1
	.word	618
	.byte	1,5,2,35,0,11
	.byte	'RES3',0,1
	.word	618
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,2
	.word	635
	.byte	11,1,2,35,0,11
	.byte	'TRAPDIS',0,1
	.word	618
	.byte	1,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	635
	.byte	16,0,2,35,2,0,29
	.byte	'Ifx_FLASH_MARP_Bits',0,21,159,2,3
	.word	80015
	.byte	10
	.byte	'_Ifx_FLASH_PROCOND_Bits',0,21,162,2,16,4,11
	.byte	'L',0,1
	.word	618
	.byte	1,7,2,35,0,11
	.byte	'NSAFECC',0,1
	.word	618
	.byte	1,6,2,35,0,11
	.byte	'RAMIN',0,1
	.word	618
	.byte	2,4,2,35,0,11
	.byte	'RAMINSEL',0,1
	.word	618
	.byte	4,0,2,35,0,11
	.byte	'OSCCFG',0,1
	.word	618
	.byte	1,7,2,35,1,11
	.byte	'MODE',0,1
	.word	618
	.byte	2,5,2,35,1,11
	.byte	'APREN',0,1
	.word	618
	.byte	1,4,2,35,1,11
	.byte	'CAP0EN',0,1
	.word	618
	.byte	1,3,2,35,1,11
	.byte	'CAP1EN',0,1
	.word	618
	.byte	1,2,2,35,1,11
	.byte	'CAP2EN',0,1
	.word	618
	.byte	1,1,2,35,1,11
	.byte	'CAP3EN',0,1
	.word	618
	.byte	1,0,2,35,1,11
	.byte	'ESR0CNT',0,2
	.word	635
	.byte	12,4,2,35,2,11
	.byte	'RES29',0,1
	.word	618
	.byte	2,2,2,35,3,11
	.byte	'RES30',0,1
	.word	618
	.byte	1,1,2,35,3,11
	.byte	'RPRO',0,1
	.word	618
	.byte	1,0,2,35,3,0,29
	.byte	'Ifx_FLASH_PROCOND_Bits',0,21,179,2,3
	.word	80202
	.byte	10
	.byte	'_Ifx_FLASH_PROCONDBG_Bits',0,21,182,2,16,4,11
	.byte	'OCDSDIS',0,1
	.word	618
	.byte	1,7,2,35,0,11
	.byte	'DBGIFLCK',0,1
	.word	618
	.byte	1,6,2,35,0,11
	.byte	'EDM',0,1
	.word	618
	.byte	2,4,2,35,0,11
	.byte	'reserved_4',0,4
	.word	443
	.byte	28,0,2,35,0,0,29
	.byte	'Ifx_FLASH_PROCONDBG_Bits',0,21,188,2,3
	.word	80526
	.byte	10
	.byte	'_Ifx_FLASH_PROCONHSM_Bits',0,21,191,2,16,4,11
	.byte	'HSMDBGDIS',0,1
	.word	618
	.byte	1,7,2,35,0,11
	.byte	'DBGIFLCK',0,1
	.word	618
	.byte	1,6,2,35,0,11
	.byte	'TSTIFLCK',0,1
	.word	618
	.byte	1,5,2,35,0,11
	.byte	'HSMTSTDIS',0,1
	.word	618
	.byte	1,4,2,35,0,11
	.byte	'RES15',0,2
	.word	635
	.byte	12,0,2,35,0,11
	.byte	'reserved_16',0,2
	.word	635
	.byte	16,0,2,35,2,0,29
	.byte	'Ifx_FLASH_PROCONHSM_Bits',0,21,199,2,3
	.word	80669
	.byte	10
	.byte	'_Ifx_FLASH_PROCONHSMCOTP_Bits',0,21,202,2,16,4,11
	.byte	'HSMBOOTEN',0,1
	.word	618
	.byte	1,7,2,35,0,11
	.byte	'SSWWAIT',0,1
	.word	618
	.byte	1,6,2,35,0,11
	.byte	'HSMDX',0,1
	.word	618
	.byte	1,5,2,35,0,11
	.byte	'HSM6X',0,1
	.word	618
	.byte	1,4,2,35,0,11
	.byte	'HSM16X',0,1
	.word	618
	.byte	1,3,2,35,0,11
	.byte	'HSM17X',0,1
	.word	618
	.byte	1,2,2,35,0,11
	.byte	'S6ROM',0,1
	.word	618
	.byte	1,1,2,35,0,11
	.byte	'HSMENPINS',0,2
	.word	635
	.byte	2,7,2,35,0,11
	.byte	'HSMENRES',0,1
	.word	618
	.byte	2,5,2,35,1,11
	.byte	'DESTDBG',0,1
	.word	618
	.byte	2,3,2,35,1,11
	.byte	'BLKFLAN',0,1
	.word	618
	.byte	1,2,2,35,1,11
	.byte	'reserved_14',0,1
	.word	618
	.byte	2,0,2,35,1,11
	.byte	'S16ROM',0,1
	.word	618
	.byte	1,7,2,35,2,11
	.byte	'S17ROM',0,1
	.word	618
	.byte	1,6,2,35,2,11
	.byte	'reserved_18',0,2
	.word	635
	.byte	14,0,2,35,2,0,29
	.byte	'Ifx_FLASH_PROCONHSMCOTP_Bits',0,21,219,2,3
	.word	80858
	.byte	10
	.byte	'_Ifx_FLASH_PROCONOTP_Bits',0,21,222,2,16,4,11
	.byte	'S0ROM',0,1
	.word	618
	.byte	1,7,2,35,0,11
	.byte	'S1ROM',0,1
	.word	618
	.byte	1,6,2,35,0,11
	.byte	'S2ROM',0,1
	.word	618
	.byte	1,5,2,35,0,11
	.byte	'S3ROM',0,1
	.word	618
	.byte	1,4,2,35,0,11
	.byte	'S4ROM',0,1
	.word	618
	.byte	1,3,2,35,0,11
	.byte	'S5ROM',0,1
	.word	618
	.byte	1,2,2,35,0,11
	.byte	'S6ROM',0,1
	.word	618
	.byte	1,1,2,35,0,11
	.byte	'S7ROM',0,1
	.word	618
	.byte	1,0,2,35,0,11
	.byte	'S8ROM',0,1
	.word	618
	.byte	1,7,2,35,1,11
	.byte	'S9ROM',0,1
	.word	618
	.byte	1,6,2,35,1,11
	.byte	'S10ROM',0,1
	.word	618
	.byte	1,5,2,35,1,11
	.byte	'S11ROM',0,1
	.word	618
	.byte	1,4,2,35,1,11
	.byte	'S12ROM',0,1
	.word	618
	.byte	1,3,2,35,1,11
	.byte	'S13ROM',0,1
	.word	618
	.byte	1,2,2,35,1,11
	.byte	'S14ROM',0,1
	.word	618
	.byte	1,1,2,35,1,11
	.byte	'S15ROM',0,1
	.word	618
	.byte	1,0,2,35,1,11
	.byte	'S16ROM',0,1
	.word	618
	.byte	1,7,2,35,2,11
	.byte	'S17ROM',0,1
	.word	618
	.byte	1,6,2,35,2,11
	.byte	'S18ROM',0,1
	.word	618
	.byte	1,5,2,35,2,11
	.byte	'S19ROM',0,1
	.word	618
	.byte	1,4,2,35,2,11
	.byte	'S20ROM',0,1
	.word	618
	.byte	1,3,2,35,2,11
	.byte	'S21ROM',0,1
	.word	618
	.byte	1,2,2,35,2,11
	.byte	'S22ROM',0,1
	.word	618
	.byte	1,1,2,35,2,11
	.byte	'S23ROM',0,1
	.word	618
	.byte	1,0,2,35,2,11
	.byte	'S24ROM',0,1
	.word	618
	.byte	1,7,2,35,3,11
	.byte	'S25ROM',0,1
	.word	618
	.byte	1,6,2,35,3,11
	.byte	'S26ROM',0,1
	.word	618
	.byte	1,5,2,35,3,11
	.byte	'reserved_27',0,1
	.word	618
	.byte	2,3,2,35,3,11
	.byte	'BML',0,1
	.word	618
	.byte	2,1,2,35,3,11
	.byte	'TP',0,1
	.word	618
	.byte	1,0,2,35,3,0,29
	.byte	'Ifx_FLASH_PROCONOTP_Bits',0,21,254,2,3
	.word	81221
	.byte	10
	.byte	'_Ifx_FLASH_PROCONP_Bits',0,21,129,3,16,4,11
	.byte	'S0L',0,1
	.word	618
	.byte	1,7,2,35,0,11
	.byte	'S1L',0,1
	.word	618
	.byte	1,6,2,35,0,11
	.byte	'S2L',0,1
	.word	618
	.byte	1,5,2,35,0,11
	.byte	'S3L',0,1
	.word	618
	.byte	1,4,2,35,0,11
	.byte	'S4L',0,1
	.word	618
	.byte	1,3,2,35,0,11
	.byte	'S5L',0,1
	.word	618
	.byte	1,2,2,35,0,11
	.byte	'S6L',0,1
	.word	618
	.byte	1,1,2,35,0,11
	.byte	'S7L',0,1
	.word	618
	.byte	1,0,2,35,0,11
	.byte	'S8L',0,1
	.word	618
	.byte	1,7,2,35,1,11
	.byte	'S9L',0,1
	.word	618
	.byte	1,6,2,35,1,11
	.byte	'S10L',0,1
	.word	618
	.byte	1,5,2,35,1,11
	.byte	'S11L',0,1
	.word	618
	.byte	1,4,2,35,1,11
	.byte	'S12L',0,1
	.word	618
	.byte	1,3,2,35,1,11
	.byte	'S13L',0,1
	.word	618
	.byte	1,2,2,35,1,11
	.byte	'S14L',0,1
	.word	618
	.byte	1,1,2,35,1,11
	.byte	'S15L',0,1
	.word	618
	.byte	1,0,2,35,1,11
	.byte	'S16L',0,1
	.word	618
	.byte	1,7,2,35,2,11
	.byte	'S17L',0,1
	.word	618
	.byte	1,6,2,35,2,11
	.byte	'S18L',0,1
	.word	618
	.byte	1,5,2,35,2,11
	.byte	'S19L',0,1
	.word	618
	.byte	1,4,2,35,2,11
	.byte	'S20L',0,1
	.word	618
	.byte	1,3,2,35,2,11
	.byte	'S21L',0,1
	.word	618
	.byte	1,2,2,35,2,11
	.byte	'S22L',0,1
	.word	618
	.byte	1,1,2,35,2,11
	.byte	'S23L',0,1
	.word	618
	.byte	1,0,2,35,2,11
	.byte	'S24L',0,1
	.word	618
	.byte	1,7,2,35,3,11
	.byte	'S25L',0,1
	.word	618
	.byte	1,6,2,35,3,11
	.byte	'S26L',0,1
	.word	618
	.byte	1,5,2,35,3,11
	.byte	'reserved_27',0,1
	.word	618
	.byte	4,1,2,35,3,11
	.byte	'RPRO',0,1
	.word	618
	.byte	1,0,2,35,3,0,29
	.byte	'Ifx_FLASH_PROCONP_Bits',0,21,160,3,3
	.word	81816
	.byte	10
	.byte	'_Ifx_FLASH_PROCONWOP_Bits',0,21,163,3,16,4,11
	.byte	'S0WOP',0,1
	.word	618
	.byte	1,7,2,35,0,11
	.byte	'S1WOP',0,1
	.word	618
	.byte	1,6,2,35,0,11
	.byte	'S2WOP',0,1
	.word	618
	.byte	1,5,2,35,0,11
	.byte	'S3WOP',0,1
	.word	618
	.byte	1,4,2,35,0,11
	.byte	'S4WOP',0,1
	.word	618
	.byte	1,3,2,35,0,11
	.byte	'S5WOP',0,1
	.word	618
	.byte	1,2,2,35,0,11
	.byte	'S6WOP',0,1
	.word	618
	.byte	1,1,2,35,0,11
	.byte	'S7WOP',0,1
	.word	618
	.byte	1,0,2,35,0,11
	.byte	'S8WOP',0,1
	.word	618
	.byte	1,7,2,35,1,11
	.byte	'S9WOP',0,1
	.word	618
	.byte	1,6,2,35,1,11
	.byte	'S10WOP',0,1
	.word	618
	.byte	1,5,2,35,1,11
	.byte	'S11WOP',0,1
	.word	618
	.byte	1,4,2,35,1,11
	.byte	'S12WOP',0,1
	.word	618
	.byte	1,3,2,35,1,11
	.byte	'S13WOP',0,1
	.word	618
	.byte	1,2,2,35,1,11
	.byte	'S14WOP',0,1
	.word	618
	.byte	1,1,2,35,1,11
	.byte	'S15WOP',0,1
	.word	618
	.byte	1,0,2,35,1,11
	.byte	'S16WOP',0,1
	.word	618
	.byte	1,7,2,35,2,11
	.byte	'S17WOP',0,1
	.word	618
	.byte	1,6,2,35,2,11
	.byte	'S18WOP',0,1
	.word	618
	.byte	1,5,2,35,2,11
	.byte	'S19WOP',0,1
	.word	618
	.byte	1,4,2,35,2,11
	.byte	'S20WOP',0,1
	.word	618
	.byte	1,3,2,35,2,11
	.byte	'S21WOP',0,1
	.word	618
	.byte	1,2,2,35,2,11
	.byte	'S22WOP',0,1
	.word	618
	.byte	1,1,2,35,2,11
	.byte	'S23WOP',0,1
	.word	618
	.byte	1,0,2,35,2,11
	.byte	'S24WOP',0,1
	.word	618
	.byte	1,7,2,35,3,11
	.byte	'S25WOP',0,1
	.word	618
	.byte	1,6,2,35,3,11
	.byte	'S26WOP',0,1
	.word	618
	.byte	1,5,2,35,3,11
	.byte	'reserved_27',0,1
	.word	618
	.byte	4,1,2,35,3,11
	.byte	'DATM',0,1
	.word	618
	.byte	1,0,2,35,3,0,29
	.byte	'Ifx_FLASH_PROCONWOP_Bits',0,21,194,3,3
	.word	82340
	.byte	10
	.byte	'_Ifx_FLASH_RDB_CFG0_Bits',0,21,197,3,16,4,11
	.byte	'TAG',0,1
	.word	618
	.byte	6,2,2,35,0,11
	.byte	'reserved_6',0,4
	.word	443
	.byte	26,0,2,35,0,0,29
	.byte	'Ifx_FLASH_RDB_CFG0_Bits',0,21,201,3,3
	.word	82922
	.byte	10
	.byte	'_Ifx_FLASH_RDB_CFG1_Bits',0,21,204,3,16,4,11
	.byte	'TAG',0,1
	.word	618
	.byte	6,2,2,35,0,11
	.byte	'reserved_6',0,4
	.word	443
	.byte	26,0,2,35,0,0,29
	.byte	'Ifx_FLASH_RDB_CFG1_Bits',0,21,208,3,3
	.word	83024
	.byte	10
	.byte	'_Ifx_FLASH_RDB_CFG2_Bits',0,21,211,3,16,4,11
	.byte	'TAG',0,1
	.word	618
	.byte	6,2,2,35,0,11
	.byte	'reserved_6',0,4
	.word	443
	.byte	26,0,2,35,0,0,29
	.byte	'Ifx_FLASH_RDB_CFG2_Bits',0,21,215,3,3
	.word	83126
	.byte	10
	.byte	'_Ifx_FLASH_RRAD_Bits',0,21,218,3,16,4,11
	.byte	'reserved_0',0,1
	.word	618
	.byte	3,5,2,35,0,11
	.byte	'ADD',0,4
	.word	443
	.byte	29,0,2,35,0,0,29
	.byte	'Ifx_FLASH_RRAD_Bits',0,21,222,3,3
	.word	83228
	.byte	10
	.byte	'_Ifx_FLASH_RRCT_Bits',0,21,225,3,16,4,11
	.byte	'STRT',0,1
	.word	618
	.byte	1,7,2,35,0,11
	.byte	'STP',0,1
	.word	618
	.byte	1,6,2,35,0,11
	.byte	'BUSY',0,1
	.word	618
	.byte	1,5,2,35,0,11
	.byte	'DONE',0,1
	.word	618
	.byte	1,4,2,35,0,11
	.byte	'ERR',0,1
	.word	618
	.byte	1,3,2,35,0,11
	.byte	'reserved_5',0,1
	.word	618
	.byte	3,0,2,35,0,11
	.byte	'EOBM',0,1
	.word	618
	.byte	1,7,2,35,1,11
	.byte	'reserved_9',0,1
	.word	618
	.byte	7,0,2,35,1,11
	.byte	'CNT',0,2
	.word	635
	.byte	16,0,2,35,2,0,29
	.byte	'Ifx_FLASH_RRCT_Bits',0,21,236,3,3
	.word	83322
	.byte	10
	.byte	'_Ifx_FLASH_RRD0_Bits',0,21,239,3,16,4,11
	.byte	'DATA',0,4
	.word	443
	.byte	32,0,2,35,0,0,29
	.byte	'Ifx_FLASH_RRD0_Bits',0,21,242,3,3
	.word	83532
	.byte	10
	.byte	'_Ifx_FLASH_RRD1_Bits',0,21,245,3,16,4,11
	.byte	'DATA',0,4
	.word	443
	.byte	32,0,2,35,0,0,29
	.byte	'Ifx_FLASH_RRD1_Bits',0,21,248,3,3
	.word	83605
	.byte	10
	.byte	'_Ifx_FLASH_UBAB_CFG_Bits',0,21,251,3,16,4,11
	.byte	'SEL',0,1
	.word	618
	.byte	6,2,2,35,0,11
	.byte	'reserved_6',0,1
	.word	618
	.byte	2,0,2,35,0,11
	.byte	'CLR',0,1
	.word	618
	.byte	1,7,2,35,1,11
	.byte	'DIS',0,1
	.word	618
	.byte	1,6,2,35,1,11
	.byte	'reserved_10',0,4
	.word	443
	.byte	22,0,2,35,0,0,29
	.byte	'Ifx_FLASH_UBAB_CFG_Bits',0,21,130,4,3
	.word	83678
	.byte	10
	.byte	'_Ifx_FLASH_UBAB_STAT_Bits',0,21,133,4,16,4,11
	.byte	'VLD0',0,1
	.word	618
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,4
	.word	443
	.byte	31,0,2,35,0,0,29
	.byte	'Ifx_FLASH_UBAB_STAT_Bits',0,21,137,4,3
	.word	83833
	.byte	10
	.byte	'_Ifx_FLASH_UBAB_TOP_Bits',0,21,140,4,16,4,11
	.byte	'reserved_0',0,1
	.word	618
	.byte	5,3,2,35,0,11
	.byte	'ADDR',0,4
	.word	443
	.byte	19,8,2,35,0,11
	.byte	'ERR',0,1
	.word	618
	.byte	6,2,2,35,3,11
	.byte	'VLD',0,1
	.word	618
	.byte	1,1,2,35,3,11
	.byte	'CLR',0,1
	.word	618
	.byte	1,0,2,35,3,0,29
	.byte	'Ifx_FLASH_UBAB_TOP_Bits',0,21,147,4,3
	.word	83938
	.byte	12,21,155,4,9,4,13
	.byte	'U',0
	.word	443
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	459
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	76343
	.byte	4,2,35,0,0,29
	.byte	'Ifx_FLASH_ACCEN0',0,21,160,4,3
	.word	84086
	.byte	12,21,163,4,9,4,13
	.byte	'U',0
	.word	443
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	459
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	76904
	.byte	4,2,35,0,0,29
	.byte	'Ifx_FLASH_ACCEN1',0,21,168,4,3
	.word	84152
	.byte	12,21,171,4,9,4,13
	.byte	'U',0
	.word	443
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	459
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	76985
	.byte	4,2,35,0,0,29
	.byte	'Ifx_FLASH_CBAB_CFG',0,21,176,4,3
	.word	84218
	.byte	12,21,179,4,9,4,13
	.byte	'U',0
	.word	443
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	459
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	77138
	.byte	4,2,35,0,0,29
	.byte	'Ifx_FLASH_CBAB_STAT',0,21,184,4,3
	.word	84286
	.byte	12,21,187,4,9,4,13
	.byte	'U',0
	.word	443
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	459
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	77386
	.byte	4,2,35,0,0,29
	.byte	'Ifx_FLASH_CBAB_TOP',0,21,192,4,3
	.word	84355
	.byte	12,21,195,4,9,4,13
	.byte	'U',0
	.word	443
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	459
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	77532
	.byte	4,2,35,0,0,29
	.byte	'Ifx_FLASH_COMM0',0,21,200,4,3
	.word	84423
	.byte	12,21,203,4,9,4,13
	.byte	'U',0
	.word	443
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	459
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	77630
	.byte	4,2,35,0,0,29
	.byte	'Ifx_FLASH_COMM1',0,21,208,4,3
	.word	84488
	.byte	12,21,211,4,9,4,13
	.byte	'U',0
	.word	443
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	459
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	77746
	.byte	4,2,35,0,0,29
	.byte	'Ifx_FLASH_COMM2',0,21,216,4,3
	.word	84553
	.byte	12,21,219,4,9,4,13
	.byte	'U',0
	.word	443
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	459
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	77862
	.byte	4,2,35,0,0,29
	.byte	'Ifx_FLASH_ECCRD',0,21,224,4,3
	.word	84618
	.byte	12,21,227,4,9,4,13
	.byte	'U',0
	.word	443
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	459
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	78002
	.byte	4,2,35,0,0,29
	.byte	'Ifx_FLASH_ECCRP',0,21,232,4,3
	.word	84683
	.byte	12,21,235,4,9,4,13
	.byte	'U',0
	.word	443
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	459
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	78142
	.byte	4,2,35,0,0,29
	.byte	'Ifx_FLASH_ECCW',0,21,240,4,3
	.word	84748
	.byte	12,21,243,4,9,4,13
	.byte	'U',0
	.word	443
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	459
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	78281
	.byte	4,2,35,0,0,29
	.byte	'Ifx_FLASH_FCON',0,21,248,4,3
	.word	84812
	.byte	12,21,251,4,9,4,13
	.byte	'U',0
	.word	443
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	459
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	78643
	.byte	4,2,35,0,0,29
	.byte	'Ifx_FLASH_FPRO',0,21,128,5,3
	.word	84876
	.byte	12,21,131,5,9,4,13
	.byte	'U',0
	.word	443
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	459
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	79084
	.byte	4,2,35,0,0,29
	.byte	'Ifx_FLASH_FSR',0,21,136,5,3
	.word	84940
	.byte	12,21,139,5,9,4,13
	.byte	'U',0
	.word	443
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	459
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	79690
	.byte	4,2,35,0,0,29
	.byte	'Ifx_FLASH_ID',0,21,144,5,3
	.word	85003
	.byte	12,21,147,5,9,4,13
	.byte	'U',0
	.word	443
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	459
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	79801
	.byte	4,2,35,0,0,29
	.byte	'Ifx_FLASH_MARD',0,21,152,5,3
	.word	85065
	.byte	12,21,155,5,9,4,13
	.byte	'U',0
	.word	443
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	459
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	80015
	.byte	4,2,35,0,0,29
	.byte	'Ifx_FLASH_MARP',0,21,160,5,3
	.word	85129
	.byte	12,21,163,5,9,4,13
	.byte	'U',0
	.word	443
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	459
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	80202
	.byte	4,2,35,0,0,29
	.byte	'Ifx_FLASH_PROCOND',0,21,168,5,3
	.word	85193
	.byte	12,21,171,5,9,4,13
	.byte	'U',0
	.word	443
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	459
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	80526
	.byte	4,2,35,0,0,29
	.byte	'Ifx_FLASH_PROCONDBG',0,21,176,5,3
	.word	85260
	.byte	12,21,179,5,9,4,13
	.byte	'U',0
	.word	443
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	459
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	80669
	.byte	4,2,35,0,0,29
	.byte	'Ifx_FLASH_PROCONHSM',0,21,184,5,3
	.word	85329
	.byte	12,21,187,5,9,4,13
	.byte	'U',0
	.word	443
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	459
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	80858
	.byte	4,2,35,0,0,29
	.byte	'Ifx_FLASH_PROCONHSMCOTP',0,21,192,5,3
	.word	85398
	.byte	12,21,195,5,9,4,13
	.byte	'U',0
	.word	443
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	459
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	81221
	.byte	4,2,35,0,0,29
	.byte	'Ifx_FLASH_PROCONOTP',0,21,200,5,3
	.word	85471
	.byte	12,21,203,5,9,4,13
	.byte	'U',0
	.word	443
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	459
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	81816
	.byte	4,2,35,0,0,29
	.byte	'Ifx_FLASH_PROCONP',0,21,208,5,3
	.word	85540
	.byte	12,21,211,5,9,4,13
	.byte	'U',0
	.word	443
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	459
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	82340
	.byte	4,2,35,0,0,29
	.byte	'Ifx_FLASH_PROCONWOP',0,21,216,5,3
	.word	85607
	.byte	12,21,219,5,9,4,13
	.byte	'U',0
	.word	443
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	459
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	82922
	.byte	4,2,35,0,0,29
	.byte	'Ifx_FLASH_RDB_CFG0',0,21,224,5,3
	.word	85676
	.byte	12,21,227,5,9,4,13
	.byte	'U',0
	.word	443
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	459
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	83024
	.byte	4,2,35,0,0,29
	.byte	'Ifx_FLASH_RDB_CFG1',0,21,232,5,3
	.word	85744
	.byte	12,21,235,5,9,4,13
	.byte	'U',0
	.word	443
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	459
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	83126
	.byte	4,2,35,0,0,29
	.byte	'Ifx_FLASH_RDB_CFG2',0,21,240,5,3
	.word	85812
	.byte	12,21,243,5,9,4,13
	.byte	'U',0
	.word	443
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	459
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	83228
	.byte	4,2,35,0,0,29
	.byte	'Ifx_FLASH_RRAD',0,21,248,5,3
	.word	85880
	.byte	12,21,251,5,9,4,13
	.byte	'U',0
	.word	443
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	459
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	83322
	.byte	4,2,35,0,0,29
	.byte	'Ifx_FLASH_RRCT',0,21,128,6,3
	.word	85944
	.byte	12,21,131,6,9,4,13
	.byte	'U',0
	.word	443
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	459
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	83532
	.byte	4,2,35,0,0,29
	.byte	'Ifx_FLASH_RRD0',0,21,136,6,3
	.word	86008
	.byte	12,21,139,6,9,4,13
	.byte	'U',0
	.word	443
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	459
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	83605
	.byte	4,2,35,0,0,29
	.byte	'Ifx_FLASH_RRD1',0,21,144,6,3
	.word	86072
	.byte	12,21,147,6,9,4,13
	.byte	'U',0
	.word	443
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	459
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	83678
	.byte	4,2,35,0,0,29
	.byte	'Ifx_FLASH_UBAB_CFG',0,21,152,6,3
	.word	86136
	.byte	12,21,155,6,9,4,13
	.byte	'U',0
	.word	443
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	459
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	83833
	.byte	4,2,35,0,0,29
	.byte	'Ifx_FLASH_UBAB_STAT',0,21,160,6,3
	.word	86204
	.byte	12,21,163,6,9,4,13
	.byte	'U',0
	.word	443
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	459
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	83938
	.byte	4,2,35,0,0,29
	.byte	'Ifx_FLASH_UBAB_TOP',0,21,168,6,3
	.word	86273
	.byte	10
	.byte	'_Ifx_FLASH_CBAB',0,21,179,6,25,12,13
	.byte	'CFG',0
	.word	84218
	.byte	4,2,35,0,13
	.byte	'STAT',0
	.word	84286
	.byte	4,2,35,4,13
	.byte	'TOP',0
	.word	84355
	.byte	4,2,35,8,0,14
	.word	86341
	.byte	29
	.byte	'Ifx_FLASH_CBAB',0,21,184,6,3
	.word	86404
	.byte	10
	.byte	'_Ifx_FLASH_RDB',0,21,187,6,25,12,13
	.byte	'CFG0',0
	.word	85676
	.byte	4,2,35,0,13
	.byte	'CFG1',0
	.word	85744
	.byte	4,2,35,4,13
	.byte	'CFG2',0
	.word	85812
	.byte	4,2,35,8,0,14
	.word	86433
	.byte	29
	.byte	'Ifx_FLASH_RDB',0,21,192,6,3
	.word	86497
	.byte	10
	.byte	'_Ifx_FLASH_UBAB',0,21,195,6,25,12,13
	.byte	'CFG',0
	.word	86136
	.byte	4,2,35,0,13
	.byte	'STAT',0
	.word	86204
	.byte	4,2,35,4,13
	.byte	'TOP',0
	.word	86273
	.byte	4,2,35,8,0,14
	.word	86525
	.byte	29
	.byte	'Ifx_FLASH_UBAB',0,21,200,6,3
	.word	86588
	.byte	29
	.byte	'Ifx_P_ACCEN0_Bits',0,8,79,3
	.word	8394
	.byte	29
	.byte	'Ifx_P_ACCEN1_Bits',0,8,85,3
	.word	8307
	.byte	29
	.byte	'Ifx_P_ESR_Bits',0,8,107,3
	.word	4650
	.byte	29
	.byte	'Ifx_P_ID_Bits',0,8,115,3
	.word	2703
	.byte	29
	.byte	'Ifx_P_IN_Bits',0,8,137,1,3
	.word	3698
	.byte	29
	.byte	'Ifx_P_IOCR0_Bits',0,8,150,1,3
	.word	2831
	.byte	29
	.byte	'Ifx_P_IOCR12_Bits',0,8,163,1,3
	.word	3478
	.byte	29
	.byte	'Ifx_P_IOCR4_Bits',0,8,176,1,3
	.word	3046
	.byte	29
	.byte	'Ifx_P_IOCR8_Bits',0,8,189,1,3
	.word	3261
	.byte	29
	.byte	'Ifx_P_LPCR0_Bits',0,8,197,1,3
	.word	7666
	.byte	29
	.byte	'Ifx_P_LPCR1_Bits',0,8,205,1,3
	.word	7790
	.byte	29
	.byte	'Ifx_P_LPCR1_P21_Bits',0,8,215,1,3
	.word	7874
	.byte	29
	.byte	'Ifx_P_LPCR2_Bits',0,8,229,1,3
	.word	8054
	.byte	29
	.byte	'Ifx_P_OMCR0_Bits',0,8,240,1,3
	.word	6305
	.byte	29
	.byte	'Ifx_P_OMCR12_Bits',0,8,250,1,3
	.word	6829
	.byte	29
	.byte	'Ifx_P_OMCR4_Bits',0,8,133,2,3
	.word	6479
	.byte	29
	.byte	'Ifx_P_OMCR8_Bits',0,8,144,2,3
	.word	6653
	.byte	29
	.byte	'Ifx_P_OMCR_Bits',0,8,166,2,3
	.word	7318
	.byte	29
	.byte	'Ifx_P_OMR_Bits',0,8,203,2,3
	.word	2132
	.byte	29
	.byte	'Ifx_P_OMSR0_Bits',0,8,213,2,3
	.word	5642
	.byte	29
	.byte	'Ifx_P_OMSR12_Bits',0,8,224,2,3
	.word	6130
	.byte	29
	.byte	'Ifx_P_OMSR4_Bits',0,8,235,2,3
	.word	5789
	.byte	29
	.byte	'Ifx_P_OMSR8_Bits',0,8,246,2,3
	.word	5958
	.byte	29
	.byte	'Ifx_P_OMSR_Bits',0,8,140,3,3
	.word	6985
	.byte	29
	.byte	'Ifx_P_OUT_Bits',0,8,162,3,3
	.word	1816
	.byte	29
	.byte	'Ifx_P_PCSR_Bits',0,8,180,3,3
	.word	5356
	.byte	29
	.byte	'Ifx_P_PDISC_Bits',0,8,202,3,3
	.word	4990
	.byte	29
	.byte	'Ifx_P_PDR0_Bits',0,8,223,3,3
	.word	4021
	.byte	29
	.byte	'Ifx_P_PDR1_Bits',0,8,244,3,3
	.word	4325
	.byte	29
	.byte	'Ifx_P_ACCEN0',0,8,129,4,3
	.word	8921
	.byte	29
	.byte	'Ifx_P_ACCEN1',0,8,137,4,3
	.word	8354
	.byte	29
	.byte	'Ifx_P_ESR',0,8,145,4,3
	.word	4941
	.byte	29
	.byte	'Ifx_P_ID',0,8,153,4,3
	.word	2782
	.byte	29
	.byte	'Ifx_P_IN',0,8,161,4,3
	.word	3972
	.byte	29
	.byte	'Ifx_P_IOCR0',0,8,169,4,3
	.word	3006
	.byte	29
	.byte	'Ifx_P_IOCR12',0,8,177,4,3
	.word	3658
	.byte	29
	.byte	'Ifx_P_IOCR4',0,8,185,4,3
	.word	3221
	.byte	29
	.byte	'Ifx_P_IOCR8',0,8,193,4,3
	.word	3438
	.byte	29
	.byte	'Ifx_P_LPCR0',0,8,201,4,3
	.word	7750
	.byte	29
	.byte	'Ifx_P_LPCR1',0,8,210,4,3
	.word	7999
	.byte	29
	.byte	'Ifx_P_LPCR2',0,8,218,4,3
	.word	8258
	.byte	29
	.byte	'Ifx_P_OMCR',0,8,226,4,3
	.word	7626
	.byte	29
	.byte	'Ifx_P_OMCR0',0,8,234,4,3
	.word	6439
	.byte	29
	.byte	'Ifx_P_OMCR12',0,8,242,4,3
	.word	6945
	.byte	29
	.byte	'Ifx_P_OMCR4',0,8,250,4,3
	.word	6613
	.byte	29
	.byte	'Ifx_P_OMCR8',0,8,130,5,3
	.word	6789
	.byte	29
	.byte	'Ifx_P_OMR',0,8,138,5,3
	.word	2663
	.byte	29
	.byte	'Ifx_P_OMSR',0,8,146,5,3
	.word	7278
	.byte	29
	.byte	'Ifx_P_OMSR0',0,8,154,5,3
	.word	5749
	.byte	29
	.byte	'Ifx_P_OMSR12',0,8,162,5,3
	.word	6265
	.byte	29
	.byte	'Ifx_P_OMSR4',0,8,170,5,3
	.word	5918
	.byte	29
	.byte	'Ifx_P_OMSR8',0,8,178,5,3
	.word	6090
	.byte	29
	.byte	'Ifx_P_OUT',0,8,186,5,3
	.word	2092
	.byte	29
	.byte	'Ifx_P_PCSR',0,8,194,5,3
	.word	5602
	.byte	29
	.byte	'Ifx_P_PDISC',0,8,202,5,3
	.word	5316
	.byte	29
	.byte	'Ifx_P_PDR0',0,8,210,5,3
	.word	4285
	.byte	29
	.byte	'Ifx_P_PDR1',0,8,218,5,3
	.word	4601
	.byte	14
	.word	8961
	.byte	29
	.byte	'Ifx_P',0,8,139,6,3
	.word	87935
	.byte	29
	.byte	'IfxPort_InputMode',0,7,89,3
	.word	9574
	.byte	29
	.byte	'IfxPort_OutputIdx',0,7,130,1,3
	.word	9849
	.byte	29
	.byte	'IfxPort_OutputMode',0,7,138,1,3
	.word	9779
	.byte	15,7,144,1,9,1,16
	.byte	'IfxPort_PadDriver_cmosAutomotiveSpeed1',0,0,16
	.byte	'IfxPort_PadDriver_cmosAutomotiveSpeed2',0,1,16
	.byte	'IfxPort_PadDriver_cmosAutomotiveSpeed3',0,2,16
	.byte	'IfxPort_PadDriver_cmosAutomotiveSpeed4',0,3,16
	.byte	'IfxPort_PadDriver_lvdsSpeed1',0,4,16
	.byte	'IfxPort_PadDriver_lvdsSpeed2',0,5,16
	.byte	'IfxPort_PadDriver_lvdsSpeed3',0,6,16
	.byte	'IfxPort_PadDriver_lvdsSpeed4',0,7,16
	.byte	'IfxPort_PadDriver_ttlSpeed1',0,8,16
	.byte	'IfxPort_PadDriver_ttlSpeed2',0,9,16
	.byte	'IfxPort_PadDriver_ttlSpeed3',0,10,16
	.byte	'IfxPort_PadDriver_ttlSpeed4',0,11,0,29
	.byte	'IfxPort_PadDriver',0,7,158,1,3
	.word	88036
	.byte	29
	.byte	'IfxPort_State',0,7,178,1,3
	.word	10162
	.byte	31,7,190,1,9,8,13
	.byte	'port',0
	.word	9569
	.byte	4,2,35,0,13
	.byte	'pinIndex',0
	.word	618
	.byte	1,2,35,4,0,29
	.byte	'IfxPort_Pin',0,7,194,1,3
	.word	88501
	.byte	29
	.byte	'IfxScuCcu_PllStepsFunctionHook',0,13,148,1,16
	.word	182
	.byte	31,13,212,5,9,8,13
	.byte	'value',0
	.word	1585
	.byte	4,2,35,0,13
	.byte	'mask',0
	.word	1585
	.byte	4,2,35,4,0,29
	.byte	'IfxScuCcu_CcuconRegConfig',0,13,216,5,3
	.word	88601
	.byte	31,13,221,5,9,8,13
	.byte	'pDivider',0
	.word	618
	.byte	1,2,35,0,13
	.byte	'nDivider',0
	.word	618
	.byte	1,2,35,1,13
	.byte	'k2Initial',0
	.word	618
	.byte	1,2,35,2,13
	.byte	'waitTime',0
	.word	239
	.byte	4,2,35,4,0,29
	.byte	'IfxScuCcu_InitialStepConfig',0,13,227,5,3
	.word	88672
	.byte	31,13,231,5,9,12,13
	.byte	'k2Step',0
	.word	618
	.byte	1,2,35,0,13
	.byte	'waitTime',0
	.word	239
	.byte	4,2,35,2,13
	.byte	'hookFunction',0
	.word	88561
	.byte	4,2,35,8,0,29
	.byte	'IfxScuCcu_PllStepsConfig',0,13,236,5,3
	.word	88789
	.byte	3
	.word	179
	.byte	31,13,244,5,9,48,13
	.byte	'ccucon0',0
	.word	88601
	.byte	8,2,35,0,13
	.byte	'ccucon1',0
	.word	88601
	.byte	8,2,35,8,13
	.byte	'ccucon2',0
	.word	88601
	.byte	8,2,35,16,13
	.byte	'ccucon5',0
	.word	88601
	.byte	8,2,35,24,13
	.byte	'ccucon6',0
	.word	88601
	.byte	8,2,35,32,13
	.byte	'ccucon7',0
	.word	88601
	.byte	8,2,35,40,0,29
	.byte	'IfxScuCcu_ClockDistributionConfig',0,13,252,5,3
	.word	88891
	.byte	31,13,128,6,9,8,13
	.byte	'value',0
	.word	1585
	.byte	4,2,35,0,13
	.byte	'mask',0
	.word	1585
	.byte	4,2,35,4,0,29
	.byte	'IfxScuCcu_FlashWaitstateConfig',0,13,132,6,3
	.word	89043
	.byte	3
	.word	88789
	.byte	31,13,137,6,9,16,13
	.byte	'numOfPllDividerSteps',0
	.word	618
	.byte	1,2,35,0,13
	.byte	'pllDividerStep',0
	.word	89119
	.byte	4,2,35,4,13
	.byte	'pllInitialStep',0
	.word	88672
	.byte	8,2,35,8,0,29
	.byte	'IfxScuCcu_SysPllConfig',0,13,142,6,3
	.word	89124
	.byte	15,22,69,9,1,16
	.byte	'IfxSrc_Tos_cpu0',0,0,16
	.byte	'IfxSrc_Tos_cpu1',0,1,16
	.byte	'IfxSrc_Tos_dma',0,3,0,29
	.byte	'IfxSrc_Tos',0,22,74,3
	.word	89241
	.byte	31,23,59,15,16,13
	.byte	'module',0
	.word	17257
	.byte	4,2,35,0,13
	.byte	'pin',0
	.word	88501
	.byte	8,2,35,4,13
	.byte	'select',0
	.word	21114
	.byte	1,2,35,12,0,20
	.word	89319
	.byte	29
	.byte	'IfxAsclin_Cts_In',0,23,64,3
	.word	89370
	.byte	31,23,67,15,16,13
	.byte	'module',0
	.word	17257
	.byte	4,2,35,0,13
	.byte	'pin',0
	.word	88501
	.byte	8,2,35,4,13
	.byte	'select',0
	.word	21114
	.byte	1,2,35,12,0,20
	.word	89400
	.byte	29
	.byte	'IfxAsclin_Rx_In',0,23,72,3
	.word	89451
	.byte	31,23,75,15,16,13
	.byte	'module',0
	.word	17257
	.byte	4,2,35,0,13
	.byte	'pin',0
	.word	88501
	.byte	8,2,35,4,13
	.byte	'select',0
	.word	9849
	.byte	1,2,35,12,0,20
	.word	89480
	.byte	29
	.byte	'IfxAsclin_Rts_Out',0,23,80,3
	.word	89531
	.byte	31,23,83,15,16,13
	.byte	'module',0
	.word	17257
	.byte	4,2,35,0,13
	.byte	'pin',0
	.word	88501
	.byte	8,2,35,4,13
	.byte	'select',0
	.word	9849
	.byte	1,2,35,12,0,20
	.word	89562
	.byte	29
	.byte	'IfxAsclin_Sclk_Out',0,23,88,3
	.word	89613
	.byte	31,23,91,15,16,13
	.byte	'module',0
	.word	17257
	.byte	4,2,35,0,13
	.byte	'pin',0
	.word	88501
	.byte	8,2,35,4,13
	.byte	'select',0
	.word	9849
	.byte	1,2,35,12,0,20
	.word	89645
	.byte	29
	.byte	'IfxAsclin_Slso_Out',0,23,96,3
	.word	89696
	.byte	31,23,99,15,16,13
	.byte	'module',0
	.word	17257
	.byte	4,2,35,0,13
	.byte	'pin',0
	.word	88501
	.byte	8,2,35,4,13
	.byte	'select',0
	.word	9849
	.byte	1,2,35,12,0,20
	.word	89728
	.byte	29
	.byte	'IfxAsclin_Tx_Out',0,23,104,3
	.word	89779
	.byte	15,11,82,9,1,16
	.byte	'IfxAsclin_Checksum_classic',0,0,16
	.byte	'IfxAsclin_Checksum_enhanced',0,1,0,29
	.byte	'IfxAsclin_Checksum',0,11,86,3
	.word	89809
	.byte	15,11,91,9,1,16
	.byte	'IfxAsclin_ChecksumInjection_notWritten',0,0,16
	.byte	'IfxAsclin_ChecksumInjection_written',0,1,0,29
	.byte	'IfxAsclin_ChecksumInjection',0,11,95,3
	.word	89901
	.byte	15,11,101,9,1,16
	.byte	'IfxAsclin_ClockPolarity_idleLow',0,0,16
	.byte	'IfxAsclin_ClockPolarity_idleHigh',0,1,0,29
	.byte	'IfxAsclin_ClockPolarity',0,11,105,3
	.word	90022
	.byte	29
	.byte	'IfxAsclin_ClockSource',0,11,118,3
	.word	20537
	.byte	29
	.byte	'IfxAsclin_CtsInputSelect',0,11,129,1,3
	.word	18426
	.byte	15,11,134,1,9,1,16
	.byte	'IfxAsclin_DataLength_1',0,0,16
	.byte	'IfxAsclin_DataLength_2',0,1,16
	.byte	'IfxAsclin_DataLength_3',0,2,16
	.byte	'IfxAsclin_DataLength_4',0,3,16
	.byte	'IfxAsclin_DataLength_5',0,4,16
	.byte	'IfxAsclin_DataLength_6',0,5,16
	.byte	'IfxAsclin_DataLength_7',0,6,16
	.byte	'IfxAsclin_DataLength_8',0,7,16
	.byte	'IfxAsclin_DataLength_9',0,8,16
	.byte	'IfxAsclin_DataLength_10',0,9,16
	.byte	'IfxAsclin_DataLength_11',0,10,16
	.byte	'IfxAsclin_DataLength_12',0,11,16
	.byte	'IfxAsclin_DataLength_13',0,12,16
	.byte	'IfxAsclin_DataLength_14',0,13,16
	.byte	'IfxAsclin_DataLength_15',0,14,16
	.byte	'IfxAsclin_DataLength_16',0,15,0,29
	.byte	'IfxAsclin_DataLength',0,11,152,1,3
	.word	90193
	.byte	15,11,157,1,9,1,16
	.byte	'IfxAsclin_FrameMode_initialise',0,0,16
	.byte	'IfxAsclin_FrameMode_asc',0,1,16
	.byte	'IfxAsclin_FrameMode_spi',0,2,16
	.byte	'IfxAsclin_FrameMode_lin',0,3,0,29
	.byte	'IfxAsclin_FrameMode',0,11,163,1,3
	.word	90637
	.byte	15,11,168,1,9,1,16
	.byte	'IfxAsclin_HeaderResponseSelect_headerAndResponse',0,0,16
	.byte	'IfxAsclin_HeaderResponseSelect_headerOnly',0,1,0,29
	.byte	'IfxAsclin_HeaderResponseSelect',0,11,172,1,3
	.word	90784
	.byte	15,11,179,1,9,1,16
	.byte	'IfxAsclin_IdleDelay_0',0,0,16
	.byte	'IfxAsclin_IdleDelay_1',0,1,16
	.byte	'IfxAsclin_IdleDelay_2',0,2,16
	.byte	'IfxAsclin_IdleDelay_3',0,3,16
	.byte	'IfxAsclin_IdleDelay_4',0,4,16
	.byte	'IfxAsclin_IdleDelay_5',0,5,16
	.byte	'IfxAsclin_IdleDelay_6',0,6,16
	.byte	'IfxAsclin_IdleDelay_7',0,7,0,29
	.byte	'IfxAsclin_IdleDelay',0,11,189,1,3
	.word	90926
	.byte	15,11,195,1,9,1,16
	.byte	'IfxAsclin_LeadDelay_0',0,0,16
	.byte	'IfxAsclin_LeadDelay_1',0,1,16
	.byte	'IfxAsclin_LeadDelay_2',0,2,16
	.byte	'IfxAsclin_LeadDelay_3',0,3,16
	.byte	'IfxAsclin_LeadDelay_4',0,4,16
	.byte	'IfxAsclin_LeadDelay_5',0,5,16
	.byte	'IfxAsclin_LeadDelay_6',0,6,16
	.byte	'IfxAsclin_LeadDelay_7',0,7,0,29
	.byte	'IfxAsclin_LeadDelay',0,11,205,1,3
	.word	91154
	.byte	15,11,210,1,9,1,16
	.byte	'IfxAsclin_LinMode_slave',0,0,16
	.byte	'IfxAsclin_LinMode_master',0,1,0,29
	.byte	'IfxAsclin_LinMode',0,11,214,1,3
	.word	91382
	.byte	15,11,219,1,9,1,16
	.byte	'IfxAsclin_LinResponseTimeoutMode_frameTimeout',0,0,16
	.byte	'IfxAsclin_LinResponseTimeoutMode_responseTimeout',0,1,0,29
	.byte	'IfxAsclin_LinResponseTimeoutMode',0,11,223,1,3
	.word	91469
	.byte	29
	.byte	'IfxAsclin_OversamplingFactor',0,11,243,1,3
	.word	17521
	.byte	15,11,248,1,9,1,16
	.byte	'IfxAsclin_ParityType_even',0,0,16
	.byte	'IfxAsclin_ParityType_odd',0,1,0,29
	.byte	'IfxAsclin_ParityType',0,11,252,1,3
	.word	91655
	.byte	15,11,129,2,9,1,16
	.byte	'IfxAsclin_ReceiveBufferMode_rxFifo',0,0,16
	.byte	'IfxAsclin_ReceiveBufferMode_rxBuffer',0,1,0,29
	.byte	'IfxAsclin_ReceiveBufferMode',0,11,133,2,3
	.word	91747
	.byte	15,11,138,2,9,1,16
	.byte	'IfxAsclin_RtsCtsPolarity_activeHigh',0,0,16
	.byte	'IfxAsclin_RtsCtsPolarity_activeLow',0,1,0,29
	.byte	'IfxAsclin_RtsCtsPolarity',0,11,142,2,3
	.word	91867
	.byte	15,11,147,2,9,1,16
	.byte	'IfxAsclin_RxFifoInterruptLevel_1',0,0,16
	.byte	'IfxAsclin_RxFifoInterruptLevel_2',0,1,16
	.byte	'IfxAsclin_RxFifoInterruptLevel_3',0,2,16
	.byte	'IfxAsclin_RxFifoInterruptLevel_4',0,3,16
	.byte	'IfxAsclin_RxFifoInterruptLevel_5',0,4,16
	.byte	'IfxAsclin_RxFifoInterruptLevel_6',0,5,16
	.byte	'IfxAsclin_RxFifoInterruptLevel_7',0,6,16
	.byte	'IfxAsclin_RxFifoInterruptLevel_8',0,7,16
	.byte	'IfxAsclin_RxFifoInterruptLevel_9',0,8,16
	.byte	'IfxAsclin_RxFifoInterruptLevel_10',0,9,16
	.byte	'IfxAsclin_RxFifoInterruptLevel_11',0,10,16
	.byte	'IfxAsclin_RxFifoInterruptLevel_12',0,11,16
	.byte	'IfxAsclin_RxFifoInterruptLevel_13',0,12,16
	.byte	'IfxAsclin_RxFifoInterruptLevel_14',0,13,16
	.byte	'IfxAsclin_RxFifoInterruptLevel_15',0,14,16
	.byte	'IfxAsclin_RxFifoInterruptLevel_16',0,15,0,29
	.byte	'IfxAsclin_RxFifoInterruptLevel',0,11,165,2,3
	.word	91983
	.byte	15,11,170,2,9,1,16
	.byte	'IfxAsclin_RxFifoOutletWidth_0',0,0,16
	.byte	'IfxAsclin_RxFifoOutletWidth_1',0,1,16
	.byte	'IfxAsclin_RxFifoOutletWidth_2',0,2,16
	.byte	'IfxAsclin_RxFifoOutletWidth_3',0,3,0,29
	.byte	'IfxAsclin_RxFifoOutletWidth',0,11,176,2,3
	.word	92597
	.byte	29
	.byte	'IfxAsclin_RxInputSelect',0,11,191,2,3
	.word	18610
	.byte	29
	.byte	'IfxAsclin_SamplePointPosition',0,11,213,2,3
	.word	19945
	.byte	29
	.byte	'IfxAsclin_SamplesPerBit',0,11,222,2,3
	.word	20468
	.byte	15,11,228,2,9,1,16
	.byte	'IfxAsclin_ShiftDirection_lsbFirst',0,0,16
	.byte	'IfxAsclin_ShiftDirection_msbFirst',0,1,0,29
	.byte	'IfxAsclin_ShiftDirection',0,11,232,2,3
	.word	92874
	.byte	15,11,238,2,9,1,16
	.byte	'IfxAsclin_SlavePolarity_idleLow',0,0,16
	.byte	'IfxAsclin_SlavePolarity_idlehigh',0,1,0,29
	.byte	'IfxAsclin_SlavePolarity',0,11,242,2,3
	.word	92987
	.byte	15,11,247,2,9,1,16
	.byte	'IfxAsclin_SleepMode_enable',0,0,16
	.byte	'IfxAsclin_SleepMode_disable',0,1,0,29
	.byte	'IfxAsclin_SleepMode',0,11,251,2,3
	.word	93096
	.byte	15,11,136,3,9,1,16
	.byte	'IfxAsclin_StopBit_0',0,0,16
	.byte	'IfxAsclin_StopBit_1',0,1,16
	.byte	'IfxAsclin_StopBit_2',0,2,16
	.byte	'IfxAsclin_StopBit_3',0,3,16
	.byte	'IfxAsclin_StopBit_4',0,4,16
	.byte	'IfxAsclin_StopBit_5',0,5,16
	.byte	'IfxAsclin_StopBit_6',0,6,16
	.byte	'IfxAsclin_StopBit_7',0,7,0,29
	.byte	'IfxAsclin_StopBit',0,11,146,3,3
	.word	93191
	.byte	15,11,150,3,9,1,16
	.byte	'IfxAsclin_SuspendMode_none',0,0,16
	.byte	'IfxAsclin_SuspendMode_hard',0,1,16
	.byte	'IfxAsclin_SuspendMode_soft',0,2,0,29
	.byte	'IfxAsclin_SuspendMode',0,11,155,3,3
	.word	93401
	.byte	15,11,160,3,9,1,16
	.byte	'IfxAsclin_TxFifoInletWidth_0',0,0,16
	.byte	'IfxAsclin_TxFifoInletWidth_1',0,1,16
	.byte	'IfxAsclin_TxFifoInletWidth_2',0,2,16
	.byte	'IfxAsclin_TxFifoInletWidth_3',0,3,0,29
	.byte	'IfxAsclin_TxFifoInletWidth',0,11,166,3,3
	.word	93526
	.byte	15,11,171,3,9,1,16
	.byte	'IfxAsclin_TxFifoInterruptLevel_0',0,0,16
	.byte	'IfxAsclin_TxFifoInterruptLevel_1',0,1,16
	.byte	'IfxAsclin_TxFifoInterruptLevel_2',0,2,16
	.byte	'IfxAsclin_TxFifoInterruptLevel_3',0,3,16
	.byte	'IfxAsclin_TxFifoInterruptLevel_4',0,4,16
	.byte	'IfxAsclin_TxFifoInterruptLevel_5',0,5,16
	.byte	'IfxAsclin_TxFifoInterruptLevel_6',0,6,16
	.byte	'IfxAsclin_TxFifoInterruptLevel_7',0,7,16
	.byte	'IfxAsclin_TxFifoInterruptLevel_8',0,8,16
	.byte	'IfxAsclin_TxFifoInterruptLevel_9',0,9,16
	.byte	'IfxAsclin_TxFifoInterruptLevel_10',0,10,16
	.byte	'IfxAsclin_TxFifoInterruptLevel_11',0,11,16
	.byte	'IfxAsclin_TxFifoInterruptLevel_12',0,12,16
	.byte	'IfxAsclin_TxFifoInterruptLevel_13',0,13,16
	.byte	'IfxAsclin_TxFifoInterruptLevel_14',0,14,16
	.byte	'IfxAsclin_TxFifoInterruptLevel_15',0,15,0,29
	.byte	'IfxAsclin_TxFifoInterruptLevel',0,11,189,3,3
	.word	93693
	.byte	0
	.sdecl	'.debug_abbrev',debug
	.sect	'.debug_abbrev'
.L117:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,16,6,0,0,2,21,0,54,15,39,12,0,0,3,15,0,73,19,0,0,4,46,1,3,8,32,13
	.byte	58,15,59,15,57,15,54,15,39,12,0,0,5,5,0,3,8,58,15,59,15,57,15,73,19,0,0,6,11,0,0,0,7,36,0,3,8,11,15,62
	.byte	15,0,0,8,46,1,3,8,32,13,58,15,59,15,57,15,73,19,54,15,39,12,0,0,9,59,0,3,8,0,0,10,19,1,3,8,58,15,59,15
	.byte	57,15,11,15,0,0,11,13,0,3,8,11,15,73,19,13,15,12,15,56,9,0,0,12,23,1,58,15,59,15,57,15,11,15,0,0,13,13
	.byte	0,3,8,73,19,11,15,56,9,0,0,14,53,0,73,19,0,0,15,4,1,58,15,59,15,57,15,11,15,0,0,16,40,0,3,8,28,13,0,0
	.byte	17,11,1,0,0,18,1,1,11,15,73,19,0,0,19,33,0,47,15,0,0,20,38,0,73,19,0,0,21,46,1,3,8,54,15,39,12,63,12,60
	.byte	12,0,0,22,5,0,73,19,0,0,23,46,1,3,8,73,19,54,15,39,12,63,12,60,12,0,0,24,5,0,3,8,73,19,0,0,25,46,1,49
	.byte	19,0,0,26,5,0,49,19,0,0,27,46,1,3,8,58,15,59,15,57,15,54,15,39,12,63,12,60,12,0,0,28,46,0,3,8,58,15,59
	.byte	15,57,15,73,19,54,15,39,12,63,12,60,12,0,0,29,22,0,3,8,58,15,59,15,57,15,73,19,0,0,30,21,0,54,15,0,0,31
	.byte	19,1,58,15,59,15,57,15,11,15,0,0,32,52,0,3,8,58,15,59,15,57,15,73,19,63,12,60,12,0,0,0
	.sdecl	'.debug_line',debug
	.sect	'.debug_line'
.L118:
	.word	.L515-.L514
.L514:
	.half	3
	.word	.L517-.L516
.L516:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1
	.byte	'E:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Cpu\\Std',0
	.byte	'E:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Scu\\Std',0
	.byte	'E:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\Infra\\Sfr\\TC26B\\_Reg',0
	.byte	'E:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\_Impl',0
	.byte	'E:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Port\\Std',0
	.byte	'E:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Src\\Std',0
	.byte	'E:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\_PinMap',0
	.byte	0
	.byte	'IfxCpu_IntrinsicsTasking.h',0,1,0,0
	.byte	'IfxCpu_Intrinsics.h',0,1,0,0
	.byte	'IfxScuWdt.h',0,2,0,0
	.byte	'IfxScu_regdef.h',0,3,0,0
	.byte	'IfxCpu.h',0,1,0,0
	.byte	'IfxCpu_cfg.h',0,4,0,0
	.byte	'IfxPort.h',0,5,0,0
	.byte	'IfxPort_regdef.h',0,3,0,0
	.byte	'IfxSrc.h',0,6,0,0
	.byte	'IfxSrc_regdef.h',0,3,0,0
	.byte	'..\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Asclin\\Std\\IfxAsclin.h',0,0,0,0
	.byte	'IfxAsclin_regdef.h',0,3,0,0
	.byte	'IfxScuCcu.h',0,2,0,0
	.byte	'IfxAsclin_cfg.h',0,4,0,0
	.byte	'..\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Asclin\\Std\\IfxAsclin.c',0,0,0,0
	.byte	'Platform_Types.h',0,1,0,0
	.byte	'Ifx_Types.h',0,1,0,0
	.byte	'IfxScu_cfg.h',0,4,0,0
	.byte	'IfxCpu_regdef.h',0,3,0,0
	.byte	'IfxStm_regdef.h',0,3,0,0
	.byte	'IfxFlash_regdef.h',0,3,0,0
	.byte	'IfxSrc_cfg.h',0,4,0,0
	.byte	'IfxAsclin_PinMap.h',0,7,0,0,0
.L517:
.L515:
	.sdecl	'.debug_info',debug,cluster('IfxAsclin_getAddress')
	.sect	'.debug_info'
.L119:
	.word	278
	.half	3
	.word	.L120
	.byte	4,1
	.byte	'..\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Asclin\\Std\\IfxAsclin.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'E:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\Debug\\',0,12,1
	.word	.L122,.L121
	.byte	2
	.word	.L115
	.byte	3
	.byte	'IfxAsclin_getAddress',0,1,80,13
	.word	.L244
	.byte	1,1,1
	.word	.L72,.L245,.L71
	.byte	4
	.byte	'asclin',0,1,80,50
	.word	.L246,.L247
	.byte	5
	.word	.L72,.L245
	.byte	6
	.byte	'module',0,1,82,17
	.word	.L244,.L248
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxAsclin_getAddress')
	.sect	'.debug_abbrev'
.L120:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxAsclin_getAddress')
	.sect	'.debug_line'
.L121:
	.word	.L519-.L518
.L518:
	.half	3
	.word	.L521-.L520
.L520:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Asclin\\Std\\IfxAsclin.c',0,0,0,0,0
.L521:
	.byte	5,5,7,0,5,2
	.word	.L72
	.byte	3,211,0,1,5,32,7,9
	.half	.L522-.L72
	.byte	3,2,1,5,54,9
	.half	.L523-.L522
	.byte	1,5,62,9
	.half	.L524-.L523
	.byte	1,5,1,9
	.half	.L455-.L524
	.byte	3,8,1,5,16,7,9
	.half	.L2-.L455
	.byte	3,124,1,5,1,9
	.half	.L456-.L2
	.byte	3,4,1,7,9
	.half	.L123-.L456
	.byte	0,1,1
.L519:
	.sdecl	'.debug_ranges',debug,cluster('IfxAsclin_getAddress')
	.sect	'.debug_ranges'
.L122:
	.word	-1,.L72,0,.L123-.L72,0,0
	.sdecl	'.debug_info',debug,cluster('IfxAsclin_getFaFrequency')
	.sect	'.debug_info'
.L124:
	.word	321
	.half	3
	.word	.L125
	.byte	4,1
	.byte	'..\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Asclin\\Std\\IfxAsclin.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'E:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\Debug\\',0,12,1
	.word	.L127,.L126
	.byte	2
	.word	.L115
	.byte	3
	.byte	'IfxAsclin_getFaFrequency',0,1,97,9
	.word	.L249
	.byte	1,1,1
	.word	.L74,.L250,.L73
	.byte	4
	.byte	'asclin',0,1,97,46
	.word	.L244,.L251
	.byte	5
	.word	.L74,.L250
	.byte	6
	.byte	'frequency',0,1,99,27
	.word	.L249,.L252
	.byte	7
	.word	.L253,.L74,.L254
	.byte	8
	.word	.L255,.L256
	.byte	9
	.word	.L257,.L74,.L254
	.byte	0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxAsclin_getFaFrequency')
	.sect	'.debug_abbrev'
.L125:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,7,29,1,49,16,17,1,18,1,0,0,8,5,0,49,16,2,6,0,0,9,11,0,49,16,17
	.byte	1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxAsclin_getFaFrequency')
	.sect	'.debug_line'
.L126:
	.word	.L526-.L525
.L525:
	.half	3
	.word	.L528-.L527
.L527:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Asclin\\Std\\IfxAsclin.c',0,0,0,0
	.byte	'..\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Asclin\\Std\\IfxAsclin.h',0,0,0,0,0
.L528:
	.byte	4,2,5,25,7,0,5,2
	.word	.L74
	.byte	3,141,15,1,4,1,5,10,9
	.half	.L254-.L74
	.byte	3,221,113,1,7,9
	.half	.L529-.L254
	.byte	3,3,1,7,9
	.half	.L530-.L529
	.byte	3,3,1,7,9
	.half	.L531-.L530
	.byte	3,3,1,9
	.half	.L532-.L531
	.byte	3,3,1,5,46,9
	.half	.L5-.L532
	.byte	3,117,1,5,47,7,9
	.half	.L6-.L5
	.byte	3,3,1,5,50,7,9
	.half	.L7-.L6
	.byte	3,3,1,5,48,7,9
	.half	.L8-.L7
	.byte	3,3,1,7,9
	.half	.L9-.L8
	.byte	3,3,1,5,19,7,9
	.half	.L10-.L9
	.byte	3,3,1,5,1,3,5,1,7,9
	.half	.L128-.L10
	.byte	0,1,1
.L526:
	.sdecl	'.debug_ranges',debug,cluster('IfxAsclin_getFaFrequency')
	.sect	'.debug_ranges'
.L127:
	.word	-1,.L74,0,.L128-.L74,0,0
	.sdecl	'.debug_info',debug,cluster('IfxAsclin_getIndex')
	.sect	'.debug_info'
.L129:
	.word	298
	.half	3
	.word	.L130
	.byte	4,1
	.byte	'..\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Asclin\\Std\\IfxAsclin.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'E:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\Debug\\',0,12,1
	.word	.L132,.L131
	.byte	2
	.word	.L115
	.byte	3
	.byte	'IfxAsclin_getIndex',0,1,131,1,17
	.word	.L246
	.byte	1,1,1
	.word	.L76,.L258,.L75
	.byte	4
	.byte	'asclin',0,1,131,1,48
	.word	.L244,.L259
	.byte	5
	.word	.L76,.L258
	.byte	6
	.byte	'index',0,1,133,1,21
	.word	.L260,.L261
	.byte	6
	.byte	'result',0,1,134,1,21
	.word	.L246,.L262
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxAsclin_getIndex')
	.sect	'.debug_abbrev'
.L130:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxAsclin_getIndex')
	.sect	'.debug_line'
.L131:
	.word	.L534-.L533
.L533:
	.half	3
	.word	.L536-.L535
.L535:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Asclin\\Std\\IfxAsclin.c',0,0,0,0,0
.L536:
	.byte	5,12,7,0,5,2
	.word	.L76
	.byte	3,135,1,1,5,13,3,4,1,5,50,9
	.half	.L537-.L76
	.byte	3,126,1,5,42,9
	.half	.L17-.L537
	.byte	3,2,1,5,9,9
	.half	.L538-.L17
	.byte	1,5,68,7,9
	.half	.L539-.L538
	.byte	3,2,1,5,22,9
	.half	.L540-.L539
	.byte	1,5,1,3,6,1,5,57,7,9
	.half	.L18-.L540
	.byte	3,118,1,5,50,1,5,1,7,9
	.half	.L541-.L18
	.byte	3,10,1,7,9
	.half	.L133-.L541
	.byte	0,1,1
.L534:
	.sdecl	'.debug_ranges',debug,cluster('IfxAsclin_getIndex')
	.sect	'.debug_ranges'
.L132:
	.word	-1,.L76,0,.L133-.L76,0,0
	.sdecl	'.debug_info',debug,cluster('IfxAsclin_getOvsFrequency')
	.sect	'.debug_info'
.L134:
	.word	265
	.half	3
	.word	.L135
	.byte	4,1
	.byte	'..\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Asclin\\Std\\IfxAsclin.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'E:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\Debug\\',0,12,1
	.word	.L137,.L136
	.byte	2
	.word	.L115
	.byte	3
	.byte	'IfxAsclin_getOvsFrequency',0,1,151,1,9
	.word	.L249
	.byte	1,1,1
	.word	.L78,.L263,.L77
	.byte	4
	.byte	'asclin',0,1,151,1,47
	.word	.L244,.L264
	.byte	5
	.word	.L78,.L263
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxAsclin_getOvsFrequency')
	.sect	'.debug_abbrev'
.L135:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxAsclin_getOvsFrequency')
	.sect	'.debug_line'
.L136:
	.word	.L543-.L542
.L542:
	.half	3
	.word	.L545-.L544
.L544:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Asclin\\Std\\IfxAsclin.c',0,0,0,0,0
.L545:
	.byte	5,9,7,0,5,2
	.word	.L78
	.byte	3,150,1,1,5,38,9
	.half	.L459-.L78
	.byte	3,2,1,5,61,9
	.half	.L458-.L459
	.byte	1,5,88,9
	.half	.L546-.L458
	.byte	1,5,61,9
	.half	.L547-.L546
	.byte	1,5,46,9
	.half	.L548-.L547
	.byte	1,5,88,9
	.half	.L549-.L548
	.byte	1,5,73,9
	.half	.L550-.L549
	.byte	1,5,1,3,1,1,7,9
	.half	.L138-.L550
	.byte	0,1,1
.L543:
	.sdecl	'.debug_ranges',debug,cluster('IfxAsclin_getOvsFrequency')
	.sect	'.debug_ranges'
.L137:
	.word	-1,.L78,0,.L138-.L78,0,0
	.sdecl	'.debug_info',debug,cluster('IfxAsclin_getPdFrequency')
	.sect	'.debug_info'
.L139:
	.word	264
	.half	3
	.word	.L140
	.byte	4,1
	.byte	'..\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Asclin\\Std\\IfxAsclin.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'E:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\Debug\\',0,12,1
	.word	.L142,.L141
	.byte	2
	.word	.L115
	.byte	3
	.byte	'IfxAsclin_getPdFrequency',0,1,157,1,9
	.word	.L249
	.byte	1,1,1
	.word	.L80,.L265,.L79
	.byte	4
	.byte	'asclin',0,1,157,1,46
	.word	.L244,.L266
	.byte	5
	.word	.L80,.L265
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxAsclin_getPdFrequency')
	.sect	'.debug_abbrev'
.L140:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxAsclin_getPdFrequency')
	.sect	'.debug_line'
.L141:
	.word	.L552-.L551
.L551:
	.half	3
	.word	.L554-.L553
.L553:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Asclin\\Std\\IfxAsclin.c',0,0,0,0,0
.L554:
	.byte	5,9,7,0,5,2
	.word	.L80
	.byte	3,156,1,1,5,37,9
	.half	.L461-.L80
	.byte	3,2,1,5,64,9
	.half	.L460-.L461
	.byte	1,5,75,9
	.half	.L555-.L460
	.byte	1,5,45,9
	.half	.L556-.L555
	.byte	1,5,1,3,1,1,7,9
	.half	.L143-.L556
	.byte	0,1,1
.L552:
	.sdecl	'.debug_ranges',debug,cluster('IfxAsclin_getPdFrequency')
	.sect	'.debug_ranges'
.L142:
	.word	-1,.L80,0,.L143-.L80,0,0
	.sdecl	'.debug_info',debug,cluster('IfxAsclin_getShiftFrequency')
	.sect	'.debug_info'
.L144:
	.word	267
	.half	3
	.word	.L145
	.byte	4,1
	.byte	'..\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Asclin\\Std\\IfxAsclin.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'E:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\Debug\\',0,12,1
	.word	.L147,.L146
	.byte	2
	.word	.L115
	.byte	3
	.byte	'IfxAsclin_getShiftFrequency',0,1,163,1,9
	.word	.L249
	.byte	1,1,1
	.word	.L82,.L267,.L81
	.byte	4
	.byte	'asclin',0,1,163,1,49
	.word	.L244,.L268
	.byte	5
	.word	.L82,.L267
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxAsclin_getShiftFrequency')
	.sect	'.debug_abbrev'
.L145:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxAsclin_getShiftFrequency')
	.sect	'.debug_line'
.L146:
	.word	.L558-.L557
.L557:
	.half	3
	.word	.L560-.L559
.L559:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Asclin\\Std\\IfxAsclin.c',0,0,0,0,0
.L560:
	.byte	5,9,7,0,5,2
	.word	.L82
	.byte	3,162,1,1,5,38,9
	.half	.L463-.L82
	.byte	3,2,1,5,64,9
	.half	.L462-.L463
	.byte	1,5,46,9
	.half	.L561-.L462
	.byte	1,5,1,3,1,1,7,9
	.half	.L148-.L561
	.byte	0,1,1
.L558:
	.sdecl	'.debug_ranges',debug,cluster('IfxAsclin_getShiftFrequency')
	.sect	'.debug_ranges'
.L147:
	.word	-1,.L82,0,.L148-.L82,0,0
	.sdecl	'.debug_info',debug,cluster('IfxAsclin_resetModule')
	.sect	'.debug_info'
.L149:
	.word	278
	.half	3
	.word	.L150
	.byte	4,1
	.byte	'..\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Asclin\\Std\\IfxAsclin.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'E:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\Debug\\',0,12,1
	.word	.L152,.L151
	.byte	2
	.word	.L115
	.byte	3
	.byte	'IfxAsclin_resetModule',0,1,229,1,6,1,1,1
	.word	.L100,.L269,.L99
	.byte	4
	.byte	'asclin',0,1,229,1,40
	.word	.L244,.L270
	.byte	5
	.word	.L100,.L269
	.byte	6
	.byte	'passwd',0,1,231,1,12
	.word	.L271,.L272
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxAsclin_resetModule')
	.sect	'.debug_abbrev'
.L150:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3
	.byte	8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxAsclin_resetModule')
	.sect	'.debug_line'
.L151:
	.word	.L563-.L562
.L562:
	.half	3
	.word	.L565-.L564
.L564:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Asclin\\Std\\IfxAsclin.c',0,0,0,0,0
.L565:
	.byte	5,6,7,0,5,2
	.word	.L100
	.byte	3,228,1,1,5,53,9
	.half	.L471-.L100
	.byte	3,2,1,5,19,9
	.half	.L470-.L471
	.byte	1,5,31,9
	.half	.L473-.L470
	.byte	3,1,1,5,20,9
	.half	.L472-.L473
	.byte	3,2,1,5,29,9
	.half	.L566-.L472
	.byte	3,2,1,5,25,9
	.half	.L474-.L566
	.byte	3,126,1,5,20,9
	.half	.L567-.L474
	.byte	3,1,1,5,25,9
	.half	.L568-.L567
	.byte	1,5,29,9
	.half	.L569-.L568
	.byte	3,1,1,5,32,9
	.half	.L36-.L569
	.byte	3,2,1,5,40,9
	.half	.L570-.L36
	.byte	1,5,31,7,9
	.half	.L571-.L570
	.byte	3,3,1,5,29,9
	.half	.L572-.L571
	.byte	3,3,1,5,22,3,126,1,5,27,9
	.half	.L475-.L572
	.byte	1,5,29,9
	.half	.L573-.L475
	.byte	3,2,1,5,1,7,9
	.half	.L153-.L573
	.byte	3,1,0,1,1
.L563:
	.sdecl	'.debug_ranges',debug,cluster('IfxAsclin_resetModule')
	.sect	'.debug_ranges'
.L152:
	.word	-1,.L100,0,.L153-.L100,0,0
	.sdecl	'.debug_info',debug,cluster('IfxAsclin_setBitTiming')
	.sect	'.debug_info'
.L154:
	.word	723
	.half	3
	.word	.L155
	.byte	4,1
	.byte	'..\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Asclin\\Std\\IfxAsclin.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'E:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\Debug\\',0,12,1
	.word	.L157,.L156
	.byte	2
	.word	.L115
	.byte	3
	.byte	'IfxAsclin_setBitTiming',0,1,132,2,9
	.word	.L273
	.byte	1,1,1
	.word	.L106,.L274,.L105
	.byte	4
	.byte	'asclin',0,1,132,2,44
	.word	.L244,.L275
	.byte	4
	.byte	'baudrate',0,1,132,2,60
	.word	.L249,.L276
	.byte	4
	.byte	'oversampling',0,1,132,2,99
	.word	.L277,.L278
	.byte	4
	.byte	'samplepoint',0,1,132,2,143,1
	.word	.L279,.L280
	.byte	4
	.byte	'medianFilter',0,1,132,2,180,1
	.word	.L281,.L282
	.byte	5
	.word	.L106,.L274
	.byte	6
	.byte	'source',0,1,134,2,27
	.word	.L283,.L284
	.byte	6
	.byte	'fOvs',0,1,135,2,27
	.word	.L249,.L285
	.byte	6
	.byte	'd',0,1,136,2,27
	.word	.L260,.L286
	.byte	6
	.byte	'n',0,1,136,2,39
	.word	.L260,.L287
	.byte	6
	.byte	'dBest',0,1,136,2,42
	.word	.L260,.L288
	.byte	6
	.byte	'nBest',0,1,136,2,53
	.word	.L260,.L289
	.byte	6
	.byte	'f',0,1,137,2,27
	.word	.L249,.L290
	.byte	6
	.byte	'fpd',0,1,140,2,27
	.word	.L249,.L291
	.byte	7
	.word	.L253,.L292,.L293
	.byte	8
	.word	.L255,.L294
	.byte	9
	.word	.L257,.L295
	.byte	0,7
	.word	.L253,.L296,.L297
	.byte	8
	.word	.L255,.L294
	.byte	0,10
	.word	.L298
	.byte	6
	.byte	'relError',0,1,144,2,27
	.word	.L249,.L306
	.byte	6
	.byte	'limit',0,1,145,2,27
	.word	.L249,.L307
	.byte	6
	.byte	'terminated',0,1,147,2,27
	.word	.L273,.L308
	.byte	6
	.byte	'adder_facL',0,1,149,2,27
	.word	.L260,.L309
	.byte	6
	.byte	'adder_facH',0,1,149,2,39
	.word	.L260,.L310
	.byte	6
	.byte	'adder_facL_min',0,1,149,2,51
	.word	.L260,.L311
	.byte	6
	.byte	'count',0,1,149,2,67
	.word	.L260,.L312
	.byte	0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxAsclin_setBitTiming')
	.sect	'.debug_abbrev'
.L155:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,7,29,1,49,16,17,1,18,1,0,0,8,5,0,49,16,2,6,0,0,9,11,0,49,16,85
	.byte	6,0,0,10,11,1,85,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxAsclin_setBitTiming')
	.sect	'.debug_line'
.L156:
	.word	.L575-.L574
.L574:
	.half	3
	.word	.L577-.L576
.L576:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Asclin\\Std\\IfxAsclin.c',0,0,0,0
	.byte	'..\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Asclin\\Std\\IfxAsclin.h',0,0,0,0,0
.L577:
	.byte	5,9,7,0,5,2
	.word	.L106
	.byte	3,131,2,1,4,2,5,25,9
	.half	.L292-.L106
	.byte	3,138,13,1,4,1,5,9,9
	.half	.L293-.L292
	.byte	3,246,114,1,4,2,5,25,9
	.half	.L296-.L293
	.byte	3,138,13,1,4,1,5,9,3,246,114,1,4,2,5,25,9
	.half	.L297-.L296
	.byte	3,138,13,1,4,1,5,9,9
	.half	.L482-.L297
	.byte	3,246,114,1,5,58,3,8,1,5,71,9
	.half	.L480-.L482
	.byte	3,1,1,5,56,9
	.half	.L578-.L480
	.byte	1,5,20,9
	.half	.L579-.L578
	.byte	1,5,57,9
	.half	.L484-.L579
	.byte	3,1,1,5,38,9
	.half	.L299-.L484
	.byte	3,5,1,5,31,9
	.half	.L300-.L299
	.byte	3,124,1,5,22,9
	.half	.L301-.L300
	.byte	3,29,1,5,31,9
	.half	.L302-.L301
	.byte	3,99,1,5,20,9
	.half	.L303-.L302
	.byte	3,27,1,5,29,9
	.half	.L304-.L303
	.byte	3,101,1,5,40,9
	.half	.L305-.L304
	.byte	3,2,1,5,22,9
	.half	.L580-.L305
	.byte	3,6,1,5,40,9
	.half	.L581-.L580
	.byte	3,122,1,5,46,9
	.half	.L582-.L581
	.byte	1,5,9,9
	.half	.L486-.L582
	.byte	3,6,1,5,20,9
	.half	.L488-.L486
	.byte	3,18,1,5,34,9
	.half	.L489-.L488
	.byte	3,2,1,5,20,9
	.half	.L583-.L489
	.byte	3,125,1,5,32,9
	.half	.L490-.L583
	.byte	3,3,1,5,22,9
	.half	.L491-.L490
	.byte	3,1,1,5,18,9
	.half	.L38-.L491
	.byte	3,2,1,5,12,9
	.half	.L492-.L38
	.byte	3,5,1,5,18,9
	.half	.L494-.L492
	.byte	3,123,1,5,20,9
	.half	.L584-.L494
	.byte	3,2,1,5,54,3,3,1,5,9,9
	.half	.L41-.L584
	.byte	3,2,1,5,24,7,9
	.half	.L585-.L41
	.byte	3,2,1,9
	.half	.L495-.L585
	.byte	3,1,1,5,27,3,127,1,5,42,9
	.half	.L42-.L495
	.byte	3,5,1,5,47,9
	.half	.L496-.L42
	.byte	1,5,37,9
	.half	.L497-.L496
	.byte	3,1,1,5,53,3,3,1,5,46,9
	.half	.L45-.L497
	.byte	3,2,1,5,34,9
	.half	.L586-.L45
	.byte	1,5,32,9
	.half	.L587-.L586
	.byte	1,5,46,9
	.half	.L588-.L587
	.byte	1,5,37,9
	.half	.L589-.L588
	.byte	1,5,27,9
	.half	.L498-.L589
	.byte	3,1,1,5,26,9
	.half	.L47-.L498
	.byte	3,2,1,5,13,9
	.half	.L590-.L47
	.byte	1,5,32,7,9
	.half	.L591-.L590
	.byte	3,2,1,9
	.half	.L592-.L591
	.byte	3,1,1,9
	.half	.L593-.L592
	.byte	3,2,1,5,60,9
	.half	.L48-.L593
	.byte	3,118,1,5,53,9
	.half	.L44-.L48
	.byte	1,5,22,7,9
	.half	.L594-.L44
	.byte	3,14,1,5,9,9
	.half	.L595-.L594
	.byte	1,5,57,7,9
	.half	.L596-.L595
	.byte	3,101,1,5,20,9
	.half	.L40-.L596
	.byte	1,5,39,7,9
	.half	.L597-.L40
	.byte	1,5,47,9
	.half	.L598-.L597
	.byte	1,5,44,9
	.half	.L599-.L598
	.byte	1,5,38,7,9
	.half	.L49-.L599
	.byte	3,33,1,5,18,9
	.half	.L483-.L49
	.byte	3,1,1,5,31,9
	.half	.L502-.L483
	.byte	1,5,18,9
	.half	.L481-.L502
	.byte	3,1,1,5,50,9
	.half	.L503-.L481
	.byte	3,3,1,5,21,9
	.half	.L504-.L503
	.byte	1,5,50,9
	.half	.L600-.L504
	.byte	1,5,38,3,8,1,5,35,9
	.half	.L505-.L600
	.byte	3,120,1,5,34,9
	.half	.L601-.L505
	.byte	3,3,1,5,21,9
	.half	.L507-.L601
	.byte	1,5,38,9
	.half	.L602-.L507
	.byte	3,5,1,5,34,9
	.half	.L603-.L602
	.byte	3,123,1,5,27,9
	.half	.L508-.L603
	.byte	3,3,1,5,21,9
	.half	.L509-.L508
	.byte	1,5,27,9
	.half	.L604-.L509
	.byte	1,5,25,9
	.half	.L510-.L604
	.byte	1,5,38,9
	.half	.L605-.L510
	.byte	3,2,1,5,12,9
	.half	.L506-.L605
	.byte	3,2,1,5,1,3,1,1,7,9
	.half	.L158-.L506
	.byte	0,1,1
.L575:
	.sdecl	'.debug_ranges',debug,cluster('IfxAsclin_setBitTiming')
	.sect	'.debug_ranges'
.L157:
	.word	-1,.L106,0,.L158-.L106,0,0
.L295:
	.word	-1,.L106,.L292-.L106,.L293-.L106,.L296-.L106,.L297-.L106,0,0
.L298:
	.word	-1,.L106,.L299-.L106,.L300-.L106,.L301-.L106,.L302-.L106,.L303-.L106,.L304-.L106,.L305-.L106,.L274-.L106
	.word	0,0
	.sdecl	'.debug_info',debug,cluster('IfxAsclin_disableModule')
	.sect	'.debug_info'
.L159:
	.word	310
	.half	3
	.word	.L160
	.byte	4,1
	.byte	'..\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Asclin\\Std\\IfxAsclin.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'E:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\Debug\\',0,12,1
	.word	.L162,.L161
	.byte	2
	.word	.L115
	.byte	3
	.byte	'IfxAsclin_disableModule',0,1,55,6,1,1,1
	.word	.L66,.L313,.L65
	.byte	4
	.byte	'asclin',0,1,55,42
	.word	.L244,.L314
	.byte	5
	.word	.L66,.L313
	.byte	6
	.byte	'psw',0,1,57,12
	.word	.L271,.L315
	.byte	7
	.word	.L316,.L317,.L318
	.byte	8
	.word	.L319,.L320
	.byte	9
	.word	.L321,.L317,.L318
	.byte	0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxAsclin_disableModule')
	.sect	'.debug_abbrev'
.L160:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3
	.byte	8,58,15,59,15,57,15,73,16,2,6,0,0,7,29,1,49,16,17,1,18,1,0,0,8,5,0,49,16,2,6,0,0,9,11,0,49,16,17,1,18
	.byte	1,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxAsclin_disableModule')
	.sect	'.debug_line'
.L161:
	.word	.L607-.L606
.L606:
	.half	3
	.word	.L609-.L608
.L608:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Asclin\\Std\\IfxAsclin.c',0,0,0,0
	.byte	'..\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Asclin\\Std\\IfxAsclin.h',0,0,0,0,0
.L609:
	.byte	5,6,7,0,5,2
	.word	.L66
	.byte	3,54,1,5,50,9
	.half	.L448-.L66
	.byte	3,2,1,5,16,9
	.half	.L447-.L448
	.byte	1,5,31,9
	.half	.L450-.L447
	.byte	3,1,1,5,29,9
	.half	.L449-.L450
	.byte	3,2,1,4,2,5,18,3,129,17,1,5,24,9
	.half	.L317-.L449
	.byte	1,4,1,5,29,9
	.half	.L318-.L317
	.byte	3,255,110,1,5,1,7,9
	.half	.L163-.L318
	.byte	3,1,0,1,1
.L607:
	.sdecl	'.debug_ranges',debug,cluster('IfxAsclin_disableModule')
	.sect	'.debug_ranges'
.L162:
	.word	-1,.L66,0,.L163-.L66,0,0
	.sdecl	'.debug_info',debug,cluster('IfxAsclin_enableAscErrorFlags')
	.sect	'.debug_info'
.L164:
	.word	398
	.half	3
	.word	.L165
	.byte	4,1
	.byte	'..\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Asclin\\Std\\IfxAsclin.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'E:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\Debug\\',0,12,1
	.word	.L167,.L166
	.byte	2
	.word	.L115
	.byte	3
	.byte	'IfxAsclin_enableAscErrorFlags',0,1,64,6,1,1,1
	.word	.L68,.L322,.L67
	.byte	4
	.byte	'asclin',0,1,64,48
	.word	.L244,.L323
	.byte	4
	.byte	'parEnable',0,1,64,64
	.word	.L273,.L324
	.byte	4
	.byte	'rfoEnable',0,1,64,83
	.word	.L273,.L325
	.byte	5
	.word	.L68,.L322
	.byte	6
	.word	.L326,.L68,.L327
	.byte	7
	.word	.L328,.L329
	.byte	7
	.word	.L330,.L331
	.byte	8
	.word	.L332,.L68,.L327
	.byte	0,6
	.word	.L333,.L327,.L334
	.byte	7
	.word	.L335,.L336
	.byte	7
	.word	.L337,.L338
	.byte	8
	.word	.L339,.L327,.L334
	.byte	0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxAsclin_enableAscErrorFlags')
	.sect	'.debug_abbrev'
.L165:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,29,1,49
	.byte	16,17,1,18,1,0,0,7,5,0,49,16,2,6,0,0,8,11,0,49,16,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxAsclin_enableAscErrorFlags')
	.sect	'.debug_line'
.L166:
	.word	.L611-.L610
.L610:
	.half	3
	.word	.L613-.L612
.L612:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Asclin\\Std\\IfxAsclin.c',0,0,0,0
	.byte	'..\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Asclin\\Std\\IfxAsclin.h',0,0,0,0,0
.L613:
	.byte	4,2,5,26,7,0,5,2
	.word	.L68
	.byte	3,161,14,1,5,33,9
	.half	.L614-.L68
	.byte	1,5,31,9
	.half	.L615-.L614
	.byte	1,5,26,9
	.half	.L327-.L615
	.byte	3,30,1,5,34,9
	.half	.L616-.L327
	.byte	1,5,32,9
	.half	.L617-.L616
	.byte	1,4,1,5,1,9
	.half	.L334-.L617
	.byte	3,132,114,1,7,9
	.half	.L168-.L334
	.byte	0,1,1
.L611:
	.sdecl	'.debug_ranges',debug,cluster('IfxAsclin_enableAscErrorFlags')
	.sect	'.debug_ranges'
.L167:
	.word	-1,.L68,0,.L168-.L68,0,0
	.sdecl	'.debug_info',debug,cluster('IfxAsclin_enableModule')
	.sect	'.debug_info'
.L169:
	.word	309
	.half	3
	.word	.L170
	.byte	4,1
	.byte	'..\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Asclin\\Std\\IfxAsclin.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'E:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\Debug\\',0,12,1
	.word	.L172,.L171
	.byte	2
	.word	.L115
	.byte	3
	.byte	'IfxAsclin_enableModule',0,1,71,6,1,1,1
	.word	.L70,.L340,.L69
	.byte	4
	.byte	'asclin',0,1,71,41
	.word	.L244,.L341
	.byte	5
	.word	.L70,.L340
	.byte	6
	.byte	'psw',0,1,73,12
	.word	.L271,.L342
	.byte	7
	.word	.L343,.L344,.L345
	.byte	8
	.word	.L346,.L347
	.byte	9
	.word	.L348,.L344,.L345
	.byte	0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxAsclin_enableModule')
	.sect	'.debug_abbrev'
.L170:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3
	.byte	8,58,15,59,15,57,15,73,16,2,6,0,0,7,29,1,49,16,17,1,18,1,0,0,8,5,0,49,16,2,6,0,0,9,11,0,49,16,17,1,18
	.byte	1,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxAsclin_enableModule')
	.sect	'.debug_line'
.L171:
	.word	.L619-.L618
.L618:
	.half	3
	.word	.L621-.L620
.L620:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Asclin\\Std\\IfxAsclin.c',0,0,0,0
	.byte	'..\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Asclin\\Std\\IfxAsclin.h',0,0,0,0,0
.L621:
	.byte	5,6,7,0,5,2
	.word	.L70
	.byte	3,198,0,1,5,50,9
	.half	.L452-.L70
	.byte	3,2,1,5,16,9
	.half	.L451-.L452
	.byte	1,5,31,9
	.half	.L454-.L451
	.byte	3,1,1,5,29,9
	.half	.L453-.L454
	.byte	3,2,1,4,2,5,18,3,247,16,1,5,24,9
	.half	.L344-.L453
	.byte	1,4,1,5,29,9
	.half	.L345-.L344
	.byte	3,137,111,1,5,1,7,9
	.half	.L173-.L345
	.byte	3,1,0,1,1
.L619:
	.sdecl	'.debug_ranges',debug,cluster('IfxAsclin_enableModule')
	.sect	'.debug_ranges'
.L172:
	.word	-1,.L70,0,.L173-.L70,0,0
	.sdecl	'.debug_info',debug,cluster('IfxAsclin_getSrcPointerEr')
	.sect	'.debug_info'
.L174:
	.word	261
	.half	3
	.word	.L175
	.byte	4,1
	.byte	'..\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Asclin\\Std\\IfxAsclin.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'E:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\Debug\\',0,12,1
	.word	.L177,.L176
	.byte	2
	.word	.L115
	.byte	3
	.byte	'IfxAsclin_getSrcPointerEr',0,1,169,1,24
	.word	.L349
	.byte	1,1,1
	.word	.L84,.L350,.L83
	.byte	4
	.byte	'asclin',0,1,169,1,62
	.word	.L244,.L351
	.byte	5
	.word	.L352
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxAsclin_getSrcPointerEr')
	.sect	'.debug_abbrev'
.L175:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,0,85,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxAsclin_getSrcPointerEr')
	.sect	'.debug_line'
.L176:
	.word	.L623-.L622
.L622:
	.half	3
	.word	.L625-.L624
.L624:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Asclin\\Std\\IfxAsclin.c',0,0,0,0,0
.L625:
	.byte	5,83,7,0,5,2
	.word	.L84
	.byte	3,170,1,1,5,63,9
	.half	.L626-.L84
	.byte	1,5,91,9
	.half	.L464-.L626
	.byte	1,5,1,9
	.half	.L627-.L464
	.byte	3,1,1,7,9
	.half	.L178-.L627
	.byte	0,1,1
.L623:
	.sdecl	'.debug_ranges',debug,cluster('IfxAsclin_getSrcPointerEr')
	.sect	'.debug_ranges'
.L177:
	.word	-1,.L84,0,.L178-.L84,0,0
.L352:
	.word	-1,.L84,0,.L350-.L84,-1,.L86,0,.L243-.L86,0,0
	.sdecl	'.debug_info',debug,cluster('IfxAsclin_getSrcPointerRx')
	.sect	'.debug_info'
.L179:
	.word	261
	.half	3
	.word	.L180
	.byte	4,1
	.byte	'..\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Asclin\\Std\\IfxAsclin.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'E:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\Debug\\',0,12,1
	.word	.L182,.L181
	.byte	2
	.word	.L115
	.byte	3
	.byte	'IfxAsclin_getSrcPointerRx',0,1,175,1,24
	.word	.L349
	.byte	1,1,1
	.word	.L88,.L353,.L87
	.byte	4
	.byte	'asclin',0,1,175,1,62
	.word	.L244,.L354
	.byte	5
	.word	.L355
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxAsclin_getSrcPointerRx')
	.sect	'.debug_abbrev'
.L180:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,0,85,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxAsclin_getSrcPointerRx')
	.sect	'.debug_line'
.L181:
	.word	.L629-.L628
.L628:
	.half	3
	.word	.L631-.L630
.L630:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Asclin\\Std\\IfxAsclin.c',0,0,0,0,0
.L631:
	.byte	5,83,7,0,5,2
	.word	.L88
	.byte	3,176,1,1,5,63,9
	.half	.L632-.L88
	.byte	1,5,91,9
	.half	.L465-.L632
	.byte	1,5,1,9
	.half	.L633-.L465
	.byte	3,1,1,7,9
	.half	.L183-.L633
	.byte	0,1,1
.L629:
	.sdecl	'.debug_ranges',debug,cluster('IfxAsclin_getSrcPointerRx')
	.sect	'.debug_ranges'
.L182:
	.word	-1,.L88,0,.L183-.L88,0,0
.L355:
	.word	-1,.L88,0,.L353-.L88,-1,.L90,0,.L233-.L90,0,0
	.sdecl	'.debug_info',debug,cluster('IfxAsclin_getSrcPointerTx')
	.sect	'.debug_info'
.L184:
	.word	265
	.half	3
	.word	.L185
	.byte	4,1
	.byte	'..\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Asclin\\Std\\IfxAsclin.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'E:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\Debug\\',0,12,1
	.word	.L187,.L186
	.byte	2
	.word	.L115
	.byte	3
	.byte	'IfxAsclin_getSrcPointerTx',0,1,181,1,24
	.word	.L349
	.byte	1,1,1
	.word	.L92,.L356,.L91
	.byte	4
	.byte	'asclin',0,1,181,1,62
	.word	.L244,.L357
	.byte	5
	.word	.L92,.L356
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxAsclin_getSrcPointerTx')
	.sect	'.debug_abbrev'
.L185:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxAsclin_getSrcPointerTx')
	.sect	'.debug_line'
.L186:
	.word	.L635-.L634
.L634:
	.half	3
	.word	.L637-.L636
.L636:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Asclin\\Std\\IfxAsclin.c',0,0,0,0,0
.L637:
	.byte	5,83,7,0,5,2
	.word	.L92
	.byte	3,182,1,1,5,63,9
	.half	.L638-.L92
	.byte	1,5,1,9
	.half	.L466-.L638
	.byte	3,1,1,7,9
	.half	.L188-.L466
	.byte	0,1,1
.L635:
	.sdecl	'.debug_ranges',debug,cluster('IfxAsclin_getSrcPointerTx')
	.sect	'.debug_ranges'
.L187:
	.word	-1,.L92,0,.L188-.L92,0,0
	.sdecl	'.debug_info',debug,cluster('IfxAsclin_read16')
	.sect	'.debug_info'
.L189:
	.word	314
	.half	3
	.word	.L190
	.byte	4,1
	.byte	'..\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Asclin\\Std\\IfxAsclin.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'E:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\Debug\\',0,12,1
	.word	.L192,.L191
	.byte	2
	.word	.L115
	.byte	3
	.byte	'IfxAsclin_read16',0,1,187,1,8
	.word	.L260
	.byte	1,1,1
	.word	.L94,.L358,.L93
	.byte	4
	.byte	'asclin',0,1,187,1,37
	.word	.L244,.L359
	.byte	4
	.byte	'data',0,1,187,1,53
	.word	.L360,.L361
	.byte	4
	.byte	'count',0,1,187,1,66
	.word	.L260,.L362
	.byte	5
	.word	.L94,.L358
	.byte	6
	.byte	'rxData',0,1,189,1,33
	.word	.L363,.L364
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxAsclin_read16')
	.sect	'.debug_abbrev'
.L190:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxAsclin_read16')
	.sect	'.debug_line'
.L191:
	.word	.L640-.L639
.L639:
	.half	3
	.word	.L642-.L641
.L641:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Asclin\\Std\\IfxAsclin.c',0,0,0,0,0
.L642:
	.byte	5,79,7,0,5,2
	.word	.L94
	.byte	3,188,1,1,5,21,9
	.half	.L467-.L94
	.byte	3,2,1,5,14,9
	.half	.L28-.L467
	.byte	3,3,1,5,33,3,127,1,5,17,9
	.half	.L643-.L28
	.byte	1,5,21,9
	.half	.L27-.L643
	.byte	3,126,1,5,12,7,9
	.half	.L644-.L27
	.byte	3,6,1,5,1,3,1,1,7,9
	.half	.L193-.L644
	.byte	0,1,1
.L640:
	.sdecl	'.debug_ranges',debug,cluster('IfxAsclin_read16')
	.sect	'.debug_ranges'
.L192:
	.word	-1,.L94,0,.L193-.L94,0,0
	.sdecl	'.debug_info',debug,cluster('IfxAsclin_read32')
	.sect	'.debug_info'
.L194:
	.word	314
	.half	3
	.word	.L195
	.byte	4,1
	.byte	'..\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Asclin\\Std\\IfxAsclin.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'E:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\Debug\\',0,12,1
	.word	.L197,.L196
	.byte	2
	.word	.L115
	.byte	3
	.byte	'IfxAsclin_read32',0,1,201,1,8
	.word	.L260
	.byte	1,1,1
	.word	.L96,.L365,.L95
	.byte	4
	.byte	'asclin',0,1,201,1,37
	.word	.L244,.L366
	.byte	4
	.byte	'data',0,1,201,1,53
	.word	.L367,.L368
	.byte	4
	.byte	'count',0,1,201,1,66
	.word	.L260,.L369
	.byte	5
	.word	.L96,.L365
	.byte	6
	.byte	'rxData',0,1,203,1,33
	.word	.L363,.L370
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxAsclin_read32')
	.sect	'.debug_abbrev'
.L195:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxAsclin_read32')
	.sect	'.debug_line'
.L196:
	.word	.L646-.L645
.L645:
	.half	3
	.word	.L648-.L647
.L647:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Asclin\\Std\\IfxAsclin.c',0,0,0,0,0
.L648:
	.byte	5,79,7,0,5,2
	.word	.L96
	.byte	3,202,1,1,5,21,9
	.half	.L468-.L96
	.byte	3,2,1,5,14,9
	.half	.L31-.L468
	.byte	3,3,1,5,25,3,127,1,5,17,9
	.half	.L649-.L31
	.byte	1,5,21,9
	.half	.L30-.L649
	.byte	3,126,1,5,12,7,9
	.half	.L650-.L30
	.byte	3,6,1,5,1,3,1,1,7,9
	.half	.L198-.L650
	.byte	0,1,1
.L646:
	.sdecl	'.debug_ranges',debug,cluster('IfxAsclin_read32')
	.sect	'.debug_ranges'
.L197:
	.word	-1,.L96,0,.L198-.L96,0,0
	.sdecl	'.debug_info',debug,cluster('IfxAsclin_read8')
	.sect	'.debug_info'
.L199:
	.word	313
	.half	3
	.word	.L200
	.byte	4,1
	.byte	'..\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Asclin\\Std\\IfxAsclin.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'E:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\Debug\\',0,12,1
	.word	.L202,.L201
	.byte	2
	.word	.L115
	.byte	3
	.byte	'IfxAsclin_read8',0,1,215,1,8
	.word	.L260
	.byte	1,1,1
	.word	.L98,.L371,.L97
	.byte	4
	.byte	'asclin',0,1,215,1,36
	.word	.L244,.L372
	.byte	4
	.byte	'data',0,1,215,1,51
	.word	.L373,.L374
	.byte	4
	.byte	'count',0,1,215,1,64
	.word	.L260,.L375
	.byte	5
	.word	.L98,.L371
	.byte	6
	.byte	'rxData',0,1,217,1,33
	.word	.L363,.L376
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxAsclin_read8')
	.sect	'.debug_abbrev'
.L200:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxAsclin_read8')
	.sect	'.debug_line'
.L201:
	.word	.L652-.L651
.L651:
	.half	3
	.word	.L654-.L653
.L653:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Asclin\\Std\\IfxAsclin.c',0,0,0,0,0
.L654:
	.byte	5,79,7,0,5,2
	.word	.L98
	.byte	3,216,1,1,5,21,9
	.half	.L469-.L98
	.byte	3,2,1,5,14,9
	.half	.L34-.L469
	.byte	3,3,1,5,32,3,127,1,5,17,9
	.half	.L655-.L34
	.byte	1,5,21,9
	.half	.L33-.L655
	.byte	3,126,1,5,12,7,9
	.half	.L656-.L33
	.byte	3,6,1,5,1,3,1,1,7,9
	.half	.L203-.L656
	.byte	0,1,1
.L652:
	.sdecl	'.debug_ranges',debug,cluster('IfxAsclin_read8')
	.sect	'.debug_ranges'
.L202:
	.word	-1,.L98,0,.L203-.L98,0,0
	.sdecl	'.debug_info',debug,cluster('IfxAsclin_setBaudrateBitFields')
	.sect	'.debug_info'
.L204:
	.word	624
	.half	3
	.word	.L205
	.byte	4,1
	.byte	'..\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Asclin\\Std\\IfxAsclin.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'E:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\Debug\\',0,12,1
	.word	.L207,.L206
	.byte	2
	.word	.L115
	.byte	3
	.byte	'IfxAsclin_setBaudrateBitFields',0,1,248,1,6,1,1,1
	.word	.L102,.L377,.L101
	.byte	4
	.byte	'asclin',0,1,248,1,49
	.word	.L244,.L378
	.byte	4
	.byte	'prescaler',0,1,248,1,64
	.word	.L271,.L379
	.byte	4
	.byte	'numerator',0,1,248,1,82
	.word	.L271,.L380
	.byte	4
	.byte	'denominator',0,1,248,1,100
	.word	.L271,.L381
	.byte	4
	.byte	'oversampling',0,1,248,1,142,1
	.word	.L277,.L382
	.byte	5
	.word	.L102,.L377
	.byte	6
	.word	.L253,.L383,.L384
	.byte	7
	.word	.L255,.L385
	.byte	8
	.word	.L257,.L386
	.byte	0,6
	.word	.L253,.L387,.L388
	.byte	7
	.word	.L255,.L385
	.byte	0,6
	.word	.L389,.L390,.L391
	.byte	7
	.word	.L392,.L393
	.byte	7
	.word	.L394,.L395
	.byte	9
	.word	.L396,.L390,.L391
	.byte	0,6
	.word	.L397,.L391,.L398
	.byte	7
	.word	.L399,.L400
	.byte	7
	.word	.L401,.L402
	.byte	8
	.word	.L403,.L404
	.byte	0,6
	.word	.L405,.L398,.L406
	.byte	7
	.word	.L407,.L408
	.byte	7
	.word	.L409,.L410
	.byte	8
	.word	.L411,.L412
	.byte	0,6
	.word	.L405,.L413,.L414
	.byte	7
	.word	.L407,.L408
	.byte	7
	.word	.L409,.L410
	.byte	0,6
	.word	.L415,.L414,.L416
	.byte	7
	.word	.L417,.L418
	.byte	7
	.word	.L419,.L420
	.byte	9
	.word	.L421,.L414,.L416
	.byte	0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxAsclin_setBaudrateBitFields')
	.sect	'.debug_abbrev'
.L205:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,29,1,49
	.byte	16,17,1,18,1,0,0,7,5,0,49,16,2,6,0,0,8,11,0,49,16,85,6,0,0,9,11,0,49,16,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxAsclin_setBaudrateBitFields')
	.sect	'.debug_line'
.L206:
	.word	.L658-.L657
.L657:
	.half	3
	.word	.L660-.L659
.L659:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Asclin\\Std\\IfxAsclin.c',0,0,0,0
	.byte	'..\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Asclin\\Std\\IfxAsclin.h',0,0,0,0,0
.L660:
	.byte	5,6,7,0,5,2
	.word	.L102
	.byte	3,247,1,1,4,2,5,25,9
	.half	.L383-.L102
	.byte	3,150,13,1,4,1,5,6,9
	.half	.L384-.L383
	.byte	3,234,114,1,4,2,5,25,9
	.half	.L387-.L384
	.byte	3,150,13,1,4,1,5,38,9
	.half	.L388-.L387
	.byte	3,237,114,1,5,6,9
	.half	.L476-.L388
	.byte	3,125,1,5,38,3,3,1,4,2,5,21,9
	.half	.L390-.L476
	.byte	3,168,16,1,5,44,9
	.half	.L661-.L390
	.byte	1,5,32,9
	.half	.L662-.L661
	.byte	1,5,18,9
	.half	.L391-.L662
	.byte	3,110,1,9
	.half	.L398-.L391
	.byte	3,166,127,1,4,1,5,41,9
	.half	.L406-.L398
	.byte	3,195,112,1,4,2,5,31,9
	.half	.L413-.L406
	.byte	3,189,15,1,5,21,9
	.half	.L414-.L413
	.byte	3,224,0,1,5,35,9
	.half	.L479-.L414
	.byte	1,4,1,5,41,9
	.half	.L416-.L479
	.byte	3,227,111,1,5,1,7,9
	.half	.L208-.L416
	.byte	3,7,0,1,1
.L658:
	.sdecl	'.debug_ranges',debug,cluster('IfxAsclin_setBaudrateBitFields')
	.sect	'.debug_ranges'
.L207:
	.word	-1,.L102,0,.L208-.L102,0,0
.L386:
	.word	-1,.L102,.L383-.L102,.L384-.L102,.L387-.L102,.L388-.L102,0,0
.L404:
	.word	-1,.L102,.L391-.L102,.L398-.L102,-1,.L104,0,.L238-.L104,0,0
.L412:
	.word	-1,.L102,.L398-.L102,.L406-.L102,.L413-.L102,.L414-.L102,0,0
	.sdecl	'.debug_info',debug,cluster('IfxAsclin_setClockSource')
	.sect	'.debug_info'
.L209:
	.word	358
	.half	3
	.word	.L210
	.byte	4,1
	.byte	'..\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Asclin\\Std\\IfxAsclin.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'E:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\Debug\\',0,12,1
	.word	.L212,.L211
	.byte	2
	.word	.L115
	.byte	3
	.byte	'IfxAsclin_setClockSource',0,1,231,2,6,1,1,1
	.word	.L108,.L422,.L107
	.byte	4
	.byte	'asclin',0,1,231,2,43
	.word	.L244,.L423
	.byte	4
	.byte	'clockSource',0,1,231,2,73
	.word	.L283,.L424
	.byte	5
	.word	.L108,.L422
	.byte	6
	.word	.L425,.L53,.L426
	.byte	7
	.word	.L427,.L428
	.byte	8
	.word	.L429,.L53,.L426
	.byte	0,6
	.word	.L425,.L55,.L430
	.byte	7
	.word	.L427,.L428
	.byte	8
	.word	.L429,.L55,.L430
	.byte	0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxAsclin_setClockSource')
	.sect	'.debug_abbrev'
.L210:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,29,1,49
	.byte	16,17,1,18,1,0,0,7,5,0,49,16,2,6,0,0,8,11,0,49,16,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxAsclin_setClockSource')
	.sect	'.debug_line'
.L211:
	.word	.L664-.L663
.L663:
	.half	3
	.word	.L666-.L665
.L665:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Asclin\\Std\\IfxAsclin.c',0,0,0,0
	.byte	'..\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Asclin\\Std\\IfxAsclin.h',0,0,0,0,0
.L666:
	.byte	5,18,7,0,5,2
	.word	.L108
	.byte	3,232,2,1,5,26,9
	.half	.L667-.L108
	.byte	1,5,5,9
	.half	.L668-.L667
	.byte	3,3,1,4,2,5,25,7,9
	.half	.L53-.L668
	.byte	3,168,12,1,4,1,5,54,9
	.half	.L426-.L53
	.byte	3,218,115,1,5,1,7,9
	.half	.L669-.L426
	.byte	3,8,1,4,2,5,25,7,9
	.half	.L55-.L669
	.byte	3,158,12,1,4,1,5,54,9
	.half	.L430-.L55
	.byte	3,223,115,1,5,1,7,9
	.half	.L670-.L430
	.byte	3,3,1,7,9
	.half	.L213-.L670
	.byte	0,1,1
.L664:
	.sdecl	'.debug_ranges',debug,cluster('IfxAsclin_setClockSource')
	.sect	'.debug_ranges'
.L212:
	.word	-1,.L108,0,.L213-.L108,0,0
	.sdecl	'.debug_info',debug,cluster('IfxAsclin_write16')
	.sect	'.debug_info'
.L214:
	.word	315
	.half	3
	.word	.L215
	.byte	4,1
	.byte	'..\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Asclin\\Std\\IfxAsclin.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'E:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\Debug\\',0,12,1
	.word	.L217,.L216
	.byte	2
	.word	.L115
	.byte	3
	.byte	'IfxAsclin_write16',0,1,249,2,8
	.word	.L260
	.byte	1,1,1
	.word	.L110,.L431,.L109
	.byte	4
	.byte	'asclin',0,1,249,2,38
	.word	.L244,.L432
	.byte	4
	.byte	'data',0,1,249,2,54
	.word	.L360,.L433
	.byte	4
	.byte	'count',0,1,249,2,67
	.word	.L260,.L434
	.byte	5
	.word	.L110,.L431
	.byte	6
	.byte	'txData',0,1,251,2,33
	.word	.L435,.L436
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxAsclin_write16')
	.sect	'.debug_abbrev'
.L215:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxAsclin_write16')
	.sect	'.debug_line'
.L216:
	.word	.L672-.L671
.L671:
	.half	3
	.word	.L674-.L673
.L673:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Asclin\\Std\\IfxAsclin.c',0,0,0,0,0
.L674:
	.byte	5,79,7,0,5,2
	.word	.L110
	.byte	3,250,2,1,5,23,9
	.half	.L511-.L110
	.byte	3,2,1,5,14,9
	.half	.L57-.L511
	.byte	3,3,1,5,21,3,127,1,5,19,9
	.half	.L675-.L57
	.byte	1,5,23,9
	.half	.L56-.L675
	.byte	3,126,1,5,12,7,9
	.half	.L676-.L56
	.byte	3,6,1,5,1,3,1,1,7,9
	.half	.L218-.L676
	.byte	0,1,1
.L672:
	.sdecl	'.debug_ranges',debug,cluster('IfxAsclin_write16')
	.sect	'.debug_ranges'
.L217:
	.word	-1,.L110,0,.L218-.L110,0,0
	.sdecl	'.debug_info',debug,cluster('IfxAsclin_write32')
	.sect	'.debug_info'
.L219:
	.word	315
	.half	3
	.word	.L220
	.byte	4,1
	.byte	'..\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Asclin\\Std\\IfxAsclin.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'E:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\Debug\\',0,12,1
	.word	.L222,.L221
	.byte	2
	.word	.L115
	.byte	3
	.byte	'IfxAsclin_write32',0,1,135,3,8
	.word	.L260
	.byte	1,1,1
	.word	.L112,.L437,.L111
	.byte	4
	.byte	'asclin',0,1,135,3,38
	.word	.L244,.L438
	.byte	4
	.byte	'data',0,1,135,3,54
	.word	.L367,.L439
	.byte	4
	.byte	'count',0,1,135,3,67
	.word	.L260,.L440
	.byte	5
	.word	.L112,.L437
	.byte	6
	.byte	'txData',0,1,137,3,33
	.word	.L435,.L441
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxAsclin_write32')
	.sect	'.debug_abbrev'
.L220:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxAsclin_write32')
	.sect	'.debug_line'
.L221:
	.word	.L678-.L677
.L677:
	.half	3
	.word	.L680-.L679
.L679:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Asclin\\Std\\IfxAsclin.c',0,0,0,0,0
.L680:
	.byte	5,79,7,0,5,2
	.word	.L112
	.byte	3,136,3,1,5,23,9
	.half	.L512-.L112
	.byte	3,2,1,5,14,9
	.half	.L60-.L512
	.byte	3,3,1,5,21,3,127,1,5,19,9
	.half	.L681-.L60
	.byte	1,5,23,9
	.half	.L59-.L681
	.byte	3,126,1,5,12,7,9
	.half	.L682-.L59
	.byte	3,6,1,5,1,3,1,1,7,9
	.half	.L223-.L682
	.byte	0,1,1
.L678:
	.sdecl	'.debug_ranges',debug,cluster('IfxAsclin_write32')
	.sect	'.debug_ranges'
.L222:
	.word	-1,.L112,0,.L223-.L112,0,0
	.sdecl	'.debug_info',debug,cluster('IfxAsclin_write8')
	.sect	'.debug_info'
.L224:
	.word	314
	.half	3
	.word	.L225
	.byte	4,1
	.byte	'..\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Asclin\\Std\\IfxAsclin.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'E:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\Debug\\',0,12,1
	.word	.L227,.L226
	.byte	2
	.word	.L115
	.byte	3
	.byte	'IfxAsclin_write8',0,1,149,3,8
	.word	.L260
	.byte	1,1,1
	.word	.L114,.L442,.L113
	.byte	4
	.byte	'asclin',0,1,149,3,37
	.word	.L244,.L443
	.byte	4
	.byte	'data',0,1,149,3,52
	.word	.L373,.L444
	.byte	4
	.byte	'count',0,1,149,3,65
	.word	.L260,.L445
	.byte	5
	.word	.L114,.L442
	.byte	6
	.byte	'txData',0,1,151,3,33
	.word	.L435,.L446
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxAsclin_write8')
	.sect	'.debug_abbrev'
.L225:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxAsclin_write8')
	.sect	'.debug_line'
.L226:
	.word	.L684-.L683
.L683:
	.half	3
	.word	.L686-.L685
.L685:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Asclin\\Std\\IfxAsclin.c',0,0,0,0,0
.L686:
	.byte	5,79,7,0,5,2
	.word	.L114
	.byte	3,150,3,1,5,23,9
	.half	.L513-.L114
	.byte	3,2,1,5,14,9
	.half	.L63-.L513
	.byte	3,3,1,5,21,3,127,1,5,19,9
	.half	.L687-.L63
	.byte	1,5,23,9
	.half	.L62-.L687
	.byte	3,126,1,5,12,7,9
	.half	.L688-.L62
	.byte	3,6,1,5,1,3,1,1,7,9
	.half	.L228-.L688
	.byte	0,1,1
.L684:
	.sdecl	'.debug_ranges',debug,cluster('IfxAsclin_write8')
	.sect	'.debug_ranges'
.L227:
	.word	-1,.L114,0,.L228-.L114,0,0
	.sdecl	'.debug_info',debug,cluster('.cocofun_1')
	.sect	'.debug_info'
.L229:
	.word	214
	.half	3
	.word	.L230
	.byte	4,1
	.byte	'..\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Asclin\\Std\\IfxAsclin.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'E:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\Debug\\',0,12,1
	.word	.L232,.L231
	.byte	2
	.word	.L115
	.byte	3
	.byte	'.cocofun_1',0,1,175,1,24,1
	.word	.L90,.L233,.L89
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('.cocofun_1')
	.sect	'.debug_abbrev'
.L230:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,0,3,8,58,15,59,15,57,15,54,15
	.byte	17,1,18,1,64,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('.cocofun_1')
	.sect	'.debug_line'
.L231:
	.word	.L690-.L689
.L689:
	.half	3
	.word	.L692-.L691
.L691:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Asclin\\Std\\IfxAsclin.c',0,0,0,0,0
.L692:
	.byte	5,63,7,0,5,2
	.word	.L90
	.byte	3,176,1,1,9
	.half	.L233-.L90
	.byte	0,1,1,5,63,0,5,2
	.word	.L90
	.byte	3,176,1,1,9
	.half	.L693-.L90
	.byte	3,6,1,9
	.half	.L694-.L693
	.byte	3,122,1,7,9
	.half	.L233-.L694
	.byte	0,1,1
.L690:
	.sdecl	'.debug_ranges',debug,cluster('.cocofun_1')
	.sect	'.debug_ranges'
.L232:
	.word	-1,.L90,0,.L233-.L90,0,0
	.sdecl	'.debug_info',debug,cluster('.cocofun_2')
	.sect	'.debug_info'
.L234:
	.word	214
	.half	3
	.word	.L235
	.byte	4,1
	.byte	'..\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Asclin\\Std\\IfxAsclin.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'E:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\Debug\\',0,12,1
	.word	.L237,.L236
	.byte	2
	.word	.L115
	.byte	3
	.byte	'.cocofun_2',0,1,248,1,6,1
	.word	.L104,.L238,.L103
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('.cocofun_2')
	.sect	'.debug_abbrev'
.L235:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,0,3,8,58,15,59,15,57,15,54,15
	.byte	17,1,18,1,64,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('.cocofun_2')
	.sect	'.debug_line'
.L236:
	.word	.L696-.L695
.L695:
	.half	3
	.word	.L698-.L697
.L697:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Asclin\\Std\\IfxAsclin.c',0,0,0,0
	.byte	'..\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Asclin\\Std\\IfxAsclin.h',0,0,0,0,0
.L698:
	.byte	4,2,5,18,7,0,5,2
	.word	.L104
	.byte	3,144,18,1,5,29,9
	.half	.L478-.L104
	.byte	1,9
	.half	.L238-.L478
	.byte	0,1,1,5,18,0,5,2
	.word	.L104
	.byte	3,213,2,1,5,31,9
	.half	.L478-.L104
	.byte	1,4,2,5,29,9
	.half	.L477-.L478
	.byte	3,187,15,1,7,9
	.half	.L238-.L477
	.byte	0,1,1
.L696:
	.sdecl	'.debug_ranges',debug,cluster('.cocofun_2')
	.sect	'.debug_ranges'
.L237:
	.word	-1,.L104,0,.L238-.L104,0,0
	.sdecl	'.debug_info',debug,cluster('.cocofun_3')
	.sect	'.debug_info'
.L239:
	.word	214
	.half	3
	.word	.L240
	.byte	4,1
	.byte	'..\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Asclin\\Std\\IfxAsclin.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'E:\\tasking workspace\\AICT-1of LQ_TC26xB_LIBtasking0512\\Debug\\',0,12,1
	.word	.L242,.L241
	.byte	2
	.word	.L115
	.byte	3
	.byte	'.cocofun_3',0,1,169,1,24,1
	.word	.L86,.L243,.L85
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('.cocofun_3')
	.sect	'.debug_abbrev'
.L240:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,0,3,8,58,15,59,15,57,15,54,15
	.byte	17,1,18,1,64,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('.cocofun_3')
	.sect	'.debug_line'
.L241:
	.word	.L700-.L699
.L699:
	.half	3
	.word	.L702-.L701
.L701:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Asclin\\Std\\IfxAsclin.c',0,0,0,0,0
.L702:
	.byte	5,63,7,0,5,2
	.word	.L86
	.byte	3,170,1,1,9
	.half	.L243-.L86
	.byte	0,1,1,5,63,0,5,2
	.word	.L86
	.byte	3,176,1,1,9
	.half	.L703-.L86
	.byte	3,122,1,7,9
	.half	.L243-.L703
	.byte	0,1,1,5,63,0,5,2
	.word	.L86
	.byte	3,182,1,1,9
	.half	.L703-.L86
	.byte	3,116,1,7,9
	.half	.L243-.L703
	.byte	0,1,1
.L700:
	.sdecl	'.debug_ranges',debug,cluster('.cocofun_3')
	.sect	'.debug_ranges'
.L242:
	.word	-1,.L86,0,.L243-.L86,0,0
	.sdecl	'.debug_loc',debug,cluster('.cocofun_1')
	.sect	'.debug_loc'
.L89:
	.word	-1,.L90,0,.L233-.L90
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('.cocofun_2')
	.sect	'.debug_loc'
.L103:
	.word	-1,.L104,0,.L238-.L104
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('.cocofun_3')
	.sect	'.debug_loc'
.L85:
	.word	-1,.L86,0,.L243-.L86
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxAsclin_disableModule')
	.sect	'.debug_loc'
.L65:
	.word	-1,.L66,0,.L313-.L66
	.half	2
	.byte	138,0
	.word	0,0
.L314:
	.word	-1,.L66,0,.L447-.L66
	.half	1
	.byte	100
	.word	.L448-.L66,.L313-.L66
	.half	1
	.byte	111
	.word	0,0
.L320:
	.word	0,0
.L315:
	.word	-1,.L66,.L447-.L66,.L449-.L66
	.half	1
	.byte	82
	.word	.L450-.L66,.L313-.L66
	.half	1
	.byte	88
	.word	.L317-.L66,.L313-.L66
	.half	1
	.byte	84
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxAsclin_enableAscErrorFlags')
	.sect	'.debug_loc'
.L67:
	.word	-1,.L68,0,.L322-.L68
	.half	2
	.byte	138,0
	.word	0,0
.L323:
	.word	-1,.L68,0,.L322-.L68
	.half	1
	.byte	100
	.word	0,0
.L329:
	.word	0,0
.L336:
	.word	0,0
.L331:
	.word	0,0
.L338:
	.word	0,0
.L324:
	.word	-1,.L68,0,.L322-.L68
	.half	1
	.byte	84
	.word	0,0
.L325:
	.word	-1,.L68,0,.L322-.L68
	.half	1
	.byte	85
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxAsclin_enableModule')
	.sect	'.debug_loc'
.L69:
	.word	-1,.L70,0,.L340-.L70
	.half	2
	.byte	138,0
	.word	0,0
.L341:
	.word	-1,.L70,0,.L451-.L70
	.half	1
	.byte	100
	.word	.L452-.L70,.L340-.L70
	.half	1
	.byte	111
	.word	0,0
.L347:
	.word	0,0
.L342:
	.word	-1,.L70,.L451-.L70,.L453-.L70
	.half	1
	.byte	82
	.word	.L454-.L70,.L340-.L70
	.half	1
	.byte	95
	.word	.L344-.L70,.L340-.L70
	.half	1
	.byte	84
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxAsclin_getAddress')
	.sect	'.debug_loc'
.L71:
	.word	-1,.L72,0,.L245-.L72
	.half	2
	.byte	138,0
	.word	0,0
.L247:
	.word	-1,.L72,0,.L245-.L72
	.half	1
	.byte	84
	.word	0,0
.L248:
	.word	-1,.L72,.L455-.L72,.L2-.L72
	.half	1
	.byte	98
	.word	.L456-.L72,.L245-.L72
	.half	1
	.byte	98
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxAsclin_getFaFrequency')
	.sect	'.debug_loc'
.L73:
	.word	-1,.L74,0,.L250-.L74
	.half	2
	.byte	138,0
	.word	0,0
.L251:
	.word	-1,.L74,0,.L250-.L74
	.half	1
	.byte	100
	.word	0,0
.L256:
	.word	0,0
.L252:
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxAsclin_getIndex')
	.sect	'.debug_loc'
.L75:
	.word	-1,.L76,0,.L258-.L76
	.half	2
	.byte	138,0
	.word	0,0
.L259:
	.word	-1,.L76,0,.L258-.L76
	.half	1
	.byte	100
	.word	0,0
.L261:
	.word	0,0
.L262:
	.word	-1,.L76,.L457-.L76,.L258-.L76
	.half	1
	.byte	82
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxAsclin_getOvsFrequency')
	.sect	'.debug_loc'
.L77:
	.word	-1,.L78,0,.L263-.L78
	.half	2
	.byte	138,0
	.word	0,0
.L264:
	.word	-1,.L78,0,.L458-.L78
	.half	1
	.byte	100
	.word	.L459-.L78,.L263-.L78
	.half	1
	.byte	111
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxAsclin_getPdFrequency')
	.sect	'.debug_loc'
.L79:
	.word	-1,.L80,0,.L265-.L80
	.half	2
	.byte	138,0
	.word	0,0
.L266:
	.word	-1,.L80,0,.L460-.L80
	.half	1
	.byte	100
	.word	.L461-.L80,.L265-.L80
	.half	1
	.byte	111
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxAsclin_getShiftFrequency')
	.sect	'.debug_loc'
.L81:
	.word	-1,.L82,0,.L267-.L82
	.half	2
	.byte	138,0
	.word	0,0
.L268:
	.word	-1,.L82,0,.L462-.L82
	.half	1
	.byte	100
	.word	.L463-.L82,.L267-.L82
	.half	1
	.byte	111
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxAsclin_getSrcPointerEr')
	.sect	'.debug_loc'
.L83:
	.word	-1,.L84,0,.L350-.L84
	.half	2
	.byte	138,0
	.word	0,0
.L351:
	.word	-1,.L84,0,.L464-.L84
	.half	1
	.byte	100
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxAsclin_getSrcPointerRx')
	.sect	'.debug_loc'
.L87:
	.word	-1,.L88,0,.L353-.L88
	.half	2
	.byte	138,0
	.word	0,0
.L354:
	.word	-1,.L88,0,.L465-.L88
	.half	1
	.byte	100
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxAsclin_getSrcPointerTx')
	.sect	'.debug_loc'
.L91:
	.word	-1,.L92,0,.L356-.L92
	.half	2
	.byte	138,0
	.word	0,0
.L357:
	.word	-1,.L92,0,.L466-.L92
	.half	1
	.byte	100
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxAsclin_read16')
	.sect	'.debug_loc'
.L93:
	.word	-1,.L94,0,.L358-.L94
	.half	2
	.byte	138,0
	.word	0,0
.L359:
	.word	-1,.L94,0,.L358-.L94
	.half	1
	.byte	100
	.word	0,0
.L362:
	.word	-1,.L94,0,.L358-.L94
	.half	1
	.byte	84
	.word	0,0
.L361:
	.word	-1,.L94,0,.L358-.L94
	.half	1
	.byte	101
	.word	0,0
.L364:
	.word	-1,.L94,.L467-.L94,.L358-.L94
	.half	1
	.byte	111
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxAsclin_read32')
	.sect	'.debug_loc'
.L95:
	.word	-1,.L96,0,.L365-.L96
	.half	2
	.byte	138,0
	.word	0,0
.L366:
	.word	-1,.L96,0,.L365-.L96
	.half	1
	.byte	100
	.word	0,0
.L369:
	.word	-1,.L96,0,.L365-.L96
	.half	1
	.byte	84
	.word	0,0
.L368:
	.word	-1,.L96,0,.L365-.L96
	.half	1
	.byte	101
	.word	0,0
.L370:
	.word	-1,.L96,.L468-.L96,.L365-.L96
	.half	1
	.byte	111
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxAsclin_read8')
	.sect	'.debug_loc'
.L97:
	.word	-1,.L98,0,.L371-.L98
	.half	2
	.byte	138,0
	.word	0,0
.L372:
	.word	-1,.L98,0,.L371-.L98
	.half	1
	.byte	100
	.word	0,0
.L375:
	.word	-1,.L98,0,.L371-.L98
	.half	1
	.byte	84
	.word	0,0
.L374:
	.word	-1,.L98,0,.L371-.L98
	.half	1
	.byte	101
	.word	0,0
.L376:
	.word	-1,.L98,.L469-.L98,.L371-.L98
	.half	1
	.byte	111
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxAsclin_resetModule')
	.sect	'.debug_loc'
.L99:
	.word	-1,.L100,0,.L269-.L100
	.half	2
	.byte	138,0
	.word	0,0
.L270:
	.word	-1,.L100,0,.L470-.L100
	.half	1
	.byte	100
	.word	.L471-.L100,.L269-.L100
	.half	1
	.byte	111
	.word	0,0
.L272:
	.word	-1,.L100,.L470-.L100,.L472-.L100
	.half	1
	.byte	82
	.word	.L473-.L100,.L269-.L100
	.half	1
	.byte	88
	.word	.L474-.L100,.L36-.L100
	.half	1
	.byte	84
	.word	.L475-.L100,.L269-.L100
	.half	1
	.byte	84
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxAsclin_setBaudrateBitFields')
	.sect	'.debug_loc'
.L101:
	.word	-1,.L102,0,.L377-.L102
	.half	2
	.byte	138,0
	.word	0,0
.L378:
	.word	-1,.L102,0,.L390-.L102
	.half	1
	.byte	100
	.word	.L383-.L102,.L391-.L102
	.half	1
	.byte	111
	.word	.L104-.L102,.L477-.L102
	.half	1
	.byte	111
	.word	.L398-.L102,.L377-.L102
	.half	1
	.byte	111
	.word	.L413-.L102,.L377-.L102
	.half	1
	.byte	100
	.word	0,0
.L385:
	.word	0,0
.L408:
	.word	0,0
.L400:
	.word	0,0
.L418:
	.word	0,0
.L393:
	.word	0,0
.L381:
	.word	-1,.L102,0,.L390-.L102
	.half	1
	.byte	86
	.word	.L413-.L102,.L414-.L102
	.half	1
	.byte	90
	.word	0,0
.L410:
	.word	0,0
.L380:
	.word	-1,.L102,0,.L390-.L102
	.half	1
	.byte	85
	.word	.L478-.L102,.L477-.L102
	.half	1
	.byte	89
	.word	0,0
.L402:
	.word	0,0
.L382:
	.word	-1,.L102,0,.L390-.L102
	.half	1
	.byte	87
	.word	.L479-.L102,.L416-.L102
	.half	1
	.byte	91
	.word	0,0
.L420:
	.word	0,0
.L379:
	.word	-1,.L102,0,.L476-.L102
	.half	1
	.byte	84
	.word	0,0
.L395:
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxAsclin_setBitTiming')
	.sect	'.debug_loc'
.L105:
	.word	-1,.L106,0,.L296-.L106
	.half	2
	.byte	138,0
	.word	.L296-.L106,.L274-.L106
	.half	2
	.byte	138,24
	.word	.L274-.L106,.L274-.L106
	.half	2
	.byte	138,0
	.word	0,0
.L310:
	.word	-1,.L106,.L45-.L106,.L40-.L106
	.half	1
	.byte	92
	.word	0,0
.L309:
	.word	-1,.L106,.L495-.L106,.L42-.L106
	.half	1
	.byte	86
	.word	.L497-.L106,.L40-.L106
	.half	1
	.byte	86
	.word	0,0
.L311:
	.word	-1,.L106,.L304-.L106,.L483-.L106
	.half	1
	.byte	83
	.word	0,0
.L275:
	.word	-1,.L106,0,.L480-.L106
	.half	1
	.byte	100
	.word	.L292-.L106,.L481-.L106
	.half	1
	.byte	111
	.word	.L485-.L106,.L483-.L106
	.half	1
	.byte	100
	.word	.L104-.L106,.L238-.L106
	.half	1
	.byte	111
	.word	.L503-.L106,.L274-.L106
	.half	1
	.byte	111
	.word	.L505-.L106,.L506-.L106
	.half	1
	.byte	100
	.word	0,0
.L294:
	.word	0,0
.L276:
	.word	-1,.L106,0,.L480-.L106
	.half	1
	.byte	84
	.word	.L304-.L106,.L305-.L106
	.half	1
	.byte	89
	.word	0,0
.L312:
	.word	0,0
.L286:
	.word	-1,.L106,.L488-.L106,.L483-.L106
	.half	1
	.byte	81
	.word	0,0
.L288:
	.word	-1,.L106,.L490-.L106,.L41-.L106
	.half	1
	.byte	88
	.word	.L502-.L106,.L481-.L106
	.half	1
	.byte	88
	.word	0,0
.L290:
	.word	-1,.L106,.L491-.L106,.L492-.L106
	.half	5
	.byte	144,32,157,32,0
	.word	.L498-.L106,.L499-.L106
	.half	1
	.byte	95
	.word	0,0
.L285:
	.word	-1,.L106,.L305-.L106,.L485-.L106
	.half	1
	.byte	84
	.word	0,0
.L291:
	.word	-1,.L106,.L480-.L106,.L483-.L106
	.half	1
	.byte	82
	.word	0,0
.L307:
	.word	-1,.L106,.L486-.L106,.L481-.L106
	.half	2
	.byte	145,104
	.word	.L486-.L106,.L487-.L106
	.half	1
	.byte	95
	.word	.L492-.L106,.L41-.L106
	.half	5
	.byte	144,32,157,32,0
	.word	.L500-.L106,.L501-.L106
	.half	1
	.byte	95
	.word	.L104-.L106,.L238-.L106
	.half	2
	.byte	145,104
	.word	.L503-.L106,.L274-.L106
	.half	2
	.byte	145,104
	.word	0,0
.L282:
	.word	-1,.L106,0,.L480-.L106
	.half	1
	.byte	87
	.word	.L297-.L106,.L481-.L106
	.half	2
	.byte	145,116
	.word	.L104-.L106,.L238-.L106
	.half	2
	.byte	145,116
	.word	.L503-.L106,.L274-.L106
	.half	2
	.byte	145,116
	.word	.L509-.L106,.L510-.L106
	.half	1
	.byte	95
	.word	0,0
.L287:
	.word	-1,.L106,.L494-.L106,.L481-.L106
	.half	1
	.byte	93
	.word	.L104-.L106,.L238-.L106
	.half	1
	.byte	93
	.word	.L503-.L106,.L274-.L106
	.half	1
	.byte	93
	.word	0,0
.L289:
	.word	-1,.L106,.L489-.L106,.L41-.L106
	.half	1
	.byte	89
	.word	.L496-.L106,.L497-.L106
	.half	1
	.byte	89
	.word	.L478-.L106,.L478-.L106
	.half	1
	.byte	89
	.word	0,0
.L278:
	.word	-1,.L106,0,.L480-.L106
	.half	1
	.byte	85
	.word	.L484-.L106,.L299-.L106
	.half	1
	.byte	95
	.word	.L484-.L106,.L481-.L106
	.half	2
	.byte	145,108
	.word	.L301-.L106,.L303-.L106
	.half	1
	.byte	95
	.word	.L104-.L106,.L238-.L106
	.half	2
	.byte	145,108
	.word	.L503-.L106,.L274-.L106
	.half	2
	.byte	145,108
	.word	.L504-.L106,.L505-.L106
	.half	1
	.byte	95
	.word	0,0
.L306:
	.word	-1,.L106,.L493-.L106,.L481-.L106
	.half	1
	.byte	91
	.word	.L104-.L106,.L238-.L106
	.half	1
	.byte	91
	.word	.L503-.L106,.L274-.L106
	.half	1
	.byte	91
	.word	0,0
.L280:
	.word	-1,.L106,0,.L480-.L106
	.half	1
	.byte	86
	.word	.L482-.L106,.L299-.L106
	.half	1
	.byte	90
	.word	.L299-.L106,.L301-.L106
	.half	1
	.byte	95
	.word	.L299-.L106,.L481-.L106
	.half	2
	.byte	145,112
	.word	.L104-.L106,.L238-.L106
	.half	2
	.byte	145,112
	.word	.L503-.L106,.L274-.L106
	.half	2
	.byte	145,112
	.word	.L507-.L106,.L508-.L106
	.half	1
	.byte	95
	.word	0,0
.L284:
	.word	0,0
.L308:
	.word	-1,.L106,.L300-.L106,.L483-.L106
	.half	1
	.byte	85
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxAsclin_setClockSource')
	.sect	'.debug_loc'
.L107:
	.word	-1,.L108,0,.L422-.L108
	.half	2
	.byte	138,0
	.word	0,0
.L423:
	.word	-1,.L108,0,.L422-.L108
	.half	1
	.byte	100
	.word	0,0
.L428:
	.word	0,0
.L424:
	.word	-1,.L108,0,.L422-.L108
	.half	1
	.byte	84
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxAsclin_write16')
	.sect	'.debug_loc'
.L109:
	.word	-1,.L110,0,.L431-.L110
	.half	2
	.byte	138,0
	.word	0,0
.L432:
	.word	-1,.L110,0,.L431-.L110
	.half	1
	.byte	100
	.word	0,0
.L434:
	.word	-1,.L110,0,.L431-.L110
	.half	1
	.byte	84
	.word	0,0
.L433:
	.word	-1,.L110,0,.L431-.L110
	.half	1
	.byte	101
	.word	0,0
.L436:
	.word	-1,.L110,.L511-.L110,.L431-.L110
	.half	1
	.byte	111
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxAsclin_write32')
	.sect	'.debug_loc'
.L111:
	.word	-1,.L112,0,.L437-.L112
	.half	2
	.byte	138,0
	.word	0,0
.L438:
	.word	-1,.L112,0,.L437-.L112
	.half	1
	.byte	100
	.word	0,0
.L440:
	.word	-1,.L112,0,.L437-.L112
	.half	1
	.byte	84
	.word	0,0
.L439:
	.word	-1,.L112,0,.L437-.L112
	.half	1
	.byte	101
	.word	0,0
.L441:
	.word	-1,.L112,.L512-.L112,.L437-.L112
	.half	1
	.byte	111
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxAsclin_write8')
	.sect	'.debug_loc'
.L113:
	.word	-1,.L114,0,.L442-.L114
	.half	2
	.byte	138,0
	.word	0,0
.L443:
	.word	-1,.L114,0,.L442-.L114
	.half	1
	.byte	100
	.word	0,0
.L445:
	.word	-1,.L114,0,.L442-.L114
	.half	1
	.byte	84
	.word	0,0
.L444:
	.word	-1,.L114,0,.L442-.L114
	.half	1
	.byte	101
	.word	0,0
.L446:
	.word	-1,.L114,.L513-.L114,.L442-.L114
	.half	1
	.byte	111
	.word	0,0
	.sdecl	'.debug_frame',debug
	.sect	'.debug_frame'
.L704:
	.word	48
	.word	-1
	.byte	3,0,2,1,27,12,26,0,8,27,8,26,8,28,8,29,8,30,8,31,8,34,8,35,8,32,8,33,8,16,8,17,8,24,8,25,8,36,8,37,8,38
	.byte	8,39
	.sdecl	'.debug_frame',debug,cluster('IfxAsclin_disableModule')
	.sect	'.debug_frame'
	.word	12
	.word	.L704,.L66,.L313-.L66
	.sdecl	'.debug_frame',debug,cluster('IfxAsclin_enableAscErrorFlags')
	.sect	'.debug_frame'
	.word	24
	.word	.L704,.L68,.L322-.L68
	.byte	8,18,8,19,8,21,8,22,8,23,0,0
	.sdecl	'.debug_frame',debug,cluster('IfxAsclin_enableModule')
	.sect	'.debug_frame'
	.word	12
	.word	.L704,.L70,.L340-.L70
	.sdecl	'.debug_frame',debug,cluster('IfxAsclin_getAddress')
	.sect	'.debug_frame'
	.word	24
	.word	.L704,.L72,.L245-.L72
	.byte	8,19,8,20,8,21,8,22,8,23,0,0
	.sdecl	'.debug_frame',debug,cluster('IfxAsclin_getFaFrequency')
	.sect	'.debug_frame'
	.word	12
	.word	.L704,.L74,.L250-.L74
	.sdecl	'.debug_frame',debug,cluster('IfxAsclin_getIndex')
	.sect	'.debug_frame'
	.word	20
	.word	.L704,.L76,.L258-.L76
	.byte	8,19,8,22,8,23,0,0
	.sdecl	'.debug_frame',debug,cluster('IfxAsclin_getOvsFrequency')
	.sect	'.debug_frame'
	.word	12
	.word	.L704,.L78,.L263-.L78
	.sdecl	'.debug_frame',debug,cluster('IfxAsclin_getPdFrequency')
	.sect	'.debug_frame'
	.word	12
	.word	.L704,.L80,.L265-.L80
	.sdecl	'.debug_frame',debug,cluster('IfxAsclin_getShiftFrequency')
	.sect	'.debug_frame'
	.word	12
	.word	.L704,.L82,.L267-.L82
	.sdecl	'.debug_frame',debug,cluster('IfxAsclin_getSrcPointerEr')
	.sect	'.debug_frame'
	.word	12
	.word	.L704,.L84,.L350-.L84
	.sdecl	'.debug_frame',debug,cluster('IfxAsclin_getSrcPointerRx')
	.sect	'.debug_frame'
	.word	12
	.word	.L704,.L88,.L353-.L88
	.sdecl	'.debug_frame',debug,cluster('IfxAsclin_getSrcPointerTx')
	.sect	'.debug_frame'
	.word	12
	.word	.L704,.L92,.L356-.L92
	.sdecl	'.debug_frame',debug,cluster('IfxAsclin_read16')
	.sect	'.debug_frame'
	.word	20
	.word	.L704,.L94,.L358-.L94
	.byte	8,18,8,19,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('IfxAsclin_read32')
	.sect	'.debug_frame'
	.word	20
	.word	.L704,.L96,.L365-.L96
	.byte	8,18,8,19,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('IfxAsclin_read8')
	.sect	'.debug_frame'
	.word	20
	.word	.L704,.L98,.L371-.L98
	.byte	8,18,8,19,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('IfxAsclin_resetModule')
	.sect	'.debug_frame'
	.word	12
	.word	.L704,.L100,.L269-.L100
	.sdecl	'.debug_frame',debug,cluster('IfxAsclin_setBaudrateBitFields')
	.sect	'.debug_frame'
	.word	12
	.word	.L704,.L102,.L377-.L102
	.sdecl	'.debug_frame',debug,cluster('IfxAsclin_setBitTiming')
	.sect	'.debug_frame'
	.word	36
	.word	.L704,.L106,.L274-.L106
	.byte	4
	.word	(.L296-.L106)/2
	.byte	19,24,22,26,3,19,138,24,4
	.word	(.L274-.L296)/2
	.byte	19,0,8,26,0,0
	.sdecl	'.debug_frame',debug,cluster('IfxAsclin_setClockSource')
	.sect	'.debug_frame'
	.word	24
	.word	.L704,.L108,.L422-.L108
	.byte	8,18,8,19,8,21,8,22,8,23,0,0
	.sdecl	'.debug_frame',debug,cluster('IfxAsclin_write16')
	.sect	'.debug_frame'
	.word	20
	.word	.L704,.L110,.L431-.L110
	.byte	8,18,8,19,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('IfxAsclin_write32')
	.sect	'.debug_frame'
	.word	20
	.word	.L704,.L112,.L437-.L112
	.byte	8,18,8,19,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('IfxAsclin_write8')
	.sect	'.debug_frame'
	.word	20
	.word	.L704,.L114,.L442-.L114
	.byte	8,18,8,19,8,22,8,23
	.sdecl	'.debug_frame',debug
	.sect	'.debug_frame'
.L705:
	.word	52
	.word	-1
	.byte	3,0,2,1,40,12,26,0,9,40,27,155,0,7,26,8,28,8,29,8,30,8,31,8,34,8,35,8,32,8,33,8,16,8,17,8,24,8,25,8,36
	.byte	8,37,8,38,8,39,0
	.sdecl	'.debug_frame',debug,cluster('.cocofun_3')
	.sect	'.debug_frame'
	.word	24
	.word	.L705,.L86,.L243-.L86
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('.cocofun_1')
	.sect	'.debug_frame'
	.word	24
	.word	.L705,.L90,.L233-.L90
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('.cocofun_2')
	.sect	'.debug_frame'
	.word	24
	.word	.L705,.L104,.L238-.L104
	.byte	8,18,8,19,8,20,8,21,8,22,8,23


	; Module end
