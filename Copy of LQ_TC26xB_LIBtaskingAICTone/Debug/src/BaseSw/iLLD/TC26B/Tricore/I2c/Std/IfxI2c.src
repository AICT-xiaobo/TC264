	; Module start
	.compiler_version	"TASKING VX-toolset for TriCore: C compiler v6.3r1 Build 19041558 SN 99293038"
	.compiler_invocation	"ctc --dep-file=src\\BaseSw\\iLLD\\TC26B\\Tricore\\I2c\\Std\\.IfxI2c.o.d --fp-model=c,f,l,n,r,S,T,z -D__CPU__=tc27xd -D__CPU_TC27XD__ --core=tc1.6.x --iso=99 -IE:\\tasking workspace\\Copy of LQ_TC26xB_LIBtaskingAICTone -IE:\\tasking workspace\\Copy of LQ_TC26xB_LIBtaskingAICTone\\src -IE:\\tasking workspace\\Copy of LQ_TC26xB_LIBtaskingAICTone\\src\\AppSw\\Tricore -IE:\\tasking workspace\\Copy of LQ_TC26xB_LIBtaskingAICTone\\src\\AppSw\\Tricore\\APP -IE:\\tasking workspace\\Copy of LQ_TC26xB_LIBtaskingAICTone\\src\\AppSw\\Tricore\\Main -IE:\\tasking workspace\\Copy of LQ_TC26xB_LIBtaskingAICTone\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Cpu -IE:\\tasking workspace\\Copy of LQ_TC26xB_LIBtaskingAICTone\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Cpu\\CStart -IE:\\tasking workspace\\Copy of LQ_TC26xB_LIBtaskingAICTone\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Cpu\\Irq -IE:\\tasking workspace\\Copy of LQ_TC26xB_LIBtaskingAICTone\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Cpu\\Std -IE:\\tasking workspace\\Copy of LQ_TC26xB_LIBtaskingAICTone\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Cpu\\Trap -IE:\\tasking workspace\\Copy of LQ_TC26xB_LIBtaskingAICTone\\src\\AppSw -IE:\\tasking workspace\\Copy of LQ_TC26xB_LIBtaskingAICTone\\src\\BaseSw -IE:\\tasking workspace\\Copy of LQ_TC26xB_LIBtaskingAICTone\\src\\BaseSw\\iLLD -IE:\\tasking workspace\\Copy of LQ_TC26xB_LIBtaskingAICTone\\src\\BaseSw\\iLLD\\TC26B -IE:\\tasking workspace\\Copy of LQ_TC26xB_LIBtaskingAICTone\\src\\BaseSw\\iLLD\\TC26B\\Tricore -IE:\\tasking workspace\\Copy of LQ_TC26xB_LIBtaskingAICTone\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\_Build -IE:\\tasking workspace\\Copy of LQ_TC26xB_LIBtaskingAICTone\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\_Impl -IE:\\tasking workspace\\Copy of LQ_TC26xB_LIBtaskingAICTone\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\_Lib -IE:\\tasking workspace\\Copy of LQ_TC26xB_LIBtaskingAICTone\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\_Lib\\DataHandling -IE:\\tasking workspace\\Copy of LQ_TC26xB_LIBtaskingAICTone\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\_Lib\\InternalMux -IE:\\tasking workspace\\Copy of LQ_TC26xB_LIBtaskingAICTone\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\_PinMap -IE:\\tasking workspace\\Copy of LQ_TC26xB_LIBtaskingAICTone\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Asclin -IE:\\tasking workspace\\Copy of LQ_TC26xB_LIBtaskingAICTone\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Ccu6 -IE:\\tasking workspace\\Copy of LQ_TC26xB_LIBtaskingAICTone\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Cif -IE:\\tasking workspace\\Copy of LQ_TC26xB_LIBtaskingAICTone\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Cpu -IE:\\tasking workspace\\Copy of LQ_TC26xB_LIBtaskingAICTone\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Dma -IE:\\tasking workspace\\Copy of LQ_TC26xB_LIBtaskingAICTone\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Dsadc -IE:\\tasking workspace\\Copy of LQ_TC26xB_LIBtaskingAICTone\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Dts -IE:\\tasking workspace\\Copy of LQ_TC26xB_LIBtaskingAICTone\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Emem -IE:\\tasking workspace\\Copy of LQ_TC26xB_LIBtaskingAICTone\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Eray -IE:\\tasking workspace\\Copy of LQ_TC26xB_LIBtaskingAICTone\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Eth -IE:\\tasking workspace\\Copy of LQ_TC26xB_LIBtaskingAICTone\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Fce -IE:\\tasking workspace\\Copy of LQ_TC26xB_LIBtaskingAICTone\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Fft -IE:\\tasking workspace\\Copy of LQ_TC26xB_LIBtaskingAICTone\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Flash -IE:\\tasking workspace\\Copy of LQ_TC26xB_LIBtaskingAICTone\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Gpt12 -IE:\\tasking workspace\\Copy of LQ_TC26xB_LIBtaskingAICTone\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Gtm -IE:\\tasking workspace\\Copy of LQ_TC26xB_LIBtaskingAICTone\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Hssl -IE:\\tasking workspace\\Copy of LQ_TC26xB_LIBtaskingAICTone\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\I2c -IE:\\tasking workspace\\Copy of LQ_TC26xB_LIBtaskingAICTone\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Iom -IE:\\tasking workspace\\Copy of LQ_TC26xB_LIBtaskingAICTone\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Msc -IE:\\tasking workspace\\Copy of LQ_TC26xB_LIBtaskingAICTone\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Mtu -IE:\\tasking workspace\\Copy of LQ_TC26xB_LIBtaskingAICTone\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Multican -IE:\\tasking workspace\\Copy of LQ_TC26xB_LIBtaskingAICTone\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Port -IE:\\tasking workspace\\Copy of LQ_TC26xB_LIBtaskingAICTone\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Psi5 -IE:\\tasking workspace\\Copy of LQ_TC26xB_LIBtaskingAICTone\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Psi5s -IE:\\tasking workspace\\Copy of LQ_TC26xB_LIBtaskingAICTone\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Qspi -IE:\\tasking workspace\\Copy of LQ_TC26xB_LIBtaskingAICTone\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Scu -IE:\\tasking workspace\\Copy of LQ_TC26xB_LIBtaskingAICTone\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Sent -IE:\\tasking workspace\\Copy of LQ_TC26xB_LIBtaskingAICTone\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Smu -IE:\\tasking workspace\\Copy of LQ_TC26xB_LIBtaskingAICTone\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Src -IE:\\tasking workspace\\Copy of LQ_TC26xB_LIBtaskingAICTone\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Stm -IE:\\tasking workspace\\Copy of LQ_TC26xB_LIBtaskingAICTone\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Vadc -IE:\\tasking workspace\\Copy of LQ_TC26xB_LIBtaskingAICTone\\src\\BaseSw\\Infra -IE:\\tasking workspace\\Copy of LQ_TC26xB_LIBtaskingAICTone\\src\\BaseSw\\Infra\\Platform -IE:\\tasking workspace\\Copy of LQ_TC26xB_LIBtaskingAICTone\\src\\BaseSw\\Infra\\Platform\\Tricore -IE:\\tasking workspace\\Copy of LQ_TC26xB_LIBtaskingAICTone\\src\\BaseSw\\Infra\\Platform\\Tricore\\Compilers -IE:\\tasking workspace\\Copy of LQ_TC26xB_LIBtaskingAICTone\\src\\BaseSw\\Infra\\Sfr -IE:\\tasking workspace\\Copy of LQ_TC26xB_LIBtaskingAICTone\\src\\BaseSw\\Infra\\Sfr\\TC26B -IE:\\tasking workspace\\Copy of LQ_TC26xB_LIBtaskingAICTone\\src\\BaseSw\\Infra\\Sfr\\TC26B\\_Reg -IE:\\tasking workspace\\Copy of LQ_TC26xB_LIBtaskingAICTone\\src\\BaseSw\\Service -IE:\\tasking workspace\\Copy of LQ_TC26xB_LIBtaskingAICTone\\src\\BaseSw\\Service\\CpuGeneric -IE:\\tasking workspace\\Copy of LQ_TC26xB_LIBtaskingAICTone\\src\\BaseSw\\Service\\CpuGeneric\\_Utilities -IE:\\tasking workspace\\Copy of LQ_TC26xB_LIBtaskingAICTone\\src\\BaseSw\\Service\\CpuGeneric\\If -IE:\\tasking workspace\\Copy of LQ_TC26xB_LIBtaskingAICTone\\src\\BaseSw\\Service\\CpuGeneric\\If\\Ccu6If -IE:\\tasking workspace\\Copy of LQ_TC26xB_LIBtaskingAICTone\\src\\BaseSw\\Service\\CpuGeneric\\StdIf -IE:\\tasking workspace\\Copy of LQ_TC26xB_LIBtaskingAICTone\\src\\BaseSw\\Service\\CpuGeneric\\SysSe -IE:\\tasking workspace\\Copy of LQ_TC26xB_LIBtaskingAICTone\\src\\BaseSw\\Service\\CpuGeneric\\SysSe\\Bsp -IE:\\tasking workspace\\Copy of LQ_TC26xB_LIBtaskingAICTone\\src\\BaseSw\\Service\\CpuGeneric\\SysSe\\Comm -IE:\\tasking workspace\\Copy of LQ_TC26xB_LIBtaskingAICTone\\src\\BaseSw\\Service\\CpuGeneric\\SysSe\\General -IE:\\tasking workspace\\Copy of LQ_TC26xB_LIBtaskingAICTone\\src\\BaseSw\\Service\\CpuGeneric\\SysSe\\Math -IE:\\tasking workspace\\Copy of LQ_TC26xB_LIBtaskingAICTone\\src\\BaseSw\\Service\\CpuGeneric\\SysSe\\Time -IE:\\tasking workspace\\Copy of LQ_TC26xB_LIBtaskingAICTone\\src -IE:\\tasking workspace\\Copy of LQ_TC26xB_LIBtaskingAICTone\\src\\AppSw -IE:\\tasking workspace\\Copy of LQ_TC26xB_LIBtaskingAICTone\\src\\AppSw\\Tricore\\APP -IE:\\tasking workspace\\Copy of LQ_TC26xB_LIBtaskingAICTone\\src\\AppSw\\Tricore\\Main -IE:\\tasking workspace\\Copy of LQ_TC26xB_LIBtaskingAICTone\\src\\AppSw\\Tricore\\Driver -IE:\\tasking workspace\\Copy of LQ_TC26xB_LIBtaskingAICTone\\src\\BaseSw -IE:\\tasking workspace\\Copy of LQ_TC26xB_LIBtaskingAICTone\\src\\BaseSw\\iLLD -IE:\\tasking workspace\\Copy of LQ_TC26xB_LIBtaskingAICTone\\src\\BaseSw\\iLLD\\TC26B -IE:\\tasking workspace\\Copy of LQ_TC26xB_LIBtaskingAICTone\\src\\BaseSw\\iLLD\\TC26B\\Tricore -IE:\\tasking workspace\\Copy of LQ_TC26xB_LIBtaskingAICTone\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\_Build -IE:\\tasking workspace\\Copy of LQ_TC26xB_LIBtaskingAICTone\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\_Impl -IE:\\tasking workspace\\Copy of LQ_TC26xB_LIBtaskingAICTone\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\_Lib -IE:\\tasking workspace\\Copy of LQ_TC26xB_LIBtaskingAICTone\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\_Lib\\DataHandling -IE:\\tasking workspace\\Copy of LQ_TC26xB_LIBtaskingAICTone\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\_Lib\\InternalMux -IE:\\tasking workspace\\Copy of LQ_TC26xB_LIBtaskingAICTone\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\_PinMap -IE:\\tasking workspace\\Copy of LQ_TC26xB_LIBtaskingAICTone\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Asclin -IE:\\tasking workspace\\Copy of LQ_TC26xB_LIBtaskingAICTone\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Asclin\\Asc -IE:\\tasking workspace\\Copy of LQ_TC26xB_LIBtaskingAICTone\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Asclin\\Lin -IE:\\tasking workspace\\Copy of LQ_TC26xB_LIBtaskingAICTone\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Asclin\\Spi -IE:\\tasking workspace\\Copy of LQ_TC26xB_LIBtaskingAICTone\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Asclin\\Std -IE:\\tasking workspace\\Copy of LQ_TC26xB_LIBtaskingAICTone\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Ccu6 -IE:\\tasking workspace\\Copy of LQ_TC26xB_LIBtaskingAICTone\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Ccu6\\Icu -IE:\\tasking workspace\\Copy of LQ_TC26xB_LIBtaskingAICTone\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Ccu6\\PwmBc -IE:\\tasking workspace\\Copy of LQ_TC26xB_LIBtaskingAICTone\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Ccu6\\PwmHl -IE:\\tasking workspace\\Copy of LQ_TC26xB_LIBtaskingAICTone\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Ccu6\\Std -IE:\\tasking workspace\\Copy of LQ_TC26xB_LIBtaskingAICTone\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Ccu6\\Timer -IE:\\tasking workspace\\Copy of LQ_TC26xB_LIBtaskingAICTone\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Ccu6\\TimerWithTrigger -IE:\\tasking workspace\\Copy of LQ_TC26xB_LIBtaskingAICTone\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Ccu6\\TPwm -IE:\\tasking workspace\\Copy of LQ_TC26xB_LIBtaskingAICTone\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Cif -IE:\\tasking workspace\\Copy of LQ_TC26xB_LIBtaskingAICTone\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Cif\\Cam -IE:\\tasking workspace\\Copy of LQ_TC26xB_LIBtaskingAICTone\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Cif\\Std -IE:\\tasking workspace\\Copy of LQ_TC26xB_LIBtaskingAICTone\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Cpu -IE:\\tasking workspace\\Copy of LQ_TC26xB_LIBtaskingAICTone\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Cpu\\CStart -IE:\\tasking workspace\\Copy of LQ_TC26xB_LIBtaskingAICTone\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Cpu\\Irq -IE:\\tasking workspace\\Copy of LQ_TC26xB_LIBtaskingAICTone\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Cpu\\Std -IE:\\tasking workspace\\Copy of LQ_TC26xB_LIBtaskingAICTone\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Cpu\\Trap -IE:\\tasking workspace\\Copy of LQ_TC26xB_LIBtaskingAICTone\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Dma -IE:\\tasking workspace\\Copy of LQ_TC26xB_LIBtaskingAICTone\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Dma\\Dma -IE:\\tasking workspace\\Copy of LQ_TC26xB_LIBtaskingAICTone\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Dma\\Std -IE:\\tasking workspace\\Copy of LQ_TC26xB_LIBtaskingAICTone\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Dsadc -IE:\\tasking workspace\\Copy of LQ_TC26xB_LIBtaskingAICTone\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Dsadc\\Dsadc -IE:\\tasking workspace\\Copy of LQ_TC26xB_LIBtaskingAICTone\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Dsadc\\Rdc -IE:\\tasking workspace\\Copy of LQ_TC26xB_LIBtaskingAICTone\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Dsadc\\Std -IE:\\tasking workspace\\Copy of LQ_TC26xB_LIBtaskingAICTone\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Dts -IE:\\tasking workspace\\Copy of LQ_TC26xB_LIBtaskingAICTone\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Dts\\Dts -IE:\\tasking workspace\\Copy of LQ_TC26xB_LIBtaskingAICTone\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Dts\\Std -IE:\\tasking workspace\\Copy of LQ_TC26xB_LIBtaskingAICTone\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Emem -IE:\\tasking workspace\\Copy of LQ_TC26xB_LIBtaskingAICTone\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Emem\\Std -IE:\\tasking workspace\\Copy of LQ_TC26xB_LIBtaskingAICTone\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Eray -IE:\\tasking workspace\\Copy of LQ_TC26xB_LIBtaskingAICTone\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Eray\\Eray -IE:\\tasking workspace\\Copy of LQ_TC26xB_LIBtaskingAICTone\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Eray\\Std -IE:\\tasking workspace\\Copy of LQ_TC26xB_LIBtaskingAICTone\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Eth -IE:\\tasking workspace\\Copy of LQ_TC26xB_LIBtaskingAICTone\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Eth\\Phy_Pef7071 -IE:\\tasking workspace\\Copy of LQ_TC26xB_LIBtaskingAICTone\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Eth\\Std -IE:\\tasking workspace\\Copy of LQ_TC26xB_LIBtaskingAICTone\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Fce -IE:\\tasking workspace\\Copy of LQ_TC26xB_LIBtaskingAICTone\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Fce\\Crc -IE:\\tasking workspace\\Copy of LQ_TC26xB_LIBtaskingAICTone\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Fce\\Std -IE:\\tasking workspace\\Copy of LQ_TC26xB_LIBtaskingAICTone\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Fft -IE:\\tasking workspace\\Copy of LQ_TC26xB_LIBtaskingAICTone\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Fft\\Fft -IE:\\tasking workspace\\Copy of LQ_TC26xB_LIBtaskingAICTone\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Fft\\Std -IE:\\tasking workspace\\Copy of LQ_TC26xB_LIBtaskingAICTone\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Flash -IE:\\tasking workspace\\Copy of LQ_TC26xB_LIBtaskingAICTone\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Flash\\Std -IE:\\tasking workspace\\Copy of LQ_TC26xB_LIBtaskingAICTone\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Gpt12 -IE:\\tasking workspace\\Copy of LQ_TC26xB_LIBtaskingAICTone\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Gpt12\\IncrEnc -IE:\\tasking workspace\\Copy of LQ_TC26xB_LIBtaskingAICTone\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Gpt12\\Std -IE:\\tasking workspace\\Copy of LQ_TC26xB_LIBtaskingAICTone\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Gtm -IE:\\tasking workspace\\Copy of LQ_TC26xB_LIBtaskingAICTone\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Gtm\\Atom -IE:\\tasking workspace\\Copy of LQ_TC26xB_LIBtaskingAICTone\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Gtm\\Atom\\Pwm -IE:\\tasking workspace\\Copy of LQ_TC26xB_LIBtaskingAICTone\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Gtm\\Atom\\PwmHl -IE:\\tasking workspace\\Copy of LQ_TC26xB_LIBtaskingAICTone\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Gtm\\Atom\\Timer -IE:\\tasking workspace\\Copy of LQ_TC26xB_LIBtaskingAICTone\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Gtm\\Std -IE:\\tasking workspace\\Copy of LQ_TC26xB_LIBtaskingAICTone\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Gtm\\Tim -IE:\\tasking workspace\\Copy of LQ_TC26xB_LIBtaskingAICTone\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Gtm\\Tim\\In -IE:\\tasking workspace\\Copy of LQ_TC26xB_LIBtaskingAICTone\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Gtm\\Tom -IE:\\tasking workspace\\Copy of LQ_TC26xB_LIBtaskingAICTone\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Gtm\\Tom\\Pwm -IE:\\tasking workspace\\Copy of LQ_TC26xB_LIBtaskingAICTone\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Gtm\\Tom\\PwmHl -IE:\\tasking workspace\\Copy of LQ_TC26xB_LIBtaskingAICTone\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Gtm\\Tom\\Timer -IE:\\tasking workspace\\Copy of LQ_TC26xB_LIBtaskingAICTone\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Gtm\\Trig -IE:\\tasking workspace\\Copy of LQ_TC26xB_LIBtaskingAICTone\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Hssl -IE:\\tasking workspace\\Copy of LQ_TC26xB_LIBtaskingAICTone\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Hssl\\Hssl -IE:\\tasking workspace\\Copy of LQ_TC26xB_LIBtaskingAICTone\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Hssl\\Std -IE:\\tasking workspace\\Copy of LQ_TC26xB_LIBtaskingAICTone\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\I2c -IE:\\tasking workspace\\Copy of LQ_TC26xB_LIBtaskingAICTone\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\I2c\\I2c -IE:\\tasking workspace\\Copy of LQ_TC26xB_LIBtaskingAICTone\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\I2c\\Std -IE:\\tasking workspace\\Copy of LQ_TC26xB_LIBtaskingAICTone\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Iom -IE:\\tasking workspace\\Copy of LQ_TC26xB_LIBtaskingAICTone\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Iom\\Driver -IE:\\tasking workspace\\Copy of LQ_TC26xB_LIBtaskingAICTone\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Iom\\Std -IE:\\tasking workspace\\Copy of LQ_TC26xB_LIBtaskingAICTone\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Msc -IE:\\tasking workspace\\Copy of LQ_TC26xB_LIBtaskingAICTone\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Msc\\Msc -IE:\\tasking workspace\\Copy of LQ_TC26xB_LIBtaskingAICTone\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Msc\\Std -IE:\\tasking workspace\\Copy of LQ_TC26xB_LIBtaskingAICTone\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Mtu -IE:\\tasking workspace\\Copy of LQ_TC26xB_LIBtaskingAICTone\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Mtu\\Std -IE:\\tasking workspace\\Copy of LQ_TC26xB_LIBtaskingAICTone\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Multican -IE:\\tasking workspace\\Copy of LQ_TC26xB_LIBtaskingAICTone\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Multican\\Can -IE:\\tasking workspace\\Copy of LQ_TC26xB_LIBtaskingAICTone\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Multican\\Std -IE:\\tasking workspace\\Copy of LQ_TC26xB_LIBtaskingAICTone\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Port -IE:\\tasking workspace\\Copy of LQ_TC26xB_LIBtaskingAICTone\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Port\\Io -IE:\\tasking workspace\\Copy of LQ_TC26xB_LIBtaskingAICTone\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Port\\Std -IE:\\tasking workspace\\Copy of LQ_TC26xB_LIBtaskingAICTone\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Psi5 -IE:\\tasking workspace\\Copy of LQ_TC26xB_LIBtaskingAICTone\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Psi5\\Psi5 -IE:\\tasking workspace\\Copy of LQ_TC26xB_LIBtaskingAICTone\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Psi5\\Std -IE:\\tasking workspace\\Copy of LQ_TC26xB_LIBtaskingAICTone\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Psi5s -IE:\\tasking workspace\\Copy of LQ_TC26xB_LIBtaskingAICTone\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Psi5s\\Psi5s -IE:\\tasking workspace\\Copy of LQ_TC26xB_LIBtaskingAICTone\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Psi5s\\Std -IE:\\tasking workspace\\Copy of LQ_TC26xB_LIBtaskingAICTone\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Qspi -IE:\\tasking workspace\\Copy of LQ_TC26xB_LIBtaskingAICTone\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Qspi\\SpiMaster -IE:\\tasking workspace\\Copy of LQ_TC26xB_LIBtaskingAICTone\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Qspi\\SpiSlave -IE:\\tasking workspace\\Copy of LQ_TC26xB_LIBtaskingAICTone\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Qspi\\Std -IE:\\tasking workspace\\Copy of LQ_TC26xB_LIBtaskingAICTone\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Scu -IE:\\tasking workspace\\Copy of LQ_TC26xB_LIBtaskingAICTone\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Scu\\Std -IE:\\tasking workspace\\Copy of LQ_TC26xB_LIBtaskingAICTone\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Sent -IE:\\tasking workspace\\Copy of LQ_TC26xB_LIBtaskingAICTone\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Sent\\Sent -IE:\\tasking workspace\\Copy of LQ_TC26xB_LIBtaskingAICTone\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Sent\\Std -IE:\\tasking workspace\\Copy of LQ_TC26xB_LIBtaskingAICTone\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Smu -IE:\\tasking workspace\\Copy of LQ_TC26xB_LIBtaskingAICTone\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Smu\\Std -IE:\\tasking workspace\\Copy of LQ_TC26xB_LIBtaskingAICTone\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Src -IE:\\tasking workspace\\Copy of LQ_TC26xB_LIBtaskingAICTone\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Src\\Std -IE:\\tasking workspace\\Copy of LQ_TC26xB_LIBtaskingAICTone\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Stm -IE:\\tasking workspace\\Copy of LQ_TC26xB_LIBtaskingAICTone\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Stm\\Std -IE:\\tasking workspace\\Copy of LQ_TC26xB_LIBtaskingAICTone\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Stm\\Timer -IE:\\tasking workspace\\Copy of LQ_TC26xB_LIBtaskingAICTone\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Vadc -IE:\\tasking workspace\\Copy of LQ_TC26xB_LIBtaskingAICTone\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Vadc\\Adc -IE:\\tasking workspace\\Copy of LQ_TC26xB_LIBtaskingAICTone\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Vadc\\Std -IE:\\tasking workspace\\Copy of LQ_TC26xB_LIBtaskingAICTone\\src\\BaseSw\\Infra -IE:\\tasking workspace\\Copy of LQ_TC26xB_LIBtaskingAICTone\\src\\BaseSw\\Infra\\Platform -IE:\\tasking workspace\\Copy of LQ_TC26xB_LIBtaskingAICTone\\src\\BaseSw\\Infra\\Platform\\Tricore -IE:\\tasking workspace\\Copy of LQ_TC26xB_LIBtaskingAICTone\\src\\BaseSw\\Infra\\Platform\\Tricore\\Compilers -IE:\\tasking workspace\\Copy of LQ_TC26xB_LIBtaskingAICTone\\src\\BaseSw\\Infra\\Sfr -IE:\\tasking workspace\\Copy of LQ_TC26xB_LIBtaskingAICTone\\src\\BaseSw\\Infra\\Sfr\\TC26B -IE:\\tasking workspace\\Copy of LQ_TC26xB_LIBtaskingAICTone\\src\\BaseSw\\Infra\\Sfr\\TC26B\\_Reg -IE:\\tasking workspace\\Copy of LQ_TC26xB_LIBtaskingAICTone\\src\\BaseSw\\Service -IE:\\tasking workspace\\Copy of LQ_TC26xB_LIBtaskingAICTone\\src\\BaseSw\\Service\\CpuGeneric -IE:\\tasking workspace\\Copy of LQ_TC26xB_LIBtaskingAICTone\\src\\BaseSw\\Service\\CpuGeneric\\_Utilities -IE:\\tasking workspace\\Copy of LQ_TC26xB_LIBtaskingAICTone\\src\\BaseSw\\Service\\CpuGeneric\\If -IE:\\tasking workspace\\Copy of LQ_TC26xB_LIBtaskingAICTone\\src\\BaseSw\\Service\\CpuGeneric\\If\\Ccu6If -IE:\\tasking workspace\\Copy of LQ_TC26xB_LIBtaskingAICTone\\src\\BaseSw\\Service\\CpuGeneric\\StdIf -IE:\\tasking workspace\\Copy of LQ_TC26xB_LIBtaskingAICTone\\src\\BaseSw\\Service\\CpuGeneric\\SysSe -IE:\\tasking workspace\\Copy of LQ_TC26xB_LIBtaskingAICTone\\src\\BaseSw\\Service\\CpuGeneric\\SysSe\\Bsp -IE:\\tasking workspace\\Copy of LQ_TC26xB_LIBtaskingAICTone\\src\\BaseSw\\Service\\CpuGeneric\\SysSe\\Comm -IE:\\tasking workspace\\Copy of LQ_TC26xB_LIBtaskingAICTone\\src\\BaseSw\\Service\\CpuGeneric\\SysSe\\General -IE:\\tasking workspace\\Copy of LQ_TC26xB_LIBtaskingAICTone\\src\\BaseSw\\Service\\CpuGeneric\\SysSe\\Math -IE:\\tasking workspace\\Copy of LQ_TC26xB_LIBtaskingAICTone\\src\\BaseSw\\Service\\CpuGeneric\\SysSe\\Time -g2 --make-target=src\\BaseSw\\iLLD\\TC26B\\Tricore\\I2c\\Std\\IfxI2c.o -t4 --language=-gcc,-volatile,+strings,-kanji --default-near-size=0 -O2 --default-a1-size=0 --default-a0-size=0 --source --align=0 --compact-max-size=200 --switch=auto --error-limit=42 -o src\\BaseSw\\iLLD\\TC26B\\Tricore\\I2c\\Std\\IfxI2c.src ..\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\I2c\\Std\\IfxI2c.c"
	.compiler_name		"ctc"
	;source	'..\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\I2c\\Std\\IfxI2c.c'

	
$TC16X
	
	.sdecl	'.text.IfxI2c.IfxI2c_configureAsMaster',code,cluster('IfxI2c_configureAsMaster')
	.sect	'.text.IfxI2c.IfxI2c_configureAsMaster'
	.align	2
	
	.global	IfxI2c_configureAsMaster

; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.c	     1  /**
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.c	     2   * \file IfxI2c.c
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.c	     3   * \brief I2C  basic functionality
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.c	     4   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.c	     5   * \version iLLD_1_0_1_11_0
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.c	     6   * \copyright Copyright (c) 2017 Infineon Technologies AG. All rights reserved.
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.c	     7   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.c	     8   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.c	     9   *                                 IMPORTANT NOTICE
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.c	    10   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.c	    11   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.c	    12   * Use of this file is subject to the terms of use agreed between (i) you or 
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.c	    13   * the company in which ordinary course of business you are acting and (ii) 
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.c	    14   * Infineon Technologies AG or its licensees. If and as long as no such 
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.c	    15   * terms of use are agreed, use of this file is subject to following:
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.c	    16  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.c	    17  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.c	    18   * Boost Software License - Version 1.0 - August 17th, 2003
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.c	    19  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.c	    20   * Permission is hereby granted, free of charge, to any person or 
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.c	    21   * organization obtaining a copy of the software and accompanying 
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.c	    22   * documentation covered by this license (the "Software") to use, reproduce,
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.c	    23   * display, distribute, execute, and transmit the Software, and to prepare
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.c	    24   * derivative works of the Software, and to permit third-parties to whom the 
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.c	    25   * Software is furnished to do so, all subject to the following:
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.c	    26  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.c	    27   * The copyright notices in the Software and this entire statement, including
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.c	    28   * the above license grant, this restriction and the following disclaimer, must
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.c	    29   * be included in all copies of the Software, in whole or in part, and all
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.c	    30   * derivative works of the Software, unless such copies or derivative works are
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.c	    31   * solely in the form of machine-executable object code generated by a source
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.c	    32   * language processor.
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.c	    33  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.c	    34   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR 
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.c	    35   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.c	    36   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.c	    37   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE 
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.c	    38   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.c	    39   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.c	    40   * DEALINGS IN THE SOFTWARE.
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.c	    41  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.c	    42   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.c	    43   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.c	    44  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.c	    45  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.c	    46  /*----------------------------------Includes----------------------------------*/
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.c	    47  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.c	    48  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.c	    49  #include "IfxI2c.h"
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.c	    50  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.c	    51  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.c	    52  /*-------------------------Function Implementations---------------------------*/
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.c	    53  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.c	    54  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.c	    55  void IfxI2c_configureAsMaster(Ifx_I2C *i2c)
; Function IfxI2c_configureAsMaster
.L32:
IfxI2c_configureAsMaster:	.type	func

; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	     1  /**
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	     2   * \file IfxI2c.h
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	     3   * \brief I2C  basic functionality
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	     4   * \ingroup IfxLld_I2c
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	     5   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	     6   * \version iLLD_1_0_1_11_0
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	     7   * \copyright Copyright (c) 2018 Infineon Technologies AG. All rights reserved.
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	     8   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	     9   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    10   *                                 IMPORTANT NOTICE
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    11   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    12   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    13   * Use of this file is subject to the terms of use agreed between (i) you or 
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    14   * the company in which ordinary course of business you are acting and (ii) 
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    15   * Infineon Technologies AG or its licensees. If and as long as no such 
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    16   * terms of use are agreed, use of this file is subject to following:
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    17  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    18  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    19   * Boost Software License - Version 1.0 - August 17th, 2003
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    20  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    21   * Permission is hereby granted, free of charge, to any person or 
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    22   * organization obtaining a copy of the software and accompanying 
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    23   * documentation covered by this license (the "Software") to use, reproduce,
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    24   * display, distribute, execute, and transmit the Software, and to prepare
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    25   * derivative works of the Software, and to permit third-parties to whom the 
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    26   * Software is furnished to do so, all subject to the following:
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    27  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    28   * The copyright notices in the Software and this entire statement, including
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    29   * the above license grant, this restriction and the following disclaimer, must
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    30   * be included in all copies of the Software, in whole or in part, and all
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    31   * derivative works of the Software, unless such copies or derivative works are
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    32   * solely in the form of machine-executable object code generated by a source
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    33   * language processor.
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    34  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    35   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR 
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    36   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    37   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    38   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE 
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    39   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    40   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    41   * DEALINGS IN THE SOFTWARE.
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    42  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    43   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    44   * \defgroup IfxLld_I2c_Std_enums Enumerations
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    45   * \ingroup IfxLld_I2c_Std
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    46   * \defgroup IfxLld_I2c_Std_functions Functions
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    47   * \ingroup IfxLld_I2c_Std
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    48   * \defgroup IfxLld_I2c_Std_structures Data Structures
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    49   * \ingroup IfxLld_I2c_Std
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    50   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    51  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    52  #ifndef IFXI2C_H
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    53  #define IFXI2C_H 1
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    54  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    55  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    56  /*----------------------------------Includes----------------------------------*/
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    57  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    58  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    59  #include "_Impl/IfxI2c_cfg.h"
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    60  #include "Scu/Std/IfxScuWdt.h"
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    61  #include "Scu/Std/IfxScuCcu.h"
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    62  #include "IfxI2c_bf.h"
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    63  #include "_PinMap/IfxI2c_PinMap.h"
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    64  #include "Src/Std/IfxSrc.h"
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    65  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    66  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    67  /*--------------------------------Enumerations--------------------------------*/
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    68  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    69  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    70  /** \addtogroup IfxLld_I2c_Std_enums
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    71   * \{ */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    72  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    73  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    74      IfxI2c_BusStatus_idle        = 0, /**< \brief idle */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    75      IfxI2c_BusStatus_started     = 1, /**< \brief started */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    76      IfxI2c_BusStatus_busyMaster  = 2, /**< \brief busy Master */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    77      IfxI2c_BusStatus_remoteSlave = 3  /**< \brief remote Slave */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    78  } IfxI2c_BusStatus;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    79  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    80  /** \brief enable error interrupt request source
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    81   * Definition in Ifx.I2C.ERRIRQSM.U
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    82   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    83  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    84  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    85      IfxI2c_ErrorInterruptSource_rxFifoUnderflow = IFX_I2C_ERRIRQSM_RXF_UFL_OFF,  /**< \brief receive fifo underflow service request */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    86      IfxI2c_ErrorInterruptSource_rxFifoOverflow  = IFX_I2C_ERRIRQSM_RXF_OFL_OFF,  /**< \brief receive fifo overflow service request */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    87      IfxI2c_ErrorInterruptSource_txFifoUnderflow = IFX_I2C_ERRIRQSM_TXF_UFL_OFF,  /**< \brief transmit fifo underflow service request */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    88      IfxI2c_ErrorInterruptSource_txFifoOverflow  = IFX_I2C_ERRIRQSM_TXF_OFL_OFF   /**< \brief transmit fifo overflow service request */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    89  } IfxI2c_ErrorInterruptSource;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    90  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    91  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    92  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    93      IfxI2c_PinSelect_a = 0,
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    94      IfxI2c_PinSelect_b = 1,
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    95      IfxI2c_PinSelect_c = 2,
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    96      IfxI2c_PinSelect_d = 3,
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    97      IfxI2c_PinSelect_e = 4,
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    98      IfxI2c_PinSelect_f = 5,
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    99      IfxI2c_PinSelect_g = 6,
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   100      IfxI2c_PinSelect_h = 7
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   101  } IfxI2c_PinSelect;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   102  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   103  /** \brief enable protocol interrupt source
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   104   * Definition in Ifx.I2C.PIRQSM.U
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   105   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   106  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   107  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   108      IfxI2c_ProtocolInterruptSource_addressMatch           = IFX_I2C_PIRQSM_AM_OFF,     /**< \brief address match service request */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   109      IfxI2c_ProtocolInterruptSource_generalCall            = IFX_I2C_PIRQSM_GC_OFF,     /**< \brief general call service request */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   110      IfxI2c_ProtocolInterruptSource_masterCode             = IFX_I2C_PIRQSM_MC_OFF,     /**< \brief master code service request */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   111      IfxI2c_ProtocolInterruptSource_arbitrationLost        = IFX_I2C_PIRQSM_AL_OFF,     /**< \brief arbitration lost service request */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   112      IfxI2c_ProtocolInterruptSource_notAcknowledgeReceived = IFX_I2C_PIRQSM_NACK_OFF,   /**< \brief not acknowledge received service request */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   113      IfxI2c_ProtocolInterruptSource_transmissionEnd        = IFX_I2C_PIRQSM_TX_END_OFF, /**< \brief transmission end service request */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   114      IfxI2c_ProtocolInterruptSource_receiveMode            = IFX_I2C_PIRQSM_RX_OFF      /**< \brief receive mode service request */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   115  } IfxI2c_ProtocolInterruptSource;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   116  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   117  /** \brief Enable/disable the sensitivity of the module to sleep signal\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   118   * Definition in Ifx_I2C.CLC1.B.EDIS
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   119   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   120  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   121  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   122      IfxI2c_SleepMode_enable  = 0, /**< \brief enables sleep mode */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   123      IfxI2c_SleepMode_disable = 1  /**< \brief disables sleep mode */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   124  } IfxI2c_SleepMode;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   125  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   126  /** \} */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   127  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   128  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   129  /*-----------------------------Data Structures--------------------------------*/
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   130  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   131  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   132  /** \addtogroup IfxLld_I2c_Std_structures
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   133   * \{ */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   134  /** \brief Pin Structure
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   135   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   136  typedef struct
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   137  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   138      IfxI2c_Scl_InOut *scl;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   139      IfxI2c_Sda_InOut *sda;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   140      IfxPort_PadDriver padDriver;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   141  } IfxI2c_Pins;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   142  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   143  /** \} */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   144  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   145  /** \addtogroup IfxLld_I2c_Std_functions
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   146   * \{ */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   147  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   148  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   149  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   150  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   151  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   152  /** \brief Returns if the bus is free
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   153   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   154  IFX_INLINE boolean IfxI2c_busIsFree(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   155  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   156  /** \brief clears all DTR interrupt sources
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   157   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   158   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   159   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   160  IFX_INLINE void IfxI2c_clearAllDtrInterruptSources(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   161  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   162  /** \brief clears all Error Interrupt sources
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   163   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   164   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   165   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   166  IFX_INLINE void IfxI2c_clearAllErrorInterruptSources(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   167  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   168  /** \brief Clears all Protocol Interrupt sources
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   169   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   170   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   171   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   172  IFX_INLINE void IfxI2c_clearAllProtocolInterruptSources(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   173  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   174  /** \brief clears burst request interrupt source
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   175   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   176   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   177   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   178  IFX_INLINE void IfxI2c_clearBurstRequestInterruptSource(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   179  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   180  /** \brief clears the specified source of error interrupt
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   181   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   182   * \param source error interrupt source
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   183   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   184   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   185  IFX_INLINE void IfxI2c_clearErrorInterruptSource(Ifx_I2C *i2c, IfxI2c_ErrorInterruptSource source);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   186  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   187  /** \brief clears last burst request interrupt source
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   188   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   189   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   190   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   191  IFX_INLINE void IfxI2c_clearLastBurstRequestInterruptSource(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   192  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   193  /** \brief clears last single request interrupt source
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   194   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   195   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   196   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   197  IFX_INLINE void IfxI2c_clearLastSingleRequestInterruptSource(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   198  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   199  /** \brief clears the specified source of protocol interrupt
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   200   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   201   * \param source protocol interrupt source
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   202   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   203   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   204  IFX_INLINE void IfxI2c_clearProtocolInterruptSource(Ifx_I2C *i2c, IfxI2c_ProtocolInterruptSource source);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   205  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   206  /** \brief clears single request interrupt source
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   207   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   208   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   209   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   210  IFX_INLINE void IfxI2c_clearSingleRequestInterruptSource(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   211  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   212  /** \brief disables burst request interrupt source
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   213   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   214   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   215   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   216  IFX_INLINE void IfxI2c_disableBurstRequestInterruptSource(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   217  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   218  /** \brief disables the error interrupt flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   219   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   220   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   221   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   222  IFX_INLINE void IfxI2c_disableErrorInterruptFlag(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   223  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   224  /** \brief disables the specified source of error interrupt
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   225   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   226   * \param source error interrupt source
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   227   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   228   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   229  IFX_INLINE void IfxI2c_disableErrorInterruptSource(Ifx_I2C *i2c, IfxI2c_ErrorInterruptSource source);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   230  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   231  /** \brief disables last burst request interrupt source
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   232   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   233   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   234   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   235  IFX_INLINE void IfxI2c_disableLastBurstRequestInterruptSource(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   236  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   237  /** \brief disables last single request interrupt source
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   238   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   239   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   240   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   241  IFX_INLINE void IfxI2c_disableLastSingleRequestInterruptSource(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   242  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   243  /** \brief disables the Protocol interrupt flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   244   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   245   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   246   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   247  IFX_INLINE void IfxI2c_disableProtocolInterruptFlag(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   248  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   249  /** \brief disables the specified source of protocol interrupt
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   250   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   251   * \param source protocol interrupt source
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   252   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   253   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   254  IFX_INLINE void IfxI2c_disableProtocolInterruptSource(Ifx_I2C *i2c, IfxI2c_ProtocolInterruptSource source);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   255  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   256  /** \brief disables single request interrupt source
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   257   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   258   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   259   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   260  IFX_INLINE void IfxI2c_disableSingleRequestInterruptSource(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   261  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   262  /** \brief enables burst request interrupt source
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   263   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   264   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   265   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   266  IFX_INLINE void IfxI2c_enableBurstRequestInterruptSource(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   267  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   268  /** \brief enables the error interrupt flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   269   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   270   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   271   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   272  IFX_INLINE void IfxI2c_enableErrorInterruptFlag(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   273  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   274  /** \brief enables the specified source of error interrupt
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   275   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   276   * \param source error interrupt source
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   277   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   278   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   279  IFX_INLINE void IfxI2c_enableErrorInterruptSource(Ifx_I2C *i2c, IfxI2c_ErrorInterruptSource source);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   280  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   281  /** \brief enables last burst request interrupt source
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   282   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   283   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   284   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   285  IFX_INLINE void IfxI2c_enableLastBurstRequestInterruptSource(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   286  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   287  /** \brief enables last single request interrupt source
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   288   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   289   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   290   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   291  IFX_INLINE void IfxI2c_enableLastSingleRequestInterruptSource(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   292  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   293  /** \brief enables the protocol interrupt flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   294   * \param i2c pointer to I2C registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   295   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   296   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   297  IFX_INLINE void IfxI2c_enableProtocolInterruptFlag(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   298  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   299  /** \brief enables the specified source of protocol interrupt
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   300   * \param i2c pointer to I2C registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   301   * \param source protocol interrupt source
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   302   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   303   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   304  IFX_INLINE void IfxI2c_enableProtocolInterruptSource(Ifx_I2C *i2c, IfxI2c_ProtocolInterruptSource source);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   305  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   306  /** \brief enables single request interrupt source
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   307   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   308   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   309   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   310  IFX_INLINE void IfxI2c_enableSingleRequestInterruptSource(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   311  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   312  /** \brief Returns the SRC pointer for I2C burst data transfer request interrupt
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   313   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   314   * \return SRC pointer for I2C burst data transfer Service interrupt
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   315   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   316  IFX_INLINE volatile Ifx_SRC_SRCR *IfxI2c_getBurstDataTransferSrcPointer(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   317  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   318  /** \brief returns the status of burst request interrupt source status
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   319   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   320   * \return status
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   321   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   322  IFX_INLINE boolean IfxI2c_getBurstRequestInterruptSourceStatus(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   323  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   324  /**
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   325   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   326   * \return BusStatus
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   327   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   328  IFX_INLINE IfxI2c_BusStatus IfxI2c_getBusStatus(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   329  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   330  /** \brief returns the current status of error interrupt flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   331   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   332   * \return status
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   333   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   334  IFX_INLINE boolean IfxI2c_getErrorInterruptFlagStatus(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   335  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   336  /** \brief returns the status of the error interrupt source
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   337   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   338   * \param source error interrupt source
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   339   * \return status
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   340   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   341  IFX_INLINE boolean IfxI2c_getErrorInterruptSourceStatus(Ifx_I2C *i2c, IfxI2c_ErrorInterruptSource source);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   342  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   343  /** \brief Returns the SRC pointer for I2C Error interrupt
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   344   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   345   * \return SRC pointer for I2C Error Service interrupt
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   346   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   347  IFX_INLINE volatile Ifx_SRC_SRCR *IfxI2c_getErrorSrcPointer(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   348  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   349  /** \brief Returns the SRC pointer for I2C last burst data transfer request interrupt
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   350   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   351   * \return SRC pointer for I2C last burst data transfer Service interrupt
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   352   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   353  IFX_INLINE volatile Ifx_SRC_SRCR *IfxI2c_getLastBurstDataTransferSrcPointer(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   354  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   355  /** \brief returns the status of last burst request interrupt source status
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   356   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   357   * \return status
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   358   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   359  IFX_INLINE boolean IfxI2c_getLastBurstRequestInterruptSourceStatus(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   360  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   361  /** \brief Returns the SRC pointer for I2C last single data transfer request interrupt
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   362   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   363   * \return SRC pointer for I2C last single data transfer Service interrupt
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   364   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   365  IFX_INLINE volatile Ifx_SRC_SRCR *IfxI2c_getLastSingleDataTransferSrcPointer(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   366  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   367  /** \brief returns the status of last single request interrupt source status
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   368   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   369   * \return status
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   370   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   371  IFX_INLINE boolean IfxI2c_getLastSingleRequestInterruptSourceStatus(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   372  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   373  /** \brief returns the current raw status of protocol interrupt
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   374   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   375   * \return status
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   376   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   377  IFX_INLINE boolean IfxI2c_getProtocolInterruptFlagStatus(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   378  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   379  /** \brief returns the status of  specified protocol interrupt source
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   380   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   381   * \param source protocol interrupt source
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   382   * \return status
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   383   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   384  IFX_INLINE boolean IfxI2c_getProtocolInterruptSourceStatus(Ifx_I2C *i2c, IfxI2c_ProtocolInterruptSource source);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   385  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   386  /** \brief Returns the SRC pointer for I2C Protocol interrupt
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   387   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   388   * \return SRC pointer for I2C Protocol Service interrupt
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   389   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   390  IFX_INLINE volatile Ifx_SRC_SRCR *IfxI2c_getProtocolSrcPointer(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   391  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   392  /** \brief Returns the SRC pointer for I2C single data transfer request interrupt
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   393   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   394   * \return SRC pointer for I2C single data transfer Service interrupt
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   395   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   396  IFX_INLINE volatile Ifx_SRC_SRCR *IfxI2c_getSingleDataTransferSrcPointer(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   397  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   398  /** \brief returns the status of single request interrupt source status
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   399   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   400   * \return status
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   401   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   402  IFX_INLINE boolean IfxI2c_getSingleRequestInterruptSourceStatus(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   403  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   404  /** \brief Returns if the Fifo is requesting new data
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   405   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   406  IFX_INLINE boolean IfxI2c_isFifoRequest(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   407  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   408  /**
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   409   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   410   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   411   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   412  IFX_INLINE void IfxI2c_run(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   413  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   414  /** \brief selects the pin
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   415   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   416   * \param pisel pin to be select
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   417   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   418   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   419  IFX_INLINE void IfxI2c_setPinSelection(Ifx_I2C *i2c, IfxI2c_PinSelect pisel);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   420  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   421  /** \brief Sets the number of bytes to be received
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   422   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   423   * \param size number of packets
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   424   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   425   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   426  IFX_INLINE void IfxI2c_setReceivePacketSize(Ifx_I2C *i2c, Ifx_SizeT size);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   427  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   428  /**
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   429   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   430   * \param address device address
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   431   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   432   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   433  IFX_INLINE void IfxI2c_setSlaveDeviceAddress(Ifx_I2C *i2c, uint16 address);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   434  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   435  /** \brief Sets the sensitivity of the module to sleep signal
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   436   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   437   * \param mode mode selection (enable / disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   438   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   439   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   440  IFX_INLINE void IfxI2c_setSleepMode(Ifx_I2C *i2c, IfxI2c_SleepMode mode);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   441  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   442  /** \brief Sets the number of bytes to be tansmitted
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   443   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   444   * \param size number of packets
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   445   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   446   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   447  IFX_INLINE void IfxI2c_setTransmitPacketSize(Ifx_I2C *i2c, Ifx_SizeT size);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   448  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   449  /**
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   450   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   451   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   452   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   453  IFX_INLINE void IfxI2c_stop(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   454  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   455  /**
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   456   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   457   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   458   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   459  IFX_INLINE void IfxI2c_waitBusFree(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   460  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   461  /** \brief Writes a packet (4 bytes) into the Fifo
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   462   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   463   * \param packet specifies the byte to be transfer
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   464   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   465   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   466  IFX_INLINE void IfxI2c_writeFifo(Ifx_I2C *i2c, uint32 packet);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   467  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   468  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   469  /*-------------------------Global Function Prototypes-------------------------*/
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   470  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   471  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   472  /** \brief Configures the Module as Master
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   473   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   474   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   475   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   476  IFX_EXTERN void IfxI2c_configureAsMaster(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   477  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   478  /** \brief Disables the I2c Module
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   479   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   480   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   481   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   482  IFX_EXTERN void IfxI2c_disableModule(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   483  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   484  /** \brief Enables the Burst data transfer interrupt
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   485   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   486   * \param typeOfService Type of Service (Cpu or DMA)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   487   * \param priority priority of the interrupt
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   488   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   489   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   490  IFX_EXTERN void IfxI2c_enableBurstDataTransferInterrupt(Ifx_I2C *i2c, IfxSrc_Tos typeOfService, uint16 priority);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   491  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   492  /** \brief Enables the Error interrupt
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   493   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   494   * \param typeOfService Type of Service (Cpu or DMA)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   495   * \param priority priority of the interrupt
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   496   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   497   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   498  IFX_EXTERN void IfxI2c_enableErrorInterrupt(Ifx_I2C *i2c, IfxSrc_Tos typeOfService, uint16 priority);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   499  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   500  /** \brief enables the last burst data transfer interrupt
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   501   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   502   * \param typeOfService Type of Service (Cpu or DMA)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   503   * \param priority priority of the interrupt
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   504   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   505   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   506  IFX_EXTERN void IfxI2c_enableLastBurstDataTransferInterrupt(Ifx_I2C *i2c, IfxSrc_Tos typeOfService, uint16 priority);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   507  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   508  /** \brief enables the last single data transfer interrupt
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   509   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   510   * \param typeOfService Type of Service (Cpu or DMA)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   511   * \param priority priority of the interrupt
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   512   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   513   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   514  IFX_EXTERN void IfxI2c_enableLastSingleDataTransferInterrupt(Ifx_I2C *i2c, IfxSrc_Tos typeOfService, uint16 priority);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   515  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   516  /** \brief Enables the I2c Module
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   517   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   518   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   519   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   520  IFX_EXTERN void IfxI2c_enableModule(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   521  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   522  /** \brief Enables the protocol interrupt
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   523   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   524   * \param typeOfService Type of Service (Cpu or DMA)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   525   * \param priority Priority of the interrupt
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   526   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   527   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   528  IFX_EXTERN void IfxI2c_enableProtocolInterrupt(void *i2c, IfxSrc_Tos typeOfService, uint16 priority);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   529  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   530  /** \brief enables the single data transfer interrupt
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   531   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   532   * \param typeOfService Type of Service (Cpu or DMA)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   533   * \param priority priority of the interrupt
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   534   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   535   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   536  IFX_EXTERN void IfxI2c_enableSingleDataTransferInterrupt(Ifx_I2C *i2c, IfxSrc_Tos typeOfService, uint16 priority);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   537  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   538  /**
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   539   * \param i2c Resource index of the I2c
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   540   * \return I2C module register address
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   541   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   542  IFX_EXTERN Ifx_I2C *IfxI2c_getAddress(IfxI2c_Index i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   543  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   544  /** \brief Returns the real Baudrate
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   545   * \return Baudrate
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   546   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   547  IFX_EXTERN float32 IfxI2c_getBaudrate(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   548  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   549  /** \brief API to get the resource index of the I2C specified.
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   550   * \param i2c Pointer to the I2C HW module (register memory map)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   551   * \return Resource index of the I2C
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   552   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   553  IFX_EXTERN IfxI2c_Index IfxI2c_getIndex(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   554  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   555  /**
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   556   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   557   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   558  IFX_EXTERN void IfxI2c_initSclSdaPin(const IfxI2c_Scl_InOut *scl, const IfxI2c_Sda_InOut *sda, IfxPort_PadDriver padDriver);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   559  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   560  /** \brief Releases the bus, i.e puts a stop condition on the bus
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   561   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   562   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   563  IFX_EXTERN void IfxI2c_releaseBus(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   564  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   565  /**
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   566   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   567   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   568  IFX_EXTERN void IfxI2c_resetFifo(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   569  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   570  /** \brief resets the I2c kernel
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   571   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   572   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   573   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   574  IFX_EXTERN void IfxI2c_resetModule(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   575  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   576  /** \brief Calculates the desired baudrate
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   577   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   578   * \param baudrate specifies the baud rate
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   579   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   580   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   581  IFX_EXTERN void IfxI2c_setBaudrate(Ifx_I2C *i2c, float32 baudrate);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   582  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   583  /** \} */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   584  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   585  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   586  /*---------------------Inline Function Implementations------------------------*/
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   587  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   588  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   589  IFX_INLINE boolean IfxI2c_busIsFree(Ifx_I2C *i2c)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   590  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   591      boolean free = FALSE;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   592  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   593      if (i2c->BUSSTAT.B.BS == IfxI2c_BusStatus_idle)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   594      {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   595          free = TRUE;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   596      }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   597  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   598      return free;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   599  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   600  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   601  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   602  IFX_INLINE void IfxI2c_clearAllDtrInterruptSources(Ifx_I2C *i2c)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   603  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   604      i2c->ICR.U = (1 << IFX_I2C_ICR_LSREQ_INT_OFF) | (1 << IFX_I2C_ICR_SREQ_INT_OFF) | (1 << IFX_I2C_ICR_LBREQ_INT_OFF) | (1 << IFX_I2C_ICR_BREQ_INT_OFF);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   605  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   606  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   607  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   608  IFX_INLINE void IfxI2c_clearAllErrorInterruptSources(Ifx_I2C *i2c)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   609  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   610      i2c->ERRIRQSC.U = (1 << IFX_I2C_ERRIRQSC_RXF_UFL_OFF) | (1 << IFX_I2C_ERRIRQSC_RXF_OFL_OFF) | (1 << IFX_I2C_ERRIRQSC_TXF_UFL_OFF) | (1 << IFX_I2C_ERRIRQSC_TXF_OFL_OFF);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   611  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   612  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   613  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   614  IFX_INLINE void IfxI2c_clearAllProtocolInterruptSources(Ifx_I2C *i2c)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   615  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   616      i2c->PIRQSC.U = (1 << IFX_I2C_PIRQSC_AM_OFF) | (1 << IFX_I2C_PIRQSC_GC_OFF) | (1 << IFX_I2C_PIRQSC_MC_OFF) | (1 << IFX_I2C_PIRQSC_AL_OFF) | (1 << IFX_I2C_PIRQSC_NACK_OFF) | (1 << IFX_I2C_PIRQSC_TX_END_OFF) | (1 << IFX_I2C_PIRQSC_RX_OFF);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   617  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   618  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   619  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   620  IFX_INLINE void IfxI2c_clearBurstRequestInterruptSource(Ifx_I2C *i2c)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   621  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   622      i2c->ICR.B.BREQ_INT = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   623  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   624  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   625  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   626  IFX_INLINE void IfxI2c_clearErrorInterruptSource(Ifx_I2C *i2c, IfxI2c_ErrorInterruptSource source)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   627  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   628      i2c->ERRIRQSC.U = (1 << source);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   629  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   630  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   631  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   632  IFX_INLINE void IfxI2c_clearLastBurstRequestInterruptSource(Ifx_I2C *i2c)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   633  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   634      i2c->ICR.B.LBREQ_INT = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   635  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   636  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   637  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   638  IFX_INLINE void IfxI2c_clearLastSingleRequestInterruptSource(Ifx_I2C *i2c)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   639  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   640      i2c->ICR.B.LSREQ_INT = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   641  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   642  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   643  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   644  IFX_INLINE void IfxI2c_clearProtocolInterruptSource(Ifx_I2C *i2c, IfxI2c_ProtocolInterruptSource source)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   645  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   646      i2c->PIRQSC.U = (1 << source);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   647  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   648  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   649  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   650  IFX_INLINE void IfxI2c_clearSingleRequestInterruptSource(Ifx_I2C *i2c)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   651  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   652      i2c->ICR.B.SREQ_INT = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   653  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   654  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   655  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   656  IFX_INLINE void IfxI2c_disableBurstRequestInterruptSource(Ifx_I2C *i2c)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   657  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   658      i2c->IMSC.B.BREQ_INT = 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   659  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   660  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   661  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   662  IFX_INLINE void IfxI2c_disableErrorInterruptFlag(Ifx_I2C *i2c)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   663  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   664      i2c->IMSC.B.I2C_ERR_INT = 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   665  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   666  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   667  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   668  IFX_INLINE void IfxI2c_disableErrorInterruptSource(Ifx_I2C *i2c, IfxI2c_ErrorInterruptSource source)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   669  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   670      i2c->ERRIRQSM.U &= ~(1 << source);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   671  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   672  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   673  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   674  IFX_INLINE void IfxI2c_disableLastBurstRequestInterruptSource(Ifx_I2C *i2c)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   675  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   676      i2c->IMSC.B.LBREQ_INT = 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   677  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   678  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   679  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   680  IFX_INLINE void IfxI2c_disableLastSingleRequestInterruptSource(Ifx_I2C *i2c)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   681  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   682      i2c->IMSC.B.LSREQ_INT = 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   683  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   684  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   685  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   686  IFX_INLINE void IfxI2c_disableProtocolInterruptFlag(Ifx_I2C *i2c)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   687  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   688      i2c->IMSC.B.I2C_P_INT = 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   689  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   690  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   691  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   692  IFX_INLINE void IfxI2c_disableProtocolInterruptSource(Ifx_I2C *i2c, IfxI2c_ProtocolInterruptSource source)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   693  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   694      i2c->PIRQSM.U &= ~(1 << source);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   695  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   696  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   697  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   698  IFX_INLINE void IfxI2c_disableSingleRequestInterruptSource(Ifx_I2C *i2c)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   699  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   700      i2c->IMSC.B.SREQ_INT = 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   701  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   702  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   703  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   704  IFX_INLINE void IfxI2c_enableBurstRequestInterruptSource(Ifx_I2C *i2c)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   705  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   706      i2c->IMSC.B.BREQ_INT = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   707  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   708  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   709  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   710  IFX_INLINE void IfxI2c_enableErrorInterruptFlag(Ifx_I2C *i2c)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   711  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   712      i2c->IMSC.B.I2C_ERR_INT = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   713  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   714  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   715  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   716  IFX_INLINE void IfxI2c_enableErrorInterruptSource(Ifx_I2C *i2c, IfxI2c_ErrorInterruptSource source)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   717  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   718      i2c->ERRIRQSM.U |= (1 << source);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   719  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   720  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   721  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   722  IFX_INLINE void IfxI2c_enableLastBurstRequestInterruptSource(Ifx_I2C *i2c)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   723  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   724      i2c->IMSC.B.LBREQ_INT = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   725  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   726  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   727  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   728  IFX_INLINE void IfxI2c_enableLastSingleRequestInterruptSource(Ifx_I2C *i2c)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   729  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   730      i2c->IMSC.B.LSREQ_INT = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   731  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   732  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   733  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   734  IFX_INLINE void IfxI2c_enableProtocolInterruptFlag(Ifx_I2C *i2c)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   735  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   736      i2c->IMSC.B.I2C_P_INT = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   737  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   738  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   739  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   740  IFX_INLINE void IfxI2c_enableProtocolInterruptSource(Ifx_I2C *i2c, IfxI2c_ProtocolInterruptSource source)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   741  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   742      i2c->PIRQSM.U |= (1 << source);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   743  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   744  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   745  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   746  IFX_INLINE void IfxI2c_enableSingleRequestInterruptSource(Ifx_I2C *i2c)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   747  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   748      i2c->IMSC.B.SREQ_INT = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   749  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   750  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   751  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   752  IFX_INLINE volatile Ifx_SRC_SRCR *IfxI2c_getBurstDataTransferSrcPointer(Ifx_I2C *i2c)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   753  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   754      if (i2c == &MODULE_I2C0)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   755      {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   756          return &MODULE_SRC.I2C.I2C[0].BREQ;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   757      }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   758      else
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   759      {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   760          return &MODULE_SRC.I2C.I2C[1].BREQ;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   761      }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   762  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   763  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   764  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   765  IFX_INLINE boolean IfxI2c_getBurstRequestInterruptSourceStatus(Ifx_I2C *i2c)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   766  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   767      return i2c->RIS.B.BREQ_INT;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   768  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   769  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   770  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   771  IFX_INLINE IfxI2c_BusStatus IfxI2c_getBusStatus(Ifx_I2C *i2c)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   772  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   773      return (IfxI2c_BusStatus)i2c->BUSSTAT.B.BS;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   774  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   775  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   776  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   777  IFX_INLINE boolean IfxI2c_getErrorInterruptFlagStatus(Ifx_I2C *i2c)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   778  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   779      return i2c->RIS.B.I2C_ERR_INT;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   780  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   781  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   782  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   783  IFX_INLINE boolean IfxI2c_getErrorInterruptSourceStatus(Ifx_I2C *i2c, IfxI2c_ErrorInterruptSource source)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   784  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   785      return (i2c->ERRIRQSS.U & (1 << source)) ? TRUE : FALSE;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   786  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   787  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   788  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   789  IFX_INLINE volatile Ifx_SRC_SRCR *IfxI2c_getErrorSrcPointer(Ifx_I2C *i2c)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   790  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   791      if (i2c == &MODULE_I2C0)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   792      {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   793          return &MODULE_SRC.I2C.I2C[0].ERR;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   794      }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   795      else
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   796      {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   797          return &MODULE_SRC.I2C.I2C[1].ERR;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   798      }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   799  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   800  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   801  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   802  IFX_INLINE volatile Ifx_SRC_SRCR *IfxI2c_getLastBurstDataTransferSrcPointer(Ifx_I2C *i2c)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   803  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   804      if (i2c == &MODULE_I2C0)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   805      {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   806          return &MODULE_SRC.I2C.I2C[0].LBREQ;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   807      }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   808      else
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   809      {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   810          return &MODULE_SRC.I2C.I2C[1].LBREQ;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   811      }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   812  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   813  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   814  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   815  IFX_INLINE boolean IfxI2c_getLastBurstRequestInterruptSourceStatus(Ifx_I2C *i2c)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   816  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   817      return i2c->RIS.B.LBREQ_INT;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   818  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   819  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   820  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   821  IFX_INLINE volatile Ifx_SRC_SRCR *IfxI2c_getLastSingleDataTransferSrcPointer(Ifx_I2C *i2c)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   822  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   823      if (i2c == &MODULE_I2C0)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   824      {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   825          return &MODULE_SRC.I2C.I2C[0].LSREQ;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   826      }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   827      else
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   828      {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   829          return &MODULE_SRC.I2C.I2C[1].LSREQ;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   830      }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   831  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   832  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   833  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   834  IFX_INLINE boolean IfxI2c_getLastSingleRequestInterruptSourceStatus(Ifx_I2C *i2c)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   835  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   836      return i2c->RIS.B.LSREQ_INT;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   837  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   838  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   839  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   840  IFX_INLINE boolean IfxI2c_getProtocolInterruptFlagStatus(Ifx_I2C *i2c)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   841  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   842      return i2c->RIS.B.I2C_P_INT;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   843  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   844  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   845  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   846  IFX_INLINE boolean IfxI2c_getProtocolInterruptSourceStatus(Ifx_I2C *i2c, IfxI2c_ProtocolInterruptSource source)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   847  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   848      return (i2c->PIRQSS.U & (1 << source)) ? TRUE : FALSE;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   849  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   850  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   851  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   852  IFX_INLINE volatile Ifx_SRC_SRCR *IfxI2c_getProtocolSrcPointer(Ifx_I2C *i2c)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   853  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   854      if (i2c == &MODULE_I2C0)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   855      {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   856          return &MODULE_SRC.I2C.I2C[0].P;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   857      }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   858      else
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   859      {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   860          return &MODULE_SRC.I2C.I2C[1].P;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   861      }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   862  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   863  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   864  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   865  IFX_INLINE volatile Ifx_SRC_SRCR *IfxI2c_getSingleDataTransferSrcPointer(Ifx_I2C *i2c)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   866  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   867      if (i2c == &MODULE_I2C0)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   868      {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   869          return &MODULE_SRC.I2C.I2C[0].SREQ;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   870      }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   871      else
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   872      {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   873          return &MODULE_SRC.I2C.I2C[1].SREQ;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   874      }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   875  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   876  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   877  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   878  IFX_INLINE boolean IfxI2c_getSingleRequestInterruptSourceStatus(Ifx_I2C *i2c)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   879  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   880      return i2c->RIS.B.SREQ_INT;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   881  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   882  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   883  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   884  IFX_INLINE boolean IfxI2c_isFifoRequest(Ifx_I2C *i2c)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   885  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   886      return i2c->RIS.U & 0x0F ? TRUE : FALSE;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   887  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   888  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   889  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   890  IFX_INLINE void IfxI2c_run(Ifx_I2C *i2c)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   891  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   892      i2c->RUNCTRL.U = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   893  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   894  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   895  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   896  IFX_INLINE void IfxI2c_setPinSelection(Ifx_I2C *i2c, IfxI2c_PinSelect pisel)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   897  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   898      i2c->GPCTL.B.PISEL = pisel;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   899  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   900  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   901  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   902  IFX_INLINE void IfxI2c_setReceivePacketSize(Ifx_I2C *i2c, Ifx_SizeT size)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   903  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   904      i2c->MRPSCTRL.B.MRPS = size;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   905  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   906  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   907  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   908  IFX_INLINE void IfxI2c_setSlaveDeviceAddress(Ifx_I2C *i2c, uint16 address)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   909  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   910      i2c->ADDRCFG.B.ADR = address;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   911  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   912  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   913  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   914  IFX_INLINE void IfxI2c_setSleepMode(Ifx_I2C *i2c, IfxI2c_SleepMode mode)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   915  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   916      i2c->CLC1.B.EDIS = mode;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   917  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   918  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   919  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   920  IFX_INLINE void IfxI2c_setTransmitPacketSize(Ifx_I2C *i2c, Ifx_SizeT size)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   921  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   922      i2c->TPSCTRL.B.TPS = size;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   923  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   924  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   925  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   926  IFX_INLINE void IfxI2c_stop(Ifx_I2C *i2c)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   927  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   928      i2c->RUNCTRL.U = 0;
	mov	d15,#0
	st.w	[a4]16,d15
.L194:

; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.c	    56  2c->ADDRCFG.U      = 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.c	    57      i2c->ADDRCFG.B.MnS  = 1; // master mode
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.c	    58      i2c->ADDRCFG.B.SONA = 0; // don't release the bus on NACK
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.c	    59      i2c->ADDRCFG.B.SOPE = 0; // after transfer go into master restart state
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.c	    60      i2c->ADDRCFG.B.TBAM = 0; // 7 bit address mode
	st.w	[a4]32,d15
.L421:

; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.c	    61      i2c->FIFOCFG.U      = 0;
	ld.bu	d0,[a4]34
.L422:
	or	d0,d0,#8
	fcall	.cocofun_4
.L423:

; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.c	    62      i2c->FIFOCFG.B.TXFC = 1; // FIFO as flow controller
	insert	d0,d0,#0,#4,#1
	fcall	.cocofun_4
.L424:

; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.c	    63      i2c->FIFOCFG.B.RXFC = 1; // FIFO as flow controller
	insert	d0,d0,#0,#5,#1
	fcall	.cocofun_4
.L425:

; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.c	    64      i2c->FIFOCFG.B.TXBS = 0; // Burst size 1 word
	insert	d0,d0,#0,#0,#1
	st.b	[a4]34,d0
.L426:

; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.c	    65      i2c->FIFOCFG.B.RXBS = 0; // Burst size 1 word
	st.w	[a4]40,d15
.L427:

; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.c	    66      i2c->FIFOCFG.B.TXFA = 0; // fifo is byte aligned
	ld.bu	d15,[a4]42
.L428:
	or	d15,#2
	st.b	[a4]42,d15
.L429:

; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.c	    67      i2c->FIFOCFG.B.RXFA = 0; // fifo is byte aligned
	ld.bu	d15,[a4]42
.L430:
	or	d15,#1
	fcall	.cocofun_2
.L431:

; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.c	    68  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.c	    69  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.c	    70  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.c	    71  void IfxI2c_disableModule(Ifx_I2C *i2c)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.c	    72  {
	ret
.L189:
	
__IfxI2c_configureAsMaster_function_end:
	.size	IfxI2c_configureAsMaster,__IfxI2c_configureAsMaster_function_end-IfxI2c_configureAsMaster
.L83:
	; End of function
	
	.sdecl	'.text.IfxI2c..cocofun_4',code,cluster('.cocofun_4')
	.sect	'.text.IfxI2c..cocofun_4'
	.align	2
; Function .cocofun_4
.L34:
.cocofun_4:	.type	func
; Function body .cocofun_4, coco_iter:0
	st.b	[a4]34,d0
.L360:
	ld.bu	d0,[a4]34
.L615:
	fret
.L183:
	; End of function
	.sdecl	'.text.IfxI2c..cocofun_2',code,cluster('.cocofun_2')
	.sect	'.text.IfxI2c..cocofun_2'
	.align	2
; Function .cocofun_2
.L36:
.cocofun_2:	.type	func
; Function body .cocofun_2, coco_iter:0
	st.b	[a4]42,d15
.L599:
	ld.bu	d15,[a4]40
.L600:
	insert	d15,d15,#0,#4,#2
	st.b	[a4]40,d15
.L601:
	ld.bu	d15,[a4]40
.L602:
	insert	d15,d15,#0,#0,#2
	st.b	[a4]40,d15
.L603:
	ld.bu	d15,[a4]41
.L604:
	insert	d15,d15,#0,#4,#2
	st.b	[a4]41,d15
.L605:
	ld.bu	d15,[a4]41
.L606:
	insert	d15,d15,#0,#0,#2
	st.b	[a4]41,d15
.L361:
	fret
.L173:
	; End of function
	.sdecl	'.text.IfxI2c.IfxI2c_disableModule',code,cluster('IfxI2c_disableModule')
	.sect	'.text.IfxI2c.IfxI2c_disableModule'
	.align	2
	
	.global	IfxI2c_disableModule

; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.c	    73      uint16 pwd = IfxScuWdt_getCpuWatchdogPassword();
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.c	    74  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.c	    75      IfxScuWdt_clearCpuEndinit(pwd);
; Function IfxI2c_disableModule
.L38:
IfxI2c_disableModule:	.type	func
	mov.aa	a15,a4
.L363:

; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.c	    76  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.c	    77      i2c->CLC.B.DISR = 1;
	call	IfxScuWdt_getCpuWatchdogPassword
.L362:
	mov	d8,d2
.L365:

; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.c	    78  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.c	    79      while (i2c->CLC.B.DISS == 0)
	mov	d4,d8
	call	IfxScuWdt_clearCpuEndinit
.L364:

; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.c	    80      {}
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.c	    81  
	fcall	.cocofun_5
.L367:
	ld.bu	d15,[+a3]0
.L436:
	fcall	.cocofun_3
	st.b	[+a3]0,d15
.L437:

; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.c	    82      IfxScuWdt_setCpuEndinit(pwd);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.c	    83  }
	fcall	.cocofun_5
	mov.aa	a15,a3
.L2:
	ld.bu	d15,[a15]
.L438:
	jz.t	d15:1,.L2
.L439:

; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.c	    84  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.c	    85  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.c	    86  void IfxI2c_enableBurstDataTransferInterrupt(Ifx_I2C *i2c, IfxSrc_Tos typeOfService, uint16 priority)
	mov	d4,d8
.L368:
	j	IfxScuWdt_setCpuEndinit
.L198:
	
__IfxI2c_disableModule_function_end:
	.size	IfxI2c_disableModule,__IfxI2c_disableModule_function_end-IfxI2c_disableModule
.L88:
	; End of function
	
	.sdecl	'.text.IfxI2c..cocofun_5',code,cluster('.cocofun_5')
	.sect	'.text.IfxI2c..cocofun_5'
	.align	2
; Function .cocofun_5
.L40:
.cocofun_5:	.type	func
; Function body .cocofun_5, coco_iter:1
	movh.a	a3,#1
	add.a	a3,a15
.L620:
	fret
.L188:
	; End of function
	.sdecl	'.text.IfxI2c..cocofun_3',code,cluster('.cocofun_3')
	.sect	'.text.IfxI2c..cocofun_3'
	.align	2
; Function .cocofun_3
.L42:
.cocofun_3:	.type	func
; Function body .cocofun_3, coco_iter:0
	or	d15,#1
	fcall	.cocofun_5
.L366:
	fret
.L178:
	; End of function
	.sdecl	'.text.IfxI2c.IfxI2c_enableBurstDataTransferInterrupt',code,cluster('IfxI2c_enableBurstDataTransferInterrupt')
	.sect	'.text.IfxI2c.IfxI2c_enableBurstDataTransferInterrupt'
	.align	2
	
	.global	IfxI2c_enableBurstDataTransferInterrupt

; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.c	    87  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.c	    88      volatile Ifx_SRC_SRCR *src;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.c	    89      src = IfxI2c_getBurstDataTransferSrcPointer(i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.c	    90      IfxSrc_init(src, typeOfService, priority);
; Function IfxI2c_enableBurstDataTransferInterrupt
.L44:
IfxI2c_enableBurstDataTransferInterrupt:	.type	func

; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	     1  /**
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	     2   * \file IfxI2c.h
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	     3   * \brief I2C  basic functionality
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	     4   * \ingroup IfxLld_I2c
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	     5   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	     6   * \version iLLD_1_0_1_11_0
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	     7   * \copyright Copyright (c) 2018 Infineon Technologies AG. All rights reserved.
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	     8   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	     9   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    10   *                                 IMPORTANT NOTICE
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    11   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    12   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    13   * Use of this file is subject to the terms of use agreed between (i) you or 
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    14   * the company in which ordinary course of business you are acting and (ii) 
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    15   * Infineon Technologies AG or its licensees. If and as long as no such 
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    16   * terms of use are agreed, use of this file is subject to following:
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    17  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    18  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    19   * Boost Software License - Version 1.0 - August 17th, 2003
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    20  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    21   * Permission is hereby granted, free of charge, to any person or 
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    22   * organization obtaining a copy of the software and accompanying 
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    23   * documentation covered by this license (the "Software") to use, reproduce,
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    24   * display, distribute, execute, and transmit the Software, and to prepare
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    25   * derivative works of the Software, and to permit third-parties to whom the 
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    26   * Software is furnished to do so, all subject to the following:
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    27  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    28   * The copyright notices in the Software and this entire statement, including
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    29   * the above license grant, this restriction and the following disclaimer, must
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    30   * be included in all copies of the Software, in whole or in part, and all
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    31   * derivative works of the Software, unless such copies or derivative works are
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    32   * solely in the form of machine-executable object code generated by a source
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    33   * language processor.
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    34  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    35   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR 
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    36   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    37   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    38   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE 
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    39   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    40   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    41   * DEALINGS IN THE SOFTWARE.
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    42  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    43   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    44   * \defgroup IfxLld_I2c_Std_enums Enumerations
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    45   * \ingroup IfxLld_I2c_Std
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    46   * \defgroup IfxLld_I2c_Std_functions Functions
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    47   * \ingroup IfxLld_I2c_Std
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    48   * \defgroup IfxLld_I2c_Std_structures Data Structures
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    49   * \ingroup IfxLld_I2c_Std
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    50   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    51  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    52  #ifndef IFXI2C_H
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    53  #define IFXI2C_H 1
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    54  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    55  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    56  /*----------------------------------Includes----------------------------------*/
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    57  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    58  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    59  #include "_Impl/IfxI2c_cfg.h"
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    60  #include "Scu/Std/IfxScuWdt.h"
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    61  #include "Scu/Std/IfxScuCcu.h"
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    62  #include "IfxI2c_bf.h"
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    63  #include "_PinMap/IfxI2c_PinMap.h"
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    64  #include "Src/Std/IfxSrc.h"
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    65  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    66  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    67  /*--------------------------------Enumerations--------------------------------*/
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    68  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    69  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    70  /** \addtogroup IfxLld_I2c_Std_enums
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    71   * \{ */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    72  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    73  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    74      IfxI2c_BusStatus_idle        = 0, /**< \brief idle */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    75      IfxI2c_BusStatus_started     = 1, /**< \brief started */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    76      IfxI2c_BusStatus_busyMaster  = 2, /**< \brief busy Master */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    77      IfxI2c_BusStatus_remoteSlave = 3  /**< \brief remote Slave */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    78  } IfxI2c_BusStatus;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    79  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    80  /** \brief enable error interrupt request source
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    81   * Definition in Ifx.I2C.ERRIRQSM.U
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    82   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    83  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    84  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    85      IfxI2c_ErrorInterruptSource_rxFifoUnderflow = IFX_I2C_ERRIRQSM_RXF_UFL_OFF,  /**< \brief receive fifo underflow service request */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    86      IfxI2c_ErrorInterruptSource_rxFifoOverflow  = IFX_I2C_ERRIRQSM_RXF_OFL_OFF,  /**< \brief receive fifo overflow service request */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    87      IfxI2c_ErrorInterruptSource_txFifoUnderflow = IFX_I2C_ERRIRQSM_TXF_UFL_OFF,  /**< \brief transmit fifo underflow service request */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    88      IfxI2c_ErrorInterruptSource_txFifoOverflow  = IFX_I2C_ERRIRQSM_TXF_OFL_OFF   /**< \brief transmit fifo overflow service request */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    89  } IfxI2c_ErrorInterruptSource;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    90  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    91  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    92  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    93      IfxI2c_PinSelect_a = 0,
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    94      IfxI2c_PinSelect_b = 1,
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    95      IfxI2c_PinSelect_c = 2,
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    96      IfxI2c_PinSelect_d = 3,
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    97      IfxI2c_PinSelect_e = 4,
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    98      IfxI2c_PinSelect_f = 5,
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    99      IfxI2c_PinSelect_g = 6,
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   100      IfxI2c_PinSelect_h = 7
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   101  } IfxI2c_PinSelect;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   102  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   103  /** \brief enable protocol interrupt source
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   104   * Definition in Ifx.I2C.PIRQSM.U
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   105   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   106  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   107  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   108      IfxI2c_ProtocolInterruptSource_addressMatch           = IFX_I2C_PIRQSM_AM_OFF,     /**< \brief address match service request */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   109      IfxI2c_ProtocolInterruptSource_generalCall            = IFX_I2C_PIRQSM_GC_OFF,     /**< \brief general call service request */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   110      IfxI2c_ProtocolInterruptSource_masterCode             = IFX_I2C_PIRQSM_MC_OFF,     /**< \brief master code service request */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   111      IfxI2c_ProtocolInterruptSource_arbitrationLost        = IFX_I2C_PIRQSM_AL_OFF,     /**< \brief arbitration lost service request */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   112      IfxI2c_ProtocolInterruptSource_notAcknowledgeReceived = IFX_I2C_PIRQSM_NACK_OFF,   /**< \brief not acknowledge received service request */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   113      IfxI2c_ProtocolInterruptSource_transmissionEnd        = IFX_I2C_PIRQSM_TX_END_OFF, /**< \brief transmission end service request */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   114      IfxI2c_ProtocolInterruptSource_receiveMode            = IFX_I2C_PIRQSM_RX_OFF      /**< \brief receive mode service request */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   115  } IfxI2c_ProtocolInterruptSource;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   116  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   117  /** \brief Enable/disable the sensitivity of the module to sleep signal\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   118   * Definition in Ifx_I2C.CLC1.B.EDIS
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   119   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   120  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   121  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   122      IfxI2c_SleepMode_enable  = 0, /**< \brief enables sleep mode */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   123      IfxI2c_SleepMode_disable = 1  /**< \brief disables sleep mode */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   124  } IfxI2c_SleepMode;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   125  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   126  /** \} */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   127  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   128  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   129  /*-----------------------------Data Structures--------------------------------*/
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   130  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   131  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   132  /** \addtogroup IfxLld_I2c_Std_structures
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   133   * \{ */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   134  /** \brief Pin Structure
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   135   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   136  typedef struct
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   137  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   138      IfxI2c_Scl_InOut *scl;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   139      IfxI2c_Sda_InOut *sda;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   140      IfxPort_PadDriver padDriver;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   141  } IfxI2c_Pins;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   142  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   143  /** \} */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   144  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   145  /** \addtogroup IfxLld_I2c_Std_functions
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   146   * \{ */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   147  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   148  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   149  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   150  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   151  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   152  /** \brief Returns if the bus is free
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   153   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   154  IFX_INLINE boolean IfxI2c_busIsFree(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   155  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   156  /** \brief clears all DTR interrupt sources
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   157   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   158   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   159   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   160  IFX_INLINE void IfxI2c_clearAllDtrInterruptSources(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   161  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   162  /** \brief clears all Error Interrupt sources
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   163   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   164   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   165   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   166  IFX_INLINE void IfxI2c_clearAllErrorInterruptSources(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   167  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   168  /** \brief Clears all Protocol Interrupt sources
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   169   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   170   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   171   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   172  IFX_INLINE void IfxI2c_clearAllProtocolInterruptSources(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   173  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   174  /** \brief clears burst request interrupt source
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   175   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   176   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   177   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   178  IFX_INLINE void IfxI2c_clearBurstRequestInterruptSource(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   179  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   180  /** \brief clears the specified source of error interrupt
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   181   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   182   * \param source error interrupt source
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   183   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   184   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   185  IFX_INLINE void IfxI2c_clearErrorInterruptSource(Ifx_I2C *i2c, IfxI2c_ErrorInterruptSource source);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   186  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   187  /** \brief clears last burst request interrupt source
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   188   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   189   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   190   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   191  IFX_INLINE void IfxI2c_clearLastBurstRequestInterruptSource(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   192  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   193  /** \brief clears last single request interrupt source
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   194   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   195   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   196   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   197  IFX_INLINE void IfxI2c_clearLastSingleRequestInterruptSource(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   198  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   199  /** \brief clears the specified source of protocol interrupt
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   200   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   201   * \param source protocol interrupt source
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   202   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   203   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   204  IFX_INLINE void IfxI2c_clearProtocolInterruptSource(Ifx_I2C *i2c, IfxI2c_ProtocolInterruptSource source);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   205  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   206  /** \brief clears single request interrupt source
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   207   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   208   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   209   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   210  IFX_INLINE void IfxI2c_clearSingleRequestInterruptSource(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   211  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   212  /** \brief disables burst request interrupt source
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   213   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   214   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   215   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   216  IFX_INLINE void IfxI2c_disableBurstRequestInterruptSource(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   217  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   218  /** \brief disables the error interrupt flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   219   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   220   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   221   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   222  IFX_INLINE void IfxI2c_disableErrorInterruptFlag(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   223  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   224  /** \brief disables the specified source of error interrupt
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   225   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   226   * \param source error interrupt source
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   227   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   228   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   229  IFX_INLINE void IfxI2c_disableErrorInterruptSource(Ifx_I2C *i2c, IfxI2c_ErrorInterruptSource source);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   230  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   231  /** \brief disables last burst request interrupt source
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   232   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   233   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   234   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   235  IFX_INLINE void IfxI2c_disableLastBurstRequestInterruptSource(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   236  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   237  /** \brief disables last single request interrupt source
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   238   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   239   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   240   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   241  IFX_INLINE void IfxI2c_disableLastSingleRequestInterruptSource(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   242  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   243  /** \brief disables the Protocol interrupt flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   244   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   245   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   246   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   247  IFX_INLINE void IfxI2c_disableProtocolInterruptFlag(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   248  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   249  /** \brief disables the specified source of protocol interrupt
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   250   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   251   * \param source protocol interrupt source
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   252   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   253   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   254  IFX_INLINE void IfxI2c_disableProtocolInterruptSource(Ifx_I2C *i2c, IfxI2c_ProtocolInterruptSource source);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   255  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   256  /** \brief disables single request interrupt source
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   257   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   258   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   259   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   260  IFX_INLINE void IfxI2c_disableSingleRequestInterruptSource(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   261  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   262  /** \brief enables burst request interrupt source
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   263   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   264   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   265   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   266  IFX_INLINE void IfxI2c_enableBurstRequestInterruptSource(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   267  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   268  /** \brief enables the error interrupt flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   269   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   270   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   271   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   272  IFX_INLINE void IfxI2c_enableErrorInterruptFlag(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   273  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   274  /** \brief enables the specified source of error interrupt
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   275   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   276   * \param source error interrupt source
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   277   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   278   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   279  IFX_INLINE void IfxI2c_enableErrorInterruptSource(Ifx_I2C *i2c, IfxI2c_ErrorInterruptSource source);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   280  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   281  /** \brief enables last burst request interrupt source
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   282   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   283   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   284   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   285  IFX_INLINE void IfxI2c_enableLastBurstRequestInterruptSource(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   286  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   287  /** \brief enables last single request interrupt source
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   288   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   289   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   290   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   291  IFX_INLINE void IfxI2c_enableLastSingleRequestInterruptSource(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   292  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   293  /** \brief enables the protocol interrupt flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   294   * \param i2c pointer to I2C registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   295   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   296   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   297  IFX_INLINE void IfxI2c_enableProtocolInterruptFlag(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   298  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   299  /** \brief enables the specified source of protocol interrupt
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   300   * \param i2c pointer to I2C registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   301   * \param source protocol interrupt source
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   302   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   303   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   304  IFX_INLINE void IfxI2c_enableProtocolInterruptSource(Ifx_I2C *i2c, IfxI2c_ProtocolInterruptSource source);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   305  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   306  /** \brief enables single request interrupt source
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   307   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   308   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   309   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   310  IFX_INLINE void IfxI2c_enableSingleRequestInterruptSource(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   311  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   312  /** \brief Returns the SRC pointer for I2C burst data transfer request interrupt
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   313   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   314   * \return SRC pointer for I2C burst data transfer Service interrupt
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   315   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   316  IFX_INLINE volatile Ifx_SRC_SRCR *IfxI2c_getBurstDataTransferSrcPointer(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   317  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   318  /** \brief returns the status of burst request interrupt source status
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   319   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   320   * \return status
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   321   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   322  IFX_INLINE boolean IfxI2c_getBurstRequestInterruptSourceStatus(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   323  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   324  /**
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   325   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   326   * \return BusStatus
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   327   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   328  IFX_INLINE IfxI2c_BusStatus IfxI2c_getBusStatus(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   329  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   330  /** \brief returns the current status of error interrupt flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   331   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   332   * \return status
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   333   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   334  IFX_INLINE boolean IfxI2c_getErrorInterruptFlagStatus(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   335  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   336  /** \brief returns the status of the error interrupt source
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   337   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   338   * \param source error interrupt source
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   339   * \return status
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   340   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   341  IFX_INLINE boolean IfxI2c_getErrorInterruptSourceStatus(Ifx_I2C *i2c, IfxI2c_ErrorInterruptSource source);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   342  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   343  /** \brief Returns the SRC pointer for I2C Error interrupt
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   344   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   345   * \return SRC pointer for I2C Error Service interrupt
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   346   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   347  IFX_INLINE volatile Ifx_SRC_SRCR *IfxI2c_getErrorSrcPointer(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   348  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   349  /** \brief Returns the SRC pointer for I2C last burst data transfer request interrupt
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   350   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   351   * \return SRC pointer for I2C last burst data transfer Service interrupt
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   352   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   353  IFX_INLINE volatile Ifx_SRC_SRCR *IfxI2c_getLastBurstDataTransferSrcPointer(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   354  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   355  /** \brief returns the status of last burst request interrupt source status
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   356   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   357   * \return status
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   358   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   359  IFX_INLINE boolean IfxI2c_getLastBurstRequestInterruptSourceStatus(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   360  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   361  /** \brief Returns the SRC pointer for I2C last single data transfer request interrupt
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   362   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   363   * \return SRC pointer for I2C last single data transfer Service interrupt
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   364   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   365  IFX_INLINE volatile Ifx_SRC_SRCR *IfxI2c_getLastSingleDataTransferSrcPointer(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   366  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   367  /** \brief returns the status of last single request interrupt source status
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   368   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   369   * \return status
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   370   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   371  IFX_INLINE boolean IfxI2c_getLastSingleRequestInterruptSourceStatus(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   372  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   373  /** \brief returns the current raw status of protocol interrupt
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   374   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   375   * \return status
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   376   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   377  IFX_INLINE boolean IfxI2c_getProtocolInterruptFlagStatus(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   378  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   379  /** \brief returns the status of  specified protocol interrupt source
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   380   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   381   * \param source protocol interrupt source
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   382   * \return status
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   383   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   384  IFX_INLINE boolean IfxI2c_getProtocolInterruptSourceStatus(Ifx_I2C *i2c, IfxI2c_ProtocolInterruptSource source);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   385  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   386  /** \brief Returns the SRC pointer for I2C Protocol interrupt
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   387   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   388   * \return SRC pointer for I2C Protocol Service interrupt
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   389   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   390  IFX_INLINE volatile Ifx_SRC_SRCR *IfxI2c_getProtocolSrcPointer(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   391  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   392  /** \brief Returns the SRC pointer for I2C single data transfer request interrupt
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   393   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   394   * \return SRC pointer for I2C single data transfer Service interrupt
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   395   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   396  IFX_INLINE volatile Ifx_SRC_SRCR *IfxI2c_getSingleDataTransferSrcPointer(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   397  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   398  /** \brief returns the status of single request interrupt source status
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   399   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   400   * \return status
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   401   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   402  IFX_INLINE boolean IfxI2c_getSingleRequestInterruptSourceStatus(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   403  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   404  /** \brief Returns if the Fifo is requesting new data
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   405   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   406  IFX_INLINE boolean IfxI2c_isFifoRequest(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   407  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   408  /**
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   409   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   410   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   411   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   412  IFX_INLINE void IfxI2c_run(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   413  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   414  /** \brief selects the pin
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   415   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   416   * \param pisel pin to be select
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   417   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   418   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   419  IFX_INLINE void IfxI2c_setPinSelection(Ifx_I2C *i2c, IfxI2c_PinSelect pisel);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   420  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   421  /** \brief Sets the number of bytes to be received
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   422   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   423   * \param size number of packets
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   424   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   425   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   426  IFX_INLINE void IfxI2c_setReceivePacketSize(Ifx_I2C *i2c, Ifx_SizeT size);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   427  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   428  /**
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   429   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   430   * \param address device address
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   431   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   432   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   433  IFX_INLINE void IfxI2c_setSlaveDeviceAddress(Ifx_I2C *i2c, uint16 address);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   434  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   435  /** \brief Sets the sensitivity of the module to sleep signal
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   436   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   437   * \param mode mode selection (enable / disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   438   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   439   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   440  IFX_INLINE void IfxI2c_setSleepMode(Ifx_I2C *i2c, IfxI2c_SleepMode mode);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   441  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   442  /** \brief Sets the number of bytes to be tansmitted
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   443   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   444   * \param size number of packets
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   445   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   446   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   447  IFX_INLINE void IfxI2c_setTransmitPacketSize(Ifx_I2C *i2c, Ifx_SizeT size);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   448  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   449  /**
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   450   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   451   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   452   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   453  IFX_INLINE void IfxI2c_stop(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   454  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   455  /**
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   456   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   457   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   458   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   459  IFX_INLINE void IfxI2c_waitBusFree(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   460  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   461  /** \brief Writes a packet (4 bytes) into the Fifo
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   462   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   463   * \param packet specifies the byte to be transfer
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   464   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   465   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   466  IFX_INLINE void IfxI2c_writeFifo(Ifx_I2C *i2c, uint32 packet);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   467  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   468  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   469  /*-------------------------Global Function Prototypes-------------------------*/
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   470  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   471  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   472  /** \brief Configures the Module as Master
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   473   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   474   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   475   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   476  IFX_EXTERN void IfxI2c_configureAsMaster(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   477  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   478  /** \brief Disables the I2c Module
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   479   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   480   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   481   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   482  IFX_EXTERN void IfxI2c_disableModule(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   483  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   484  /** \brief Enables the Burst data transfer interrupt
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   485   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   486   * \param typeOfService Type of Service (Cpu or DMA)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   487   * \param priority priority of the interrupt
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   488   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   489   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   490  IFX_EXTERN void IfxI2c_enableBurstDataTransferInterrupt(Ifx_I2C *i2c, IfxSrc_Tos typeOfService, uint16 priority);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   491  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   492  /** \brief Enables the Error interrupt
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   493   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   494   * \param typeOfService Type of Service (Cpu or DMA)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   495   * \param priority priority of the interrupt
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   496   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   497   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   498  IFX_EXTERN void IfxI2c_enableErrorInterrupt(Ifx_I2C *i2c, IfxSrc_Tos typeOfService, uint16 priority);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   499  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   500  /** \brief enables the last burst data transfer interrupt
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   501   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   502   * \param typeOfService Type of Service (Cpu or DMA)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   503   * \param priority priority of the interrupt
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   504   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   505   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   506  IFX_EXTERN void IfxI2c_enableLastBurstDataTransferInterrupt(Ifx_I2C *i2c, IfxSrc_Tos typeOfService, uint16 priority);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   507  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   508  /** \brief enables the last single data transfer interrupt
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   509   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   510   * \param typeOfService Type of Service (Cpu or DMA)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   511   * \param priority priority of the interrupt
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   512   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   513   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   514  IFX_EXTERN void IfxI2c_enableLastSingleDataTransferInterrupt(Ifx_I2C *i2c, IfxSrc_Tos typeOfService, uint16 priority);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   515  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   516  /** \brief Enables the I2c Module
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   517   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   518   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   519   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   520  IFX_EXTERN void IfxI2c_enableModule(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   521  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   522  /** \brief Enables the protocol interrupt
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   523   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   524   * \param typeOfService Type of Service (Cpu or DMA)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   525   * \param priority Priority of the interrupt
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   526   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   527   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   528  IFX_EXTERN void IfxI2c_enableProtocolInterrupt(void *i2c, IfxSrc_Tos typeOfService, uint16 priority);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   529  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   530  /** \brief enables the single data transfer interrupt
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   531   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   532   * \param typeOfService Type of Service (Cpu or DMA)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   533   * \param priority priority of the interrupt
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   534   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   535   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   536  IFX_EXTERN void IfxI2c_enableSingleDataTransferInterrupt(Ifx_I2C *i2c, IfxSrc_Tos typeOfService, uint16 priority);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   537  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   538  /**
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   539   * \param i2c Resource index of the I2c
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   540   * \return I2C module register address
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   541   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   542  IFX_EXTERN Ifx_I2C *IfxI2c_getAddress(IfxI2c_Index i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   543  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   544  /** \brief Returns the real Baudrate
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   545   * \return Baudrate
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   546   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   547  IFX_EXTERN float32 IfxI2c_getBaudrate(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   548  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   549  /** \brief API to get the resource index of the I2C specified.
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   550   * \param i2c Pointer to the I2C HW module (register memory map)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   551   * \return Resource index of the I2C
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   552   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   553  IFX_EXTERN IfxI2c_Index IfxI2c_getIndex(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   554  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   555  /**
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   556   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   557   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   558  IFX_EXTERN void IfxI2c_initSclSdaPin(const IfxI2c_Scl_InOut *scl, const IfxI2c_Sda_InOut *sda, IfxPort_PadDriver padDriver);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   559  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   560  /** \brief Releases the bus, i.e puts a stop condition on the bus
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   561   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   562   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   563  IFX_EXTERN void IfxI2c_releaseBus(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   564  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   565  /**
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   566   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   567   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   568  IFX_EXTERN void IfxI2c_resetFifo(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   569  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   570  /** \brief resets the I2c kernel
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   571   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   572   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   573   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   574  IFX_EXTERN void IfxI2c_resetModule(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   575  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   576  /** \brief Calculates the desired baudrate
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   577   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   578   * \param baudrate specifies the baud rate
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   579   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   580   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   581  IFX_EXTERN void IfxI2c_setBaudrate(Ifx_I2C *i2c, float32 baudrate);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   582  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   583  /** \} */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   584  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   585  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   586  /*---------------------Inline Function Implementations------------------------*/
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   587  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   588  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   589  IFX_INLINE boolean IfxI2c_busIsFree(Ifx_I2C *i2c)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   590  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   591      boolean free = FALSE;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   592  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   593      if (i2c->BUSSTAT.B.BS == IfxI2c_BusStatus_idle)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   594      {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   595          free = TRUE;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   596      }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   597  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   598      return free;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   599  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   600  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   601  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   602  IFX_INLINE void IfxI2c_clearAllDtrInterruptSources(Ifx_I2C *i2c)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   603  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   604      i2c->ICR.U = (1 << IFX_I2C_ICR_LSREQ_INT_OFF) | (1 << IFX_I2C_ICR_SREQ_INT_OFF) | (1 << IFX_I2C_ICR_LBREQ_INT_OFF) | (1 << IFX_I2C_ICR_BREQ_INT_OFF);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   605  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   606  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   607  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   608  IFX_INLINE void IfxI2c_clearAllErrorInterruptSources(Ifx_I2C *i2c)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   609  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   610      i2c->ERRIRQSC.U = (1 << IFX_I2C_ERRIRQSC_RXF_UFL_OFF) | (1 << IFX_I2C_ERRIRQSC_RXF_OFL_OFF) | (1 << IFX_I2C_ERRIRQSC_TXF_UFL_OFF) | (1 << IFX_I2C_ERRIRQSC_TXF_OFL_OFF);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   611  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   612  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   613  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   614  IFX_INLINE void IfxI2c_clearAllProtocolInterruptSources(Ifx_I2C *i2c)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   615  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   616      i2c->PIRQSC.U = (1 << IFX_I2C_PIRQSC_AM_OFF) | (1 << IFX_I2C_PIRQSC_GC_OFF) | (1 << IFX_I2C_PIRQSC_MC_OFF) | (1 << IFX_I2C_PIRQSC_AL_OFF) | (1 << IFX_I2C_PIRQSC_NACK_OFF) | (1 << IFX_I2C_PIRQSC_TX_END_OFF) | (1 << IFX_I2C_PIRQSC_RX_OFF);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   617  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   618  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   619  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   620  IFX_INLINE void IfxI2c_clearBurstRequestInterruptSource(Ifx_I2C *i2c)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   621  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   622      i2c->ICR.B.BREQ_INT = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   623  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   624  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   625  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   626  IFX_INLINE void IfxI2c_clearErrorInterruptSource(Ifx_I2C *i2c, IfxI2c_ErrorInterruptSource source)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   627  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   628      i2c->ERRIRQSC.U = (1 << source);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   629  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   630  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   631  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   632  IFX_INLINE void IfxI2c_clearLastBurstRequestInterruptSource(Ifx_I2C *i2c)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   633  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   634      i2c->ICR.B.LBREQ_INT = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   635  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   636  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   637  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   638  IFX_INLINE void IfxI2c_clearLastSingleRequestInterruptSource(Ifx_I2C *i2c)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   639  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   640      i2c->ICR.B.LSREQ_INT = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   641  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   642  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   643  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   644  IFX_INLINE void IfxI2c_clearProtocolInterruptSource(Ifx_I2C *i2c, IfxI2c_ProtocolInterruptSource source)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   645  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   646      i2c->PIRQSC.U = (1 << source);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   647  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   648  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   649  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   650  IFX_INLINE void IfxI2c_clearSingleRequestInterruptSource(Ifx_I2C *i2c)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   651  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   652      i2c->ICR.B.SREQ_INT = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   653  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   654  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   655  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   656  IFX_INLINE void IfxI2c_disableBurstRequestInterruptSource(Ifx_I2C *i2c)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   657  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   658      i2c->IMSC.B.BREQ_INT = 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   659  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   660  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   661  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   662  IFX_INLINE void IfxI2c_disableErrorInterruptFlag(Ifx_I2C *i2c)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   663  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   664      i2c->IMSC.B.I2C_ERR_INT = 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   665  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   666  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   667  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   668  IFX_INLINE void IfxI2c_disableErrorInterruptSource(Ifx_I2C *i2c, IfxI2c_ErrorInterruptSource source)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   669  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   670      i2c->ERRIRQSM.U &= ~(1 << source);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   671  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   672  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   673  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   674  IFX_INLINE void IfxI2c_disableLastBurstRequestInterruptSource(Ifx_I2C *i2c)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   675  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   676      i2c->IMSC.B.LBREQ_INT = 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   677  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   678  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   679  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   680  IFX_INLINE void IfxI2c_disableLastSingleRequestInterruptSource(Ifx_I2C *i2c)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   681  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   682      i2c->IMSC.B.LSREQ_INT = 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   683  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   684  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   685  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   686  IFX_INLINE void IfxI2c_disableProtocolInterruptFlag(Ifx_I2C *i2c)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   687  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   688      i2c->IMSC.B.I2C_P_INT = 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   689  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   690  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   691  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   692  IFX_INLINE void IfxI2c_disableProtocolInterruptSource(Ifx_I2C *i2c, IfxI2c_ProtocolInterruptSource source)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   693  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   694      i2c->PIRQSM.U &= ~(1 << source);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   695  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   696  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   697  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   698  IFX_INLINE void IfxI2c_disableSingleRequestInterruptSource(Ifx_I2C *i2c)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   699  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   700      i2c->IMSC.B.SREQ_INT = 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   701  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   702  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   703  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   704  IFX_INLINE void IfxI2c_enableBurstRequestInterruptSource(Ifx_I2C *i2c)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   705  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   706      i2c->IMSC.B.BREQ_INT = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   707  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   708  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   709  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   710  IFX_INLINE void IfxI2c_enableErrorInterruptFlag(Ifx_I2C *i2c)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   711  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   712      i2c->IMSC.B.I2C_ERR_INT = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   713  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   714  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   715  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   716  IFX_INLINE void IfxI2c_enableErrorInterruptSource(Ifx_I2C *i2c, IfxI2c_ErrorInterruptSource source)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   717  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   718      i2c->ERRIRQSM.U |= (1 << source);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   719  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   720  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   721  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   722  IFX_INLINE void IfxI2c_enableLastBurstRequestInterruptSource(Ifx_I2C *i2c)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   723  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   724      i2c->IMSC.B.LBREQ_INT = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   725  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   726  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   727  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   728  IFX_INLINE void IfxI2c_enableLastSingleRequestInterruptSource(Ifx_I2C *i2c)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   729  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   730      i2c->IMSC.B.LSREQ_INT = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   731  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   732  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   733  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   734  IFX_INLINE void IfxI2c_enableProtocolInterruptFlag(Ifx_I2C *i2c)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   735  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   736      i2c->IMSC.B.I2C_P_INT = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   737  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   738  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   739  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   740  IFX_INLINE void IfxI2c_enableProtocolInterruptSource(Ifx_I2C *i2c, IfxI2c_ProtocolInterruptSource source)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   741  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   742      i2c->PIRQSM.U |= (1 << source);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   743  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   744  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   745  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   746  IFX_INLINE void IfxI2c_enableSingleRequestInterruptSource(Ifx_I2C *i2c)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   747  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   748      i2c->IMSC.B.SREQ_INT = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   749  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   750  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   751  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   752  IFX_INLINE volatile Ifx_SRC_SRCR *IfxI2c_getBurstDataTransferSrcPointer(Ifx_I2C *i2c)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   753  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   754      if (i2c == &MODULE_I2C0)
	movh.a	a15,#61452
.L444:

; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   754      if (i2c == &MODULE_I2C0)      (inlined)
	jne.a	a4,a15,.L3
.L445:

; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   755      {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   756          return &MODULE_SRC.I2C.I2C[0].BREQ;
	movh.a	a15,#61444
	lea	a15,[a15]@los(0xf0038300)
.L446:

; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   756          return &MODULE_SRC.I2C.I2C[0].BREQ;      (inlined)
	j	.L4

; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   754      if (i2c == &MODULE_I2C0)      (inlined)
.L3:

; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   757      }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   758      else
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   759      {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   760          return &MODULE_SRC.I2C.I2C[1].BREQ;
	movh.a	a15,#61444
	lea	a15,[a15]@los(0xf0038350)

; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   762  }      (inlined)
.L4:

; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	     1  /**
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	     2   * \file IfxSrc.h
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	     3   * \brief SRC  basic functionality
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	     4   * \ingroup IfxLld_Src
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	     5   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	     6   * \version iLLD_1_0_1_11_0
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	     7   * \copyright Copyright (c) 2019 Infineon Technologies AG. All rights reserved.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	     8   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	     9   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    10   *                                 IMPORTANT NOTICE
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    11   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    12   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    13   * Use of this file is subject to the terms of use agreed between (i) you or 
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    14   * the company in which ordinary course of business you are acting and (ii) 
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    15   * Infineon Technologies AG or its licensees. If and as long as no such 
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    16   * terms of use are agreed, use of this file is subject to following:
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    17  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    18  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    19   * Boost Software License - Version 1.0 - August 17th, 2003
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    20  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    21   * Permission is hereby granted, free of charge, to any person or 
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    22   * organization obtaining a copy of the software and accompanying 
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    23   * documentation covered by this license (the "Software") to use, reproduce,
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    24   * display, distribute, execute, and transmit the Software, and to prepare
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    25   * derivative works of the Software, and to permit third-parties to whom the 
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    26   * Software is furnished to do so, all subject to the following:
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    27  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    28   * The copyright notices in the Software and this entire statement, including
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    29   * the above license grant, this restriction and the following disclaimer, must
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    30   * be included in all copies of the Software, in whole or in part, and all
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    31   * derivative works of the Software, unless such copies or derivative works are
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    32   * solely in the form of machine-executable object code generated by a source
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    33   * language processor.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    34  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    35   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR 
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    36   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    37   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    38   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE 
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    39   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    40   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    41   * DEALINGS IN THE SOFTWARE.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    42  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    43   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    44   * \defgroup IfxLld_Src SRC
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    45   * \addtogroup IfxLld_Src
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    46   * \{
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    47   * \defgroup IfxLld_Src_Usage How to use Service Request Mechanism?
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    48   * \addtogroup IfxLld_Src_Usage
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    49   * \{
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    50   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    51   * For Aurix controller peripherals that can generate service requests is connected to one
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    52   * or more Service Request Nodes (SRNs) in the central Interrupt Router(IR) module. Refer to Controller User Manual for more details\n
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    53   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    54   * IfxSrc driver provides the APIs to configure and control service requests. Refer \ref IfxLld_Src_Usage for
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    55   * details of these APIs.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    56   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    57   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    58   * \section Ifx_Src_UsageInit Initialize the Service Request Node
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    59   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    60   * Service request node is initialized to configure the following,\n
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    61   * 1) Route the interrupt trigger to service provider, which are:\n
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    62   *  __a. One of the available CPUs or\n
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    63   *  __b. DMA controller\n
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    64   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    65   * 2) Priority of CPU Interrupt or DMA Trigger.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    66   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    67   * For Interrupt or DMA to be correctly triggered, following steps are to be done in the user code:
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    68   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    69   * \subsection Ifx_Src_UsageInitStep1 Step1: Configure the Node
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    70   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    71   * User must configure the service request node in the application / driver files.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    72   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    73   * \subsection Ifx_Src_UsageInitStep2 Step2: Enable the Trigger
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    74   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    75   * Enable the service request node to connect the trigger event from the hardware to service provider.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    76   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    77   * Example:
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    78   * Following example show the configuration for STM0 Service request 0 trigger configured to trigger
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    79   * CPU1 with the priority specified by IFX_INTPRIO_STM0 (from the example at IfxCpu_Irq)
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    80   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    81   * \code
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    82   * //file: myApplication.c
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    83   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    84   * #include "Ifx_IntPrioDef.h" // to get the priority numbers
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    85   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    86   * void myDriverInitFunction(void)
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    87   * {
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    88   *    // driver init code
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    89   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    90   *    // Step1: Call the function to route the trigger from for SRC_STM0_SR0 to CPU1
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    91   *    // and priority specified at Ifx_IntPrioDef.h globally
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    92   *  IfxSrc_init(&MODULE_SRC.STM.STM[0].SR0, IfxSrc_Tos_cpu1, IFX_INTPRIO_STM0);
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    93   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    94   *    // Step2: Enable the service request node
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    95   *  IfxSrc_init(&MODULE_SRC.STM.STM[0].SR0);
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    96   * }
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    97   * \endcode
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    98   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    99   * \}
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   100   * \}
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   101   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   102   * \defgroup IfxLld_Src_Std_Service_Request Service Request Functions
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   103   * \ingroup IfxLld_Src_Std
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   104   * \defgroup IfxLld_Src_Std_Module Module Functions
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   105   * \ingroup IfxLld_Src_Std
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   106   */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   107  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   108  #ifndef IFXSRC_H
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   109  #define IFXSRC_H 1
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   110  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   111  /******************************************************************************/
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   112  /*----------------------------------Includes----------------------------------*/
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   113  /******************************************************************************/
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   114  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   115  #include "_Impl/IfxSrc_cfg.h"
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   116  #include "Cpu/Std/IfxCpu_Intrinsics.h"
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   117  #include "IfxSrc_reg.h"
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   118  /** \addtogroup IfxLld_Src_Std_Service_Request
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   119   * \{ */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   120  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   121  /******************************************************************************/
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   122  /*-------------------------Inline Function Prototypes-------------------------*/
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   123  /******************************************************************************/
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   124  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   125  /** \brief Resets the overrun flag of the Service Request.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   126   * \param src pointer to the Service Request Control register which the overrun flag should be cleared.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   127   * \return None
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   128   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   129   * Usage example: see \ref IfxSrc_init
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   130   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   131   */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   132  IFX_INLINE void IfxSrc_clearOverrun(volatile Ifx_SRC_SRCR *src);
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   133  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   134  /** \brief Resets a specific interrupt service by software.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   135   * \param src pointer to the Service Request Control register which the request should be cleared.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   136   * \return None
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   137   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   138   * Usage example: see \ref IfxSrc_init
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   139   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   140   */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   141  IFX_INLINE void IfxSrc_clearRequest(volatile Ifx_SRC_SRCR *src);
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   142  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   143  /** \brief Gets the current overrun status.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   144   * \param src pointer to the Service Request Control register for which the overrun status should be returned.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   145   * \return current service request control overrun status.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   146   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   147   * Usage example: see \ref IfxSrc_init
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   148   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   149   */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   150  IFX_INLINE boolean IfxSrc_isOverrun(volatile Ifx_SRC_SRCR *src);
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   151  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   152  /** \brief Gets the current request status.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   153   * \param src pointer to the Service Request Control register for which the request status should be returned.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   154   * \return current service request control request status.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   155   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   156   * Usage example: see \ref IfxSrc_init
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   157   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   158   */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   159  IFX_INLINE boolean IfxSrc_isRequested(volatile Ifx_SRC_SRCR *src);
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   160  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   161  /** \brief Requests a specific interrupt service by software
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   162   * \param src pointer to the Service Request Control register which the interrupt has to be requested.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   163   * \return None
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   164   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   165   * Usage example: see \ref IfxSrc_init
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   166   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   167   */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   168  IFX_INLINE void IfxSrc_setRequest(volatile Ifx_SRC_SRCR *src);
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   169  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   170  /** \} */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   171  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   172  /** \addtogroup IfxLld_Src_Std_Module
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   173   * \{ */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   174  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   175  /******************************************************************************/
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   176  /*-------------------------Inline Function Prototypes-------------------------*/
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   177  /******************************************************************************/
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   178  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   179  /** \brief DeInitializes the service request control register.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   180   * \param src pointer to the Service Request Control register which should be deinitialised.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   181   * \return None
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   182   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   183   * Usage example: see \ref IfxSrc_init
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   184   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   185   */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   186  IFX_INLINE void IfxSrc_deinit(volatile Ifx_SRC_SRCR *src);
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   187  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   188  /** \brief Disables a specific interrupt service request.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   189   * \param src pointer to the Service Request Control register for which the interrupt has to be disabled.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   190   * \return None
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   191   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   192   * Usage example: see \ref IfxSrc_init
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   193   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   194   */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   195  IFX_INLINE void IfxSrc_disable(volatile Ifx_SRC_SRCR *src);
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   196  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   197  /** \brief Enables a specific interrupt service request.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   198   * \param src pointer to the Service Request Control register for which the interrupt has to be enabled.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   199   * \return None
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   200   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   201   * Usage example: see \ref IfxSrc_init
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   202   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   203   */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   204  IFX_INLINE void IfxSrc_enable(volatile Ifx_SRC_SRCR *src);
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   205  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   206  /** \brief Initializes the service request control register.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   207   * \param src pointer to the Service Request Control register which should be initialised.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   208   * \param typOfService type of interrupt service provider.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   209   * \param priority Interrupt priority.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   210   * \return None
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   211   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   212   * Get the peripheral service control register which request need to be serviced and assign this service to any of service providers.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   213   * \code
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   214   * //define the interrupt priority
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   215   * #define IFXASCLIN0_TX_INTPRIO 2
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   216   * //get the service request
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   217   * volatile Ifx_SRC_SRCR *src = IfxAsclin_getSrcPointerRx( &MODULE_ASCLIN0 );
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   218   * //initlaise the service request
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   219   * IfxSrc_init( src, IfxSrc_Tos_cpu0, IFXASCLIN0_TX_INTPRIO );
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   220   * // enable the service
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   221   * IfxSrc_enable( src );
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   222   * //check for service request flags and clear if they occur
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   223   * if ( IfxSrc_isRequested( src ) == TRUE )
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   224   * {
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   225   *    IfxSrc_clearRequest( src );
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   226   * }
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   227   * if ( IfxSrc_isOverrun( src ) == TRUE )
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   228   * {
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   229   *      IfxSrc_clearOverrun( src );
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   230   * }
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   231   * // Atlast deinitialise the service control
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   232   * IfxSrc_deinit( src );
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   233   * \endcode
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   234   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   235   */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   236  IFX_INLINE void IfxSrc_init(volatile Ifx_SRC_SRCR *src, IfxSrc_Tos typOfService, Ifx_Priority priority);
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   237  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   238  /** \} */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   239  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   240  /******************************************************************************/
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   241  /*---------------------Inline Function Implementations------------------------*/
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   242  /******************************************************************************/
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   243  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   244  IFX_INLINE void IfxSrc_clearOverrun(volatile Ifx_SRC_SRCR *src)
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   245  {
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   246      src->B.IOVCLR = 1;
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   247  }
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   248  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   249  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   250  IFX_INLINE void IfxSrc_clearRequest(volatile Ifx_SRC_SRCR *src)
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   251  {
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   252      src->B.CLRR = 1;
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   253  }
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   254  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   255  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   256  IFX_INLINE void IfxSrc_deinit(volatile Ifx_SRC_SRCR *src)
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   257  {
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   258      src->U = 0;
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   259  }
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   260  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   261  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   262  IFX_INLINE void IfxSrc_disable(volatile Ifx_SRC_SRCR *src)
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   263  {
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   264      src->B.SRE = 0;
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   265  }
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   266  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   267  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   268  IFX_INLINE void IfxSrc_enable(volatile Ifx_SRC_SRCR *src)
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   269  {
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   270      src->B.SRE = 1;
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   271  }
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   272  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   273  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   274  IFX_INLINE void IfxSrc_init(volatile Ifx_SRC_SRCR *src, IfxSrc_Tos typOfService, Ifx_Priority priority)
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   275  {
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   276      src->B.SRPN = priority;
	fcall	.cocofun_1
.L213:

; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.c	    91  xI2c_enableErrorInterrupt(Ifx_I2C *i2c, IfxSrc_Tos typeOfService, uint16 priority)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.c	    92  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.c	    93      volatile Ifx_SRC_SRCR *src;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.c	    94      src = IfxI2c_getErrorSrcPointer(i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.c	    95      IfxSrc_init(src, typeOfService, priority);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.c	    96      IfxSrc_enable(src);
	ret
.L203:
	
__IfxI2c_enableBurstDataTransferInterrupt_function_end:
	.size	IfxI2c_enableBurstDataTransferInterrupt,__IfxI2c_enableBurstDataTransferInterrupt_function_end-IfxI2c_enableBurstDataTransferInterrupt
.L93:
	; End of function
	
	.sdecl	'.text.IfxI2c..cocofun_1',code,cluster('.cocofun_1')
	.sect	'.text.IfxI2c..cocofun_1'
	.align	2
; Function .cocofun_1
.L46:
.cocofun_1:	.type	func
; Function body .cocofun_1, coco_iter:0

; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	     1  /**
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	     2   * \file IfxSrc.h
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	     3   * \brief SRC  basic functionality
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	     4   * \ingroup IfxLld_Src
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	     5   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	     6   * \version iLLD_1_0_1_11_0
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	     7   * \copyright Copyright (c) 2019 Infineon Technologies AG. All rights reserved.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	     8   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	     9   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    10   *                                 IMPORTANT NOTICE
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    11   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    12   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    13   * Use of this file is subject to the terms of use agreed between (i) you or 
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    14   * the company in which ordinary course of business you are acting and (ii) 
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    15   * Infineon Technologies AG or its licensees. If and as long as no such 
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    16   * terms of use are agreed, use of this file is subject to following:
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    17  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    18  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    19   * Boost Software License - Version 1.0 - August 17th, 2003
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    20  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    21   * Permission is hereby granted, free of charge, to any person or 
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    22   * organization obtaining a copy of the software and accompanying 
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    23   * documentation covered by this license (the "Software") to use, reproduce,
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    24   * display, distribute, execute, and transmit the Software, and to prepare
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    25   * derivative works of the Software, and to permit third-parties to whom the 
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    26   * Software is furnished to do so, all subject to the following:
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    27  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    28   * The copyright notices in the Software and this entire statement, including
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    29   * the above license grant, this restriction and the following disclaimer, must
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    30   * be included in all copies of the Software, in whole or in part, and all
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    31   * derivative works of the Software, unless such copies or derivative works are
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    32   * solely in the form of machine-executable object code generated by a source
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    33   * language processor.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    34  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    35   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR 
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    36   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    37   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    38   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE 
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    39   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    40   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    41   * DEALINGS IN THE SOFTWARE.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    42  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    43   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    44   * \defgroup IfxLld_Src SRC
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    45   * \addtogroup IfxLld_Src
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    46   * \{
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    47   * \defgroup IfxLld_Src_Usage How to use Service Request Mechanism?
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    48   * \addtogroup IfxLld_Src_Usage
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    49   * \{
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    50   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    51   * For Aurix controller peripherals that can generate service requests is connected to one
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    52   * or more Service Request Nodes (SRNs) in the central Interrupt Router(IR) module. Refer to Controller User Manual for more details\n
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    53   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    54   * IfxSrc driver provides the APIs to configure and control service requests. Refer \ref IfxLld_Src_Usage for
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    55   * details of these APIs.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    56   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    57   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    58   * \section Ifx_Src_UsageInit Initialize the Service Request Node
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    59   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    60   * Service request node is initialized to configure the following,\n
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    61   * 1) Route the interrupt trigger to service provider, which are:\n
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    62   *  __a. One of the available CPUs or\n
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    63   *  __b. DMA controller\n
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    64   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    65   * 2) Priority of CPU Interrupt or DMA Trigger.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    66   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    67   * For Interrupt or DMA to be correctly triggered, following steps are to be done in the user code:
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    68   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    69   * \subsection Ifx_Src_UsageInitStep1 Step1: Configure the Node
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    70   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    71   * User must configure the service request node in the application / driver files.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    72   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    73   * \subsection Ifx_Src_UsageInitStep2 Step2: Enable the Trigger
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    74   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    75   * Enable the service request node to connect the trigger event from the hardware to service provider.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    76   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    77   * Example:
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    78   * Following example show the configuration for STM0 Service request 0 trigger configured to trigger
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    79   * CPU1 with the priority specified by IFX_INTPRIO_STM0 (from the example at IfxCpu_Irq)
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    80   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    81   * \code
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    82   * //file: myApplication.c
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    83   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    84   * #include "Ifx_IntPrioDef.h" // to get the priority numbers
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    85   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    86   * void myDriverInitFunction(void)
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    87   * {
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    88   *    // driver init code
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    89   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    90   *    // Step1: Call the function to route the trigger from for SRC_STM0_SR0 to CPU1
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    91   *    // and priority specified at Ifx_IntPrioDef.h globally
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    92   *  IfxSrc_init(&MODULE_SRC.STM.STM[0].SR0, IfxSrc_Tos_cpu1, IFX_INTPRIO_STM0);
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    93   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    94   *    // Step2: Enable the service request node
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    95   *  IfxSrc_init(&MODULE_SRC.STM.STM[0].SR0);
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    96   * }
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    97   * \endcode
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    98   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    99   * \}
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   100   * \}
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   101   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   102   * \defgroup IfxLld_Src_Std_Service_Request Service Request Functions
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   103   * \ingroup IfxLld_Src_Std
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   104   * \defgroup IfxLld_Src_Std_Module Module Functions
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   105   * \ingroup IfxLld_Src_Std
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   106   */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   107  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   108  #ifndef IFXSRC_H
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   109  #define IFXSRC_H 1
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   110  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   111  /******************************************************************************/
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   112  /*----------------------------------Includes----------------------------------*/
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   113  /******************************************************************************/
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   114  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   115  #include "_Impl/IfxSrc_cfg.h"
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   116  #include "Cpu/Std/IfxCpu_Intrinsics.h"
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   117  #include "IfxSrc_reg.h"
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   118  /** \addtogroup IfxLld_Src_Std_Service_Request
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   119   * \{ */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   120  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   121  /******************************************************************************/
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   122  /*-------------------------Inline Function Prototypes-------------------------*/
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   123  /******************************************************************************/
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   124  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   125  /** \brief Resets the overrun flag of the Service Request.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   126   * \param src pointer to the Service Request Control register which the overrun flag should be cleared.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   127   * \return None
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   128   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   129   * Usage example: see \ref IfxSrc_init
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   130   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   131   */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   132  IFX_INLINE void IfxSrc_clearOverrun(volatile Ifx_SRC_SRCR *src);
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   133  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   134  /** \brief Resets a specific interrupt service by software.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   135   * \param src pointer to the Service Request Control register which the request should be cleared.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   136   * \return None
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   137   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   138   * Usage example: see \ref IfxSrc_init
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   139   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   140   */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   141  IFX_INLINE void IfxSrc_clearRequest(volatile Ifx_SRC_SRCR *src);
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   142  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   143  /** \brief Gets the current overrun status.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   144   * \param src pointer to the Service Request Control register for which the overrun status should be returned.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   145   * \return current service request control overrun status.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   146   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   147   * Usage example: see \ref IfxSrc_init
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   148   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   149   */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   150  IFX_INLINE boolean IfxSrc_isOverrun(volatile Ifx_SRC_SRCR *src);
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   151  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   152  /** \brief Gets the current request status.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   153   * \param src pointer to the Service Request Control register for which the request status should be returned.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   154   * \return current service request control request status.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   155   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   156   * Usage example: see \ref IfxSrc_init
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   157   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   158   */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   159  IFX_INLINE boolean IfxSrc_isRequested(volatile Ifx_SRC_SRCR *src);
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   160  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   161  /** \brief Requests a specific interrupt service by software
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   162   * \param src pointer to the Service Request Control register which the interrupt has to be requested.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   163   * \return None
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   164   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   165   * Usage example: see \ref IfxSrc_init
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   166   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   167   */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   168  IFX_INLINE void IfxSrc_setRequest(volatile Ifx_SRC_SRCR *src);
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   169  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   170  /** \} */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   171  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   172  /** \addtogroup IfxLld_Src_Std_Module
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   173   * \{ */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   174  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   175  /******************************************************************************/
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   176  /*-------------------------Inline Function Prototypes-------------------------*/
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   177  /******************************************************************************/
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   178  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   179  /** \brief DeInitializes the service request control register.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   180   * \param src pointer to the Service Request Control register which should be deinitialised.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   181   * \return None
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   182   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   183   * Usage example: see \ref IfxSrc_init
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   184   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   185   */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   186  IFX_INLINE void IfxSrc_deinit(volatile Ifx_SRC_SRCR *src);
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   187  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   188  /** \brief Disables a specific interrupt service request.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   189   * \param src pointer to the Service Request Control register for which the interrupt has to be disabled.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   190   * \return None
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   191   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   192   * Usage example: see \ref IfxSrc_init
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   193   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   194   */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   195  IFX_INLINE void IfxSrc_disable(volatile Ifx_SRC_SRCR *src);
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   196  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   197  /** \brief Enables a specific interrupt service request.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   198   * \param src pointer to the Service Request Control register for which the interrupt has to be enabled.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   199   * \return None
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   200   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   201   * Usage example: see \ref IfxSrc_init
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   202   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   203   */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   204  IFX_INLINE void IfxSrc_enable(volatile Ifx_SRC_SRCR *src);
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   205  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   206  /** \brief Initializes the service request control register.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   207   * \param src pointer to the Service Request Control register which should be initialised.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   208   * \param typOfService type of interrupt service provider.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   209   * \param priority Interrupt priority.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   210   * \return None
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   211   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   212   * Get the peripheral service control register which request need to be serviced and assign this service to any of service providers.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   213   * \code
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   214   * //define the interrupt priority
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   215   * #define IFXASCLIN0_TX_INTPRIO 2
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   216   * //get the service request
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   217   * volatile Ifx_SRC_SRCR *src = IfxAsclin_getSrcPointerRx( &MODULE_ASCLIN0 );
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   218   * //initlaise the service request
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   219   * IfxSrc_init( src, IfxSrc_Tos_cpu0, IFXASCLIN0_TX_INTPRIO );
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   220   * // enable the service
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   221   * IfxSrc_enable( src );
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   222   * //check for service request flags and clear if they occur
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   223   * if ( IfxSrc_isRequested( src ) == TRUE )
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   224   * {
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   225   *    IfxSrc_clearRequest( src );
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   226   * }
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   227   * if ( IfxSrc_isOverrun( src ) == TRUE )
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   228   * {
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   229   *      IfxSrc_clearOverrun( src );
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   230   * }
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   231   * // Atlast deinitialise the service control
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   232   * IfxSrc_deinit( src );
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   233   * \endcode
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   234   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   235   */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   236  IFX_INLINE void IfxSrc_init(volatile Ifx_SRC_SRCR *src, IfxSrc_Tos typOfService, Ifx_Priority priority);
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   237  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   238  /** \} */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   239  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   240  /******************************************************************************/
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   241  /*---------------------Inline Function Implementations------------------------*/
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   242  /******************************************************************************/
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   243  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   244  IFX_INLINE void IfxSrc_clearOverrun(volatile Ifx_SRC_SRCR *src)
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   245  {
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   246      src->B.IOVCLR = 1;
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   247  }
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   248  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   249  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   250  IFX_INLINE void IfxSrc_clearRequest(volatile Ifx_SRC_SRCR *src)
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   251  {
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   252      src->B.CLRR = 1;
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   253  }
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   254  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   255  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   256  IFX_INLINE void IfxSrc_deinit(volatile Ifx_SRC_SRCR *src)
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   257  {
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   258      src->U = 0;
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   259  }
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   260  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   261  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   262  IFX_INLINE void IfxSrc_disable(volatile Ifx_SRC_SRCR *src)
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   263  {
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   264      src->B.SRE = 0;
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   265  }
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   266  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   267  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   268  IFX_INLINE void IfxSrc_enable(volatile Ifx_SRC_SRCR *src)
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   269  {
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   270      src->B.SRE = 1;
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   271  }
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   272  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   273  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   274  IFX_INLINE void IfxSrc_init(volatile Ifx_SRC_SRCR *src, IfxSrc_Tos typOfService, Ifx_Priority priority)
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   275  {
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   276      src->B.SRPN = priority;
	st.b	[a15],d5
.L589:

; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   277      src->B.TOS  = typOfService;
	ld.bu	d15,[a15]1
.L590:
	insert	d15,d15,d4,#3,#2
	st.b	[a15]1,d15
.L591:
	ld.bu	d15,[a15]3
.L592:
	or	d15,#2
	st.b	[a15]3,d15
.L593:
	ld.bu	d15,[a15]1
.L594:
	or	d15,#4
	st.b	[a15]1,d15
.L369:
	fret
.L168:
	; End of function
	.sdecl	'.text.IfxI2c.IfxI2c_enableErrorInterrupt',code,cluster('IfxI2c_enableErrorInterrupt')
	.sect	'.text.IfxI2c.IfxI2c_enableErrorInterrupt'
	.align	2
	
	.global	IfxI2c_enableErrorInterrupt

; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.c	    97  id IfxI2c_enableLastBurstDataTransferInterrupt(Ifx_I2C *i2c, IfxSrc_Tos typeOfService, uint16 priority)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.c	    98  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.c	    99      volatile Ifx_SRC_SRCR *src;
; Function IfxI2c_enableErrorInterrupt
.L48:
IfxI2c_enableErrorInterrupt:	.type	func

; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	     1  /**
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	     2   * \file IfxI2c.h
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	     3   * \brief I2C  basic functionality
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	     4   * \ingroup IfxLld_I2c
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	     5   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	     6   * \version iLLD_1_0_1_11_0
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	     7   * \copyright Copyright (c) 2018 Infineon Technologies AG. All rights reserved.
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	     8   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	     9   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    10   *                                 IMPORTANT NOTICE
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    11   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    12   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    13   * Use of this file is subject to the terms of use agreed between (i) you or 
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    14   * the company in which ordinary course of business you are acting and (ii) 
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    15   * Infineon Technologies AG or its licensees. If and as long as no such 
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    16   * terms of use are agreed, use of this file is subject to following:
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    17  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    18  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    19   * Boost Software License - Version 1.0 - August 17th, 2003
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    20  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    21   * Permission is hereby granted, free of charge, to any person or 
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    22   * organization obtaining a copy of the software and accompanying 
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    23   * documentation covered by this license (the "Software") to use, reproduce,
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    24   * display, distribute, execute, and transmit the Software, and to prepare
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    25   * derivative works of the Software, and to permit third-parties to whom the 
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    26   * Software is furnished to do so, all subject to the following:
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    27  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    28   * The copyright notices in the Software and this entire statement, including
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    29   * the above license grant, this restriction and the following disclaimer, must
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    30   * be included in all copies of the Software, in whole or in part, and all
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    31   * derivative works of the Software, unless such copies or derivative works are
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    32   * solely in the form of machine-executable object code generated by a source
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    33   * language processor.
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    34  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    35   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR 
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    36   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    37   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    38   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE 
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    39   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    40   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    41   * DEALINGS IN THE SOFTWARE.
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    42  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    43   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    44   * \defgroup IfxLld_I2c_Std_enums Enumerations
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    45   * \ingroup IfxLld_I2c_Std
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    46   * \defgroup IfxLld_I2c_Std_functions Functions
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    47   * \ingroup IfxLld_I2c_Std
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    48   * \defgroup IfxLld_I2c_Std_structures Data Structures
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    49   * \ingroup IfxLld_I2c_Std
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    50   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    51  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    52  #ifndef IFXI2C_H
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    53  #define IFXI2C_H 1
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    54  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    55  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    56  /*----------------------------------Includes----------------------------------*/
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    57  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    58  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    59  #include "_Impl/IfxI2c_cfg.h"
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    60  #include "Scu/Std/IfxScuWdt.h"
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    61  #include "Scu/Std/IfxScuCcu.h"
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    62  #include "IfxI2c_bf.h"
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    63  #include "_PinMap/IfxI2c_PinMap.h"
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    64  #include "Src/Std/IfxSrc.h"
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    65  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    66  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    67  /*--------------------------------Enumerations--------------------------------*/
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    68  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    69  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    70  /** \addtogroup IfxLld_I2c_Std_enums
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    71   * \{ */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    72  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    73  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    74      IfxI2c_BusStatus_idle        = 0, /**< \brief idle */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    75      IfxI2c_BusStatus_started     = 1, /**< \brief started */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    76      IfxI2c_BusStatus_busyMaster  = 2, /**< \brief busy Master */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    77      IfxI2c_BusStatus_remoteSlave = 3  /**< \brief remote Slave */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    78  } IfxI2c_BusStatus;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    79  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    80  /** \brief enable error interrupt request source
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    81   * Definition in Ifx.I2C.ERRIRQSM.U
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    82   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    83  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    84  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    85      IfxI2c_ErrorInterruptSource_rxFifoUnderflow = IFX_I2C_ERRIRQSM_RXF_UFL_OFF,  /**< \brief receive fifo underflow service request */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    86      IfxI2c_ErrorInterruptSource_rxFifoOverflow  = IFX_I2C_ERRIRQSM_RXF_OFL_OFF,  /**< \brief receive fifo overflow service request */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    87      IfxI2c_ErrorInterruptSource_txFifoUnderflow = IFX_I2C_ERRIRQSM_TXF_UFL_OFF,  /**< \brief transmit fifo underflow service request */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    88      IfxI2c_ErrorInterruptSource_txFifoOverflow  = IFX_I2C_ERRIRQSM_TXF_OFL_OFF   /**< \brief transmit fifo overflow service request */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    89  } IfxI2c_ErrorInterruptSource;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    90  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    91  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    92  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    93      IfxI2c_PinSelect_a = 0,
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    94      IfxI2c_PinSelect_b = 1,
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    95      IfxI2c_PinSelect_c = 2,
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    96      IfxI2c_PinSelect_d = 3,
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    97      IfxI2c_PinSelect_e = 4,
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    98      IfxI2c_PinSelect_f = 5,
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    99      IfxI2c_PinSelect_g = 6,
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   100      IfxI2c_PinSelect_h = 7
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   101  } IfxI2c_PinSelect;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   102  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   103  /** \brief enable protocol interrupt source
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   104   * Definition in Ifx.I2C.PIRQSM.U
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   105   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   106  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   107  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   108      IfxI2c_ProtocolInterruptSource_addressMatch           = IFX_I2C_PIRQSM_AM_OFF,     /**< \brief address match service request */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   109      IfxI2c_ProtocolInterruptSource_generalCall            = IFX_I2C_PIRQSM_GC_OFF,     /**< \brief general call service request */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   110      IfxI2c_ProtocolInterruptSource_masterCode             = IFX_I2C_PIRQSM_MC_OFF,     /**< \brief master code service request */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   111      IfxI2c_ProtocolInterruptSource_arbitrationLost        = IFX_I2C_PIRQSM_AL_OFF,     /**< \brief arbitration lost service request */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   112      IfxI2c_ProtocolInterruptSource_notAcknowledgeReceived = IFX_I2C_PIRQSM_NACK_OFF,   /**< \brief not acknowledge received service request */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   113      IfxI2c_ProtocolInterruptSource_transmissionEnd        = IFX_I2C_PIRQSM_TX_END_OFF, /**< \brief transmission end service request */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   114      IfxI2c_ProtocolInterruptSource_receiveMode            = IFX_I2C_PIRQSM_RX_OFF      /**< \brief receive mode service request */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   115  } IfxI2c_ProtocolInterruptSource;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   116  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   117  /** \brief Enable/disable the sensitivity of the module to sleep signal\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   118   * Definition in Ifx_I2C.CLC1.B.EDIS
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   119   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   120  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   121  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   122      IfxI2c_SleepMode_enable  = 0, /**< \brief enables sleep mode */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   123      IfxI2c_SleepMode_disable = 1  /**< \brief disables sleep mode */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   124  } IfxI2c_SleepMode;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   125  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   126  /** \} */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   127  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   128  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   129  /*-----------------------------Data Structures--------------------------------*/
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   130  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   131  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   132  /** \addtogroup IfxLld_I2c_Std_structures
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   133   * \{ */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   134  /** \brief Pin Structure
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   135   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   136  typedef struct
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   137  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   138      IfxI2c_Scl_InOut *scl;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   139      IfxI2c_Sda_InOut *sda;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   140      IfxPort_PadDriver padDriver;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   141  } IfxI2c_Pins;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   142  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   143  /** \} */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   144  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   145  /** \addtogroup IfxLld_I2c_Std_functions
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   146   * \{ */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   147  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   148  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   149  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   150  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   151  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   152  /** \brief Returns if the bus is free
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   153   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   154  IFX_INLINE boolean IfxI2c_busIsFree(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   155  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   156  /** \brief clears all DTR interrupt sources
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   157   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   158   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   159   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   160  IFX_INLINE void IfxI2c_clearAllDtrInterruptSources(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   161  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   162  /** \brief clears all Error Interrupt sources
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   163   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   164   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   165   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   166  IFX_INLINE void IfxI2c_clearAllErrorInterruptSources(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   167  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   168  /** \brief Clears all Protocol Interrupt sources
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   169   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   170   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   171   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   172  IFX_INLINE void IfxI2c_clearAllProtocolInterruptSources(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   173  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   174  /** \brief clears burst request interrupt source
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   175   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   176   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   177   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   178  IFX_INLINE void IfxI2c_clearBurstRequestInterruptSource(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   179  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   180  /** \brief clears the specified source of error interrupt
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   181   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   182   * \param source error interrupt source
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   183   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   184   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   185  IFX_INLINE void IfxI2c_clearErrorInterruptSource(Ifx_I2C *i2c, IfxI2c_ErrorInterruptSource source);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   186  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   187  /** \brief clears last burst request interrupt source
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   188   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   189   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   190   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   191  IFX_INLINE void IfxI2c_clearLastBurstRequestInterruptSource(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   192  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   193  /** \brief clears last single request interrupt source
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   194   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   195   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   196   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   197  IFX_INLINE void IfxI2c_clearLastSingleRequestInterruptSource(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   198  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   199  /** \brief clears the specified source of protocol interrupt
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   200   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   201   * \param source protocol interrupt source
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   202   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   203   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   204  IFX_INLINE void IfxI2c_clearProtocolInterruptSource(Ifx_I2C *i2c, IfxI2c_ProtocolInterruptSource source);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   205  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   206  /** \brief clears single request interrupt source
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   207   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   208   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   209   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   210  IFX_INLINE void IfxI2c_clearSingleRequestInterruptSource(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   211  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   212  /** \brief disables burst request interrupt source
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   213   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   214   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   215   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   216  IFX_INLINE void IfxI2c_disableBurstRequestInterruptSource(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   217  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   218  /** \brief disables the error interrupt flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   219   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   220   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   221   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   222  IFX_INLINE void IfxI2c_disableErrorInterruptFlag(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   223  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   224  /** \brief disables the specified source of error interrupt
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   225   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   226   * \param source error interrupt source
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   227   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   228   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   229  IFX_INLINE void IfxI2c_disableErrorInterruptSource(Ifx_I2C *i2c, IfxI2c_ErrorInterruptSource source);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   230  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   231  /** \brief disables last burst request interrupt source
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   232   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   233   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   234   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   235  IFX_INLINE void IfxI2c_disableLastBurstRequestInterruptSource(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   236  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   237  /** \brief disables last single request interrupt source
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   238   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   239   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   240   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   241  IFX_INLINE void IfxI2c_disableLastSingleRequestInterruptSource(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   242  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   243  /** \brief disables the Protocol interrupt flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   244   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   245   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   246   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   247  IFX_INLINE void IfxI2c_disableProtocolInterruptFlag(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   248  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   249  /** \brief disables the specified source of protocol interrupt
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   250   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   251   * \param source protocol interrupt source
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   252   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   253   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   254  IFX_INLINE void IfxI2c_disableProtocolInterruptSource(Ifx_I2C *i2c, IfxI2c_ProtocolInterruptSource source);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   255  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   256  /** \brief disables single request interrupt source
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   257   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   258   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   259   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   260  IFX_INLINE void IfxI2c_disableSingleRequestInterruptSource(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   261  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   262  /** \brief enables burst request interrupt source
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   263   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   264   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   265   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   266  IFX_INLINE void IfxI2c_enableBurstRequestInterruptSource(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   267  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   268  /** \brief enables the error interrupt flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   269   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   270   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   271   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   272  IFX_INLINE void IfxI2c_enableErrorInterruptFlag(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   273  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   274  /** \brief enables the specified source of error interrupt
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   275   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   276   * \param source error interrupt source
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   277   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   278   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   279  IFX_INLINE void IfxI2c_enableErrorInterruptSource(Ifx_I2C *i2c, IfxI2c_ErrorInterruptSource source);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   280  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   281  /** \brief enables last burst request interrupt source
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   282   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   283   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   284   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   285  IFX_INLINE void IfxI2c_enableLastBurstRequestInterruptSource(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   286  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   287  /** \brief enables last single request interrupt source
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   288   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   289   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   290   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   291  IFX_INLINE void IfxI2c_enableLastSingleRequestInterruptSource(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   292  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   293  /** \brief enables the protocol interrupt flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   294   * \param i2c pointer to I2C registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   295   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   296   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   297  IFX_INLINE void IfxI2c_enableProtocolInterruptFlag(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   298  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   299  /** \brief enables the specified source of protocol interrupt
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   300   * \param i2c pointer to I2C registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   301   * \param source protocol interrupt source
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   302   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   303   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   304  IFX_INLINE void IfxI2c_enableProtocolInterruptSource(Ifx_I2C *i2c, IfxI2c_ProtocolInterruptSource source);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   305  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   306  /** \brief enables single request interrupt source
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   307   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   308   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   309   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   310  IFX_INLINE void IfxI2c_enableSingleRequestInterruptSource(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   311  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   312  /** \brief Returns the SRC pointer for I2C burst data transfer request interrupt
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   313   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   314   * \return SRC pointer for I2C burst data transfer Service interrupt
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   315   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   316  IFX_INLINE volatile Ifx_SRC_SRCR *IfxI2c_getBurstDataTransferSrcPointer(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   317  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   318  /** \brief returns the status of burst request interrupt source status
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   319   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   320   * \return status
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   321   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   322  IFX_INLINE boolean IfxI2c_getBurstRequestInterruptSourceStatus(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   323  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   324  /**
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   325   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   326   * \return BusStatus
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   327   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   328  IFX_INLINE IfxI2c_BusStatus IfxI2c_getBusStatus(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   329  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   330  /** \brief returns the current status of error interrupt flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   331   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   332   * \return status
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   333   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   334  IFX_INLINE boolean IfxI2c_getErrorInterruptFlagStatus(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   335  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   336  /** \brief returns the status of the error interrupt source
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   337   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   338   * \param source error interrupt source
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   339   * \return status
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   340   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   341  IFX_INLINE boolean IfxI2c_getErrorInterruptSourceStatus(Ifx_I2C *i2c, IfxI2c_ErrorInterruptSource source);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   342  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   343  /** \brief Returns the SRC pointer for I2C Error interrupt
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   344   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   345   * \return SRC pointer for I2C Error Service interrupt
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   346   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   347  IFX_INLINE volatile Ifx_SRC_SRCR *IfxI2c_getErrorSrcPointer(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   348  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   349  /** \brief Returns the SRC pointer for I2C last burst data transfer request interrupt
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   350   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   351   * \return SRC pointer for I2C last burst data transfer Service interrupt
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   352   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   353  IFX_INLINE volatile Ifx_SRC_SRCR *IfxI2c_getLastBurstDataTransferSrcPointer(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   354  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   355  /** \brief returns the status of last burst request interrupt source status
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   356   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   357   * \return status
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   358   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   359  IFX_INLINE boolean IfxI2c_getLastBurstRequestInterruptSourceStatus(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   360  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   361  /** \brief Returns the SRC pointer for I2C last single data transfer request interrupt
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   362   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   363   * \return SRC pointer for I2C last single data transfer Service interrupt
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   364   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   365  IFX_INLINE volatile Ifx_SRC_SRCR *IfxI2c_getLastSingleDataTransferSrcPointer(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   366  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   367  /** \brief returns the status of last single request interrupt source status
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   368   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   369   * \return status
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   370   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   371  IFX_INLINE boolean IfxI2c_getLastSingleRequestInterruptSourceStatus(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   372  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   373  /** \brief returns the current raw status of protocol interrupt
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   374   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   375   * \return status
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   376   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   377  IFX_INLINE boolean IfxI2c_getProtocolInterruptFlagStatus(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   378  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   379  /** \brief returns the status of  specified protocol interrupt source
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   380   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   381   * \param source protocol interrupt source
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   382   * \return status
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   383   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   384  IFX_INLINE boolean IfxI2c_getProtocolInterruptSourceStatus(Ifx_I2C *i2c, IfxI2c_ProtocolInterruptSource source);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   385  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   386  /** \brief Returns the SRC pointer for I2C Protocol interrupt
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   387   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   388   * \return SRC pointer for I2C Protocol Service interrupt
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   389   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   390  IFX_INLINE volatile Ifx_SRC_SRCR *IfxI2c_getProtocolSrcPointer(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   391  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   392  /** \brief Returns the SRC pointer for I2C single data transfer request interrupt
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   393   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   394   * \return SRC pointer for I2C single data transfer Service interrupt
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   395   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   396  IFX_INLINE volatile Ifx_SRC_SRCR *IfxI2c_getSingleDataTransferSrcPointer(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   397  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   398  /** \brief returns the status of single request interrupt source status
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   399   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   400   * \return status
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   401   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   402  IFX_INLINE boolean IfxI2c_getSingleRequestInterruptSourceStatus(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   403  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   404  /** \brief Returns if the Fifo is requesting new data
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   405   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   406  IFX_INLINE boolean IfxI2c_isFifoRequest(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   407  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   408  /**
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   409   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   410   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   411   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   412  IFX_INLINE void IfxI2c_run(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   413  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   414  /** \brief selects the pin
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   415   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   416   * \param pisel pin to be select
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   417   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   418   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   419  IFX_INLINE void IfxI2c_setPinSelection(Ifx_I2C *i2c, IfxI2c_PinSelect pisel);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   420  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   421  /** \brief Sets the number of bytes to be received
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   422   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   423   * \param size number of packets
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   424   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   425   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   426  IFX_INLINE void IfxI2c_setReceivePacketSize(Ifx_I2C *i2c, Ifx_SizeT size);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   427  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   428  /**
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   429   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   430   * \param address device address
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   431   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   432   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   433  IFX_INLINE void IfxI2c_setSlaveDeviceAddress(Ifx_I2C *i2c, uint16 address);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   434  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   435  /** \brief Sets the sensitivity of the module to sleep signal
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   436   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   437   * \param mode mode selection (enable / disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   438   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   439   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   440  IFX_INLINE void IfxI2c_setSleepMode(Ifx_I2C *i2c, IfxI2c_SleepMode mode);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   441  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   442  /** \brief Sets the number of bytes to be tansmitted
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   443   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   444   * \param size number of packets
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   445   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   446   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   447  IFX_INLINE void IfxI2c_setTransmitPacketSize(Ifx_I2C *i2c, Ifx_SizeT size);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   448  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   449  /**
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   450   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   451   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   452   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   453  IFX_INLINE void IfxI2c_stop(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   454  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   455  /**
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   456   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   457   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   458   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   459  IFX_INLINE void IfxI2c_waitBusFree(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   460  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   461  /** \brief Writes a packet (4 bytes) into the Fifo
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   462   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   463   * \param packet specifies the byte to be transfer
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   464   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   465   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   466  IFX_INLINE void IfxI2c_writeFifo(Ifx_I2C *i2c, uint32 packet);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   467  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   468  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   469  /*-------------------------Global Function Prototypes-------------------------*/
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   470  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   471  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   472  /** \brief Configures the Module as Master
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   473   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   474   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   475   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   476  IFX_EXTERN void IfxI2c_configureAsMaster(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   477  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   478  /** \brief Disables the I2c Module
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   479   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   480   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   481   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   482  IFX_EXTERN void IfxI2c_disableModule(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   483  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   484  /** \brief Enables the Burst data transfer interrupt
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   485   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   486   * \param typeOfService Type of Service (Cpu or DMA)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   487   * \param priority priority of the interrupt
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   488   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   489   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   490  IFX_EXTERN void IfxI2c_enableBurstDataTransferInterrupt(Ifx_I2C *i2c, IfxSrc_Tos typeOfService, uint16 priority);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   491  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   492  /** \brief Enables the Error interrupt
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   493   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   494   * \param typeOfService Type of Service (Cpu or DMA)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   495   * \param priority priority of the interrupt
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   496   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   497   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   498  IFX_EXTERN void IfxI2c_enableErrorInterrupt(Ifx_I2C *i2c, IfxSrc_Tos typeOfService, uint16 priority);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   499  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   500  /** \brief enables the last burst data transfer interrupt
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   501   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   502   * \param typeOfService Type of Service (Cpu or DMA)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   503   * \param priority priority of the interrupt
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   504   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   505   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   506  IFX_EXTERN void IfxI2c_enableLastBurstDataTransferInterrupt(Ifx_I2C *i2c, IfxSrc_Tos typeOfService, uint16 priority);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   507  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   508  /** \brief enables the last single data transfer interrupt
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   509   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   510   * \param typeOfService Type of Service (Cpu or DMA)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   511   * \param priority priority of the interrupt
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   512   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   513   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   514  IFX_EXTERN void IfxI2c_enableLastSingleDataTransferInterrupt(Ifx_I2C *i2c, IfxSrc_Tos typeOfService, uint16 priority);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   515  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   516  /** \brief Enables the I2c Module
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   517   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   518   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   519   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   520  IFX_EXTERN void IfxI2c_enableModule(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   521  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   522  /** \brief Enables the protocol interrupt
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   523   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   524   * \param typeOfService Type of Service (Cpu or DMA)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   525   * \param priority Priority of the interrupt
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   526   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   527   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   528  IFX_EXTERN void IfxI2c_enableProtocolInterrupt(void *i2c, IfxSrc_Tos typeOfService, uint16 priority);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   529  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   530  /** \brief enables the single data transfer interrupt
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   531   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   532   * \param typeOfService Type of Service (Cpu or DMA)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   533   * \param priority priority of the interrupt
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   534   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   535   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   536  IFX_EXTERN void IfxI2c_enableSingleDataTransferInterrupt(Ifx_I2C *i2c, IfxSrc_Tos typeOfService, uint16 priority);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   537  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   538  /**
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   539   * \param i2c Resource index of the I2c
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   540   * \return I2C module register address
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   541   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   542  IFX_EXTERN Ifx_I2C *IfxI2c_getAddress(IfxI2c_Index i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   543  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   544  /** \brief Returns the real Baudrate
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   545   * \return Baudrate
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   546   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   547  IFX_EXTERN float32 IfxI2c_getBaudrate(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   548  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   549  /** \brief API to get the resource index of the I2C specified.
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   550   * \param i2c Pointer to the I2C HW module (register memory map)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   551   * \return Resource index of the I2C
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   552   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   553  IFX_EXTERN IfxI2c_Index IfxI2c_getIndex(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   554  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   555  /**
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   556   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   557   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   558  IFX_EXTERN void IfxI2c_initSclSdaPin(const IfxI2c_Scl_InOut *scl, const IfxI2c_Sda_InOut *sda, IfxPort_PadDriver padDriver);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   559  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   560  /** \brief Releases the bus, i.e puts a stop condition on the bus
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   561   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   562   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   563  IFX_EXTERN void IfxI2c_releaseBus(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   564  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   565  /**
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   566   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   567   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   568  IFX_EXTERN void IfxI2c_resetFifo(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   569  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   570  /** \brief resets the I2c kernel
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   571   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   572   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   573   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   574  IFX_EXTERN void IfxI2c_resetModule(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   575  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   576  /** \brief Calculates the desired baudrate
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   577   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   578   * \param baudrate specifies the baud rate
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   579   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   580   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   581  IFX_EXTERN void IfxI2c_setBaudrate(Ifx_I2C *i2c, float32 baudrate);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   582  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   583  /** \} */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   584  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   585  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   586  /*---------------------Inline Function Implementations------------------------*/
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   587  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   588  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   589  IFX_INLINE boolean IfxI2c_busIsFree(Ifx_I2C *i2c)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   590  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   591      boolean free = FALSE;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   592  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   593      if (i2c->BUSSTAT.B.BS == IfxI2c_BusStatus_idle)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   594      {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   595          free = TRUE;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   596      }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   597  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   598      return free;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   599  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   600  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   601  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   602  IFX_INLINE void IfxI2c_clearAllDtrInterruptSources(Ifx_I2C *i2c)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   603  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   604      i2c->ICR.U = (1 << IFX_I2C_ICR_LSREQ_INT_OFF) | (1 << IFX_I2C_ICR_SREQ_INT_OFF) | (1 << IFX_I2C_ICR_LBREQ_INT_OFF) | (1 << IFX_I2C_ICR_BREQ_INT_OFF);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   605  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   606  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   607  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   608  IFX_INLINE void IfxI2c_clearAllErrorInterruptSources(Ifx_I2C *i2c)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   609  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   610      i2c->ERRIRQSC.U = (1 << IFX_I2C_ERRIRQSC_RXF_UFL_OFF) | (1 << IFX_I2C_ERRIRQSC_RXF_OFL_OFF) | (1 << IFX_I2C_ERRIRQSC_TXF_UFL_OFF) | (1 << IFX_I2C_ERRIRQSC_TXF_OFL_OFF);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   611  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   612  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   613  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   614  IFX_INLINE void IfxI2c_clearAllProtocolInterruptSources(Ifx_I2C *i2c)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   615  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   616      i2c->PIRQSC.U = (1 << IFX_I2C_PIRQSC_AM_OFF) | (1 << IFX_I2C_PIRQSC_GC_OFF) | (1 << IFX_I2C_PIRQSC_MC_OFF) | (1 << IFX_I2C_PIRQSC_AL_OFF) | (1 << IFX_I2C_PIRQSC_NACK_OFF) | (1 << IFX_I2C_PIRQSC_TX_END_OFF) | (1 << IFX_I2C_PIRQSC_RX_OFF);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   617  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   618  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   619  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   620  IFX_INLINE void IfxI2c_clearBurstRequestInterruptSource(Ifx_I2C *i2c)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   621  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   622      i2c->ICR.B.BREQ_INT = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   623  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   624  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   625  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   626  IFX_INLINE void IfxI2c_clearErrorInterruptSource(Ifx_I2C *i2c, IfxI2c_ErrorInterruptSource source)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   627  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   628      i2c->ERRIRQSC.U = (1 << source);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   629  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   630  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   631  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   632  IFX_INLINE void IfxI2c_clearLastBurstRequestInterruptSource(Ifx_I2C *i2c)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   633  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   634      i2c->ICR.B.LBREQ_INT = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   635  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   636  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   637  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   638  IFX_INLINE void IfxI2c_clearLastSingleRequestInterruptSource(Ifx_I2C *i2c)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   639  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   640      i2c->ICR.B.LSREQ_INT = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   641  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   642  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   643  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   644  IFX_INLINE void IfxI2c_clearProtocolInterruptSource(Ifx_I2C *i2c, IfxI2c_ProtocolInterruptSource source)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   645  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   646      i2c->PIRQSC.U = (1 << source);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   647  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   648  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   649  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   650  IFX_INLINE void IfxI2c_clearSingleRequestInterruptSource(Ifx_I2C *i2c)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   651  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   652      i2c->ICR.B.SREQ_INT = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   653  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   654  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   655  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   656  IFX_INLINE void IfxI2c_disableBurstRequestInterruptSource(Ifx_I2C *i2c)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   657  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   658      i2c->IMSC.B.BREQ_INT = 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   659  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   660  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   661  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   662  IFX_INLINE void IfxI2c_disableErrorInterruptFlag(Ifx_I2C *i2c)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   663  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   664      i2c->IMSC.B.I2C_ERR_INT = 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   665  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   666  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   667  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   668  IFX_INLINE void IfxI2c_disableErrorInterruptSource(Ifx_I2C *i2c, IfxI2c_ErrorInterruptSource source)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   669  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   670      i2c->ERRIRQSM.U &= ~(1 << source);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   671  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   672  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   673  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   674  IFX_INLINE void IfxI2c_disableLastBurstRequestInterruptSource(Ifx_I2C *i2c)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   675  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   676      i2c->IMSC.B.LBREQ_INT = 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   677  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   678  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   679  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   680  IFX_INLINE void IfxI2c_disableLastSingleRequestInterruptSource(Ifx_I2C *i2c)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   681  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   682      i2c->IMSC.B.LSREQ_INT = 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   683  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   684  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   685  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   686  IFX_INLINE void IfxI2c_disableProtocolInterruptFlag(Ifx_I2C *i2c)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   687  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   688      i2c->IMSC.B.I2C_P_INT = 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   689  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   690  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   691  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   692  IFX_INLINE void IfxI2c_disableProtocolInterruptSource(Ifx_I2C *i2c, IfxI2c_ProtocolInterruptSource source)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   693  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   694      i2c->PIRQSM.U &= ~(1 << source);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   695  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   696  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   697  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   698  IFX_INLINE void IfxI2c_disableSingleRequestInterruptSource(Ifx_I2C *i2c)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   699  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   700      i2c->IMSC.B.SREQ_INT = 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   701  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   702  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   703  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   704  IFX_INLINE void IfxI2c_enableBurstRequestInterruptSource(Ifx_I2C *i2c)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   705  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   706      i2c->IMSC.B.BREQ_INT = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   707  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   708  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   709  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   710  IFX_INLINE void IfxI2c_enableErrorInterruptFlag(Ifx_I2C *i2c)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   711  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   712      i2c->IMSC.B.I2C_ERR_INT = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   713  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   714  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   715  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   716  IFX_INLINE void IfxI2c_enableErrorInterruptSource(Ifx_I2C *i2c, IfxI2c_ErrorInterruptSource source)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   717  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   718      i2c->ERRIRQSM.U |= (1 << source);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   719  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   720  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   721  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   722  IFX_INLINE void IfxI2c_enableLastBurstRequestInterruptSource(Ifx_I2C *i2c)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   723  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   724      i2c->IMSC.B.LBREQ_INT = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   725  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   726  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   727  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   728  IFX_INLINE void IfxI2c_enableLastSingleRequestInterruptSource(Ifx_I2C *i2c)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   729  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   730      i2c->IMSC.B.LSREQ_INT = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   731  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   732  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   733  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   734  IFX_INLINE void IfxI2c_enableProtocolInterruptFlag(Ifx_I2C *i2c)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   735  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   736      i2c->IMSC.B.I2C_P_INT = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   737  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   738  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   739  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   740  IFX_INLINE void IfxI2c_enableProtocolInterruptSource(Ifx_I2C *i2c, IfxI2c_ProtocolInterruptSource source)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   741  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   742      i2c->PIRQSM.U |= (1 << source);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   743  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   744  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   745  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   746  IFX_INLINE void IfxI2c_enableSingleRequestInterruptSource(Ifx_I2C *i2c)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   747  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   748      i2c->IMSC.B.SREQ_INT = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   749  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   750  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   751  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   752  IFX_INLINE volatile Ifx_SRC_SRCR *IfxI2c_getBurstDataTransferSrcPointer(Ifx_I2C *i2c)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   753  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   754      if (i2c == &MODULE_I2C0)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   755      {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   756          return &MODULE_SRC.I2C.I2C[0].BREQ;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   757      }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   758      else
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   759      {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   760          return &MODULE_SRC.I2C.I2C[1].BREQ;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   761      }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   762  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   763  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   764  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   765  IFX_INLINE boolean IfxI2c_getBurstRequestInterruptSourceStatus(Ifx_I2C *i2c)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   766  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   767      return i2c->RIS.B.BREQ_INT;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   768  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   769  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   770  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   771  IFX_INLINE IfxI2c_BusStatus IfxI2c_getBusStatus(Ifx_I2C *i2c)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   772  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   773      return (IfxI2c_BusStatus)i2c->BUSSTAT.B.BS;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   774  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   775  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   776  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   777  IFX_INLINE boolean IfxI2c_getErrorInterruptFlagStatus(Ifx_I2C *i2c)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   778  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   779      return i2c->RIS.B.I2C_ERR_INT;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   780  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   781  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   782  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   783  IFX_INLINE boolean IfxI2c_getErrorInterruptSourceStatus(Ifx_I2C *i2c, IfxI2c_ErrorInterruptSource source)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   784  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   785      return (i2c->ERRIRQSS.U & (1 << source)) ? TRUE : FALSE;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   786  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   787  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   788  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   789  IFX_INLINE volatile Ifx_SRC_SRCR *IfxI2c_getErrorSrcPointer(Ifx_I2C *i2c)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   790  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   791      if (i2c == &MODULE_I2C0)
	movh.a	a15,#61452
.L451:

; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   791      if (i2c == &MODULE_I2C0)      (inlined)
	jne.a	a4,a15,.L5
.L452:

; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   792      {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   793          return &MODULE_SRC.I2C.I2C[0].ERR;
	movh.a	a15,#61444
	lea	a15,[a15]@los(0xf0038310)
.L453:

; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   793          return &MODULE_SRC.I2C.I2C[0].ERR;      (inlined)
	j	.L6

; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   791      if (i2c == &MODULE_I2C0)      (inlined)
.L5:

; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   794      }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   795      else
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   796      {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   797          return &MODULE_SRC.I2C.I2C[1].ERR;
	movh.a	a15,#61444
	lea	a15,[a15]@los(0xf0038360)

; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   799  }      (inlined)
.L6:

; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	     1  /**
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	     2   * \file IfxSrc.h
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	     3   * \brief SRC  basic functionality
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	     4   * \ingroup IfxLld_Src
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	     5   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	     6   * \version iLLD_1_0_1_11_0
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	     7   * \copyright Copyright (c) 2019 Infineon Technologies AG. All rights reserved.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	     8   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	     9   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    10   *                                 IMPORTANT NOTICE
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    11   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    12   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    13   * Use of this file is subject to the terms of use agreed between (i) you or 
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    14   * the company in which ordinary course of business you are acting and (ii) 
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    15   * Infineon Technologies AG or its licensees. If and as long as no such 
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    16   * terms of use are agreed, use of this file is subject to following:
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    17  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    18  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    19   * Boost Software License - Version 1.0 - August 17th, 2003
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    20  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    21   * Permission is hereby granted, free of charge, to any person or 
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    22   * organization obtaining a copy of the software and accompanying 
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    23   * documentation covered by this license (the "Software") to use, reproduce,
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    24   * display, distribute, execute, and transmit the Software, and to prepare
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    25   * derivative works of the Software, and to permit third-parties to whom the 
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    26   * Software is furnished to do so, all subject to the following:
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    27  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    28   * The copyright notices in the Software and this entire statement, including
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    29   * the above license grant, this restriction and the following disclaimer, must
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    30   * be included in all copies of the Software, in whole or in part, and all
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    31   * derivative works of the Software, unless such copies or derivative works are
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    32   * solely in the form of machine-executable object code generated by a source
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    33   * language processor.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    34  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    35   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR 
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    36   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    37   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    38   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE 
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    39   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    40   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    41   * DEALINGS IN THE SOFTWARE.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    42  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    43   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    44   * \defgroup IfxLld_Src SRC
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    45   * \addtogroup IfxLld_Src
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    46   * \{
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    47   * \defgroup IfxLld_Src_Usage How to use Service Request Mechanism?
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    48   * \addtogroup IfxLld_Src_Usage
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    49   * \{
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    50   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    51   * For Aurix controller peripherals that can generate service requests is connected to one
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    52   * or more Service Request Nodes (SRNs) in the central Interrupt Router(IR) module. Refer to Controller User Manual for more details\n
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    53   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    54   * IfxSrc driver provides the APIs to configure and control service requests. Refer \ref IfxLld_Src_Usage for
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    55   * details of these APIs.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    56   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    57   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    58   * \section Ifx_Src_UsageInit Initialize the Service Request Node
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    59   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    60   * Service request node is initialized to configure the following,\n
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    61   * 1) Route the interrupt trigger to service provider, which are:\n
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    62   *  __a. One of the available CPUs or\n
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    63   *  __b. DMA controller\n
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    64   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    65   * 2) Priority of CPU Interrupt or DMA Trigger.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    66   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    67   * For Interrupt or DMA to be correctly triggered, following steps are to be done in the user code:
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    68   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    69   * \subsection Ifx_Src_UsageInitStep1 Step1: Configure the Node
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    70   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    71   * User must configure the service request node in the application / driver files.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    72   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    73   * \subsection Ifx_Src_UsageInitStep2 Step2: Enable the Trigger
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    74   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    75   * Enable the service request node to connect the trigger event from the hardware to service provider.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    76   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    77   * Example:
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    78   * Following example show the configuration for STM0 Service request 0 trigger configured to trigger
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    79   * CPU1 with the priority specified by IFX_INTPRIO_STM0 (from the example at IfxCpu_Irq)
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    80   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    81   * \code
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    82   * //file: myApplication.c
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    83   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    84   * #include "Ifx_IntPrioDef.h" // to get the priority numbers
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    85   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    86   * void myDriverInitFunction(void)
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    87   * {
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    88   *    // driver init code
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    89   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    90   *    // Step1: Call the function to route the trigger from for SRC_STM0_SR0 to CPU1
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    91   *    // and priority specified at Ifx_IntPrioDef.h globally
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    92   *  IfxSrc_init(&MODULE_SRC.STM.STM[0].SR0, IfxSrc_Tos_cpu1, IFX_INTPRIO_STM0);
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    93   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    94   *    // Step2: Enable the service request node
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    95   *  IfxSrc_init(&MODULE_SRC.STM.STM[0].SR0);
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    96   * }
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    97   * \endcode
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    98   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    99   * \}
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   100   * \}
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   101   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   102   * \defgroup IfxLld_Src_Std_Service_Request Service Request Functions
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   103   * \ingroup IfxLld_Src_Std
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   104   * \defgroup IfxLld_Src_Std_Module Module Functions
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   105   * \ingroup IfxLld_Src_Std
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   106   */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   107  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   108  #ifndef IFXSRC_H
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   109  #define IFXSRC_H 1
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   110  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   111  /******************************************************************************/
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   112  /*----------------------------------Includes----------------------------------*/
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   113  /******************************************************************************/
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   114  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   115  #include "_Impl/IfxSrc_cfg.h"
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   116  #include "Cpu/Std/IfxCpu_Intrinsics.h"
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   117  #include "IfxSrc_reg.h"
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   118  /** \addtogroup IfxLld_Src_Std_Service_Request
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   119   * \{ */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   120  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   121  /******************************************************************************/
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   122  /*-------------------------Inline Function Prototypes-------------------------*/
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   123  /******************************************************************************/
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   124  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   125  /** \brief Resets the overrun flag of the Service Request.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   126   * \param src pointer to the Service Request Control register which the overrun flag should be cleared.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   127   * \return None
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   128   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   129   * Usage example: see \ref IfxSrc_init
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   130   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   131   */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   132  IFX_INLINE void IfxSrc_clearOverrun(volatile Ifx_SRC_SRCR *src);
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   133  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   134  /** \brief Resets a specific interrupt service by software.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   135   * \param src pointer to the Service Request Control register which the request should be cleared.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   136   * \return None
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   137   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   138   * Usage example: see \ref IfxSrc_init
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   139   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   140   */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   141  IFX_INLINE void IfxSrc_clearRequest(volatile Ifx_SRC_SRCR *src);
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   142  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   143  /** \brief Gets the current overrun status.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   144   * \param src pointer to the Service Request Control register for which the overrun status should be returned.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   145   * \return current service request control overrun status.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   146   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   147   * Usage example: see \ref IfxSrc_init
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   148   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   149   */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   150  IFX_INLINE boolean IfxSrc_isOverrun(volatile Ifx_SRC_SRCR *src);
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   151  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   152  /** \brief Gets the current request status.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   153   * \param src pointer to the Service Request Control register for which the request status should be returned.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   154   * \return current service request control request status.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   155   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   156   * Usage example: see \ref IfxSrc_init
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   157   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   158   */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   159  IFX_INLINE boolean IfxSrc_isRequested(volatile Ifx_SRC_SRCR *src);
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   160  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   161  /** \brief Requests a specific interrupt service by software
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   162   * \param src pointer to the Service Request Control register which the interrupt has to be requested.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   163   * \return None
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   164   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   165   * Usage example: see \ref IfxSrc_init
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   166   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   167   */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   168  IFX_INLINE void IfxSrc_setRequest(volatile Ifx_SRC_SRCR *src);
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   169  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   170  /** \} */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   171  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   172  /** \addtogroup IfxLld_Src_Std_Module
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   173   * \{ */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   174  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   175  /******************************************************************************/
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   176  /*-------------------------Inline Function Prototypes-------------------------*/
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   177  /******************************************************************************/
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   178  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   179  /** \brief DeInitializes the service request control register.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   180   * \param src pointer to the Service Request Control register which should be deinitialised.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   181   * \return None
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   182   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   183   * Usage example: see \ref IfxSrc_init
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   184   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   185   */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   186  IFX_INLINE void IfxSrc_deinit(volatile Ifx_SRC_SRCR *src);
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   187  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   188  /** \brief Disables a specific interrupt service request.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   189   * \param src pointer to the Service Request Control register for which the interrupt has to be disabled.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   190   * \return None
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   191   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   192   * Usage example: see \ref IfxSrc_init
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   193   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   194   */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   195  IFX_INLINE void IfxSrc_disable(volatile Ifx_SRC_SRCR *src);
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   196  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   197  /** \brief Enables a specific interrupt service request.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   198   * \param src pointer to the Service Request Control register for which the interrupt has to be enabled.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   199   * \return None
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   200   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   201   * Usage example: see \ref IfxSrc_init
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   202   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   203   */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   204  IFX_INLINE void IfxSrc_enable(volatile Ifx_SRC_SRCR *src);
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   205  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   206  /** \brief Initializes the service request control register.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   207   * \param src pointer to the Service Request Control register which should be initialised.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   208   * \param typOfService type of interrupt service provider.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   209   * \param priority Interrupt priority.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   210   * \return None
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   211   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   212   * Get the peripheral service control register which request need to be serviced and assign this service to any of service providers.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   213   * \code
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   214   * //define the interrupt priority
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   215   * #define IFXASCLIN0_TX_INTPRIO 2
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   216   * //get the service request
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   217   * volatile Ifx_SRC_SRCR *src = IfxAsclin_getSrcPointerRx( &MODULE_ASCLIN0 );
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   218   * //initlaise the service request
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   219   * IfxSrc_init( src, IfxSrc_Tos_cpu0, IFXASCLIN0_TX_INTPRIO );
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   220   * // enable the service
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   221   * IfxSrc_enable( src );
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   222   * //check for service request flags and clear if they occur
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   223   * if ( IfxSrc_isRequested( src ) == TRUE )
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   224   * {
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   225   *    IfxSrc_clearRequest( src );
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   226   * }
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   227   * if ( IfxSrc_isOverrun( src ) == TRUE )
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   228   * {
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   229   *      IfxSrc_clearOverrun( src );
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   230   * }
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   231   * // Atlast deinitialise the service control
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   232   * IfxSrc_deinit( src );
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   233   * \endcode
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   234   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   235   */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   236  IFX_INLINE void IfxSrc_init(volatile Ifx_SRC_SRCR *src, IfxSrc_Tos typOfService, Ifx_Priority priority);
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   237  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   238  /** \} */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   239  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   240  /******************************************************************************/
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   241  /*---------------------Inline Function Implementations------------------------*/
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   242  /******************************************************************************/
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   243  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   244  IFX_INLINE void IfxSrc_clearOverrun(volatile Ifx_SRC_SRCR *src)
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   245  {
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   246      src->B.IOVCLR = 1;
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   247  }
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   248  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   249  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   250  IFX_INLINE void IfxSrc_clearRequest(volatile Ifx_SRC_SRCR *src)
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   251  {
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   252      src->B.CLRR = 1;
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   253  }
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   254  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   255  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   256  IFX_INLINE void IfxSrc_deinit(volatile Ifx_SRC_SRCR *src)
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   257  {
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   258      src->U = 0;
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   259  }
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   260  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   261  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   262  IFX_INLINE void IfxSrc_disable(volatile Ifx_SRC_SRCR *src)
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   263  {
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   264      src->B.SRE = 0;
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   265  }
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   266  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   267  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   268  IFX_INLINE void IfxSrc_enable(volatile Ifx_SRC_SRCR *src)
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   269  {
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   270      src->B.SRE = 1;
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   271  }
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   272  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   273  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   274  IFX_INLINE void IfxSrc_init(volatile Ifx_SRC_SRCR *src, IfxSrc_Tos typOfService, Ifx_Priority priority)
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   275  {
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   276      src->B.SRPN = priority;
	fcall	.cocofun_1
.L230:

; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.c	   100   src = IfxI2c_getLastBurstDataTransferSrcPointer(i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.c	   101      IfxSrc_init(src, typeOfService, priority);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.c	   102      IfxSrc_enable(src);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.c	   103  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.c	   104  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.c	   105  
	ret
.L222:
	
__IfxI2c_enableErrorInterrupt_function_end:
	.size	IfxI2c_enableErrorInterrupt,__IfxI2c_enableErrorInterrupt_function_end-IfxI2c_enableErrorInterrupt
.L98:
	; End of function
	
	.sdecl	'.text.IfxI2c.IfxI2c_enableLastBurstDataTransferInterrupt',code,cluster('IfxI2c_enableLastBurstDataTransferInterrupt')
	.sect	'.text.IfxI2c.IfxI2c_enableLastBurstDataTransferInterrupt'
	.align	2
	
	.global	IfxI2c_enableLastBurstDataTransferInterrupt

; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.c	   106  void IfxI2c_enableLastSingleDataTransferInterrupt(Ifx_I2C *i2c, IfxSrc_Tos typeOfService, uint16 priority)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.c	   107  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.c	   108      volatile Ifx_SRC_SRCR *src;
; Function IfxI2c_enableLastBurstDataTransferInterrupt
.L50:
IfxI2c_enableLastBurstDataTransferInterrupt:	.type	func

; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	     1  /**
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	     2   * \file IfxI2c.h
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	     3   * \brief I2C  basic functionality
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	     4   * \ingroup IfxLld_I2c
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	     5   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	     6   * \version iLLD_1_0_1_11_0
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	     7   * \copyright Copyright (c) 2018 Infineon Technologies AG. All rights reserved.
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	     8   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	     9   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    10   *                                 IMPORTANT NOTICE
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    11   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    12   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    13   * Use of this file is subject to the terms of use agreed between (i) you or 
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    14   * the company in which ordinary course of business you are acting and (ii) 
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    15   * Infineon Technologies AG or its licensees. If and as long as no such 
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    16   * terms of use are agreed, use of this file is subject to following:
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    17  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    18  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    19   * Boost Software License - Version 1.0 - August 17th, 2003
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    20  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    21   * Permission is hereby granted, free of charge, to any person or 
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    22   * organization obtaining a copy of the software and accompanying 
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    23   * documentation covered by this license (the "Software") to use, reproduce,
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    24   * display, distribute, execute, and transmit the Software, and to prepare
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    25   * derivative works of the Software, and to permit third-parties to whom the 
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    26   * Software is furnished to do so, all subject to the following:
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    27  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    28   * The copyright notices in the Software and this entire statement, including
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    29   * the above license grant, this restriction and the following disclaimer, must
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    30   * be included in all copies of the Software, in whole or in part, and all
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    31   * derivative works of the Software, unless such copies or derivative works are
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    32   * solely in the form of machine-executable object code generated by a source
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    33   * language processor.
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    34  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    35   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR 
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    36   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    37   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    38   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE 
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    39   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    40   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    41   * DEALINGS IN THE SOFTWARE.
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    42  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    43   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    44   * \defgroup IfxLld_I2c_Std_enums Enumerations
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    45   * \ingroup IfxLld_I2c_Std
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    46   * \defgroup IfxLld_I2c_Std_functions Functions
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    47   * \ingroup IfxLld_I2c_Std
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    48   * \defgroup IfxLld_I2c_Std_structures Data Structures
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    49   * \ingroup IfxLld_I2c_Std
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    50   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    51  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    52  #ifndef IFXI2C_H
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    53  #define IFXI2C_H 1
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    54  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    55  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    56  /*----------------------------------Includes----------------------------------*/
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    57  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    58  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    59  #include "_Impl/IfxI2c_cfg.h"
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    60  #include "Scu/Std/IfxScuWdt.h"
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    61  #include "Scu/Std/IfxScuCcu.h"
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    62  #include "IfxI2c_bf.h"
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    63  #include "_PinMap/IfxI2c_PinMap.h"
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    64  #include "Src/Std/IfxSrc.h"
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    65  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    66  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    67  /*--------------------------------Enumerations--------------------------------*/
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    68  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    69  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    70  /** \addtogroup IfxLld_I2c_Std_enums
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    71   * \{ */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    72  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    73  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    74      IfxI2c_BusStatus_idle        = 0, /**< \brief idle */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    75      IfxI2c_BusStatus_started     = 1, /**< \brief started */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    76      IfxI2c_BusStatus_busyMaster  = 2, /**< \brief busy Master */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    77      IfxI2c_BusStatus_remoteSlave = 3  /**< \brief remote Slave */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    78  } IfxI2c_BusStatus;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    79  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    80  /** \brief enable error interrupt request source
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    81   * Definition in Ifx.I2C.ERRIRQSM.U
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    82   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    83  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    84  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    85      IfxI2c_ErrorInterruptSource_rxFifoUnderflow = IFX_I2C_ERRIRQSM_RXF_UFL_OFF,  /**< \brief receive fifo underflow service request */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    86      IfxI2c_ErrorInterruptSource_rxFifoOverflow  = IFX_I2C_ERRIRQSM_RXF_OFL_OFF,  /**< \brief receive fifo overflow service request */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    87      IfxI2c_ErrorInterruptSource_txFifoUnderflow = IFX_I2C_ERRIRQSM_TXF_UFL_OFF,  /**< \brief transmit fifo underflow service request */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    88      IfxI2c_ErrorInterruptSource_txFifoOverflow  = IFX_I2C_ERRIRQSM_TXF_OFL_OFF   /**< \brief transmit fifo overflow service request */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    89  } IfxI2c_ErrorInterruptSource;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    90  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    91  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    92  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    93      IfxI2c_PinSelect_a = 0,
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    94      IfxI2c_PinSelect_b = 1,
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    95      IfxI2c_PinSelect_c = 2,
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    96      IfxI2c_PinSelect_d = 3,
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    97      IfxI2c_PinSelect_e = 4,
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    98      IfxI2c_PinSelect_f = 5,
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    99      IfxI2c_PinSelect_g = 6,
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   100      IfxI2c_PinSelect_h = 7
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   101  } IfxI2c_PinSelect;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   102  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   103  /** \brief enable protocol interrupt source
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   104   * Definition in Ifx.I2C.PIRQSM.U
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   105   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   106  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   107  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   108      IfxI2c_ProtocolInterruptSource_addressMatch           = IFX_I2C_PIRQSM_AM_OFF,     /**< \brief address match service request */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   109      IfxI2c_ProtocolInterruptSource_generalCall            = IFX_I2C_PIRQSM_GC_OFF,     /**< \brief general call service request */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   110      IfxI2c_ProtocolInterruptSource_masterCode             = IFX_I2C_PIRQSM_MC_OFF,     /**< \brief master code service request */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   111      IfxI2c_ProtocolInterruptSource_arbitrationLost        = IFX_I2C_PIRQSM_AL_OFF,     /**< \brief arbitration lost service request */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   112      IfxI2c_ProtocolInterruptSource_notAcknowledgeReceived = IFX_I2C_PIRQSM_NACK_OFF,   /**< \brief not acknowledge received service request */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   113      IfxI2c_ProtocolInterruptSource_transmissionEnd        = IFX_I2C_PIRQSM_TX_END_OFF, /**< \brief transmission end service request */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   114      IfxI2c_ProtocolInterruptSource_receiveMode            = IFX_I2C_PIRQSM_RX_OFF      /**< \brief receive mode service request */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   115  } IfxI2c_ProtocolInterruptSource;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   116  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   117  /** \brief Enable/disable the sensitivity of the module to sleep signal\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   118   * Definition in Ifx_I2C.CLC1.B.EDIS
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   119   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   120  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   121  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   122      IfxI2c_SleepMode_enable  = 0, /**< \brief enables sleep mode */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   123      IfxI2c_SleepMode_disable = 1  /**< \brief disables sleep mode */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   124  } IfxI2c_SleepMode;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   125  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   126  /** \} */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   127  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   128  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   129  /*-----------------------------Data Structures--------------------------------*/
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   130  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   131  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   132  /** \addtogroup IfxLld_I2c_Std_structures
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   133   * \{ */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   134  /** \brief Pin Structure
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   135   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   136  typedef struct
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   137  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   138      IfxI2c_Scl_InOut *scl;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   139      IfxI2c_Sda_InOut *sda;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   140      IfxPort_PadDriver padDriver;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   141  } IfxI2c_Pins;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   142  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   143  /** \} */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   144  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   145  /** \addtogroup IfxLld_I2c_Std_functions
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   146   * \{ */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   147  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   148  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   149  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   150  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   151  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   152  /** \brief Returns if the bus is free
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   153   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   154  IFX_INLINE boolean IfxI2c_busIsFree(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   155  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   156  /** \brief clears all DTR interrupt sources
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   157   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   158   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   159   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   160  IFX_INLINE void IfxI2c_clearAllDtrInterruptSources(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   161  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   162  /** \brief clears all Error Interrupt sources
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   163   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   164   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   165   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   166  IFX_INLINE void IfxI2c_clearAllErrorInterruptSources(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   167  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   168  /** \brief Clears all Protocol Interrupt sources
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   169   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   170   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   171   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   172  IFX_INLINE void IfxI2c_clearAllProtocolInterruptSources(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   173  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   174  /** \brief clears burst request interrupt source
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   175   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   176   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   177   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   178  IFX_INLINE void IfxI2c_clearBurstRequestInterruptSource(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   179  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   180  /** \brief clears the specified source of error interrupt
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   181   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   182   * \param source error interrupt source
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   183   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   184   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   185  IFX_INLINE void IfxI2c_clearErrorInterruptSource(Ifx_I2C *i2c, IfxI2c_ErrorInterruptSource source);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   186  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   187  /** \brief clears last burst request interrupt source
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   188   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   189   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   190   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   191  IFX_INLINE void IfxI2c_clearLastBurstRequestInterruptSource(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   192  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   193  /** \brief clears last single request interrupt source
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   194   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   195   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   196   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   197  IFX_INLINE void IfxI2c_clearLastSingleRequestInterruptSource(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   198  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   199  /** \brief clears the specified source of protocol interrupt
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   200   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   201   * \param source protocol interrupt source
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   202   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   203   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   204  IFX_INLINE void IfxI2c_clearProtocolInterruptSource(Ifx_I2C *i2c, IfxI2c_ProtocolInterruptSource source);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   205  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   206  /** \brief clears single request interrupt source
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   207   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   208   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   209   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   210  IFX_INLINE void IfxI2c_clearSingleRequestInterruptSource(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   211  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   212  /** \brief disables burst request interrupt source
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   213   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   214   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   215   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   216  IFX_INLINE void IfxI2c_disableBurstRequestInterruptSource(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   217  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   218  /** \brief disables the error interrupt flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   219   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   220   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   221   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   222  IFX_INLINE void IfxI2c_disableErrorInterruptFlag(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   223  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   224  /** \brief disables the specified source of error interrupt
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   225   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   226   * \param source error interrupt source
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   227   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   228   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   229  IFX_INLINE void IfxI2c_disableErrorInterruptSource(Ifx_I2C *i2c, IfxI2c_ErrorInterruptSource source);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   230  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   231  /** \brief disables last burst request interrupt source
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   232   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   233   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   234   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   235  IFX_INLINE void IfxI2c_disableLastBurstRequestInterruptSource(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   236  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   237  /** \brief disables last single request interrupt source
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   238   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   239   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   240   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   241  IFX_INLINE void IfxI2c_disableLastSingleRequestInterruptSource(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   242  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   243  /** \brief disables the Protocol interrupt flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   244   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   245   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   246   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   247  IFX_INLINE void IfxI2c_disableProtocolInterruptFlag(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   248  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   249  /** \brief disables the specified source of protocol interrupt
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   250   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   251   * \param source protocol interrupt source
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   252   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   253   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   254  IFX_INLINE void IfxI2c_disableProtocolInterruptSource(Ifx_I2C *i2c, IfxI2c_ProtocolInterruptSource source);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   255  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   256  /** \brief disables single request interrupt source
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   257   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   258   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   259   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   260  IFX_INLINE void IfxI2c_disableSingleRequestInterruptSource(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   261  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   262  /** \brief enables burst request interrupt source
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   263   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   264   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   265   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   266  IFX_INLINE void IfxI2c_enableBurstRequestInterruptSource(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   267  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   268  /** \brief enables the error interrupt flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   269   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   270   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   271   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   272  IFX_INLINE void IfxI2c_enableErrorInterruptFlag(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   273  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   274  /** \brief enables the specified source of error interrupt
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   275   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   276   * \param source error interrupt source
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   277   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   278   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   279  IFX_INLINE void IfxI2c_enableErrorInterruptSource(Ifx_I2C *i2c, IfxI2c_ErrorInterruptSource source);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   280  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   281  /** \brief enables last burst request interrupt source
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   282   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   283   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   284   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   285  IFX_INLINE void IfxI2c_enableLastBurstRequestInterruptSource(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   286  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   287  /** \brief enables last single request interrupt source
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   288   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   289   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   290   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   291  IFX_INLINE void IfxI2c_enableLastSingleRequestInterruptSource(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   292  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   293  /** \brief enables the protocol interrupt flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   294   * \param i2c pointer to I2C registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   295   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   296   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   297  IFX_INLINE void IfxI2c_enableProtocolInterruptFlag(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   298  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   299  /** \brief enables the specified source of protocol interrupt
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   300   * \param i2c pointer to I2C registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   301   * \param source protocol interrupt source
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   302   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   303   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   304  IFX_INLINE void IfxI2c_enableProtocolInterruptSource(Ifx_I2C *i2c, IfxI2c_ProtocolInterruptSource source);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   305  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   306  /** \brief enables single request interrupt source
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   307   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   308   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   309   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   310  IFX_INLINE void IfxI2c_enableSingleRequestInterruptSource(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   311  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   312  /** \brief Returns the SRC pointer for I2C burst data transfer request interrupt
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   313   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   314   * \return SRC pointer for I2C burst data transfer Service interrupt
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   315   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   316  IFX_INLINE volatile Ifx_SRC_SRCR *IfxI2c_getBurstDataTransferSrcPointer(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   317  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   318  /** \brief returns the status of burst request interrupt source status
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   319   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   320   * \return status
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   321   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   322  IFX_INLINE boolean IfxI2c_getBurstRequestInterruptSourceStatus(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   323  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   324  /**
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   325   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   326   * \return BusStatus
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   327   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   328  IFX_INLINE IfxI2c_BusStatus IfxI2c_getBusStatus(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   329  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   330  /** \brief returns the current status of error interrupt flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   331   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   332   * \return status
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   333   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   334  IFX_INLINE boolean IfxI2c_getErrorInterruptFlagStatus(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   335  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   336  /** \brief returns the status of the error interrupt source
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   337   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   338   * \param source error interrupt source
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   339   * \return status
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   340   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   341  IFX_INLINE boolean IfxI2c_getErrorInterruptSourceStatus(Ifx_I2C *i2c, IfxI2c_ErrorInterruptSource source);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   342  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   343  /** \brief Returns the SRC pointer for I2C Error interrupt
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   344   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   345   * \return SRC pointer for I2C Error Service interrupt
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   346   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   347  IFX_INLINE volatile Ifx_SRC_SRCR *IfxI2c_getErrorSrcPointer(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   348  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   349  /** \brief Returns the SRC pointer for I2C last burst data transfer request interrupt
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   350   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   351   * \return SRC pointer for I2C last burst data transfer Service interrupt
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   352   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   353  IFX_INLINE volatile Ifx_SRC_SRCR *IfxI2c_getLastBurstDataTransferSrcPointer(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   354  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   355  /** \brief returns the status of last burst request interrupt source status
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   356   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   357   * \return status
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   358   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   359  IFX_INLINE boolean IfxI2c_getLastBurstRequestInterruptSourceStatus(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   360  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   361  /** \brief Returns the SRC pointer for I2C last single data transfer request interrupt
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   362   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   363   * \return SRC pointer for I2C last single data transfer Service interrupt
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   364   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   365  IFX_INLINE volatile Ifx_SRC_SRCR *IfxI2c_getLastSingleDataTransferSrcPointer(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   366  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   367  /** \brief returns the status of last single request interrupt source status
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   368   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   369   * \return status
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   370   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   371  IFX_INLINE boolean IfxI2c_getLastSingleRequestInterruptSourceStatus(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   372  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   373  /** \brief returns the current raw status of protocol interrupt
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   374   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   375   * \return status
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   376   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   377  IFX_INLINE boolean IfxI2c_getProtocolInterruptFlagStatus(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   378  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   379  /** \brief returns the status of  specified protocol interrupt source
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   380   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   381   * \param source protocol interrupt source
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   382   * \return status
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   383   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   384  IFX_INLINE boolean IfxI2c_getProtocolInterruptSourceStatus(Ifx_I2C *i2c, IfxI2c_ProtocolInterruptSource source);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   385  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   386  /** \brief Returns the SRC pointer for I2C Protocol interrupt
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   387   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   388   * \return SRC pointer for I2C Protocol Service interrupt
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   389   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   390  IFX_INLINE volatile Ifx_SRC_SRCR *IfxI2c_getProtocolSrcPointer(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   391  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   392  /** \brief Returns the SRC pointer for I2C single data transfer request interrupt
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   393   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   394   * \return SRC pointer for I2C single data transfer Service interrupt
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   395   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   396  IFX_INLINE volatile Ifx_SRC_SRCR *IfxI2c_getSingleDataTransferSrcPointer(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   397  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   398  /** \brief returns the status of single request interrupt source status
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   399   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   400   * \return status
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   401   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   402  IFX_INLINE boolean IfxI2c_getSingleRequestInterruptSourceStatus(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   403  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   404  /** \brief Returns if the Fifo is requesting new data
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   405   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   406  IFX_INLINE boolean IfxI2c_isFifoRequest(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   407  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   408  /**
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   409   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   410   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   411   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   412  IFX_INLINE void IfxI2c_run(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   413  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   414  /** \brief selects the pin
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   415   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   416   * \param pisel pin to be select
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   417   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   418   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   419  IFX_INLINE void IfxI2c_setPinSelection(Ifx_I2C *i2c, IfxI2c_PinSelect pisel);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   420  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   421  /** \brief Sets the number of bytes to be received
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   422   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   423   * \param size number of packets
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   424   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   425   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   426  IFX_INLINE void IfxI2c_setReceivePacketSize(Ifx_I2C *i2c, Ifx_SizeT size);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   427  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   428  /**
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   429   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   430   * \param address device address
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   431   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   432   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   433  IFX_INLINE void IfxI2c_setSlaveDeviceAddress(Ifx_I2C *i2c, uint16 address);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   434  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   435  /** \brief Sets the sensitivity of the module to sleep signal
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   436   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   437   * \param mode mode selection (enable / disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   438   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   439   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   440  IFX_INLINE void IfxI2c_setSleepMode(Ifx_I2C *i2c, IfxI2c_SleepMode mode);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   441  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   442  /** \brief Sets the number of bytes to be tansmitted
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   443   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   444   * \param size number of packets
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   445   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   446   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   447  IFX_INLINE void IfxI2c_setTransmitPacketSize(Ifx_I2C *i2c, Ifx_SizeT size);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   448  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   449  /**
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   450   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   451   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   452   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   453  IFX_INLINE void IfxI2c_stop(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   454  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   455  /**
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   456   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   457   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   458   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   459  IFX_INLINE void IfxI2c_waitBusFree(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   460  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   461  /** \brief Writes a packet (4 bytes) into the Fifo
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   462   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   463   * \param packet specifies the byte to be transfer
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   464   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   465   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   466  IFX_INLINE void IfxI2c_writeFifo(Ifx_I2C *i2c, uint32 packet);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   467  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   468  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   469  /*-------------------------Global Function Prototypes-------------------------*/
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   470  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   471  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   472  /** \brief Configures the Module as Master
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   473   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   474   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   475   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   476  IFX_EXTERN void IfxI2c_configureAsMaster(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   477  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   478  /** \brief Disables the I2c Module
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   479   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   480   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   481   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   482  IFX_EXTERN void IfxI2c_disableModule(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   483  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   484  /** \brief Enables the Burst data transfer interrupt
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   485   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   486   * \param typeOfService Type of Service (Cpu or DMA)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   487   * \param priority priority of the interrupt
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   488   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   489   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   490  IFX_EXTERN void IfxI2c_enableBurstDataTransferInterrupt(Ifx_I2C *i2c, IfxSrc_Tos typeOfService, uint16 priority);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   491  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   492  /** \brief Enables the Error interrupt
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   493   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   494   * \param typeOfService Type of Service (Cpu or DMA)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   495   * \param priority priority of the interrupt
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   496   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   497   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   498  IFX_EXTERN void IfxI2c_enableErrorInterrupt(Ifx_I2C *i2c, IfxSrc_Tos typeOfService, uint16 priority);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   499  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   500  /** \brief enables the last burst data transfer interrupt
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   501   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   502   * \param typeOfService Type of Service (Cpu or DMA)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   503   * \param priority priority of the interrupt
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   504   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   505   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   506  IFX_EXTERN void IfxI2c_enableLastBurstDataTransferInterrupt(Ifx_I2C *i2c, IfxSrc_Tos typeOfService, uint16 priority);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   507  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   508  /** \brief enables the last single data transfer interrupt
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   509   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   510   * \param typeOfService Type of Service (Cpu or DMA)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   511   * \param priority priority of the interrupt
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   512   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   513   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   514  IFX_EXTERN void IfxI2c_enableLastSingleDataTransferInterrupt(Ifx_I2C *i2c, IfxSrc_Tos typeOfService, uint16 priority);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   515  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   516  /** \brief Enables the I2c Module
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   517   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   518   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   519   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   520  IFX_EXTERN void IfxI2c_enableModule(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   521  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   522  /** \brief Enables the protocol interrupt
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   523   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   524   * \param typeOfService Type of Service (Cpu or DMA)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   525   * \param priority Priority of the interrupt
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   526   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   527   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   528  IFX_EXTERN void IfxI2c_enableProtocolInterrupt(void *i2c, IfxSrc_Tos typeOfService, uint16 priority);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   529  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   530  /** \brief enables the single data transfer interrupt
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   531   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   532   * \param typeOfService Type of Service (Cpu or DMA)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   533   * \param priority priority of the interrupt
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   534   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   535   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   536  IFX_EXTERN void IfxI2c_enableSingleDataTransferInterrupt(Ifx_I2C *i2c, IfxSrc_Tos typeOfService, uint16 priority);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   537  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   538  /**
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   539   * \param i2c Resource index of the I2c
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   540   * \return I2C module register address
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   541   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   542  IFX_EXTERN Ifx_I2C *IfxI2c_getAddress(IfxI2c_Index i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   543  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   544  /** \brief Returns the real Baudrate
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   545   * \return Baudrate
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   546   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   547  IFX_EXTERN float32 IfxI2c_getBaudrate(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   548  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   549  /** \brief API to get the resource index of the I2C specified.
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   550   * \param i2c Pointer to the I2C HW module (register memory map)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   551   * \return Resource index of the I2C
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   552   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   553  IFX_EXTERN IfxI2c_Index IfxI2c_getIndex(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   554  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   555  /**
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   556   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   557   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   558  IFX_EXTERN void IfxI2c_initSclSdaPin(const IfxI2c_Scl_InOut *scl, const IfxI2c_Sda_InOut *sda, IfxPort_PadDriver padDriver);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   559  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   560  /** \brief Releases the bus, i.e puts a stop condition on the bus
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   561   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   562   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   563  IFX_EXTERN void IfxI2c_releaseBus(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   564  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   565  /**
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   566   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   567   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   568  IFX_EXTERN void IfxI2c_resetFifo(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   569  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   570  /** \brief resets the I2c kernel
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   571   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   572   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   573   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   574  IFX_EXTERN void IfxI2c_resetModule(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   575  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   576  /** \brief Calculates the desired baudrate
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   577   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   578   * \param baudrate specifies the baud rate
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   579   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   580   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   581  IFX_EXTERN void IfxI2c_setBaudrate(Ifx_I2C *i2c, float32 baudrate);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   582  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   583  /** \} */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   584  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   585  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   586  /*---------------------Inline Function Implementations------------------------*/
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   587  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   588  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   589  IFX_INLINE boolean IfxI2c_busIsFree(Ifx_I2C *i2c)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   590  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   591      boolean free = FALSE;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   592  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   593      if (i2c->BUSSTAT.B.BS == IfxI2c_BusStatus_idle)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   594      {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   595          free = TRUE;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   596      }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   597  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   598      return free;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   599  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   600  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   601  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   602  IFX_INLINE void IfxI2c_clearAllDtrInterruptSources(Ifx_I2C *i2c)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   603  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   604      i2c->ICR.U = (1 << IFX_I2C_ICR_LSREQ_INT_OFF) | (1 << IFX_I2C_ICR_SREQ_INT_OFF) | (1 << IFX_I2C_ICR_LBREQ_INT_OFF) | (1 << IFX_I2C_ICR_BREQ_INT_OFF);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   605  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   606  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   607  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   608  IFX_INLINE void IfxI2c_clearAllErrorInterruptSources(Ifx_I2C *i2c)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   609  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   610      i2c->ERRIRQSC.U = (1 << IFX_I2C_ERRIRQSC_RXF_UFL_OFF) | (1 << IFX_I2C_ERRIRQSC_RXF_OFL_OFF) | (1 << IFX_I2C_ERRIRQSC_TXF_UFL_OFF) | (1 << IFX_I2C_ERRIRQSC_TXF_OFL_OFF);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   611  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   612  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   613  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   614  IFX_INLINE void IfxI2c_clearAllProtocolInterruptSources(Ifx_I2C *i2c)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   615  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   616      i2c->PIRQSC.U = (1 << IFX_I2C_PIRQSC_AM_OFF) | (1 << IFX_I2C_PIRQSC_GC_OFF) | (1 << IFX_I2C_PIRQSC_MC_OFF) | (1 << IFX_I2C_PIRQSC_AL_OFF) | (1 << IFX_I2C_PIRQSC_NACK_OFF) | (1 << IFX_I2C_PIRQSC_TX_END_OFF) | (1 << IFX_I2C_PIRQSC_RX_OFF);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   617  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   618  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   619  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   620  IFX_INLINE void IfxI2c_clearBurstRequestInterruptSource(Ifx_I2C *i2c)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   621  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   622      i2c->ICR.B.BREQ_INT = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   623  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   624  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   625  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   626  IFX_INLINE void IfxI2c_clearErrorInterruptSource(Ifx_I2C *i2c, IfxI2c_ErrorInterruptSource source)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   627  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   628      i2c->ERRIRQSC.U = (1 << source);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   629  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   630  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   631  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   632  IFX_INLINE void IfxI2c_clearLastBurstRequestInterruptSource(Ifx_I2C *i2c)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   633  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   634      i2c->ICR.B.LBREQ_INT = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   635  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   636  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   637  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   638  IFX_INLINE void IfxI2c_clearLastSingleRequestInterruptSource(Ifx_I2C *i2c)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   639  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   640      i2c->ICR.B.LSREQ_INT = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   641  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   642  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   643  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   644  IFX_INLINE void IfxI2c_clearProtocolInterruptSource(Ifx_I2C *i2c, IfxI2c_ProtocolInterruptSource source)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   645  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   646      i2c->PIRQSC.U = (1 << source);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   647  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   648  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   649  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   650  IFX_INLINE void IfxI2c_clearSingleRequestInterruptSource(Ifx_I2C *i2c)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   651  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   652      i2c->ICR.B.SREQ_INT = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   653  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   654  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   655  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   656  IFX_INLINE void IfxI2c_disableBurstRequestInterruptSource(Ifx_I2C *i2c)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   657  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   658      i2c->IMSC.B.BREQ_INT = 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   659  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   660  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   661  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   662  IFX_INLINE void IfxI2c_disableErrorInterruptFlag(Ifx_I2C *i2c)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   663  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   664      i2c->IMSC.B.I2C_ERR_INT = 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   665  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   666  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   667  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   668  IFX_INLINE void IfxI2c_disableErrorInterruptSource(Ifx_I2C *i2c, IfxI2c_ErrorInterruptSource source)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   669  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   670      i2c->ERRIRQSM.U &= ~(1 << source);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   671  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   672  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   673  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   674  IFX_INLINE void IfxI2c_disableLastBurstRequestInterruptSource(Ifx_I2C *i2c)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   675  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   676      i2c->IMSC.B.LBREQ_INT = 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   677  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   678  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   679  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   680  IFX_INLINE void IfxI2c_disableLastSingleRequestInterruptSource(Ifx_I2C *i2c)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   681  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   682      i2c->IMSC.B.LSREQ_INT = 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   683  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   684  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   685  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   686  IFX_INLINE void IfxI2c_disableProtocolInterruptFlag(Ifx_I2C *i2c)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   687  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   688      i2c->IMSC.B.I2C_P_INT = 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   689  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   690  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   691  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   692  IFX_INLINE void IfxI2c_disableProtocolInterruptSource(Ifx_I2C *i2c, IfxI2c_ProtocolInterruptSource source)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   693  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   694      i2c->PIRQSM.U &= ~(1 << source);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   695  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   696  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   697  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   698  IFX_INLINE void IfxI2c_disableSingleRequestInterruptSource(Ifx_I2C *i2c)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   699  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   700      i2c->IMSC.B.SREQ_INT = 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   701  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   702  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   703  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   704  IFX_INLINE void IfxI2c_enableBurstRequestInterruptSource(Ifx_I2C *i2c)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   705  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   706      i2c->IMSC.B.BREQ_INT = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   707  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   708  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   709  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   710  IFX_INLINE void IfxI2c_enableErrorInterruptFlag(Ifx_I2C *i2c)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   711  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   712      i2c->IMSC.B.I2C_ERR_INT = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   713  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   714  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   715  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   716  IFX_INLINE void IfxI2c_enableErrorInterruptSource(Ifx_I2C *i2c, IfxI2c_ErrorInterruptSource source)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   717  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   718      i2c->ERRIRQSM.U |= (1 << source);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   719  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   720  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   721  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   722  IFX_INLINE void IfxI2c_enableLastBurstRequestInterruptSource(Ifx_I2C *i2c)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   723  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   724      i2c->IMSC.B.LBREQ_INT = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   725  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   726  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   727  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   728  IFX_INLINE void IfxI2c_enableLastSingleRequestInterruptSource(Ifx_I2C *i2c)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   729  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   730      i2c->IMSC.B.LSREQ_INT = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   731  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   732  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   733  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   734  IFX_INLINE void IfxI2c_enableProtocolInterruptFlag(Ifx_I2C *i2c)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   735  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   736      i2c->IMSC.B.I2C_P_INT = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   737  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   738  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   739  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   740  IFX_INLINE void IfxI2c_enableProtocolInterruptSource(Ifx_I2C *i2c, IfxI2c_ProtocolInterruptSource source)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   741  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   742      i2c->PIRQSM.U |= (1 << source);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   743  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   744  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   745  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   746  IFX_INLINE void IfxI2c_enableSingleRequestInterruptSource(Ifx_I2C *i2c)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   747  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   748      i2c->IMSC.B.SREQ_INT = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   749  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   750  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   751  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   752  IFX_INLINE volatile Ifx_SRC_SRCR *IfxI2c_getBurstDataTransferSrcPointer(Ifx_I2C *i2c)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   753  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   754      if (i2c == &MODULE_I2C0)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   755      {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   756          return &MODULE_SRC.I2C.I2C[0].BREQ;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   757      }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   758      else
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   759      {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   760          return &MODULE_SRC.I2C.I2C[1].BREQ;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   761      }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   762  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   763  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   764  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   765  IFX_INLINE boolean IfxI2c_getBurstRequestInterruptSourceStatus(Ifx_I2C *i2c)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   766  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   767      return i2c->RIS.B.BREQ_INT;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   768  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   769  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   770  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   771  IFX_INLINE IfxI2c_BusStatus IfxI2c_getBusStatus(Ifx_I2C *i2c)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   772  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   773      return (IfxI2c_BusStatus)i2c->BUSSTAT.B.BS;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   774  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   775  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   776  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   777  IFX_INLINE boolean IfxI2c_getErrorInterruptFlagStatus(Ifx_I2C *i2c)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   778  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   779      return i2c->RIS.B.I2C_ERR_INT;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   780  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   781  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   782  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   783  IFX_INLINE boolean IfxI2c_getErrorInterruptSourceStatus(Ifx_I2C *i2c, IfxI2c_ErrorInterruptSource source)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   784  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   785      return (i2c->ERRIRQSS.U & (1 << source)) ? TRUE : FALSE;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   786  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   787  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   788  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   789  IFX_INLINE volatile Ifx_SRC_SRCR *IfxI2c_getErrorSrcPointer(Ifx_I2C *i2c)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   790  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   791      if (i2c == &MODULE_I2C0)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   792      {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   793          return &MODULE_SRC.I2C.I2C[0].ERR;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   794      }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   795      else
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   796      {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   797          return &MODULE_SRC.I2C.I2C[1].ERR;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   798      }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   799  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   800  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   801  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   802  IFX_INLINE volatile Ifx_SRC_SRCR *IfxI2c_getLastBurstDataTransferSrcPointer(Ifx_I2C *i2c)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   803  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   804      if (i2c == &MODULE_I2C0)
	movh.a	a15,#61452
.L458:

; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   804      if (i2c == &MODULE_I2C0)      (inlined)
	jne.a	a4,a15,.L7
.L459:

; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   805      {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   806          return &MODULE_SRC.I2C.I2C[0].LBREQ;
	movh.a	a15,#61444
	lea	a15,[a15]@los(0xf0038304)
.L460:

; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   806          return &MODULE_SRC.I2C.I2C[0].LBREQ;      (inlined)
	j	.L8

; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   804      if (i2c == &MODULE_I2C0)      (inlined)
.L7:

; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   807      }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   808      else
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   809      {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   810          return &MODULE_SRC.I2C.I2C[1].LBREQ;
	movh.a	a15,#61444
	lea	a15,[a15]@los(0xf0038354)

; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   812  }      (inlined)
.L8:

; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	     1  /**
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	     2   * \file IfxSrc.h
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	     3   * \brief SRC  basic functionality
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	     4   * \ingroup IfxLld_Src
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	     5   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	     6   * \version iLLD_1_0_1_11_0
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	     7   * \copyright Copyright (c) 2019 Infineon Technologies AG. All rights reserved.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	     8   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	     9   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    10   *                                 IMPORTANT NOTICE
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    11   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    12   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    13   * Use of this file is subject to the terms of use agreed between (i) you or 
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    14   * the company in which ordinary course of business you are acting and (ii) 
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    15   * Infineon Technologies AG or its licensees. If and as long as no such 
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    16   * terms of use are agreed, use of this file is subject to following:
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    17  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    18  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    19   * Boost Software License - Version 1.0 - August 17th, 2003
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    20  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    21   * Permission is hereby granted, free of charge, to any person or 
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    22   * organization obtaining a copy of the software and accompanying 
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    23   * documentation covered by this license (the "Software") to use, reproduce,
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    24   * display, distribute, execute, and transmit the Software, and to prepare
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    25   * derivative works of the Software, and to permit third-parties to whom the 
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    26   * Software is furnished to do so, all subject to the following:
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    27  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    28   * The copyright notices in the Software and this entire statement, including
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    29   * the above license grant, this restriction and the following disclaimer, must
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    30   * be included in all copies of the Software, in whole or in part, and all
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    31   * derivative works of the Software, unless such copies or derivative works are
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    32   * solely in the form of machine-executable object code generated by a source
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    33   * language processor.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    34  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    35   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR 
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    36   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    37   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    38   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE 
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    39   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    40   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    41   * DEALINGS IN THE SOFTWARE.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    42  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    43   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    44   * \defgroup IfxLld_Src SRC
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    45   * \addtogroup IfxLld_Src
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    46   * \{
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    47   * \defgroup IfxLld_Src_Usage How to use Service Request Mechanism?
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    48   * \addtogroup IfxLld_Src_Usage
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    49   * \{
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    50   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    51   * For Aurix controller peripherals that can generate service requests is connected to one
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    52   * or more Service Request Nodes (SRNs) in the central Interrupt Router(IR) module. Refer to Controller User Manual for more details\n
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    53   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    54   * IfxSrc driver provides the APIs to configure and control service requests. Refer \ref IfxLld_Src_Usage for
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    55   * details of these APIs.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    56   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    57   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    58   * \section Ifx_Src_UsageInit Initialize the Service Request Node
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    59   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    60   * Service request node is initialized to configure the following,\n
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    61   * 1) Route the interrupt trigger to service provider, which are:\n
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    62   *  __a. One of the available CPUs or\n
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    63   *  __b. DMA controller\n
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    64   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    65   * 2) Priority of CPU Interrupt or DMA Trigger.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    66   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    67   * For Interrupt or DMA to be correctly triggered, following steps are to be done in the user code:
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    68   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    69   * \subsection Ifx_Src_UsageInitStep1 Step1: Configure the Node
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    70   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    71   * User must configure the service request node in the application / driver files.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    72   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    73   * \subsection Ifx_Src_UsageInitStep2 Step2: Enable the Trigger
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    74   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    75   * Enable the service request node to connect the trigger event from the hardware to service provider.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    76   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    77   * Example:
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    78   * Following example show the configuration for STM0 Service request 0 trigger configured to trigger
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    79   * CPU1 with the priority specified by IFX_INTPRIO_STM0 (from the example at IfxCpu_Irq)
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    80   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    81   * \code
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    82   * //file: myApplication.c
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    83   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    84   * #include "Ifx_IntPrioDef.h" // to get the priority numbers
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    85   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    86   * void myDriverInitFunction(void)
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    87   * {
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    88   *    // driver init code
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    89   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    90   *    // Step1: Call the function to route the trigger from for SRC_STM0_SR0 to CPU1
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    91   *    // and priority specified at Ifx_IntPrioDef.h globally
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    92   *  IfxSrc_init(&MODULE_SRC.STM.STM[0].SR0, IfxSrc_Tos_cpu1, IFX_INTPRIO_STM0);
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    93   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    94   *    // Step2: Enable the service request node
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    95   *  IfxSrc_init(&MODULE_SRC.STM.STM[0].SR0);
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    96   * }
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    97   * \endcode
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    98   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    99   * \}
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   100   * \}
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   101   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   102   * \defgroup IfxLld_Src_Std_Service_Request Service Request Functions
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   103   * \ingroup IfxLld_Src_Std
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   104   * \defgroup IfxLld_Src_Std_Module Module Functions
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   105   * \ingroup IfxLld_Src_Std
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   106   */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   107  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   108  #ifndef IFXSRC_H
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   109  #define IFXSRC_H 1
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   110  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   111  /******************************************************************************/
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   112  /*----------------------------------Includes----------------------------------*/
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   113  /******************************************************************************/
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   114  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   115  #include "_Impl/IfxSrc_cfg.h"
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   116  #include "Cpu/Std/IfxCpu_Intrinsics.h"
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   117  #include "IfxSrc_reg.h"
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   118  /** \addtogroup IfxLld_Src_Std_Service_Request
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   119   * \{ */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   120  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   121  /******************************************************************************/
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   122  /*-------------------------Inline Function Prototypes-------------------------*/
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   123  /******************************************************************************/
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   124  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   125  /** \brief Resets the overrun flag of the Service Request.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   126   * \param src pointer to the Service Request Control register which the overrun flag should be cleared.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   127   * \return None
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   128   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   129   * Usage example: see \ref IfxSrc_init
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   130   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   131   */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   132  IFX_INLINE void IfxSrc_clearOverrun(volatile Ifx_SRC_SRCR *src);
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   133  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   134  /** \brief Resets a specific interrupt service by software.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   135   * \param src pointer to the Service Request Control register which the request should be cleared.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   136   * \return None
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   137   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   138   * Usage example: see \ref IfxSrc_init
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   139   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   140   */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   141  IFX_INLINE void IfxSrc_clearRequest(volatile Ifx_SRC_SRCR *src);
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   142  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   143  /** \brief Gets the current overrun status.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   144   * \param src pointer to the Service Request Control register for which the overrun status should be returned.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   145   * \return current service request control overrun status.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   146   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   147   * Usage example: see \ref IfxSrc_init
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   148   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   149   */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   150  IFX_INLINE boolean IfxSrc_isOverrun(volatile Ifx_SRC_SRCR *src);
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   151  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   152  /** \brief Gets the current request status.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   153   * \param src pointer to the Service Request Control register for which the request status should be returned.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   154   * \return current service request control request status.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   155   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   156   * Usage example: see \ref IfxSrc_init
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   157   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   158   */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   159  IFX_INLINE boolean IfxSrc_isRequested(volatile Ifx_SRC_SRCR *src);
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   160  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   161  /** \brief Requests a specific interrupt service by software
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   162   * \param src pointer to the Service Request Control register which the interrupt has to be requested.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   163   * \return None
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   164   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   165   * Usage example: see \ref IfxSrc_init
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   166   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   167   */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   168  IFX_INLINE void IfxSrc_setRequest(volatile Ifx_SRC_SRCR *src);
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   169  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   170  /** \} */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   171  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   172  /** \addtogroup IfxLld_Src_Std_Module
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   173   * \{ */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   174  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   175  /******************************************************************************/
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   176  /*-------------------------Inline Function Prototypes-------------------------*/
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   177  /******************************************************************************/
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   178  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   179  /** \brief DeInitializes the service request control register.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   180   * \param src pointer to the Service Request Control register which should be deinitialised.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   181   * \return None
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   182   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   183   * Usage example: see \ref IfxSrc_init
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   184   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   185   */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   186  IFX_INLINE void IfxSrc_deinit(volatile Ifx_SRC_SRCR *src);
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   187  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   188  /** \brief Disables a specific interrupt service request.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   189   * \param src pointer to the Service Request Control register for which the interrupt has to be disabled.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   190   * \return None
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   191   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   192   * Usage example: see \ref IfxSrc_init
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   193   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   194   */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   195  IFX_INLINE void IfxSrc_disable(volatile Ifx_SRC_SRCR *src);
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   196  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   197  /** \brief Enables a specific interrupt service request.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   198   * \param src pointer to the Service Request Control register for which the interrupt has to be enabled.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   199   * \return None
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   200   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   201   * Usage example: see \ref IfxSrc_init
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   202   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   203   */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   204  IFX_INLINE void IfxSrc_enable(volatile Ifx_SRC_SRCR *src);
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   205  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   206  /** \brief Initializes the service request control register.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   207   * \param src pointer to the Service Request Control register which should be initialised.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   208   * \param typOfService type of interrupt service provider.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   209   * \param priority Interrupt priority.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   210   * \return None
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   211   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   212   * Get the peripheral service control register which request need to be serviced and assign this service to any of service providers.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   213   * \code
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   214   * //define the interrupt priority
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   215   * #define IFXASCLIN0_TX_INTPRIO 2
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   216   * //get the service request
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   217   * volatile Ifx_SRC_SRCR *src = IfxAsclin_getSrcPointerRx( &MODULE_ASCLIN0 );
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   218   * //initlaise the service request
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   219   * IfxSrc_init( src, IfxSrc_Tos_cpu0, IFXASCLIN0_TX_INTPRIO );
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   220   * // enable the service
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   221   * IfxSrc_enable( src );
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   222   * //check for service request flags and clear if they occur
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   223   * if ( IfxSrc_isRequested( src ) == TRUE )
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   224   * {
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   225   *    IfxSrc_clearRequest( src );
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   226   * }
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   227   * if ( IfxSrc_isOverrun( src ) == TRUE )
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   228   * {
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   229   *      IfxSrc_clearOverrun( src );
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   230   * }
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   231   * // Atlast deinitialise the service control
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   232   * IfxSrc_deinit( src );
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   233   * \endcode
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   234   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   235   */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   236  IFX_INLINE void IfxSrc_init(volatile Ifx_SRC_SRCR *src, IfxSrc_Tos typOfService, Ifx_Priority priority);
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   237  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   238  /** \} */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   239  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   240  /******************************************************************************/
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   241  /*---------------------Inline Function Implementations------------------------*/
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   242  /******************************************************************************/
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   243  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   244  IFX_INLINE void IfxSrc_clearOverrun(volatile Ifx_SRC_SRCR *src)
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   245  {
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   246      src->B.IOVCLR = 1;
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   247  }
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   248  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   249  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   250  IFX_INLINE void IfxSrc_clearRequest(volatile Ifx_SRC_SRCR *src)
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   251  {
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   252      src->B.CLRR = 1;
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   253  }
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   254  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   255  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   256  IFX_INLINE void IfxSrc_deinit(volatile Ifx_SRC_SRCR *src)
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   257  {
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   258      src->U = 0;
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   259  }
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   260  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   261  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   262  IFX_INLINE void IfxSrc_disable(volatile Ifx_SRC_SRCR *src)
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   263  {
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   264      src->B.SRE = 0;
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   265  }
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   266  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   267  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   268  IFX_INLINE void IfxSrc_enable(volatile Ifx_SRC_SRCR *src)
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   269  {
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   270      src->B.SRE = 1;
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   271  }
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   272  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   273  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   274  IFX_INLINE void IfxSrc_init(volatile Ifx_SRC_SRCR *src, IfxSrc_Tos typOfService, Ifx_Priority priority)
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   275  {
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   276      src->B.SRPN = priority;
	fcall	.cocofun_1
.L242:

; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.c	   109   IfxI2c_getLastSingleDataTransferSrcPointer(i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.c	   110      IfxSrc_init(src, typeOfService, priority);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.c	   111      IfxSrc_enable(src);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.c	   112  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.c	   113  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.c	   114  
	ret
.L234:
	
__IfxI2c_enableLastBurstDataTransferInterrupt_function_end:
	.size	IfxI2c_enableLastBurstDataTransferInterrupt,__IfxI2c_enableLastBurstDataTransferInterrupt_function_end-IfxI2c_enableLastBurstDataTransferInterrupt
.L103:
	; End of function
	
	.sdecl	'.text.IfxI2c.IfxI2c_enableLastSingleDataTransferInterrupt',code,cluster('IfxI2c_enableLastSingleDataTransferInterrupt')
	.sect	'.text.IfxI2c.IfxI2c_enableLastSingleDataTransferInterrupt'
	.align	2
	
	.global	IfxI2c_enableLastSingleDataTransferInterrupt

; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.c	   115  void IfxI2c_enableModule(Ifx_I2C *i2c)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.c	   116  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.c	   117      uint16 pwd = IfxScuWdt_getCpuWatchdogPassword();
; Function IfxI2c_enableLastSingleDataTransferInterrupt
.L52:
IfxI2c_enableLastSingleDataTransferInterrupt:	.type	func

; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	     1  /**
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	     2   * \file IfxI2c.h
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	     3   * \brief I2C  basic functionality
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	     4   * \ingroup IfxLld_I2c
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	     5   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	     6   * \version iLLD_1_0_1_11_0
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	     7   * \copyright Copyright (c) 2018 Infineon Technologies AG. All rights reserved.
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	     8   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	     9   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    10   *                                 IMPORTANT NOTICE
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    11   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    12   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    13   * Use of this file is subject to the terms of use agreed between (i) you or 
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    14   * the company in which ordinary course of business you are acting and (ii) 
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    15   * Infineon Technologies AG or its licensees. If and as long as no such 
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    16   * terms of use are agreed, use of this file is subject to following:
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    17  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    18  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    19   * Boost Software License - Version 1.0 - August 17th, 2003
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    20  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    21   * Permission is hereby granted, free of charge, to any person or 
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    22   * organization obtaining a copy of the software and accompanying 
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    23   * documentation covered by this license (the "Software") to use, reproduce,
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    24   * display, distribute, execute, and transmit the Software, and to prepare
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    25   * derivative works of the Software, and to permit third-parties to whom the 
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    26   * Software is furnished to do so, all subject to the following:
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    27  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    28   * The copyright notices in the Software and this entire statement, including
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    29   * the above license grant, this restriction and the following disclaimer, must
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    30   * be included in all copies of the Software, in whole or in part, and all
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    31   * derivative works of the Software, unless such copies or derivative works are
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    32   * solely in the form of machine-executable object code generated by a source
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    33   * language processor.
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    34  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    35   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR 
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    36   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    37   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    38   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE 
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    39   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    40   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    41   * DEALINGS IN THE SOFTWARE.
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    42  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    43   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    44   * \defgroup IfxLld_I2c_Std_enums Enumerations
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    45   * \ingroup IfxLld_I2c_Std
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    46   * \defgroup IfxLld_I2c_Std_functions Functions
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    47   * \ingroup IfxLld_I2c_Std
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    48   * \defgroup IfxLld_I2c_Std_structures Data Structures
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    49   * \ingroup IfxLld_I2c_Std
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    50   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    51  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    52  #ifndef IFXI2C_H
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    53  #define IFXI2C_H 1
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    54  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    55  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    56  /*----------------------------------Includes----------------------------------*/
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    57  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    58  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    59  #include "_Impl/IfxI2c_cfg.h"
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    60  #include "Scu/Std/IfxScuWdt.h"
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    61  #include "Scu/Std/IfxScuCcu.h"
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    62  #include "IfxI2c_bf.h"
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    63  #include "_PinMap/IfxI2c_PinMap.h"
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    64  #include "Src/Std/IfxSrc.h"
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    65  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    66  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    67  /*--------------------------------Enumerations--------------------------------*/
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    68  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    69  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    70  /** \addtogroup IfxLld_I2c_Std_enums
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    71   * \{ */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    72  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    73  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    74      IfxI2c_BusStatus_idle        = 0, /**< \brief idle */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    75      IfxI2c_BusStatus_started     = 1, /**< \brief started */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    76      IfxI2c_BusStatus_busyMaster  = 2, /**< \brief busy Master */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    77      IfxI2c_BusStatus_remoteSlave = 3  /**< \brief remote Slave */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    78  } IfxI2c_BusStatus;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    79  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    80  /** \brief enable error interrupt request source
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    81   * Definition in Ifx.I2C.ERRIRQSM.U
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    82   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    83  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    84  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    85      IfxI2c_ErrorInterruptSource_rxFifoUnderflow = IFX_I2C_ERRIRQSM_RXF_UFL_OFF,  /**< \brief receive fifo underflow service request */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    86      IfxI2c_ErrorInterruptSource_rxFifoOverflow  = IFX_I2C_ERRIRQSM_RXF_OFL_OFF,  /**< \brief receive fifo overflow service request */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    87      IfxI2c_ErrorInterruptSource_txFifoUnderflow = IFX_I2C_ERRIRQSM_TXF_UFL_OFF,  /**< \brief transmit fifo underflow service request */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    88      IfxI2c_ErrorInterruptSource_txFifoOverflow  = IFX_I2C_ERRIRQSM_TXF_OFL_OFF   /**< \brief transmit fifo overflow service request */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    89  } IfxI2c_ErrorInterruptSource;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    90  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    91  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    92  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    93      IfxI2c_PinSelect_a = 0,
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    94      IfxI2c_PinSelect_b = 1,
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    95      IfxI2c_PinSelect_c = 2,
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    96      IfxI2c_PinSelect_d = 3,
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    97      IfxI2c_PinSelect_e = 4,
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    98      IfxI2c_PinSelect_f = 5,
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    99      IfxI2c_PinSelect_g = 6,
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   100      IfxI2c_PinSelect_h = 7
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   101  } IfxI2c_PinSelect;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   102  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   103  /** \brief enable protocol interrupt source
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   104   * Definition in Ifx.I2C.PIRQSM.U
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   105   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   106  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   107  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   108      IfxI2c_ProtocolInterruptSource_addressMatch           = IFX_I2C_PIRQSM_AM_OFF,     /**< \brief address match service request */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   109      IfxI2c_ProtocolInterruptSource_generalCall            = IFX_I2C_PIRQSM_GC_OFF,     /**< \brief general call service request */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   110      IfxI2c_ProtocolInterruptSource_masterCode             = IFX_I2C_PIRQSM_MC_OFF,     /**< \brief master code service request */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   111      IfxI2c_ProtocolInterruptSource_arbitrationLost        = IFX_I2C_PIRQSM_AL_OFF,     /**< \brief arbitration lost service request */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   112      IfxI2c_ProtocolInterruptSource_notAcknowledgeReceived = IFX_I2C_PIRQSM_NACK_OFF,   /**< \brief not acknowledge received service request */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   113      IfxI2c_ProtocolInterruptSource_transmissionEnd        = IFX_I2C_PIRQSM_TX_END_OFF, /**< \brief transmission end service request */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   114      IfxI2c_ProtocolInterruptSource_receiveMode            = IFX_I2C_PIRQSM_RX_OFF      /**< \brief receive mode service request */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   115  } IfxI2c_ProtocolInterruptSource;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   116  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   117  /** \brief Enable/disable the sensitivity of the module to sleep signal\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   118   * Definition in Ifx_I2C.CLC1.B.EDIS
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   119   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   120  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   121  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   122      IfxI2c_SleepMode_enable  = 0, /**< \brief enables sleep mode */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   123      IfxI2c_SleepMode_disable = 1  /**< \brief disables sleep mode */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   124  } IfxI2c_SleepMode;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   125  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   126  /** \} */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   127  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   128  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   129  /*-----------------------------Data Structures--------------------------------*/
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   130  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   131  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   132  /** \addtogroup IfxLld_I2c_Std_structures
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   133   * \{ */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   134  /** \brief Pin Structure
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   135   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   136  typedef struct
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   137  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   138      IfxI2c_Scl_InOut *scl;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   139      IfxI2c_Sda_InOut *sda;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   140      IfxPort_PadDriver padDriver;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   141  } IfxI2c_Pins;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   142  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   143  /** \} */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   144  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   145  /** \addtogroup IfxLld_I2c_Std_functions
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   146   * \{ */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   147  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   148  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   149  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   150  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   151  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   152  /** \brief Returns if the bus is free
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   153   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   154  IFX_INLINE boolean IfxI2c_busIsFree(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   155  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   156  /** \brief clears all DTR interrupt sources
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   157   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   158   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   159   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   160  IFX_INLINE void IfxI2c_clearAllDtrInterruptSources(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   161  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   162  /** \brief clears all Error Interrupt sources
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   163   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   164   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   165   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   166  IFX_INLINE void IfxI2c_clearAllErrorInterruptSources(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   167  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   168  /** \brief Clears all Protocol Interrupt sources
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   169   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   170   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   171   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   172  IFX_INLINE void IfxI2c_clearAllProtocolInterruptSources(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   173  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   174  /** \brief clears burst request interrupt source
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   175   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   176   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   177   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   178  IFX_INLINE void IfxI2c_clearBurstRequestInterruptSource(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   179  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   180  /** \brief clears the specified source of error interrupt
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   181   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   182   * \param source error interrupt source
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   183   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   184   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   185  IFX_INLINE void IfxI2c_clearErrorInterruptSource(Ifx_I2C *i2c, IfxI2c_ErrorInterruptSource source);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   186  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   187  /** \brief clears last burst request interrupt source
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   188   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   189   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   190   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   191  IFX_INLINE void IfxI2c_clearLastBurstRequestInterruptSource(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   192  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   193  /** \brief clears last single request interrupt source
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   194   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   195   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   196   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   197  IFX_INLINE void IfxI2c_clearLastSingleRequestInterruptSource(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   198  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   199  /** \brief clears the specified source of protocol interrupt
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   200   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   201   * \param source protocol interrupt source
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   202   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   203   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   204  IFX_INLINE void IfxI2c_clearProtocolInterruptSource(Ifx_I2C *i2c, IfxI2c_ProtocolInterruptSource source);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   205  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   206  /** \brief clears single request interrupt source
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   207   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   208   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   209   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   210  IFX_INLINE void IfxI2c_clearSingleRequestInterruptSource(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   211  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   212  /** \brief disables burst request interrupt source
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   213   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   214   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   215   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   216  IFX_INLINE void IfxI2c_disableBurstRequestInterruptSource(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   217  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   218  /** \brief disables the error interrupt flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   219   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   220   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   221   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   222  IFX_INLINE void IfxI2c_disableErrorInterruptFlag(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   223  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   224  /** \brief disables the specified source of error interrupt
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   225   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   226   * \param source error interrupt source
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   227   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   228   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   229  IFX_INLINE void IfxI2c_disableErrorInterruptSource(Ifx_I2C *i2c, IfxI2c_ErrorInterruptSource source);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   230  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   231  /** \brief disables last burst request interrupt source
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   232   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   233   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   234   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   235  IFX_INLINE void IfxI2c_disableLastBurstRequestInterruptSource(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   236  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   237  /** \brief disables last single request interrupt source
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   238   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   239   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   240   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   241  IFX_INLINE void IfxI2c_disableLastSingleRequestInterruptSource(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   242  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   243  /** \brief disables the Protocol interrupt flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   244   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   245   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   246   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   247  IFX_INLINE void IfxI2c_disableProtocolInterruptFlag(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   248  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   249  /** \brief disables the specified source of protocol interrupt
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   250   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   251   * \param source protocol interrupt source
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   252   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   253   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   254  IFX_INLINE void IfxI2c_disableProtocolInterruptSource(Ifx_I2C *i2c, IfxI2c_ProtocolInterruptSource source);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   255  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   256  /** \brief disables single request interrupt source
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   257   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   258   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   259   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   260  IFX_INLINE void IfxI2c_disableSingleRequestInterruptSource(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   261  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   262  /** \brief enables burst request interrupt source
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   263   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   264   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   265   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   266  IFX_INLINE void IfxI2c_enableBurstRequestInterruptSource(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   267  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   268  /** \brief enables the error interrupt flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   269   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   270   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   271   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   272  IFX_INLINE void IfxI2c_enableErrorInterruptFlag(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   273  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   274  /** \brief enables the specified source of error interrupt
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   275   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   276   * \param source error interrupt source
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   277   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   278   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   279  IFX_INLINE void IfxI2c_enableErrorInterruptSource(Ifx_I2C *i2c, IfxI2c_ErrorInterruptSource source);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   280  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   281  /** \brief enables last burst request interrupt source
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   282   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   283   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   284   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   285  IFX_INLINE void IfxI2c_enableLastBurstRequestInterruptSource(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   286  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   287  /** \brief enables last single request interrupt source
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   288   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   289   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   290   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   291  IFX_INLINE void IfxI2c_enableLastSingleRequestInterruptSource(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   292  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   293  /** \brief enables the protocol interrupt flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   294   * \param i2c pointer to I2C registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   295   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   296   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   297  IFX_INLINE void IfxI2c_enableProtocolInterruptFlag(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   298  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   299  /** \brief enables the specified source of protocol interrupt
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   300   * \param i2c pointer to I2C registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   301   * \param source protocol interrupt source
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   302   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   303   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   304  IFX_INLINE void IfxI2c_enableProtocolInterruptSource(Ifx_I2C *i2c, IfxI2c_ProtocolInterruptSource source);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   305  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   306  /** \brief enables single request interrupt source
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   307   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   308   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   309   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   310  IFX_INLINE void IfxI2c_enableSingleRequestInterruptSource(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   311  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   312  /** \brief Returns the SRC pointer for I2C burst data transfer request interrupt
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   313   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   314   * \return SRC pointer for I2C burst data transfer Service interrupt
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   315   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   316  IFX_INLINE volatile Ifx_SRC_SRCR *IfxI2c_getBurstDataTransferSrcPointer(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   317  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   318  /** \brief returns the status of burst request interrupt source status
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   319   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   320   * \return status
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   321   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   322  IFX_INLINE boolean IfxI2c_getBurstRequestInterruptSourceStatus(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   323  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   324  /**
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   325   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   326   * \return BusStatus
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   327   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   328  IFX_INLINE IfxI2c_BusStatus IfxI2c_getBusStatus(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   329  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   330  /** \brief returns the current status of error interrupt flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   331   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   332   * \return status
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   333   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   334  IFX_INLINE boolean IfxI2c_getErrorInterruptFlagStatus(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   335  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   336  /** \brief returns the status of the error interrupt source
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   337   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   338   * \param source error interrupt source
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   339   * \return status
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   340   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   341  IFX_INLINE boolean IfxI2c_getErrorInterruptSourceStatus(Ifx_I2C *i2c, IfxI2c_ErrorInterruptSource source);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   342  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   343  /** \brief Returns the SRC pointer for I2C Error interrupt
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   344   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   345   * \return SRC pointer for I2C Error Service interrupt
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   346   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   347  IFX_INLINE volatile Ifx_SRC_SRCR *IfxI2c_getErrorSrcPointer(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   348  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   349  /** \brief Returns the SRC pointer for I2C last burst data transfer request interrupt
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   350   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   351   * \return SRC pointer for I2C last burst data transfer Service interrupt
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   352   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   353  IFX_INLINE volatile Ifx_SRC_SRCR *IfxI2c_getLastBurstDataTransferSrcPointer(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   354  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   355  /** \brief returns the status of last burst request interrupt source status
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   356   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   357   * \return status
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   358   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   359  IFX_INLINE boolean IfxI2c_getLastBurstRequestInterruptSourceStatus(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   360  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   361  /** \brief Returns the SRC pointer for I2C last single data transfer request interrupt
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   362   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   363   * \return SRC pointer for I2C last single data transfer Service interrupt
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   364   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   365  IFX_INLINE volatile Ifx_SRC_SRCR *IfxI2c_getLastSingleDataTransferSrcPointer(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   366  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   367  /** \brief returns the status of last single request interrupt source status
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   368   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   369   * \return status
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   370   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   371  IFX_INLINE boolean IfxI2c_getLastSingleRequestInterruptSourceStatus(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   372  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   373  /** \brief returns the current raw status of protocol interrupt
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   374   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   375   * \return status
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   376   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   377  IFX_INLINE boolean IfxI2c_getProtocolInterruptFlagStatus(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   378  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   379  /** \brief returns the status of  specified protocol interrupt source
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   380   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   381   * \param source protocol interrupt source
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   382   * \return status
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   383   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   384  IFX_INLINE boolean IfxI2c_getProtocolInterruptSourceStatus(Ifx_I2C *i2c, IfxI2c_ProtocolInterruptSource source);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   385  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   386  /** \brief Returns the SRC pointer for I2C Protocol interrupt
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   387   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   388   * \return SRC pointer for I2C Protocol Service interrupt
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   389   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   390  IFX_INLINE volatile Ifx_SRC_SRCR *IfxI2c_getProtocolSrcPointer(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   391  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   392  /** \brief Returns the SRC pointer for I2C single data transfer request interrupt
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   393   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   394   * \return SRC pointer for I2C single data transfer Service interrupt
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   395   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   396  IFX_INLINE volatile Ifx_SRC_SRCR *IfxI2c_getSingleDataTransferSrcPointer(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   397  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   398  /** \brief returns the status of single request interrupt source status
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   399   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   400   * \return status
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   401   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   402  IFX_INLINE boolean IfxI2c_getSingleRequestInterruptSourceStatus(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   403  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   404  /** \brief Returns if the Fifo is requesting new data
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   405   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   406  IFX_INLINE boolean IfxI2c_isFifoRequest(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   407  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   408  /**
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   409   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   410   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   411   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   412  IFX_INLINE void IfxI2c_run(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   413  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   414  /** \brief selects the pin
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   415   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   416   * \param pisel pin to be select
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   417   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   418   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   419  IFX_INLINE void IfxI2c_setPinSelection(Ifx_I2C *i2c, IfxI2c_PinSelect pisel);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   420  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   421  /** \brief Sets the number of bytes to be received
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   422   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   423   * \param size number of packets
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   424   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   425   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   426  IFX_INLINE void IfxI2c_setReceivePacketSize(Ifx_I2C *i2c, Ifx_SizeT size);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   427  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   428  /**
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   429   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   430   * \param address device address
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   431   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   432   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   433  IFX_INLINE void IfxI2c_setSlaveDeviceAddress(Ifx_I2C *i2c, uint16 address);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   434  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   435  /** \brief Sets the sensitivity of the module to sleep signal
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   436   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   437   * \param mode mode selection (enable / disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   438   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   439   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   440  IFX_INLINE void IfxI2c_setSleepMode(Ifx_I2C *i2c, IfxI2c_SleepMode mode);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   441  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   442  /** \brief Sets the number of bytes to be tansmitted
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   443   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   444   * \param size number of packets
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   445   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   446   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   447  IFX_INLINE void IfxI2c_setTransmitPacketSize(Ifx_I2C *i2c, Ifx_SizeT size);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   448  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   449  /**
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   450   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   451   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   452   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   453  IFX_INLINE void IfxI2c_stop(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   454  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   455  /**
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   456   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   457   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   458   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   459  IFX_INLINE void IfxI2c_waitBusFree(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   460  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   461  /** \brief Writes a packet (4 bytes) into the Fifo
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   462   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   463   * \param packet specifies the byte to be transfer
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   464   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   465   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   466  IFX_INLINE void IfxI2c_writeFifo(Ifx_I2C *i2c, uint32 packet);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   467  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   468  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   469  /*-------------------------Global Function Prototypes-------------------------*/
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   470  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   471  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   472  /** \brief Configures the Module as Master
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   473   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   474   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   475   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   476  IFX_EXTERN void IfxI2c_configureAsMaster(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   477  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   478  /** \brief Disables the I2c Module
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   479   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   480   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   481   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   482  IFX_EXTERN void IfxI2c_disableModule(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   483  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   484  /** \brief Enables the Burst data transfer interrupt
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   485   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   486   * \param typeOfService Type of Service (Cpu or DMA)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   487   * \param priority priority of the interrupt
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   488   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   489   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   490  IFX_EXTERN void IfxI2c_enableBurstDataTransferInterrupt(Ifx_I2C *i2c, IfxSrc_Tos typeOfService, uint16 priority);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   491  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   492  /** \brief Enables the Error interrupt
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   493   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   494   * \param typeOfService Type of Service (Cpu or DMA)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   495   * \param priority priority of the interrupt
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   496   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   497   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   498  IFX_EXTERN void IfxI2c_enableErrorInterrupt(Ifx_I2C *i2c, IfxSrc_Tos typeOfService, uint16 priority);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   499  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   500  /** \brief enables the last burst data transfer interrupt
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   501   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   502   * \param typeOfService Type of Service (Cpu or DMA)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   503   * \param priority priority of the interrupt
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   504   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   505   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   506  IFX_EXTERN void IfxI2c_enableLastBurstDataTransferInterrupt(Ifx_I2C *i2c, IfxSrc_Tos typeOfService, uint16 priority);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   507  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   508  /** \brief enables the last single data transfer interrupt
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   509   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   510   * \param typeOfService Type of Service (Cpu or DMA)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   511   * \param priority priority of the interrupt
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   512   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   513   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   514  IFX_EXTERN void IfxI2c_enableLastSingleDataTransferInterrupt(Ifx_I2C *i2c, IfxSrc_Tos typeOfService, uint16 priority);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   515  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   516  /** \brief Enables the I2c Module
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   517   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   518   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   519   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   520  IFX_EXTERN void IfxI2c_enableModule(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   521  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   522  /** \brief Enables the protocol interrupt
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   523   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   524   * \param typeOfService Type of Service (Cpu or DMA)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   525   * \param priority Priority of the interrupt
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   526   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   527   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   528  IFX_EXTERN void IfxI2c_enableProtocolInterrupt(void *i2c, IfxSrc_Tos typeOfService, uint16 priority);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   529  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   530  /** \brief enables the single data transfer interrupt
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   531   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   532   * \param typeOfService Type of Service (Cpu or DMA)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   533   * \param priority priority of the interrupt
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   534   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   535   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   536  IFX_EXTERN void IfxI2c_enableSingleDataTransferInterrupt(Ifx_I2C *i2c, IfxSrc_Tos typeOfService, uint16 priority);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   537  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   538  /**
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   539   * \param i2c Resource index of the I2c
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   540   * \return I2C module register address
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   541   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   542  IFX_EXTERN Ifx_I2C *IfxI2c_getAddress(IfxI2c_Index i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   543  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   544  /** \brief Returns the real Baudrate
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   545   * \return Baudrate
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   546   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   547  IFX_EXTERN float32 IfxI2c_getBaudrate(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   548  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   549  /** \brief API to get the resource index of the I2C specified.
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   550   * \param i2c Pointer to the I2C HW module (register memory map)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   551   * \return Resource index of the I2C
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   552   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   553  IFX_EXTERN IfxI2c_Index IfxI2c_getIndex(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   554  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   555  /**
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   556   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   557   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   558  IFX_EXTERN void IfxI2c_initSclSdaPin(const IfxI2c_Scl_InOut *scl, const IfxI2c_Sda_InOut *sda, IfxPort_PadDriver padDriver);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   559  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   560  /** \brief Releases the bus, i.e puts a stop condition on the bus
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   561   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   562   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   563  IFX_EXTERN void IfxI2c_releaseBus(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   564  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   565  /**
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   566   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   567   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   568  IFX_EXTERN void IfxI2c_resetFifo(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   569  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   570  /** \brief resets the I2c kernel
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   571   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   572   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   573   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   574  IFX_EXTERN void IfxI2c_resetModule(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   575  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   576  /** \brief Calculates the desired baudrate
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   577   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   578   * \param baudrate specifies the baud rate
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   579   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   580   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   581  IFX_EXTERN void IfxI2c_setBaudrate(Ifx_I2C *i2c, float32 baudrate);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   582  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   583  /** \} */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   584  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   585  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   586  /*---------------------Inline Function Implementations------------------------*/
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   587  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   588  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   589  IFX_INLINE boolean IfxI2c_busIsFree(Ifx_I2C *i2c)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   590  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   591      boolean free = FALSE;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   592  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   593      if (i2c->BUSSTAT.B.BS == IfxI2c_BusStatus_idle)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   594      {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   595          free = TRUE;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   596      }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   597  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   598      return free;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   599  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   600  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   601  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   602  IFX_INLINE void IfxI2c_clearAllDtrInterruptSources(Ifx_I2C *i2c)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   603  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   604      i2c->ICR.U = (1 << IFX_I2C_ICR_LSREQ_INT_OFF) | (1 << IFX_I2C_ICR_SREQ_INT_OFF) | (1 << IFX_I2C_ICR_LBREQ_INT_OFF) | (1 << IFX_I2C_ICR_BREQ_INT_OFF);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   605  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   606  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   607  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   608  IFX_INLINE void IfxI2c_clearAllErrorInterruptSources(Ifx_I2C *i2c)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   609  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   610      i2c->ERRIRQSC.U = (1 << IFX_I2C_ERRIRQSC_RXF_UFL_OFF) | (1 << IFX_I2C_ERRIRQSC_RXF_OFL_OFF) | (1 << IFX_I2C_ERRIRQSC_TXF_UFL_OFF) | (1 << IFX_I2C_ERRIRQSC_TXF_OFL_OFF);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   611  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   612  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   613  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   614  IFX_INLINE void IfxI2c_clearAllProtocolInterruptSources(Ifx_I2C *i2c)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   615  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   616      i2c->PIRQSC.U = (1 << IFX_I2C_PIRQSC_AM_OFF) | (1 << IFX_I2C_PIRQSC_GC_OFF) | (1 << IFX_I2C_PIRQSC_MC_OFF) | (1 << IFX_I2C_PIRQSC_AL_OFF) | (1 << IFX_I2C_PIRQSC_NACK_OFF) | (1 << IFX_I2C_PIRQSC_TX_END_OFF) | (1 << IFX_I2C_PIRQSC_RX_OFF);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   617  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   618  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   619  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   620  IFX_INLINE void IfxI2c_clearBurstRequestInterruptSource(Ifx_I2C *i2c)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   621  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   622      i2c->ICR.B.BREQ_INT = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   623  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   624  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   625  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   626  IFX_INLINE void IfxI2c_clearErrorInterruptSource(Ifx_I2C *i2c, IfxI2c_ErrorInterruptSource source)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   627  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   628      i2c->ERRIRQSC.U = (1 << source);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   629  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   630  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   631  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   632  IFX_INLINE void IfxI2c_clearLastBurstRequestInterruptSource(Ifx_I2C *i2c)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   633  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   634      i2c->ICR.B.LBREQ_INT = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   635  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   636  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   637  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   638  IFX_INLINE void IfxI2c_clearLastSingleRequestInterruptSource(Ifx_I2C *i2c)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   639  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   640      i2c->ICR.B.LSREQ_INT = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   641  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   642  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   643  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   644  IFX_INLINE void IfxI2c_clearProtocolInterruptSource(Ifx_I2C *i2c, IfxI2c_ProtocolInterruptSource source)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   645  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   646      i2c->PIRQSC.U = (1 << source);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   647  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   648  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   649  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   650  IFX_INLINE void IfxI2c_clearSingleRequestInterruptSource(Ifx_I2C *i2c)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   651  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   652      i2c->ICR.B.SREQ_INT = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   653  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   654  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   655  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   656  IFX_INLINE void IfxI2c_disableBurstRequestInterruptSource(Ifx_I2C *i2c)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   657  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   658      i2c->IMSC.B.BREQ_INT = 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   659  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   660  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   661  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   662  IFX_INLINE void IfxI2c_disableErrorInterruptFlag(Ifx_I2C *i2c)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   663  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   664      i2c->IMSC.B.I2C_ERR_INT = 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   665  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   666  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   667  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   668  IFX_INLINE void IfxI2c_disableErrorInterruptSource(Ifx_I2C *i2c, IfxI2c_ErrorInterruptSource source)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   669  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   670      i2c->ERRIRQSM.U &= ~(1 << source);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   671  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   672  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   673  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   674  IFX_INLINE void IfxI2c_disableLastBurstRequestInterruptSource(Ifx_I2C *i2c)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   675  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   676      i2c->IMSC.B.LBREQ_INT = 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   677  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   678  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   679  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   680  IFX_INLINE void IfxI2c_disableLastSingleRequestInterruptSource(Ifx_I2C *i2c)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   681  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   682      i2c->IMSC.B.LSREQ_INT = 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   683  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   684  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   685  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   686  IFX_INLINE void IfxI2c_disableProtocolInterruptFlag(Ifx_I2C *i2c)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   687  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   688      i2c->IMSC.B.I2C_P_INT = 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   689  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   690  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   691  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   692  IFX_INLINE void IfxI2c_disableProtocolInterruptSource(Ifx_I2C *i2c, IfxI2c_ProtocolInterruptSource source)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   693  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   694      i2c->PIRQSM.U &= ~(1 << source);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   695  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   696  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   697  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   698  IFX_INLINE void IfxI2c_disableSingleRequestInterruptSource(Ifx_I2C *i2c)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   699  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   700      i2c->IMSC.B.SREQ_INT = 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   701  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   702  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   703  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   704  IFX_INLINE void IfxI2c_enableBurstRequestInterruptSource(Ifx_I2C *i2c)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   705  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   706      i2c->IMSC.B.BREQ_INT = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   707  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   708  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   709  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   710  IFX_INLINE void IfxI2c_enableErrorInterruptFlag(Ifx_I2C *i2c)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   711  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   712      i2c->IMSC.B.I2C_ERR_INT = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   713  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   714  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   715  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   716  IFX_INLINE void IfxI2c_enableErrorInterruptSource(Ifx_I2C *i2c, IfxI2c_ErrorInterruptSource source)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   717  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   718      i2c->ERRIRQSM.U |= (1 << source);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   719  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   720  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   721  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   722  IFX_INLINE void IfxI2c_enableLastBurstRequestInterruptSource(Ifx_I2C *i2c)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   723  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   724      i2c->IMSC.B.LBREQ_INT = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   725  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   726  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   727  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   728  IFX_INLINE void IfxI2c_enableLastSingleRequestInterruptSource(Ifx_I2C *i2c)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   729  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   730      i2c->IMSC.B.LSREQ_INT = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   731  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   732  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   733  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   734  IFX_INLINE void IfxI2c_enableProtocolInterruptFlag(Ifx_I2C *i2c)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   735  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   736      i2c->IMSC.B.I2C_P_INT = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   737  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   738  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   739  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   740  IFX_INLINE void IfxI2c_enableProtocolInterruptSource(Ifx_I2C *i2c, IfxI2c_ProtocolInterruptSource source)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   741  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   742      i2c->PIRQSM.U |= (1 << source);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   743  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   744  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   745  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   746  IFX_INLINE void IfxI2c_enableSingleRequestInterruptSource(Ifx_I2C *i2c)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   747  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   748      i2c->IMSC.B.SREQ_INT = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   749  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   750  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   751  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   752  IFX_INLINE volatile Ifx_SRC_SRCR *IfxI2c_getBurstDataTransferSrcPointer(Ifx_I2C *i2c)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   753  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   754      if (i2c == &MODULE_I2C0)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   755      {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   756          return &MODULE_SRC.I2C.I2C[0].BREQ;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   757      }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   758      else
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   759      {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   760          return &MODULE_SRC.I2C.I2C[1].BREQ;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   761      }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   762  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   763  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   764  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   765  IFX_INLINE boolean IfxI2c_getBurstRequestInterruptSourceStatus(Ifx_I2C *i2c)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   766  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   767      return i2c->RIS.B.BREQ_INT;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   768  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   769  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   770  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   771  IFX_INLINE IfxI2c_BusStatus IfxI2c_getBusStatus(Ifx_I2C *i2c)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   772  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   773      return (IfxI2c_BusStatus)i2c->BUSSTAT.B.BS;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   774  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   775  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   776  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   777  IFX_INLINE boolean IfxI2c_getErrorInterruptFlagStatus(Ifx_I2C *i2c)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   778  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   779      return i2c->RIS.B.I2C_ERR_INT;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   780  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   781  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   782  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   783  IFX_INLINE boolean IfxI2c_getErrorInterruptSourceStatus(Ifx_I2C *i2c, IfxI2c_ErrorInterruptSource source)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   784  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   785      return (i2c->ERRIRQSS.U & (1 << source)) ? TRUE : FALSE;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   786  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   787  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   788  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   789  IFX_INLINE volatile Ifx_SRC_SRCR *IfxI2c_getErrorSrcPointer(Ifx_I2C *i2c)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   790  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   791      if (i2c == &MODULE_I2C0)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   792      {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   793          return &MODULE_SRC.I2C.I2C[0].ERR;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   794      }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   795      else
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   796      {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   797          return &MODULE_SRC.I2C.I2C[1].ERR;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   798      }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   799  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   800  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   801  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   802  IFX_INLINE volatile Ifx_SRC_SRCR *IfxI2c_getLastBurstDataTransferSrcPointer(Ifx_I2C *i2c)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   803  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   804      if (i2c == &MODULE_I2C0)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   805      {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   806          return &MODULE_SRC.I2C.I2C[0].LBREQ;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   807      }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   808      else
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   809      {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   810          return &MODULE_SRC.I2C.I2C[1].LBREQ;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   811      }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   812  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   813  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   814  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   815  IFX_INLINE boolean IfxI2c_getLastBurstRequestInterruptSourceStatus(Ifx_I2C *i2c)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   816  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   817      return i2c->RIS.B.LBREQ_INT;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   818  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   819  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   820  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   821  IFX_INLINE volatile Ifx_SRC_SRCR *IfxI2c_getLastSingleDataTransferSrcPointer(Ifx_I2C *i2c)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   822  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   823      if (i2c == &MODULE_I2C0)
	movh.a	a15,#61452
.L465:

; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   823      if (i2c == &MODULE_I2C0)      (inlined)
	jne.a	a4,a15,.L9
.L466:

; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   824      {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   825          return &MODULE_SRC.I2C.I2C[0].LSREQ;
	movh.a	a15,#61444
	lea	a15,[a15]@los(0xf003830c)
.L467:

; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   825          return &MODULE_SRC.I2C.I2C[0].LSREQ;      (inlined)
	j	.L10

; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   823      if (i2c == &MODULE_I2C0)      (inlined)
.L9:

; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   826      }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   827      else
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   828      {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   829          return &MODULE_SRC.I2C.I2C[1].LSREQ;
	movh.a	a15,#61444
	lea	a15,[a15]@los(0xf003835c)

; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   831  }      (inlined)
.L10:

; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	     1  /**
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	     2   * \file IfxSrc.h
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	     3   * \brief SRC  basic functionality
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	     4   * \ingroup IfxLld_Src
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	     5   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	     6   * \version iLLD_1_0_1_11_0
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	     7   * \copyright Copyright (c) 2019 Infineon Technologies AG. All rights reserved.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	     8   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	     9   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    10   *                                 IMPORTANT NOTICE
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    11   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    12   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    13   * Use of this file is subject to the terms of use agreed between (i) you or 
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    14   * the company in which ordinary course of business you are acting and (ii) 
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    15   * Infineon Technologies AG or its licensees. If and as long as no such 
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    16   * terms of use are agreed, use of this file is subject to following:
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    17  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    18  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    19   * Boost Software License - Version 1.0 - August 17th, 2003
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    20  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    21   * Permission is hereby granted, free of charge, to any person or 
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    22   * organization obtaining a copy of the software and accompanying 
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    23   * documentation covered by this license (the "Software") to use, reproduce,
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    24   * display, distribute, execute, and transmit the Software, and to prepare
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    25   * derivative works of the Software, and to permit third-parties to whom the 
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    26   * Software is furnished to do so, all subject to the following:
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    27  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    28   * The copyright notices in the Software and this entire statement, including
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    29   * the above license grant, this restriction and the following disclaimer, must
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    30   * be included in all copies of the Software, in whole or in part, and all
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    31   * derivative works of the Software, unless such copies or derivative works are
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    32   * solely in the form of machine-executable object code generated by a source
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    33   * language processor.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    34  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    35   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR 
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    36   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    37   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    38   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE 
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    39   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    40   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    41   * DEALINGS IN THE SOFTWARE.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    42  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    43   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    44   * \defgroup IfxLld_Src SRC
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    45   * \addtogroup IfxLld_Src
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    46   * \{
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    47   * \defgroup IfxLld_Src_Usage How to use Service Request Mechanism?
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    48   * \addtogroup IfxLld_Src_Usage
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    49   * \{
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    50   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    51   * For Aurix controller peripherals that can generate service requests is connected to one
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    52   * or more Service Request Nodes (SRNs) in the central Interrupt Router(IR) module. Refer to Controller User Manual for more details\n
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    53   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    54   * IfxSrc driver provides the APIs to configure and control service requests. Refer \ref IfxLld_Src_Usage for
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    55   * details of these APIs.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    56   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    57   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    58   * \section Ifx_Src_UsageInit Initialize the Service Request Node
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    59   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    60   * Service request node is initialized to configure the following,\n
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    61   * 1) Route the interrupt trigger to service provider, which are:\n
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    62   *  __a. One of the available CPUs or\n
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    63   *  __b. DMA controller\n
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    64   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    65   * 2) Priority of CPU Interrupt or DMA Trigger.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    66   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    67   * For Interrupt or DMA to be correctly triggered, following steps are to be done in the user code:
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    68   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    69   * \subsection Ifx_Src_UsageInitStep1 Step1: Configure the Node
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    70   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    71   * User must configure the service request node in the application / driver files.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    72   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    73   * \subsection Ifx_Src_UsageInitStep2 Step2: Enable the Trigger
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    74   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    75   * Enable the service request node to connect the trigger event from the hardware to service provider.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    76   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    77   * Example:
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    78   * Following example show the configuration for STM0 Service request 0 trigger configured to trigger
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    79   * CPU1 with the priority specified by IFX_INTPRIO_STM0 (from the example at IfxCpu_Irq)
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    80   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    81   * \code
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    82   * //file: myApplication.c
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    83   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    84   * #include "Ifx_IntPrioDef.h" // to get the priority numbers
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    85   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    86   * void myDriverInitFunction(void)
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    87   * {
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    88   *    // driver init code
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    89   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    90   *    // Step1: Call the function to route the trigger from for SRC_STM0_SR0 to CPU1
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    91   *    // and priority specified at Ifx_IntPrioDef.h globally
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    92   *  IfxSrc_init(&MODULE_SRC.STM.STM[0].SR0, IfxSrc_Tos_cpu1, IFX_INTPRIO_STM0);
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    93   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    94   *    // Step2: Enable the service request node
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    95   *  IfxSrc_init(&MODULE_SRC.STM.STM[0].SR0);
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    96   * }
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    97   * \endcode
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    98   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    99   * \}
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   100   * \}
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   101   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   102   * \defgroup IfxLld_Src_Std_Service_Request Service Request Functions
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   103   * \ingroup IfxLld_Src_Std
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   104   * \defgroup IfxLld_Src_Std_Module Module Functions
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   105   * \ingroup IfxLld_Src_Std
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   106   */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   107  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   108  #ifndef IFXSRC_H
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   109  #define IFXSRC_H 1
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   110  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   111  /******************************************************************************/
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   112  /*----------------------------------Includes----------------------------------*/
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   113  /******************************************************************************/
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   114  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   115  #include "_Impl/IfxSrc_cfg.h"
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   116  #include "Cpu/Std/IfxCpu_Intrinsics.h"
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   117  #include "IfxSrc_reg.h"
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   118  /** \addtogroup IfxLld_Src_Std_Service_Request
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   119   * \{ */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   120  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   121  /******************************************************************************/
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   122  /*-------------------------Inline Function Prototypes-------------------------*/
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   123  /******************************************************************************/
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   124  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   125  /** \brief Resets the overrun flag of the Service Request.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   126   * \param src pointer to the Service Request Control register which the overrun flag should be cleared.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   127   * \return None
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   128   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   129   * Usage example: see \ref IfxSrc_init
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   130   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   131   */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   132  IFX_INLINE void IfxSrc_clearOverrun(volatile Ifx_SRC_SRCR *src);
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   133  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   134  /** \brief Resets a specific interrupt service by software.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   135   * \param src pointer to the Service Request Control register which the request should be cleared.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   136   * \return None
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   137   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   138   * Usage example: see \ref IfxSrc_init
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   139   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   140   */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   141  IFX_INLINE void IfxSrc_clearRequest(volatile Ifx_SRC_SRCR *src);
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   142  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   143  /** \brief Gets the current overrun status.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   144   * \param src pointer to the Service Request Control register for which the overrun status should be returned.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   145   * \return current service request control overrun status.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   146   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   147   * Usage example: see \ref IfxSrc_init
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   148   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   149   */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   150  IFX_INLINE boolean IfxSrc_isOverrun(volatile Ifx_SRC_SRCR *src);
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   151  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   152  /** \brief Gets the current request status.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   153   * \param src pointer to the Service Request Control register for which the request status should be returned.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   154   * \return current service request control request status.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   155   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   156   * Usage example: see \ref IfxSrc_init
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   157   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   158   */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   159  IFX_INLINE boolean IfxSrc_isRequested(volatile Ifx_SRC_SRCR *src);
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   160  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   161  /** \brief Requests a specific interrupt service by software
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   162   * \param src pointer to the Service Request Control register which the interrupt has to be requested.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   163   * \return None
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   164   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   165   * Usage example: see \ref IfxSrc_init
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   166   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   167   */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   168  IFX_INLINE void IfxSrc_setRequest(volatile Ifx_SRC_SRCR *src);
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   169  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   170  /** \} */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   171  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   172  /** \addtogroup IfxLld_Src_Std_Module
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   173   * \{ */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   174  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   175  /******************************************************************************/
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   176  /*-------------------------Inline Function Prototypes-------------------------*/
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   177  /******************************************************************************/
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   178  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   179  /** \brief DeInitializes the service request control register.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   180   * \param src pointer to the Service Request Control register which should be deinitialised.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   181   * \return None
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   182   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   183   * Usage example: see \ref IfxSrc_init
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   184   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   185   */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   186  IFX_INLINE void IfxSrc_deinit(volatile Ifx_SRC_SRCR *src);
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   187  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   188  /** \brief Disables a specific interrupt service request.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   189   * \param src pointer to the Service Request Control register for which the interrupt has to be disabled.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   190   * \return None
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   191   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   192   * Usage example: see \ref IfxSrc_init
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   193   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   194   */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   195  IFX_INLINE void IfxSrc_disable(volatile Ifx_SRC_SRCR *src);
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   196  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   197  /** \brief Enables a specific interrupt service request.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   198   * \param src pointer to the Service Request Control register for which the interrupt has to be enabled.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   199   * \return None
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   200   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   201   * Usage example: see \ref IfxSrc_init
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   202   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   203   */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   204  IFX_INLINE void IfxSrc_enable(volatile Ifx_SRC_SRCR *src);
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   205  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   206  /** \brief Initializes the service request control register.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   207   * \param src pointer to the Service Request Control register which should be initialised.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   208   * \param typOfService type of interrupt service provider.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   209   * \param priority Interrupt priority.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   210   * \return None
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   211   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   212   * Get the peripheral service control register which request need to be serviced and assign this service to any of service providers.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   213   * \code
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   214   * //define the interrupt priority
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   215   * #define IFXASCLIN0_TX_INTPRIO 2
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   216   * //get the service request
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   217   * volatile Ifx_SRC_SRCR *src = IfxAsclin_getSrcPointerRx( &MODULE_ASCLIN0 );
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   218   * //initlaise the service request
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   219   * IfxSrc_init( src, IfxSrc_Tos_cpu0, IFXASCLIN0_TX_INTPRIO );
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   220   * // enable the service
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   221   * IfxSrc_enable( src );
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   222   * //check for service request flags and clear if they occur
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   223   * if ( IfxSrc_isRequested( src ) == TRUE )
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   224   * {
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   225   *    IfxSrc_clearRequest( src );
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   226   * }
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   227   * if ( IfxSrc_isOverrun( src ) == TRUE )
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   228   * {
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   229   *      IfxSrc_clearOverrun( src );
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   230   * }
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   231   * // Atlast deinitialise the service control
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   232   * IfxSrc_deinit( src );
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   233   * \endcode
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   234   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   235   */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   236  IFX_INLINE void IfxSrc_init(volatile Ifx_SRC_SRCR *src, IfxSrc_Tos typOfService, Ifx_Priority priority);
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   237  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   238  /** \} */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   239  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   240  /******************************************************************************/
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   241  /*---------------------Inline Function Implementations------------------------*/
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   242  /******************************************************************************/
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   243  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   244  IFX_INLINE void IfxSrc_clearOverrun(volatile Ifx_SRC_SRCR *src)
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   245  {
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   246      src->B.IOVCLR = 1;
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   247  }
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   248  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   249  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   250  IFX_INLINE void IfxSrc_clearRequest(volatile Ifx_SRC_SRCR *src)
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   251  {
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   252      src->B.CLRR = 1;
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   253  }
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   254  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   255  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   256  IFX_INLINE void IfxSrc_deinit(volatile Ifx_SRC_SRCR *src)
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   257  {
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   258      src->U = 0;
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   259  }
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   260  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   261  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   262  IFX_INLINE void IfxSrc_disable(volatile Ifx_SRC_SRCR *src)
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   263  {
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   264      src->B.SRE = 0;
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   265  }
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   266  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   267  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   268  IFX_INLINE void IfxSrc_enable(volatile Ifx_SRC_SRCR *src)
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   269  {
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   270      src->B.SRE = 1;
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   271  }
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   272  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   273  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   274  IFX_INLINE void IfxSrc_init(volatile Ifx_SRC_SRCR *src, IfxSrc_Tos typOfService, Ifx_Priority priority)
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   275  {
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   276      src->B.SRPN = priority;
	fcall	.cocofun_1
.L254:

; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.c	   118  cuWdt_clearCpuEndinit(pwd);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.c	   119      i2c->CLC.B.DISR = 0U;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.c	   120  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.c	   121      while (i2c->CLC.B.DISS == 1U)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.c	   122      {}
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.c	   123  
	ret
.L246:
	
__IfxI2c_enableLastSingleDataTransferInterrupt_function_end:
	.size	IfxI2c_enableLastSingleDataTransferInterrupt,__IfxI2c_enableLastSingleDataTransferInterrupt_function_end-IfxI2c_enableLastSingleDataTransferInterrupt
.L108:
	; End of function
	
	.sdecl	'.text.IfxI2c.IfxI2c_enableModule',code,cluster('IfxI2c_enableModule')
	.sect	'.text.IfxI2c.IfxI2c_enableModule'
	.align	2
	
	.global	IfxI2c_enableModule

; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.c	   124      i2c->CLC1.B.RMC = 1U;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.c	   125  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.c	   126      while (i2c->CLC1.B.RMC != 1U)
; Function IfxI2c_enableModule
.L54:
IfxI2c_enableModule:	.type	func
	mov.aa	a15,a4
.L371:

; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.c	   127      {}
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.c	   128  
	call	IfxScuWdt_getCpuWatchdogPassword
.L370:
	mov	d8,d2
.L373:

; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.c	   129      i2c->CLC1.B.DISR = 0U;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.c	   130  
	mov	d4,d8
	call	IfxScuWdt_clearCpuEndinit
.L372:

; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.c	   131      while (i2c->CLC1.B.DISS == 1U)
	fcall	.cocofun_5
.L374:
	ld.bu	d15,[+a3]0
.L472:
	insert	d15,d15,#0,#0,#1
	fcall	.cocofun_5
	st.b	[+a3]0,d15
.L473:

; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.c	   132      {}
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.c	   133  
	fcall	.cocofun_5
	mov.aa	a2,a3
.L11:
	ld.bu	d15,[a2]
.L474:
	jnz.t	d15:1,.L11
.L475:

; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.c	   134      // disable all interrupts
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.c	   135      i2c->ERRIRQSM.U = 0x00;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.c	   136      i2c->PIRQSM.U   = 0x00;
	mov	d15,#1
	st.b	[a15]1,d15

; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.c	   137      i2c->IMSC.U     = 0x00;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.c	   138  
.L12:
	ld.bu	d15,[a15]1
.L476:
	jne	d15,#1,.L12
.L477:

; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.c	   139      IfxScuWdt_setCpuEndinit(pwd);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.c	   140  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.c	   141  
	ld.bu	d15,[a15]
.L478:
	insert	d15,d15,#0,#0,#1
	st.b	[a15],d15

; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.c	   142  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.c	   143  void IfxI2c_enableProtocolInterrupt(void *i2c, IfxSrc_Tos typeOfService, uint16 priority)
.L13:
	ld.bu	d15,[a15]
.L479:
	jnz.t	d15:1,.L13
.L480:

; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.c	   144  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.c	   145      volatile Ifx_SRC_SRCR *src;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.c	   146      src = IfxI2c_getProtocolSrcPointer(i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.c	   147      IfxSrc_init(src, typeOfService, priority);
	mov	d15,#0
	st.w	[a15]96,d15
.L481:

; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.c	   148      IfxSrc_enable(src);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.c	   149  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.c	   150  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.c	   151  
	mov	d4,d8
.L375:
	st.w	[a15]112,d15
.L482:
	st.w	[a15]132,d15
.L483:
	j	IfxScuWdt_setCpuEndinit
.L258:
	
__IfxI2c_enableModule_function_end:
	.size	IfxI2c_enableModule,__IfxI2c_enableModule_function_end-IfxI2c_enableModule
.L113:
	; End of function
	
	.sdecl	'.text.IfxI2c.IfxI2c_enableProtocolInterrupt',code,cluster('IfxI2c_enableProtocolInterrupt')
	.sect	'.text.IfxI2c.IfxI2c_enableProtocolInterrupt'
	.align	2
	
	.global	IfxI2c_enableProtocolInterrupt

; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.c	   152  void IfxI2c_enableSingleDataTransferInterrupt(Ifx_I2C *i2c, IfxSrc_Tos typeOfService, uint16 priority)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.c	   153  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.c	   154      volatile Ifx_SRC_SRCR *src;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.c	   155      src = IfxI2c_getSingleDataTransferSrcPointer(i2c);
; Function IfxI2c_enableProtocolInterrupt
.L56:
IfxI2c_enableProtocolInterrupt:	.type	func

; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	     1  /**
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	     2   * \file IfxI2c.h
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	     3   * \brief I2C  basic functionality
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	     4   * \ingroup IfxLld_I2c
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	     5   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	     6   * \version iLLD_1_0_1_11_0
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	     7   * \copyright Copyright (c) 2018 Infineon Technologies AG. All rights reserved.
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	     8   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	     9   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    10   *                                 IMPORTANT NOTICE
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    11   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    12   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    13   * Use of this file is subject to the terms of use agreed between (i) you or 
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    14   * the company in which ordinary course of business you are acting and (ii) 
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    15   * Infineon Technologies AG or its licensees. If and as long as no such 
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    16   * terms of use are agreed, use of this file is subject to following:
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    17  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    18  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    19   * Boost Software License - Version 1.0 - August 17th, 2003
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    20  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    21   * Permission is hereby granted, free of charge, to any person or 
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    22   * organization obtaining a copy of the software and accompanying 
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    23   * documentation covered by this license (the "Software") to use, reproduce,
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    24   * display, distribute, execute, and transmit the Software, and to prepare
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    25   * derivative works of the Software, and to permit third-parties to whom the 
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    26   * Software is furnished to do so, all subject to the following:
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    27  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    28   * The copyright notices in the Software and this entire statement, including
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    29   * the above license grant, this restriction and the following disclaimer, must
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    30   * be included in all copies of the Software, in whole or in part, and all
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    31   * derivative works of the Software, unless such copies or derivative works are
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    32   * solely in the form of machine-executable object code generated by a source
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    33   * language processor.
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    34  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    35   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR 
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    36   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    37   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    38   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE 
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    39   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    40   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    41   * DEALINGS IN THE SOFTWARE.
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    42  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    43   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    44   * \defgroup IfxLld_I2c_Std_enums Enumerations
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    45   * \ingroup IfxLld_I2c_Std
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    46   * \defgroup IfxLld_I2c_Std_functions Functions
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    47   * \ingroup IfxLld_I2c_Std
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    48   * \defgroup IfxLld_I2c_Std_structures Data Structures
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    49   * \ingroup IfxLld_I2c_Std
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    50   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    51  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    52  #ifndef IFXI2C_H
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    53  #define IFXI2C_H 1
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    54  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    55  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    56  /*----------------------------------Includes----------------------------------*/
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    57  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    58  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    59  #include "_Impl/IfxI2c_cfg.h"
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    60  #include "Scu/Std/IfxScuWdt.h"
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    61  #include "Scu/Std/IfxScuCcu.h"
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    62  #include "IfxI2c_bf.h"
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    63  #include "_PinMap/IfxI2c_PinMap.h"
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    64  #include "Src/Std/IfxSrc.h"
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    65  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    66  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    67  /*--------------------------------Enumerations--------------------------------*/
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    68  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    69  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    70  /** \addtogroup IfxLld_I2c_Std_enums
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    71   * \{ */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    72  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    73  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    74      IfxI2c_BusStatus_idle        = 0, /**< \brief idle */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    75      IfxI2c_BusStatus_started     = 1, /**< \brief started */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    76      IfxI2c_BusStatus_busyMaster  = 2, /**< \brief busy Master */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    77      IfxI2c_BusStatus_remoteSlave = 3  /**< \brief remote Slave */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    78  } IfxI2c_BusStatus;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    79  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    80  /** \brief enable error interrupt request source
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    81   * Definition in Ifx.I2C.ERRIRQSM.U
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    82   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    83  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    84  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    85      IfxI2c_ErrorInterruptSource_rxFifoUnderflow = IFX_I2C_ERRIRQSM_RXF_UFL_OFF,  /**< \brief receive fifo underflow service request */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    86      IfxI2c_ErrorInterruptSource_rxFifoOverflow  = IFX_I2C_ERRIRQSM_RXF_OFL_OFF,  /**< \brief receive fifo overflow service request */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    87      IfxI2c_ErrorInterruptSource_txFifoUnderflow = IFX_I2C_ERRIRQSM_TXF_UFL_OFF,  /**< \brief transmit fifo underflow service request */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    88      IfxI2c_ErrorInterruptSource_txFifoOverflow  = IFX_I2C_ERRIRQSM_TXF_OFL_OFF   /**< \brief transmit fifo overflow service request */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    89  } IfxI2c_ErrorInterruptSource;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    90  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    91  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    92  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    93      IfxI2c_PinSelect_a = 0,
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    94      IfxI2c_PinSelect_b = 1,
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    95      IfxI2c_PinSelect_c = 2,
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    96      IfxI2c_PinSelect_d = 3,
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    97      IfxI2c_PinSelect_e = 4,
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    98      IfxI2c_PinSelect_f = 5,
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    99      IfxI2c_PinSelect_g = 6,
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   100      IfxI2c_PinSelect_h = 7
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   101  } IfxI2c_PinSelect;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   102  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   103  /** \brief enable protocol interrupt source
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   104   * Definition in Ifx.I2C.PIRQSM.U
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   105   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   106  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   107  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   108      IfxI2c_ProtocolInterruptSource_addressMatch           = IFX_I2C_PIRQSM_AM_OFF,     /**< \brief address match service request */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   109      IfxI2c_ProtocolInterruptSource_generalCall            = IFX_I2C_PIRQSM_GC_OFF,     /**< \brief general call service request */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   110      IfxI2c_ProtocolInterruptSource_masterCode             = IFX_I2C_PIRQSM_MC_OFF,     /**< \brief master code service request */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   111      IfxI2c_ProtocolInterruptSource_arbitrationLost        = IFX_I2C_PIRQSM_AL_OFF,     /**< \brief arbitration lost service request */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   112      IfxI2c_ProtocolInterruptSource_notAcknowledgeReceived = IFX_I2C_PIRQSM_NACK_OFF,   /**< \brief not acknowledge received service request */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   113      IfxI2c_ProtocolInterruptSource_transmissionEnd        = IFX_I2C_PIRQSM_TX_END_OFF, /**< \brief transmission end service request */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   114      IfxI2c_ProtocolInterruptSource_receiveMode            = IFX_I2C_PIRQSM_RX_OFF      /**< \brief receive mode service request */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   115  } IfxI2c_ProtocolInterruptSource;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   116  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   117  /** \brief Enable/disable the sensitivity of the module to sleep signal\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   118   * Definition in Ifx_I2C.CLC1.B.EDIS
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   119   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   120  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   121  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   122      IfxI2c_SleepMode_enable  = 0, /**< \brief enables sleep mode */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   123      IfxI2c_SleepMode_disable = 1  /**< \brief disables sleep mode */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   124  } IfxI2c_SleepMode;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   125  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   126  /** \} */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   127  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   128  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   129  /*-----------------------------Data Structures--------------------------------*/
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   130  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   131  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   132  /** \addtogroup IfxLld_I2c_Std_structures
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   133   * \{ */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   134  /** \brief Pin Structure
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   135   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   136  typedef struct
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   137  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   138      IfxI2c_Scl_InOut *scl;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   139      IfxI2c_Sda_InOut *sda;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   140      IfxPort_PadDriver padDriver;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   141  } IfxI2c_Pins;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   142  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   143  /** \} */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   144  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   145  /** \addtogroup IfxLld_I2c_Std_functions
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   146   * \{ */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   147  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   148  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   149  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   150  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   151  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   152  /** \brief Returns if the bus is free
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   153   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   154  IFX_INLINE boolean IfxI2c_busIsFree(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   155  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   156  /** \brief clears all DTR interrupt sources
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   157   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   158   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   159   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   160  IFX_INLINE void IfxI2c_clearAllDtrInterruptSources(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   161  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   162  /** \brief clears all Error Interrupt sources
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   163   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   164   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   165   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   166  IFX_INLINE void IfxI2c_clearAllErrorInterruptSources(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   167  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   168  /** \brief Clears all Protocol Interrupt sources
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   169   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   170   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   171   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   172  IFX_INLINE void IfxI2c_clearAllProtocolInterruptSources(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   173  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   174  /** \brief clears burst request interrupt source
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   175   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   176   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   177   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   178  IFX_INLINE void IfxI2c_clearBurstRequestInterruptSource(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   179  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   180  /** \brief clears the specified source of error interrupt
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   181   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   182   * \param source error interrupt source
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   183   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   184   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   185  IFX_INLINE void IfxI2c_clearErrorInterruptSource(Ifx_I2C *i2c, IfxI2c_ErrorInterruptSource source);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   186  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   187  /** \brief clears last burst request interrupt source
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   188   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   189   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   190   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   191  IFX_INLINE void IfxI2c_clearLastBurstRequestInterruptSource(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   192  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   193  /** \brief clears last single request interrupt source
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   194   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   195   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   196   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   197  IFX_INLINE void IfxI2c_clearLastSingleRequestInterruptSource(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   198  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   199  /** \brief clears the specified source of protocol interrupt
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   200   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   201   * \param source protocol interrupt source
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   202   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   203   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   204  IFX_INLINE void IfxI2c_clearProtocolInterruptSource(Ifx_I2C *i2c, IfxI2c_ProtocolInterruptSource source);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   205  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   206  /** \brief clears single request interrupt source
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   207   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   208   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   209   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   210  IFX_INLINE void IfxI2c_clearSingleRequestInterruptSource(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   211  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   212  /** \brief disables burst request interrupt source
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   213   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   214   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   215   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   216  IFX_INLINE void IfxI2c_disableBurstRequestInterruptSource(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   217  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   218  /** \brief disables the error interrupt flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   219   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   220   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   221   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   222  IFX_INLINE void IfxI2c_disableErrorInterruptFlag(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   223  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   224  /** \brief disables the specified source of error interrupt
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   225   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   226   * \param source error interrupt source
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   227   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   228   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   229  IFX_INLINE void IfxI2c_disableErrorInterruptSource(Ifx_I2C *i2c, IfxI2c_ErrorInterruptSource source);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   230  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   231  /** \brief disables last burst request interrupt source
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   232   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   233   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   234   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   235  IFX_INLINE void IfxI2c_disableLastBurstRequestInterruptSource(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   236  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   237  /** \brief disables last single request interrupt source
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   238   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   239   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   240   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   241  IFX_INLINE void IfxI2c_disableLastSingleRequestInterruptSource(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   242  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   243  /** \brief disables the Protocol interrupt flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   244   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   245   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   246   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   247  IFX_INLINE void IfxI2c_disableProtocolInterruptFlag(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   248  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   249  /** \brief disables the specified source of protocol interrupt
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   250   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   251   * \param source protocol interrupt source
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   252   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   253   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   254  IFX_INLINE void IfxI2c_disableProtocolInterruptSource(Ifx_I2C *i2c, IfxI2c_ProtocolInterruptSource source);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   255  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   256  /** \brief disables single request interrupt source
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   257   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   258   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   259   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   260  IFX_INLINE void IfxI2c_disableSingleRequestInterruptSource(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   261  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   262  /** \brief enables burst request interrupt source
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   263   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   264   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   265   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   266  IFX_INLINE void IfxI2c_enableBurstRequestInterruptSource(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   267  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   268  /** \brief enables the error interrupt flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   269   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   270   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   271   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   272  IFX_INLINE void IfxI2c_enableErrorInterruptFlag(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   273  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   274  /** \brief enables the specified source of error interrupt
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   275   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   276   * \param source error interrupt source
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   277   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   278   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   279  IFX_INLINE void IfxI2c_enableErrorInterruptSource(Ifx_I2C *i2c, IfxI2c_ErrorInterruptSource source);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   280  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   281  /** \brief enables last burst request interrupt source
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   282   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   283   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   284   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   285  IFX_INLINE void IfxI2c_enableLastBurstRequestInterruptSource(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   286  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   287  /** \brief enables last single request interrupt source
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   288   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   289   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   290   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   291  IFX_INLINE void IfxI2c_enableLastSingleRequestInterruptSource(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   292  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   293  /** \brief enables the protocol interrupt flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   294   * \param i2c pointer to I2C registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   295   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   296   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   297  IFX_INLINE void IfxI2c_enableProtocolInterruptFlag(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   298  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   299  /** \brief enables the specified source of protocol interrupt
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   300   * \param i2c pointer to I2C registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   301   * \param source protocol interrupt source
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   302   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   303   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   304  IFX_INLINE void IfxI2c_enableProtocolInterruptSource(Ifx_I2C *i2c, IfxI2c_ProtocolInterruptSource source);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   305  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   306  /** \brief enables single request interrupt source
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   307   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   308   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   309   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   310  IFX_INLINE void IfxI2c_enableSingleRequestInterruptSource(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   311  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   312  /** \brief Returns the SRC pointer for I2C burst data transfer request interrupt
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   313   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   314   * \return SRC pointer for I2C burst data transfer Service interrupt
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   315   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   316  IFX_INLINE volatile Ifx_SRC_SRCR *IfxI2c_getBurstDataTransferSrcPointer(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   317  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   318  /** \brief returns the status of burst request interrupt source status
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   319   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   320   * \return status
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   321   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   322  IFX_INLINE boolean IfxI2c_getBurstRequestInterruptSourceStatus(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   323  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   324  /**
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   325   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   326   * \return BusStatus
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   327   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   328  IFX_INLINE IfxI2c_BusStatus IfxI2c_getBusStatus(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   329  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   330  /** \brief returns the current status of error interrupt flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   331   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   332   * \return status
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   333   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   334  IFX_INLINE boolean IfxI2c_getErrorInterruptFlagStatus(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   335  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   336  /** \brief returns the status of the error interrupt source
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   337   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   338   * \param source error interrupt source
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   339   * \return status
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   340   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   341  IFX_INLINE boolean IfxI2c_getErrorInterruptSourceStatus(Ifx_I2C *i2c, IfxI2c_ErrorInterruptSource source);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   342  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   343  /** \brief Returns the SRC pointer for I2C Error interrupt
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   344   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   345   * \return SRC pointer for I2C Error Service interrupt
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   346   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   347  IFX_INLINE volatile Ifx_SRC_SRCR *IfxI2c_getErrorSrcPointer(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   348  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   349  /** \brief Returns the SRC pointer for I2C last burst data transfer request interrupt
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   350   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   351   * \return SRC pointer for I2C last burst data transfer Service interrupt
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   352   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   353  IFX_INLINE volatile Ifx_SRC_SRCR *IfxI2c_getLastBurstDataTransferSrcPointer(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   354  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   355  /** \brief returns the status of last burst request interrupt source status
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   356   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   357   * \return status
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   358   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   359  IFX_INLINE boolean IfxI2c_getLastBurstRequestInterruptSourceStatus(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   360  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   361  /** \brief Returns the SRC pointer for I2C last single data transfer request interrupt
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   362   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   363   * \return SRC pointer for I2C last single data transfer Service interrupt
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   364   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   365  IFX_INLINE volatile Ifx_SRC_SRCR *IfxI2c_getLastSingleDataTransferSrcPointer(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   366  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   367  /** \brief returns the status of last single request interrupt source status
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   368   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   369   * \return status
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   370   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   371  IFX_INLINE boolean IfxI2c_getLastSingleRequestInterruptSourceStatus(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   372  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   373  /** \brief returns the current raw status of protocol interrupt
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   374   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   375   * \return status
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   376   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   377  IFX_INLINE boolean IfxI2c_getProtocolInterruptFlagStatus(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   378  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   379  /** \brief returns the status of  specified protocol interrupt source
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   380   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   381   * \param source protocol interrupt source
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   382   * \return status
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   383   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   384  IFX_INLINE boolean IfxI2c_getProtocolInterruptSourceStatus(Ifx_I2C *i2c, IfxI2c_ProtocolInterruptSource source);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   385  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   386  /** \brief Returns the SRC pointer for I2C Protocol interrupt
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   387   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   388   * \return SRC pointer for I2C Protocol Service interrupt
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   389   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   390  IFX_INLINE volatile Ifx_SRC_SRCR *IfxI2c_getProtocolSrcPointer(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   391  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   392  /** \brief Returns the SRC pointer for I2C single data transfer request interrupt
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   393   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   394   * \return SRC pointer for I2C single data transfer Service interrupt
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   395   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   396  IFX_INLINE volatile Ifx_SRC_SRCR *IfxI2c_getSingleDataTransferSrcPointer(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   397  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   398  /** \brief returns the status of single request interrupt source status
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   399   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   400   * \return status
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   401   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   402  IFX_INLINE boolean IfxI2c_getSingleRequestInterruptSourceStatus(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   403  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   404  /** \brief Returns if the Fifo is requesting new data
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   405   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   406  IFX_INLINE boolean IfxI2c_isFifoRequest(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   407  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   408  /**
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   409   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   410   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   411   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   412  IFX_INLINE void IfxI2c_run(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   413  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   414  /** \brief selects the pin
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   415   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   416   * \param pisel pin to be select
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   417   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   418   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   419  IFX_INLINE void IfxI2c_setPinSelection(Ifx_I2C *i2c, IfxI2c_PinSelect pisel);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   420  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   421  /** \brief Sets the number of bytes to be received
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   422   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   423   * \param size number of packets
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   424   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   425   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   426  IFX_INLINE void IfxI2c_setReceivePacketSize(Ifx_I2C *i2c, Ifx_SizeT size);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   427  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   428  /**
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   429   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   430   * \param address device address
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   431   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   432   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   433  IFX_INLINE void IfxI2c_setSlaveDeviceAddress(Ifx_I2C *i2c, uint16 address);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   434  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   435  /** \brief Sets the sensitivity of the module to sleep signal
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   436   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   437   * \param mode mode selection (enable / disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   438   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   439   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   440  IFX_INLINE void IfxI2c_setSleepMode(Ifx_I2C *i2c, IfxI2c_SleepMode mode);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   441  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   442  /** \brief Sets the number of bytes to be tansmitted
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   443   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   444   * \param size number of packets
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   445   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   446   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   447  IFX_INLINE void IfxI2c_setTransmitPacketSize(Ifx_I2C *i2c, Ifx_SizeT size);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   448  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   449  /**
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   450   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   451   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   452   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   453  IFX_INLINE void IfxI2c_stop(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   454  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   455  /**
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   456   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   457   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   458   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   459  IFX_INLINE void IfxI2c_waitBusFree(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   460  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   461  /** \brief Writes a packet (4 bytes) into the Fifo
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   462   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   463   * \param packet specifies the byte to be transfer
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   464   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   465   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   466  IFX_INLINE void IfxI2c_writeFifo(Ifx_I2C *i2c, uint32 packet);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   467  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   468  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   469  /*-------------------------Global Function Prototypes-------------------------*/
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   470  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   471  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   472  /** \brief Configures the Module as Master
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   473   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   474   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   475   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   476  IFX_EXTERN void IfxI2c_configureAsMaster(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   477  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   478  /** \brief Disables the I2c Module
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   479   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   480   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   481   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   482  IFX_EXTERN void IfxI2c_disableModule(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   483  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   484  /** \brief Enables the Burst data transfer interrupt
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   485   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   486   * \param typeOfService Type of Service (Cpu or DMA)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   487   * \param priority priority of the interrupt
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   488   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   489   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   490  IFX_EXTERN void IfxI2c_enableBurstDataTransferInterrupt(Ifx_I2C *i2c, IfxSrc_Tos typeOfService, uint16 priority);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   491  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   492  /** \brief Enables the Error interrupt
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   493   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   494   * \param typeOfService Type of Service (Cpu or DMA)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   495   * \param priority priority of the interrupt
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   496   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   497   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   498  IFX_EXTERN void IfxI2c_enableErrorInterrupt(Ifx_I2C *i2c, IfxSrc_Tos typeOfService, uint16 priority);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   499  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   500  /** \brief enables the last burst data transfer interrupt
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   501   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   502   * \param typeOfService Type of Service (Cpu or DMA)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   503   * \param priority priority of the interrupt
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   504   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   505   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   506  IFX_EXTERN void IfxI2c_enableLastBurstDataTransferInterrupt(Ifx_I2C *i2c, IfxSrc_Tos typeOfService, uint16 priority);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   507  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   508  /** \brief enables the last single data transfer interrupt
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   509   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   510   * \param typeOfService Type of Service (Cpu or DMA)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   511   * \param priority priority of the interrupt
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   512   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   513   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   514  IFX_EXTERN void IfxI2c_enableLastSingleDataTransferInterrupt(Ifx_I2C *i2c, IfxSrc_Tos typeOfService, uint16 priority);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   515  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   516  /** \brief Enables the I2c Module
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   517   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   518   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   519   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   520  IFX_EXTERN void IfxI2c_enableModule(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   521  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   522  /** \brief Enables the protocol interrupt
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   523   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   524   * \param typeOfService Type of Service (Cpu or DMA)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   525   * \param priority Priority of the interrupt
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   526   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   527   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   528  IFX_EXTERN void IfxI2c_enableProtocolInterrupt(void *i2c, IfxSrc_Tos typeOfService, uint16 priority);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   529  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   530  /** \brief enables the single data transfer interrupt
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   531   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   532   * \param typeOfService Type of Service (Cpu or DMA)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   533   * \param priority priority of the interrupt
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   534   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   535   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   536  IFX_EXTERN void IfxI2c_enableSingleDataTransferInterrupt(Ifx_I2C *i2c, IfxSrc_Tos typeOfService, uint16 priority);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   537  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   538  /**
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   539   * \param i2c Resource index of the I2c
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   540   * \return I2C module register address
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   541   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   542  IFX_EXTERN Ifx_I2C *IfxI2c_getAddress(IfxI2c_Index i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   543  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   544  /** \brief Returns the real Baudrate
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   545   * \return Baudrate
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   546   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   547  IFX_EXTERN float32 IfxI2c_getBaudrate(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   548  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   549  /** \brief API to get the resource index of the I2C specified.
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   550   * \param i2c Pointer to the I2C HW module (register memory map)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   551   * \return Resource index of the I2C
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   552   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   553  IFX_EXTERN IfxI2c_Index IfxI2c_getIndex(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   554  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   555  /**
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   556   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   557   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   558  IFX_EXTERN void IfxI2c_initSclSdaPin(const IfxI2c_Scl_InOut *scl, const IfxI2c_Sda_InOut *sda, IfxPort_PadDriver padDriver);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   559  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   560  /** \brief Releases the bus, i.e puts a stop condition on the bus
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   561   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   562   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   563  IFX_EXTERN void IfxI2c_releaseBus(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   564  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   565  /**
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   566   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   567   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   568  IFX_EXTERN void IfxI2c_resetFifo(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   569  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   570  /** \brief resets the I2c kernel
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   571   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   572   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   573   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   574  IFX_EXTERN void IfxI2c_resetModule(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   575  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   576  /** \brief Calculates the desired baudrate
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   577   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   578   * \param baudrate specifies the baud rate
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   579   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   580   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   581  IFX_EXTERN void IfxI2c_setBaudrate(Ifx_I2C *i2c, float32 baudrate);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   582  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   583  /** \} */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   584  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   585  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   586  /*---------------------Inline Function Implementations------------------------*/
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   587  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   588  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   589  IFX_INLINE boolean IfxI2c_busIsFree(Ifx_I2C *i2c)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   590  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   591      boolean free = FALSE;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   592  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   593      if (i2c->BUSSTAT.B.BS == IfxI2c_BusStatus_idle)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   594      {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   595          free = TRUE;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   596      }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   597  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   598      return free;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   599  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   600  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   601  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   602  IFX_INLINE void IfxI2c_clearAllDtrInterruptSources(Ifx_I2C *i2c)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   603  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   604      i2c->ICR.U = (1 << IFX_I2C_ICR_LSREQ_INT_OFF) | (1 << IFX_I2C_ICR_SREQ_INT_OFF) | (1 << IFX_I2C_ICR_LBREQ_INT_OFF) | (1 << IFX_I2C_ICR_BREQ_INT_OFF);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   605  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   606  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   607  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   608  IFX_INLINE void IfxI2c_clearAllErrorInterruptSources(Ifx_I2C *i2c)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   609  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   610      i2c->ERRIRQSC.U = (1 << IFX_I2C_ERRIRQSC_RXF_UFL_OFF) | (1 << IFX_I2C_ERRIRQSC_RXF_OFL_OFF) | (1 << IFX_I2C_ERRIRQSC_TXF_UFL_OFF) | (1 << IFX_I2C_ERRIRQSC_TXF_OFL_OFF);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   611  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   612  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   613  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   614  IFX_INLINE void IfxI2c_clearAllProtocolInterruptSources(Ifx_I2C *i2c)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   615  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   616      i2c->PIRQSC.U = (1 << IFX_I2C_PIRQSC_AM_OFF) | (1 << IFX_I2C_PIRQSC_GC_OFF) | (1 << IFX_I2C_PIRQSC_MC_OFF) | (1 << IFX_I2C_PIRQSC_AL_OFF) | (1 << IFX_I2C_PIRQSC_NACK_OFF) | (1 << IFX_I2C_PIRQSC_TX_END_OFF) | (1 << IFX_I2C_PIRQSC_RX_OFF);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   617  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   618  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   619  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   620  IFX_INLINE void IfxI2c_clearBurstRequestInterruptSource(Ifx_I2C *i2c)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   621  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   622      i2c->ICR.B.BREQ_INT = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   623  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   624  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   625  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   626  IFX_INLINE void IfxI2c_clearErrorInterruptSource(Ifx_I2C *i2c, IfxI2c_ErrorInterruptSource source)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   627  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   628      i2c->ERRIRQSC.U = (1 << source);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   629  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   630  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   631  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   632  IFX_INLINE void IfxI2c_clearLastBurstRequestInterruptSource(Ifx_I2C *i2c)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   633  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   634      i2c->ICR.B.LBREQ_INT = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   635  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   636  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   637  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   638  IFX_INLINE void IfxI2c_clearLastSingleRequestInterruptSource(Ifx_I2C *i2c)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   639  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   640      i2c->ICR.B.LSREQ_INT = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   641  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   642  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   643  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   644  IFX_INLINE void IfxI2c_clearProtocolInterruptSource(Ifx_I2C *i2c, IfxI2c_ProtocolInterruptSource source)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   645  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   646      i2c->PIRQSC.U = (1 << source);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   647  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   648  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   649  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   650  IFX_INLINE void IfxI2c_clearSingleRequestInterruptSource(Ifx_I2C *i2c)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   651  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   652      i2c->ICR.B.SREQ_INT = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   653  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   654  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   655  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   656  IFX_INLINE void IfxI2c_disableBurstRequestInterruptSource(Ifx_I2C *i2c)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   657  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   658      i2c->IMSC.B.BREQ_INT = 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   659  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   660  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   661  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   662  IFX_INLINE void IfxI2c_disableErrorInterruptFlag(Ifx_I2C *i2c)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   663  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   664      i2c->IMSC.B.I2C_ERR_INT = 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   665  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   666  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   667  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   668  IFX_INLINE void IfxI2c_disableErrorInterruptSource(Ifx_I2C *i2c, IfxI2c_ErrorInterruptSource source)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   669  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   670      i2c->ERRIRQSM.U &= ~(1 << source);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   671  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   672  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   673  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   674  IFX_INLINE void IfxI2c_disableLastBurstRequestInterruptSource(Ifx_I2C *i2c)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   675  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   676      i2c->IMSC.B.LBREQ_INT = 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   677  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   678  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   679  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   680  IFX_INLINE void IfxI2c_disableLastSingleRequestInterruptSource(Ifx_I2C *i2c)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   681  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   682      i2c->IMSC.B.LSREQ_INT = 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   683  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   684  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   685  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   686  IFX_INLINE void IfxI2c_disableProtocolInterruptFlag(Ifx_I2C *i2c)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   687  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   688      i2c->IMSC.B.I2C_P_INT = 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   689  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   690  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   691  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   692  IFX_INLINE void IfxI2c_disableProtocolInterruptSource(Ifx_I2C *i2c, IfxI2c_ProtocolInterruptSource source)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   693  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   694      i2c->PIRQSM.U &= ~(1 << source);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   695  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   696  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   697  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   698  IFX_INLINE void IfxI2c_disableSingleRequestInterruptSource(Ifx_I2C *i2c)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   699  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   700      i2c->IMSC.B.SREQ_INT = 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   701  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   702  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   703  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   704  IFX_INLINE void IfxI2c_enableBurstRequestInterruptSource(Ifx_I2C *i2c)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   705  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   706      i2c->IMSC.B.BREQ_INT = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   707  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   708  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   709  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   710  IFX_INLINE void IfxI2c_enableErrorInterruptFlag(Ifx_I2C *i2c)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   711  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   712      i2c->IMSC.B.I2C_ERR_INT = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   713  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   714  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   715  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   716  IFX_INLINE void IfxI2c_enableErrorInterruptSource(Ifx_I2C *i2c, IfxI2c_ErrorInterruptSource source)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   717  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   718      i2c->ERRIRQSM.U |= (1 << source);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   719  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   720  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   721  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   722  IFX_INLINE void IfxI2c_enableLastBurstRequestInterruptSource(Ifx_I2C *i2c)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   723  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   724      i2c->IMSC.B.LBREQ_INT = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   725  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   726  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   727  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   728  IFX_INLINE void IfxI2c_enableLastSingleRequestInterruptSource(Ifx_I2C *i2c)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   729  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   730      i2c->IMSC.B.LSREQ_INT = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   731  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   732  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   733  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   734  IFX_INLINE void IfxI2c_enableProtocolInterruptFlag(Ifx_I2C *i2c)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   735  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   736      i2c->IMSC.B.I2C_P_INT = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   737  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   738  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   739  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   740  IFX_INLINE void IfxI2c_enableProtocolInterruptSource(Ifx_I2C *i2c, IfxI2c_ProtocolInterruptSource source)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   741  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   742      i2c->PIRQSM.U |= (1 << source);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   743  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   744  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   745  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   746  IFX_INLINE void IfxI2c_enableSingleRequestInterruptSource(Ifx_I2C *i2c)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   747  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   748      i2c->IMSC.B.SREQ_INT = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   749  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   750  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   751  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   752  IFX_INLINE volatile Ifx_SRC_SRCR *IfxI2c_getBurstDataTransferSrcPointer(Ifx_I2C *i2c)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   753  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   754      if (i2c == &MODULE_I2C0)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   755      {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   756          return &MODULE_SRC.I2C.I2C[0].BREQ;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   757      }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   758      else
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   759      {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   760          return &MODULE_SRC.I2C.I2C[1].BREQ;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   761      }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   762  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   763  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   764  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   765  IFX_INLINE boolean IfxI2c_getBurstRequestInterruptSourceStatus(Ifx_I2C *i2c)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   766  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   767      return i2c->RIS.B.BREQ_INT;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   768  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   769  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   770  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   771  IFX_INLINE IfxI2c_BusStatus IfxI2c_getBusStatus(Ifx_I2C *i2c)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   772  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   773      return (IfxI2c_BusStatus)i2c->BUSSTAT.B.BS;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   774  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   775  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   776  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   777  IFX_INLINE boolean IfxI2c_getErrorInterruptFlagStatus(Ifx_I2C *i2c)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   778  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   779      return i2c->RIS.B.I2C_ERR_INT;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   780  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   781  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   782  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   783  IFX_INLINE boolean IfxI2c_getErrorInterruptSourceStatus(Ifx_I2C *i2c, IfxI2c_ErrorInterruptSource source)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   784  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   785      return (i2c->ERRIRQSS.U & (1 << source)) ? TRUE : FALSE;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   786  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   787  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   788  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   789  IFX_INLINE volatile Ifx_SRC_SRCR *IfxI2c_getErrorSrcPointer(Ifx_I2C *i2c)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   790  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   791      if (i2c == &MODULE_I2C0)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   792      {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   793          return &MODULE_SRC.I2C.I2C[0].ERR;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   794      }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   795      else
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   796      {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   797          return &MODULE_SRC.I2C.I2C[1].ERR;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   798      }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   799  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   800  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   801  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   802  IFX_INLINE volatile Ifx_SRC_SRCR *IfxI2c_getLastBurstDataTransferSrcPointer(Ifx_I2C *i2c)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   803  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   804      if (i2c == &MODULE_I2C0)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   805      {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   806          return &MODULE_SRC.I2C.I2C[0].LBREQ;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   807      }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   808      else
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   809      {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   810          return &MODULE_SRC.I2C.I2C[1].LBREQ;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   811      }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   812  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   813  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   814  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   815  IFX_INLINE boolean IfxI2c_getLastBurstRequestInterruptSourceStatus(Ifx_I2C *i2c)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   816  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   817      return i2c->RIS.B.LBREQ_INT;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   818  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   819  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   820  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   821  IFX_INLINE volatile Ifx_SRC_SRCR *IfxI2c_getLastSingleDataTransferSrcPointer(Ifx_I2C *i2c)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   822  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   823      if (i2c == &MODULE_I2C0)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   824      {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   825          return &MODULE_SRC.I2C.I2C[0].LSREQ;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   826      }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   827      else
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   828      {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   829          return &MODULE_SRC.I2C.I2C[1].LSREQ;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   830      }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   831  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   832  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   833  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   834  IFX_INLINE boolean IfxI2c_getLastSingleRequestInterruptSourceStatus(Ifx_I2C *i2c)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   835  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   836      return i2c->RIS.B.LSREQ_INT;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   837  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   838  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   839  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   840  IFX_INLINE boolean IfxI2c_getProtocolInterruptFlagStatus(Ifx_I2C *i2c)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   841  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   842      return i2c->RIS.B.I2C_P_INT;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   843  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   844  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   845  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   846  IFX_INLINE boolean IfxI2c_getProtocolInterruptSourceStatus(Ifx_I2C *i2c, IfxI2c_ProtocolInterruptSource source)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   847  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   848      return (i2c->PIRQSS.U & (1 << source)) ? TRUE : FALSE;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   849  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   850  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   851  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   852  IFX_INLINE volatile Ifx_SRC_SRCR *IfxI2c_getProtocolSrcPointer(Ifx_I2C *i2c)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   853  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   854      if (i2c == &MODULE_I2C0)
	movh.a	a15,#61452
.L488:

; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   854      if (i2c == &MODULE_I2C0)      (inlined)
	jne.a	a4,a15,.L14
.L489:

; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   855      {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   856          return &MODULE_SRC.I2C.I2C[0].P;
	movh.a	a15,#61444
	lea	a15,[a15]@los(0xf0038314)
.L490:

; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   856          return &MODULE_SRC.I2C.I2C[0].P;      (inlined)
	j	.L15

; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   854      if (i2c == &MODULE_I2C0)      (inlined)
.L14:

; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   857      }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   858      else
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   859      {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   860          return &MODULE_SRC.I2C.I2C[1].P;
	movh.a	a15,#61444
	lea	a15,[a15]@los(0xf0038364)

; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   862  }      (inlined)
.L15:

; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	     1  /**
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	     2   * \file IfxSrc.h
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	     3   * \brief SRC  basic functionality
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	     4   * \ingroup IfxLld_Src
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	     5   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	     6   * \version iLLD_1_0_1_11_0
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	     7   * \copyright Copyright (c) 2019 Infineon Technologies AG. All rights reserved.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	     8   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	     9   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    10   *                                 IMPORTANT NOTICE
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    11   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    12   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    13   * Use of this file is subject to the terms of use agreed between (i) you or 
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    14   * the company in which ordinary course of business you are acting and (ii) 
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    15   * Infineon Technologies AG or its licensees. If and as long as no such 
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    16   * terms of use are agreed, use of this file is subject to following:
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    17  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    18  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    19   * Boost Software License - Version 1.0 - August 17th, 2003
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    20  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    21   * Permission is hereby granted, free of charge, to any person or 
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    22   * organization obtaining a copy of the software and accompanying 
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    23   * documentation covered by this license (the "Software") to use, reproduce,
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    24   * display, distribute, execute, and transmit the Software, and to prepare
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    25   * derivative works of the Software, and to permit third-parties to whom the 
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    26   * Software is furnished to do so, all subject to the following:
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    27  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    28   * The copyright notices in the Software and this entire statement, including
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    29   * the above license grant, this restriction and the following disclaimer, must
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    30   * be included in all copies of the Software, in whole or in part, and all
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    31   * derivative works of the Software, unless such copies or derivative works are
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    32   * solely in the form of machine-executable object code generated by a source
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    33   * language processor.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    34  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    35   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR 
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    36   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    37   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    38   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE 
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    39   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    40   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    41   * DEALINGS IN THE SOFTWARE.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    42  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    43   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    44   * \defgroup IfxLld_Src SRC
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    45   * \addtogroup IfxLld_Src
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    46   * \{
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    47   * \defgroup IfxLld_Src_Usage How to use Service Request Mechanism?
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    48   * \addtogroup IfxLld_Src_Usage
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    49   * \{
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    50   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    51   * For Aurix controller peripherals that can generate service requests is connected to one
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    52   * or more Service Request Nodes (SRNs) in the central Interrupt Router(IR) module. Refer to Controller User Manual for more details\n
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    53   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    54   * IfxSrc driver provides the APIs to configure and control service requests. Refer \ref IfxLld_Src_Usage for
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    55   * details of these APIs.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    56   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    57   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    58   * \section Ifx_Src_UsageInit Initialize the Service Request Node
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    59   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    60   * Service request node is initialized to configure the following,\n
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    61   * 1) Route the interrupt trigger to service provider, which are:\n
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    62   *  __a. One of the available CPUs or\n
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    63   *  __b. DMA controller\n
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    64   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    65   * 2) Priority of CPU Interrupt or DMA Trigger.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    66   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    67   * For Interrupt or DMA to be correctly triggered, following steps are to be done in the user code:
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    68   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    69   * \subsection Ifx_Src_UsageInitStep1 Step1: Configure the Node
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    70   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    71   * User must configure the service request node in the application / driver files.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    72   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    73   * \subsection Ifx_Src_UsageInitStep2 Step2: Enable the Trigger
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    74   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    75   * Enable the service request node to connect the trigger event from the hardware to service provider.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    76   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    77   * Example:
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    78   * Following example show the configuration for STM0 Service request 0 trigger configured to trigger
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    79   * CPU1 with the priority specified by IFX_INTPRIO_STM0 (from the example at IfxCpu_Irq)
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    80   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    81   * \code
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    82   * //file: myApplication.c
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    83   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    84   * #include "Ifx_IntPrioDef.h" // to get the priority numbers
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    85   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    86   * void myDriverInitFunction(void)
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    87   * {
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    88   *    // driver init code
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    89   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    90   *    // Step1: Call the function to route the trigger from for SRC_STM0_SR0 to CPU1
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    91   *    // and priority specified at Ifx_IntPrioDef.h globally
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    92   *  IfxSrc_init(&MODULE_SRC.STM.STM[0].SR0, IfxSrc_Tos_cpu1, IFX_INTPRIO_STM0);
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    93   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    94   *    // Step2: Enable the service request node
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    95   *  IfxSrc_init(&MODULE_SRC.STM.STM[0].SR0);
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    96   * }
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    97   * \endcode
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    98   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    99   * \}
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   100   * \}
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   101   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   102   * \defgroup IfxLld_Src_Std_Service_Request Service Request Functions
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   103   * \ingroup IfxLld_Src_Std
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   104   * \defgroup IfxLld_Src_Std_Module Module Functions
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   105   * \ingroup IfxLld_Src_Std
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   106   */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   107  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   108  #ifndef IFXSRC_H
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   109  #define IFXSRC_H 1
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   110  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   111  /******************************************************************************/
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   112  /*----------------------------------Includes----------------------------------*/
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   113  /******************************************************************************/
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   114  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   115  #include "_Impl/IfxSrc_cfg.h"
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   116  #include "Cpu/Std/IfxCpu_Intrinsics.h"
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   117  #include "IfxSrc_reg.h"
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   118  /** \addtogroup IfxLld_Src_Std_Service_Request
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   119   * \{ */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   120  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   121  /******************************************************************************/
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   122  /*-------------------------Inline Function Prototypes-------------------------*/
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   123  /******************************************************************************/
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   124  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   125  /** \brief Resets the overrun flag of the Service Request.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   126   * \param src pointer to the Service Request Control register which the overrun flag should be cleared.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   127   * \return None
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   128   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   129   * Usage example: see \ref IfxSrc_init
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   130   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   131   */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   132  IFX_INLINE void IfxSrc_clearOverrun(volatile Ifx_SRC_SRCR *src);
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   133  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   134  /** \brief Resets a specific interrupt service by software.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   135   * \param src pointer to the Service Request Control register which the request should be cleared.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   136   * \return None
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   137   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   138   * Usage example: see \ref IfxSrc_init
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   139   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   140   */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   141  IFX_INLINE void IfxSrc_clearRequest(volatile Ifx_SRC_SRCR *src);
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   142  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   143  /** \brief Gets the current overrun status.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   144   * \param src pointer to the Service Request Control register for which the overrun status should be returned.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   145   * \return current service request control overrun status.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   146   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   147   * Usage example: see \ref IfxSrc_init
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   148   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   149   */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   150  IFX_INLINE boolean IfxSrc_isOverrun(volatile Ifx_SRC_SRCR *src);
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   151  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   152  /** \brief Gets the current request status.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   153   * \param src pointer to the Service Request Control register for which the request status should be returned.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   154   * \return current service request control request status.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   155   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   156   * Usage example: see \ref IfxSrc_init
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   157   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   158   */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   159  IFX_INLINE boolean IfxSrc_isRequested(volatile Ifx_SRC_SRCR *src);
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   160  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   161  /** \brief Requests a specific interrupt service by software
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   162   * \param src pointer to the Service Request Control register which the interrupt has to be requested.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   163   * \return None
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   164   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   165   * Usage example: see \ref IfxSrc_init
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   166   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   167   */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   168  IFX_INLINE void IfxSrc_setRequest(volatile Ifx_SRC_SRCR *src);
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   169  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   170  /** \} */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   171  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   172  /** \addtogroup IfxLld_Src_Std_Module
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   173   * \{ */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   174  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   175  /******************************************************************************/
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   176  /*-------------------------Inline Function Prototypes-------------------------*/
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   177  /******************************************************************************/
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   178  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   179  /** \brief DeInitializes the service request control register.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   180   * \param src pointer to the Service Request Control register which should be deinitialised.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   181   * \return None
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   182   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   183   * Usage example: see \ref IfxSrc_init
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   184   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   185   */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   186  IFX_INLINE void IfxSrc_deinit(volatile Ifx_SRC_SRCR *src);
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   187  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   188  /** \brief Disables a specific interrupt service request.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   189   * \param src pointer to the Service Request Control register for which the interrupt has to be disabled.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   190   * \return None
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   191   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   192   * Usage example: see \ref IfxSrc_init
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   193   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   194   */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   195  IFX_INLINE void IfxSrc_disable(volatile Ifx_SRC_SRCR *src);
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   196  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   197  /** \brief Enables a specific interrupt service request.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   198   * \param src pointer to the Service Request Control register for which the interrupt has to be enabled.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   199   * \return None
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   200   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   201   * Usage example: see \ref IfxSrc_init
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   202   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   203   */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   204  IFX_INLINE void IfxSrc_enable(volatile Ifx_SRC_SRCR *src);
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   205  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   206  /** \brief Initializes the service request control register.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   207   * \param src pointer to the Service Request Control register which should be initialised.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   208   * \param typOfService type of interrupt service provider.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   209   * \param priority Interrupt priority.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   210   * \return None
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   211   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   212   * Get the peripheral service control register which request need to be serviced and assign this service to any of service providers.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   213   * \code
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   214   * //define the interrupt priority
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   215   * #define IFXASCLIN0_TX_INTPRIO 2
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   216   * //get the service request
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   217   * volatile Ifx_SRC_SRCR *src = IfxAsclin_getSrcPointerRx( &MODULE_ASCLIN0 );
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   218   * //initlaise the service request
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   219   * IfxSrc_init( src, IfxSrc_Tos_cpu0, IFXASCLIN0_TX_INTPRIO );
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   220   * // enable the service
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   221   * IfxSrc_enable( src );
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   222   * //check for service request flags and clear if they occur
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   223   * if ( IfxSrc_isRequested( src ) == TRUE )
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   224   * {
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   225   *    IfxSrc_clearRequest( src );
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   226   * }
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   227   * if ( IfxSrc_isOverrun( src ) == TRUE )
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   228   * {
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   229   *      IfxSrc_clearOverrun( src );
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   230   * }
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   231   * // Atlast deinitialise the service control
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   232   * IfxSrc_deinit( src );
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   233   * \endcode
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   234   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   235   */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   236  IFX_INLINE void IfxSrc_init(volatile Ifx_SRC_SRCR *src, IfxSrc_Tos typOfService, Ifx_Priority priority);
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   237  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   238  /** \} */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   239  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   240  /******************************************************************************/
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   241  /*---------------------Inline Function Implementations------------------------*/
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   242  /******************************************************************************/
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   243  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   244  IFX_INLINE void IfxSrc_clearOverrun(volatile Ifx_SRC_SRCR *src)
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   245  {
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   246      src->B.IOVCLR = 1;
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   247  }
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   248  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   249  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   250  IFX_INLINE void IfxSrc_clearRequest(volatile Ifx_SRC_SRCR *src)
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   251  {
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   252      src->B.CLRR = 1;
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   253  }
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   254  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   255  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   256  IFX_INLINE void IfxSrc_deinit(volatile Ifx_SRC_SRCR *src)
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   257  {
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   258      src->U = 0;
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   259  }
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   260  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   261  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   262  IFX_INLINE void IfxSrc_disable(volatile Ifx_SRC_SRCR *src)
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   263  {
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   264      src->B.SRE = 0;
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   265  }
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   266  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   267  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   268  IFX_INLINE void IfxSrc_enable(volatile Ifx_SRC_SRCR *src)
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   269  {
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   270      src->B.SRE = 1;
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   271  }
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   272  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   273  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   274  IFX_INLINE void IfxSrc_init(volatile Ifx_SRC_SRCR *src, IfxSrc_Tos typOfService, Ifx_Priority priority)
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   275  {
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   276      src->B.SRPN = priority;
	fcall	.cocofun_1
.L270:

; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.c	   156  iority);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.c	   157      IfxSrc_enable(src);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.c	   158  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.c	   159  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.c	   160  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.c	   161  Ifx_I2C *IfxI2c_getAddress(IfxI2c_Index i2c)
	ret
.L261:
	
__IfxI2c_enableProtocolInterrupt_function_end:
	.size	IfxI2c_enableProtocolInterrupt,__IfxI2c_enableProtocolInterrupt_function_end-IfxI2c_enableProtocolInterrupt
.L118:
	; End of function
	
	.sdecl	'.text.IfxI2c.IfxI2c_enableSingleDataTransferInterrupt',code,cluster('IfxI2c_enableSingleDataTransferInterrupt')
	.sect	'.text.IfxI2c.IfxI2c_enableSingleDataTransferInterrupt'
	.align	2
	
	.global	IfxI2c_enableSingleDataTransferInterrupt

; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.c	   162  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.c	   163      Ifx_I2C *module;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.c	   164  
; Function IfxI2c_enableSingleDataTransferInterrupt
.L58:
IfxI2c_enableSingleDataTransferInterrupt:	.type	func

; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	     1  /**
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	     2   * \file IfxI2c.h
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	     3   * \brief I2C  basic functionality
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	     4   * \ingroup IfxLld_I2c
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	     5   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	     6   * \version iLLD_1_0_1_11_0
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	     7   * \copyright Copyright (c) 2018 Infineon Technologies AG. All rights reserved.
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	     8   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	     9   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    10   *                                 IMPORTANT NOTICE
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    11   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    12   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    13   * Use of this file is subject to the terms of use agreed between (i) you or 
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    14   * the company in which ordinary course of business you are acting and (ii) 
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    15   * Infineon Technologies AG or its licensees. If and as long as no such 
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    16   * terms of use are agreed, use of this file is subject to following:
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    17  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    18  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    19   * Boost Software License - Version 1.0 - August 17th, 2003
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    20  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    21   * Permission is hereby granted, free of charge, to any person or 
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    22   * organization obtaining a copy of the software and accompanying 
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    23   * documentation covered by this license (the "Software") to use, reproduce,
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    24   * display, distribute, execute, and transmit the Software, and to prepare
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    25   * derivative works of the Software, and to permit third-parties to whom the 
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    26   * Software is furnished to do so, all subject to the following:
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    27  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    28   * The copyright notices in the Software and this entire statement, including
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    29   * the above license grant, this restriction and the following disclaimer, must
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    30   * be included in all copies of the Software, in whole or in part, and all
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    31   * derivative works of the Software, unless such copies or derivative works are
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    32   * solely in the form of machine-executable object code generated by a source
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    33   * language processor.
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    34  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    35   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR 
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    36   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    37   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    38   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE 
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    39   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    40   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    41   * DEALINGS IN THE SOFTWARE.
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    42  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    43   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    44   * \defgroup IfxLld_I2c_Std_enums Enumerations
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    45   * \ingroup IfxLld_I2c_Std
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    46   * \defgroup IfxLld_I2c_Std_functions Functions
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    47   * \ingroup IfxLld_I2c_Std
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    48   * \defgroup IfxLld_I2c_Std_structures Data Structures
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    49   * \ingroup IfxLld_I2c_Std
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    50   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    51  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    52  #ifndef IFXI2C_H
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    53  #define IFXI2C_H 1
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    54  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    55  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    56  /*----------------------------------Includes----------------------------------*/
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    57  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    58  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    59  #include "_Impl/IfxI2c_cfg.h"
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    60  #include "Scu/Std/IfxScuWdt.h"
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    61  #include "Scu/Std/IfxScuCcu.h"
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    62  #include "IfxI2c_bf.h"
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    63  #include "_PinMap/IfxI2c_PinMap.h"
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    64  #include "Src/Std/IfxSrc.h"
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    65  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    66  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    67  /*--------------------------------Enumerations--------------------------------*/
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    68  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    69  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    70  /** \addtogroup IfxLld_I2c_Std_enums
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    71   * \{ */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    72  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    73  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    74      IfxI2c_BusStatus_idle        = 0, /**< \brief idle */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    75      IfxI2c_BusStatus_started     = 1, /**< \brief started */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    76      IfxI2c_BusStatus_busyMaster  = 2, /**< \brief busy Master */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    77      IfxI2c_BusStatus_remoteSlave = 3  /**< \brief remote Slave */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    78  } IfxI2c_BusStatus;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    79  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    80  /** \brief enable error interrupt request source
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    81   * Definition in Ifx.I2C.ERRIRQSM.U
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    82   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    83  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    84  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    85      IfxI2c_ErrorInterruptSource_rxFifoUnderflow = IFX_I2C_ERRIRQSM_RXF_UFL_OFF,  /**< \brief receive fifo underflow service request */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    86      IfxI2c_ErrorInterruptSource_rxFifoOverflow  = IFX_I2C_ERRIRQSM_RXF_OFL_OFF,  /**< \brief receive fifo overflow service request */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    87      IfxI2c_ErrorInterruptSource_txFifoUnderflow = IFX_I2C_ERRIRQSM_TXF_UFL_OFF,  /**< \brief transmit fifo underflow service request */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    88      IfxI2c_ErrorInterruptSource_txFifoOverflow  = IFX_I2C_ERRIRQSM_TXF_OFL_OFF   /**< \brief transmit fifo overflow service request */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    89  } IfxI2c_ErrorInterruptSource;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    90  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    91  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    92  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    93      IfxI2c_PinSelect_a = 0,
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    94      IfxI2c_PinSelect_b = 1,
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    95      IfxI2c_PinSelect_c = 2,
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    96      IfxI2c_PinSelect_d = 3,
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    97      IfxI2c_PinSelect_e = 4,
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    98      IfxI2c_PinSelect_f = 5,
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    99      IfxI2c_PinSelect_g = 6,
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   100      IfxI2c_PinSelect_h = 7
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   101  } IfxI2c_PinSelect;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   102  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   103  /** \brief enable protocol interrupt source
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   104   * Definition in Ifx.I2C.PIRQSM.U
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   105   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   106  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   107  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   108      IfxI2c_ProtocolInterruptSource_addressMatch           = IFX_I2C_PIRQSM_AM_OFF,     /**< \brief address match service request */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   109      IfxI2c_ProtocolInterruptSource_generalCall            = IFX_I2C_PIRQSM_GC_OFF,     /**< \brief general call service request */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   110      IfxI2c_ProtocolInterruptSource_masterCode             = IFX_I2C_PIRQSM_MC_OFF,     /**< \brief master code service request */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   111      IfxI2c_ProtocolInterruptSource_arbitrationLost        = IFX_I2C_PIRQSM_AL_OFF,     /**< \brief arbitration lost service request */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   112      IfxI2c_ProtocolInterruptSource_notAcknowledgeReceived = IFX_I2C_PIRQSM_NACK_OFF,   /**< \brief not acknowledge received service request */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   113      IfxI2c_ProtocolInterruptSource_transmissionEnd        = IFX_I2C_PIRQSM_TX_END_OFF, /**< \brief transmission end service request */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   114      IfxI2c_ProtocolInterruptSource_receiveMode            = IFX_I2C_PIRQSM_RX_OFF      /**< \brief receive mode service request */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   115  } IfxI2c_ProtocolInterruptSource;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   116  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   117  /** \brief Enable/disable the sensitivity of the module to sleep signal\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   118   * Definition in Ifx_I2C.CLC1.B.EDIS
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   119   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   120  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   121  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   122      IfxI2c_SleepMode_enable  = 0, /**< \brief enables sleep mode */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   123      IfxI2c_SleepMode_disable = 1  /**< \brief disables sleep mode */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   124  } IfxI2c_SleepMode;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   125  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   126  /** \} */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   127  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   128  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   129  /*-----------------------------Data Structures--------------------------------*/
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   130  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   131  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   132  /** \addtogroup IfxLld_I2c_Std_structures
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   133   * \{ */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   134  /** \brief Pin Structure
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   135   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   136  typedef struct
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   137  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   138      IfxI2c_Scl_InOut *scl;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   139      IfxI2c_Sda_InOut *sda;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   140      IfxPort_PadDriver padDriver;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   141  } IfxI2c_Pins;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   142  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   143  /** \} */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   144  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   145  /** \addtogroup IfxLld_I2c_Std_functions
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   146   * \{ */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   147  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   148  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   149  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   150  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   151  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   152  /** \brief Returns if the bus is free
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   153   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   154  IFX_INLINE boolean IfxI2c_busIsFree(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   155  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   156  /** \brief clears all DTR interrupt sources
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   157   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   158   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   159   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   160  IFX_INLINE void IfxI2c_clearAllDtrInterruptSources(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   161  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   162  /** \brief clears all Error Interrupt sources
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   163   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   164   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   165   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   166  IFX_INLINE void IfxI2c_clearAllErrorInterruptSources(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   167  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   168  /** \brief Clears all Protocol Interrupt sources
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   169   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   170   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   171   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   172  IFX_INLINE void IfxI2c_clearAllProtocolInterruptSources(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   173  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   174  /** \brief clears burst request interrupt source
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   175   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   176   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   177   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   178  IFX_INLINE void IfxI2c_clearBurstRequestInterruptSource(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   179  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   180  /** \brief clears the specified source of error interrupt
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   181   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   182   * \param source error interrupt source
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   183   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   184   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   185  IFX_INLINE void IfxI2c_clearErrorInterruptSource(Ifx_I2C *i2c, IfxI2c_ErrorInterruptSource source);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   186  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   187  /** \brief clears last burst request interrupt source
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   188   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   189   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   190   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   191  IFX_INLINE void IfxI2c_clearLastBurstRequestInterruptSource(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   192  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   193  /** \brief clears last single request interrupt source
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   194   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   195   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   196   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   197  IFX_INLINE void IfxI2c_clearLastSingleRequestInterruptSource(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   198  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   199  /** \brief clears the specified source of protocol interrupt
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   200   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   201   * \param source protocol interrupt source
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   202   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   203   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   204  IFX_INLINE void IfxI2c_clearProtocolInterruptSource(Ifx_I2C *i2c, IfxI2c_ProtocolInterruptSource source);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   205  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   206  /** \brief clears single request interrupt source
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   207   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   208   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   209   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   210  IFX_INLINE void IfxI2c_clearSingleRequestInterruptSource(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   211  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   212  /** \brief disables burst request interrupt source
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   213   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   214   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   215   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   216  IFX_INLINE void IfxI2c_disableBurstRequestInterruptSource(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   217  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   218  /** \brief disables the error interrupt flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   219   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   220   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   221   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   222  IFX_INLINE void IfxI2c_disableErrorInterruptFlag(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   223  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   224  /** \brief disables the specified source of error interrupt
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   225   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   226   * \param source error interrupt source
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   227   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   228   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   229  IFX_INLINE void IfxI2c_disableErrorInterruptSource(Ifx_I2C *i2c, IfxI2c_ErrorInterruptSource source);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   230  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   231  /** \brief disables last burst request interrupt source
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   232   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   233   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   234   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   235  IFX_INLINE void IfxI2c_disableLastBurstRequestInterruptSource(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   236  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   237  /** \brief disables last single request interrupt source
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   238   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   239   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   240   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   241  IFX_INLINE void IfxI2c_disableLastSingleRequestInterruptSource(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   242  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   243  /** \brief disables the Protocol interrupt flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   244   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   245   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   246   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   247  IFX_INLINE void IfxI2c_disableProtocolInterruptFlag(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   248  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   249  /** \brief disables the specified source of protocol interrupt
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   250   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   251   * \param source protocol interrupt source
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   252   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   253   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   254  IFX_INLINE void IfxI2c_disableProtocolInterruptSource(Ifx_I2C *i2c, IfxI2c_ProtocolInterruptSource source);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   255  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   256  /** \brief disables single request interrupt source
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   257   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   258   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   259   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   260  IFX_INLINE void IfxI2c_disableSingleRequestInterruptSource(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   261  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   262  /** \brief enables burst request interrupt source
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   263   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   264   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   265   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   266  IFX_INLINE void IfxI2c_enableBurstRequestInterruptSource(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   267  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   268  /** \brief enables the error interrupt flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   269   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   270   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   271   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   272  IFX_INLINE void IfxI2c_enableErrorInterruptFlag(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   273  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   274  /** \brief enables the specified source of error interrupt
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   275   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   276   * \param source error interrupt source
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   277   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   278   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   279  IFX_INLINE void IfxI2c_enableErrorInterruptSource(Ifx_I2C *i2c, IfxI2c_ErrorInterruptSource source);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   280  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   281  /** \brief enables last burst request interrupt source
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   282   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   283   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   284   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   285  IFX_INLINE void IfxI2c_enableLastBurstRequestInterruptSource(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   286  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   287  /** \brief enables last single request interrupt source
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   288   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   289   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   290   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   291  IFX_INLINE void IfxI2c_enableLastSingleRequestInterruptSource(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   292  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   293  /** \brief enables the protocol interrupt flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   294   * \param i2c pointer to I2C registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   295   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   296   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   297  IFX_INLINE void IfxI2c_enableProtocolInterruptFlag(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   298  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   299  /** \brief enables the specified source of protocol interrupt
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   300   * \param i2c pointer to I2C registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   301   * \param source protocol interrupt source
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   302   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   303   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   304  IFX_INLINE void IfxI2c_enableProtocolInterruptSource(Ifx_I2C *i2c, IfxI2c_ProtocolInterruptSource source);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   305  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   306  /** \brief enables single request interrupt source
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   307   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   308   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   309   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   310  IFX_INLINE void IfxI2c_enableSingleRequestInterruptSource(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   311  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   312  /** \brief Returns the SRC pointer for I2C burst data transfer request interrupt
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   313   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   314   * \return SRC pointer for I2C burst data transfer Service interrupt
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   315   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   316  IFX_INLINE volatile Ifx_SRC_SRCR *IfxI2c_getBurstDataTransferSrcPointer(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   317  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   318  /** \brief returns the status of burst request interrupt source status
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   319   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   320   * \return status
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   321   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   322  IFX_INLINE boolean IfxI2c_getBurstRequestInterruptSourceStatus(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   323  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   324  /**
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   325   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   326   * \return BusStatus
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   327   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   328  IFX_INLINE IfxI2c_BusStatus IfxI2c_getBusStatus(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   329  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   330  /** \brief returns the current status of error interrupt flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   331   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   332   * \return status
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   333   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   334  IFX_INLINE boolean IfxI2c_getErrorInterruptFlagStatus(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   335  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   336  /** \brief returns the status of the error interrupt source
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   337   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   338   * \param source error interrupt source
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   339   * \return status
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   340   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   341  IFX_INLINE boolean IfxI2c_getErrorInterruptSourceStatus(Ifx_I2C *i2c, IfxI2c_ErrorInterruptSource source);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   342  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   343  /** \brief Returns the SRC pointer for I2C Error interrupt
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   344   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   345   * \return SRC pointer for I2C Error Service interrupt
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   346   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   347  IFX_INLINE volatile Ifx_SRC_SRCR *IfxI2c_getErrorSrcPointer(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   348  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   349  /** \brief Returns the SRC pointer for I2C last burst data transfer request interrupt
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   350   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   351   * \return SRC pointer for I2C last burst data transfer Service interrupt
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   352   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   353  IFX_INLINE volatile Ifx_SRC_SRCR *IfxI2c_getLastBurstDataTransferSrcPointer(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   354  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   355  /** \brief returns the status of last burst request interrupt source status
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   356   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   357   * \return status
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   358   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   359  IFX_INLINE boolean IfxI2c_getLastBurstRequestInterruptSourceStatus(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   360  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   361  /** \brief Returns the SRC pointer for I2C last single data transfer request interrupt
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   362   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   363   * \return SRC pointer for I2C last single data transfer Service interrupt
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   364   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   365  IFX_INLINE volatile Ifx_SRC_SRCR *IfxI2c_getLastSingleDataTransferSrcPointer(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   366  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   367  /** \brief returns the status of last single request interrupt source status
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   368   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   369   * \return status
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   370   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   371  IFX_INLINE boolean IfxI2c_getLastSingleRequestInterruptSourceStatus(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   372  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   373  /** \brief returns the current raw status of protocol interrupt
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   374   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   375   * \return status
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   376   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   377  IFX_INLINE boolean IfxI2c_getProtocolInterruptFlagStatus(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   378  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   379  /** \brief returns the status of  specified protocol interrupt source
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   380   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   381   * \param source protocol interrupt source
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   382   * \return status
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   383   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   384  IFX_INLINE boolean IfxI2c_getProtocolInterruptSourceStatus(Ifx_I2C *i2c, IfxI2c_ProtocolInterruptSource source);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   385  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   386  /** \brief Returns the SRC pointer for I2C Protocol interrupt
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   387   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   388   * \return SRC pointer for I2C Protocol Service interrupt
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   389   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   390  IFX_INLINE volatile Ifx_SRC_SRCR *IfxI2c_getProtocolSrcPointer(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   391  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   392  /** \brief Returns the SRC pointer for I2C single data transfer request interrupt
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   393   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   394   * \return SRC pointer for I2C single data transfer Service interrupt
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   395   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   396  IFX_INLINE volatile Ifx_SRC_SRCR *IfxI2c_getSingleDataTransferSrcPointer(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   397  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   398  /** \brief returns the status of single request interrupt source status
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   399   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   400   * \return status
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   401   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   402  IFX_INLINE boolean IfxI2c_getSingleRequestInterruptSourceStatus(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   403  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   404  /** \brief Returns if the Fifo is requesting new data
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   405   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   406  IFX_INLINE boolean IfxI2c_isFifoRequest(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   407  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   408  /**
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   409   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   410   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   411   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   412  IFX_INLINE void IfxI2c_run(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   413  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   414  /** \brief selects the pin
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   415   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   416   * \param pisel pin to be select
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   417   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   418   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   419  IFX_INLINE void IfxI2c_setPinSelection(Ifx_I2C *i2c, IfxI2c_PinSelect pisel);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   420  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   421  /** \brief Sets the number of bytes to be received
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   422   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   423   * \param size number of packets
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   424   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   425   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   426  IFX_INLINE void IfxI2c_setReceivePacketSize(Ifx_I2C *i2c, Ifx_SizeT size);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   427  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   428  /**
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   429   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   430   * \param address device address
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   431   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   432   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   433  IFX_INLINE void IfxI2c_setSlaveDeviceAddress(Ifx_I2C *i2c, uint16 address);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   434  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   435  /** \brief Sets the sensitivity of the module to sleep signal
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   436   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   437   * \param mode mode selection (enable / disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   438   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   439   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   440  IFX_INLINE void IfxI2c_setSleepMode(Ifx_I2C *i2c, IfxI2c_SleepMode mode);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   441  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   442  /** \brief Sets the number of bytes to be tansmitted
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   443   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   444   * \param size number of packets
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   445   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   446   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   447  IFX_INLINE void IfxI2c_setTransmitPacketSize(Ifx_I2C *i2c, Ifx_SizeT size);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   448  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   449  /**
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   450   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   451   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   452   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   453  IFX_INLINE void IfxI2c_stop(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   454  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   455  /**
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   456   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   457   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   458   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   459  IFX_INLINE void IfxI2c_waitBusFree(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   460  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   461  /** \brief Writes a packet (4 bytes) into the Fifo
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   462   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   463   * \param packet specifies the byte to be transfer
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   464   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   465   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   466  IFX_INLINE void IfxI2c_writeFifo(Ifx_I2C *i2c, uint32 packet);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   467  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   468  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   469  /*-------------------------Global Function Prototypes-------------------------*/
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   470  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   471  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   472  /** \brief Configures the Module as Master
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   473   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   474   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   475   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   476  IFX_EXTERN void IfxI2c_configureAsMaster(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   477  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   478  /** \brief Disables the I2c Module
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   479   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   480   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   481   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   482  IFX_EXTERN void IfxI2c_disableModule(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   483  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   484  /** \brief Enables the Burst data transfer interrupt
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   485   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   486   * \param typeOfService Type of Service (Cpu or DMA)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   487   * \param priority priority of the interrupt
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   488   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   489   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   490  IFX_EXTERN void IfxI2c_enableBurstDataTransferInterrupt(Ifx_I2C *i2c, IfxSrc_Tos typeOfService, uint16 priority);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   491  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   492  /** \brief Enables the Error interrupt
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   493   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   494   * \param typeOfService Type of Service (Cpu or DMA)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   495   * \param priority priority of the interrupt
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   496   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   497   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   498  IFX_EXTERN void IfxI2c_enableErrorInterrupt(Ifx_I2C *i2c, IfxSrc_Tos typeOfService, uint16 priority);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   499  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   500  /** \brief enables the last burst data transfer interrupt
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   501   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   502   * \param typeOfService Type of Service (Cpu or DMA)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   503   * \param priority priority of the interrupt
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   504   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   505   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   506  IFX_EXTERN void IfxI2c_enableLastBurstDataTransferInterrupt(Ifx_I2C *i2c, IfxSrc_Tos typeOfService, uint16 priority);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   507  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   508  /** \brief enables the last single data transfer interrupt
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   509   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   510   * \param typeOfService Type of Service (Cpu or DMA)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   511   * \param priority priority of the interrupt
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   512   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   513   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   514  IFX_EXTERN void IfxI2c_enableLastSingleDataTransferInterrupt(Ifx_I2C *i2c, IfxSrc_Tos typeOfService, uint16 priority);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   515  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   516  /** \brief Enables the I2c Module
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   517   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   518   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   519   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   520  IFX_EXTERN void IfxI2c_enableModule(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   521  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   522  /** \brief Enables the protocol interrupt
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   523   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   524   * \param typeOfService Type of Service (Cpu or DMA)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   525   * \param priority Priority of the interrupt
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   526   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   527   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   528  IFX_EXTERN void IfxI2c_enableProtocolInterrupt(void *i2c, IfxSrc_Tos typeOfService, uint16 priority);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   529  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   530  /** \brief enables the single data transfer interrupt
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   531   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   532   * \param typeOfService Type of Service (Cpu or DMA)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   533   * \param priority priority of the interrupt
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   534   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   535   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   536  IFX_EXTERN void IfxI2c_enableSingleDataTransferInterrupt(Ifx_I2C *i2c, IfxSrc_Tos typeOfService, uint16 priority);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   537  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   538  /**
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   539   * \param i2c Resource index of the I2c
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   540   * \return I2C module register address
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   541   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   542  IFX_EXTERN Ifx_I2C *IfxI2c_getAddress(IfxI2c_Index i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   543  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   544  /** \brief Returns the real Baudrate
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   545   * \return Baudrate
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   546   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   547  IFX_EXTERN float32 IfxI2c_getBaudrate(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   548  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   549  /** \brief API to get the resource index of the I2C specified.
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   550   * \param i2c Pointer to the I2C HW module (register memory map)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   551   * \return Resource index of the I2C
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   552   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   553  IFX_EXTERN IfxI2c_Index IfxI2c_getIndex(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   554  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   555  /**
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   556   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   557   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   558  IFX_EXTERN void IfxI2c_initSclSdaPin(const IfxI2c_Scl_InOut *scl, const IfxI2c_Sda_InOut *sda, IfxPort_PadDriver padDriver);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   559  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   560  /** \brief Releases the bus, i.e puts a stop condition on the bus
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   561   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   562   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   563  IFX_EXTERN void IfxI2c_releaseBus(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   564  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   565  /**
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   566   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   567   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   568  IFX_EXTERN void IfxI2c_resetFifo(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   569  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   570  /** \brief resets the I2c kernel
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   571   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   572   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   573   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   574  IFX_EXTERN void IfxI2c_resetModule(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   575  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   576  /** \brief Calculates the desired baudrate
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   577   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   578   * \param baudrate specifies the baud rate
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   579   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   580   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   581  IFX_EXTERN void IfxI2c_setBaudrate(Ifx_I2C *i2c, float32 baudrate);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   582  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   583  /** \} */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   584  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   585  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   586  /*---------------------Inline Function Implementations------------------------*/
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   587  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   588  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   589  IFX_INLINE boolean IfxI2c_busIsFree(Ifx_I2C *i2c)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   590  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   591      boolean free = FALSE;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   592  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   593      if (i2c->BUSSTAT.B.BS == IfxI2c_BusStatus_idle)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   594      {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   595          free = TRUE;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   596      }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   597  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   598      return free;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   599  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   600  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   601  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   602  IFX_INLINE void IfxI2c_clearAllDtrInterruptSources(Ifx_I2C *i2c)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   603  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   604      i2c->ICR.U = (1 << IFX_I2C_ICR_LSREQ_INT_OFF) | (1 << IFX_I2C_ICR_SREQ_INT_OFF) | (1 << IFX_I2C_ICR_LBREQ_INT_OFF) | (1 << IFX_I2C_ICR_BREQ_INT_OFF);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   605  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   606  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   607  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   608  IFX_INLINE void IfxI2c_clearAllErrorInterruptSources(Ifx_I2C *i2c)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   609  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   610      i2c->ERRIRQSC.U = (1 << IFX_I2C_ERRIRQSC_RXF_UFL_OFF) | (1 << IFX_I2C_ERRIRQSC_RXF_OFL_OFF) | (1 << IFX_I2C_ERRIRQSC_TXF_UFL_OFF) | (1 << IFX_I2C_ERRIRQSC_TXF_OFL_OFF);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   611  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   612  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   613  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   614  IFX_INLINE void IfxI2c_clearAllProtocolInterruptSources(Ifx_I2C *i2c)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   615  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   616      i2c->PIRQSC.U = (1 << IFX_I2C_PIRQSC_AM_OFF) | (1 << IFX_I2C_PIRQSC_GC_OFF) | (1 << IFX_I2C_PIRQSC_MC_OFF) | (1 << IFX_I2C_PIRQSC_AL_OFF) | (1 << IFX_I2C_PIRQSC_NACK_OFF) | (1 << IFX_I2C_PIRQSC_TX_END_OFF) | (1 << IFX_I2C_PIRQSC_RX_OFF);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   617  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   618  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   619  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   620  IFX_INLINE void IfxI2c_clearBurstRequestInterruptSource(Ifx_I2C *i2c)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   621  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   622      i2c->ICR.B.BREQ_INT = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   623  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   624  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   625  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   626  IFX_INLINE void IfxI2c_clearErrorInterruptSource(Ifx_I2C *i2c, IfxI2c_ErrorInterruptSource source)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   627  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   628      i2c->ERRIRQSC.U = (1 << source);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   629  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   630  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   631  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   632  IFX_INLINE void IfxI2c_clearLastBurstRequestInterruptSource(Ifx_I2C *i2c)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   633  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   634      i2c->ICR.B.LBREQ_INT = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   635  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   636  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   637  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   638  IFX_INLINE void IfxI2c_clearLastSingleRequestInterruptSource(Ifx_I2C *i2c)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   639  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   640      i2c->ICR.B.LSREQ_INT = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   641  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   642  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   643  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   644  IFX_INLINE void IfxI2c_clearProtocolInterruptSource(Ifx_I2C *i2c, IfxI2c_ProtocolInterruptSource source)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   645  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   646      i2c->PIRQSC.U = (1 << source);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   647  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   648  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   649  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   650  IFX_INLINE void IfxI2c_clearSingleRequestInterruptSource(Ifx_I2C *i2c)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   651  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   652      i2c->ICR.B.SREQ_INT = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   653  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   654  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   655  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   656  IFX_INLINE void IfxI2c_disableBurstRequestInterruptSource(Ifx_I2C *i2c)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   657  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   658      i2c->IMSC.B.BREQ_INT = 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   659  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   660  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   661  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   662  IFX_INLINE void IfxI2c_disableErrorInterruptFlag(Ifx_I2C *i2c)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   663  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   664      i2c->IMSC.B.I2C_ERR_INT = 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   665  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   666  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   667  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   668  IFX_INLINE void IfxI2c_disableErrorInterruptSource(Ifx_I2C *i2c, IfxI2c_ErrorInterruptSource source)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   669  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   670      i2c->ERRIRQSM.U &= ~(1 << source);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   671  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   672  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   673  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   674  IFX_INLINE void IfxI2c_disableLastBurstRequestInterruptSource(Ifx_I2C *i2c)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   675  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   676      i2c->IMSC.B.LBREQ_INT = 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   677  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   678  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   679  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   680  IFX_INLINE void IfxI2c_disableLastSingleRequestInterruptSource(Ifx_I2C *i2c)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   681  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   682      i2c->IMSC.B.LSREQ_INT = 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   683  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   684  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   685  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   686  IFX_INLINE void IfxI2c_disableProtocolInterruptFlag(Ifx_I2C *i2c)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   687  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   688      i2c->IMSC.B.I2C_P_INT = 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   689  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   690  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   691  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   692  IFX_INLINE void IfxI2c_disableProtocolInterruptSource(Ifx_I2C *i2c, IfxI2c_ProtocolInterruptSource source)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   693  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   694      i2c->PIRQSM.U &= ~(1 << source);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   695  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   696  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   697  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   698  IFX_INLINE void IfxI2c_disableSingleRequestInterruptSource(Ifx_I2C *i2c)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   699  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   700      i2c->IMSC.B.SREQ_INT = 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   701  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   702  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   703  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   704  IFX_INLINE void IfxI2c_enableBurstRequestInterruptSource(Ifx_I2C *i2c)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   705  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   706      i2c->IMSC.B.BREQ_INT = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   707  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   708  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   709  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   710  IFX_INLINE void IfxI2c_enableErrorInterruptFlag(Ifx_I2C *i2c)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   711  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   712      i2c->IMSC.B.I2C_ERR_INT = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   713  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   714  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   715  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   716  IFX_INLINE void IfxI2c_enableErrorInterruptSource(Ifx_I2C *i2c, IfxI2c_ErrorInterruptSource source)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   717  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   718      i2c->ERRIRQSM.U |= (1 << source);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   719  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   720  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   721  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   722  IFX_INLINE void IfxI2c_enableLastBurstRequestInterruptSource(Ifx_I2C *i2c)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   723  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   724      i2c->IMSC.B.LBREQ_INT = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   725  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   726  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   727  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   728  IFX_INLINE void IfxI2c_enableLastSingleRequestInterruptSource(Ifx_I2C *i2c)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   729  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   730      i2c->IMSC.B.LSREQ_INT = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   731  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   732  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   733  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   734  IFX_INLINE void IfxI2c_enableProtocolInterruptFlag(Ifx_I2C *i2c)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   735  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   736      i2c->IMSC.B.I2C_P_INT = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   737  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   738  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   739  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   740  IFX_INLINE void IfxI2c_enableProtocolInterruptSource(Ifx_I2C *i2c, IfxI2c_ProtocolInterruptSource source)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   741  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   742      i2c->PIRQSM.U |= (1 << source);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   743  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   744  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   745  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   746  IFX_INLINE void IfxI2c_enableSingleRequestInterruptSource(Ifx_I2C *i2c)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   747  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   748      i2c->IMSC.B.SREQ_INT = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   749  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   750  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   751  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   752  IFX_INLINE volatile Ifx_SRC_SRCR *IfxI2c_getBurstDataTransferSrcPointer(Ifx_I2C *i2c)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   753  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   754      if (i2c == &MODULE_I2C0)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   755      {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   756          return &MODULE_SRC.I2C.I2C[0].BREQ;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   757      }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   758      else
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   759      {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   760          return &MODULE_SRC.I2C.I2C[1].BREQ;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   761      }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   762  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   763  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   764  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   765  IFX_INLINE boolean IfxI2c_getBurstRequestInterruptSourceStatus(Ifx_I2C *i2c)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   766  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   767      return i2c->RIS.B.BREQ_INT;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   768  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   769  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   770  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   771  IFX_INLINE IfxI2c_BusStatus IfxI2c_getBusStatus(Ifx_I2C *i2c)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   772  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   773      return (IfxI2c_BusStatus)i2c->BUSSTAT.B.BS;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   774  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   775  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   776  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   777  IFX_INLINE boolean IfxI2c_getErrorInterruptFlagStatus(Ifx_I2C *i2c)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   778  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   779      return i2c->RIS.B.I2C_ERR_INT;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   780  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   781  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   782  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   783  IFX_INLINE boolean IfxI2c_getErrorInterruptSourceStatus(Ifx_I2C *i2c, IfxI2c_ErrorInterruptSource source)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   784  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   785      return (i2c->ERRIRQSS.U & (1 << source)) ? TRUE : FALSE;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   786  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   787  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   788  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   789  IFX_INLINE volatile Ifx_SRC_SRCR *IfxI2c_getErrorSrcPointer(Ifx_I2C *i2c)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   790  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   791      if (i2c == &MODULE_I2C0)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   792      {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   793          return &MODULE_SRC.I2C.I2C[0].ERR;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   794      }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   795      else
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   796      {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   797          return &MODULE_SRC.I2C.I2C[1].ERR;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   798      }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   799  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   800  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   801  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   802  IFX_INLINE volatile Ifx_SRC_SRCR *IfxI2c_getLastBurstDataTransferSrcPointer(Ifx_I2C *i2c)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   803  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   804      if (i2c == &MODULE_I2C0)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   805      {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   806          return &MODULE_SRC.I2C.I2C[0].LBREQ;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   807      }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   808      else
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   809      {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   810          return &MODULE_SRC.I2C.I2C[1].LBREQ;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   811      }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   812  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   813  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   814  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   815  IFX_INLINE boolean IfxI2c_getLastBurstRequestInterruptSourceStatus(Ifx_I2C *i2c)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   816  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   817      return i2c->RIS.B.LBREQ_INT;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   818  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   819  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   820  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   821  IFX_INLINE volatile Ifx_SRC_SRCR *IfxI2c_getLastSingleDataTransferSrcPointer(Ifx_I2C *i2c)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   822  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   823      if (i2c == &MODULE_I2C0)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   824      {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   825          return &MODULE_SRC.I2C.I2C[0].LSREQ;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   826      }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   827      else
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   828      {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   829          return &MODULE_SRC.I2C.I2C[1].LSREQ;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   830      }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   831  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   832  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   833  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   834  IFX_INLINE boolean IfxI2c_getLastSingleRequestInterruptSourceStatus(Ifx_I2C *i2c)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   835  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   836      return i2c->RIS.B.LSREQ_INT;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   837  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   838  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   839  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   840  IFX_INLINE boolean IfxI2c_getProtocolInterruptFlagStatus(Ifx_I2C *i2c)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   841  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   842      return i2c->RIS.B.I2C_P_INT;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   843  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   844  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   845  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   846  IFX_INLINE boolean IfxI2c_getProtocolInterruptSourceStatus(Ifx_I2C *i2c, IfxI2c_ProtocolInterruptSource source)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   847  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   848      return (i2c->PIRQSS.U & (1 << source)) ? TRUE : FALSE;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   849  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   850  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   851  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   852  IFX_INLINE volatile Ifx_SRC_SRCR *IfxI2c_getProtocolSrcPointer(Ifx_I2C *i2c)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   853  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   854      if (i2c == &MODULE_I2C0)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   855      {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   856          return &MODULE_SRC.I2C.I2C[0].P;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   857      }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   858      else
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   859      {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   860          return &MODULE_SRC.I2C.I2C[1].P;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   861      }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   862  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   863  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   864  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   865  IFX_INLINE volatile Ifx_SRC_SRCR *IfxI2c_getSingleDataTransferSrcPointer(Ifx_I2C *i2c)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   866  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   867      if (i2c == &MODULE_I2C0)
	movh.a	a15,#61452
.L495:

; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   867      if (i2c == &MODULE_I2C0)      (inlined)
	jne.a	a4,a15,.L16
.L496:

; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   868      {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   869          return &MODULE_SRC.I2C.I2C[0].SREQ;
	movh.a	a15,#61444
	lea	a15,[a15]@los(0xf0038308)
.L497:

; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   869          return &MODULE_SRC.I2C.I2C[0].SREQ;      (inlined)
	j	.L17

; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   867      if (i2c == &MODULE_I2C0)      (inlined)
.L16:

; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   870      }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   871      else
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   872      {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   873          return &MODULE_SRC.I2C.I2C[1].SREQ;
	movh.a	a15,#61444
	lea	a15,[a15]@los(0xf0038358)

; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   875  }      (inlined)
.L17:

; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	     1  /**
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	     2   * \file IfxSrc.h
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	     3   * \brief SRC  basic functionality
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	     4   * \ingroup IfxLld_Src
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	     5   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	     6   * \version iLLD_1_0_1_11_0
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	     7   * \copyright Copyright (c) 2019 Infineon Technologies AG. All rights reserved.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	     8   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	     9   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    10   *                                 IMPORTANT NOTICE
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    11   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    12   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    13   * Use of this file is subject to the terms of use agreed between (i) you or 
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    14   * the company in which ordinary course of business you are acting and (ii) 
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    15   * Infineon Technologies AG or its licensees. If and as long as no such 
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    16   * terms of use are agreed, use of this file is subject to following:
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    17  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    18  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    19   * Boost Software License - Version 1.0 - August 17th, 2003
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    20  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    21   * Permission is hereby granted, free of charge, to any person or 
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    22   * organization obtaining a copy of the software and accompanying 
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    23   * documentation covered by this license (the "Software") to use, reproduce,
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    24   * display, distribute, execute, and transmit the Software, and to prepare
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    25   * derivative works of the Software, and to permit third-parties to whom the 
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    26   * Software is furnished to do so, all subject to the following:
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    27  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    28   * The copyright notices in the Software and this entire statement, including
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    29   * the above license grant, this restriction and the following disclaimer, must
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    30   * be included in all copies of the Software, in whole or in part, and all
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    31   * derivative works of the Software, unless such copies or derivative works are
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    32   * solely in the form of machine-executable object code generated by a source
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    33   * language processor.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    34  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    35   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR 
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    36   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    37   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    38   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE 
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    39   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    40   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    41   * DEALINGS IN THE SOFTWARE.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    42  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    43   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    44   * \defgroup IfxLld_Src SRC
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    45   * \addtogroup IfxLld_Src
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    46   * \{
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    47   * \defgroup IfxLld_Src_Usage How to use Service Request Mechanism?
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    48   * \addtogroup IfxLld_Src_Usage
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    49   * \{
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    50   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    51   * For Aurix controller peripherals that can generate service requests is connected to one
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    52   * or more Service Request Nodes (SRNs) in the central Interrupt Router(IR) module. Refer to Controller User Manual for more details\n
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    53   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    54   * IfxSrc driver provides the APIs to configure and control service requests. Refer \ref IfxLld_Src_Usage for
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    55   * details of these APIs.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    56   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    57   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    58   * \section Ifx_Src_UsageInit Initialize the Service Request Node
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    59   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    60   * Service request node is initialized to configure the following,\n
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    61   * 1) Route the interrupt trigger to service provider, which are:\n
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    62   *  __a. One of the available CPUs or\n
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    63   *  __b. DMA controller\n
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    64   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    65   * 2) Priority of CPU Interrupt or DMA Trigger.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    66   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    67   * For Interrupt or DMA to be correctly triggered, following steps are to be done in the user code:
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    68   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    69   * \subsection Ifx_Src_UsageInitStep1 Step1: Configure the Node
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    70   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    71   * User must configure the service request node in the application / driver files.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    72   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    73   * \subsection Ifx_Src_UsageInitStep2 Step2: Enable the Trigger
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    74   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    75   * Enable the service request node to connect the trigger event from the hardware to service provider.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    76   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    77   * Example:
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    78   * Following example show the configuration for STM0 Service request 0 trigger configured to trigger
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    79   * CPU1 with the priority specified by IFX_INTPRIO_STM0 (from the example at IfxCpu_Irq)
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    80   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    81   * \code
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    82   * //file: myApplication.c
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    83   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    84   * #include "Ifx_IntPrioDef.h" // to get the priority numbers
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    85   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    86   * void myDriverInitFunction(void)
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    87   * {
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    88   *    // driver init code
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    89   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    90   *    // Step1: Call the function to route the trigger from for SRC_STM0_SR0 to CPU1
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    91   *    // and priority specified at Ifx_IntPrioDef.h globally
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    92   *  IfxSrc_init(&MODULE_SRC.STM.STM[0].SR0, IfxSrc_Tos_cpu1, IFX_INTPRIO_STM0);
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    93   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    94   *    // Step2: Enable the service request node
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    95   *  IfxSrc_init(&MODULE_SRC.STM.STM[0].SR0);
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    96   * }
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    97   * \endcode
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    98   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    99   * \}
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   100   * \}
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   101   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   102   * \defgroup IfxLld_Src_Std_Service_Request Service Request Functions
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   103   * \ingroup IfxLld_Src_Std
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   104   * \defgroup IfxLld_Src_Std_Module Module Functions
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   105   * \ingroup IfxLld_Src_Std
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   106   */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   107  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   108  #ifndef IFXSRC_H
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   109  #define IFXSRC_H 1
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   110  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   111  /******************************************************************************/
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   112  /*----------------------------------Includes----------------------------------*/
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   113  /******************************************************************************/
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   114  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   115  #include "_Impl/IfxSrc_cfg.h"
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   116  #include "Cpu/Std/IfxCpu_Intrinsics.h"
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   117  #include "IfxSrc_reg.h"
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   118  /** \addtogroup IfxLld_Src_Std_Service_Request
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   119   * \{ */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   120  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   121  /******************************************************************************/
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   122  /*-------------------------Inline Function Prototypes-------------------------*/
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   123  /******************************************************************************/
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   124  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   125  /** \brief Resets the overrun flag of the Service Request.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   126   * \param src pointer to the Service Request Control register which the overrun flag should be cleared.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   127   * \return None
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   128   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   129   * Usage example: see \ref IfxSrc_init
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   130   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   131   */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   132  IFX_INLINE void IfxSrc_clearOverrun(volatile Ifx_SRC_SRCR *src);
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   133  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   134  /** \brief Resets a specific interrupt service by software.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   135   * \param src pointer to the Service Request Control register which the request should be cleared.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   136   * \return None
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   137   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   138   * Usage example: see \ref IfxSrc_init
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   139   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   140   */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   141  IFX_INLINE void IfxSrc_clearRequest(volatile Ifx_SRC_SRCR *src);
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   142  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   143  /** \brief Gets the current overrun status.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   144   * \param src pointer to the Service Request Control register for which the overrun status should be returned.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   145   * \return current service request control overrun status.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   146   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   147   * Usage example: see \ref IfxSrc_init
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   148   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   149   */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   150  IFX_INLINE boolean IfxSrc_isOverrun(volatile Ifx_SRC_SRCR *src);
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   151  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   152  /** \brief Gets the current request status.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   153   * \param src pointer to the Service Request Control register for which the request status should be returned.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   154   * \return current service request control request status.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   155   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   156   * Usage example: see \ref IfxSrc_init
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   157   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   158   */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   159  IFX_INLINE boolean IfxSrc_isRequested(volatile Ifx_SRC_SRCR *src);
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   160  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   161  /** \brief Requests a specific interrupt service by software
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   162   * \param src pointer to the Service Request Control register which the interrupt has to be requested.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   163   * \return None
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   164   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   165   * Usage example: see \ref IfxSrc_init
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   166   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   167   */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   168  IFX_INLINE void IfxSrc_setRequest(volatile Ifx_SRC_SRCR *src);
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   169  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   170  /** \} */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   171  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   172  /** \addtogroup IfxLld_Src_Std_Module
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   173   * \{ */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   174  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   175  /******************************************************************************/
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   176  /*-------------------------Inline Function Prototypes-------------------------*/
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   177  /******************************************************************************/
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   178  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   179  /** \brief DeInitializes the service request control register.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   180   * \param src pointer to the Service Request Control register which should be deinitialised.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   181   * \return None
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   182   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   183   * Usage example: see \ref IfxSrc_init
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   184   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   185   */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   186  IFX_INLINE void IfxSrc_deinit(volatile Ifx_SRC_SRCR *src);
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   187  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   188  /** \brief Disables a specific interrupt service request.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   189   * \param src pointer to the Service Request Control register for which the interrupt has to be disabled.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   190   * \return None
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   191   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   192   * Usage example: see \ref IfxSrc_init
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   193   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   194   */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   195  IFX_INLINE void IfxSrc_disable(volatile Ifx_SRC_SRCR *src);
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   196  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   197  /** \brief Enables a specific interrupt service request.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   198   * \param src pointer to the Service Request Control register for which the interrupt has to be enabled.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   199   * \return None
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   200   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   201   * Usage example: see \ref IfxSrc_init
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   202   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   203   */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   204  IFX_INLINE void IfxSrc_enable(volatile Ifx_SRC_SRCR *src);
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   205  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   206  /** \brief Initializes the service request control register.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   207   * \param src pointer to the Service Request Control register which should be initialised.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   208   * \param typOfService type of interrupt service provider.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   209   * \param priority Interrupt priority.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   210   * \return None
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   211   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   212   * Get the peripheral service control register which request need to be serviced and assign this service to any of service providers.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   213   * \code
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   214   * //define the interrupt priority
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   215   * #define IFXASCLIN0_TX_INTPRIO 2
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   216   * //get the service request
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   217   * volatile Ifx_SRC_SRCR *src = IfxAsclin_getSrcPointerRx( &MODULE_ASCLIN0 );
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   218   * //initlaise the service request
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   219   * IfxSrc_init( src, IfxSrc_Tos_cpu0, IFXASCLIN0_TX_INTPRIO );
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   220   * // enable the service
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   221   * IfxSrc_enable( src );
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   222   * //check for service request flags and clear if they occur
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   223   * if ( IfxSrc_isRequested( src ) == TRUE )
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   224   * {
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   225   *    IfxSrc_clearRequest( src );
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   226   * }
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   227   * if ( IfxSrc_isOverrun( src ) == TRUE )
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   228   * {
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   229   *      IfxSrc_clearOverrun( src );
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   230   * }
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   231   * // Atlast deinitialise the service control
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   232   * IfxSrc_deinit( src );
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   233   * \endcode
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   234   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   235   */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   236  IFX_INLINE void IfxSrc_init(volatile Ifx_SRC_SRCR *src, IfxSrc_Tos typOfService, Ifx_Priority priority);
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   237  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   238  /** \} */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   239  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   240  /******************************************************************************/
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   241  /*---------------------Inline Function Implementations------------------------*/
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   242  /******************************************************************************/
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   243  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   244  IFX_INLINE void IfxSrc_clearOverrun(volatile Ifx_SRC_SRCR *src)
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   245  {
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   246      src->B.IOVCLR = 1;
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   247  }
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   248  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   249  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   250  IFX_INLINE void IfxSrc_clearRequest(volatile Ifx_SRC_SRCR *src)
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   251  {
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   252      src->B.CLRR = 1;
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   253  }
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   254  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   255  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   256  IFX_INLINE void IfxSrc_deinit(volatile Ifx_SRC_SRCR *src)
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   257  {
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   258      src->U = 0;
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   259  }
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   260  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   261  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   262  IFX_INLINE void IfxSrc_disable(volatile Ifx_SRC_SRCR *src)
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   263  {
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   264      src->B.SRE = 0;
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   265  }
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   266  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   267  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   268  IFX_INLINE void IfxSrc_enable(volatile Ifx_SRC_SRCR *src)
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   269  {
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   270      src->B.SRE = 1;
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   271  }
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   272  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   273  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   274  IFX_INLINE void IfxSrc_init(volatile Ifx_SRC_SRCR *src, IfxSrc_Tos typOfService, Ifx_Priority priority)
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   275  {
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   276      src->B.SRPN = priority;
	fcall	.cocofun_1
.L282:

; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.c	   165  init(src, typeOfService, priority);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.c	   166      IfxSrc_enable(src);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.c	   167  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.c	   168  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.c	   169  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.c	   170  Ifx_I2C *IfxI2c_getAddress(IfxI2c_Index i2c)
	ret
.L274:
	
__IfxI2c_enableSingleDataTransferInterrupt_function_end:
	.size	IfxI2c_enableSingleDataTransferInterrupt,__IfxI2c_enableSingleDataTransferInterrupt_function_end-IfxI2c_enableSingleDataTransferInterrupt
.L123:
	; End of function
	
	.sdecl	'.text.IfxI2c.IfxI2c_getAddress',code,cluster('IfxI2c_getAddress')
	.sect	'.text.IfxI2c.IfxI2c_getAddress'
	.align	2
	
	.global	IfxI2c_getAddress

; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.c	   171  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.c	   172      Ifx_I2C *module;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.c	   173  
; Function IfxI2c_getAddress
.L60:
IfxI2c_getAddress:	.type	func

; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.c	   174      if (i2c < IFXI2C_NUM_MODULES)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.c	   175      {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.c	   176          module = (Ifx_I2C *)IfxI2c_cfg_indexMap[i2c].module;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.c	   177      }
	jge	d4,#1,.L18
.L502:

; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.c	   178      else
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.c	   179      {
	movh.a	a15,#@his(IfxI2c_cfg_indexMap)
	lea	a15,[a15]@los(IfxI2c_cfg_indexMap)
.L503:
	addsc.a	a15,a15,d4,#3
.L504:
	ld.a	a2,[a15]
.L376:

; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.c	   180          module = NULL_PTR;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.c	   181      }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.c	   182  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.c	   183      return module;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.c	   184  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.c	   185  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.c	   186  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.c	   187  float32 IfxI2c_getBaudrate(Ifx_I2C *i2c)
	ret
.L18:
	mov.a	a2,#0
.L377:
	ret
.L286:
	
__IfxI2c_getAddress_function_end:
	.size	IfxI2c_getAddress,__IfxI2c_getAddress_function_end-IfxI2c_getAddress
.L128:
	; End of function
	
	.sdecl	'.text.IfxI2c.IfxI2c_getBaudrate',code,cluster('IfxI2c_getBaudrate')
	.sect	'.text.IfxI2c.IfxI2c_getBaudrate'
	.align	2
	
	.global	IfxI2c_getBaudrate

; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.c	   188  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.c	   189      uint8   inc     = i2c->FDIVCFG.B.INC;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.c	   190      uint16  dec     = i2c->FDIVCFG.B.DEC;
; Function IfxI2c_getBaudrate
.L62:
IfxI2c_getBaudrate:	.type	func

; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.c	   191      uint8   rmc     = i2c->CLC1.B.RMC;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.c	   192      float32 fKernel = IfxScuCcu_getBaud1Frequency();
	ld.bu	d8,[a4]26
.L379:

; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.c	   193  
	ld.hu	d15,[a4]24
.L509:

; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.c	   194      return (fKernel / rmc) / ((2 * dec / inc) + 3);
	extr.u	d9,d15,#0,#11
	ld.bu	d15,[a4]1
.L380:

; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.c	   195  }
	call	IfxScuCcu_getBaud1Frequency
.L378:

; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.c	   196  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.c	   197  
	sha	d9,#1
.L381:
	div	e0,d9,d8
.L510:
	utof	d15,d15
.L382:
	div.f	d15,d2,d15
.L511:
	add	d0,#3
	itof	d0,d0
.L512:

; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.c	   198  IfxI2c_Index IfxI2c_getIndex(Ifx_I2C *i2c)
	div.f	d2,d15,d0
	ret
.L291:
	
__IfxI2c_getBaudrate_function_end:
	.size	IfxI2c_getBaudrate,__IfxI2c_getBaudrate_function_end-IfxI2c_getBaudrate
.L133:
	; End of function
	
	.sdecl	'.text.IfxI2c.IfxI2c_getIndex',code,cluster('IfxI2c_getIndex')
	.sect	'.text.IfxI2c.IfxI2c_getIndex'
	.align	2
	
	.global	IfxI2c_getIndex

; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.c	   199  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.c	   200      uint32       index;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.c	   201      IfxI2c_Index result;
; Function IfxI2c_getIndex
.L64:
IfxI2c_getIndex:	.type	func

; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.c	   202  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.c	   203      result = IfxI2c_Index_none;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.c	   204  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.c	   205      for (index = 0; index < IFXI2C_NUM_MODULES; index++)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.c	   206      {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.c	   207          if (IfxI2c_cfg_indexMap[index].module == i2c)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.c	   208          {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.c	   209              result = (IfxI2c_Index)IfxI2c_cfg_indexMap[index].index;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.c	   210              break;
	movh.a	a15,#@his(IfxI2c_cfg_indexMap)
	lea	a15,[a15]@los(IfxI2c_cfg_indexMap)
.L517:
	ld.a	a2,[a15]
.L518:
	mov	d2,#-1
.L383:
	jne.a	a2,a4,.L22
.L519:

; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.c	   211          }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.c	   212      }
	ld.w	d15,[a15]4
.L520:
	extr	d2,d15,#0,#8
.L22:

; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.c	   213  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.c	   214      return result;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.c	   215  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.c	   216  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.c	   217  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.c	   218  void IfxI2c_initSclSdaPin(const IfxI2c_Scl_InOut *scl, const IfxI2c_Sda_InOut *sda, IfxPort_PadDriver padDriver)
	ret
.L298:
	
__IfxI2c_getIndex_function_end:
	.size	IfxI2c_getIndex,__IfxI2c_getIndex_function_end-IfxI2c_getIndex
.L138:
	; End of function
	
	.sdecl	'.text.IfxI2c.IfxI2c_initSclSdaPin',code,cluster('IfxI2c_initSclSdaPin')
	.sect	'.text.IfxI2c.IfxI2c_initSclSdaPin'
	.align	2
	
	.global	IfxI2c_initSclSdaPin

; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.c	   219  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.c	   220      IfxPort_OutputMode mode = (IfxPort_OutputMode)IfxPort_Mode_outputOpenDrainGeneral;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.c	   221      IfxPort_setPinModeOutput(scl->pin.port, scl->pin.pinIndex, mode, scl->outSelect);
; Function IfxI2c_initSclSdaPin
.L66:
IfxI2c_initSclSdaPin:	.type	func
	mov.aa	a15,a4
.L386:

; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.c	   222      IfxPort_setPinModeOutput(sda->pin.port, sda->pin.pinIndex, mode, sda->outSelect);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.c	   223      IfxPort_setPinPadDriver(scl->pin.port, scl->pin.pinIndex, padDriver);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.c	   224      IfxPort_setPinPadDriver(sda->pin.port, sda->pin.pinIndex, padDriver);
	mov	d8,d4
	ld.bu	d15,[a15]13
.L387:
	mov.aa	a12,a5
.L309:

; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	     1  /**
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	     2   * \file IfxPort.h
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	     3   * \brief PORT  basic functionality
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	     4   * \ingroup IfxLld_Port
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	     5   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	     6   * \version iLLD_1_0_1_11_0
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	     7   * \copyright Copyright (c) 2018 Infineon Technologies AG. All rights reserved.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	     8   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	     9   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    10   *                                 IMPORTANT NOTICE
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    11   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    12   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    13   * Use of this file is subject to the terms of use agreed between (i) you or 
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    14   * the company in which ordinary course of business you are acting and (ii) 
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    15   * Infineon Technologies AG or its licensees. If and as long as no such 
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    16   * terms of use are agreed, use of this file is subject to following:
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    17  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    18  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    19   * Boost Software License - Version 1.0 - August 17th, 2003
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    20  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    21   * Permission is hereby granted, free of charge, to any person or 
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    22   * organization obtaining a copy of the software and accompanying 
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    23   * documentation covered by this license (the "Software") to use, reproduce,
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    24   * display, distribute, execute, and transmit the Software, and to prepare
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    25   * derivative works of the Software, and to permit third-parties to whom the 
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    26   * Software is furnished to do so, all subject to the following:
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    27  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    28   * The copyright notices in the Software and this entire statement, including
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    29   * the above license grant, this restriction and the following disclaimer, must
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    30   * be included in all copies of the Software, in whole or in part, and all
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    31   * derivative works of the Software, unless such copies or derivative works are
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    32   * solely in the form of machine-executable object code generated by a source
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    33   * language processor.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    34  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    35   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR 
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    36   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    37   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    38   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE 
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    39   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    40   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    41   * DEALINGS IN THE SOFTWARE.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    42  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    43   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    44   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    45   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    46   * \defgroup IfxLld_Port_Std_Enum Enumerations
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    47   * \ingroup IfxLld_Port_Std
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    48   * \defgroup IfxLld_Port_Std_DataStructures Data structures
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    49   * \ingroup IfxLld_Port_Std
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    50   * \defgroup IfxLld_Port_Std_SinglePin Single Pin Functions
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    51   * \ingroup IfxLld_Port_Std
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    52   * \defgroup IfxLld_Port_Std_PortGroup Group Access Functions
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    53   * \ingroup IfxLld_Port_Std
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    54   */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    55  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    56  #ifndef IFXPORT_H
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    57  #define IFXPORT_H 1
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    58  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    59  /******************************************************************************/
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    60  /*----------------------------------Includes----------------------------------*/
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    61  /******************************************************************************/
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    62  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    63  #include "_Impl/IfxPort_cfg.h"
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    64  #include "Scu/Std/IfxScuWdt.h"
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    65  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    66  /******************************************************************************/
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    67  /*--------------------------------Enumerations--------------------------------*/
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    68  /******************************************************************************/
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    69  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    70  /** \addtogroup IfxLld_Port_Std_Enum
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    71   * \{ */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    72  /** \brief The LVDS RX_DIS control function can be selected from the Port (default) or
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    73   * HSCT module.declared in MODULE_PORTx.LPCRx
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    74   */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    75  typedef enum
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    76  {
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    77      IfxPort_ControlledBy_port = 0,  /**< \brief port controlled by PORT Module */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    78      IfxPort_ControlledBy_hsct = 1   /**< \brief Port controlled by HSCT Module */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    79  } IfxPort_ControlledBy;
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    80  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    81  /** \brief Ifx_P output modification modes definition.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    82   */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    83  typedef enum
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    84  {
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    85      IfxPort_InputMode_undefined    = -1,
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    86      IfxPort_InputMode_noPullDevice = 0 << 3,
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    87          IfxPort_InputMode_pullDown = 1U << 3,
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    88          IfxPort_InputMode_pullUp   = 2U << 3  /**< \brief  */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    89  } IfxPort_InputMode;
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    90  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    91  /** \brief Ifx_P input / output mode definition.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    92   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    93   * \see Ifx_P.IOCR, IfxPort_setPinMode()
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    94   */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    95  typedef enum
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    96  {
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    97      IfxPort_Mode_inputNoPullDevice      = 0,      /**< \brief Input, No pull device connected. */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    98      IfxPort_Mode_inputPullDown          = 8U,     /**< \brief Input, pull-down device connected. */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    99      IfxPort_Mode_inputPullUp            = 0x10U,  /**< \brief Input, pull-up device connected. */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   100      IfxPort_Mode_outputPushPullGeneral  = 0x80U,  /**< \brief Push-pull, General-purpose output */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   101      IfxPort_Mode_outputPushPullAlt1     = 0x88U,  /**< \brief Push-pull, Alternate output function 1. */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   102      IfxPort_Mode_outputPushPullAlt2     = 0x90U,  /**< \brief Push-pull, Alternate output function 2. */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   103      IfxPort_Mode_outputPushPullAlt3     = 0x98U,  /**< \brief Push-pull, Alternate output function 3. */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   104      IfxPort_Mode_outputPushPullAlt4     = 0xA0U,  /**< \brief Push-pull, Alternate output function 4. */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   105      IfxPort_Mode_outputPushPullAlt5     = 0xA8U,  /**< \brief Push-pull, Alternate output function 5. */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   106      IfxPort_Mode_outputPushPullAlt6     = 0xB0U,  /**< \brief Push-pull, Alternate output function 6. */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   107      IfxPort_Mode_outputPushPullAlt7     = 0xB8U,  /**< \brief Push-pull, Alternate output function 7. */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   108      IfxPort_Mode_outputOpenDrainGeneral = 0xC0U,  /**< \brief Open-drain, General-purpose output. */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   109      IfxPort_Mode_outputOpenDrainAlt1    = 0xC8U,  /**< \brief Open-drain, Alternate output function 1. */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   110      IfxPort_Mode_outputOpenDrainAlt2    = 0xD0U,  /**< \brief Open-drain, Alternate output function 2. */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   111      IfxPort_Mode_outputOpenDrainAlt3    = 0xD8U,  /**< \brief Open-drain, Alternate output function 3. */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   112      IfxPort_Mode_outputOpenDrainAlt4    = 0xE0U,  /**< \brief Open-drain, Alternate output function 4. */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   113      IfxPort_Mode_outputOpenDrainAlt5    = 0xE8U,  /**< \brief Open-drain, Alternate output function 5. */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   114      IfxPort_Mode_outputOpenDrainAlt6    = 0xF0U,  /**< \brief Open-drain, Alternate output function 6. */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   115      IfxPort_Mode_outputOpenDrainAlt7    = 0xF8U   /**< \brief Open-drain, Alternate output function 7. */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   116  } IfxPort_Mode;
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   117  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   118  /** \brief Pin output alternate index
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   119   */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   120  typedef enum
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   121  {
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   122      IfxPort_OutputIdx_general  = 0x10U << 3,
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   123          IfxPort_OutputIdx_alt1 = 0x11U << 3,
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   124          IfxPort_OutputIdx_alt2 = 0x12U << 3,
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   125          IfxPort_OutputIdx_alt3 = 0x13U << 3,
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   126          IfxPort_OutputIdx_alt4 = 0x14U << 3,
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   127          IfxPort_OutputIdx_alt5 = 0x15U << 3,
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   128          IfxPort_OutputIdx_alt6 = 0x16U << 3,
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   129          IfxPort_OutputIdx_alt7 = 0x17U << 3
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   130  } IfxPort_OutputIdx;
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   131  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   132  /** \brief Pin output mode definition
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   133   */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   134  typedef enum
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   135  {
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   136      IfxPort_OutputMode_pushPull      = 0x10U << 3,
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   137          IfxPort_OutputMode_openDrain = 0x18U << 3
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   138  } IfxPort_OutputMode;
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   139  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   140  /** \brief Pad driver mode definition (strength and slew rate).
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   141   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   142   * \see Ifx_P.PDR, IfxPort_setPinPadDriver()
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   143   */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   144  typedef enum
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   145  {
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   146      IfxPort_PadDriver_cmosAutomotiveSpeed1 = 0,  /**< \brief Speed grade 1. */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   147      IfxPort_PadDriver_cmosAutomotiveSpeed2 = 1,  /**< \brief Speed grade 2. */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   148      IfxPort_PadDriver_cmosAutomotiveSpeed3 = 2,  /**< \brief Speed grade 3. */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   149      IfxPort_PadDriver_cmosAutomotiveSpeed4 = 3,  /**< \brief Speed grade 4. */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   150      IfxPort_PadDriver_lvdsSpeed1           = 4,  /**< \brief Lvds Speed grade 1 */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   151      IfxPort_PadDriver_lvdsSpeed2           = 5,  /**< \brief Lvds Speed grade 2 */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   152      IfxPort_PadDriver_lvdsSpeed3           = 6,  /**< \brief Lvds Speed grade 3 */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   153      IfxPort_PadDriver_lvdsSpeed4           = 7,  /**< \brief Lvds Speed grade 4 */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   154      IfxPort_PadDriver_ttlSpeed1            = 8,  /**< \brief Speed grade 1. */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   155      IfxPort_PadDriver_ttlSpeed2            = 9,  /**< \brief Speed grade 2. */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   156      IfxPort_PadDriver_ttlSpeed3            = 10, /**< \brief Speed grade 3. */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   157      IfxPort_PadDriver_ttlSpeed4            = 11  /**< \brief Speed grade 4. */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   158  } IfxPort_PadDriver;
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   159  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   160  /** \brief MODULE_PORTx.LPCRx.B.PS1.Selects between 5v and 3.3v on Vext supply for the LVDSM pair
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   161   */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   162  typedef enum
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   163  {
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   164      IfxPort_PadSupply_5v = 0,  /**< \brief select, 5V supply */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   165      IfxPort_PadSupply_3v = 1   /**< \brief select, 3V supply */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   166  } IfxPort_PadSupply;
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   167  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   168  /** \brief Ifx_P output modification modes definition.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   169   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   170   * \see Ifx_P.OMR, IfxPort_setPinState()
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   171   */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   172  typedef enum
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   173  {
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   174      IfxPort_State_notChanged = (0 << 16) | (0 << 0),  /**< \brief Ifx_P pin is left unchanged. */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   175      IfxPort_State_high       = (0 << 16) | (1U << 0), /**< \brief Ifx_P pin is set to high. */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   176      IfxPort_State_low        = (1U << 16) | (0 << 0), /**< \brief Ifx_P pin is set to low. */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   177      IfxPort_State_toggled    = (1U << 16) | (1U << 0) /**< \brief Ifx_P pin is toggled. */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   178  } IfxPort_State;
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   179  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   180  /** \} */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   181  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   182  /******************************************************************************/
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   183  /*-----------------------------Data Structures--------------------------------*/
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   184  /******************************************************************************/
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   185  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   186  /** \addtogroup IfxLld_Port_Std_DataStructures
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   187   * \{ */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   188  /** \brief Defines a pin
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   189   */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   190  typedef struct
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   191  {
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   192      Ifx_P *port;
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   193      uint8  pinIndex;
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   194  } IfxPort_Pin;
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   195  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   196  /** \brief To configure pins
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   197   */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   198  typedef struct
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   199  {
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   200      Ifx_P            *port;
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   201      uint8             pinIndex;
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   202      IfxPort_OutputIdx mode;
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   203      IfxPort_PadDriver padDriver;
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   204  } IfxPort_Pin_Config;
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   205  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   206  /** \} */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   207  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   208  /** \addtogroup IfxLld_Port_Std_SinglePin
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   209   * \{ */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   210  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   211  /******************************************************************************/
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   212  /*-------------------------Inline Function Prototypes-------------------------*/
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   213  /******************************************************************************/
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   214  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   215  /** \brief Return the port state.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   216   * \param port Pointer to the port which should be accessed.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   217   * \param pinIndex Specifies the pin for which the state should be returned.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   218   * \return Returns TRUE the pin is high; FALSE the pin is low
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   219   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   220   * Coding example:
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   221   * \code
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   222   *    if( IfxPort_getPinState(&MODULE_P33, 0) ) {
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   223   *      // ...
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   224   *    }
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   225   * \endcode
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   226   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   227   */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   228  IFX_INLINE boolean IfxPort_getPinState(Ifx_P *port, uint8 pinIndex);
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   229  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   230  /** \brief Set the port output.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   231   * \param port Pointer to the port which should be accessed.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   232   * \param pinIndex Specifies the pin to be set.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   233   * \return None
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   234   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   235   * Coding example:
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   236   * \code
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   237   * IfxPort_setPinHigh(&MODULE_P33, 0);
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   238   * \endcode
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   239   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   240   * \see IfxPort_setPinState(), IfxPort_setPinLow(), IfxPort_togglePin()
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   241   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   242   */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   243  IFX_INLINE void IfxPort_setPinHigh(Ifx_P *port, uint8 pinIndex);
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   244  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   245  /** \brief Reset the port output.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   246   * \param port Pointer to the port which should be accessed.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   247   * \param pinIndex Specifies the pin to be reset.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   248   * \return None
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   249   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   250   * Coding example:
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   251   * \code
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   252   * IfxPort_setPinLow(&MODULE_P33, 0);
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   253   * \endcode
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   254   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   255   * \see IfxPort_setPinState(), IfxPort_setPinHigh(), IfxPort_togglePin()
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   256   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   257   */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   258  IFX_INLINE void IfxPort_setPinLow(Ifx_P *port, uint8 pinIndex);
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   259  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   260  /** \brief Configure the port input / output mode.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   261   * \param port Pointer to the port which should be accessed.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   262   * \param pinIndex Specifies the pin to be configured.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   263   * \param mode Specifies the port pin mode.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   264   * \return None
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   265   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   266   * Coding example:
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   267   * \code
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   268   *     IfxPort_setPinModeInput(&MODULE_P33, 0, IfxPort_InputMode_pullUp);
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   269   * \endcode
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   270   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   271   */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   272  IFX_INLINE void IfxPort_setPinModeInput(Ifx_P *port, uint8 pinIndex, IfxPort_InputMode mode);
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   273  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   274  /** \brief Configure the port input / output mode.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   275   * \param port Pointer to the port which should be accessed.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   276   * \param pinIndex Specifies the pin to be configured.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   277   * \param mode Specifies the port pin mode.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   278   * \param index Specifies the alternate (or general purpose) output channel.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   279   * \return None
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   280   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   281   * Coding example:
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   282   * \code
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   283   *     IfxPort_setPinModeOutput(&MODULE_P33, 0, IfxPort_OutputMode_pushPull, IfxPort_OutputIdx_general);
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   284   * \endcode
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   285   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   286   */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   287  IFX_INLINE void IfxPort_setPinModeOutput(Ifx_P *port, uint8 pinIndex, IfxPort_OutputMode mode, IfxPort_OutputIdx index);
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   288  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   289  /** \brief Set / Resets / Toggle the port output.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   290   * \param port Pointer to the port which should be accessed.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   291   * \param pinIndex Specifies the pin to modify.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   292   * \param action Specifies the action: set, reset, toggle.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   293   * \return None
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   294   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   295   * Coding example:
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   296   * \code
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   297   * IfxPort_setPinState(&MODULE_P33, 0, IfxPort_State_toggled);
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   298   * IfxPort_setPinState(&MODULE_P33, 0, IfxPort_State_toggled);
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   299   * IfxPort_setPinState(&MODULE_P33, 0, IfxPort_State_toggled);
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   300   * \endcode
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   301   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   302   */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   303  IFX_INLINE void IfxPort_setPinState(Ifx_P *port, uint8 pinIndex, IfxPort_State action);
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   304  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   305  /** \brief Toggle the port output.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   306   * \param port Pointer to the port which should be accessed.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   307   * \param pinIndex Specifies the pin to be toggled.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   308   * \return None
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   309   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   310   * Coding example:
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   311   * \code
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   312   * IfxPort_togglePin(&MODULE_P33, 0);
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   313   * \endcode
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   314   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   315   * \see IfxPort_setPinState(), IfxPort_setPinLow(), IfxPort_setPinHigh()
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   316   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   317   */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   318  IFX_INLINE void IfxPort_togglePin(Ifx_P *port, uint8 pinIndex);
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   319  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   320  /******************************************************************************/
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   321  /*-------------------------Global Function Prototypes-------------------------*/
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   322  /******************************************************************************/
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   323  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   324  /** \brief Disable the emergency stop function.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   325   * This function disables the emergency stop function. A check is done on port functionality.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   326   * \param port Pointer to the port which should be accessed.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   327   * \param pinIndex Specifies the pin for which the emergency stop function should be disabled.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   328   * \return Returns TRUE if the emergency stop function has been disabled; FALSE if the emergency stop function could not be disabled
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   329   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   330   * Coding example:
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   331   * /code
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   332   *     if( !IfxPort_disableEmergencyStop(&MODULE_P33, 0) )
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   333   *     {
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   334   *         // failed to disable emergency stop for P33.0
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   335   *     }
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   336   * /endcode
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   337   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   338   * \see IfxPort_disableEmergencyStop(), IfxPort_resetESR()
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   339   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   340   */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   341  IFX_EXTERN boolean IfxPort_disableEmergencyStop(Ifx_P *port, uint8 pinIndex);
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   342  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   343  /** \brief Enable the emergency stop function.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   344   * This function enables the emergency stop function. A check is done on port functionality.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   345   * \param port Pointer to the port which should be accessed.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   346   * \param pinIndex Specifies the pin for which the emergency stop function should be enabled.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   347   * \return Returns TRUE if the emergency stop function has been enabled; FALSE if the emergency stop function could not be enabled
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   348   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   349   * Coding example:
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   350   * \code
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   351   *     if( !IfxPort_enableEmergencyStop(&MODULE_P33, 0) ) {
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   352   *       // failed to enable emergency stop for P33.0
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   353   *     }
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   354   * \endcode
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   355   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   356   * \see IfxPort_disableEmergencyStop(), IfxPort_setESR()
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   357   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   358   */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   359  IFX_EXTERN boolean IfxPort_enableEmergencyStop(Ifx_P *port, uint8 pinIndex);
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   360  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   361  /** \brief Configure the port input / output mode.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   362   * Also Configures the P40/P41 Port for digital functionality
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   363   * which bydefault support analog functionality.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   364   * \param port Pointer to the port which should be accessed.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   365   * \param pinIndex Specifies the pin to be configured.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   366   * \param mode Specifies the port pin mode.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   367   * \return None
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   368   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   369   * Coding example:
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   370   * \code
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   371   *     IfxPort_setPinMode(&MODULE_P33, 0, IfxPort_Mode_outputPushPullGeneral);
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   372   * \endcode
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   373   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   374   */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   375  IFX_EXTERN void IfxPort_setPinMode(Ifx_P *port, uint8 pinIndex, IfxPort_Mode mode);
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   376  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   377  /** \brief Configure the pad driver mode.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   378   * \param port Pointer to the port which should be accessed.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   379   * \param pinIndex Specifies the pin for which the mode will be set.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   380   * \param padDriver Specifies the driver mode.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   381   * \return None
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   382   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   383   * Coding example:
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   384   * \code
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   385   * // enable strong 3.3V driver
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   386   * IfxPort_setPinPadDriver(&MODULE_P33, 0, IfxPort_PadDriver_cmosAutomotiveSpeed1);
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   387   * \endcode
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   388   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   389   */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   390  IFX_EXTERN void IfxPort_setPinPadDriver(Ifx_P *port, uint8 pinIndex, IfxPort_PadDriver padDriver);
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   391  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   392  /** \} */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   393  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   394  /** \addtogroup IfxLld_Port_Std_PortGroup
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   395   * \{ */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   396  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   397  /******************************************************************************/
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   398  /*-------------------------Inline Function Prototypes-------------------------*/
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   399  /******************************************************************************/
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   400  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   401  /** \brief Return the port group state
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   402   * \param port Pointer to the port which should be accessed.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   403   * \param pinIndex start at the given pin
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   404   * \param mask selects the pins which should be read (starting from pinIndex)
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   405   * \return Returns the selected pin values
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   406   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   407   * Coding example:
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   408   * \code
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   409   * // read the current value of P33[7:0]
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   410   * uint16 value = IfxPort_getGroupState(&MODULE_P33, 0, 0xff);
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   411   * \endcode
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   412   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   413   */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   414  IFX_INLINE uint32 IfxPort_getGroupState(Ifx_P *port, uint8 pinIndex, uint16 mask);
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   415  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   416  /** \brief Set the port group state.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   417   * \param port Pointer to the port which should be accessed.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   418   * \param pinIndex start at the given pin
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   419   * \param mask selects the pins which should be modified (starting from pinIndex)
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   420   * \param data specifies the value which should be set
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   421   * \return None
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   422   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   423   * Coding example:
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   424   * \code
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   425   * // configure P33.[7:0] as GPIO outputs
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   426   * IfxPort_setGroupModeOutput(&MODULE_P33, 0, 0xff, IfxPort_OutputMode_pushPull, IfxPort_OutputIdx_general);
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   427   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   428   * // set initial value
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   429   * IfxPort_setGroupState(&MODULE_P33, 0, 0xff, 0x42);
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   430   * \endcode
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   431   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   432   */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   433  IFX_INLINE void IfxPort_setGroupState(Ifx_P *port, uint8 pinIndex, uint16 mask, uint16 data);
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   434  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   435  /******************************************************************************/
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   436  /*-------------------------Global Function Prototypes-------------------------*/
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   437  /******************************************************************************/
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   438  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   439  /** \brief Returns the module address of the selected Port module
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   440   * \param port Pointer to PORT module registers
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   441   * \return PORT module register address
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   442   */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   443  IFX_EXTERN Ifx_P *IfxPort_getAddress(IfxPort_Index port);
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   444  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   445  /** \brief Return port index within IfxModule_IndexMap (defined in IfxPort_cfg.c)
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   446   * \param port Pointer to the port for which the index number in IfxModule_IndexMap should be retrieved.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   447   * \return port index of IfxModule_IndexMap. return -1 in case of unknown port index.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   448   */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   449  IFX_EXTERN IfxPort_Index IfxPort_getIndex(Ifx_P *port);
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   450  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   451  /** \brief Set pin modes to input at the pin location specified by '1' by the mask
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   452   * \param port Pointer to the port which should be accessed.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   453   * \param pinIndex start at the given pin
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   454   * \param mask selects the pins which should be modified (starting from pinIndex)
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   455   * \param mode Specifies the port pin mode.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   456   * \return None
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   457   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   458   * Coding example:
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   459   * \code
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   460   * // configure P33.[7:0] as GPIO inputs with Pull-Down enabled
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   461   * IfxPort_setGroupModeInput(&MODULE_P33, 0, 0xff, IfxPort_InputMode_pullDown);
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   462   *  \endcode
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   463   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   464   */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   465  IFX_EXTERN void IfxPort_setGroupModeInput(Ifx_P *port, uint8 pinIndex, uint16 mask, IfxPort_InputMode mode);
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   466  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   467  /** \brief Set pin modes to output at the pin location specified by '1' by the mask starting at pinIndex
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   468   * \param port Pointer to the port which should be accessed.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   469   * \param pinIndex start at the given pin
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   470   * \param mask selects the pins which should be modified (starting from pinIndex)
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   471   * \param mode Specifies the port pin mode.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   472   * \param index Specifies the alternate (or general purpose) output channel.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   473   * \return None
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   474   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   475   * Coding example:
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   476   * \code
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   477   * // configure P33.[7:0] as GPIO outputs
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   478   * IfxPort_setGroupModeOutput(&MODULE_P33, 0, 0xff, IfxPort_OutputMode_pushPull, IfxPort_OutputIdx_general);
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   479   * \endcode
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   480   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   481   */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   482  IFX_EXTERN void IfxPort_setGroupModeOutput(Ifx_P *port, uint8 pinIndex, uint16 mask, IfxPort_OutputMode mode, IfxPort_OutputIdx index);
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   483  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   484  /** \brief Set pad driver strength at the pin location specified by '1' by the mask
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   485   * \param port Pointer to the port which should be accessed.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   486   * \param pinIndex start at the given pin
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   487   * \param mask selects the pins which should be modified (starting from pinIndex)
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   488   * \param padDriver Specifies the pad driver strength.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   489   * \return None
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   490   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   491   * Coding example:
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   492   * \code
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   493   * // configure P33.[7:0] to use CMOS pad driver with speed 1
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   494   * IfxPort_setGroupPadDriver(&MODULE_P33, 0, 0xff, IfxPort_PadDriver_cmosAutomotiveSpeed1);
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   495   * \endcode
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   496   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   497   */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   498  IFX_EXTERN void IfxPort_setGroupPadDriver(Ifx_P *port, uint8 pinIndex, uint16 mask, IfxPort_PadDriver padDriver);
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   499  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   500  /** \brief set LVDSH mode (configured for Port21)
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   501   * \param port Pointer to the port which should be accessed.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   502   * \param pinIndex specifies pin  to be modified
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   503   * \param mode specifes the mode of pin
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   504   * \param enablePortControlled specifies whether it is controlled by port or HSCT
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   505   * \return None
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   506   */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   507  IFX_EXTERN void IfxPort_setPinModeLvdsHigh(Ifx_P *port, uint8 pinIndex, IfxPort_Mode mode, IfxPort_ControlledBy enablePortControlled);
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   508  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   509  /** \brief set LVDSM mode
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   510   * \param port Pointer to the port which should be accessed.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   511   * \param pinIndex specifies pin to be modified
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   512   * \param lvdsPadDriver select speed grade of LVDS Pad
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   513   * \param padSupply select the PAD supply (5/3.3V)
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   514   * \return None
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   515   */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   516  IFX_EXTERN void IfxPort_setPinModeLvdsMedium(Ifx_P *port, uint8 pinIndex, IfxPort_PadDriver lvdsPadDriver, IfxPort_PadSupply padSupply);
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   517  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   518  /** \} */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   519  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   520  /******************************************************************************/
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   521  /*-------------------------Global Function Prototypes-------------------------*/
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   522  /******************************************************************************/
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   523  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   524  /** \brief Disable the emergency stop function.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   525   * This function disables the emergency stop function. No check is done on port functionality.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   526   * \param port Pointer to the port which should be accessed.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   527   * \param pinIndex Specifies the pin for which the emergency stop function should be disabled.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   528   * \return None
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   529   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   530   * \see IfxPort_disableEmergencyStop()
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   531   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   532   */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   533  IFX_EXTERN void IfxPort_resetESR(Ifx_P *port, uint8 pinIndex);
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   534  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   535  /** \brief Enable the emergency stop function.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   536   * This function enables the emergency stop function. No check is done on port functionality.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   537   * \param port Pointer to the port which should be accessed.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   538   * \param pinIndex Specifies the pin for which the emergency stop function should be enabled.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   539   * \return None
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   540   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   541   * \see IfxPort_enableEmergencyStop()
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   542   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   543   */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   544  IFX_EXTERN void IfxPort_setESR(Ifx_P *port, uint8 pinIndex);
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   545  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   546  /******************************************************************************/
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   547  /*---------------------Inline Function Implementations------------------------*/
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   548  /******************************************************************************/
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   549  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   550  IFX_INLINE uint32 IfxPort_getGroupState(Ifx_P *port, uint8 pinIndex, uint16 mask)
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   551  {
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   552      return (uint32)((port->IN.U) >> (pinIndex)) & mask;
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   553  }
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   554  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   555  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   556  IFX_INLINE boolean IfxPort_getPinState(Ifx_P *port, uint8 pinIndex)
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   557  {
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   558      return (__getbit(&port->IN.U, pinIndex) != 0) ? TRUE : FALSE;
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   559  }
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   560  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   561  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   562  IFX_INLINE void IfxPort_setGroupState(Ifx_P *port, uint8 pinIndex, uint16 mask, uint16 data)
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   563  {
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   564      port->OUT.U = (port->OUT.U & ~((uint32)(mask)) << pinIndex) | (data << pinIndex);
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   565  }
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   566  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   567  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   568  IFX_INLINE void IfxPort_setPinHigh(Ifx_P *port, uint8 pinIndex)
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   569  {
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   570      IfxPort_setPinState(port, pinIndex, IfxPort_State_high);
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   571  }
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   572  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   573  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   574  IFX_INLINE void IfxPort_setPinLow(Ifx_P *port, uint8 pinIndex)
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   575  {
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   576      IfxPort_setPinState(port, pinIndex, IfxPort_State_low);
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   577  }
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   578  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   579  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   580  IFX_INLINE void IfxPort_setPinModeInput(Ifx_P *port, uint8 pinIndex, IfxPort_InputMode mode)
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   581  {
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   582      IfxPort_setPinMode(port, pinIndex, (IfxPort_Mode)mode);
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   583  }
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   584  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   585  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   586  IFX_INLINE void IfxPort_setPinModeOutput(Ifx_P *port, uint8 pinIndex, IfxPort_OutputMode mode, IfxPort_OutputIdx index)
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   587  {
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   588      IfxPort_setPinMode(port, pinIndex, (IfxPort_Mode)(index | mode));
	or	d5,d15,#192
	ld.a	a4,[a15]4
.L385:
	ld.bu	d4,[a15]8
.L384:

; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	     1  /**
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	     2   * \file IfxPort.h
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	     3   * \brief PORT  basic functionality
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	     4   * \ingroup IfxLld_Port
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	     5   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	     6   * \version iLLD_1_0_1_11_0
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	     7   * \copyright Copyright (c) 2018 Infineon Technologies AG. All rights reserved.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	     8   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	     9   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    10   *                                 IMPORTANT NOTICE
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    11   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    12   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    13   * Use of this file is subject to the terms of use agreed between (i) you or 
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    14   * the company in which ordinary course of business you are acting and (ii) 
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    15   * Infineon Technologies AG or its licensees. If and as long as no such 
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    16   * terms of use are agreed, use of this file is subject to following:
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    17  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    18  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    19   * Boost Software License - Version 1.0 - August 17th, 2003
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    20  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    21   * Permission is hereby granted, free of charge, to any person or 
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    22   * organization obtaining a copy of the software and accompanying 
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    23   * documentation covered by this license (the "Software") to use, reproduce,
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    24   * display, distribute, execute, and transmit the Software, and to prepare
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    25   * derivative works of the Software, and to permit third-parties to whom the 
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    26   * Software is furnished to do so, all subject to the following:
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    27  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    28   * The copyright notices in the Software and this entire statement, including
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    29   * the above license grant, this restriction and the following disclaimer, must
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    30   * be included in all copies of the Software, in whole or in part, and all
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    31   * derivative works of the Software, unless such copies or derivative works are
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    32   * solely in the form of machine-executable object code generated by a source
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    33   * language processor.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    34  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    35   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR 
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    36   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    37   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    38   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE 
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    39   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    40   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    41   * DEALINGS IN THE SOFTWARE.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    42  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    43   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    44   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    45   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    46   * \defgroup IfxLld_Port_Std_Enum Enumerations
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    47   * \ingroup IfxLld_Port_Std
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    48   * \defgroup IfxLld_Port_Std_DataStructures Data structures
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    49   * \ingroup IfxLld_Port_Std
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    50   * \defgroup IfxLld_Port_Std_SinglePin Single Pin Functions
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    51   * \ingroup IfxLld_Port_Std
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    52   * \defgroup IfxLld_Port_Std_PortGroup Group Access Functions
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    53   * \ingroup IfxLld_Port_Std
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    54   */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    55  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    56  #ifndef IFXPORT_H
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    57  #define IFXPORT_H 1
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    58  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    59  /******************************************************************************/
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    60  /*----------------------------------Includes----------------------------------*/
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    61  /******************************************************************************/
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    62  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    63  #include "_Impl/IfxPort_cfg.h"
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    64  #include "Scu/Std/IfxScuWdt.h"
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    65  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    66  /******************************************************************************/
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    67  /*--------------------------------Enumerations--------------------------------*/
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    68  /******************************************************************************/
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    69  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    70  /** \addtogroup IfxLld_Port_Std_Enum
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    71   * \{ */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    72  /** \brief The LVDS RX_DIS control function can be selected from the Port (default) or
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    73   * HSCT module.declared in MODULE_PORTx.LPCRx
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    74   */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    75  typedef enum
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    76  {
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    77      IfxPort_ControlledBy_port = 0,  /**< \brief port controlled by PORT Module */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    78      IfxPort_ControlledBy_hsct = 1   /**< \brief Port controlled by HSCT Module */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    79  } IfxPort_ControlledBy;
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    80  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    81  /** \brief Ifx_P output modification modes definition.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    82   */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    83  typedef enum
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    84  {
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    85      IfxPort_InputMode_undefined    = -1,
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    86      IfxPort_InputMode_noPullDevice = 0 << 3,
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    87          IfxPort_InputMode_pullDown = 1U << 3,
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    88          IfxPort_InputMode_pullUp   = 2U << 3  /**< \brief  */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    89  } IfxPort_InputMode;
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    90  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    91  /** \brief Ifx_P input / output mode definition.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    92   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    93   * \see Ifx_P.IOCR, IfxPort_setPinMode()
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    94   */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    95  typedef enum
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    96  {
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    97      IfxPort_Mode_inputNoPullDevice      = 0,      /**< \brief Input, No pull device connected. */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    98      IfxPort_Mode_inputPullDown          = 8U,     /**< \brief Input, pull-down device connected. */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    99      IfxPort_Mode_inputPullUp            = 0x10U,  /**< \brief Input, pull-up device connected. */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   100      IfxPort_Mode_outputPushPullGeneral  = 0x80U,  /**< \brief Push-pull, General-purpose output */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   101      IfxPort_Mode_outputPushPullAlt1     = 0x88U,  /**< \brief Push-pull, Alternate output function 1. */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   102      IfxPort_Mode_outputPushPullAlt2     = 0x90U,  /**< \brief Push-pull, Alternate output function 2. */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   103      IfxPort_Mode_outputPushPullAlt3     = 0x98U,  /**< \brief Push-pull, Alternate output function 3. */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   104      IfxPort_Mode_outputPushPullAlt4     = 0xA0U,  /**< \brief Push-pull, Alternate output function 4. */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   105      IfxPort_Mode_outputPushPullAlt5     = 0xA8U,  /**< \brief Push-pull, Alternate output function 5. */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   106      IfxPort_Mode_outputPushPullAlt6     = 0xB0U,  /**< \brief Push-pull, Alternate output function 6. */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   107      IfxPort_Mode_outputPushPullAlt7     = 0xB8U,  /**< \brief Push-pull, Alternate output function 7. */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   108      IfxPort_Mode_outputOpenDrainGeneral = 0xC0U,  /**< \brief Open-drain, General-purpose output. */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   109      IfxPort_Mode_outputOpenDrainAlt1    = 0xC8U,  /**< \brief Open-drain, Alternate output function 1. */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   110      IfxPort_Mode_outputOpenDrainAlt2    = 0xD0U,  /**< \brief Open-drain, Alternate output function 2. */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   111      IfxPort_Mode_outputOpenDrainAlt3    = 0xD8U,  /**< \brief Open-drain, Alternate output function 3. */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   112      IfxPort_Mode_outputOpenDrainAlt4    = 0xE0U,  /**< \brief Open-drain, Alternate output function 4. */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   113      IfxPort_Mode_outputOpenDrainAlt5    = 0xE8U,  /**< \brief Open-drain, Alternate output function 5. */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   114      IfxPort_Mode_outputOpenDrainAlt6    = 0xF0U,  /**< \brief Open-drain, Alternate output function 6. */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   115      IfxPort_Mode_outputOpenDrainAlt7    = 0xF8U   /**< \brief Open-drain, Alternate output function 7. */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   116  } IfxPort_Mode;
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   117  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   118  /** \brief Pin output alternate index
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   119   */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   120  typedef enum
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   121  {
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   122      IfxPort_OutputIdx_general  = 0x10U << 3,
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   123          IfxPort_OutputIdx_alt1 = 0x11U << 3,
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   124          IfxPort_OutputIdx_alt2 = 0x12U << 3,
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   125          IfxPort_OutputIdx_alt3 = 0x13U << 3,
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   126          IfxPort_OutputIdx_alt4 = 0x14U << 3,
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   127          IfxPort_OutputIdx_alt5 = 0x15U << 3,
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   128          IfxPort_OutputIdx_alt6 = 0x16U << 3,
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   129          IfxPort_OutputIdx_alt7 = 0x17U << 3
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   130  } IfxPort_OutputIdx;
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   131  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   132  /** \brief Pin output mode definition
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   133   */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   134  typedef enum
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   135  {
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   136      IfxPort_OutputMode_pushPull      = 0x10U << 3,
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   137          IfxPort_OutputMode_openDrain = 0x18U << 3
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   138  } IfxPort_OutputMode;
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   139  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   140  /** \brief Pad driver mode definition (strength and slew rate).
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   141   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   142   * \see Ifx_P.PDR, IfxPort_setPinPadDriver()
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   143   */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   144  typedef enum
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   145  {
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   146      IfxPort_PadDriver_cmosAutomotiveSpeed1 = 0,  /**< \brief Speed grade 1. */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   147      IfxPort_PadDriver_cmosAutomotiveSpeed2 = 1,  /**< \brief Speed grade 2. */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   148      IfxPort_PadDriver_cmosAutomotiveSpeed3 = 2,  /**< \brief Speed grade 3. */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   149      IfxPort_PadDriver_cmosAutomotiveSpeed4 = 3,  /**< \brief Speed grade 4. */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   150      IfxPort_PadDriver_lvdsSpeed1           = 4,  /**< \brief Lvds Speed grade 1 */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   151      IfxPort_PadDriver_lvdsSpeed2           = 5,  /**< \brief Lvds Speed grade 2 */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   152      IfxPort_PadDriver_lvdsSpeed3           = 6,  /**< \brief Lvds Speed grade 3 */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   153      IfxPort_PadDriver_lvdsSpeed4           = 7,  /**< \brief Lvds Speed grade 4 */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   154      IfxPort_PadDriver_ttlSpeed1            = 8,  /**< \brief Speed grade 1. */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   155      IfxPort_PadDriver_ttlSpeed2            = 9,  /**< \brief Speed grade 2. */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   156      IfxPort_PadDriver_ttlSpeed3            = 10, /**< \brief Speed grade 3. */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   157      IfxPort_PadDriver_ttlSpeed4            = 11  /**< \brief Speed grade 4. */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   158  } IfxPort_PadDriver;
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   159  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   160  /** \brief MODULE_PORTx.LPCRx.B.PS1.Selects between 5v and 3.3v on Vext supply for the LVDSM pair
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   161   */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   162  typedef enum
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   163  {
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   164      IfxPort_PadSupply_5v = 0,  /**< \brief select, 5V supply */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   165      IfxPort_PadSupply_3v = 1   /**< \brief select, 3V supply */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   166  } IfxPort_PadSupply;
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   167  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   168  /** \brief Ifx_P output modification modes definition.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   169   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   170   * \see Ifx_P.OMR, IfxPort_setPinState()
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   171   */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   172  typedef enum
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   173  {
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   174      IfxPort_State_notChanged = (0 << 16) | (0 << 0),  /**< \brief Ifx_P pin is left unchanged. */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   175      IfxPort_State_high       = (0 << 16) | (1U << 0), /**< \brief Ifx_P pin is set to high. */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   176      IfxPort_State_low        = (1U << 16) | (0 << 0), /**< \brief Ifx_P pin is set to low. */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   177      IfxPort_State_toggled    = (1U << 16) | (1U << 0) /**< \brief Ifx_P pin is toggled. */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   178  } IfxPort_State;
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   179  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   180  /** \} */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   181  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   182  /******************************************************************************/
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   183  /*-----------------------------Data Structures--------------------------------*/
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   184  /******************************************************************************/
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   185  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   186  /** \addtogroup IfxLld_Port_Std_DataStructures
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   187   * \{ */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   188  /** \brief Defines a pin
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   189   */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   190  typedef struct
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   191  {
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   192      Ifx_P *port;
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   193      uint8  pinIndex;
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   194  } IfxPort_Pin;
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   195  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   196  /** \brief To configure pins
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   197   */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   198  typedef struct
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   199  {
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   200      Ifx_P            *port;
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   201      uint8             pinIndex;
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   202      IfxPort_OutputIdx mode;
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   203      IfxPort_PadDriver padDriver;
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   204  } IfxPort_Pin_Config;
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   205  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   206  /** \} */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   207  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   208  /** \addtogroup IfxLld_Port_Std_SinglePin
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   209   * \{ */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   210  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   211  /******************************************************************************/
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   212  /*-------------------------Inline Function Prototypes-------------------------*/
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   213  /******************************************************************************/
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   214  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   215  /** \brief Return the port state.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   216   * \param port Pointer to the port which should be accessed.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   217   * \param pinIndex Specifies the pin for which the state should be returned.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   218   * \return Returns TRUE the pin is high; FALSE the pin is low
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   219   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   220   * Coding example:
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   221   * \code
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   222   *    if( IfxPort_getPinState(&MODULE_P33, 0) ) {
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   223   *      // ...
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   224   *    }
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   225   * \endcode
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   226   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   227   */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   228  IFX_INLINE boolean IfxPort_getPinState(Ifx_P *port, uint8 pinIndex);
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   229  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   230  /** \brief Set the port output.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   231   * \param port Pointer to the port which should be accessed.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   232   * \param pinIndex Specifies the pin to be set.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   233   * \return None
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   234   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   235   * Coding example:
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   236   * \code
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   237   * IfxPort_setPinHigh(&MODULE_P33, 0);
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   238   * \endcode
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   239   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   240   * \see IfxPort_setPinState(), IfxPort_setPinLow(), IfxPort_togglePin()
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   241   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   242   */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   243  IFX_INLINE void IfxPort_setPinHigh(Ifx_P *port, uint8 pinIndex);
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   244  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   245  /** \brief Reset the port output.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   246   * \param port Pointer to the port which should be accessed.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   247   * \param pinIndex Specifies the pin to be reset.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   248   * \return None
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   249   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   250   * Coding example:
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   251   * \code
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   252   * IfxPort_setPinLow(&MODULE_P33, 0);
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   253   * \endcode
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   254   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   255   * \see IfxPort_setPinState(), IfxPort_setPinHigh(), IfxPort_togglePin()
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   256   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   257   */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   258  IFX_INLINE void IfxPort_setPinLow(Ifx_P *port, uint8 pinIndex);
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   259  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   260  /** \brief Configure the port input / output mode.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   261   * \param port Pointer to the port which should be accessed.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   262   * \param pinIndex Specifies the pin to be configured.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   263   * \param mode Specifies the port pin mode.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   264   * \return None
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   265   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   266   * Coding example:
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   267   * \code
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   268   *     IfxPort_setPinModeInput(&MODULE_P33, 0, IfxPort_InputMode_pullUp);
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   269   * \endcode
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   270   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   271   */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   272  IFX_INLINE void IfxPort_setPinModeInput(Ifx_P *port, uint8 pinIndex, IfxPort_InputMode mode);
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   273  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   274  /** \brief Configure the port input / output mode.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   275   * \param port Pointer to the port which should be accessed.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   276   * \param pinIndex Specifies the pin to be configured.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   277   * \param mode Specifies the port pin mode.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   278   * \param index Specifies the alternate (or general purpose) output channel.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   279   * \return None
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   280   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   281   * Coding example:
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   282   * \code
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   283   *     IfxPort_setPinModeOutput(&MODULE_P33, 0, IfxPort_OutputMode_pushPull, IfxPort_OutputIdx_general);
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   284   * \endcode
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   285   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   286   */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   287  IFX_INLINE void IfxPort_setPinModeOutput(Ifx_P *port, uint8 pinIndex, IfxPort_OutputMode mode, IfxPort_OutputIdx index);
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   288  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   289  /** \brief Set / Resets / Toggle the port output.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   290   * \param port Pointer to the port which should be accessed.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   291   * \param pinIndex Specifies the pin to modify.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   292   * \param action Specifies the action: set, reset, toggle.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   293   * \return None
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   294   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   295   * Coding example:
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   296   * \code
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   297   * IfxPort_setPinState(&MODULE_P33, 0, IfxPort_State_toggled);
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   298   * IfxPort_setPinState(&MODULE_P33, 0, IfxPort_State_toggled);
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   299   * IfxPort_setPinState(&MODULE_P33, 0, IfxPort_State_toggled);
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   300   * \endcode
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   301   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   302   */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   303  IFX_INLINE void IfxPort_setPinState(Ifx_P *port, uint8 pinIndex, IfxPort_State action);
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   304  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   305  /** \brief Toggle the port output.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   306   * \param port Pointer to the port which should be accessed.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   307   * \param pinIndex Specifies the pin to be toggled.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   308   * \return None
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   309   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   310   * Coding example:
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   311   * \code
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   312   * IfxPort_togglePin(&MODULE_P33, 0);
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   313   * \endcode
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   314   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   315   * \see IfxPort_setPinState(), IfxPort_setPinLow(), IfxPort_setPinHigh()
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   316   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   317   */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   318  IFX_INLINE void IfxPort_togglePin(Ifx_P *port, uint8 pinIndex);
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   319  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   320  /******************************************************************************/
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   321  /*-------------------------Global Function Prototypes-------------------------*/
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   322  /******************************************************************************/
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   323  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   324  /** \brief Disable the emergency stop function.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   325   * This function disables the emergency stop function. A check is done on port functionality.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   326   * \param port Pointer to the port which should be accessed.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   327   * \param pinIndex Specifies the pin for which the emergency stop function should be disabled.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   328   * \return Returns TRUE if the emergency stop function has been disabled; FALSE if the emergency stop function could not be disabled
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   329   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   330   * Coding example:
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   331   * /code
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   332   *     if( !IfxPort_disableEmergencyStop(&MODULE_P33, 0) )
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   333   *     {
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   334   *         // failed to disable emergency stop for P33.0
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   335   *     }
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   336   * /endcode
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   337   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   338   * \see IfxPort_disableEmergencyStop(), IfxPort_resetESR()
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   339   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   340   */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   341  IFX_EXTERN boolean IfxPort_disableEmergencyStop(Ifx_P *port, uint8 pinIndex);
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   342  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   343  /** \brief Enable the emergency stop function.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   344   * This function enables the emergency stop function. A check is done on port functionality.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   345   * \param port Pointer to the port which should be accessed.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   346   * \param pinIndex Specifies the pin for which the emergency stop function should be enabled.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   347   * \return Returns TRUE if the emergency stop function has been enabled; FALSE if the emergency stop function could not be enabled
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   348   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   349   * Coding example:
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   350   * \code
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   351   *     if( !IfxPort_enableEmergencyStop(&MODULE_P33, 0) ) {
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   352   *       // failed to enable emergency stop for P33.0
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   353   *     }
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   354   * \endcode
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   355   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   356   * \see IfxPort_disableEmergencyStop(), IfxPort_setESR()
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   357   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   358   */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   359  IFX_EXTERN boolean IfxPort_enableEmergencyStop(Ifx_P *port, uint8 pinIndex);
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   360  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   361  /** \brief Configure the port input / output mode.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   362   * Also Configures the P40/P41 Port for digital functionality
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   363   * which bydefault support analog functionality.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   364   * \param port Pointer to the port which should be accessed.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   365   * \param pinIndex Specifies the pin to be configured.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   366   * \param mode Specifies the port pin mode.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   367   * \return None
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   368   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   369   * Coding example:
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   370   * \code
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   371   *     IfxPort_setPinMode(&MODULE_P33, 0, IfxPort_Mode_outputPushPullGeneral);
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   372   * \endcode
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   373   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   374   */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   375  IFX_EXTERN void IfxPort_setPinMode(Ifx_P *port, uint8 pinIndex, IfxPort_Mode mode);
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   376  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   377  /** \brief Configure the pad driver mode.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   378   * \param port Pointer to the port which should be accessed.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   379   * \param pinIndex Specifies the pin for which the mode will be set.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   380   * \param padDriver Specifies the driver mode.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   381   * \return None
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   382   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   383   * Coding example:
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   384   * \code
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   385   * // enable strong 3.3V driver
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   386   * IfxPort_setPinPadDriver(&MODULE_P33, 0, IfxPort_PadDriver_cmosAutomotiveSpeed1);
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   387   * \endcode
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   388   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   389   */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   390  IFX_EXTERN void IfxPort_setPinPadDriver(Ifx_P *port, uint8 pinIndex, IfxPort_PadDriver padDriver);
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   391  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   392  /** \} */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   393  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   394  /** \addtogroup IfxLld_Port_Std_PortGroup
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   395   * \{ */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   396  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   397  /******************************************************************************/
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   398  /*-------------------------Inline Function Prototypes-------------------------*/
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   399  /******************************************************************************/
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   400  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   401  /** \brief Return the port group state
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   402   * \param port Pointer to the port which should be accessed.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   403   * \param pinIndex start at the given pin
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   404   * \param mask selects the pins which should be read (starting from pinIndex)
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   405   * \return Returns the selected pin values
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   406   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   407   * Coding example:
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   408   * \code
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   409   * // read the current value of P33[7:0]
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   410   * uint16 value = IfxPort_getGroupState(&MODULE_P33, 0, 0xff);
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   411   * \endcode
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   412   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   413   */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   414  IFX_INLINE uint32 IfxPort_getGroupState(Ifx_P *port, uint8 pinIndex, uint16 mask);
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   415  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   416  /** \brief Set the port group state.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   417   * \param port Pointer to the port which should be accessed.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   418   * \param pinIndex start at the given pin
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   419   * \param mask selects the pins which should be modified (starting from pinIndex)
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   420   * \param data specifies the value which should be set
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   421   * \return None
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   422   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   423   * Coding example:
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   424   * \code
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   425   * // configure P33.[7:0] as GPIO outputs
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   426   * IfxPort_setGroupModeOutput(&MODULE_P33, 0, 0xff, IfxPort_OutputMode_pushPull, IfxPort_OutputIdx_general);
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   427   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   428   * // set initial value
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   429   * IfxPort_setGroupState(&MODULE_P33, 0, 0xff, 0x42);
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   430   * \endcode
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   431   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   432   */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   433  IFX_INLINE void IfxPort_setGroupState(Ifx_P *port, uint8 pinIndex, uint16 mask, uint16 data);
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   434  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   435  /******************************************************************************/
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   436  /*-------------------------Global Function Prototypes-------------------------*/
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   437  /******************************************************************************/
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   438  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   439  /** \brief Returns the module address of the selected Port module
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   440   * \param port Pointer to PORT module registers
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   441   * \return PORT module register address
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   442   */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   443  IFX_EXTERN Ifx_P *IfxPort_getAddress(IfxPort_Index port);
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   444  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   445  /** \brief Return port index within IfxModule_IndexMap (defined in IfxPort_cfg.c)
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   446   * \param port Pointer to the port for which the index number in IfxModule_IndexMap should be retrieved.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   447   * \return port index of IfxModule_IndexMap. return -1 in case of unknown port index.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   448   */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   449  IFX_EXTERN IfxPort_Index IfxPort_getIndex(Ifx_P *port);
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   450  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   451  /** \brief Set pin modes to input at the pin location specified by '1' by the mask
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   452   * \param port Pointer to the port which should be accessed.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   453   * \param pinIndex start at the given pin
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   454   * \param mask selects the pins which should be modified (starting from pinIndex)
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   455   * \param mode Specifies the port pin mode.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   456   * \return None
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   457   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   458   * Coding example:
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   459   * \code
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   460   * // configure P33.[7:0] as GPIO inputs with Pull-Down enabled
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   461   * IfxPort_setGroupModeInput(&MODULE_P33, 0, 0xff, IfxPort_InputMode_pullDown);
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   462   *  \endcode
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   463   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   464   */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   465  IFX_EXTERN void IfxPort_setGroupModeInput(Ifx_P *port, uint8 pinIndex, uint16 mask, IfxPort_InputMode mode);
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   466  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   467  /** \brief Set pin modes to output at the pin location specified by '1' by the mask starting at pinIndex
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   468   * \param port Pointer to the port which should be accessed.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   469   * \param pinIndex start at the given pin
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   470   * \param mask selects the pins which should be modified (starting from pinIndex)
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   471   * \param mode Specifies the port pin mode.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   472   * \param index Specifies the alternate (or general purpose) output channel.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   473   * \return None
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   474   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   475   * Coding example:
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   476   * \code
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   477   * // configure P33.[7:0] as GPIO outputs
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   478   * IfxPort_setGroupModeOutput(&MODULE_P33, 0, 0xff, IfxPort_OutputMode_pushPull, IfxPort_OutputIdx_general);
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   479   * \endcode
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   480   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   481   */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   482  IFX_EXTERN void IfxPort_setGroupModeOutput(Ifx_P *port, uint8 pinIndex, uint16 mask, IfxPort_OutputMode mode, IfxPort_OutputIdx index);
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   483  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   484  /** \brief Set pad driver strength at the pin location specified by '1' by the mask
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   485   * \param port Pointer to the port which should be accessed.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   486   * \param pinIndex start at the given pin
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   487   * \param mask selects the pins which should be modified (starting from pinIndex)
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   488   * \param padDriver Specifies the pad driver strength.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   489   * \return None
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   490   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   491   * Coding example:
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   492   * \code
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   493   * // configure P33.[7:0] to use CMOS pad driver with speed 1
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   494   * IfxPort_setGroupPadDriver(&MODULE_P33, 0, 0xff, IfxPort_PadDriver_cmosAutomotiveSpeed1);
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   495   * \endcode
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   496   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   497   */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   498  IFX_EXTERN void IfxPort_setGroupPadDriver(Ifx_P *port, uint8 pinIndex, uint16 mask, IfxPort_PadDriver padDriver);
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   499  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   500  /** \brief set LVDSH mode (configured for Port21)
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   501   * \param port Pointer to the port which should be accessed.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   502   * \param pinIndex specifies pin  to be modified
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   503   * \param mode specifes the mode of pin
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   504   * \param enablePortControlled specifies whether it is controlled by port or HSCT
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   505   * \return None
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   506   */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   507  IFX_EXTERN void IfxPort_setPinModeLvdsHigh(Ifx_P *port, uint8 pinIndex, IfxPort_Mode mode, IfxPort_ControlledBy enablePortControlled);
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   508  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   509  /** \brief set LVDSM mode
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   510   * \param port Pointer to the port which should be accessed.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   511   * \param pinIndex specifies pin to be modified
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   512   * \param lvdsPadDriver select speed grade of LVDS Pad
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   513   * \param padSupply select the PAD supply (5/3.3V)
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   514   * \return None
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   515   */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   516  IFX_EXTERN void IfxPort_setPinModeLvdsMedium(Ifx_P *port, uint8 pinIndex, IfxPort_PadDriver lvdsPadDriver, IfxPort_PadSupply padSupply);
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   517  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   518  /** \} */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   519  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   520  /******************************************************************************/
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   521  /*-------------------------Global Function Prototypes-------------------------*/
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   522  /******************************************************************************/
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   523  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   524  /** \brief Disable the emergency stop function.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   525   * This function disables the emergency stop function. No check is done on port functionality.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   526   * \param port Pointer to the port which should be accessed.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   527   * \param pinIndex Specifies the pin for which the emergency stop function should be disabled.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   528   * \return None
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   529   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   530   * \see IfxPort_disableEmergencyStop()
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   531   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   532   */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   533  IFX_EXTERN void IfxPort_resetESR(Ifx_P *port, uint8 pinIndex);
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   534  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   535  /** \brief Enable the emergency stop function.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   536   * This function enables the emergency stop function. No check is done on port functionality.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   537   * \param port Pointer to the port which should be accessed.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   538   * \param pinIndex Specifies the pin for which the emergency stop function should be enabled.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   539   * \return None
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   540   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   541   * \see IfxPort_enableEmergencyStop()
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   542   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   543   */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   544  IFX_EXTERN void IfxPort_setESR(Ifx_P *port, uint8 pinIndex);
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   545  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   546  /******************************************************************************/
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   547  /*---------------------Inline Function Implementations------------------------*/
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   548  /******************************************************************************/
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   549  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   550  IFX_INLINE uint32 IfxPort_getGroupState(Ifx_P *port, uint8 pinIndex, uint16 mask)
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   551  {
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   552      return (uint32)((port->IN.U) >> (pinIndex)) & mask;
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   553  }
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   554  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   555  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   556  IFX_INLINE boolean IfxPort_getPinState(Ifx_P *port, uint8 pinIndex)
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   557  {
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   558      return (__getbit(&port->IN.U, pinIndex) != 0) ? TRUE : FALSE;
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   559  }
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   560  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   561  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   562  IFX_INLINE void IfxPort_setGroupState(Ifx_P *port, uint8 pinIndex, uint16 mask, uint16 data)
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   563  {
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   564      port->OUT.U = (port->OUT.U & ~((uint32)(mask)) << pinIndex) | (data << pinIndex);
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   565  }
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   566  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   567  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   568  IFX_INLINE void IfxPort_setPinHigh(Ifx_P *port, uint8 pinIndex)
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   569  {
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   570      IfxPort_setPinState(port, pinIndex, IfxPort_State_high);
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   571  }
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   572  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   573  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   574  IFX_INLINE void IfxPort_setPinLow(Ifx_P *port, uint8 pinIndex)
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   575  {
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   576      IfxPort_setPinState(port, pinIndex, IfxPort_State_low);
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   577  }
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   578  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   579  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   580  IFX_INLINE void IfxPort_setPinModeInput(Ifx_P *port, uint8 pinIndex, IfxPort_InputMode mode)
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   581  {
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   582      IfxPort_setPinMode(port, pinIndex, (IfxPort_Mode)mode);
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   583  }
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   584  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   585  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   586  IFX_INLINE void IfxPort_setPinModeOutput(Ifx_P *port, uint8 pinIndex, IfxPort_OutputMode mode, IfxPort_OutputIdx index)
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   587  {
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   588      IfxPort_setPinMode(port, pinIndex, (IfxPort_Mode)(index | mode));
	call	IfxPort_setPinMode
.L310:

; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.c	   225  river);
	ld.bu	d15,[a12]13
.L525:
	ld.a	a4,[a12]4
.L526:

; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	     1  /**
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	     2   * \file IfxPort.h
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	     3   * \brief PORT  basic functionality
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	     4   * \ingroup IfxLld_Port
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	     5   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	     6   * \version iLLD_1_0_1_11_0
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	     7   * \copyright Copyright (c) 2018 Infineon Technologies AG. All rights reserved.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	     8   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	     9   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    10   *                                 IMPORTANT NOTICE
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    11   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    12   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    13   * Use of this file is subject to the terms of use agreed between (i) you or 
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    14   * the company in which ordinary course of business you are acting and (ii) 
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    15   * Infineon Technologies AG or its licensees. If and as long as no such 
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    16   * terms of use are agreed, use of this file is subject to following:
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    17  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    18  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    19   * Boost Software License - Version 1.0 - August 17th, 2003
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    20  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    21   * Permission is hereby granted, free of charge, to any person or 
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    22   * organization obtaining a copy of the software and accompanying 
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    23   * documentation covered by this license (the "Software") to use, reproduce,
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    24   * display, distribute, execute, and transmit the Software, and to prepare
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    25   * derivative works of the Software, and to permit third-parties to whom the 
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    26   * Software is furnished to do so, all subject to the following:
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    27  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    28   * The copyright notices in the Software and this entire statement, including
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    29   * the above license grant, this restriction and the following disclaimer, must
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    30   * be included in all copies of the Software, in whole or in part, and all
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    31   * derivative works of the Software, unless such copies or derivative works are
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    32   * solely in the form of machine-executable object code generated by a source
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    33   * language processor.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    34  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    35   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR 
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    36   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    37   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    38   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE 
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    39   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    40   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    41   * DEALINGS IN THE SOFTWARE.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    42  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    43   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    44   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    45   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    46   * \defgroup IfxLld_Port_Std_Enum Enumerations
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    47   * \ingroup IfxLld_Port_Std
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    48   * \defgroup IfxLld_Port_Std_DataStructures Data structures
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    49   * \ingroup IfxLld_Port_Std
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    50   * \defgroup IfxLld_Port_Std_SinglePin Single Pin Functions
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    51   * \ingroup IfxLld_Port_Std
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    52   * \defgroup IfxLld_Port_Std_PortGroup Group Access Functions
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    53   * \ingroup IfxLld_Port_Std
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    54   */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    55  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    56  #ifndef IFXPORT_H
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    57  #define IFXPORT_H 1
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    58  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    59  /******************************************************************************/
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    60  /*----------------------------------Includes----------------------------------*/
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    61  /******************************************************************************/
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    62  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    63  #include "_Impl/IfxPort_cfg.h"
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    64  #include "Scu/Std/IfxScuWdt.h"
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    65  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    66  /******************************************************************************/
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    67  /*--------------------------------Enumerations--------------------------------*/
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    68  /******************************************************************************/
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    69  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    70  /** \addtogroup IfxLld_Port_Std_Enum
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    71   * \{ */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    72  /** \brief The LVDS RX_DIS control function can be selected from the Port (default) or
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    73   * HSCT module.declared in MODULE_PORTx.LPCRx
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    74   */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    75  typedef enum
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    76  {
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    77      IfxPort_ControlledBy_port = 0,  /**< \brief port controlled by PORT Module */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    78      IfxPort_ControlledBy_hsct = 1   /**< \brief Port controlled by HSCT Module */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    79  } IfxPort_ControlledBy;
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    80  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    81  /** \brief Ifx_P output modification modes definition.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    82   */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    83  typedef enum
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    84  {
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    85      IfxPort_InputMode_undefined    = -1,
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    86      IfxPort_InputMode_noPullDevice = 0 << 3,
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    87          IfxPort_InputMode_pullDown = 1U << 3,
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    88          IfxPort_InputMode_pullUp   = 2U << 3  /**< \brief  */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    89  } IfxPort_InputMode;
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    90  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    91  /** \brief Ifx_P input / output mode definition.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    92   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    93   * \see Ifx_P.IOCR, IfxPort_setPinMode()
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    94   */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    95  typedef enum
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    96  {
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    97      IfxPort_Mode_inputNoPullDevice      = 0,      /**< \brief Input, No pull device connected. */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    98      IfxPort_Mode_inputPullDown          = 8U,     /**< \brief Input, pull-down device connected. */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    99      IfxPort_Mode_inputPullUp            = 0x10U,  /**< \brief Input, pull-up device connected. */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   100      IfxPort_Mode_outputPushPullGeneral  = 0x80U,  /**< \brief Push-pull, General-purpose output */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   101      IfxPort_Mode_outputPushPullAlt1     = 0x88U,  /**< \brief Push-pull, Alternate output function 1. */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   102      IfxPort_Mode_outputPushPullAlt2     = 0x90U,  /**< \brief Push-pull, Alternate output function 2. */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   103      IfxPort_Mode_outputPushPullAlt3     = 0x98U,  /**< \brief Push-pull, Alternate output function 3. */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   104      IfxPort_Mode_outputPushPullAlt4     = 0xA0U,  /**< \brief Push-pull, Alternate output function 4. */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   105      IfxPort_Mode_outputPushPullAlt5     = 0xA8U,  /**< \brief Push-pull, Alternate output function 5. */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   106      IfxPort_Mode_outputPushPullAlt6     = 0xB0U,  /**< \brief Push-pull, Alternate output function 6. */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   107      IfxPort_Mode_outputPushPullAlt7     = 0xB8U,  /**< \brief Push-pull, Alternate output function 7. */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   108      IfxPort_Mode_outputOpenDrainGeneral = 0xC0U,  /**< \brief Open-drain, General-purpose output. */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   109      IfxPort_Mode_outputOpenDrainAlt1    = 0xC8U,  /**< \brief Open-drain, Alternate output function 1. */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   110      IfxPort_Mode_outputOpenDrainAlt2    = 0xD0U,  /**< \brief Open-drain, Alternate output function 2. */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   111      IfxPort_Mode_outputOpenDrainAlt3    = 0xD8U,  /**< \brief Open-drain, Alternate output function 3. */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   112      IfxPort_Mode_outputOpenDrainAlt4    = 0xE0U,  /**< \brief Open-drain, Alternate output function 4. */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   113      IfxPort_Mode_outputOpenDrainAlt5    = 0xE8U,  /**< \brief Open-drain, Alternate output function 5. */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   114      IfxPort_Mode_outputOpenDrainAlt6    = 0xF0U,  /**< \brief Open-drain, Alternate output function 6. */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   115      IfxPort_Mode_outputOpenDrainAlt7    = 0xF8U   /**< \brief Open-drain, Alternate output function 7. */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   116  } IfxPort_Mode;
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   117  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   118  /** \brief Pin output alternate index
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   119   */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   120  typedef enum
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   121  {
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   122      IfxPort_OutputIdx_general  = 0x10U << 3,
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   123          IfxPort_OutputIdx_alt1 = 0x11U << 3,
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   124          IfxPort_OutputIdx_alt2 = 0x12U << 3,
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   125          IfxPort_OutputIdx_alt3 = 0x13U << 3,
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   126          IfxPort_OutputIdx_alt4 = 0x14U << 3,
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   127          IfxPort_OutputIdx_alt5 = 0x15U << 3,
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   128          IfxPort_OutputIdx_alt6 = 0x16U << 3,
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   129          IfxPort_OutputIdx_alt7 = 0x17U << 3
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   130  } IfxPort_OutputIdx;
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   131  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   132  /** \brief Pin output mode definition
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   133   */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   134  typedef enum
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   135  {
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   136      IfxPort_OutputMode_pushPull      = 0x10U << 3,
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   137          IfxPort_OutputMode_openDrain = 0x18U << 3
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   138  } IfxPort_OutputMode;
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   139  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   140  /** \brief Pad driver mode definition (strength and slew rate).
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   141   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   142   * \see Ifx_P.PDR, IfxPort_setPinPadDriver()
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   143   */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   144  typedef enum
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   145  {
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   146      IfxPort_PadDriver_cmosAutomotiveSpeed1 = 0,  /**< \brief Speed grade 1. */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   147      IfxPort_PadDriver_cmosAutomotiveSpeed2 = 1,  /**< \brief Speed grade 2. */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   148      IfxPort_PadDriver_cmosAutomotiveSpeed3 = 2,  /**< \brief Speed grade 3. */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   149      IfxPort_PadDriver_cmosAutomotiveSpeed4 = 3,  /**< \brief Speed grade 4. */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   150      IfxPort_PadDriver_lvdsSpeed1           = 4,  /**< \brief Lvds Speed grade 1 */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   151      IfxPort_PadDriver_lvdsSpeed2           = 5,  /**< \brief Lvds Speed grade 2 */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   152      IfxPort_PadDriver_lvdsSpeed3           = 6,  /**< \brief Lvds Speed grade 3 */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   153      IfxPort_PadDriver_lvdsSpeed4           = 7,  /**< \brief Lvds Speed grade 4 */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   154      IfxPort_PadDriver_ttlSpeed1            = 8,  /**< \brief Speed grade 1. */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   155      IfxPort_PadDriver_ttlSpeed2            = 9,  /**< \brief Speed grade 2. */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   156      IfxPort_PadDriver_ttlSpeed3            = 10, /**< \brief Speed grade 3. */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   157      IfxPort_PadDriver_ttlSpeed4            = 11  /**< \brief Speed grade 4. */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   158  } IfxPort_PadDriver;
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   159  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   160  /** \brief MODULE_PORTx.LPCRx.B.PS1.Selects between 5v and 3.3v on Vext supply for the LVDSM pair
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   161   */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   162  typedef enum
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   163  {
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   164      IfxPort_PadSupply_5v = 0,  /**< \brief select, 5V supply */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   165      IfxPort_PadSupply_3v = 1   /**< \brief select, 3V supply */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   166  } IfxPort_PadSupply;
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   167  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   168  /** \brief Ifx_P output modification modes definition.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   169   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   170   * \see Ifx_P.OMR, IfxPort_setPinState()
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   171   */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   172  typedef enum
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   173  {
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   174      IfxPort_State_notChanged = (0 << 16) | (0 << 0),  /**< \brief Ifx_P pin is left unchanged. */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   175      IfxPort_State_high       = (0 << 16) | (1U << 0), /**< \brief Ifx_P pin is set to high. */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   176      IfxPort_State_low        = (1U << 16) | (0 << 0), /**< \brief Ifx_P pin is set to low. */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   177      IfxPort_State_toggled    = (1U << 16) | (1U << 0) /**< \brief Ifx_P pin is toggled. */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   178  } IfxPort_State;
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   179  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   180  /** \} */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   181  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   182  /******************************************************************************/
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   183  /*-----------------------------Data Structures--------------------------------*/
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   184  /******************************************************************************/
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   185  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   186  /** \addtogroup IfxLld_Port_Std_DataStructures
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   187   * \{ */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   188  /** \brief Defines a pin
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   189   */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   190  typedef struct
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   191  {
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   192      Ifx_P *port;
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   193      uint8  pinIndex;
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   194  } IfxPort_Pin;
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   195  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   196  /** \brief To configure pins
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   197   */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   198  typedef struct
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   199  {
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   200      Ifx_P            *port;
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   201      uint8             pinIndex;
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   202      IfxPort_OutputIdx mode;
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   203      IfxPort_PadDriver padDriver;
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   204  } IfxPort_Pin_Config;
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   205  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   206  /** \} */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   207  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   208  /** \addtogroup IfxLld_Port_Std_SinglePin
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   209   * \{ */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   210  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   211  /******************************************************************************/
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   212  /*-------------------------Inline Function Prototypes-------------------------*/
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   213  /******************************************************************************/
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   214  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   215  /** \brief Return the port state.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   216   * \param port Pointer to the port which should be accessed.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   217   * \param pinIndex Specifies the pin for which the state should be returned.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   218   * \return Returns TRUE the pin is high; FALSE the pin is low
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   219   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   220   * Coding example:
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   221   * \code
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   222   *    if( IfxPort_getPinState(&MODULE_P33, 0) ) {
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   223   *      // ...
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   224   *    }
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   225   * \endcode
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   226   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   227   */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   228  IFX_INLINE boolean IfxPort_getPinState(Ifx_P *port, uint8 pinIndex);
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   229  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   230  /** \brief Set the port output.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   231   * \param port Pointer to the port which should be accessed.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   232   * \param pinIndex Specifies the pin to be set.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   233   * \return None
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   234   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   235   * Coding example:
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   236   * \code
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   237   * IfxPort_setPinHigh(&MODULE_P33, 0);
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   238   * \endcode
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   239   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   240   * \see IfxPort_setPinState(), IfxPort_setPinLow(), IfxPort_togglePin()
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   241   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   242   */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   243  IFX_INLINE void IfxPort_setPinHigh(Ifx_P *port, uint8 pinIndex);
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   244  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   245  /** \brief Reset the port output.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   246   * \param port Pointer to the port which should be accessed.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   247   * \param pinIndex Specifies the pin to be reset.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   248   * \return None
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   249   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   250   * Coding example:
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   251   * \code
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   252   * IfxPort_setPinLow(&MODULE_P33, 0);
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   253   * \endcode
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   254   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   255   * \see IfxPort_setPinState(), IfxPort_setPinHigh(), IfxPort_togglePin()
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   256   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   257   */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   258  IFX_INLINE void IfxPort_setPinLow(Ifx_P *port, uint8 pinIndex);
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   259  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   260  /** \brief Configure the port input / output mode.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   261   * \param port Pointer to the port which should be accessed.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   262   * \param pinIndex Specifies the pin to be configured.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   263   * \param mode Specifies the port pin mode.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   264   * \return None
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   265   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   266   * Coding example:
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   267   * \code
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   268   *     IfxPort_setPinModeInput(&MODULE_P33, 0, IfxPort_InputMode_pullUp);
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   269   * \endcode
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   270   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   271   */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   272  IFX_INLINE void IfxPort_setPinModeInput(Ifx_P *port, uint8 pinIndex, IfxPort_InputMode mode);
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   273  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   274  /** \brief Configure the port input / output mode.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   275   * \param port Pointer to the port which should be accessed.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   276   * \param pinIndex Specifies the pin to be configured.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   277   * \param mode Specifies the port pin mode.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   278   * \param index Specifies the alternate (or general purpose) output channel.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   279   * \return None
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   280   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   281   * Coding example:
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   282   * \code
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   283   *     IfxPort_setPinModeOutput(&MODULE_P33, 0, IfxPort_OutputMode_pushPull, IfxPort_OutputIdx_general);
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   284   * \endcode
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   285   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   286   */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   287  IFX_INLINE void IfxPort_setPinModeOutput(Ifx_P *port, uint8 pinIndex, IfxPort_OutputMode mode, IfxPort_OutputIdx index);
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   288  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   289  /** \brief Set / Resets / Toggle the port output.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   290   * \param port Pointer to the port which should be accessed.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   291   * \param pinIndex Specifies the pin to modify.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   292   * \param action Specifies the action: set, reset, toggle.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   293   * \return None
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   294   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   295   * Coding example:
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   296   * \code
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   297   * IfxPort_setPinState(&MODULE_P33, 0, IfxPort_State_toggled);
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   298   * IfxPort_setPinState(&MODULE_P33, 0, IfxPort_State_toggled);
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   299   * IfxPort_setPinState(&MODULE_P33, 0, IfxPort_State_toggled);
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   300   * \endcode
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   301   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   302   */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   303  IFX_INLINE void IfxPort_setPinState(Ifx_P *port, uint8 pinIndex, IfxPort_State action);
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   304  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   305  /** \brief Toggle the port output.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   306   * \param port Pointer to the port which should be accessed.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   307   * \param pinIndex Specifies the pin to be toggled.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   308   * \return None
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   309   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   310   * Coding example:
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   311   * \code
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   312   * IfxPort_togglePin(&MODULE_P33, 0);
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   313   * \endcode
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   314   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   315   * \see IfxPort_setPinState(), IfxPort_setPinLow(), IfxPort_setPinHigh()
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   316   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   317   */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   318  IFX_INLINE void IfxPort_togglePin(Ifx_P *port, uint8 pinIndex);
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   319  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   320  /******************************************************************************/
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   321  /*-------------------------Global Function Prototypes-------------------------*/
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   322  /******************************************************************************/
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   323  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   324  /** \brief Disable the emergency stop function.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   325   * This function disables the emergency stop function. A check is done on port functionality.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   326   * \param port Pointer to the port which should be accessed.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   327   * \param pinIndex Specifies the pin for which the emergency stop function should be disabled.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   328   * \return Returns TRUE if the emergency stop function has been disabled; FALSE if the emergency stop function could not be disabled
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   329   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   330   * Coding example:
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   331   * /code
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   332   *     if( !IfxPort_disableEmergencyStop(&MODULE_P33, 0) )
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   333   *     {
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   334   *         // failed to disable emergency stop for P33.0
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   335   *     }
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   336   * /endcode
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   337   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   338   * \see IfxPort_disableEmergencyStop(), IfxPort_resetESR()
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   339   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   340   */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   341  IFX_EXTERN boolean IfxPort_disableEmergencyStop(Ifx_P *port, uint8 pinIndex);
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   342  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   343  /** \brief Enable the emergency stop function.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   344   * This function enables the emergency stop function. A check is done on port functionality.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   345   * \param port Pointer to the port which should be accessed.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   346   * \param pinIndex Specifies the pin for which the emergency stop function should be enabled.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   347   * \return Returns TRUE if the emergency stop function has been enabled; FALSE if the emergency stop function could not be enabled
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   348   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   349   * Coding example:
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   350   * \code
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   351   *     if( !IfxPort_enableEmergencyStop(&MODULE_P33, 0) ) {
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   352   *       // failed to enable emergency stop for P33.0
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   353   *     }
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   354   * \endcode
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   355   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   356   * \see IfxPort_disableEmergencyStop(), IfxPort_setESR()
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   357   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   358   */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   359  IFX_EXTERN boolean IfxPort_enableEmergencyStop(Ifx_P *port, uint8 pinIndex);
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   360  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   361  /** \brief Configure the port input / output mode.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   362   * Also Configures the P40/P41 Port for digital functionality
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   363   * which bydefault support analog functionality.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   364   * \param port Pointer to the port which should be accessed.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   365   * \param pinIndex Specifies the pin to be configured.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   366   * \param mode Specifies the port pin mode.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   367   * \return None
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   368   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   369   * Coding example:
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   370   * \code
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   371   *     IfxPort_setPinMode(&MODULE_P33, 0, IfxPort_Mode_outputPushPullGeneral);
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   372   * \endcode
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   373   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   374   */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   375  IFX_EXTERN void IfxPort_setPinMode(Ifx_P *port, uint8 pinIndex, IfxPort_Mode mode);
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   376  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   377  /** \brief Configure the pad driver mode.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   378   * \param port Pointer to the port which should be accessed.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   379   * \param pinIndex Specifies the pin for which the mode will be set.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   380   * \param padDriver Specifies the driver mode.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   381   * \return None
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   382   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   383   * Coding example:
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   384   * \code
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   385   * // enable strong 3.3V driver
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   386   * IfxPort_setPinPadDriver(&MODULE_P33, 0, IfxPort_PadDriver_cmosAutomotiveSpeed1);
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   387   * \endcode
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   388   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   389   */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   390  IFX_EXTERN void IfxPort_setPinPadDriver(Ifx_P *port, uint8 pinIndex, IfxPort_PadDriver padDriver);
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   391  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   392  /** \} */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   393  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   394  /** \addtogroup IfxLld_Port_Std_PortGroup
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   395   * \{ */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   396  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   397  /******************************************************************************/
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   398  /*-------------------------Inline Function Prototypes-------------------------*/
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   399  /******************************************************************************/
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   400  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   401  /** \brief Return the port group state
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   402   * \param port Pointer to the port which should be accessed.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   403   * \param pinIndex start at the given pin
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   404   * \param mask selects the pins which should be read (starting from pinIndex)
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   405   * \return Returns the selected pin values
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   406   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   407   * Coding example:
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   408   * \code
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   409   * // read the current value of P33[7:0]
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   410   * uint16 value = IfxPort_getGroupState(&MODULE_P33, 0, 0xff);
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   411   * \endcode
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   412   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   413   */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   414  IFX_INLINE uint32 IfxPort_getGroupState(Ifx_P *port, uint8 pinIndex, uint16 mask);
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   415  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   416  /** \brief Set the port group state.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   417   * \param port Pointer to the port which should be accessed.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   418   * \param pinIndex start at the given pin
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   419   * \param mask selects the pins which should be modified (starting from pinIndex)
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   420   * \param data specifies the value which should be set
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   421   * \return None
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   422   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   423   * Coding example:
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   424   * \code
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   425   * // configure P33.[7:0] as GPIO outputs
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   426   * IfxPort_setGroupModeOutput(&MODULE_P33, 0, 0xff, IfxPort_OutputMode_pushPull, IfxPort_OutputIdx_general);
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   427   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   428   * // set initial value
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   429   * IfxPort_setGroupState(&MODULE_P33, 0, 0xff, 0x42);
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   430   * \endcode
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   431   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   432   */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   433  IFX_INLINE void IfxPort_setGroupState(Ifx_P *port, uint8 pinIndex, uint16 mask, uint16 data);
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   434  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   435  /******************************************************************************/
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   436  /*-------------------------Global Function Prototypes-------------------------*/
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   437  /******************************************************************************/
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   438  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   439  /** \brief Returns the module address of the selected Port module
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   440   * \param port Pointer to PORT module registers
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   441   * \return PORT module register address
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   442   */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   443  IFX_EXTERN Ifx_P *IfxPort_getAddress(IfxPort_Index port);
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   444  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   445  /** \brief Return port index within IfxModule_IndexMap (defined in IfxPort_cfg.c)
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   446   * \param port Pointer to the port for which the index number in IfxModule_IndexMap should be retrieved.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   447   * \return port index of IfxModule_IndexMap. return -1 in case of unknown port index.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   448   */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   449  IFX_EXTERN IfxPort_Index IfxPort_getIndex(Ifx_P *port);
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   450  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   451  /** \brief Set pin modes to input at the pin location specified by '1' by the mask
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   452   * \param port Pointer to the port which should be accessed.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   453   * \param pinIndex start at the given pin
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   454   * \param mask selects the pins which should be modified (starting from pinIndex)
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   455   * \param mode Specifies the port pin mode.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   456   * \return None
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   457   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   458   * Coding example:
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   459   * \code
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   460   * // configure P33.[7:0] as GPIO inputs with Pull-Down enabled
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   461   * IfxPort_setGroupModeInput(&MODULE_P33, 0, 0xff, IfxPort_InputMode_pullDown);
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   462   *  \endcode
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   463   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   464   */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   465  IFX_EXTERN void IfxPort_setGroupModeInput(Ifx_P *port, uint8 pinIndex, uint16 mask, IfxPort_InputMode mode);
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   466  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   467  /** \brief Set pin modes to output at the pin location specified by '1' by the mask starting at pinIndex
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   468   * \param port Pointer to the port which should be accessed.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   469   * \param pinIndex start at the given pin
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   470   * \param mask selects the pins which should be modified (starting from pinIndex)
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   471   * \param mode Specifies the port pin mode.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   472   * \param index Specifies the alternate (or general purpose) output channel.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   473   * \return None
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   474   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   475   * Coding example:
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   476   * \code
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   477   * // configure P33.[7:0] as GPIO outputs
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   478   * IfxPort_setGroupModeOutput(&MODULE_P33, 0, 0xff, IfxPort_OutputMode_pushPull, IfxPort_OutputIdx_general);
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   479   * \endcode
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   480   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   481   */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   482  IFX_EXTERN void IfxPort_setGroupModeOutput(Ifx_P *port, uint8 pinIndex, uint16 mask, IfxPort_OutputMode mode, IfxPort_OutputIdx index);
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   483  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   484  /** \brief Set pad driver strength at the pin location specified by '1' by the mask
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   485   * \param port Pointer to the port which should be accessed.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   486   * \param pinIndex start at the given pin
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   487   * \param mask selects the pins which should be modified (starting from pinIndex)
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   488   * \param padDriver Specifies the pad driver strength.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   489   * \return None
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   490   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   491   * Coding example:
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   492   * \code
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   493   * // configure P33.[7:0] to use CMOS pad driver with speed 1
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   494   * IfxPort_setGroupPadDriver(&MODULE_P33, 0, 0xff, IfxPort_PadDriver_cmosAutomotiveSpeed1);
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   495   * \endcode
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   496   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   497   */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   498  IFX_EXTERN void IfxPort_setGroupPadDriver(Ifx_P *port, uint8 pinIndex, uint16 mask, IfxPort_PadDriver padDriver);
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   499  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   500  /** \brief set LVDSH mode (configured for Port21)
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   501   * \param port Pointer to the port which should be accessed.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   502   * \param pinIndex specifies pin  to be modified
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   503   * \param mode specifes the mode of pin
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   504   * \param enablePortControlled specifies whether it is controlled by port or HSCT
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   505   * \return None
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   506   */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   507  IFX_EXTERN void IfxPort_setPinModeLvdsHigh(Ifx_P *port, uint8 pinIndex, IfxPort_Mode mode, IfxPort_ControlledBy enablePortControlled);
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   508  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   509  /** \brief set LVDSM mode
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   510   * \param port Pointer to the port which should be accessed.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   511   * \param pinIndex specifies pin to be modified
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   512   * \param lvdsPadDriver select speed grade of LVDS Pad
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   513   * \param padSupply select the PAD supply (5/3.3V)
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   514   * \return None
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   515   */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   516  IFX_EXTERN void IfxPort_setPinModeLvdsMedium(Ifx_P *port, uint8 pinIndex, IfxPort_PadDriver lvdsPadDriver, IfxPort_PadSupply padSupply);
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   517  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   518  /** \} */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   519  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   520  /******************************************************************************/
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   521  /*-------------------------Global Function Prototypes-------------------------*/
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   522  /******************************************************************************/
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   523  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   524  /** \brief Disable the emergency stop function.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   525   * This function disables the emergency stop function. No check is done on port functionality.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   526   * \param port Pointer to the port which should be accessed.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   527   * \param pinIndex Specifies the pin for which the emergency stop function should be disabled.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   528   * \return None
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   529   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   530   * \see IfxPort_disableEmergencyStop()
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   531   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   532   */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   533  IFX_EXTERN void IfxPort_resetESR(Ifx_P *port, uint8 pinIndex);
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   534  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   535  /** \brief Enable the emergency stop function.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   536   * This function enables the emergency stop function. No check is done on port functionality.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   537   * \param port Pointer to the port which should be accessed.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   538   * \param pinIndex Specifies the pin for which the emergency stop function should be enabled.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   539   * \return None
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   540   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   541   * \see IfxPort_enableEmergencyStop()
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   542   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   543   */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   544  IFX_EXTERN void IfxPort_setESR(Ifx_P *port, uint8 pinIndex);
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   545  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   546  /******************************************************************************/
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   547  /*---------------------Inline Function Implementations------------------------*/
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   548  /******************************************************************************/
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   549  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   550  IFX_INLINE uint32 IfxPort_getGroupState(Ifx_P *port, uint8 pinIndex, uint16 mask)
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   551  {
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   552      return (uint32)((port->IN.U) >> (pinIndex)) & mask;
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   553  }
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   554  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   555  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   556  IFX_INLINE boolean IfxPort_getPinState(Ifx_P *port, uint8 pinIndex)
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   557  {
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   558      return (__getbit(&port->IN.U, pinIndex) != 0) ? TRUE : FALSE;
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   559  }
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   560  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   561  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   562  IFX_INLINE void IfxPort_setGroupState(Ifx_P *port, uint8 pinIndex, uint16 mask, uint16 data)
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   563  {
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   564      port->OUT.U = (port->OUT.U & ~((uint32)(mask)) << pinIndex) | (data << pinIndex);
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   565  }
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   566  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   567  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   568  IFX_INLINE void IfxPort_setPinHigh(Ifx_P *port, uint8 pinIndex)
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   569  {
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   570      IfxPort_setPinState(port, pinIndex, IfxPort_State_high);
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   571  }
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   572  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   573  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   574  IFX_INLINE void IfxPort_setPinLow(Ifx_P *port, uint8 pinIndex)
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   575  {
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   576      IfxPort_setPinState(port, pinIndex, IfxPort_State_low);
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   577  }
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   578  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   579  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   580  IFX_INLINE void IfxPort_setPinModeInput(Ifx_P *port, uint8 pinIndex, IfxPort_InputMode mode)
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   581  {
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   582      IfxPort_setPinMode(port, pinIndex, (IfxPort_Mode)mode);
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   583  }
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   584  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   585  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   586  IFX_INLINE void IfxPort_setPinModeOutput(Ifx_P *port, uint8 pinIndex, IfxPort_OutputMode mode, IfxPort_OutputIdx index)
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   587  {
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   588      IfxPort_setPinMode(port, pinIndex, (IfxPort_Mode)(index | mode));
	or	d5,d15,#192
	ld.bu	d4,[a12]8
.L527:

; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	     1  /**
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	     2   * \file IfxPort.h
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	     3   * \brief PORT  basic functionality
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	     4   * \ingroup IfxLld_Port
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	     5   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	     6   * \version iLLD_1_0_1_11_0
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	     7   * \copyright Copyright (c) 2018 Infineon Technologies AG. All rights reserved.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	     8   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	     9   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    10   *                                 IMPORTANT NOTICE
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    11   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    12   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    13   * Use of this file is subject to the terms of use agreed between (i) you or 
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    14   * the company in which ordinary course of business you are acting and (ii) 
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    15   * Infineon Technologies AG or its licensees. If and as long as no such 
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    16   * terms of use are agreed, use of this file is subject to following:
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    17  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    18  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    19   * Boost Software License - Version 1.0 - August 17th, 2003
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    20  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    21   * Permission is hereby granted, free of charge, to any person or 
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    22   * organization obtaining a copy of the software and accompanying 
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    23   * documentation covered by this license (the "Software") to use, reproduce,
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    24   * display, distribute, execute, and transmit the Software, and to prepare
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    25   * derivative works of the Software, and to permit third-parties to whom the 
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    26   * Software is furnished to do so, all subject to the following:
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    27  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    28   * The copyright notices in the Software and this entire statement, including
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    29   * the above license grant, this restriction and the following disclaimer, must
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    30   * be included in all copies of the Software, in whole or in part, and all
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    31   * derivative works of the Software, unless such copies or derivative works are
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    32   * solely in the form of machine-executable object code generated by a source
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    33   * language processor.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    34  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    35   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR 
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    36   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    37   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    38   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE 
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    39   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    40   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    41   * DEALINGS IN THE SOFTWARE.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    42  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    43   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    44   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    45   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    46   * \defgroup IfxLld_Port_Std_Enum Enumerations
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    47   * \ingroup IfxLld_Port_Std
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    48   * \defgroup IfxLld_Port_Std_DataStructures Data structures
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    49   * \ingroup IfxLld_Port_Std
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    50   * \defgroup IfxLld_Port_Std_SinglePin Single Pin Functions
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    51   * \ingroup IfxLld_Port_Std
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    52   * \defgroup IfxLld_Port_Std_PortGroup Group Access Functions
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    53   * \ingroup IfxLld_Port_Std
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    54   */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    55  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    56  #ifndef IFXPORT_H
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    57  #define IFXPORT_H 1
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    58  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    59  /******************************************************************************/
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    60  /*----------------------------------Includes----------------------------------*/
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    61  /******************************************************************************/
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    62  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    63  #include "_Impl/IfxPort_cfg.h"
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    64  #include "Scu/Std/IfxScuWdt.h"
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    65  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    66  /******************************************************************************/
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    67  /*--------------------------------Enumerations--------------------------------*/
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    68  /******************************************************************************/
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    69  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    70  /** \addtogroup IfxLld_Port_Std_Enum
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    71   * \{ */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    72  /** \brief The LVDS RX_DIS control function can be selected from the Port (default) or
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    73   * HSCT module.declared in MODULE_PORTx.LPCRx
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    74   */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    75  typedef enum
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    76  {
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    77      IfxPort_ControlledBy_port = 0,  /**< \brief port controlled by PORT Module */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    78      IfxPort_ControlledBy_hsct = 1   /**< \brief Port controlled by HSCT Module */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    79  } IfxPort_ControlledBy;
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    80  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    81  /** \brief Ifx_P output modification modes definition.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    82   */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    83  typedef enum
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    84  {
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    85      IfxPort_InputMode_undefined    = -1,
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    86      IfxPort_InputMode_noPullDevice = 0 << 3,
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    87          IfxPort_InputMode_pullDown = 1U << 3,
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    88          IfxPort_InputMode_pullUp   = 2U << 3  /**< \brief  */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    89  } IfxPort_InputMode;
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    90  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    91  /** \brief Ifx_P input / output mode definition.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    92   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    93   * \see Ifx_P.IOCR, IfxPort_setPinMode()
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    94   */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    95  typedef enum
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    96  {
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    97      IfxPort_Mode_inputNoPullDevice      = 0,      /**< \brief Input, No pull device connected. */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    98      IfxPort_Mode_inputPullDown          = 8U,     /**< \brief Input, pull-down device connected. */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	    99      IfxPort_Mode_inputPullUp            = 0x10U,  /**< \brief Input, pull-up device connected. */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   100      IfxPort_Mode_outputPushPullGeneral  = 0x80U,  /**< \brief Push-pull, General-purpose output */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   101      IfxPort_Mode_outputPushPullAlt1     = 0x88U,  /**< \brief Push-pull, Alternate output function 1. */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   102      IfxPort_Mode_outputPushPullAlt2     = 0x90U,  /**< \brief Push-pull, Alternate output function 2. */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   103      IfxPort_Mode_outputPushPullAlt3     = 0x98U,  /**< \brief Push-pull, Alternate output function 3. */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   104      IfxPort_Mode_outputPushPullAlt4     = 0xA0U,  /**< \brief Push-pull, Alternate output function 4. */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   105      IfxPort_Mode_outputPushPullAlt5     = 0xA8U,  /**< \brief Push-pull, Alternate output function 5. */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   106      IfxPort_Mode_outputPushPullAlt6     = 0xB0U,  /**< \brief Push-pull, Alternate output function 6. */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   107      IfxPort_Mode_outputPushPullAlt7     = 0xB8U,  /**< \brief Push-pull, Alternate output function 7. */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   108      IfxPort_Mode_outputOpenDrainGeneral = 0xC0U,  /**< \brief Open-drain, General-purpose output. */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   109      IfxPort_Mode_outputOpenDrainAlt1    = 0xC8U,  /**< \brief Open-drain, Alternate output function 1. */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   110      IfxPort_Mode_outputOpenDrainAlt2    = 0xD0U,  /**< \brief Open-drain, Alternate output function 2. */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   111      IfxPort_Mode_outputOpenDrainAlt3    = 0xD8U,  /**< \brief Open-drain, Alternate output function 3. */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   112      IfxPort_Mode_outputOpenDrainAlt4    = 0xE0U,  /**< \brief Open-drain, Alternate output function 4. */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   113      IfxPort_Mode_outputOpenDrainAlt5    = 0xE8U,  /**< \brief Open-drain, Alternate output function 5. */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   114      IfxPort_Mode_outputOpenDrainAlt6    = 0xF0U,  /**< \brief Open-drain, Alternate output function 6. */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   115      IfxPort_Mode_outputOpenDrainAlt7    = 0xF8U   /**< \brief Open-drain, Alternate output function 7. */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   116  } IfxPort_Mode;
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   117  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   118  /** \brief Pin output alternate index
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   119   */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   120  typedef enum
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   121  {
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   122      IfxPort_OutputIdx_general  = 0x10U << 3,
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   123          IfxPort_OutputIdx_alt1 = 0x11U << 3,
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   124          IfxPort_OutputIdx_alt2 = 0x12U << 3,
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   125          IfxPort_OutputIdx_alt3 = 0x13U << 3,
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   126          IfxPort_OutputIdx_alt4 = 0x14U << 3,
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   127          IfxPort_OutputIdx_alt5 = 0x15U << 3,
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   128          IfxPort_OutputIdx_alt6 = 0x16U << 3,
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   129          IfxPort_OutputIdx_alt7 = 0x17U << 3
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   130  } IfxPort_OutputIdx;
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   131  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   132  /** \brief Pin output mode definition
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   133   */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   134  typedef enum
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   135  {
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   136      IfxPort_OutputMode_pushPull      = 0x10U << 3,
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   137          IfxPort_OutputMode_openDrain = 0x18U << 3
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   138  } IfxPort_OutputMode;
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   139  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   140  /** \brief Pad driver mode definition (strength and slew rate).
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   141   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   142   * \see Ifx_P.PDR, IfxPort_setPinPadDriver()
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   143   */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   144  typedef enum
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   145  {
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   146      IfxPort_PadDriver_cmosAutomotiveSpeed1 = 0,  /**< \brief Speed grade 1. */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   147      IfxPort_PadDriver_cmosAutomotiveSpeed2 = 1,  /**< \brief Speed grade 2. */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   148      IfxPort_PadDriver_cmosAutomotiveSpeed3 = 2,  /**< \brief Speed grade 3. */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   149      IfxPort_PadDriver_cmosAutomotiveSpeed4 = 3,  /**< \brief Speed grade 4. */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   150      IfxPort_PadDriver_lvdsSpeed1           = 4,  /**< \brief Lvds Speed grade 1 */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   151      IfxPort_PadDriver_lvdsSpeed2           = 5,  /**< \brief Lvds Speed grade 2 */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   152      IfxPort_PadDriver_lvdsSpeed3           = 6,  /**< \brief Lvds Speed grade 3 */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   153      IfxPort_PadDriver_lvdsSpeed4           = 7,  /**< \brief Lvds Speed grade 4 */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   154      IfxPort_PadDriver_ttlSpeed1            = 8,  /**< \brief Speed grade 1. */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   155      IfxPort_PadDriver_ttlSpeed2            = 9,  /**< \brief Speed grade 2. */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   156      IfxPort_PadDriver_ttlSpeed3            = 10, /**< \brief Speed grade 3. */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   157      IfxPort_PadDriver_ttlSpeed4            = 11  /**< \brief Speed grade 4. */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   158  } IfxPort_PadDriver;
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   159  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   160  /** \brief MODULE_PORTx.LPCRx.B.PS1.Selects between 5v and 3.3v on Vext supply for the LVDSM pair
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   161   */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   162  typedef enum
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   163  {
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   164      IfxPort_PadSupply_5v = 0,  /**< \brief select, 5V supply */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   165      IfxPort_PadSupply_3v = 1   /**< \brief select, 3V supply */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   166  } IfxPort_PadSupply;
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   167  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   168  /** \brief Ifx_P output modification modes definition.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   169   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   170   * \see Ifx_P.OMR, IfxPort_setPinState()
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   171   */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   172  typedef enum
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   173  {
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   174      IfxPort_State_notChanged = (0 << 16) | (0 << 0),  /**< \brief Ifx_P pin is left unchanged. */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   175      IfxPort_State_high       = (0 << 16) | (1U << 0), /**< \brief Ifx_P pin is set to high. */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   176      IfxPort_State_low        = (1U << 16) | (0 << 0), /**< \brief Ifx_P pin is set to low. */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   177      IfxPort_State_toggled    = (1U << 16) | (1U << 0) /**< \brief Ifx_P pin is toggled. */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   178  } IfxPort_State;
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   179  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   180  /** \} */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   181  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   182  /******************************************************************************/
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   183  /*-----------------------------Data Structures--------------------------------*/
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   184  /******************************************************************************/
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   185  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   186  /** \addtogroup IfxLld_Port_Std_DataStructures
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   187   * \{ */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   188  /** \brief Defines a pin
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   189   */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   190  typedef struct
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   191  {
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   192      Ifx_P *port;
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   193      uint8  pinIndex;
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   194  } IfxPort_Pin;
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   195  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   196  /** \brief To configure pins
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   197   */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   198  typedef struct
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   199  {
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   200      Ifx_P            *port;
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   201      uint8             pinIndex;
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   202      IfxPort_OutputIdx mode;
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   203      IfxPort_PadDriver padDriver;
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   204  } IfxPort_Pin_Config;
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   205  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   206  /** \} */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   207  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   208  /** \addtogroup IfxLld_Port_Std_SinglePin
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   209   * \{ */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   210  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   211  /******************************************************************************/
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   212  /*-------------------------Inline Function Prototypes-------------------------*/
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   213  /******************************************************************************/
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   214  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   215  /** \brief Return the port state.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   216   * \param port Pointer to the port which should be accessed.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   217   * \param pinIndex Specifies the pin for which the state should be returned.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   218   * \return Returns TRUE the pin is high; FALSE the pin is low
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   219   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   220   * Coding example:
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   221   * \code
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   222   *    if( IfxPort_getPinState(&MODULE_P33, 0) ) {
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   223   *      // ...
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   224   *    }
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   225   * \endcode
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   226   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   227   */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   228  IFX_INLINE boolean IfxPort_getPinState(Ifx_P *port, uint8 pinIndex);
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   229  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   230  /** \brief Set the port output.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   231   * \param port Pointer to the port which should be accessed.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   232   * \param pinIndex Specifies the pin to be set.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   233   * \return None
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   234   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   235   * Coding example:
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   236   * \code
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   237   * IfxPort_setPinHigh(&MODULE_P33, 0);
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   238   * \endcode
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   239   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   240   * \see IfxPort_setPinState(), IfxPort_setPinLow(), IfxPort_togglePin()
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   241   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   242   */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   243  IFX_INLINE void IfxPort_setPinHigh(Ifx_P *port, uint8 pinIndex);
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   244  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   245  /** \brief Reset the port output.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   246   * \param port Pointer to the port which should be accessed.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   247   * \param pinIndex Specifies the pin to be reset.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   248   * \return None
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   249   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   250   * Coding example:
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   251   * \code
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   252   * IfxPort_setPinLow(&MODULE_P33, 0);
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   253   * \endcode
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   254   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   255   * \see IfxPort_setPinState(), IfxPort_setPinHigh(), IfxPort_togglePin()
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   256   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   257   */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   258  IFX_INLINE void IfxPort_setPinLow(Ifx_P *port, uint8 pinIndex);
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   259  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   260  /** \brief Configure the port input / output mode.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   261   * \param port Pointer to the port which should be accessed.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   262   * \param pinIndex Specifies the pin to be configured.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   263   * \param mode Specifies the port pin mode.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   264   * \return None
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   265   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   266   * Coding example:
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   267   * \code
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   268   *     IfxPort_setPinModeInput(&MODULE_P33, 0, IfxPort_InputMode_pullUp);
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   269   * \endcode
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   270   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   271   */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   272  IFX_INLINE void IfxPort_setPinModeInput(Ifx_P *port, uint8 pinIndex, IfxPort_InputMode mode);
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   273  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   274  /** \brief Configure the port input / output mode.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   275   * \param port Pointer to the port which should be accessed.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   276   * \param pinIndex Specifies the pin to be configured.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   277   * \param mode Specifies the port pin mode.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   278   * \param index Specifies the alternate (or general purpose) output channel.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   279   * \return None
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   280   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   281   * Coding example:
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   282   * \code
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   283   *     IfxPort_setPinModeOutput(&MODULE_P33, 0, IfxPort_OutputMode_pushPull, IfxPort_OutputIdx_general);
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   284   * \endcode
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   285   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   286   */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   287  IFX_INLINE void IfxPort_setPinModeOutput(Ifx_P *port, uint8 pinIndex, IfxPort_OutputMode mode, IfxPort_OutputIdx index);
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   288  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   289  /** \brief Set / Resets / Toggle the port output.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   290   * \param port Pointer to the port which should be accessed.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   291   * \param pinIndex Specifies the pin to modify.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   292   * \param action Specifies the action: set, reset, toggle.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   293   * \return None
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   294   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   295   * Coding example:
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   296   * \code
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   297   * IfxPort_setPinState(&MODULE_P33, 0, IfxPort_State_toggled);
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   298   * IfxPort_setPinState(&MODULE_P33, 0, IfxPort_State_toggled);
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   299   * IfxPort_setPinState(&MODULE_P33, 0, IfxPort_State_toggled);
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   300   * \endcode
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   301   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   302   */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   303  IFX_INLINE void IfxPort_setPinState(Ifx_P *port, uint8 pinIndex, IfxPort_State action);
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   304  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   305  /** \brief Toggle the port output.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   306   * \param port Pointer to the port which should be accessed.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   307   * \param pinIndex Specifies the pin to be toggled.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   308   * \return None
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   309   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   310   * Coding example:
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   311   * \code
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   312   * IfxPort_togglePin(&MODULE_P33, 0);
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   313   * \endcode
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   314   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   315   * \see IfxPort_setPinState(), IfxPort_setPinLow(), IfxPort_setPinHigh()
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   316   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   317   */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   318  IFX_INLINE void IfxPort_togglePin(Ifx_P *port, uint8 pinIndex);
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   319  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   320  /******************************************************************************/
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   321  /*-------------------------Global Function Prototypes-------------------------*/
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   322  /******************************************************************************/
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   323  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   324  /** \brief Disable the emergency stop function.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   325   * This function disables the emergency stop function. A check is done on port functionality.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   326   * \param port Pointer to the port which should be accessed.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   327   * \param pinIndex Specifies the pin for which the emergency stop function should be disabled.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   328   * \return Returns TRUE if the emergency stop function has been disabled; FALSE if the emergency stop function could not be disabled
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   329   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   330   * Coding example:
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   331   * /code
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   332   *     if( !IfxPort_disableEmergencyStop(&MODULE_P33, 0) )
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   333   *     {
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   334   *         // failed to disable emergency stop for P33.0
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   335   *     }
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   336   * /endcode
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   337   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   338   * \see IfxPort_disableEmergencyStop(), IfxPort_resetESR()
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   339   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   340   */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   341  IFX_EXTERN boolean IfxPort_disableEmergencyStop(Ifx_P *port, uint8 pinIndex);
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   342  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   343  /** \brief Enable the emergency stop function.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   344   * This function enables the emergency stop function. A check is done on port functionality.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   345   * \param port Pointer to the port which should be accessed.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   346   * \param pinIndex Specifies the pin for which the emergency stop function should be enabled.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   347   * \return Returns TRUE if the emergency stop function has been enabled; FALSE if the emergency stop function could not be enabled
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   348   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   349   * Coding example:
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   350   * \code
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   351   *     if( !IfxPort_enableEmergencyStop(&MODULE_P33, 0) ) {
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   352   *       // failed to enable emergency stop for P33.0
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   353   *     }
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   354   * \endcode
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   355   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   356   * \see IfxPort_disableEmergencyStop(), IfxPort_setESR()
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   357   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   358   */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   359  IFX_EXTERN boolean IfxPort_enableEmergencyStop(Ifx_P *port, uint8 pinIndex);
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   360  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   361  /** \brief Configure the port input / output mode.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   362   * Also Configures the P40/P41 Port for digital functionality
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   363   * which bydefault support analog functionality.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   364   * \param port Pointer to the port which should be accessed.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   365   * \param pinIndex Specifies the pin to be configured.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   366   * \param mode Specifies the port pin mode.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   367   * \return None
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   368   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   369   * Coding example:
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   370   * \code
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   371   *     IfxPort_setPinMode(&MODULE_P33, 0, IfxPort_Mode_outputPushPullGeneral);
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   372   * \endcode
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   373   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   374   */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   375  IFX_EXTERN void IfxPort_setPinMode(Ifx_P *port, uint8 pinIndex, IfxPort_Mode mode);
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   376  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   377  /** \brief Configure the pad driver mode.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   378   * \param port Pointer to the port which should be accessed.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   379   * \param pinIndex Specifies the pin for which the mode will be set.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   380   * \param padDriver Specifies the driver mode.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   381   * \return None
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   382   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   383   * Coding example:
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   384   * \code
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   385   * // enable strong 3.3V driver
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   386   * IfxPort_setPinPadDriver(&MODULE_P33, 0, IfxPort_PadDriver_cmosAutomotiveSpeed1);
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   387   * \endcode
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   388   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   389   */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   390  IFX_EXTERN void IfxPort_setPinPadDriver(Ifx_P *port, uint8 pinIndex, IfxPort_PadDriver padDriver);
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   391  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   392  /** \} */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   393  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   394  /** \addtogroup IfxLld_Port_Std_PortGroup
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   395   * \{ */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   396  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   397  /******************************************************************************/
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   398  /*-------------------------Inline Function Prototypes-------------------------*/
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   399  /******************************************************************************/
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   400  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   401  /** \brief Return the port group state
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   402   * \param port Pointer to the port which should be accessed.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   403   * \param pinIndex start at the given pin
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   404   * \param mask selects the pins which should be read (starting from pinIndex)
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   405   * \return Returns the selected pin values
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   406   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   407   * Coding example:
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   408   * \code
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   409   * // read the current value of P33[7:0]
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   410   * uint16 value = IfxPort_getGroupState(&MODULE_P33, 0, 0xff);
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   411   * \endcode
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   412   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   413   */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   414  IFX_INLINE uint32 IfxPort_getGroupState(Ifx_P *port, uint8 pinIndex, uint16 mask);
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   415  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   416  /** \brief Set the port group state.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   417   * \param port Pointer to the port which should be accessed.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   418   * \param pinIndex start at the given pin
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   419   * \param mask selects the pins which should be modified (starting from pinIndex)
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   420   * \param data specifies the value which should be set
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   421   * \return None
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   422   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   423   * Coding example:
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   424   * \code
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   425   * // configure P33.[7:0] as GPIO outputs
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   426   * IfxPort_setGroupModeOutput(&MODULE_P33, 0, 0xff, IfxPort_OutputMode_pushPull, IfxPort_OutputIdx_general);
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   427   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   428   * // set initial value
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   429   * IfxPort_setGroupState(&MODULE_P33, 0, 0xff, 0x42);
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   430   * \endcode
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   431   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   432   */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   433  IFX_INLINE void IfxPort_setGroupState(Ifx_P *port, uint8 pinIndex, uint16 mask, uint16 data);
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   434  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   435  /******************************************************************************/
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   436  /*-------------------------Global Function Prototypes-------------------------*/
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   437  /******************************************************************************/
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   438  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   439  /** \brief Returns the module address of the selected Port module
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   440   * \param port Pointer to PORT module registers
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   441   * \return PORT module register address
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   442   */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   443  IFX_EXTERN Ifx_P *IfxPort_getAddress(IfxPort_Index port);
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   444  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   445  /** \brief Return port index within IfxModule_IndexMap (defined in IfxPort_cfg.c)
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   446   * \param port Pointer to the port for which the index number in IfxModule_IndexMap should be retrieved.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   447   * \return port index of IfxModule_IndexMap. return -1 in case of unknown port index.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   448   */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   449  IFX_EXTERN IfxPort_Index IfxPort_getIndex(Ifx_P *port);
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   450  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   451  /** \brief Set pin modes to input at the pin location specified by '1' by the mask
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   452   * \param port Pointer to the port which should be accessed.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   453   * \param pinIndex start at the given pin
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   454   * \param mask selects the pins which should be modified (starting from pinIndex)
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   455   * \param mode Specifies the port pin mode.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   456   * \return None
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   457   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   458   * Coding example:
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   459   * \code
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   460   * // configure P33.[7:0] as GPIO inputs with Pull-Down enabled
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   461   * IfxPort_setGroupModeInput(&MODULE_P33, 0, 0xff, IfxPort_InputMode_pullDown);
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   462   *  \endcode
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   463   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   464   */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   465  IFX_EXTERN void IfxPort_setGroupModeInput(Ifx_P *port, uint8 pinIndex, uint16 mask, IfxPort_InputMode mode);
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   466  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   467  /** \brief Set pin modes to output at the pin location specified by '1' by the mask starting at pinIndex
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   468   * \param port Pointer to the port which should be accessed.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   469   * \param pinIndex start at the given pin
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   470   * \param mask selects the pins which should be modified (starting from pinIndex)
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   471   * \param mode Specifies the port pin mode.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   472   * \param index Specifies the alternate (or general purpose) output channel.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   473   * \return None
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   474   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   475   * Coding example:
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   476   * \code
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   477   * // configure P33.[7:0] as GPIO outputs
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   478   * IfxPort_setGroupModeOutput(&MODULE_P33, 0, 0xff, IfxPort_OutputMode_pushPull, IfxPort_OutputIdx_general);
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   479   * \endcode
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   480   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   481   */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   482  IFX_EXTERN void IfxPort_setGroupModeOutput(Ifx_P *port, uint8 pinIndex, uint16 mask, IfxPort_OutputMode mode, IfxPort_OutputIdx index);
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   483  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   484  /** \brief Set pad driver strength at the pin location specified by '1' by the mask
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   485   * \param port Pointer to the port which should be accessed.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   486   * \param pinIndex start at the given pin
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   487   * \param mask selects the pins which should be modified (starting from pinIndex)
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   488   * \param padDriver Specifies the pad driver strength.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   489   * \return None
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   490   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   491   * Coding example:
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   492   * \code
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   493   * // configure P33.[7:0] to use CMOS pad driver with speed 1
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   494   * IfxPort_setGroupPadDriver(&MODULE_P33, 0, 0xff, IfxPort_PadDriver_cmosAutomotiveSpeed1);
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   495   * \endcode
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   496   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   497   */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   498  IFX_EXTERN void IfxPort_setGroupPadDriver(Ifx_P *port, uint8 pinIndex, uint16 mask, IfxPort_PadDriver padDriver);
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   499  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   500  /** \brief set LVDSH mode (configured for Port21)
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   501   * \param port Pointer to the port which should be accessed.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   502   * \param pinIndex specifies pin  to be modified
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   503   * \param mode specifes the mode of pin
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   504   * \param enablePortControlled specifies whether it is controlled by port or HSCT
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   505   * \return None
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   506   */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   507  IFX_EXTERN void IfxPort_setPinModeLvdsHigh(Ifx_P *port, uint8 pinIndex, IfxPort_Mode mode, IfxPort_ControlledBy enablePortControlled);
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   508  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   509  /** \brief set LVDSM mode
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   510   * \param port Pointer to the port which should be accessed.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   511   * \param pinIndex specifies pin to be modified
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   512   * \param lvdsPadDriver select speed grade of LVDS Pad
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   513   * \param padSupply select the PAD supply (5/3.3V)
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   514   * \return None
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   515   */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   516  IFX_EXTERN void IfxPort_setPinModeLvdsMedium(Ifx_P *port, uint8 pinIndex, IfxPort_PadDriver lvdsPadDriver, IfxPort_PadSupply padSupply);
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   517  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   518  /** \} */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   519  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   520  /******************************************************************************/
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   521  /*-------------------------Global Function Prototypes-------------------------*/
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   522  /******************************************************************************/
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   523  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   524  /** \brief Disable the emergency stop function.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   525   * This function disables the emergency stop function. No check is done on port functionality.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   526   * \param port Pointer to the port which should be accessed.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   527   * \param pinIndex Specifies the pin for which the emergency stop function should be disabled.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   528   * \return None
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   529   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   530   * \see IfxPort_disableEmergencyStop()
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   531   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   532   */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   533  IFX_EXTERN void IfxPort_resetESR(Ifx_P *port, uint8 pinIndex);
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   534  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   535  /** \brief Enable the emergency stop function.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   536   * This function enables the emergency stop function. No check is done on port functionality.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   537   * \param port Pointer to the port which should be accessed.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   538   * \param pinIndex Specifies the pin for which the emergency stop function should be enabled.
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   539   * \return None
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   540   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   541   * \see IfxPort_enableEmergencyStop()
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   542   *
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   543   */
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   544  IFX_EXTERN void IfxPort_setESR(Ifx_P *port, uint8 pinIndex);
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   545  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   546  /******************************************************************************/
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   547  /*---------------------Inline Function Implementations------------------------*/
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   548  /******************************************************************************/
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   549  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   550  IFX_INLINE uint32 IfxPort_getGroupState(Ifx_P *port, uint8 pinIndex, uint16 mask)
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   551  {
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   552      return (uint32)((port->IN.U) >> (pinIndex)) & mask;
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   553  }
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   554  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   555  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   556  IFX_INLINE boolean IfxPort_getPinState(Ifx_P *port, uint8 pinIndex)
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   557  {
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   558      return (__getbit(&port->IN.U, pinIndex) != 0) ? TRUE : FALSE;
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   559  }
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   560  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   561  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   562  IFX_INLINE void IfxPort_setGroupState(Ifx_P *port, uint8 pinIndex, uint16 mask, uint16 data)
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   563  {
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   564      port->OUT.U = (port->OUT.U & ~((uint32)(mask)) << pinIndex) | (data << pinIndex);
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   565  }
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   566  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   567  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   568  IFX_INLINE void IfxPort_setPinHigh(Ifx_P *port, uint8 pinIndex)
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   569  {
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   570      IfxPort_setPinState(port, pinIndex, IfxPort_State_high);
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   571  }
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   572  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   573  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   574  IFX_INLINE void IfxPort_setPinLow(Ifx_P *port, uint8 pinIndex)
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   575  {
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   576      IfxPort_setPinState(port, pinIndex, IfxPort_State_low);
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   577  }
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   578  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   579  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   580  IFX_INLINE void IfxPort_setPinModeInput(Ifx_P *port, uint8 pinIndex, IfxPort_InputMode mode)
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   581  {
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   582      IfxPort_setPinMode(port, pinIndex, (IfxPort_Mode)mode);
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   583  }
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   584  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   585  
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   586  IFX_INLINE void IfxPort_setPinModeOutput(Ifx_P *port, uint8 pinIndex, IfxPort_OutputMode mode, IfxPort_OutputIdx index)
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   587  {
; E:\tasking workspace\Copy of LQ_TC26xB_LIBtaskingAICTone\src\BaseSw\iLLD\TC26B\Tricore\Port\Std\IfxPort.h	   588      IfxPort_setPinMode(port, pinIndex, (IfxPort_Mode)(index | mode));
	call	IfxPort_setPinMode
.L320:

; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.c	   226  Select);
	ld.a	a4,[a15]4
.L528:
	ld.bu	d4,[a15]8
.L529:
	mov	d5,d8
	call	IfxPort_setPinPadDriver
.L530:

; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.c	   227      IfxPort_setPinPadDriver(scl->pin.port, scl->pin.pinIndex, padDriver);
	ld.a	a4,[a12]4
.L531:
	ld.bu	d4,[a12]8
.L532:
	mov	d5,d8
	call	IfxPort_setPinPadDriver
.L533:

; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.c	   228      IfxPort_setPinPadDriver(sda->pin.port, sda->pin.pinIndex, padDriver);
	ld.a	a2,[a15]
.L322:

; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	     1  /**
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	     2   * \file IfxI2c.h
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	     3   * \brief I2C  basic functionality
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	     4   * \ingroup IfxLld_I2c
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	     5   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	     6   * \version iLLD_1_0_1_11_0
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	     7   * \copyright Copyright (c) 2018 Infineon Technologies AG. All rights reserved.
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	     8   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	     9   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    10   *                                 IMPORTANT NOTICE
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    11   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    12   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    13   * Use of this file is subject to the terms of use agreed between (i) you or 
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    14   * the company in which ordinary course of business you are acting and (ii) 
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    15   * Infineon Technologies AG or its licensees. If and as long as no such 
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    16   * terms of use are agreed, use of this file is subject to following:
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    17  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    18  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    19   * Boost Software License - Version 1.0 - August 17th, 2003
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    20  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    21   * Permission is hereby granted, free of charge, to any person or 
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    22   * organization obtaining a copy of the software and accompanying 
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    23   * documentation covered by this license (the "Software") to use, reproduce,
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    24   * display, distribute, execute, and transmit the Software, and to prepare
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    25   * derivative works of the Software, and to permit third-parties to whom the 
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    26   * Software is furnished to do so, all subject to the following:
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    27  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    28   * The copyright notices in the Software and this entire statement, including
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    29   * the above license grant, this restriction and the following disclaimer, must
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    30   * be included in all copies of the Software, in whole or in part, and all
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    31   * derivative works of the Software, unless such copies or derivative works are
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    32   * solely in the form of machine-executable object code generated by a source
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    33   * language processor.
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    34  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    35   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR 
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    36   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    37   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    38   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE 
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    39   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    40   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    41   * DEALINGS IN THE SOFTWARE.
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    42  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    43   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    44   * \defgroup IfxLld_I2c_Std_enums Enumerations
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    45   * \ingroup IfxLld_I2c_Std
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    46   * \defgroup IfxLld_I2c_Std_functions Functions
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    47   * \ingroup IfxLld_I2c_Std
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    48   * \defgroup IfxLld_I2c_Std_structures Data Structures
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    49   * \ingroup IfxLld_I2c_Std
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    50   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    51  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    52  #ifndef IFXI2C_H
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    53  #define IFXI2C_H 1
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    54  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    55  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    56  /*----------------------------------Includes----------------------------------*/
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    57  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    58  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    59  #include "_Impl/IfxI2c_cfg.h"
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    60  #include "Scu/Std/IfxScuWdt.h"
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    61  #include "Scu/Std/IfxScuCcu.h"
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    62  #include "IfxI2c_bf.h"
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    63  #include "_PinMap/IfxI2c_PinMap.h"
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    64  #include "Src/Std/IfxSrc.h"
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    65  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    66  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    67  /*--------------------------------Enumerations--------------------------------*/
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    68  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    69  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    70  /** \addtogroup IfxLld_I2c_Std_enums
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    71   * \{ */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    72  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    73  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    74      IfxI2c_BusStatus_idle        = 0, /**< \brief idle */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    75      IfxI2c_BusStatus_started     = 1, /**< \brief started */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    76      IfxI2c_BusStatus_busyMaster  = 2, /**< \brief busy Master */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    77      IfxI2c_BusStatus_remoteSlave = 3  /**< \brief remote Slave */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    78  } IfxI2c_BusStatus;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    79  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    80  /** \brief enable error interrupt request source
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    81   * Definition in Ifx.I2C.ERRIRQSM.U
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    82   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    83  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    84  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    85      IfxI2c_ErrorInterruptSource_rxFifoUnderflow = IFX_I2C_ERRIRQSM_RXF_UFL_OFF,  /**< \brief receive fifo underflow service request */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    86      IfxI2c_ErrorInterruptSource_rxFifoOverflow  = IFX_I2C_ERRIRQSM_RXF_OFL_OFF,  /**< \brief receive fifo overflow service request */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    87      IfxI2c_ErrorInterruptSource_txFifoUnderflow = IFX_I2C_ERRIRQSM_TXF_UFL_OFF,  /**< \brief transmit fifo underflow service request */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    88      IfxI2c_ErrorInterruptSource_txFifoOverflow  = IFX_I2C_ERRIRQSM_TXF_OFL_OFF   /**< \brief transmit fifo overflow service request */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    89  } IfxI2c_ErrorInterruptSource;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    90  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    91  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    92  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    93      IfxI2c_PinSelect_a = 0,
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    94      IfxI2c_PinSelect_b = 1,
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    95      IfxI2c_PinSelect_c = 2,
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    96      IfxI2c_PinSelect_d = 3,
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    97      IfxI2c_PinSelect_e = 4,
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    98      IfxI2c_PinSelect_f = 5,
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    99      IfxI2c_PinSelect_g = 6,
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   100      IfxI2c_PinSelect_h = 7
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   101  } IfxI2c_PinSelect;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   102  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   103  /** \brief enable protocol interrupt source
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   104   * Definition in Ifx.I2C.PIRQSM.U
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   105   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   106  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   107  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   108      IfxI2c_ProtocolInterruptSource_addressMatch           = IFX_I2C_PIRQSM_AM_OFF,     /**< \brief address match service request */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   109      IfxI2c_ProtocolInterruptSource_generalCall            = IFX_I2C_PIRQSM_GC_OFF,     /**< \brief general call service request */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   110      IfxI2c_ProtocolInterruptSource_masterCode             = IFX_I2C_PIRQSM_MC_OFF,     /**< \brief master code service request */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   111      IfxI2c_ProtocolInterruptSource_arbitrationLost        = IFX_I2C_PIRQSM_AL_OFF,     /**< \brief arbitration lost service request */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   112      IfxI2c_ProtocolInterruptSource_notAcknowledgeReceived = IFX_I2C_PIRQSM_NACK_OFF,   /**< \brief not acknowledge received service request */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   113      IfxI2c_ProtocolInterruptSource_transmissionEnd        = IFX_I2C_PIRQSM_TX_END_OFF, /**< \brief transmission end service request */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   114      IfxI2c_ProtocolInterruptSource_receiveMode            = IFX_I2C_PIRQSM_RX_OFF      /**< \brief receive mode service request */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   115  } IfxI2c_ProtocolInterruptSource;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   116  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   117  /** \brief Enable/disable the sensitivity of the module to sleep signal\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   118   * Definition in Ifx_I2C.CLC1.B.EDIS
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   119   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   120  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   121  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   122      IfxI2c_SleepMode_enable  = 0, /**< \brief enables sleep mode */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   123      IfxI2c_SleepMode_disable = 1  /**< \brief disables sleep mode */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   124  } IfxI2c_SleepMode;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   125  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   126  /** \} */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   127  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   128  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   129  /*-----------------------------Data Structures--------------------------------*/
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   130  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   131  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   132  /** \addtogroup IfxLld_I2c_Std_structures
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   133   * \{ */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   134  /** \brief Pin Structure
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   135   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   136  typedef struct
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   137  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   138      IfxI2c_Scl_InOut *scl;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   139      IfxI2c_Sda_InOut *sda;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   140      IfxPort_PadDriver padDriver;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   141  } IfxI2c_Pins;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   142  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   143  /** \} */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   144  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   145  /** \addtogroup IfxLld_I2c_Std_functions
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   146   * \{ */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   147  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   148  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   149  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   150  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   151  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   152  /** \brief Returns if the bus is free
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   153   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   154  IFX_INLINE boolean IfxI2c_busIsFree(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   155  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   156  /** \brief clears all DTR interrupt sources
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   157   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   158   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   159   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   160  IFX_INLINE void IfxI2c_clearAllDtrInterruptSources(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   161  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   162  /** \brief clears all Error Interrupt sources
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   163   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   164   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   165   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   166  IFX_INLINE void IfxI2c_clearAllErrorInterruptSources(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   167  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   168  /** \brief Clears all Protocol Interrupt sources
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   169   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   170   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   171   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   172  IFX_INLINE void IfxI2c_clearAllProtocolInterruptSources(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   173  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   174  /** \brief clears burst request interrupt source
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   175   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   176   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   177   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   178  IFX_INLINE void IfxI2c_clearBurstRequestInterruptSource(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   179  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   180  /** \brief clears the specified source of error interrupt
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   181   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   182   * \param source error interrupt source
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   183   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   184   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   185  IFX_INLINE void IfxI2c_clearErrorInterruptSource(Ifx_I2C *i2c, IfxI2c_ErrorInterruptSource source);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   186  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   187  /** \brief clears last burst request interrupt source
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   188   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   189   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   190   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   191  IFX_INLINE void IfxI2c_clearLastBurstRequestInterruptSource(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   192  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   193  /** \brief clears last single request interrupt source
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   194   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   195   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   196   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   197  IFX_INLINE void IfxI2c_clearLastSingleRequestInterruptSource(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   198  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   199  /** \brief clears the specified source of protocol interrupt
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   200   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   201   * \param source protocol interrupt source
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   202   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   203   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   204  IFX_INLINE void IfxI2c_clearProtocolInterruptSource(Ifx_I2C *i2c, IfxI2c_ProtocolInterruptSource source);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   205  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   206  /** \brief clears single request interrupt source
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   207   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   208   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   209   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   210  IFX_INLINE void IfxI2c_clearSingleRequestInterruptSource(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   211  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   212  /** \brief disables burst request interrupt source
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   213   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   214   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   215   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   216  IFX_INLINE void IfxI2c_disableBurstRequestInterruptSource(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   217  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   218  /** \brief disables the error interrupt flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   219   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   220   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   221   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   222  IFX_INLINE void IfxI2c_disableErrorInterruptFlag(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   223  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   224  /** \brief disables the specified source of error interrupt
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   225   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   226   * \param source error interrupt source
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   227   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   228   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   229  IFX_INLINE void IfxI2c_disableErrorInterruptSource(Ifx_I2C *i2c, IfxI2c_ErrorInterruptSource source);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   230  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   231  /** \brief disables last burst request interrupt source
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   232   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   233   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   234   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   235  IFX_INLINE void IfxI2c_disableLastBurstRequestInterruptSource(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   236  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   237  /** \brief disables last single request interrupt source
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   238   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   239   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   240   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   241  IFX_INLINE void IfxI2c_disableLastSingleRequestInterruptSource(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   242  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   243  /** \brief disables the Protocol interrupt flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   244   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   245   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   246   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   247  IFX_INLINE void IfxI2c_disableProtocolInterruptFlag(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   248  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   249  /** \brief disables the specified source of protocol interrupt
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   250   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   251   * \param source protocol interrupt source
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   252   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   253   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   254  IFX_INLINE void IfxI2c_disableProtocolInterruptSource(Ifx_I2C *i2c, IfxI2c_ProtocolInterruptSource source);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   255  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   256  /** \brief disables single request interrupt source
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   257   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   258   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   259   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   260  IFX_INLINE void IfxI2c_disableSingleRequestInterruptSource(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   261  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   262  /** \brief enables burst request interrupt source
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   263   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   264   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   265   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   266  IFX_INLINE void IfxI2c_enableBurstRequestInterruptSource(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   267  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   268  /** \brief enables the error interrupt flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   269   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   270   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   271   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   272  IFX_INLINE void IfxI2c_enableErrorInterruptFlag(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   273  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   274  /** \brief enables the specified source of error interrupt
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   275   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   276   * \param source error interrupt source
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   277   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   278   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   279  IFX_INLINE void IfxI2c_enableErrorInterruptSource(Ifx_I2C *i2c, IfxI2c_ErrorInterruptSource source);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   280  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   281  /** \brief enables last burst request interrupt source
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   282   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   283   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   284   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   285  IFX_INLINE void IfxI2c_enableLastBurstRequestInterruptSource(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   286  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   287  /** \brief enables last single request interrupt source
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   288   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   289   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   290   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   291  IFX_INLINE void IfxI2c_enableLastSingleRequestInterruptSource(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   292  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   293  /** \brief enables the protocol interrupt flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   294   * \param i2c pointer to I2C registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   295   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   296   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   297  IFX_INLINE void IfxI2c_enableProtocolInterruptFlag(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   298  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   299  /** \brief enables the specified source of protocol interrupt
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   300   * \param i2c pointer to I2C registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   301   * \param source protocol interrupt source
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   302   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   303   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   304  IFX_INLINE void IfxI2c_enableProtocolInterruptSource(Ifx_I2C *i2c, IfxI2c_ProtocolInterruptSource source);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   305  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   306  /** \brief enables single request interrupt source
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   307   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   308   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   309   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   310  IFX_INLINE void IfxI2c_enableSingleRequestInterruptSource(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   311  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   312  /** \brief Returns the SRC pointer for I2C burst data transfer request interrupt
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   313   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   314   * \return SRC pointer for I2C burst data transfer Service interrupt
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   315   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   316  IFX_INLINE volatile Ifx_SRC_SRCR *IfxI2c_getBurstDataTransferSrcPointer(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   317  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   318  /** \brief returns the status of burst request interrupt source status
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   319   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   320   * \return status
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   321   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   322  IFX_INLINE boolean IfxI2c_getBurstRequestInterruptSourceStatus(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   323  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   324  /**
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   325   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   326   * \return BusStatus
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   327   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   328  IFX_INLINE IfxI2c_BusStatus IfxI2c_getBusStatus(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   329  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   330  /** \brief returns the current status of error interrupt flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   331   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   332   * \return status
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   333   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   334  IFX_INLINE boolean IfxI2c_getErrorInterruptFlagStatus(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   335  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   336  /** \brief returns the status of the error interrupt source
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   337   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   338   * \param source error interrupt source
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   339   * \return status
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   340   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   341  IFX_INLINE boolean IfxI2c_getErrorInterruptSourceStatus(Ifx_I2C *i2c, IfxI2c_ErrorInterruptSource source);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   342  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   343  /** \brief Returns the SRC pointer for I2C Error interrupt
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   344   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   345   * \return SRC pointer for I2C Error Service interrupt
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   346   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   347  IFX_INLINE volatile Ifx_SRC_SRCR *IfxI2c_getErrorSrcPointer(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   348  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   349  /** \brief Returns the SRC pointer for I2C last burst data transfer request interrupt
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   350   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   351   * \return SRC pointer for I2C last burst data transfer Service interrupt
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   352   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   353  IFX_INLINE volatile Ifx_SRC_SRCR *IfxI2c_getLastBurstDataTransferSrcPointer(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   354  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   355  /** \brief returns the status of last burst request interrupt source status
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   356   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   357   * \return status
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   358   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   359  IFX_INLINE boolean IfxI2c_getLastBurstRequestInterruptSourceStatus(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   360  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   361  /** \brief Returns the SRC pointer for I2C last single data transfer request interrupt
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   362   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   363   * \return SRC pointer for I2C last single data transfer Service interrupt
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   364   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   365  IFX_INLINE volatile Ifx_SRC_SRCR *IfxI2c_getLastSingleDataTransferSrcPointer(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   366  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   367  /** \brief returns the status of last single request interrupt source status
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   368   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   369   * \return status
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   370   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   371  IFX_INLINE boolean IfxI2c_getLastSingleRequestInterruptSourceStatus(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   372  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   373  /** \brief returns the current raw status of protocol interrupt
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   374   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   375   * \return status
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   376   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   377  IFX_INLINE boolean IfxI2c_getProtocolInterruptFlagStatus(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   378  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   379  /** \brief returns the status of  specified protocol interrupt source
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   380   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   381   * \param source protocol interrupt source
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   382   * \return status
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   383   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   384  IFX_INLINE boolean IfxI2c_getProtocolInterruptSourceStatus(Ifx_I2C *i2c, IfxI2c_ProtocolInterruptSource source);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   385  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   386  /** \brief Returns the SRC pointer for I2C Protocol interrupt
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   387   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   388   * \return SRC pointer for I2C Protocol Service interrupt
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   389   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   390  IFX_INLINE volatile Ifx_SRC_SRCR *IfxI2c_getProtocolSrcPointer(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   391  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   392  /** \brief Returns the SRC pointer for I2C single data transfer request interrupt
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   393   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   394   * \return SRC pointer for I2C single data transfer Service interrupt
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   395   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   396  IFX_INLINE volatile Ifx_SRC_SRCR *IfxI2c_getSingleDataTransferSrcPointer(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   397  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   398  /** \brief returns the status of single request interrupt source status
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   399   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   400   * \return status
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   401   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   402  IFX_INLINE boolean IfxI2c_getSingleRequestInterruptSourceStatus(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   403  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   404  /** \brief Returns if the Fifo is requesting new data
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   405   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   406  IFX_INLINE boolean IfxI2c_isFifoRequest(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   407  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   408  /**
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   409   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   410   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   411   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   412  IFX_INLINE void IfxI2c_run(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   413  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   414  /** \brief selects the pin
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   415   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   416   * \param pisel pin to be select
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   417   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   418   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   419  IFX_INLINE void IfxI2c_setPinSelection(Ifx_I2C *i2c, IfxI2c_PinSelect pisel);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   420  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   421  /** \brief Sets the number of bytes to be received
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   422   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   423   * \param size number of packets
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   424   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   425   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   426  IFX_INLINE void IfxI2c_setReceivePacketSize(Ifx_I2C *i2c, Ifx_SizeT size);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   427  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   428  /**
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   429   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   430   * \param address device address
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   431   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   432   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   433  IFX_INLINE void IfxI2c_setSlaveDeviceAddress(Ifx_I2C *i2c, uint16 address);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   434  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   435  /** \brief Sets the sensitivity of the module to sleep signal
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   436   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   437   * \param mode mode selection (enable / disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   438   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   439   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   440  IFX_INLINE void IfxI2c_setSleepMode(Ifx_I2C *i2c, IfxI2c_SleepMode mode);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   441  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   442  /** \brief Sets the number of bytes to be tansmitted
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   443   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   444   * \param size number of packets
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   445   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   446   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   447  IFX_INLINE void IfxI2c_setTransmitPacketSize(Ifx_I2C *i2c, Ifx_SizeT size);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   448  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   449  /**
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   450   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   451   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   452   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   453  IFX_INLINE void IfxI2c_stop(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   454  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   455  /**
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   456   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   457   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   458   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   459  IFX_INLINE void IfxI2c_waitBusFree(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   460  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   461  /** \brief Writes a packet (4 bytes) into the Fifo
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   462   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   463   * \param packet specifies the byte to be transfer
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   464   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   465   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   466  IFX_INLINE void IfxI2c_writeFifo(Ifx_I2C *i2c, uint32 packet);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   467  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   468  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   469  /*-------------------------Global Function Prototypes-------------------------*/
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   470  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   471  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   472  /** \brief Configures the Module as Master
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   473   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   474   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   475   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   476  IFX_EXTERN void IfxI2c_configureAsMaster(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   477  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   478  /** \brief Disables the I2c Module
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   479   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   480   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   481   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   482  IFX_EXTERN void IfxI2c_disableModule(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   483  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   484  /** \brief Enables the Burst data transfer interrupt
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   485   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   486   * \param typeOfService Type of Service (Cpu or DMA)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   487   * \param priority priority of the interrupt
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   488   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   489   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   490  IFX_EXTERN void IfxI2c_enableBurstDataTransferInterrupt(Ifx_I2C *i2c, IfxSrc_Tos typeOfService, uint16 priority);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   491  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   492  /** \brief Enables the Error interrupt
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   493   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   494   * \param typeOfService Type of Service (Cpu or DMA)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   495   * \param priority priority of the interrupt
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   496   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   497   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   498  IFX_EXTERN void IfxI2c_enableErrorInterrupt(Ifx_I2C *i2c, IfxSrc_Tos typeOfService, uint16 priority);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   499  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   500  /** \brief enables the last burst data transfer interrupt
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   501   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   502   * \param typeOfService Type of Service (Cpu or DMA)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   503   * \param priority priority of the interrupt
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   504   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   505   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   506  IFX_EXTERN void IfxI2c_enableLastBurstDataTransferInterrupt(Ifx_I2C *i2c, IfxSrc_Tos typeOfService, uint16 priority);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   507  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   508  /** \brief enables the last single data transfer interrupt
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   509   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   510   * \param typeOfService Type of Service (Cpu or DMA)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   511   * \param priority priority of the interrupt
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   512   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   513   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   514  IFX_EXTERN void IfxI2c_enableLastSingleDataTransferInterrupt(Ifx_I2C *i2c, IfxSrc_Tos typeOfService, uint16 priority);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   515  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   516  /** \brief Enables the I2c Module
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   517   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   518   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   519   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   520  IFX_EXTERN void IfxI2c_enableModule(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   521  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   522  /** \brief Enables the protocol interrupt
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   523   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   524   * \param typeOfService Type of Service (Cpu or DMA)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   525   * \param priority Priority of the interrupt
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   526   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   527   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   528  IFX_EXTERN void IfxI2c_enableProtocolInterrupt(void *i2c, IfxSrc_Tos typeOfService, uint16 priority);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   529  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   530  /** \brief enables the single data transfer interrupt
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   531   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   532   * \param typeOfService Type of Service (Cpu or DMA)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   533   * \param priority priority of the interrupt
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   534   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   535   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   536  IFX_EXTERN void IfxI2c_enableSingleDataTransferInterrupt(Ifx_I2C *i2c, IfxSrc_Tos typeOfService, uint16 priority);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   537  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   538  /**
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   539   * \param i2c Resource index of the I2c
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   540   * \return I2C module register address
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   541   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   542  IFX_EXTERN Ifx_I2C *IfxI2c_getAddress(IfxI2c_Index i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   543  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   544  /** \brief Returns the real Baudrate
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   545   * \return Baudrate
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   546   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   547  IFX_EXTERN float32 IfxI2c_getBaudrate(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   548  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   549  /** \brief API to get the resource index of the I2C specified.
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   550   * \param i2c Pointer to the I2C HW module (register memory map)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   551   * \return Resource index of the I2C
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   552   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   553  IFX_EXTERN IfxI2c_Index IfxI2c_getIndex(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   554  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   555  /**
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   556   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   557   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   558  IFX_EXTERN void IfxI2c_initSclSdaPin(const IfxI2c_Scl_InOut *scl, const IfxI2c_Sda_InOut *sda, IfxPort_PadDriver padDriver);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   559  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   560  /** \brief Releases the bus, i.e puts a stop condition on the bus
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   561   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   562   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   563  IFX_EXTERN void IfxI2c_releaseBus(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   564  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   565  /**
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   566   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   567   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   568  IFX_EXTERN void IfxI2c_resetFifo(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   569  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   570  /** \brief resets the I2c kernel
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   571   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   572   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   573   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   574  IFX_EXTERN void IfxI2c_resetModule(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   575  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   576  /** \brief Calculates the desired baudrate
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   577   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   578   * \param baudrate specifies the baud rate
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   579   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   580   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   581  IFX_EXTERN void IfxI2c_setBaudrate(Ifx_I2C *i2c, float32 baudrate);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   582  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   583  /** \} */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   584  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   585  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   586  /*---------------------Inline Function Implementations------------------------*/
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   587  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   588  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   589  IFX_INLINE boolean IfxI2c_busIsFree(Ifx_I2C *i2c)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   590  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   591      boolean free = FALSE;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   592  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   593      if (i2c->BUSSTAT.B.BS == IfxI2c_BusStatus_idle)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   594      {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   595          free = TRUE;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   596      }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   597  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   598      return free;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   599  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   600  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   601  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   602  IFX_INLINE void IfxI2c_clearAllDtrInterruptSources(Ifx_I2C *i2c)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   603  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   604      i2c->ICR.U = (1 << IFX_I2C_ICR_LSREQ_INT_OFF) | (1 << IFX_I2C_ICR_SREQ_INT_OFF) | (1 << IFX_I2C_ICR_LBREQ_INT_OFF) | (1 << IFX_I2C_ICR_BREQ_INT_OFF);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   605  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   606  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   607  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   608  IFX_INLINE void IfxI2c_clearAllErrorInterruptSources(Ifx_I2C *i2c)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   609  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   610      i2c->ERRIRQSC.U = (1 << IFX_I2C_ERRIRQSC_RXF_UFL_OFF) | (1 << IFX_I2C_ERRIRQSC_RXF_OFL_OFF) | (1 << IFX_I2C_ERRIRQSC_TXF_UFL_OFF) | (1 << IFX_I2C_ERRIRQSC_TXF_OFL_OFF);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   611  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   612  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   613  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   614  IFX_INLINE void IfxI2c_clearAllProtocolInterruptSources(Ifx_I2C *i2c)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   615  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   616      i2c->PIRQSC.U = (1 << IFX_I2C_PIRQSC_AM_OFF) | (1 << IFX_I2C_PIRQSC_GC_OFF) | (1 << IFX_I2C_PIRQSC_MC_OFF) | (1 << IFX_I2C_PIRQSC_AL_OFF) | (1 << IFX_I2C_PIRQSC_NACK_OFF) | (1 << IFX_I2C_PIRQSC_TX_END_OFF) | (1 << IFX_I2C_PIRQSC_RX_OFF);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   617  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   618  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   619  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   620  IFX_INLINE void IfxI2c_clearBurstRequestInterruptSource(Ifx_I2C *i2c)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   621  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   622      i2c->ICR.B.BREQ_INT = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   623  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   624  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   625  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   626  IFX_INLINE void IfxI2c_clearErrorInterruptSource(Ifx_I2C *i2c, IfxI2c_ErrorInterruptSource source)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   627  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   628      i2c->ERRIRQSC.U = (1 << source);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   629  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   630  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   631  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   632  IFX_INLINE void IfxI2c_clearLastBurstRequestInterruptSource(Ifx_I2C *i2c)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   633  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   634      i2c->ICR.B.LBREQ_INT = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   635  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   636  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   637  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   638  IFX_INLINE void IfxI2c_clearLastSingleRequestInterruptSource(Ifx_I2C *i2c)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   639  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   640      i2c->ICR.B.LSREQ_INT = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   641  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   642  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   643  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   644  IFX_INLINE void IfxI2c_clearProtocolInterruptSource(Ifx_I2C *i2c, IfxI2c_ProtocolInterruptSource source)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   645  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   646      i2c->PIRQSC.U = (1 << source);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   647  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   648  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   649  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   650  IFX_INLINE void IfxI2c_clearSingleRequestInterruptSource(Ifx_I2C *i2c)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   651  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   652      i2c->ICR.B.SREQ_INT = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   653  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   654  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   655  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   656  IFX_INLINE void IfxI2c_disableBurstRequestInterruptSource(Ifx_I2C *i2c)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   657  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   658      i2c->IMSC.B.BREQ_INT = 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   659  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   660  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   661  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   662  IFX_INLINE void IfxI2c_disableErrorInterruptFlag(Ifx_I2C *i2c)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   663  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   664      i2c->IMSC.B.I2C_ERR_INT = 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   665  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   666  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   667  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   668  IFX_INLINE void IfxI2c_disableErrorInterruptSource(Ifx_I2C *i2c, IfxI2c_ErrorInterruptSource source)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   669  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   670      i2c->ERRIRQSM.U &= ~(1 << source);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   671  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   672  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   673  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   674  IFX_INLINE void IfxI2c_disableLastBurstRequestInterruptSource(Ifx_I2C *i2c)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   675  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   676      i2c->IMSC.B.LBREQ_INT = 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   677  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   678  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   679  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   680  IFX_INLINE void IfxI2c_disableLastSingleRequestInterruptSource(Ifx_I2C *i2c)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   681  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   682      i2c->IMSC.B.LSREQ_INT = 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   683  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   684  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   685  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   686  IFX_INLINE void IfxI2c_disableProtocolInterruptFlag(Ifx_I2C *i2c)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   687  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   688      i2c->IMSC.B.I2C_P_INT = 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   689  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   690  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   691  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   692  IFX_INLINE void IfxI2c_disableProtocolInterruptSource(Ifx_I2C *i2c, IfxI2c_ProtocolInterruptSource source)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   693  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   694      i2c->PIRQSM.U &= ~(1 << source);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   695  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   696  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   697  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   698  IFX_INLINE void IfxI2c_disableSingleRequestInterruptSource(Ifx_I2C *i2c)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   699  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   700      i2c->IMSC.B.SREQ_INT = 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   701  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   702  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   703  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   704  IFX_INLINE void IfxI2c_enableBurstRequestInterruptSource(Ifx_I2C *i2c)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   705  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   706      i2c->IMSC.B.BREQ_INT = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   707  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   708  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   709  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   710  IFX_INLINE void IfxI2c_enableErrorInterruptFlag(Ifx_I2C *i2c)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   711  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   712      i2c->IMSC.B.I2C_ERR_INT = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   713  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   714  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   715  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   716  IFX_INLINE void IfxI2c_enableErrorInterruptSource(Ifx_I2C *i2c, IfxI2c_ErrorInterruptSource source)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   717  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   718      i2c->ERRIRQSM.U |= (1 << source);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   719  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   720  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   721  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   722  IFX_INLINE void IfxI2c_enableLastBurstRequestInterruptSource(Ifx_I2C *i2c)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   723  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   724      i2c->IMSC.B.LBREQ_INT = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   725  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   726  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   727  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   728  IFX_INLINE void IfxI2c_enableLastSingleRequestInterruptSource(Ifx_I2C *i2c)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   729  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   730      i2c->IMSC.B.LSREQ_INT = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   731  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   732  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   733  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   734  IFX_INLINE void IfxI2c_enableProtocolInterruptFlag(Ifx_I2C *i2c)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   735  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   736      i2c->IMSC.B.I2C_P_INT = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   737  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   738  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   739  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   740  IFX_INLINE void IfxI2c_enableProtocolInterruptSource(Ifx_I2C *i2c, IfxI2c_ProtocolInterruptSource source)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   741  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   742      i2c->PIRQSM.U |= (1 << source);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   743  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   744  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   745  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   746  IFX_INLINE void IfxI2c_enableSingleRequestInterruptSource(Ifx_I2C *i2c)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   747  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   748      i2c->IMSC.B.SREQ_INT = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   749  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   750  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   751  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   752  IFX_INLINE volatile Ifx_SRC_SRCR *IfxI2c_getBurstDataTransferSrcPointer(Ifx_I2C *i2c)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   753  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   754      if (i2c == &MODULE_I2C0)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   755      {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   756          return &MODULE_SRC.I2C.I2C[0].BREQ;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   757      }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   758      else
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   759      {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   760          return &MODULE_SRC.I2C.I2C[1].BREQ;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   761      }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   762  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   763  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   764  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   765  IFX_INLINE boolean IfxI2c_getBurstRequestInterruptSourceStatus(Ifx_I2C *i2c)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   766  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   767      return i2c->RIS.B.BREQ_INT;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   768  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   769  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   770  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   771  IFX_INLINE IfxI2c_BusStatus IfxI2c_getBusStatus(Ifx_I2C *i2c)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   772  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   773      return (IfxI2c_BusStatus)i2c->BUSSTAT.B.BS;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   774  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   775  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   776  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   777  IFX_INLINE boolean IfxI2c_getErrorInterruptFlagStatus(Ifx_I2C *i2c)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   778  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   779      return i2c->RIS.B.I2C_ERR_INT;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   780  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   781  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   782  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   783  IFX_INLINE boolean IfxI2c_getErrorInterruptSourceStatus(Ifx_I2C *i2c, IfxI2c_ErrorInterruptSource source)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   784  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   785      return (i2c->ERRIRQSS.U & (1 << source)) ? TRUE : FALSE;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   786  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   787  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   788  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   789  IFX_INLINE volatile Ifx_SRC_SRCR *IfxI2c_getErrorSrcPointer(Ifx_I2C *i2c)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   790  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   791      if (i2c == &MODULE_I2C0)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   792      {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   793          return &MODULE_SRC.I2C.I2C[0].ERR;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   794      }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   795      else
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   796      {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   797          return &MODULE_SRC.I2C.I2C[1].ERR;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   798      }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   799  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   800  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   801  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   802  IFX_INLINE volatile Ifx_SRC_SRCR *IfxI2c_getLastBurstDataTransferSrcPointer(Ifx_I2C *i2c)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   803  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   804      if (i2c == &MODULE_I2C0)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   805      {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   806          return &MODULE_SRC.I2C.I2C[0].LBREQ;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   807      }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   808      else
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   809      {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   810          return &MODULE_SRC.I2C.I2C[1].LBREQ;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   811      }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   812  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   813  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   814  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   815  IFX_INLINE boolean IfxI2c_getLastBurstRequestInterruptSourceStatus(Ifx_I2C *i2c)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   816  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   817      return i2c->RIS.B.LBREQ_INT;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   818  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   819  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   820  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   821  IFX_INLINE volatile Ifx_SRC_SRCR *IfxI2c_getLastSingleDataTransferSrcPointer(Ifx_I2C *i2c)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   822  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   823      if (i2c == &MODULE_I2C0)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   824      {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   825          return &MODULE_SRC.I2C.I2C[0].LSREQ;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   826      }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   827      else
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   828      {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   829          return &MODULE_SRC.I2C.I2C[1].LSREQ;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   830      }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   831  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   832  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   833  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   834  IFX_INLINE boolean IfxI2c_getLastSingleRequestInterruptSourceStatus(Ifx_I2C *i2c)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   835  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   836      return i2c->RIS.B.LSREQ_INT;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   837  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   838  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   839  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   840  IFX_INLINE boolean IfxI2c_getProtocolInterruptFlagStatus(Ifx_I2C *i2c)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   841  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   842      return i2c->RIS.B.I2C_P_INT;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   843  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   844  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   845  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   846  IFX_INLINE boolean IfxI2c_getProtocolInterruptSourceStatus(Ifx_I2C *i2c, IfxI2c_ProtocolInterruptSource source)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   847  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   848      return (i2c->PIRQSS.U & (1 << source)) ? TRUE : FALSE;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   849  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   850  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   851  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   852  IFX_INLINE volatile Ifx_SRC_SRCR *IfxI2c_getProtocolSrcPointer(Ifx_I2C *i2c)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   853  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   854      if (i2c == &MODULE_I2C0)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   855      {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   856          return &MODULE_SRC.I2C.I2C[0].P;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   857      }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   858      else
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   859      {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   860          return &MODULE_SRC.I2C.I2C[1].P;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   861      }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   862  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   863  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   864  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   865  IFX_INLINE volatile Ifx_SRC_SRCR *IfxI2c_getSingleDataTransferSrcPointer(Ifx_I2C *i2c)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   866  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   867      if (i2c == &MODULE_I2C0)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   868      {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   869          return &MODULE_SRC.I2C.I2C[0].SREQ;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   870      }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   871      else
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   872      {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   873          return &MODULE_SRC.I2C.I2C[1].SREQ;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   874      }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   875  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   876  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   877  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   878  IFX_INLINE boolean IfxI2c_getSingleRequestInterruptSourceStatus(Ifx_I2C *i2c)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   879  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   880      return i2c->RIS.B.SREQ_INT;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   881  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   882  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   883  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   884  IFX_INLINE boolean IfxI2c_isFifoRequest(Ifx_I2C *i2c)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   885  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   886      return i2c->RIS.U & 0x0F ? TRUE : FALSE;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   887  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   888  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   889  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   890  IFX_INLINE void IfxI2c_run(Ifx_I2C *i2c)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   891  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   892      i2c->RUNCTRL.U = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   893  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   894  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   895  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   896  IFX_INLINE void IfxI2c_setPinSelection(Ifx_I2C *i2c, IfxI2c_PinSelect pisel)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   897  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   898      i2c->GPCTL.B.PISEL = pisel;
	movh.a	a3,#1
.L323:
	ld.bu	d15,[a15]12
.L330:

; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	     1  /**
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	     2   * \file IfxI2c.h
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	     3   * \brief I2C  basic functionality
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	     4   * \ingroup IfxLld_I2c
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	     5   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	     6   * \version iLLD_1_0_1_11_0
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	     7   * \copyright Copyright (c) 2018 Infineon Technologies AG. All rights reserved.
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	     8   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	     9   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    10   *                                 IMPORTANT NOTICE
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    11   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    12   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    13   * Use of this file is subject to the terms of use agreed between (i) you or 
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    14   * the company in which ordinary course of business you are acting and (ii) 
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    15   * Infineon Technologies AG or its licensees. If and as long as no such 
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    16   * terms of use are agreed, use of this file is subject to following:
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    17  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    18  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    19   * Boost Software License - Version 1.0 - August 17th, 2003
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    20  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    21   * Permission is hereby granted, free of charge, to any person or 
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    22   * organization obtaining a copy of the software and accompanying 
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    23   * documentation covered by this license (the "Software") to use, reproduce,
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    24   * display, distribute, execute, and transmit the Software, and to prepare
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    25   * derivative works of the Software, and to permit third-parties to whom the 
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    26   * Software is furnished to do so, all subject to the following:
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    27  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    28   * The copyright notices in the Software and this entire statement, including
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    29   * the above license grant, this restriction and the following disclaimer, must
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    30   * be included in all copies of the Software, in whole or in part, and all
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    31   * derivative works of the Software, unless such copies or derivative works are
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    32   * solely in the form of machine-executable object code generated by a source
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    33   * language processor.
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    34  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    35   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR 
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    36   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    37   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    38   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE 
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    39   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    40   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    41   * DEALINGS IN THE SOFTWARE.
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    42  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    43   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    44   * \defgroup IfxLld_I2c_Std_enums Enumerations
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    45   * \ingroup IfxLld_I2c_Std
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    46   * \defgroup IfxLld_I2c_Std_functions Functions
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    47   * \ingroup IfxLld_I2c_Std
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    48   * \defgroup IfxLld_I2c_Std_structures Data Structures
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    49   * \ingroup IfxLld_I2c_Std
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    50   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    51  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    52  #ifndef IFXI2C_H
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    53  #define IFXI2C_H 1
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    54  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    55  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    56  /*----------------------------------Includes----------------------------------*/
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    57  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    58  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    59  #include "_Impl/IfxI2c_cfg.h"
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    60  #include "Scu/Std/IfxScuWdt.h"
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    61  #include "Scu/Std/IfxScuCcu.h"
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    62  #include "IfxI2c_bf.h"
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    63  #include "_PinMap/IfxI2c_PinMap.h"
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    64  #include "Src/Std/IfxSrc.h"
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    65  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    66  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    67  /*--------------------------------Enumerations--------------------------------*/
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    68  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    69  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    70  /** \addtogroup IfxLld_I2c_Std_enums
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    71   * \{ */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    72  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    73  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    74      IfxI2c_BusStatus_idle        = 0, /**< \brief idle */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    75      IfxI2c_BusStatus_started     = 1, /**< \brief started */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    76      IfxI2c_BusStatus_busyMaster  = 2, /**< \brief busy Master */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    77      IfxI2c_BusStatus_remoteSlave = 3  /**< \brief remote Slave */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    78  } IfxI2c_BusStatus;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    79  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    80  /** \brief enable error interrupt request source
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    81   * Definition in Ifx.I2C.ERRIRQSM.U
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    82   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    83  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    84  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    85      IfxI2c_ErrorInterruptSource_rxFifoUnderflow = IFX_I2C_ERRIRQSM_RXF_UFL_OFF,  /**< \brief receive fifo underflow service request */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    86      IfxI2c_ErrorInterruptSource_rxFifoOverflow  = IFX_I2C_ERRIRQSM_RXF_OFL_OFF,  /**< \brief receive fifo overflow service request */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    87      IfxI2c_ErrorInterruptSource_txFifoUnderflow = IFX_I2C_ERRIRQSM_TXF_UFL_OFF,  /**< \brief transmit fifo underflow service request */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    88      IfxI2c_ErrorInterruptSource_txFifoOverflow  = IFX_I2C_ERRIRQSM_TXF_OFL_OFF   /**< \brief transmit fifo overflow service request */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    89  } IfxI2c_ErrorInterruptSource;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    90  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    91  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    92  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    93      IfxI2c_PinSelect_a = 0,
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    94      IfxI2c_PinSelect_b = 1,
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    95      IfxI2c_PinSelect_c = 2,
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    96      IfxI2c_PinSelect_d = 3,
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    97      IfxI2c_PinSelect_e = 4,
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    98      IfxI2c_PinSelect_f = 5,
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    99      IfxI2c_PinSelect_g = 6,
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   100      IfxI2c_PinSelect_h = 7
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   101  } IfxI2c_PinSelect;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   102  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   103  /** \brief enable protocol interrupt source
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   104   * Definition in Ifx.I2C.PIRQSM.U
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   105   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   106  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   107  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   108      IfxI2c_ProtocolInterruptSource_addressMatch           = IFX_I2C_PIRQSM_AM_OFF,     /**< \brief address match service request */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   109      IfxI2c_ProtocolInterruptSource_generalCall            = IFX_I2C_PIRQSM_GC_OFF,     /**< \brief general call service request */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   110      IfxI2c_ProtocolInterruptSource_masterCode             = IFX_I2C_PIRQSM_MC_OFF,     /**< \brief master code service request */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   111      IfxI2c_ProtocolInterruptSource_arbitrationLost        = IFX_I2C_PIRQSM_AL_OFF,     /**< \brief arbitration lost service request */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   112      IfxI2c_ProtocolInterruptSource_notAcknowledgeReceived = IFX_I2C_PIRQSM_NACK_OFF,   /**< \brief not acknowledge received service request */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   113      IfxI2c_ProtocolInterruptSource_transmissionEnd        = IFX_I2C_PIRQSM_TX_END_OFF, /**< \brief transmission end service request */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   114      IfxI2c_ProtocolInterruptSource_receiveMode            = IFX_I2C_PIRQSM_RX_OFF      /**< \brief receive mode service request */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   115  } IfxI2c_ProtocolInterruptSource;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   116  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   117  /** \brief Enable/disable the sensitivity of the module to sleep signal\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   118   * Definition in Ifx_I2C.CLC1.B.EDIS
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   119   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   120  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   121  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   122      IfxI2c_SleepMode_enable  = 0, /**< \brief enables sleep mode */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   123      IfxI2c_SleepMode_disable = 1  /**< \brief disables sleep mode */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   124  } IfxI2c_SleepMode;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   125  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   126  /** \} */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   127  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   128  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   129  /*-----------------------------Data Structures--------------------------------*/
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   130  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   131  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   132  /** \addtogroup IfxLld_I2c_Std_structures
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   133   * \{ */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   134  /** \brief Pin Structure
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   135   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   136  typedef struct
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   137  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   138      IfxI2c_Scl_InOut *scl;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   139      IfxI2c_Sda_InOut *sda;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   140      IfxPort_PadDriver padDriver;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   141  } IfxI2c_Pins;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   142  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   143  /** \} */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   144  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   145  /** \addtogroup IfxLld_I2c_Std_functions
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   146   * \{ */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   147  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   148  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   149  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   150  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   151  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   152  /** \brief Returns if the bus is free
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   153   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   154  IFX_INLINE boolean IfxI2c_busIsFree(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   155  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   156  /** \brief clears all DTR interrupt sources
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   157   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   158   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   159   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   160  IFX_INLINE void IfxI2c_clearAllDtrInterruptSources(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   161  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   162  /** \brief clears all Error Interrupt sources
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   163   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   164   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   165   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   166  IFX_INLINE void IfxI2c_clearAllErrorInterruptSources(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   167  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   168  /** \brief Clears all Protocol Interrupt sources
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   169   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   170   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   171   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   172  IFX_INLINE void IfxI2c_clearAllProtocolInterruptSources(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   173  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   174  /** \brief clears burst request interrupt source
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   175   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   176   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   177   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   178  IFX_INLINE void IfxI2c_clearBurstRequestInterruptSource(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   179  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   180  /** \brief clears the specified source of error interrupt
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   181   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   182   * \param source error interrupt source
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   183   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   184   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   185  IFX_INLINE void IfxI2c_clearErrorInterruptSource(Ifx_I2C *i2c, IfxI2c_ErrorInterruptSource source);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   186  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   187  /** \brief clears last burst request interrupt source
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   188   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   189   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   190   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   191  IFX_INLINE void IfxI2c_clearLastBurstRequestInterruptSource(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   192  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   193  /** \brief clears last single request interrupt source
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   194   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   195   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   196   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   197  IFX_INLINE void IfxI2c_clearLastSingleRequestInterruptSource(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   198  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   199  /** \brief clears the specified source of protocol interrupt
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   200   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   201   * \param source protocol interrupt source
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   202   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   203   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   204  IFX_INLINE void IfxI2c_clearProtocolInterruptSource(Ifx_I2C *i2c, IfxI2c_ProtocolInterruptSource source);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   205  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   206  /** \brief clears single request interrupt source
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   207   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   208   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   209   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   210  IFX_INLINE void IfxI2c_clearSingleRequestInterruptSource(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   211  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   212  /** \brief disables burst request interrupt source
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   213   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   214   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   215   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   216  IFX_INLINE void IfxI2c_disableBurstRequestInterruptSource(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   217  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   218  /** \brief disables the error interrupt flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   219   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   220   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   221   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   222  IFX_INLINE void IfxI2c_disableErrorInterruptFlag(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   223  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   224  /** \brief disables the specified source of error interrupt
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   225   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   226   * \param source error interrupt source
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   227   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   228   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   229  IFX_INLINE void IfxI2c_disableErrorInterruptSource(Ifx_I2C *i2c, IfxI2c_ErrorInterruptSource source);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   230  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   231  /** \brief disables last burst request interrupt source
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   232   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   233   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   234   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   235  IFX_INLINE void IfxI2c_disableLastBurstRequestInterruptSource(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   236  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   237  /** \brief disables last single request interrupt source
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   238   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   239   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   240   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   241  IFX_INLINE void IfxI2c_disableLastSingleRequestInterruptSource(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   242  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   243  /** \brief disables the Protocol interrupt flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   244   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   245   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   246   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   247  IFX_INLINE void IfxI2c_disableProtocolInterruptFlag(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   248  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   249  /** \brief disables the specified source of protocol interrupt
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   250   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   251   * \param source protocol interrupt source
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   252   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   253   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   254  IFX_INLINE void IfxI2c_disableProtocolInterruptSource(Ifx_I2C *i2c, IfxI2c_ProtocolInterruptSource source);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   255  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   256  /** \brief disables single request interrupt source
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   257   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   258   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   259   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   260  IFX_INLINE void IfxI2c_disableSingleRequestInterruptSource(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   261  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   262  /** \brief enables burst request interrupt source
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   263   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   264   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   265   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   266  IFX_INLINE void IfxI2c_enableBurstRequestInterruptSource(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   267  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   268  /** \brief enables the error interrupt flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   269   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   270   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   271   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   272  IFX_INLINE void IfxI2c_enableErrorInterruptFlag(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   273  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   274  /** \brief enables the specified source of error interrupt
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   275   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   276   * \param source error interrupt source
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   277   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   278   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   279  IFX_INLINE void IfxI2c_enableErrorInterruptSource(Ifx_I2C *i2c, IfxI2c_ErrorInterruptSource source);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   280  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   281  /** \brief enables last burst request interrupt source
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   282   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   283   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   284   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   285  IFX_INLINE void IfxI2c_enableLastBurstRequestInterruptSource(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   286  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   287  /** \brief enables last single request interrupt source
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   288   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   289   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   290   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   291  IFX_INLINE void IfxI2c_enableLastSingleRequestInterruptSource(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   292  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   293  /** \brief enables the protocol interrupt flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   294   * \param i2c pointer to I2C registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   295   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   296   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   297  IFX_INLINE void IfxI2c_enableProtocolInterruptFlag(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   298  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   299  /** \brief enables the specified source of protocol interrupt
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   300   * \param i2c pointer to I2C registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   301   * \param source protocol interrupt source
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   302   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   303   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   304  IFX_INLINE void IfxI2c_enableProtocolInterruptSource(Ifx_I2C *i2c, IfxI2c_ProtocolInterruptSource source);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   305  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   306  /** \brief enables single request interrupt source
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   307   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   308   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   309   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   310  IFX_INLINE void IfxI2c_enableSingleRequestInterruptSource(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   311  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   312  /** \brief Returns the SRC pointer for I2C burst data transfer request interrupt
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   313   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   314   * \return SRC pointer for I2C burst data transfer Service interrupt
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   315   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   316  IFX_INLINE volatile Ifx_SRC_SRCR *IfxI2c_getBurstDataTransferSrcPointer(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   317  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   318  /** \brief returns the status of burst request interrupt source status
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   319   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   320   * \return status
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   321   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   322  IFX_INLINE boolean IfxI2c_getBurstRequestInterruptSourceStatus(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   323  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   324  /**
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   325   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   326   * \return BusStatus
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   327   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   328  IFX_INLINE IfxI2c_BusStatus IfxI2c_getBusStatus(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   329  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   330  /** \brief returns the current status of error interrupt flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   331   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   332   * \return status
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   333   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   334  IFX_INLINE boolean IfxI2c_getErrorInterruptFlagStatus(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   335  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   336  /** \brief returns the status of the error interrupt source
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   337   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   338   * \param source error interrupt source
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   339   * \return status
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   340   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   341  IFX_INLINE boolean IfxI2c_getErrorInterruptSourceStatus(Ifx_I2C *i2c, IfxI2c_ErrorInterruptSource source);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   342  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   343  /** \brief Returns the SRC pointer for I2C Error interrupt
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   344   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   345   * \return SRC pointer for I2C Error Service interrupt
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   346   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   347  IFX_INLINE volatile Ifx_SRC_SRCR *IfxI2c_getErrorSrcPointer(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   348  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   349  /** \brief Returns the SRC pointer for I2C last burst data transfer request interrupt
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   350   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   351   * \return SRC pointer for I2C last burst data transfer Service interrupt
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   352   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   353  IFX_INLINE volatile Ifx_SRC_SRCR *IfxI2c_getLastBurstDataTransferSrcPointer(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   354  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   355  /** \brief returns the status of last burst request interrupt source status
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   356   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   357   * \return status
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   358   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   359  IFX_INLINE boolean IfxI2c_getLastBurstRequestInterruptSourceStatus(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   360  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   361  /** \brief Returns the SRC pointer for I2C last single data transfer request interrupt
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   362   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   363   * \return SRC pointer for I2C last single data transfer Service interrupt
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   364   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   365  IFX_INLINE volatile Ifx_SRC_SRCR *IfxI2c_getLastSingleDataTransferSrcPointer(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   366  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   367  /** \brief returns the status of last single request interrupt source status
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   368   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   369   * \return status
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   370   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   371  IFX_INLINE boolean IfxI2c_getLastSingleRequestInterruptSourceStatus(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   372  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   373  /** \brief returns the current raw status of protocol interrupt
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   374   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   375   * \return status
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   376   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   377  IFX_INLINE boolean IfxI2c_getProtocolInterruptFlagStatus(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   378  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   379  /** \brief returns the status of  specified protocol interrupt source
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   380   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   381   * \param source protocol interrupt source
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   382   * \return status
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   383   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   384  IFX_INLINE boolean IfxI2c_getProtocolInterruptSourceStatus(Ifx_I2C *i2c, IfxI2c_ProtocolInterruptSource source);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   385  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   386  /** \brief Returns the SRC pointer for I2C Protocol interrupt
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   387   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   388   * \return SRC pointer for I2C Protocol Service interrupt
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   389   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   390  IFX_INLINE volatile Ifx_SRC_SRCR *IfxI2c_getProtocolSrcPointer(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   391  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   392  /** \brief Returns the SRC pointer for I2C single data transfer request interrupt
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   393   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   394   * \return SRC pointer for I2C single data transfer Service interrupt
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   395   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   396  IFX_INLINE volatile Ifx_SRC_SRCR *IfxI2c_getSingleDataTransferSrcPointer(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   397  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   398  /** \brief returns the status of single request interrupt source status
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   399   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   400   * \return status
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   401   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   402  IFX_INLINE boolean IfxI2c_getSingleRequestInterruptSourceStatus(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   403  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   404  /** \brief Returns if the Fifo is requesting new data
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   405   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   406  IFX_INLINE boolean IfxI2c_isFifoRequest(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   407  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   408  /**
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   409   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   410   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   411   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   412  IFX_INLINE void IfxI2c_run(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   413  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   414  /** \brief selects the pin
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   415   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   416   * \param pisel pin to be select
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   417   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   418   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   419  IFX_INLINE void IfxI2c_setPinSelection(Ifx_I2C *i2c, IfxI2c_PinSelect pisel);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   420  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   421  /** \brief Sets the number of bytes to be received
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   422   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   423   * \param size number of packets
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   424   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   425   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   426  IFX_INLINE void IfxI2c_setReceivePacketSize(Ifx_I2C *i2c, Ifx_SizeT size);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   427  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   428  /**
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   429   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   430   * \param address device address
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   431   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   432   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   433  IFX_INLINE void IfxI2c_setSlaveDeviceAddress(Ifx_I2C *i2c, uint16 address);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   434  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   435  /** \brief Sets the sensitivity of the module to sleep signal
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   436   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   437   * \param mode mode selection (enable / disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   438   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   439   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   440  IFX_INLINE void IfxI2c_setSleepMode(Ifx_I2C *i2c, IfxI2c_SleepMode mode);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   441  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   442  /** \brief Sets the number of bytes to be tansmitted
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   443   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   444   * \param size number of packets
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   445   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   446   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   447  IFX_INLINE void IfxI2c_setTransmitPacketSize(Ifx_I2C *i2c, Ifx_SizeT size);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   448  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   449  /**
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   450   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   451   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   452   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   453  IFX_INLINE void IfxI2c_stop(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   454  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   455  /**
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   456   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   457   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   458   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   459  IFX_INLINE void IfxI2c_waitBusFree(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   460  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   461  /** \brief Writes a packet (4 bytes) into the Fifo
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   462   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   463   * \param packet specifies the byte to be transfer
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   464   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   465   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   466  IFX_INLINE void IfxI2c_writeFifo(Ifx_I2C *i2c, uint32 packet);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   467  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   468  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   469  /*-------------------------Global Function Prototypes-------------------------*/
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   470  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   471  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   472  /** \brief Configures the Module as Master
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   473   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   474   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   475   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   476  IFX_EXTERN void IfxI2c_configureAsMaster(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   477  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   478  /** \brief Disables the I2c Module
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   479   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   480   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   481   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   482  IFX_EXTERN void IfxI2c_disableModule(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   483  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   484  /** \brief Enables the Burst data transfer interrupt
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   485   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   486   * \param typeOfService Type of Service (Cpu or DMA)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   487   * \param priority priority of the interrupt
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   488   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   489   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   490  IFX_EXTERN void IfxI2c_enableBurstDataTransferInterrupt(Ifx_I2C *i2c, IfxSrc_Tos typeOfService, uint16 priority);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   491  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   492  /** \brief Enables the Error interrupt
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   493   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   494   * \param typeOfService Type of Service (Cpu or DMA)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   495   * \param priority priority of the interrupt
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   496   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   497   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   498  IFX_EXTERN void IfxI2c_enableErrorInterrupt(Ifx_I2C *i2c, IfxSrc_Tos typeOfService, uint16 priority);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   499  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   500  /** \brief enables the last burst data transfer interrupt
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   501   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   502   * \param typeOfService Type of Service (Cpu or DMA)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   503   * \param priority priority of the interrupt
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   504   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   505   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   506  IFX_EXTERN void IfxI2c_enableLastBurstDataTransferInterrupt(Ifx_I2C *i2c, IfxSrc_Tos typeOfService, uint16 priority);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   507  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   508  /** \brief enables the last single data transfer interrupt
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   509   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   510   * \param typeOfService Type of Service (Cpu or DMA)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   511   * \param priority priority of the interrupt
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   512   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   513   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   514  IFX_EXTERN void IfxI2c_enableLastSingleDataTransferInterrupt(Ifx_I2C *i2c, IfxSrc_Tos typeOfService, uint16 priority);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   515  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   516  /** \brief Enables the I2c Module
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   517   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   518   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   519   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   520  IFX_EXTERN void IfxI2c_enableModule(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   521  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   522  /** \brief Enables the protocol interrupt
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   523   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   524   * \param typeOfService Type of Service (Cpu or DMA)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   525   * \param priority Priority of the interrupt
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   526   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   527   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   528  IFX_EXTERN void IfxI2c_enableProtocolInterrupt(void *i2c, IfxSrc_Tos typeOfService, uint16 priority);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   529  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   530  /** \brief enables the single data transfer interrupt
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   531   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   532   * \param typeOfService Type of Service (Cpu or DMA)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   533   * \param priority priority of the interrupt
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   534   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   535   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   536  IFX_EXTERN void IfxI2c_enableSingleDataTransferInterrupt(Ifx_I2C *i2c, IfxSrc_Tos typeOfService, uint16 priority);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   537  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   538  /**
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   539   * \param i2c Resource index of the I2c
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   540   * \return I2C module register address
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   541   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   542  IFX_EXTERN Ifx_I2C *IfxI2c_getAddress(IfxI2c_Index i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   543  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   544  /** \brief Returns the real Baudrate
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   545   * \return Baudrate
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   546   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   547  IFX_EXTERN float32 IfxI2c_getBaudrate(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   548  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   549  /** \brief API to get the resource index of the I2C specified.
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   550   * \param i2c Pointer to the I2C HW module (register memory map)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   551   * \return Resource index of the I2C
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   552   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   553  IFX_EXTERN IfxI2c_Index IfxI2c_getIndex(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   554  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   555  /**
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   556   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   557   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   558  IFX_EXTERN void IfxI2c_initSclSdaPin(const IfxI2c_Scl_InOut *scl, const IfxI2c_Sda_InOut *sda, IfxPort_PadDriver padDriver);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   559  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   560  /** \brief Releases the bus, i.e puts a stop condition on the bus
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   561   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   562   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   563  IFX_EXTERN void IfxI2c_releaseBus(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   564  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   565  /**
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   566   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   567   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   568  IFX_EXTERN void IfxI2c_resetFifo(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   569  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   570  /** \brief resets the I2c kernel
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   571   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   572   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   573   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   574  IFX_EXTERN void IfxI2c_resetModule(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   575  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   576  /** \brief Calculates the desired baudrate
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   577   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   578   * \param baudrate specifies the baud rate
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   579   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   580   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   581  IFX_EXTERN void IfxI2c_setBaudrate(Ifx_I2C *i2c, float32 baudrate);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   582  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   583  /** \} */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   584  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   585  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   586  /*---------------------Inline Function Implementations------------------------*/
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   587  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   588  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   589  IFX_INLINE boolean IfxI2c_busIsFree(Ifx_I2C *i2c)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   590  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   591      boolean free = FALSE;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   592  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   593      if (i2c->BUSSTAT.B.BS == IfxI2c_BusStatus_idle)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   594      {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   595          free = TRUE;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   596      }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   597  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   598      return free;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   599  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   600  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   601  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   602  IFX_INLINE void IfxI2c_clearAllDtrInterruptSources(Ifx_I2C *i2c)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   603  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   604      i2c->ICR.U = (1 << IFX_I2C_ICR_LSREQ_INT_OFF) | (1 << IFX_I2C_ICR_SREQ_INT_OFF) | (1 << IFX_I2C_ICR_LBREQ_INT_OFF) | (1 << IFX_I2C_ICR_BREQ_INT_OFF);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   605  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   606  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   607  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   608  IFX_INLINE void IfxI2c_clearAllErrorInterruptSources(Ifx_I2C *i2c)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   609  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   610      i2c->ERRIRQSC.U = (1 << IFX_I2C_ERRIRQSC_RXF_UFL_OFF) | (1 << IFX_I2C_ERRIRQSC_RXF_OFL_OFF) | (1 << IFX_I2C_ERRIRQSC_TXF_UFL_OFF) | (1 << IFX_I2C_ERRIRQSC_TXF_OFL_OFF);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   611  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   612  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   613  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   614  IFX_INLINE void IfxI2c_clearAllProtocolInterruptSources(Ifx_I2C *i2c)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   615  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   616      i2c->PIRQSC.U = (1 << IFX_I2C_PIRQSC_AM_OFF) | (1 << IFX_I2C_PIRQSC_GC_OFF) | (1 << IFX_I2C_PIRQSC_MC_OFF) | (1 << IFX_I2C_PIRQSC_AL_OFF) | (1 << IFX_I2C_PIRQSC_NACK_OFF) | (1 << IFX_I2C_PIRQSC_TX_END_OFF) | (1 << IFX_I2C_PIRQSC_RX_OFF);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   617  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   618  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   619  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   620  IFX_INLINE void IfxI2c_clearBurstRequestInterruptSource(Ifx_I2C *i2c)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   621  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   622      i2c->ICR.B.BREQ_INT = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   623  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   624  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   625  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   626  IFX_INLINE void IfxI2c_clearErrorInterruptSource(Ifx_I2C *i2c, IfxI2c_ErrorInterruptSource source)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   627  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   628      i2c->ERRIRQSC.U = (1 << source);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   629  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   630  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   631  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   632  IFX_INLINE void IfxI2c_clearLastBurstRequestInterruptSource(Ifx_I2C *i2c)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   633  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   634      i2c->ICR.B.LBREQ_INT = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   635  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   636  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   637  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   638  IFX_INLINE void IfxI2c_clearLastSingleRequestInterruptSource(Ifx_I2C *i2c)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   639  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   640      i2c->ICR.B.LSREQ_INT = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   641  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   642  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   643  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   644  IFX_INLINE void IfxI2c_clearProtocolInterruptSource(Ifx_I2C *i2c, IfxI2c_ProtocolInterruptSource source)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   645  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   646      i2c->PIRQSC.U = (1 << source);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   647  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   648  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   649  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   650  IFX_INLINE void IfxI2c_clearSingleRequestInterruptSource(Ifx_I2C *i2c)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   651  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   652      i2c->ICR.B.SREQ_INT = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   653  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   654  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   655  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   656  IFX_INLINE void IfxI2c_disableBurstRequestInterruptSource(Ifx_I2C *i2c)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   657  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   658      i2c->IMSC.B.BREQ_INT = 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   659  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   660  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   661  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   662  IFX_INLINE void IfxI2c_disableErrorInterruptFlag(Ifx_I2C *i2c)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   663  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   664      i2c->IMSC.B.I2C_ERR_INT = 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   665  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   666  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   667  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   668  IFX_INLINE void IfxI2c_disableErrorInterruptSource(Ifx_I2C *i2c, IfxI2c_ErrorInterruptSource source)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   669  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   670      i2c->ERRIRQSM.U &= ~(1 << source);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   671  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   672  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   673  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   674  IFX_INLINE void IfxI2c_disableLastBurstRequestInterruptSource(Ifx_I2C *i2c)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   675  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   676      i2c->IMSC.B.LBREQ_INT = 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   677  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   678  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   679  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   680  IFX_INLINE void IfxI2c_disableLastSingleRequestInterruptSource(Ifx_I2C *i2c)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   681  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   682      i2c->IMSC.B.LSREQ_INT = 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   683  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   684  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   685  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   686  IFX_INLINE void IfxI2c_disableProtocolInterruptFlag(Ifx_I2C *i2c)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   687  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   688      i2c->IMSC.B.I2C_P_INT = 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   689  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   690  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   691  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   692  IFX_INLINE void IfxI2c_disableProtocolInterruptSource(Ifx_I2C *i2c, IfxI2c_ProtocolInterruptSource source)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   693  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   694      i2c->PIRQSM.U &= ~(1 << source);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   695  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   696  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   697  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   698  IFX_INLINE void IfxI2c_disableSingleRequestInterruptSource(Ifx_I2C *i2c)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   699  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   700      i2c->IMSC.B.SREQ_INT = 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   701  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   702  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   703  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   704  IFX_INLINE void IfxI2c_enableBurstRequestInterruptSource(Ifx_I2C *i2c)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   705  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   706      i2c->IMSC.B.BREQ_INT = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   707  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   708  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   709  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   710  IFX_INLINE void IfxI2c_enableErrorInterruptFlag(Ifx_I2C *i2c)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   711  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   712      i2c->IMSC.B.I2C_ERR_INT = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   713  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   714  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   715  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   716  IFX_INLINE void IfxI2c_enableErrorInterruptSource(Ifx_I2C *i2c, IfxI2c_ErrorInterruptSource source)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   717  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   718      i2c->ERRIRQSM.U |= (1 << source);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   719  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   720  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   721  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   722  IFX_INLINE void IfxI2c_enableLastBurstRequestInterruptSource(Ifx_I2C *i2c)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   723  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   724      i2c->IMSC.B.LBREQ_INT = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   725  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   726  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   727  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   728  IFX_INLINE void IfxI2c_enableLastSingleRequestInterruptSource(Ifx_I2C *i2c)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   729  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   730      i2c->IMSC.B.LSREQ_INT = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   731  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   732  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   733  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   734  IFX_INLINE void IfxI2c_enableProtocolInterruptFlag(Ifx_I2C *i2c)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   735  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   736      i2c->IMSC.B.I2C_P_INT = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   737  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   738  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   739  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   740  IFX_INLINE void IfxI2c_enableProtocolInterruptSource(Ifx_I2C *i2c, IfxI2c_ProtocolInterruptSource source)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   741  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   742      i2c->PIRQSM.U |= (1 << source);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   743  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   744  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   745  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   746  IFX_INLINE void IfxI2c_enableSingleRequestInterruptSource(Ifx_I2C *i2c)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   747  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   748      i2c->IMSC.B.SREQ_INT = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   749  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   750  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   751  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   752  IFX_INLINE volatile Ifx_SRC_SRCR *IfxI2c_getBurstDataTransferSrcPointer(Ifx_I2C *i2c)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   753  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   754      if (i2c == &MODULE_I2C0)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   755      {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   756          return &MODULE_SRC.I2C.I2C[0].BREQ;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   757      }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   758      else
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   759      {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   760          return &MODULE_SRC.I2C.I2C[1].BREQ;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   761      }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   762  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   763  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   764  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   765  IFX_INLINE boolean IfxI2c_getBurstRequestInterruptSourceStatus(Ifx_I2C *i2c)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   766  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   767      return i2c->RIS.B.BREQ_INT;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   768  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   769  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   770  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   771  IFX_INLINE IfxI2c_BusStatus IfxI2c_getBusStatus(Ifx_I2C *i2c)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   772  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   773      return (IfxI2c_BusStatus)i2c->BUSSTAT.B.BS;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   774  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   775  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   776  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   777  IFX_INLINE boolean IfxI2c_getErrorInterruptFlagStatus(Ifx_I2C *i2c)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   778  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   779      return i2c->RIS.B.I2C_ERR_INT;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   780  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   781  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   782  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   783  IFX_INLINE boolean IfxI2c_getErrorInterruptSourceStatus(Ifx_I2C *i2c, IfxI2c_ErrorInterruptSource source)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   784  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   785      return (i2c->ERRIRQSS.U & (1 << source)) ? TRUE : FALSE;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   786  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   787  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   788  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   789  IFX_INLINE volatile Ifx_SRC_SRCR *IfxI2c_getErrorSrcPointer(Ifx_I2C *i2c)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   790  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   791      if (i2c == &MODULE_I2C0)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   792      {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   793          return &MODULE_SRC.I2C.I2C[0].ERR;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   794      }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   795      else
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   796      {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   797          return &MODULE_SRC.I2C.I2C[1].ERR;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   798      }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   799  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   800  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   801  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   802  IFX_INLINE volatile Ifx_SRC_SRCR *IfxI2c_getLastBurstDataTransferSrcPointer(Ifx_I2C *i2c)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   803  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   804      if (i2c == &MODULE_I2C0)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   805      {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   806          return &MODULE_SRC.I2C.I2C[0].LBREQ;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   807      }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   808      else
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   809      {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   810          return &MODULE_SRC.I2C.I2C[1].LBREQ;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   811      }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   812  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   813  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   814  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   815  IFX_INLINE boolean IfxI2c_getLastBurstRequestInterruptSourceStatus(Ifx_I2C *i2c)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   816  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   817      return i2c->RIS.B.LBREQ_INT;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   818  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   819  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   820  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   821  IFX_INLINE volatile Ifx_SRC_SRCR *IfxI2c_getLastSingleDataTransferSrcPointer(Ifx_I2C *i2c)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   822  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   823      if (i2c == &MODULE_I2C0)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   824      {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   825          return &MODULE_SRC.I2C.I2C[0].LSREQ;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   826      }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   827      else
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   828      {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   829          return &MODULE_SRC.I2C.I2C[1].LSREQ;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   830      }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   831  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   832  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   833  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   834  IFX_INLINE boolean IfxI2c_getLastSingleRequestInterruptSourceStatus(Ifx_I2C *i2c)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   835  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   836      return i2c->RIS.B.LSREQ_INT;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   837  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   838  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   839  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   840  IFX_INLINE boolean IfxI2c_getProtocolInterruptFlagStatus(Ifx_I2C *i2c)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   841  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   842      return i2c->RIS.B.I2C_P_INT;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   843  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   844  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   845  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   846  IFX_INLINE boolean IfxI2c_getProtocolInterruptSourceStatus(Ifx_I2C *i2c, IfxI2c_ProtocolInterruptSource source)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   847  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   848      return (i2c->PIRQSS.U & (1 << source)) ? TRUE : FALSE;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   849  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   850  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   851  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   852  IFX_INLINE volatile Ifx_SRC_SRCR *IfxI2c_getProtocolSrcPointer(Ifx_I2C *i2c)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   853  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   854      if (i2c == &MODULE_I2C0)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   855      {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   856          return &MODULE_SRC.I2C.I2C[0].P;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   857      }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   858      else
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   859      {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   860          return &MODULE_SRC.I2C.I2C[1].P;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   861      }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   862  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   863  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   864  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   865  IFX_INLINE volatile Ifx_SRC_SRCR *IfxI2c_getSingleDataTransferSrcPointer(Ifx_I2C *i2c)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   866  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   867      if (i2c == &MODULE_I2C0)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   868      {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   869          return &MODULE_SRC.I2C.I2C[0].SREQ;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   870      }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   871      else
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   872      {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   873          return &MODULE_SRC.I2C.I2C[1].SREQ;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   874      }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   875  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   876  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   877  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   878  IFX_INLINE boolean IfxI2c_getSingleRequestInterruptSourceStatus(Ifx_I2C *i2c)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   879  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   880      return i2c->RIS.B.SREQ_INT;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   881  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   882  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   883  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   884  IFX_INLINE boolean IfxI2c_isFifoRequest(Ifx_I2C *i2c)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   885  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   886      return i2c->RIS.U & 0x0F ? TRUE : FALSE;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   887  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   888  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   889  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   890  IFX_INLINE void IfxI2c_run(Ifx_I2C *i2c)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   891  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   892      i2c->RUNCTRL.U = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   893  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   894  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   895  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   896  IFX_INLINE void IfxI2c_setPinSelection(Ifx_I2C *i2c, IfxI2c_PinSelect pisel)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   897  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   898      i2c->GPCTL.B.PISEL = pisel;
	add.a	a3,a2
	ld.bu	d0,[+a3]8
.L534:
	movh.a	a3,#1
	insert	d15,d0,d15,#0,#3
	add.a	a3,a2
	st.b	[+a3]8,d15
.L331:

; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.c	   229  river);
	ret
.L301:
	
__IfxI2c_initSclSdaPin_function_end:
	.size	IfxI2c_initSclSdaPin,__IfxI2c_initSclSdaPin_function_end-IfxI2c_initSclSdaPin
.L143:
	; End of function
	
	.sdecl	'.text.IfxI2c.IfxI2c_releaseBus',code,cluster('IfxI2c_releaseBus')
	.sect	'.text.IfxI2c.IfxI2c_releaseBus'
	.align	2
	
	.global	IfxI2c_releaseBus

; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.c	   230      IfxPort_setPinPadDriver(sda->pin.port, sda->pin.pinIndex, padDriver);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.c	   231      IfxI2c_setPinSelection(scl->module, (IfxI2c_PinSelect)scl->inSelect); // note: uses the same PISEL register like SDA
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.c	   232  }
; Function IfxI2c_releaseBus
.L68:
IfxI2c_releaseBus:	.type	func

; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.c	   233  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.c	   234  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.c	   235  void IfxI2c_releaseBus(Ifx_I2C *i2c)
	ld.bu	d15,[a4]36
	and	d15,#3
.L539:
	jeq	d15,#0,.L24
.L540:

; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.c	   236  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.c	   237      // only set the set end of transmisson bit if bus is not free
	ld.bu	d15,[a4]20
.L541:
	or	d15,#2
	st.b	[a4]20,d15

; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.c	   238      if (i2c->BUSSTAT.B.BS != IfxI2c_BusStatus_idle)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.c	   239      {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.c	   240          i2c->ENDDCTRL.B.SETEND = 1;
.L25:

; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	     1  /**
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	     2   * \file IfxI2c.h
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	     3   * \brief I2C  basic functionality
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	     4   * \ingroup IfxLld_I2c
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	     5   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	     6   * \version iLLD_1_0_1_11_0
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	     7   * \copyright Copyright (c) 2018 Infineon Technologies AG. All rights reserved.
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	     8   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	     9   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    10   *                                 IMPORTANT NOTICE
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    11   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    12   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    13   * Use of this file is subject to the terms of use agreed between (i) you or 
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    14   * the company in which ordinary course of business you are acting and (ii) 
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    15   * Infineon Technologies AG or its licensees. If and as long as no such 
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    16   * terms of use are agreed, use of this file is subject to following:
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    17  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    18  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    19   * Boost Software License - Version 1.0 - August 17th, 2003
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    20  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    21   * Permission is hereby granted, free of charge, to any person or 
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    22   * organization obtaining a copy of the software and accompanying 
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    23   * documentation covered by this license (the "Software") to use, reproduce,
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    24   * display, distribute, execute, and transmit the Software, and to prepare
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    25   * derivative works of the Software, and to permit third-parties to whom the 
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    26   * Software is furnished to do so, all subject to the following:
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    27  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    28   * The copyright notices in the Software and this entire statement, including
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    29   * the above license grant, this restriction and the following disclaimer, must
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    30   * be included in all copies of the Software, in whole or in part, and all
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    31   * derivative works of the Software, unless such copies or derivative works are
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    32   * solely in the form of machine-executable object code generated by a source
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    33   * language processor.
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    34  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    35   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR 
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    36   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    37   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    38   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE 
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    39   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    40   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    41   * DEALINGS IN THE SOFTWARE.
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    42  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    43   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    44   * \defgroup IfxLld_I2c_Std_enums Enumerations
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    45   * \ingroup IfxLld_I2c_Std
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    46   * \defgroup IfxLld_I2c_Std_functions Functions
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    47   * \ingroup IfxLld_I2c_Std
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    48   * \defgroup IfxLld_I2c_Std_structures Data Structures
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    49   * \ingroup IfxLld_I2c_Std
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    50   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    51  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    52  #ifndef IFXI2C_H
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    53  #define IFXI2C_H 1
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    54  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    55  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    56  /*----------------------------------Includes----------------------------------*/
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    57  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    58  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    59  #include "_Impl/IfxI2c_cfg.h"
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    60  #include "Scu/Std/IfxScuWdt.h"
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    61  #include "Scu/Std/IfxScuCcu.h"
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    62  #include "IfxI2c_bf.h"
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    63  #include "_PinMap/IfxI2c_PinMap.h"
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    64  #include "Src/Std/IfxSrc.h"
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    65  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    66  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    67  /*--------------------------------Enumerations--------------------------------*/
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    68  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    69  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    70  /** \addtogroup IfxLld_I2c_Std_enums
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    71   * \{ */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    72  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    73  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    74      IfxI2c_BusStatus_idle        = 0, /**< \brief idle */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    75      IfxI2c_BusStatus_started     = 1, /**< \brief started */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    76      IfxI2c_BusStatus_busyMaster  = 2, /**< \brief busy Master */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    77      IfxI2c_BusStatus_remoteSlave = 3  /**< \brief remote Slave */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    78  } IfxI2c_BusStatus;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    79  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    80  /** \brief enable error interrupt request source
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    81   * Definition in Ifx.I2C.ERRIRQSM.U
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    82   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    83  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    84  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    85      IfxI2c_ErrorInterruptSource_rxFifoUnderflow = IFX_I2C_ERRIRQSM_RXF_UFL_OFF,  /**< \brief receive fifo underflow service request */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    86      IfxI2c_ErrorInterruptSource_rxFifoOverflow  = IFX_I2C_ERRIRQSM_RXF_OFL_OFF,  /**< \brief receive fifo overflow service request */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    87      IfxI2c_ErrorInterruptSource_txFifoUnderflow = IFX_I2C_ERRIRQSM_TXF_UFL_OFF,  /**< \brief transmit fifo underflow service request */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    88      IfxI2c_ErrorInterruptSource_txFifoOverflow  = IFX_I2C_ERRIRQSM_TXF_OFL_OFF   /**< \brief transmit fifo overflow service request */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    89  } IfxI2c_ErrorInterruptSource;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    90  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    91  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    92  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    93      IfxI2c_PinSelect_a = 0,
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    94      IfxI2c_PinSelect_b = 1,
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    95      IfxI2c_PinSelect_c = 2,
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    96      IfxI2c_PinSelect_d = 3,
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    97      IfxI2c_PinSelect_e = 4,
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    98      IfxI2c_PinSelect_f = 5,
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    99      IfxI2c_PinSelect_g = 6,
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   100      IfxI2c_PinSelect_h = 7
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   101  } IfxI2c_PinSelect;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   102  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   103  /** \brief enable protocol interrupt source
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   104   * Definition in Ifx.I2C.PIRQSM.U
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   105   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   106  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   107  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   108      IfxI2c_ProtocolInterruptSource_addressMatch           = IFX_I2C_PIRQSM_AM_OFF,     /**< \brief address match service request */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   109      IfxI2c_ProtocolInterruptSource_generalCall            = IFX_I2C_PIRQSM_GC_OFF,     /**< \brief general call service request */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   110      IfxI2c_ProtocolInterruptSource_masterCode             = IFX_I2C_PIRQSM_MC_OFF,     /**< \brief master code service request */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   111      IfxI2c_ProtocolInterruptSource_arbitrationLost        = IFX_I2C_PIRQSM_AL_OFF,     /**< \brief arbitration lost service request */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   112      IfxI2c_ProtocolInterruptSource_notAcknowledgeReceived = IFX_I2C_PIRQSM_NACK_OFF,   /**< \brief not acknowledge received service request */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   113      IfxI2c_ProtocolInterruptSource_transmissionEnd        = IFX_I2C_PIRQSM_TX_END_OFF, /**< \brief transmission end service request */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   114      IfxI2c_ProtocolInterruptSource_receiveMode            = IFX_I2C_PIRQSM_RX_OFF      /**< \brief receive mode service request */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   115  } IfxI2c_ProtocolInterruptSource;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   116  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   117  /** \brief Enable/disable the sensitivity of the module to sleep signal\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   118   * Definition in Ifx_I2C.CLC1.B.EDIS
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   119   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   120  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   121  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   122      IfxI2c_SleepMode_enable  = 0, /**< \brief enables sleep mode */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   123      IfxI2c_SleepMode_disable = 1  /**< \brief disables sleep mode */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   124  } IfxI2c_SleepMode;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   125  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   126  /** \} */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   127  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   128  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   129  /*-----------------------------Data Structures--------------------------------*/
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   130  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   131  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   132  /** \addtogroup IfxLld_I2c_Std_structures
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   133   * \{ */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   134  /** \brief Pin Structure
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   135   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   136  typedef struct
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   137  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   138      IfxI2c_Scl_InOut *scl;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   139      IfxI2c_Sda_InOut *sda;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   140      IfxPort_PadDriver padDriver;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   141  } IfxI2c_Pins;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   142  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   143  /** \} */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   144  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   145  /** \addtogroup IfxLld_I2c_Std_functions
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   146   * \{ */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   147  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   148  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   149  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   150  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   151  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   152  /** \brief Returns if the bus is free
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   153   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   154  IFX_INLINE boolean IfxI2c_busIsFree(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   155  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   156  /** \brief clears all DTR interrupt sources
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   157   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   158   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   159   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   160  IFX_INLINE void IfxI2c_clearAllDtrInterruptSources(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   161  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   162  /** \brief clears all Error Interrupt sources
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   163   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   164   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   165   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   166  IFX_INLINE void IfxI2c_clearAllErrorInterruptSources(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   167  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   168  /** \brief Clears all Protocol Interrupt sources
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   169   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   170   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   171   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   172  IFX_INLINE void IfxI2c_clearAllProtocolInterruptSources(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   173  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   174  /** \brief clears burst request interrupt source
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   175   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   176   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   177   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   178  IFX_INLINE void IfxI2c_clearBurstRequestInterruptSource(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   179  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   180  /** \brief clears the specified source of error interrupt
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   181   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   182   * \param source error interrupt source
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   183   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   184   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   185  IFX_INLINE void IfxI2c_clearErrorInterruptSource(Ifx_I2C *i2c, IfxI2c_ErrorInterruptSource source);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   186  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   187  /** \brief clears last burst request interrupt source
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   188   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   189   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   190   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   191  IFX_INLINE void IfxI2c_clearLastBurstRequestInterruptSource(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   192  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   193  /** \brief clears last single request interrupt source
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   194   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   195   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   196   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   197  IFX_INLINE void IfxI2c_clearLastSingleRequestInterruptSource(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   198  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   199  /** \brief clears the specified source of protocol interrupt
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   200   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   201   * \param source protocol interrupt source
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   202   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   203   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   204  IFX_INLINE void IfxI2c_clearProtocolInterruptSource(Ifx_I2C *i2c, IfxI2c_ProtocolInterruptSource source);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   205  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   206  /** \brief clears single request interrupt source
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   207   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   208   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   209   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   210  IFX_INLINE void IfxI2c_clearSingleRequestInterruptSource(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   211  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   212  /** \brief disables burst request interrupt source
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   213   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   214   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   215   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   216  IFX_INLINE void IfxI2c_disableBurstRequestInterruptSource(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   217  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   218  /** \brief disables the error interrupt flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   219   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   220   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   221   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   222  IFX_INLINE void IfxI2c_disableErrorInterruptFlag(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   223  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   224  /** \brief disables the specified source of error interrupt
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   225   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   226   * \param source error interrupt source
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   227   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   228   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   229  IFX_INLINE void IfxI2c_disableErrorInterruptSource(Ifx_I2C *i2c, IfxI2c_ErrorInterruptSource source);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   230  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   231  /** \brief disables last burst request interrupt source
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   232   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   233   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   234   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   235  IFX_INLINE void IfxI2c_disableLastBurstRequestInterruptSource(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   236  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   237  /** \brief disables last single request interrupt source
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   238   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   239   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   240   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   241  IFX_INLINE void IfxI2c_disableLastSingleRequestInterruptSource(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   242  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   243  /** \brief disables the Protocol interrupt flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   244   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   245   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   246   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   247  IFX_INLINE void IfxI2c_disableProtocolInterruptFlag(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   248  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   249  /** \brief disables the specified source of protocol interrupt
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   250   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   251   * \param source protocol interrupt source
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   252   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   253   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   254  IFX_INLINE void IfxI2c_disableProtocolInterruptSource(Ifx_I2C *i2c, IfxI2c_ProtocolInterruptSource source);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   255  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   256  /** \brief disables single request interrupt source
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   257   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   258   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   259   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   260  IFX_INLINE void IfxI2c_disableSingleRequestInterruptSource(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   261  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   262  /** \brief enables burst request interrupt source
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   263   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   264   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   265   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   266  IFX_INLINE void IfxI2c_enableBurstRequestInterruptSource(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   267  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   268  /** \brief enables the error interrupt flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   269   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   270   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   271   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   272  IFX_INLINE void IfxI2c_enableErrorInterruptFlag(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   273  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   274  /** \brief enables the specified source of error interrupt
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   275   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   276   * \param source error interrupt source
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   277   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   278   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   279  IFX_INLINE void IfxI2c_enableErrorInterruptSource(Ifx_I2C *i2c, IfxI2c_ErrorInterruptSource source);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   280  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   281  /** \brief enables last burst request interrupt source
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   282   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   283   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   284   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   285  IFX_INLINE void IfxI2c_enableLastBurstRequestInterruptSource(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   286  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   287  /** \brief enables last single request interrupt source
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   288   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   289   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   290   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   291  IFX_INLINE void IfxI2c_enableLastSingleRequestInterruptSource(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   292  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   293  /** \brief enables the protocol interrupt flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   294   * \param i2c pointer to I2C registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   295   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   296   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   297  IFX_INLINE void IfxI2c_enableProtocolInterruptFlag(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   298  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   299  /** \brief enables the specified source of protocol interrupt
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   300   * \param i2c pointer to I2C registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   301   * \param source protocol interrupt source
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   302   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   303   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   304  IFX_INLINE void IfxI2c_enableProtocolInterruptSource(Ifx_I2C *i2c, IfxI2c_ProtocolInterruptSource source);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   305  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   306  /** \brief enables single request interrupt source
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   307   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   308   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   309   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   310  IFX_INLINE void IfxI2c_enableSingleRequestInterruptSource(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   311  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   312  /** \brief Returns the SRC pointer for I2C burst data transfer request interrupt
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   313   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   314   * \return SRC pointer for I2C burst data transfer Service interrupt
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   315   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   316  IFX_INLINE volatile Ifx_SRC_SRCR *IfxI2c_getBurstDataTransferSrcPointer(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   317  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   318  /** \brief returns the status of burst request interrupt source status
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   319   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   320   * \return status
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   321   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   322  IFX_INLINE boolean IfxI2c_getBurstRequestInterruptSourceStatus(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   323  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   324  /**
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   325   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   326   * \return BusStatus
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   327   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   328  IFX_INLINE IfxI2c_BusStatus IfxI2c_getBusStatus(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   329  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   330  /** \brief returns the current status of error interrupt flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   331   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   332   * \return status
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   333   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   334  IFX_INLINE boolean IfxI2c_getErrorInterruptFlagStatus(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   335  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   336  /** \brief returns the status of the error interrupt source
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   337   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   338   * \param source error interrupt source
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   339   * \return status
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   340   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   341  IFX_INLINE boolean IfxI2c_getErrorInterruptSourceStatus(Ifx_I2C *i2c, IfxI2c_ErrorInterruptSource source);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   342  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   343  /** \brief Returns the SRC pointer for I2C Error interrupt
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   344   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   345   * \return SRC pointer for I2C Error Service interrupt
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   346   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   347  IFX_INLINE volatile Ifx_SRC_SRCR *IfxI2c_getErrorSrcPointer(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   348  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   349  /** \brief Returns the SRC pointer for I2C last burst data transfer request interrupt
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   350   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   351   * \return SRC pointer for I2C last burst data transfer Service interrupt
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   352   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   353  IFX_INLINE volatile Ifx_SRC_SRCR *IfxI2c_getLastBurstDataTransferSrcPointer(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   354  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   355  /** \brief returns the status of last burst request interrupt source status
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   356   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   357   * \return status
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   358   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   359  IFX_INLINE boolean IfxI2c_getLastBurstRequestInterruptSourceStatus(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   360  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   361  /** \brief Returns the SRC pointer for I2C last single data transfer request interrupt
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   362   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   363   * \return SRC pointer for I2C last single data transfer Service interrupt
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   364   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   365  IFX_INLINE volatile Ifx_SRC_SRCR *IfxI2c_getLastSingleDataTransferSrcPointer(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   366  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   367  /** \brief returns the status of last single request interrupt source status
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   368   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   369   * \return status
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   370   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   371  IFX_INLINE boolean IfxI2c_getLastSingleRequestInterruptSourceStatus(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   372  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   373  /** \brief returns the current raw status of protocol interrupt
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   374   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   375   * \return status
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   376   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   377  IFX_INLINE boolean IfxI2c_getProtocolInterruptFlagStatus(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   378  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   379  /** \brief returns the status of  specified protocol interrupt source
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   380   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   381   * \param source protocol interrupt source
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   382   * \return status
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   383   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   384  IFX_INLINE boolean IfxI2c_getProtocolInterruptSourceStatus(Ifx_I2C *i2c, IfxI2c_ProtocolInterruptSource source);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   385  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   386  /** \brief Returns the SRC pointer for I2C Protocol interrupt
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   387   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   388   * \return SRC pointer for I2C Protocol Service interrupt
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   389   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   390  IFX_INLINE volatile Ifx_SRC_SRCR *IfxI2c_getProtocolSrcPointer(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   391  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   392  /** \brief Returns the SRC pointer for I2C single data transfer request interrupt
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   393   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   394   * \return SRC pointer for I2C single data transfer Service interrupt
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   395   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   396  IFX_INLINE volatile Ifx_SRC_SRCR *IfxI2c_getSingleDataTransferSrcPointer(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   397  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   398  /** \brief returns the status of single request interrupt source status
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   399   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   400   * \return status
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   401   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   402  IFX_INLINE boolean IfxI2c_getSingleRequestInterruptSourceStatus(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   403  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   404  /** \brief Returns if the Fifo is requesting new data
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   405   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   406  IFX_INLINE boolean IfxI2c_isFifoRequest(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   407  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   408  /**
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   409   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   410   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   411   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   412  IFX_INLINE void IfxI2c_run(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   413  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   414  /** \brief selects the pin
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   415   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   416   * \param pisel pin to be select
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   417   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   418   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   419  IFX_INLINE void IfxI2c_setPinSelection(Ifx_I2C *i2c, IfxI2c_PinSelect pisel);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   420  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   421  /** \brief Sets the number of bytes to be received
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   422   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   423   * \param size number of packets
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   424   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   425   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   426  IFX_INLINE void IfxI2c_setReceivePacketSize(Ifx_I2C *i2c, Ifx_SizeT size);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   427  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   428  /**
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   429   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   430   * \param address device address
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   431   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   432   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   433  IFX_INLINE void IfxI2c_setSlaveDeviceAddress(Ifx_I2C *i2c, uint16 address);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   434  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   435  /** \brief Sets the sensitivity of the module to sleep signal
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   436   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   437   * \param mode mode selection (enable / disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   438   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   439   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   440  IFX_INLINE void IfxI2c_setSleepMode(Ifx_I2C *i2c, IfxI2c_SleepMode mode);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   441  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   442  /** \brief Sets the number of bytes to be tansmitted
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   443   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   444   * \param size number of packets
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   445   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   446   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   447  IFX_INLINE void IfxI2c_setTransmitPacketSize(Ifx_I2C *i2c, Ifx_SizeT size);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   448  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   449  /**
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   450   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   451   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   452   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   453  IFX_INLINE void IfxI2c_stop(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   454  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   455  /**
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   456   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   457   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   458   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   459  IFX_INLINE void IfxI2c_waitBusFree(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   460  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   461  /** \brief Writes a packet (4 bytes) into the Fifo
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   462   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   463   * \param packet specifies the byte to be transfer
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   464   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   465   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   466  IFX_INLINE void IfxI2c_writeFifo(Ifx_I2C *i2c, uint32 packet);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   467  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   468  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   469  /*-------------------------Global Function Prototypes-------------------------*/
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   470  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   471  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   472  /** \brief Configures the Module as Master
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   473   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   474   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   475   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   476  IFX_EXTERN void IfxI2c_configureAsMaster(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   477  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   478  /** \brief Disables the I2c Module
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   479   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   480   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   481   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   482  IFX_EXTERN void IfxI2c_disableModule(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   483  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   484  /** \brief Enables the Burst data transfer interrupt
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   485   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   486   * \param typeOfService Type of Service (Cpu or DMA)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   487   * \param priority priority of the interrupt
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   488   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   489   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   490  IFX_EXTERN void IfxI2c_enableBurstDataTransferInterrupt(Ifx_I2C *i2c, IfxSrc_Tos typeOfService, uint16 priority);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   491  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   492  /** \brief Enables the Error interrupt
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   493   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   494   * \param typeOfService Type of Service (Cpu or DMA)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   495   * \param priority priority of the interrupt
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   496   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   497   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   498  IFX_EXTERN void IfxI2c_enableErrorInterrupt(Ifx_I2C *i2c, IfxSrc_Tos typeOfService, uint16 priority);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   499  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   500  /** \brief enables the last burst data transfer interrupt
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   501   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   502   * \param typeOfService Type of Service (Cpu or DMA)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   503   * \param priority priority of the interrupt
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   504   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   505   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   506  IFX_EXTERN void IfxI2c_enableLastBurstDataTransferInterrupt(Ifx_I2C *i2c, IfxSrc_Tos typeOfService, uint16 priority);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   507  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   508  /** \brief enables the last single data transfer interrupt
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   509   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   510   * \param typeOfService Type of Service (Cpu or DMA)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   511   * \param priority priority of the interrupt
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   512   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   513   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   514  IFX_EXTERN void IfxI2c_enableLastSingleDataTransferInterrupt(Ifx_I2C *i2c, IfxSrc_Tos typeOfService, uint16 priority);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   515  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   516  /** \brief Enables the I2c Module
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   517   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   518   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   519   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   520  IFX_EXTERN void IfxI2c_enableModule(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   521  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   522  /** \brief Enables the protocol interrupt
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   523   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   524   * \param typeOfService Type of Service (Cpu or DMA)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   525   * \param priority Priority of the interrupt
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   526   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   527   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   528  IFX_EXTERN void IfxI2c_enableProtocolInterrupt(void *i2c, IfxSrc_Tos typeOfService, uint16 priority);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   529  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   530  /** \brief enables the single data transfer interrupt
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   531   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   532   * \param typeOfService Type of Service (Cpu or DMA)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   533   * \param priority priority of the interrupt
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   534   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   535   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   536  IFX_EXTERN void IfxI2c_enableSingleDataTransferInterrupt(Ifx_I2C *i2c, IfxSrc_Tos typeOfService, uint16 priority);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   537  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   538  /**
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   539   * \param i2c Resource index of the I2c
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   540   * \return I2C module register address
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   541   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   542  IFX_EXTERN Ifx_I2C *IfxI2c_getAddress(IfxI2c_Index i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   543  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   544  /** \brief Returns the real Baudrate
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   545   * \return Baudrate
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   546   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   547  IFX_EXTERN float32 IfxI2c_getBaudrate(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   548  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   549  /** \brief API to get the resource index of the I2C specified.
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   550   * \param i2c Pointer to the I2C HW module (register memory map)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   551   * \return Resource index of the I2C
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   552   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   553  IFX_EXTERN IfxI2c_Index IfxI2c_getIndex(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   554  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   555  /**
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   556   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   557   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   558  IFX_EXTERN void IfxI2c_initSclSdaPin(const IfxI2c_Scl_InOut *scl, const IfxI2c_Sda_InOut *sda, IfxPort_PadDriver padDriver);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   559  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   560  /** \brief Releases the bus, i.e puts a stop condition on the bus
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   561   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   562   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   563  IFX_EXTERN void IfxI2c_releaseBus(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   564  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   565  /**
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   566   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   567   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   568  IFX_EXTERN void IfxI2c_resetFifo(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   569  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   570  /** \brief resets the I2c kernel
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   571   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   572   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   573   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   574  IFX_EXTERN void IfxI2c_resetModule(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   575  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   576  /** \brief Calculates the desired baudrate
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   577   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   578   * \param baudrate specifies the baud rate
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   579   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   580   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   581  IFX_EXTERN void IfxI2c_setBaudrate(Ifx_I2C *i2c, float32 baudrate);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   582  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   583  /** \} */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   584  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   585  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   586  /*---------------------Inline Function Implementations------------------------*/
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   587  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   588  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   589  IFX_INLINE boolean IfxI2c_busIsFree(Ifx_I2C *i2c)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   590  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   591      boolean free = FALSE;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   592  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   593      if (i2c->BUSSTAT.B.BS == IfxI2c_BusStatus_idle)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   594      {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   595          free = TRUE;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   596      }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   597  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   598      return free;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   599  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   600  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   601  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   602  IFX_INLINE void IfxI2c_clearAllDtrInterruptSources(Ifx_I2C *i2c)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   603  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   604      i2c->ICR.U = (1 << IFX_I2C_ICR_LSREQ_INT_OFF) | (1 << IFX_I2C_ICR_SREQ_INT_OFF) | (1 << IFX_I2C_ICR_LBREQ_INT_OFF) | (1 << IFX_I2C_ICR_BREQ_INT_OFF);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   605  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   606  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   607  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   608  IFX_INLINE void IfxI2c_clearAllErrorInterruptSources(Ifx_I2C *i2c)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   609  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   610      i2c->ERRIRQSC.U = (1 << IFX_I2C_ERRIRQSC_RXF_UFL_OFF) | (1 << IFX_I2C_ERRIRQSC_RXF_OFL_OFF) | (1 << IFX_I2C_ERRIRQSC_TXF_UFL_OFF) | (1 << IFX_I2C_ERRIRQSC_TXF_OFL_OFF);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   611  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   612  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   613  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   614  IFX_INLINE void IfxI2c_clearAllProtocolInterruptSources(Ifx_I2C *i2c)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   615  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   616      i2c->PIRQSC.U = (1 << IFX_I2C_PIRQSC_AM_OFF) | (1 << IFX_I2C_PIRQSC_GC_OFF) | (1 << IFX_I2C_PIRQSC_MC_OFF) | (1 << IFX_I2C_PIRQSC_AL_OFF) | (1 << IFX_I2C_PIRQSC_NACK_OFF) | (1 << IFX_I2C_PIRQSC_TX_END_OFF) | (1 << IFX_I2C_PIRQSC_RX_OFF);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   617  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   618  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   619  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   620  IFX_INLINE void IfxI2c_clearBurstRequestInterruptSource(Ifx_I2C *i2c)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   621  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   622      i2c->ICR.B.BREQ_INT = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   623  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   624  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   625  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   626  IFX_INLINE void IfxI2c_clearErrorInterruptSource(Ifx_I2C *i2c, IfxI2c_ErrorInterruptSource source)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   627  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   628      i2c->ERRIRQSC.U = (1 << source);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   629  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   630  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   631  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   632  IFX_INLINE void IfxI2c_clearLastBurstRequestInterruptSource(Ifx_I2C *i2c)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   633  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   634      i2c->ICR.B.LBREQ_INT = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   635  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   636  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   637  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   638  IFX_INLINE void IfxI2c_clearLastSingleRequestInterruptSource(Ifx_I2C *i2c)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   639  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   640      i2c->ICR.B.LSREQ_INT = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   641  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   642  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   643  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   644  IFX_INLINE void IfxI2c_clearProtocolInterruptSource(Ifx_I2C *i2c, IfxI2c_ProtocolInterruptSource source)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   645  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   646      i2c->PIRQSC.U = (1 << source);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   647  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   648  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   649  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   650  IFX_INLINE void IfxI2c_clearSingleRequestInterruptSource(Ifx_I2C *i2c)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   651  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   652      i2c->ICR.B.SREQ_INT = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   653  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   654  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   655  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   656  IFX_INLINE void IfxI2c_disableBurstRequestInterruptSource(Ifx_I2C *i2c)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   657  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   658      i2c->IMSC.B.BREQ_INT = 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   659  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   660  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   661  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   662  IFX_INLINE void IfxI2c_disableErrorInterruptFlag(Ifx_I2C *i2c)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   663  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   664      i2c->IMSC.B.I2C_ERR_INT = 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   665  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   666  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   667  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   668  IFX_INLINE void IfxI2c_disableErrorInterruptSource(Ifx_I2C *i2c, IfxI2c_ErrorInterruptSource source)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   669  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   670      i2c->ERRIRQSM.U &= ~(1 << source);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   671  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   672  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   673  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   674  IFX_INLINE void IfxI2c_disableLastBurstRequestInterruptSource(Ifx_I2C *i2c)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   675  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   676      i2c->IMSC.B.LBREQ_INT = 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   677  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   678  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   679  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   680  IFX_INLINE void IfxI2c_disableLastSingleRequestInterruptSource(Ifx_I2C *i2c)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   681  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   682      i2c->IMSC.B.LSREQ_INT = 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   683  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   684  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   685  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   686  IFX_INLINE void IfxI2c_disableProtocolInterruptFlag(Ifx_I2C *i2c)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   687  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   688      i2c->IMSC.B.I2C_P_INT = 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   689  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   690  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   691  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   692  IFX_INLINE void IfxI2c_disableProtocolInterruptSource(Ifx_I2C *i2c, IfxI2c_ProtocolInterruptSource source)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   693  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   694      i2c->PIRQSM.U &= ~(1 << source);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   695  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   696  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   697  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   698  IFX_INLINE void IfxI2c_disableSingleRequestInterruptSource(Ifx_I2C *i2c)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   699  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   700      i2c->IMSC.B.SREQ_INT = 0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   701  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   702  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   703  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   704  IFX_INLINE void IfxI2c_enableBurstRequestInterruptSource(Ifx_I2C *i2c)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   705  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   706      i2c->IMSC.B.BREQ_INT = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   707  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   708  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   709  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   710  IFX_INLINE void IfxI2c_enableErrorInterruptFlag(Ifx_I2C *i2c)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   711  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   712      i2c->IMSC.B.I2C_ERR_INT = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   713  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   714  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   715  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   716  IFX_INLINE void IfxI2c_enableErrorInterruptSource(Ifx_I2C *i2c, IfxI2c_ErrorInterruptSource source)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   717  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   718      i2c->ERRIRQSM.U |= (1 << source);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   719  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   720  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   721  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   722  IFX_INLINE void IfxI2c_enableLastBurstRequestInterruptSource(Ifx_I2C *i2c)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   723  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   724      i2c->IMSC.B.LBREQ_INT = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   725  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   726  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   727  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   728  IFX_INLINE void IfxI2c_enableLastSingleRequestInterruptSource(Ifx_I2C *i2c)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   729  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   730      i2c->IMSC.B.LSREQ_INT = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   731  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   732  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   733  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   734  IFX_INLINE void IfxI2c_enableProtocolInterruptFlag(Ifx_I2C *i2c)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   735  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   736      i2c->IMSC.B.I2C_P_INT = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   737  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   738  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   739  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   740  IFX_INLINE void IfxI2c_enableProtocolInterruptSource(Ifx_I2C *i2c, IfxI2c_ProtocolInterruptSource source)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   741  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   742      i2c->PIRQSM.U |= (1 << source);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   743  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   744  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   745  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   746  IFX_INLINE void IfxI2c_enableSingleRequestInterruptSource(Ifx_I2C *i2c)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   747  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   748      i2c->IMSC.B.SREQ_INT = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   749  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   750  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   751  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   752  IFX_INLINE volatile Ifx_SRC_SRCR *IfxI2c_getBurstDataTransferSrcPointer(Ifx_I2C *i2c)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   753  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   754      if (i2c == &MODULE_I2C0)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   755      {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   756          return &MODULE_SRC.I2C.I2C[0].BREQ;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   757      }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   758      else
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   759      {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   760          return &MODULE_SRC.I2C.I2C[1].BREQ;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   761      }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   762  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   763  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   764  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   765  IFX_INLINE boolean IfxI2c_getBurstRequestInterruptSourceStatus(Ifx_I2C *i2c)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   766  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   767      return i2c->RIS.B.BREQ_INT;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   768  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   769  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   770  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   771  IFX_INLINE IfxI2c_BusStatus IfxI2c_getBusStatus(Ifx_I2C *i2c)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   772  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   773      return (IfxI2c_BusStatus)i2c->BUSSTAT.B.BS;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   774  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   775  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   776  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   777  IFX_INLINE boolean IfxI2c_getErrorInterruptFlagStatus(Ifx_I2C *i2c)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   778  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   779      return i2c->RIS.B.I2C_ERR_INT;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   780  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   781  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   782  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   783  IFX_INLINE boolean IfxI2c_getErrorInterruptSourceStatus(Ifx_I2C *i2c, IfxI2c_ErrorInterruptSource source)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   784  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   785      return (i2c->ERRIRQSS.U & (1 << source)) ? TRUE : FALSE;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   786  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   787  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   788  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   789  IFX_INLINE volatile Ifx_SRC_SRCR *IfxI2c_getErrorSrcPointer(Ifx_I2C *i2c)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   790  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   791      if (i2c == &MODULE_I2C0)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   792      {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   793          return &MODULE_SRC.I2C.I2C[0].ERR;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   794      }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   795      else
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   796      {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   797          return &MODULE_SRC.I2C.I2C[1].ERR;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   798      }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   799  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   800  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   801  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   802  IFX_INLINE volatile Ifx_SRC_SRCR *IfxI2c_getLastBurstDataTransferSrcPointer(Ifx_I2C *i2c)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   803  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   804      if (i2c == &MODULE_I2C0)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   805      {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   806          return &MODULE_SRC.I2C.I2C[0].LBREQ;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   807      }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   808      else
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   809      {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   810          return &MODULE_SRC.I2C.I2C[1].LBREQ;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   811      }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   812  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   813  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   814  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   815  IFX_INLINE boolean IfxI2c_getLastBurstRequestInterruptSourceStatus(Ifx_I2C *i2c)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   816  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   817      return i2c->RIS.B.LBREQ_INT;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   818  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   819  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   820  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   821  IFX_INLINE volatile Ifx_SRC_SRCR *IfxI2c_getLastSingleDataTransferSrcPointer(Ifx_I2C *i2c)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   822  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   823      if (i2c == &MODULE_I2C0)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   824      {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   825          return &MODULE_SRC.I2C.I2C[0].LSREQ;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   826      }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   827      else
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   828      {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   829          return &MODULE_SRC.I2C.I2C[1].LSREQ;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   830      }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   831  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   832  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   833  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   834  IFX_INLINE boolean IfxI2c_getLastSingleRequestInterruptSourceStatus(Ifx_I2C *i2c)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   835  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   836      return i2c->RIS.B.LSREQ_INT;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   837  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   838  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   839  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   840  IFX_INLINE boolean IfxI2c_getProtocolInterruptFlagStatus(Ifx_I2C *i2c)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   841  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   842      return i2c->RIS.B.I2C_P_INT;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   843  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   844  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   845  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   846  IFX_INLINE boolean IfxI2c_getProtocolInterruptSourceStatus(Ifx_I2C *i2c, IfxI2c_ProtocolInterruptSource source)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   847  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   848      return (i2c->PIRQSS.U & (1 << source)) ? TRUE : FALSE;
	ld.w	d15,[a4]116
.L335:
	jz.t	d15:5,.L25
.L342:

; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	     1  /**
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	     2   * \file IfxI2c.h
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	     3   * \brief I2C  basic functionality
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	     4   * \ingroup IfxLld_I2c
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	     5   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	     6   * \version iLLD_1_0_1_11_0
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	     7   * \copyright Copyright (c) 2018 Infineon Technologies AG. All rights reserved.
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	     8   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	     9   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    10   *                                 IMPORTANT NOTICE
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    11   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    12   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    13   * Use of this file is subject to the terms of use agreed between (i) you or 
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    14   * the company in which ordinary course of business you are acting and (ii) 
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    15   * Infineon Technologies AG or its licensees. If and as long as no such 
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    16   * terms of use are agreed, use of this file is subject to following:
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    17  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    18  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    19   * Boost Software License - Version 1.0 - August 17th, 2003
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    20  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    21   * Permission is hereby granted, free of charge, to any person or 
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    22   * organization obtaining a copy of the software and accompanying 
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    23   * documentation covered by this license (the "Software") to use, reproduce,
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    24   * display, distribute, execute, and transmit the Software, and to prepare
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    25   * derivative works of the Software, and to permit third-parties to whom the 
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    26   * Software is furnished to do so, all subject to the following:
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    27  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    28   * The copyright notices in the Software and this entire statement, including
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    29   * the above license grant, this restriction and the following disclaimer, must
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    30   * be included in all copies of the Software, in whole or in part, and all
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    31   * derivative works of the Software, unless such copies or derivative works are
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    32   * solely in the form of machine-executable object code generated by a source
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    33   * language processor.
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    34  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    35   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR 
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    36   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    37   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    38   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE 
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    39   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    40   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    41   * DEALINGS IN THE SOFTWARE.
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    42  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    43   *
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    44   * \defgroup IfxLld_I2c_Std_enums Enumerations
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    45   * \ingroup IfxLld_I2c_Std
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    46   * \defgroup IfxLld_I2c_Std_functions Functions
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    47   * \ingroup IfxLld_I2c_Std
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    48   * \defgroup IfxLld_I2c_Std_structures Data Structures
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    49   * \ingroup IfxLld_I2c_Std
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    50   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    51  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    52  #ifndef IFXI2C_H
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    53  #define IFXI2C_H 1
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    54  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    55  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    56  /*----------------------------------Includes----------------------------------*/
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    57  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    58  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    59  #include "_Impl/IfxI2c_cfg.h"
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    60  #include "Scu/Std/IfxScuWdt.h"
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    61  #include "Scu/Std/IfxScuCcu.h"
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    62  #include "IfxI2c_bf.h"
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    63  #include "_PinMap/IfxI2c_PinMap.h"
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    64  #include "Src/Std/IfxSrc.h"
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    65  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    66  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    67  /*--------------------------------Enumerations--------------------------------*/
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    68  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    69  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    70  /** \addtogroup IfxLld_I2c_Std_enums
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    71   * \{ */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    72  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    73  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    74      IfxI2c_BusStatus_idle        = 0, /**< \brief idle */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    75      IfxI2c_BusStatus_started     = 1, /**< \brief started */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    76      IfxI2c_BusStatus_busyMaster  = 2, /**< \brief busy Master */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    77      IfxI2c_BusStatus_remoteSlave = 3  /**< \brief remote Slave */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    78  } IfxI2c_BusStatus;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    79  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    80  /** \brief enable error interrupt request source
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    81   * Definition in Ifx.I2C.ERRIRQSM.U
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    82   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    83  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    84  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    85      IfxI2c_ErrorInterruptSource_rxFifoUnderflow = IFX_I2C_ERRIRQSM_RXF_UFL_OFF,  /**< \brief receive fifo underflow service request */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    86      IfxI2c_ErrorInterruptSource_rxFifoOverflow  = IFX_I2C_ERRIRQSM_RXF_OFL_OFF,  /**< \brief receive fifo overflow service request */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    87      IfxI2c_ErrorInterruptSource_txFifoUnderflow = IFX_I2C_ERRIRQSM_TXF_UFL_OFF,  /**< \brief transmit fifo underflow service request */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    88      IfxI2c_ErrorInterruptSource_txFifoOverflow  = IFX_I2C_ERRIRQSM_TXF_OFL_OFF   /**< \brief transmit fifo overflow service request */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    89  } IfxI2c_ErrorInterruptSource;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    90  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    91  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    92  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    93      IfxI2c_PinSelect_a = 0,
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    94      IfxI2c_PinSelect_b = 1,
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    95      IfxI2c_PinSelect_c = 2,
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    96      IfxI2c_PinSelect_d = 3,
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    97      IfxI2c_PinSelect_e = 4,
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    98      IfxI2c_PinSelect_f = 5,
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	    99      IfxI2c_PinSelect_g = 6,
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   100      IfxI2c_PinSelect_h = 7
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   101  } IfxI2c_PinSelect;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   102  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   103  /** \brief enable protocol interrupt source
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   104   * Definition in Ifx.I2C.PIRQSM.U
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   105   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   106  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   107  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   108      IfxI2c_ProtocolInterruptSource_addressMatch           = IFX_I2C_PIRQSM_AM_OFF,     /**< \brief address match service request */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   109      IfxI2c_ProtocolInterruptSource_generalCall            = IFX_I2C_PIRQSM_GC_OFF,     /**< \brief general call service request */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   110      IfxI2c_ProtocolInterruptSource_masterCode             = IFX_I2C_PIRQSM_MC_OFF,     /**< \brief master code service request */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   111      IfxI2c_ProtocolInterruptSource_arbitrationLost        = IFX_I2C_PIRQSM_AL_OFF,     /**< \brief arbitration lost service request */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   112      IfxI2c_ProtocolInterruptSource_notAcknowledgeReceived = IFX_I2C_PIRQSM_NACK_OFF,   /**< \brief not acknowledge received service request */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   113      IfxI2c_ProtocolInterruptSource_transmissionEnd        = IFX_I2C_PIRQSM_TX_END_OFF, /**< \brief transmission end service request */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   114      IfxI2c_ProtocolInterruptSource_receiveMode            = IFX_I2C_PIRQSM_RX_OFF      /**< \brief receive mode service request */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   115  } IfxI2c_ProtocolInterruptSource;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   116  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   117  /** \brief Enable/disable the sensitivity of the module to sleep signal\n
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   118   * Definition in Ifx_I2C.CLC1.B.EDIS
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   119   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   120  typedef enum
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   121  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   122      IfxI2c_SleepMode_enable  = 0, /**< \brief enables sleep mode */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   123      IfxI2c_SleepMode_disable = 1  /**< \brief disables sleep mode */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   124  } IfxI2c_SleepMode;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   125  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   126  /** \} */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   127  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   128  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   129  /*-----------------------------Data Structures--------------------------------*/
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   130  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   131  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   132  /** \addtogroup IfxLld_I2c_Std_structures
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   133   * \{ */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   134  /** \brief Pin Structure
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   135   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   136  typedef struct
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   137  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   138      IfxI2c_Scl_InOut *scl;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   139      IfxI2c_Sda_InOut *sda;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   140      IfxPort_PadDriver padDriver;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   141  } IfxI2c_Pins;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   142  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   143  /** \} */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   144  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   145  /** \addtogroup IfxLld_I2c_Std_functions
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   146   * \{ */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   147  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   148  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   149  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   150  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   151  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   152  /** \brief Returns if the bus is free
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   153   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   154  IFX_INLINE boolean IfxI2c_busIsFree(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   155  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   156  /** \brief clears all DTR interrupt sources
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   157   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   158   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   159   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   160  IFX_INLINE void IfxI2c_clearAllDtrInterruptSources(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   161  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   162  /** \brief clears all Error Interrupt sources
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   163   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   164   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   165   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   166  IFX_INLINE void IfxI2c_clearAllErrorInterruptSources(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   167  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   168  /** \brief Clears all Protocol Interrupt sources
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   169   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   170   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   171   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   172  IFX_INLINE void IfxI2c_clearAllProtocolInterruptSources(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   173  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   174  /** \brief clears burst request interrupt source
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   175   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   176   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   177   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   178  IFX_INLINE void IfxI2c_clearBurstRequestInterruptSource(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   179  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   180  /** \brief clears the specified source of error interrupt
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   181   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   182   * \param source error interrupt source
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   183   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   184   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   185  IFX_INLINE void IfxI2c_clearErrorInterruptSource(Ifx_I2C *i2c, IfxI2c_ErrorInterruptSource source);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   186  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   187  /** \brief clears last burst request interrupt source
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   188   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   189   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   190   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   191  IFX_INLINE void IfxI2c_clearLastBurstRequestInterruptSource(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   192  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   193  /** \brief clears last single request interrupt source
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   194   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   195   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   196   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   197  IFX_INLINE void IfxI2c_clearLastSingleRequestInterruptSource(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   198  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   199  /** \brief clears the specified source of protocol interrupt
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   200   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   201   * \param source protocol interrupt source
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   202   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   203   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   204  IFX_INLINE void IfxI2c_clearProtocolInterruptSource(Ifx_I2C *i2c, IfxI2c_ProtocolInterruptSource source);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   205  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   206  /** \brief clears single request interrupt source
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   207   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   208   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   209   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   210  IFX_INLINE void IfxI2c_clearSingleRequestInterruptSource(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   211  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   212  /** \brief disables burst request interrupt source
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   213   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   214   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   215   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   216  IFX_INLINE void IfxI2c_disableBurstRequestInterruptSource(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   217  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   218  /** \brief disables the error interrupt flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   219   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   220   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   221   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   222  IFX_INLINE void IfxI2c_disableErrorInterruptFlag(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   223  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   224  /** \brief disables the specified source of error interrupt
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   225   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   226   * \param source error interrupt source
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   227   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   228   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   229  IFX_INLINE void IfxI2c_disableErrorInterruptSource(Ifx_I2C *i2c, IfxI2c_ErrorInterruptSource source);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   230  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   231  /** \brief disables last burst request interrupt source
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   232   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   233   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   234   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   235  IFX_INLINE void IfxI2c_disableLastBurstRequestInterruptSource(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   236  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   237  /** \brief disables last single request interrupt source
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   238   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   239   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   240   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   241  IFX_INLINE void IfxI2c_disableLastSingleRequestInterruptSource(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   242  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   243  /** \brief disables the Protocol interrupt flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   244   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   245   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   246   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   247  IFX_INLINE void IfxI2c_disableProtocolInterruptFlag(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   248  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   249  /** \brief disables the specified source of protocol interrupt
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   250   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   251   * \param source protocol interrupt source
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   252   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   253   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   254  IFX_INLINE void IfxI2c_disableProtocolInterruptSource(Ifx_I2C *i2c, IfxI2c_ProtocolInterruptSource source);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   255  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   256  /** \brief disables single request interrupt source
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   257   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   258   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   259   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   260  IFX_INLINE void IfxI2c_disableSingleRequestInterruptSource(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   261  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   262  /** \brief enables burst request interrupt source
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   263   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   264   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   265   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   266  IFX_INLINE void IfxI2c_enableBurstRequestInterruptSource(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   267  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   268  /** \brief enables the error interrupt flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   269   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   270   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   271   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   272  IFX_INLINE void IfxI2c_enableErrorInterruptFlag(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   273  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   274  /** \brief enables the specified source of error interrupt
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   275   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   276   * \param source error interrupt source
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   277   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   278   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   279  IFX_INLINE void IfxI2c_enableErrorInterruptSource(Ifx_I2C *i2c, IfxI2c_ErrorInterruptSource source);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   280  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   281  /** \brief enables last burst request interrupt source
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   282   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   283   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   284   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   285  IFX_INLINE void IfxI2c_enableLastBurstRequestInterruptSource(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   286  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   287  /** \brief enables last single request interrupt source
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   288   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   289   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   290   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   291  IFX_INLINE void IfxI2c_enableLastSingleRequestInterruptSource(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   292  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   293  /** \brief enables the protocol interrupt flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   294   * \param i2c pointer to I2C registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   295   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   296   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   297  IFX_INLINE void IfxI2c_enableProtocolInterruptFlag(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   298  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   299  /** \brief enables the specified source of protocol interrupt
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   300   * \param i2c pointer to I2C registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   301   * \param source protocol interrupt source
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   302   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   303   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   304  IFX_INLINE void IfxI2c_enableProtocolInterruptSource(Ifx_I2C *i2c, IfxI2c_ProtocolInterruptSource source);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   305  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   306  /** \brief enables single request interrupt source
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   307   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   308   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   309   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   310  IFX_INLINE void IfxI2c_enableSingleRequestInterruptSource(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   311  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   312  /** \brief Returns the SRC pointer for I2C burst data transfer request interrupt
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   313   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   314   * \return SRC pointer for I2C burst data transfer Service interrupt
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   315   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   316  IFX_INLINE volatile Ifx_SRC_SRCR *IfxI2c_getBurstDataTransferSrcPointer(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   317  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   318  /** \brief returns the status of burst request interrupt source status
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   319   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   320   * \return status
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   321   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   322  IFX_INLINE boolean IfxI2c_getBurstRequestInterruptSourceStatus(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   323  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   324  /**
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   325   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   326   * \return BusStatus
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   327   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   328  IFX_INLINE IfxI2c_BusStatus IfxI2c_getBusStatus(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   329  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   330  /** \brief returns the current status of error interrupt flag
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   331   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   332   * \return status
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   333   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   334  IFX_INLINE boolean IfxI2c_getErrorInterruptFlagStatus(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   335  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   336  /** \brief returns the status of the error interrupt source
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   337   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   338   * \param source error interrupt source
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   339   * \return status
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   340   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   341  IFX_INLINE boolean IfxI2c_getErrorInterruptSourceStatus(Ifx_I2C *i2c, IfxI2c_ErrorInterruptSource source);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   342  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   343  /** \brief Returns the SRC pointer for I2C Error interrupt
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   344   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   345   * \return SRC pointer for I2C Error Service interrupt
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   346   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   347  IFX_INLINE volatile Ifx_SRC_SRCR *IfxI2c_getErrorSrcPointer(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   348  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   349  /** \brief Returns the SRC pointer for I2C last burst data transfer request interrupt
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   350   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   351   * \return SRC pointer for I2C last burst data transfer Service interrupt
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   352   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   353  IFX_INLINE volatile Ifx_SRC_SRCR *IfxI2c_getLastBurstDataTransferSrcPointer(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   354  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   355  /** \brief returns the status of last burst request interrupt source status
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   356   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   357   * \return status
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   358   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   359  IFX_INLINE boolean IfxI2c_getLastBurstRequestInterruptSourceStatus(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   360  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   361  /** \brief Returns the SRC pointer for I2C last single data transfer request interrupt
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   362   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   363   * \return SRC pointer for I2C last single data transfer Service interrupt
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   364   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   365  IFX_INLINE volatile Ifx_SRC_SRCR *IfxI2c_getLastSingleDataTransferSrcPointer(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   366  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   367  /** \brief returns the status of last single request interrupt source status
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   368   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   369   * \return status
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   370   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   371  IFX_INLINE boolean IfxI2c_getLastSingleRequestInterruptSourceStatus(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   372  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   373  /** \brief returns the current raw status of protocol interrupt
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   374   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   375   * \return status
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   376   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   377  IFX_INLINE boolean IfxI2c_getProtocolInterruptFlagStatus(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   378  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   379  /** \brief returns the status of  specified protocol interrupt source
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   380   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   381   * \param source protocol interrupt source
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   382   * \return status
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   383   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   384  IFX_INLINE boolean IfxI2c_getProtocolInterruptSourceStatus(Ifx_I2C *i2c, IfxI2c_ProtocolInterruptSource source);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   385  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   386  /** \brief Returns the SRC pointer for I2C Protocol interrupt
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   387   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   388   * \return SRC pointer for I2C Protocol Service interrupt
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   389   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   390  IFX_INLINE volatile Ifx_SRC_SRCR *IfxI2c_getProtocolSrcPointer(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   391  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   392  /** \brief Returns the SRC pointer for I2C single data transfer request interrupt
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   393   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   394   * \return SRC pointer for I2C single data transfer Service interrupt
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   395   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   396  IFX_INLINE volatile Ifx_SRC_SRCR *IfxI2c_getSingleDataTransferSrcPointer(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   397  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   398  /** \brief returns the status of single request interrupt source status
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   399   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   400   * \return status
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   401   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   402  IFX_INLINE boolean IfxI2c_getSingleRequestInterruptSourceStatus(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   403  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   404  /** \brief Returns if the Fifo is requesting new data
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   405   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   406  IFX_INLINE boolean IfxI2c_isFifoRequest(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   407  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   408  /**
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   409   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   410   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   411   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   412  IFX_INLINE void IfxI2c_run(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   413  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   414  /** \brief selects the pin
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   415   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   416   * \param pisel pin to be select
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   417   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   418   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   419  IFX_INLINE void IfxI2c_setPinSelection(Ifx_I2C *i2c, IfxI2c_PinSelect pisel);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   420  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   421  /** \brief Sets the number of bytes to be received
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   422   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   423   * \param size number of packets
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   424   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   425   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   426  IFX_INLINE void IfxI2c_setReceivePacketSize(Ifx_I2C *i2c, Ifx_SizeT size);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   427  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   428  /**
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   429   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   430   * \param address device address
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   431   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   432   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   433  IFX_INLINE void IfxI2c_setSlaveDeviceAddress(Ifx_I2C *i2c, uint16 address);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   434  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   435  /** \brief Sets the sensitivity of the module to sleep signal
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   436   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   437   * \param mode mode selection (enable / disable)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   438   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   439   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   440  IFX_INLINE void IfxI2c_setSleepMode(Ifx_I2C *i2c, IfxI2c_SleepMode mode);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   441  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   442  /** \brief Sets the number of bytes to be tansmitted
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   443   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   444   * \param size number of packets
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   445   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   446   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   447  IFX_INLINE void IfxI2c_setTransmitPacketSize(Ifx_I2C *i2c, Ifx_SizeT size);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   448  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   449  /**
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   450   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   451   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   452   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   453  IFX_INLINE void IfxI2c_stop(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   454  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   455  /**
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   456   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   457   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   458   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   459  IFX_INLINE void IfxI2c_waitBusFree(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   460  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   461  /** \brief Writes a packet (4 bytes) into the Fifo
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   462   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   463   * \param packet specifies the byte to be transfer
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   464   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   465   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   466  IFX_INLINE void IfxI2c_writeFifo(Ifx_I2C *i2c, uint32 packet);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   467  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   468  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   469  /*-------------------------Global Function Prototypes-------------------------*/
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   470  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   471  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   472  /** \brief Configures the Module as Master
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   473   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   474   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   475   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   476  IFX_EXTERN void IfxI2c_configureAsMaster(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   477  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   478  /** \brief Disables the I2c Module
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   479   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   480   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   481   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   482  IFX_EXTERN void IfxI2c_disableModule(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   483  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   484  /** \brief Enables the Burst data transfer interrupt
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   485   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   486   * \param typeOfService Type of Service (Cpu or DMA)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   487   * \param priority priority of the interrupt
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   488   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   489   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   490  IFX_EXTERN void IfxI2c_enableBurstDataTransferInterrupt(Ifx_I2C *i2c, IfxSrc_Tos typeOfService, uint16 priority);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   491  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   492  /** \brief Enables the Error interrupt
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   493   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   494   * \param typeOfService Type of Service (Cpu or DMA)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   495   * \param priority priority of the interrupt
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   496   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   497   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   498  IFX_EXTERN void IfxI2c_enableErrorInterrupt(Ifx_I2C *i2c, IfxSrc_Tos typeOfService, uint16 priority);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   499  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   500  /** \brief enables the last burst data transfer interrupt
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   501   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   502   * \param typeOfService Type of Service (Cpu or DMA)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   503   * \param priority priority of the interrupt
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   504   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   505   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   506  IFX_EXTERN void IfxI2c_enableLastBurstDataTransferInterrupt(Ifx_I2C *i2c, IfxSrc_Tos typeOfService, uint16 priority);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   507  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   508  /** \brief enables the last single data transfer interrupt
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   509   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   510   * \param typeOfService Type of Service (Cpu or DMA)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   511   * \param priority priority of the interrupt
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   512   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   513   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   514  IFX_EXTERN void IfxI2c_enableLastSingleDataTransferInterrupt(Ifx_I2C *i2c, IfxSrc_Tos typeOfService, uint16 priority);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   515  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   516  /** \brief Enables the I2c Module
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   517   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   518   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   519   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   520  IFX_EXTERN void IfxI2c_enableModule(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   521  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   522  /** \brief Enables the protocol interrupt
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   523   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   524   * \param typeOfService Type of Service (Cpu or DMA)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   525   * \param priority Priority of the interrupt
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   526   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   527   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   528  IFX_EXTERN void IfxI2c_enableProtocolInterrupt(void *i2c, IfxSrc_Tos typeOfService, uint16 priority);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   529  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   530  /** \brief enables the single data transfer interrupt
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   531   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   532   * \param typeOfService Type of Service (Cpu or DMA)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   533   * \param priority priority of the interrupt
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   534   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   535   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   536  IFX_EXTERN void IfxI2c_enableSingleDataTransferInterrupt(Ifx_I2C *i2c, IfxSrc_Tos typeOfService, uint16 priority);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   537  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   538  /**
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   539   * \param i2c Resource index of the I2c
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   540   * \return I2C module register address
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   541   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   542  IFX_EXTERN Ifx_I2C *IfxI2c_getAddress(IfxI2c_Index i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   543  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   544  /** \brief Returns the real Baudrate
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   545   * \return Baudrate
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   546   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   547  IFX_EXTERN float32 IfxI2c_getBaudrate(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   548  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   549  /** \brief API to get the resource index of the I2C specified.
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   550   * \param i2c Pointer to the I2C HW module (register memory map)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   551   * \return Resource index of the I2C
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   552   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   553  IFX_EXTERN IfxI2c_Index IfxI2c_getIndex(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   554  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   555  /**
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   556   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   557   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   558  IFX_EXTERN void IfxI2c_initSclSdaPin(const IfxI2c_Scl_InOut *scl, const IfxI2c_Sda_InOut *sda, IfxPort_PadDriver padDriver);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   559  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   560  /** \brief Releases the bus, i.e puts a stop condition on the bus
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   561   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   562   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   563  IFX_EXTERN void IfxI2c_releaseBus(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   564  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   565  /**
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   566   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   567   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   568  IFX_EXTERN void IfxI2c_resetFifo(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   569  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   570  /** \brief resets the I2c kernel
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   571   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   572   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   573   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   574  IFX_EXTERN void IfxI2c_resetModule(Ifx_I2C *i2c);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   575  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   576  /** \brief Calculates the desired baudrate
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   577   * \param i2c pointer to i2c registers
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   578   * \param baudrate specifies the baud rate
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   579   * \return None
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   580   */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   581  IFX_EXTERN void IfxI2c_setBaudrate(Ifx_I2C *i2c, float32 baudrate);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   582  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   583  /** \} */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   584  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   585  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   586  /*---------------------Inline Function Implementations------------------------*/
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   587  /******************************************************************************/
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   588  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   589  IFX_INLINE boolean IfxI2c_busIsFree(Ifx_I2C *i2c)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   590  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   591      boolean free = FALSE;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   592  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   593      if (i2c->BUSSTAT.B.BS == IfxI2c_BusStatus_idle)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   594      {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   595          free = TRUE;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   596      }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   597  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   598      return free;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   599  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   600  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   601  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   602  IFX_INLINE void IfxI2c_clearAllDtrInterruptSources(Ifx_I2C *i2c)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   603  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   604      i2c->ICR.U = (1 << IFX_I2C_ICR_LSREQ_INT_OFF) | (1 << IFX_I2C_ICR_SREQ_INT_OFF) | (1 << IFX_I2C_ICR_LBREQ_INT_OFF) | (1 << IFX_I2C_ICR_BREQ_INT_OFF);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   605  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   606  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   607  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   608  IFX_INLINE void IfxI2c_clearAllErrorInterruptSources(Ifx_I2C *i2c)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   609  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   610      i2c->ERRIRQSC.U = (1 << IFX_I2C_ERRIRQSC_RXF_UFL_OFF) | (1 << IFX_I2C_ERRIRQSC_RXF_OFL_OFF) | (1 << IFX_I2C_ERRIRQSC_TXF_UFL_OFF) | (1 << IFX_I2C_ERRIRQSC_TXF_OFL_OFF);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   611  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   612  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   613  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   614  IFX_INLINE void IfxI2c_clearAllProtocolInterruptSources(Ifx_I2C *i2c)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   615  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   616      i2c->PIRQSC.U = (1 << IFX_I2C_PIRQSC_AM_OFF) | (1 << IFX_I2C_PIRQSC_GC_OFF) | (1 << IFX_I2C_PIRQSC_MC_OFF) | (1 << IFX_I2C_PIRQSC_AL_OFF) | (1 << IFX_I2C_PIRQSC_NACK_OFF) | (1 << IFX_I2C_PIRQSC_TX_END_OFF) | (1 << IFX_I2C_PIRQSC_RX_OFF);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   617  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   618  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   619  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   620  IFX_INLINE void IfxI2c_clearBurstRequestInterruptSource(Ifx_I2C *i2c)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   621  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   622      i2c->ICR.B.BREQ_INT = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   623  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   624  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   625  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   626  IFX_INLINE void IfxI2c_clearErrorInterruptSource(Ifx_I2C *i2c, IfxI2c_ErrorInterruptSource source)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   627  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   628      i2c->ERRIRQSC.U = (1 << source);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   629  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   630  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   631  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   632  IFX_INLINE void IfxI2c_clearLastBurstRequestInterruptSource(Ifx_I2C *i2c)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   633  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   634      i2c->ICR.B.LBREQ_INT = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   635  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   636  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   637  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   638  IFX_INLINE void IfxI2c_clearLastSingleRequestInterruptSource(Ifx_I2C *i2c)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   639  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   640      i2c->ICR.B.LSREQ_INT = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   641  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   642  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   643  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   644  IFX_INLINE void IfxI2c_clearProtocolInterruptSource(Ifx_I2C *i2c, IfxI2c_ProtocolInterruptSource source)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   645  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.h	   646      i2c->PIRQSC.U = (1 << source);
	mov	d15,#32
	st.w	[a4]120,d15
.L24:

; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.c	   241  .BS != IfxI2c_BusStatus_idle)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.c	   242      {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.c	   243          i2c->ENDDCTRL.B.SETEND = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.c	   244  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.c	   245          // wait until bus is free
	ret
.L332:
	
__IfxI2c_releaseBus_function_end:
	.size	IfxI2c_releaseBus,__IfxI2c_releaseBus_function_end-IfxI2c_releaseBus
.L148:
	; End of function
	
	.sdecl	'.text.IfxI2c.IfxI2c_resetFifo',code,cluster('IfxI2c_resetFifo')
	.sect	'.text.IfxI2c.IfxI2c_resetFifo'
	.align	2
	
	.global	IfxI2c_resetFifo

; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.c	   246          while (IfxI2c_getProtocolInterruptSourceStatus(i2c, IfxI2c_ProtocolInterruptSource_transmissionEnd) == FALSE)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.c	   247          {}
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.c	   248  
; Function IfxI2c_resetFifo
.L70:
IfxI2c_resetFifo:	.type	func

; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.c	   249          IfxI2c_clearProtocolInterruptSource(i2c, IfxI2c_ProtocolInterruptSource_transmissionEnd);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.c	   250      }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.c	   251  }
	mov	d15,#0
	st.w	[a4]40,d15
.L546:

; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.c	   252  
	ld.bu	d15,[a4]42
.L547:
	insert	d15,d15,#0,#1,#1
	st.b	[a4]42,d15
.L548:

; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.c	   253  
	ld.bu	d15,[a4]42
.L549:
	insert	d15,d15,#0,#0,#1
	fcall	.cocofun_2
.L550:

; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.c	   254  void IfxI2c_resetFifo(Ifx_I2C *i2c)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.c	   255  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.c	   256      /* reset FIFO */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.c	   257      i2c->FIFOCFG.U      = 0x0;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.c	   258      i2c->FIFOCFG.B.TXFC = 0U;
	ret
.L348:
	
__IfxI2c_resetFifo_function_end:
	.size	IfxI2c_resetFifo,__IfxI2c_resetFifo_function_end-IfxI2c_resetFifo
.L153:
	; End of function
	
	.sdecl	'.text.IfxI2c.IfxI2c_resetModule',code,cluster('IfxI2c_resetModule')
	.sect	'.text.IfxI2c.IfxI2c_resetModule'
	.align	2
	
	.global	IfxI2c_resetModule

; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.c	   259      i2c->FIFOCFG.B.RXFC = 0U;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.c	   260      i2c->FIFOCFG.B.TXBS = 0U;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.c	   261      i2c->FIFOCFG.B.RXBS = 0U;
; Function IfxI2c_resetModule
.L72:
IfxI2c_resetModule:	.type	func
	mov.aa	a15,a4
.L389:

; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.c	   262      i2c->FIFOCFG.B.TXFA = 0U;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.c	   263      i2c->FIFOCFG.B.RXFA = 0U;
	call	IfxScuWdt_getCpuWatchdogPassword
.L388:
	mov	d8,d2
.L391:

; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.c	   264  }
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.c	   265  
	mov	d4,d8
	call	IfxScuWdt_clearCpuEndinit
.L390:

; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.c	   266  
	fcall	.cocofun_5
.L392:
	ld.bu	d15,[+a3]20
.L555:
	fcall	.cocofun_3
	st.b	[+a3]20,d15
.L556:

; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.c	   267  void IfxI2c_resetModule(Ifx_I2C *i2c)
	fcall	.cocofun_5
	ld.bu	d15,[+a3]24
.L557:
	fcall	.cocofun_3
	st.b	[+a3]24,d15
.L558:

; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.c	   268  {
	mov	d4,d8
	call	IfxScuWdt_setCpuEndinit
.L393:

; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.c	   269      uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.c	   270  
	fcall	.cocofun_5
.L394:
	lea	a2,[a3]20
.L26:
	ld.bu	d15,[a2]
.L559:
	jz.t	d15:1,.L26
.L560:

; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.c	   271      IfxScuWdt_clearCpuEndinit(passwd);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.c	   272      i2c->KRST0.B.RST = 1;           /* Only if both Kernel reset bits are set a reset is executed */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.c	   273      i2c->KRST1.B.RST = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.c	   274      IfxScuWdt_setCpuEndinit(passwd);
	mov	d4,d8
	call	IfxScuWdt_clearCpuEndinit
.L395:

; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.c	   275  
	fcall	.cocofun_5
.L396:
	ld.bu	d15,[+a3]28
.L561:
	fcall	.cocofun_3
.L562:

; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.c	   276      while (0 == i2c->KRST0.B.RSTSTAT)   /* Wait until reset is executed */
	mov	d4,d8
	st.b	[+a3]28,d15
.L397:
	j	IfxScuWdt_setCpuEndinit
.L350:
	
__IfxI2c_resetModule_function_end:
	.size	IfxI2c_resetModule,__IfxI2c_resetModule_function_end-IfxI2c_resetModule
.L158:
	; End of function
	
	.sdecl	'.text.IfxI2c.IfxI2c_setBaudrate',code,cluster('IfxI2c_setBaudrate')
	.sect	'.text.IfxI2c.IfxI2c_setBaudrate'
	.align	2
	
	.global	IfxI2c_setBaudrate

; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.c	   277  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.c	   278      {}
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.c	   279  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.c	   280      IfxScuWdt_clearCpuEndinit(passwd);
; Function IfxI2c_setBaudrate
.L74:
IfxI2c_setBaudrate:	.type	func
	mov.aa	a15,a4
.L399:

; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.c	   281      i2c->KRSTCLR.B.CLR = 1;         /* Clear Kernel reset status bit */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.c	   282      IfxScuWdt_setCpuEndinit(passwd);
	mov	d8,d4
	call	IfxScuCcu_getBaud1Frequency
.L398:

; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.c	   283  }
	ld.bu	d15,[a15]1
.L402:

; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.c	   284  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.c	   285  
	utof	d15,d15
.L403:
	div.f	d15,d2,d15
.L567:
	div.f	d15,d15,d8
.L568:
	movh	d0,#16448
.L569:
	sub.f	d15,d15,d0
.L570:
	movh	d0,#16128
.L571:
	mul.f	d0,d15,d0
.L404:

; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.c	   286  void IfxI2c_setBaudrate(Ifx_I2C *i2c, float32 baudrate)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.c	   287  {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.c	   288      float32 fKernel = IfxScuCcu_getBaud1Frequency();
	movh	d8,#16576
.L400:
	cmp.f	d15,d0,d8
.L405:
	jnz.t	d15:0,.L27
.L572:

; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.c	   289      uint8   rmc     = i2c->CLC1.B.RMC;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.c	   290      float32 dec;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.c	   291      dec = (((fKernel / rmc) / baudrate) - 3) / 2;     // always: Inc = 1
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.c	   292  
	mov.u	d8,#57344
.L406:
	addih	d8,d8,#17663
.L407:
	cmp.f	d15,d0,d8
.L408:
	and	d15,#6
.L409:
	cmovn	d8,d15,d0
.L27:

; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.c	   293      // dec:inc must be at least 6
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.c	   294      if (dec < 6)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.c	   295      {
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.c	   296          dec = 6;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.c	   297      }
	call	IfxScuWdt_getCpuWatchdogPassword
.L401:
	mov	d9,d2
.L411:

; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.c	   298      else if (dec > (1 << IFX_I2C_FDIVCFG_DEC_LEN) - 1)
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.c	   299      {
	mov	d4,d9
	call	IfxScuWdt_clearCpuEndinit
.L410:

; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.c	   300          dec = (1 << IFX_I2C_FDIVCFG_DEC_LEN) - 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.c	   301      }
	mov	d15,#1
	st.b	[a15]26,d15
.L573:

; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.c	   302  
	movh	d0,#16128
.L574:
	ld.hu	d15,[a15]24
.L575:
	add.f	d4,d8,d0
	call	__f_ftous
.L576:
	insert	d15,d15,d2,#0,#11
	st.h	[a15]24,d15
.L577:

; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.c	   303      uint16 pwd = IfxScuWdt_getCpuWatchdogPassword();
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.c	   304  
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.c	   305      IfxScuWdt_clearCpuEndinit(pwd);
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.c	   306      /* Baudrate configuration */
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.c	   307      i2c->FDIVCFG.B.INC           = 1;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.c	   308      i2c->FDIVCFG.B.DEC           = (uint16)(dec + 0.5);
	mov	d4,d9
.L412:
	ld.bu	d15,[a15]64
.L578:
	or	d15,#63
	st.b	[a15]64,d15
.L579:
	ld.bu	d15,[a15]65
.L580:
	or	d15,#128
	st.b	[a15]65,d15
.L581:
	ld.bu	d15,[a15]65
.L582:
	or	d15,#64
	st.b	[a15]65,d15
.L583:
	mov	d15,#32
	st.b	[a15]67,d15
.L584:
	j	IfxScuWdt_setCpuEndinit
.L353:
	
__IfxI2c_setBaudrate_function_end:
	.size	IfxI2c_setBaudrate,__IfxI2c_setBaudrate_function_end-IfxI2c_setBaudrate
.L163:
	; End of function
	
	.calls	'IfxI2c_setBaudrate','__f_ftous'
	.calls	'IfxI2c_disableModule','IfxScuWdt_getCpuWatchdogPassword'
	.calls	'IfxI2c_disableModule','IfxScuWdt_clearCpuEndinit'
	.calls	'IfxI2c_disableModule','IfxScuWdt_setCpuEndinit'
	.calls	'IfxI2c_enableModule','IfxScuWdt_getCpuWatchdogPassword'
	.calls	'IfxI2c_enableModule','IfxScuWdt_clearCpuEndinit'
	.calls	'IfxI2c_enableModule','IfxScuWdt_setCpuEndinit'
	.calls	'IfxI2c_getBaudrate','IfxScuCcu_getBaud1Frequency'
	.calls	'IfxI2c_initSclSdaPin','IfxPort_setPinMode'
	.calls	'IfxI2c_initSclSdaPin','IfxPort_setPinPadDriver'
	.calls	'IfxI2c_resetModule','IfxScuWdt_getCpuWatchdogPassword'
	.calls	'IfxI2c_resetModule','IfxScuWdt_clearCpuEndinit'
	.calls	'IfxI2c_resetModule','IfxScuWdt_setCpuEndinit'
	.calls	'IfxI2c_setBaudrate','IfxScuCcu_getBaud1Frequency'
	.calls	'IfxI2c_setBaudrate','IfxScuWdt_getCpuWatchdogPassword'
	.calls	'IfxI2c_setBaudrate','IfxScuWdt_clearCpuEndinit'
	.calls	'IfxI2c_setBaudrate','IfxScuWdt_setCpuEndinit'
	.calls	'IfxI2c_configureAsMaster','.cocofun_4'
	.calls	'IfxI2c_configureAsMaster','.cocofun_2'
	.calls	'IfxI2c_disableModule','.cocofun_5'
	.calls	'IfxI2c_disableModule','.cocofun_3'
	.calls	'.cocofun_3','.cocofun_5'
	.calls	'IfxI2c_enableBurstDataTransferInterrupt','.cocofun_1'
	.calls	'IfxI2c_enableErrorInterrupt','.cocofun_1'
	.calls	'IfxI2c_enableLastBurstDataTransferInterrupt','.cocofun_1'
	.calls	'IfxI2c_enableLastSingleDataTransferInterrupt','.cocofun_1'
	.calls	'IfxI2c_enableModule','.cocofun_5'
	.calls	'IfxI2c_enableProtocolInterrupt','.cocofun_1'
	.calls	'IfxI2c_enableSingleDataTransferInterrupt','.cocofun_1'
	.calls	'IfxI2c_resetFifo','.cocofun_2'
	.calls	'IfxI2c_resetModule','.cocofun_5'
	.calls	'IfxI2c_resetModule','.cocofun_3'
	.calls	'IfxI2c_configureAsMaster','',0
	.calls	'.cocofun_4','',0
	.calls	'.cocofun_2','',0
	.calls	'IfxI2c_disableModule','',0
	.calls	'.cocofun_5','',0
	.calls	'.cocofun_3','',0
	.calls	'IfxI2c_enableBurstDataTransferInterrupt','',0
	.calls	'.cocofun_1','',0
	.calls	'IfxI2c_enableErrorInterrupt','',0
	.calls	'IfxI2c_enableLastBurstDataTransferInterrupt','',0
	.calls	'IfxI2c_enableLastSingleDataTransferInterrupt','',0
	.calls	'IfxI2c_enableModule','',0
	.calls	'IfxI2c_enableProtocolInterrupt','',0
	.calls	'IfxI2c_enableSingleDataTransferInterrupt','',0
	.calls	'IfxI2c_getAddress','',0
	.calls	'IfxI2c_getBaudrate','',0
	.calls	'IfxI2c_getIndex','',0
	.calls	'IfxI2c_initSclSdaPin','',0
	.calls	'IfxI2c_releaseBus','',0
	.calls	'IfxI2c_resetFifo','',0
	.calls	'IfxI2c_resetModule','',0
	.extern	IfxI2c_cfg_indexMap
	.extern	IfxScuWdt_clearCpuEndinit
	.extern	IfxScuWdt_setCpuEndinit
	.extern	IfxScuWdt_getCpuWatchdogPassword
	.extern	IfxPort_setPinMode
	.extern	IfxPort_setPinPadDriver
	.extern	IfxScuCcu_getBaud1Frequency
	.extern	__f_ftous
	.calls	'IfxI2c_setBaudrate','',0
	.sdecl	'.debug_info',debug
	.sect	'.debug_info'
.L76:
	.word	89707
	.half	3
	.word	.L77
	.byte	4
.L75:
	.byte	1
	.byte	'..\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\I2c\\Std\\IfxI2c.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'E:\\tasking workspace\\Copy of LQ_TC26xB_LIBtaskingAICTone\\Debug\\',0,12,1
	.word	.L78
	.byte	2,1,1,3
	.word	175
	.byte	4
	.byte	'Ifx__jump_and_link',0,3,1,61,17,1,1,5
	.byte	'fun',0,1,61,43
	.word	178
	.byte	6,0,7
	.byte	'__fract',0,4,128,1
.L290:
	.byte	7
	.byte	'float',0,4,4,8
	.byte	'Ifx__float_to_fract',0,3,1,152,2,18
	.word	223
	.byte	1,1,5
	.byte	'a',0,1,152,2,44
	.word	235
	.byte	6,0,4
	.byte	'Ifx__stopPerfCounters',0,3,1,172,2,17,1,1,6,0,7
	.byte	'unsigned long long int',0,8,7,9
	.byte	'void',0
.L262:
	.byte	3
	.word	347
	.byte	8
	.byte	'__ld64',0,3,2,135,1,19
	.word	321
	.byte	1,1,5
	.byte	'addr',0,2,135,1,32
	.word	353
	.byte	6,0,4
	.byte	'__st64',0,3,2,143,1,17,1,1,5
	.byte	'addr',0,2,143,1,30
	.word	353
	.byte	5
	.byte	'value',0,2,143,1,43
	.word	321
	.byte	6,0,7
	.byte	'unsigned int',0,4,7,7
	.byte	'int',0,4,5,7
	.byte	'unsigned int',0,4,7,10
	.byte	'_Ifx_SCU_WDTCPU_CON0_Bits',0,4,241,8,16,4,11
	.byte	'ENDINIT',0,4
	.word	462
	.byte	1,31,2,35,0,11
	.byte	'LCK',0,4
	.word	462
	.byte	1,30,2,35,0,11
	.byte	'PW',0,4
	.word	462
	.byte	14,16,2,35,0,11
	.byte	'REL',0,4
	.word	462
	.byte	16,0,2,35,0,0,12,4,247,14,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	478
	.byte	4,2,35,0,0
.L293:
	.byte	7
	.byte	'unsigned char',0,1,8
.L201:
	.byte	7
	.byte	'unsigned short int',0,2,7,10
	.byte	'_Ifx_SCU_WDTCPU_CON1_Bits',0,4,250,8,16,4,11
	.byte	'reserved_0',0,1
	.word	614
	.byte	2,6,2,35,0,11
	.byte	'IR0',0,1
	.word	614
	.byte	1,5,2,35,0,11
	.byte	'DR',0,1
	.word	614
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,1
	.word	614
	.byte	1,3,2,35,0,11
	.byte	'IR1',0,1
	.word	614
	.byte	1,2,2,35,0,11
	.byte	'UR',0,1
	.word	614
	.byte	1,1,2,35,0,11
	.byte	'PAR',0,1
	.word	614
	.byte	1,0,2,35,0,11
	.byte	'TCR',0,1
	.word	614
	.byte	1,7,2,35,1,11
	.byte	'TCTR',0,1
	.word	614
	.byte	7,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	631
	.byte	16,0,2,35,2,0,12,4,255,14,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	653
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_SCU_WDTCPU_SR_Bits',0,4,137,9,16,4,11
	.byte	'AE',0,1
	.word	614
	.byte	1,7,2,35,0,11
	.byte	'OE',0,1
	.word	614
	.byte	1,6,2,35,0,11
	.byte	'IS0',0,1
	.word	614
	.byte	1,5,2,35,0,11
	.byte	'DS',0,1
	.word	614
	.byte	1,4,2,35,0,11
	.byte	'TO',0,1
	.word	614
	.byte	1,3,2,35,0,11
	.byte	'IS1',0,1
	.word	614
	.byte	1,2,2,35,0,11
	.byte	'US',0,1
	.word	614
	.byte	1,1,2,35,0,11
	.byte	'PAS',0,1
	.word	614
	.byte	1,0,2,35,0,11
	.byte	'TCS',0,1
	.word	614
	.byte	1,7,2,35,1,11
	.byte	'TCT',0,1
	.word	614
	.byte	7,0,2,35,1,11
	.byte	'TIM',0,2
	.word	631
	.byte	16,0,2,35,2,0,12,4,135,15,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	897
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_SCU_WDTCPU',0,4,175,15,25,12,13
	.byte	'CON0',0
	.word	574
	.byte	4,2,35,0,13
	.byte	'CON1',0
	.word	857
	.byte	4,2,35,4,13
	.byte	'SR',0
	.word	1088
	.byte	4,2,35,8,0,14
	.word	1128
	.byte	3
	.word	1191
	.byte	4
	.byte	'IfxScuWdt_clearCpuEndinitInline',0,3,3,181,3,17,1,1,5
	.byte	'watchdog',0,3,181,3,65
	.word	1196
	.byte	5
	.byte	'password',0,3,181,3,82
	.word	631
	.byte	6,0,4
	.byte	'IfxScuWdt_setCpuEndinitInline',0,3,3,140,4,17,1,1,5
	.byte	'watchdog',0,3,140,4,63
	.word	1196
	.byte	5
	.byte	'password',0,3,140,4,80
	.word	631
	.byte	6,0,8
	.byte	'IfxScuWdt_getCpuWatchdogPasswordInline',0,3,3,227,3,19
	.word	631
	.byte	1,1,5
	.byte	'watchdog',0,3,227,3,74
	.word	1196
	.byte	6,0,15,6,156,1,9,1,16
	.byte	'IfxCpu_ResourceCpu_0',0,0,16
	.byte	'IfxCpu_ResourceCpu_1',0,1,16
	.byte	'IfxCpu_ResourceCpu_none',0,2,0,8
	.byte	'IfxCpu_getCoreIndex',0,3,5,141,6,31
	.word	1426
	.byte	1,1,6,0,8
	.byte	'IfxCpu_areInterruptsEnabled',0,3,5,139,5,20
	.word	614
	.byte	1,1,6,0,7
	.byte	'unsigned long int',0,4,7,8
	.byte	'IfxCpu_getPerformanceCounter',0,3,5,161,6,19
	.word	1581
	.byte	1,1,5
	.byte	'address',0,5,161,6,55
	.word	631
	.byte	6,0,8
	.byte	'IfxCpu_getPerformanceCounterStickyOverflow',0,3,5,190,6,20
	.word	614
	.byte	1,1,5
	.byte	'address',0,5,190,6,70
	.word	631
	.byte	6,0,4
	.byte	'IfxCpu_updatePerformanceCounter',0,3,5,172,8,17,1,1,5
	.byte	'address',0,5,172,8,56
	.word	1581
	.byte	5
	.byte	'count',0,5,172,8,72
	.word	1581
	.byte	17,6,0,0,10
	.byte	'_Ifx_P_OUT_Bits',0,8,143,3,16,4,11
	.byte	'P0',0,1
	.word	614
	.byte	1,7,2,35,0,11
	.byte	'P1',0,1
	.word	614
	.byte	1,6,2,35,0,11
	.byte	'P2',0,1
	.word	614
	.byte	1,5,2,35,0,11
	.byte	'P3',0,1
	.word	614
	.byte	1,4,2,35,0,11
	.byte	'P4',0,1
	.word	614
	.byte	1,3,2,35,0,11
	.byte	'P5',0,1
	.word	614
	.byte	1,2,2,35,0,11
	.byte	'P6',0,1
	.word	614
	.byte	1,1,2,35,0,11
	.byte	'P7',0,1
	.word	614
	.byte	1,0,2,35,0,11
	.byte	'P8',0,1
	.word	614
	.byte	1,7,2,35,1,11
	.byte	'P9',0,1
	.word	614
	.byte	1,6,2,35,1,11
	.byte	'P10',0,1
	.word	614
	.byte	1,5,2,35,1,11
	.byte	'P11',0,1
	.word	614
	.byte	1,4,2,35,1,11
	.byte	'P12',0,1
	.word	614
	.byte	1,3,2,35,1,11
	.byte	'P13',0,1
	.word	614
	.byte	1,2,2,35,1,11
	.byte	'P14',0,1
	.word	614
	.byte	1,1,2,35,1,11
	.byte	'P15',0,1
	.word	614
	.byte	1,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	631
	.byte	16,0,2,35,2,0,12,8,181,5,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	1812
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_OMR_Bits',0,8,169,2,16,4,11
	.byte	'PS0',0,1
	.word	614
	.byte	1,7,2,35,0,11
	.byte	'PS1',0,1
	.word	614
	.byte	1,6,2,35,0,11
	.byte	'PS2',0,1
	.word	614
	.byte	1,5,2,35,0,11
	.byte	'PS3',0,1
	.word	614
	.byte	1,4,2,35,0,11
	.byte	'PS4',0,1
	.word	614
	.byte	1,3,2,35,0,11
	.byte	'PS5',0,1
	.word	614
	.byte	1,2,2,35,0,11
	.byte	'PS6',0,1
	.word	614
	.byte	1,1,2,35,0,11
	.byte	'PS7',0,1
	.word	614
	.byte	1,0,2,35,0,11
	.byte	'PS8',0,1
	.word	614
	.byte	1,7,2,35,1,11
	.byte	'PS9',0,1
	.word	614
	.byte	1,6,2,35,1,11
	.byte	'PS10',0,1
	.word	614
	.byte	1,5,2,35,1,11
	.byte	'PS11',0,1
	.word	614
	.byte	1,4,2,35,1,11
	.byte	'PS12',0,1
	.word	614
	.byte	1,3,2,35,1,11
	.byte	'PS13',0,1
	.word	614
	.byte	1,2,2,35,1,11
	.byte	'PS14',0,1
	.word	614
	.byte	1,1,2,35,1,11
	.byte	'PS15',0,1
	.word	614
	.byte	1,0,2,35,1,11
	.byte	'PCL0',0,1
	.word	614
	.byte	1,7,2,35,2,11
	.byte	'PCL1',0,1
	.word	614
	.byte	1,6,2,35,2,11
	.byte	'PCL2',0,1
	.word	614
	.byte	1,5,2,35,2,11
	.byte	'PCL3',0,1
	.word	614
	.byte	1,4,2,35,2,11
	.byte	'PCL4',0,1
	.word	614
	.byte	1,3,2,35,2,11
	.byte	'PCL5',0,1
	.word	614
	.byte	1,2,2,35,2,11
	.byte	'PCL6',0,1
	.word	614
	.byte	1,1,2,35,2,11
	.byte	'PCL7',0,1
	.word	614
	.byte	1,0,2,35,2,11
	.byte	'PCL8',0,1
	.word	614
	.byte	1,7,2,35,3,11
	.byte	'PCL9',0,1
	.word	614
	.byte	1,6,2,35,3,11
	.byte	'PCL10',0,1
	.word	614
	.byte	1,5,2,35,3,11
	.byte	'PCL11',0,1
	.word	614
	.byte	1,4,2,35,3,11
	.byte	'PCL12',0,1
	.word	614
	.byte	1,3,2,35,3,11
	.byte	'PCL13',0,1
	.word	614
	.byte	1,2,2,35,3,11
	.byte	'PCL14',0,1
	.word	614
	.byte	1,1,2,35,3,11
	.byte	'PCL15',0,1
	.word	614
	.byte	1,0,2,35,3,0,12,8,133,5,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	2128
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_ID_Bits',0,8,110,16,4,11
	.byte	'MODREV',0,1
	.word	614
	.byte	8,0,2,35,0,11
	.byte	'MODTYPE',0,1
	.word	614
	.byte	8,0,2,35,1,11
	.byte	'MODNUMBER',0,2
	.word	631
	.byte	16,0,2,35,2,0,12,8,148,4,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	2699
	.byte	4,2,35,0,0,18,4
	.word	614
	.byte	19,3,0,10
	.byte	'_Ifx_P_IOCR0_Bits',0,8,140,1,16,4,11
	.byte	'reserved_0',0,1
	.word	614
	.byte	3,5,2,35,0,11
	.byte	'PC0',0,1
	.word	614
	.byte	5,0,2,35,0,11
	.byte	'reserved_8',0,1
	.word	614
	.byte	3,5,2,35,1,11
	.byte	'PC1',0,1
	.word	614
	.byte	5,0,2,35,1,11
	.byte	'reserved_16',0,1
	.word	614
	.byte	3,5,2,35,2,11
	.byte	'PC2',0,1
	.word	614
	.byte	5,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	614
	.byte	3,5,2,35,3,11
	.byte	'PC3',0,1
	.word	614
	.byte	5,0,2,35,3,0,12,8,164,4,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	2827
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_IOCR4_Bits',0,8,166,1,16,4,11
	.byte	'reserved_0',0,1
	.word	614
	.byte	3,5,2,35,0,11
	.byte	'PC4',0,1
	.word	614
	.byte	5,0,2,35,0,11
	.byte	'reserved_8',0,1
	.word	614
	.byte	3,5,2,35,1,11
	.byte	'PC5',0,1
	.word	614
	.byte	5,0,2,35,1,11
	.byte	'reserved_16',0,1
	.word	614
	.byte	3,5,2,35,2,11
	.byte	'PC6',0,1
	.word	614
	.byte	5,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	614
	.byte	3,5,2,35,3,11
	.byte	'PC7',0,1
	.word	614
	.byte	5,0,2,35,3,0,12,8,180,4,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	3042
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_IOCR8_Bits',0,8,179,1,16,4,11
	.byte	'reserved_0',0,1
	.word	614
	.byte	3,5,2,35,0,11
	.byte	'PC8',0,1
	.word	614
	.byte	5,0,2,35,0,11
	.byte	'reserved_8',0,1
	.word	614
	.byte	3,5,2,35,1,11
	.byte	'PC9',0,1
	.word	614
	.byte	5,0,2,35,1,11
	.byte	'reserved_16',0,1
	.word	614
	.byte	3,5,2,35,2,11
	.byte	'PC10',0,1
	.word	614
	.byte	5,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	614
	.byte	3,5,2,35,3,11
	.byte	'PC11',0,1
	.word	614
	.byte	5,0,2,35,3,0,12,8,188,4,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	3257
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_IOCR12_Bits',0,8,153,1,16,4,11
	.byte	'reserved_0',0,1
	.word	614
	.byte	3,5,2,35,0,11
	.byte	'PC12',0,1
	.word	614
	.byte	5,0,2,35,0,11
	.byte	'reserved_8',0,1
	.word	614
	.byte	3,5,2,35,1,11
	.byte	'PC13',0,1
	.word	614
	.byte	5,0,2,35,1,11
	.byte	'reserved_16',0,1
	.word	614
	.byte	3,5,2,35,2,11
	.byte	'PC14',0,1
	.word	614
	.byte	5,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	614
	.byte	3,5,2,35,3,11
	.byte	'PC15',0,1
	.word	614
	.byte	5,0,2,35,3,0,12,8,172,4,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	3474
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_IN_Bits',0,8,118,16,4,11
	.byte	'P0',0,1
	.word	614
	.byte	1,7,2,35,0,11
	.byte	'P1',0,1
	.word	614
	.byte	1,6,2,35,0,11
	.byte	'P2',0,1
	.word	614
	.byte	1,5,2,35,0,11
	.byte	'P3',0,1
	.word	614
	.byte	1,4,2,35,0,11
	.byte	'P4',0,1
	.word	614
	.byte	1,3,2,35,0,11
	.byte	'P5',0,1
	.word	614
	.byte	1,2,2,35,0,11
	.byte	'P6',0,1
	.word	614
	.byte	1,1,2,35,0,11
	.byte	'P7',0,1
	.word	614
	.byte	1,0,2,35,0,11
	.byte	'P8',0,1
	.word	614
	.byte	1,7,2,35,1,11
	.byte	'P9',0,1
	.word	614
	.byte	1,6,2,35,1,11
	.byte	'P10',0,1
	.word	614
	.byte	1,5,2,35,1,11
	.byte	'P11',0,1
	.word	614
	.byte	1,4,2,35,1,11
	.byte	'P12',0,1
	.word	614
	.byte	1,3,2,35,1,11
	.byte	'P13',0,1
	.word	614
	.byte	1,2,2,35,1,11
	.byte	'P14',0,1
	.word	614
	.byte	1,1,2,35,1,11
	.byte	'P15',0,1
	.word	614
	.byte	1,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	631
	.byte	16,0,2,35,2,0,12,8,156,4,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	3694
	.byte	4,2,35,0,0,18,24
	.word	614
	.byte	19,23,0,10
	.byte	'_Ifx_P_PDR0_Bits',0,8,205,3,16,4,11
	.byte	'PD0',0,1
	.word	614
	.byte	3,5,2,35,0,11
	.byte	'PL0',0,1
	.word	614
	.byte	1,4,2,35,0,11
	.byte	'PD1',0,1
	.word	614
	.byte	3,1,2,35,0,11
	.byte	'PL1',0,1
	.word	614
	.byte	1,0,2,35,0,11
	.byte	'PD2',0,1
	.word	614
	.byte	3,5,2,35,1,11
	.byte	'PL2',0,1
	.word	614
	.byte	1,4,2,35,1,11
	.byte	'PD3',0,1
	.word	614
	.byte	3,1,2,35,1,11
	.byte	'PL3',0,1
	.word	614
	.byte	1,0,2,35,1,11
	.byte	'PD4',0,1
	.word	614
	.byte	3,5,2,35,2,11
	.byte	'PL4',0,1
	.word	614
	.byte	1,4,2,35,2,11
	.byte	'PD5',0,1
	.word	614
	.byte	3,1,2,35,2,11
	.byte	'PL5',0,1
	.word	614
	.byte	1,0,2,35,2,11
	.byte	'PD6',0,1
	.word	614
	.byte	3,5,2,35,3,11
	.byte	'PL6',0,1
	.word	614
	.byte	1,4,2,35,3,11
	.byte	'PD7',0,1
	.word	614
	.byte	3,1,2,35,3,11
	.byte	'PL7',0,1
	.word	614
	.byte	1,0,2,35,3,0,12,8,205,5,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	4017
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_PDR1_Bits',0,8,226,3,16,4,11
	.byte	'PD8',0,1
	.word	614
	.byte	3,5,2,35,0,11
	.byte	'PL8',0,1
	.word	614
	.byte	1,4,2,35,0,11
	.byte	'PD9',0,1
	.word	614
	.byte	3,1,2,35,0,11
	.byte	'PL9',0,1
	.word	614
	.byte	1,0,2,35,0,11
	.byte	'PD10',0,1
	.word	614
	.byte	3,5,2,35,1,11
	.byte	'PL10',0,1
	.word	614
	.byte	1,4,2,35,1,11
	.byte	'PD11',0,1
	.word	614
	.byte	3,1,2,35,1,11
	.byte	'PL11',0,1
	.word	614
	.byte	1,0,2,35,1,11
	.byte	'PD12',0,1
	.word	614
	.byte	3,5,2,35,2,11
	.byte	'PL12',0,1
	.word	614
	.byte	1,4,2,35,2,11
	.byte	'PD13',0,1
	.word	614
	.byte	3,1,2,35,2,11
	.byte	'PL13',0,1
	.word	614
	.byte	1,0,2,35,2,11
	.byte	'PD14',0,1
	.word	614
	.byte	3,5,2,35,3,11
	.byte	'PL14',0,1
	.word	614
	.byte	1,4,2,35,3,11
	.byte	'PD15',0,1
	.word	614
	.byte	3,1,2,35,3,11
	.byte	'PL15',0,1
	.word	614
	.byte	1,0,2,35,3,0,12,8,213,5,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	4321
	.byte	4,2,35,0,0,18,8
	.word	614
	.byte	19,7,0,10
	.byte	'_Ifx_P_ESR_Bits',0,8,88,16,4,11
	.byte	'EN0',0,1
	.word	614
	.byte	1,7,2,35,0,11
	.byte	'EN1',0,1
	.word	614
	.byte	1,6,2,35,0,11
	.byte	'EN2',0,1
	.word	614
	.byte	1,5,2,35,0,11
	.byte	'EN3',0,1
	.word	614
	.byte	1,4,2,35,0,11
	.byte	'EN4',0,1
	.word	614
	.byte	1,3,2,35,0,11
	.byte	'EN5',0,1
	.word	614
	.byte	1,2,2,35,0,11
	.byte	'EN6',0,1
	.word	614
	.byte	1,1,2,35,0,11
	.byte	'EN7',0,1
	.word	614
	.byte	1,0,2,35,0,11
	.byte	'EN8',0,1
	.word	614
	.byte	1,7,2,35,1,11
	.byte	'EN9',0,1
	.word	614
	.byte	1,6,2,35,1,11
	.byte	'EN10',0,1
	.word	614
	.byte	1,5,2,35,1,11
	.byte	'EN11',0,1
	.word	614
	.byte	1,4,2,35,1,11
	.byte	'EN12',0,1
	.word	614
	.byte	1,3,2,35,1,11
	.byte	'EN13',0,1
	.word	614
	.byte	1,2,2,35,1,11
	.byte	'EN14',0,1
	.word	614
	.byte	1,1,2,35,1,11
	.byte	'EN15',0,1
	.word	614
	.byte	1,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	631
	.byte	16,0,2,35,2,0,12,8,140,4,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	4646
	.byte	4,2,35,0,0,18,12
	.word	614
	.byte	19,11,0,10
	.byte	'_Ifx_P_PDISC_Bits',0,8,183,3,16,4,11
	.byte	'PDIS0',0,1
	.word	614
	.byte	1,7,2,35,0,11
	.byte	'PDIS1',0,1
	.word	614
	.byte	1,6,2,35,0,11
	.byte	'PDIS2',0,1
	.word	614
	.byte	1,5,2,35,0,11
	.byte	'PDIS3',0,1
	.word	614
	.byte	1,4,2,35,0,11
	.byte	'PDIS4',0,1
	.word	614
	.byte	1,3,2,35,0,11
	.byte	'PDIS5',0,1
	.word	614
	.byte	1,2,2,35,0,11
	.byte	'PDIS6',0,1
	.word	614
	.byte	1,1,2,35,0,11
	.byte	'PDIS7',0,1
	.word	614
	.byte	1,0,2,35,0,11
	.byte	'PDIS8',0,1
	.word	614
	.byte	1,7,2,35,1,11
	.byte	'PDIS9',0,1
	.word	614
	.byte	1,6,2,35,1,11
	.byte	'PDIS10',0,1
	.word	614
	.byte	1,5,2,35,1,11
	.byte	'PDIS11',0,1
	.word	614
	.byte	1,4,2,35,1,11
	.byte	'PDIS12',0,1
	.word	614
	.byte	1,3,2,35,1,11
	.byte	'PDIS13',0,1
	.word	614
	.byte	1,2,2,35,1,11
	.byte	'PDIS14',0,1
	.word	614
	.byte	1,1,2,35,1,11
	.byte	'PDIS15',0,1
	.word	614
	.byte	1,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	631
	.byte	16,0,2,35,2,0,12,8,197,5,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	4986
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_PCSR_Bits',0,8,165,3,16,4,11
	.byte	'SEL0',0,1
	.word	614
	.byte	1,7,2,35,0,11
	.byte	'SEL1',0,1
	.word	614
	.byte	1,6,2,35,0,11
	.byte	'SEL2',0,1
	.word	614
	.byte	1,5,2,35,0,11
	.byte	'SEL3',0,1
	.word	614
	.byte	1,4,2,35,0,11
	.byte	'SEL4',0,1
	.word	614
	.byte	1,3,2,35,0,11
	.byte	'SEL5',0,1
	.word	614
	.byte	1,2,2,35,0,11
	.byte	'SEL6',0,1
	.word	614
	.byte	1,1,2,35,0,11
	.byte	'SEL7',0,1
	.word	614
	.byte	1,0,2,35,0,11
	.byte	'reserved_8',0,1
	.word	614
	.byte	2,6,2,35,1,11
	.byte	'SEL10',0,1
	.word	614
	.byte	1,5,2,35,1,11
	.byte	'SEL11',0,1
	.word	614
	.byte	1,4,2,35,1,11
	.byte	'reserved_12',0,4
	.word	439
	.byte	19,1,2,35,0,11
	.byte	'LCK',0,1
	.word	614
	.byte	1,0,2,35,3,0,12,8,189,5,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	5352
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_OMSR0_Bits',0,8,206,2,16,4,11
	.byte	'PS0',0,1
	.word	614
	.byte	1,7,2,35,0,11
	.byte	'PS1',0,1
	.word	614
	.byte	1,6,2,35,0,11
	.byte	'PS2',0,1
	.word	614
	.byte	1,5,2,35,0,11
	.byte	'PS3',0,1
	.word	614
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,4
	.word	439
	.byte	28,0,2,35,0,0,12,8,149,5,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	5638
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_OMSR4_Bits',0,8,227,2,16,4,11
	.byte	'reserved_0',0,1
	.word	614
	.byte	4,4,2,35,0,11
	.byte	'PS4',0,1
	.word	614
	.byte	1,3,2,35,0,11
	.byte	'PS5',0,1
	.word	614
	.byte	1,2,2,35,0,11
	.byte	'PS6',0,1
	.word	614
	.byte	1,1,2,35,0,11
	.byte	'PS7',0,1
	.word	614
	.byte	1,0,2,35,0,11
	.byte	'reserved_8',0,4
	.word	439
	.byte	24,0,2,35,0,0,12,8,165,5,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	5785
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_OMSR8_Bits',0,8,238,2,16,4,11
	.byte	'reserved_0',0,1
	.word	614
	.byte	8,0,2,35,0,11
	.byte	'PS8',0,1
	.word	614
	.byte	1,7,2,35,1,11
	.byte	'PS9',0,1
	.word	614
	.byte	1,6,2,35,1,11
	.byte	'PS10',0,1
	.word	614
	.byte	1,5,2,35,1,11
	.byte	'PS11',0,1
	.word	614
	.byte	1,4,2,35,1,11
	.byte	'reserved_12',0,4
	.word	439
	.byte	20,0,2,35,0,0,12,8,173,5,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	5954
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_OMSR12_Bits',0,8,216,2,16,4,11
	.byte	'reserved_0',0,2
	.word	631
	.byte	12,4,2,35,0,11
	.byte	'PS12',0,1
	.word	614
	.byte	1,3,2,35,1,11
	.byte	'PS13',0,1
	.word	614
	.byte	1,2,2,35,1,11
	.byte	'PS14',0,1
	.word	614
	.byte	1,1,2,35,1,11
	.byte	'PS15',0,1
	.word	614
	.byte	1,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	631
	.byte	16,0,2,35,2,0,12,8,157,5,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	6126
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_OMCR0_Bits',0,8,232,1,16,4,11
	.byte	'reserved_0',0,2
	.word	631
	.byte	16,0,2,35,0,11
	.byte	'PCL0',0,1
	.word	614
	.byte	1,7,2,35,2,11
	.byte	'PCL1',0,1
	.word	614
	.byte	1,6,2,35,2,11
	.byte	'PCL2',0,1
	.word	614
	.byte	1,5,2,35,2,11
	.byte	'PCL3',0,1
	.word	614
	.byte	1,4,2,35,2,11
	.byte	'reserved_20',0,2
	.word	631
	.byte	12,0,2,35,2,0,12,8,229,4,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	6301
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_OMCR4_Bits',0,8,253,1,16,4,11
	.byte	'reserved_0',0,4
	.word	439
	.byte	20,12,2,35,0,11
	.byte	'PCL4',0,1
	.word	614
	.byte	1,3,2,35,2,11
	.byte	'PCL5',0,1
	.word	614
	.byte	1,2,2,35,2,11
	.byte	'PCL6',0,1
	.word	614
	.byte	1,1,2,35,2,11
	.byte	'PCL7',0,1
	.word	614
	.byte	1,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	614
	.byte	8,0,2,35,3,0,12,8,245,4,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	6475
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_OMCR8_Bits',0,8,136,2,16,4,11
	.byte	'reserved_0',0,4
	.word	439
	.byte	24,8,2,35,0,11
	.byte	'PCL8',0,1
	.word	614
	.byte	1,7,2,35,3,11
	.byte	'PCL9',0,1
	.word	614
	.byte	1,6,2,35,3,11
	.byte	'PCL10',0,1
	.word	614
	.byte	1,5,2,35,3,11
	.byte	'PCL11',0,1
	.word	614
	.byte	1,4,2,35,3,11
	.byte	'reserved_28',0,1
	.word	614
	.byte	4,0,2,35,3,0,12,8,253,4,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	6649
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_OMCR12_Bits',0,8,243,1,16,4,11
	.byte	'reserved_0',0,4
	.word	439
	.byte	28,4,2,35,0,11
	.byte	'PCL12',0,1
	.word	614
	.byte	1,3,2,35,3,11
	.byte	'PCL13',0,1
	.word	614
	.byte	1,2,2,35,3,11
	.byte	'PCL14',0,1
	.word	614
	.byte	1,1,2,35,3,11
	.byte	'PCL15',0,1
	.word	614
	.byte	1,0,2,35,3,0,12,8,237,4,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	6825
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_OMSR_Bits',0,8,249,2,16,4,11
	.byte	'PS0',0,1
	.word	614
	.byte	1,7,2,35,0,11
	.byte	'PS1',0,1
	.word	614
	.byte	1,6,2,35,0,11
	.byte	'PS2',0,1
	.word	614
	.byte	1,5,2,35,0,11
	.byte	'PS3',0,1
	.word	614
	.byte	1,4,2,35,0,11
	.byte	'PS4',0,1
	.word	614
	.byte	1,3,2,35,0,11
	.byte	'PS5',0,1
	.word	614
	.byte	1,2,2,35,0,11
	.byte	'PS6',0,1
	.word	614
	.byte	1,1,2,35,0,11
	.byte	'PS7',0,1
	.word	614
	.byte	1,0,2,35,0,11
	.byte	'PS8',0,1
	.word	614
	.byte	1,7,2,35,1,11
	.byte	'PS9',0,1
	.word	614
	.byte	1,6,2,35,1,11
	.byte	'PS10',0,1
	.word	614
	.byte	1,5,2,35,1,11
	.byte	'PS11',0,1
	.word	614
	.byte	1,4,2,35,1,11
	.byte	'PS12',0,1
	.word	614
	.byte	1,3,2,35,1,11
	.byte	'PS13',0,1
	.word	614
	.byte	1,2,2,35,1,11
	.byte	'PS14',0,1
	.word	614
	.byte	1,1,2,35,1,11
	.byte	'PS15',0,1
	.word	614
	.byte	1,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	631
	.byte	16,0,2,35,2,0,12,8,141,5,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	6981
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_OMCR_Bits',0,8,147,2,16,4,11
	.byte	'reserved_0',0,2
	.word	631
	.byte	16,0,2,35,0,11
	.byte	'PCL0',0,1
	.word	614
	.byte	1,7,2,35,2,11
	.byte	'PCL1',0,1
	.word	614
	.byte	1,6,2,35,2,11
	.byte	'PCL2',0,1
	.word	614
	.byte	1,5,2,35,2,11
	.byte	'PCL3',0,1
	.word	614
	.byte	1,4,2,35,2,11
	.byte	'PCL4',0,1
	.word	614
	.byte	1,3,2,35,2,11
	.byte	'PCL5',0,1
	.word	614
	.byte	1,2,2,35,2,11
	.byte	'PCL6',0,1
	.word	614
	.byte	1,1,2,35,2,11
	.byte	'PCL7',0,1
	.word	614
	.byte	1,0,2,35,2,11
	.byte	'PCL8',0,1
	.word	614
	.byte	1,7,2,35,3,11
	.byte	'PCL9',0,1
	.word	614
	.byte	1,6,2,35,3,11
	.byte	'PCL10',0,1
	.word	614
	.byte	1,5,2,35,3,11
	.byte	'PCL11',0,1
	.word	614
	.byte	1,4,2,35,3,11
	.byte	'PCL12',0,1
	.word	614
	.byte	1,3,2,35,3,11
	.byte	'PCL13',0,1
	.word	614
	.byte	1,2,2,35,3,11
	.byte	'PCL14',0,1
	.word	614
	.byte	1,1,2,35,3,11
	.byte	'PCL15',0,1
	.word	614
	.byte	1,0,2,35,3,0,12,8,221,4,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	7314
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_LPCR0_Bits',0,8,192,1,16,4,11
	.byte	'reserved_0',0,1
	.word	614
	.byte	1,7,2,35,0,11
	.byte	'PS1',0,1
	.word	614
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,4
	.word	439
	.byte	30,0,2,35,0,0,12,8,196,4,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	7662
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_LPCR1_Bits',0,8,200,1,16,4,11
	.byte	'reserved_0',0,1
	.word	614
	.byte	1,7,2,35,0,11
	.byte	'PS1',0,1
	.word	614
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,4
	.word	439
	.byte	30,0,2,35,0,0,10
	.byte	'_Ifx_P_LPCR1_P21_Bits',0,8,208,1,16,4,11
	.byte	'RDIS_CTRL',0,1
	.word	614
	.byte	1,7,2,35,0,11
	.byte	'RX_DIS',0,1
	.word	614
	.byte	1,6,2,35,0,11
	.byte	'TERM',0,1
	.word	614
	.byte	1,5,2,35,0,11
	.byte	'LRXTERM',0,1
	.word	614
	.byte	5,0,2,35,0,11
	.byte	'reserved_8',0,4
	.word	439
	.byte	24,0,2,35,0,0,12,8,204,4,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	7786
	.byte	4,2,35,0,13
	.byte	'B_P21',0
	.word	7870
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_LPCR2_Bits',0,8,218,1,16,4,11
	.byte	'reserved_0',0,1
	.word	614
	.byte	8,0,2,35,0,11
	.byte	'LVDSR',0,1
	.word	614
	.byte	1,7,2,35,1,11
	.byte	'LVDSRL',0,1
	.word	614
	.byte	1,6,2,35,1,11
	.byte	'reserved_10',0,1
	.word	614
	.byte	2,4,2,35,1,11
	.byte	'TDIS_CTRL',0,1
	.word	614
	.byte	1,3,2,35,1,11
	.byte	'TX_DIS',0,1
	.word	614
	.byte	1,2,2,35,1,11
	.byte	'TX_PD',0,1
	.word	614
	.byte	1,1,2,35,1,11
	.byte	'TX_PWDPD',0,1
	.word	614
	.byte	1,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	631
	.byte	16,0,2,35,2,0,12,8,213,4,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	8050
	.byte	4,2,35,0,0,18,76
	.word	614
	.byte	19,75,0,10
	.byte	'_Ifx_P_ACCEN1_Bits',0,8,82,16,4,11
	.byte	'reserved_0',0,4
	.word	439
	.byte	32,0,2,35,0,0,12,8,132,4,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	8303
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_ACCEN0_Bits',0,8,45,16,4,11
	.byte	'EN0',0,1
	.word	614
	.byte	1,7,2,35,0,11
	.byte	'EN1',0,1
	.word	614
	.byte	1,6,2,35,0,11
	.byte	'EN2',0,1
	.word	614
	.byte	1,5,2,35,0,11
	.byte	'EN3',0,1
	.word	614
	.byte	1,4,2,35,0,11
	.byte	'EN4',0,1
	.word	614
	.byte	1,3,2,35,0,11
	.byte	'EN5',0,1
	.word	614
	.byte	1,2,2,35,0,11
	.byte	'EN6',0,1
	.word	614
	.byte	1,1,2,35,0,11
	.byte	'EN7',0,1
	.word	614
	.byte	1,0,2,35,0,11
	.byte	'EN8',0,1
	.word	614
	.byte	1,7,2,35,1,11
	.byte	'EN9',0,1
	.word	614
	.byte	1,6,2,35,1,11
	.byte	'EN10',0,1
	.word	614
	.byte	1,5,2,35,1,11
	.byte	'EN11',0,1
	.word	614
	.byte	1,4,2,35,1,11
	.byte	'EN12',0,1
	.word	614
	.byte	1,3,2,35,1,11
	.byte	'EN13',0,1
	.word	614
	.byte	1,2,2,35,1,11
	.byte	'EN14',0,1
	.word	614
	.byte	1,1,2,35,1,11
	.byte	'EN15',0,1
	.word	614
	.byte	1,0,2,35,1,11
	.byte	'EN16',0,1
	.word	614
	.byte	1,7,2,35,2,11
	.byte	'EN17',0,1
	.word	614
	.byte	1,6,2,35,2,11
	.byte	'EN18',0,1
	.word	614
	.byte	1,5,2,35,2,11
	.byte	'EN19',0,1
	.word	614
	.byte	1,4,2,35,2,11
	.byte	'EN20',0,1
	.word	614
	.byte	1,3,2,35,2,11
	.byte	'EN21',0,1
	.word	614
	.byte	1,2,2,35,2,11
	.byte	'EN22',0,1
	.word	614
	.byte	1,1,2,35,2,11
	.byte	'EN23',0,1
	.word	614
	.byte	1,0,2,35,2,11
	.byte	'EN24',0,1
	.word	614
	.byte	1,7,2,35,3,11
	.byte	'EN25',0,1
	.word	614
	.byte	1,6,2,35,3,11
	.byte	'EN26',0,1
	.word	614
	.byte	1,5,2,35,3,11
	.byte	'EN27',0,1
	.word	614
	.byte	1,4,2,35,3,11
	.byte	'EN28',0,1
	.word	614
	.byte	1,3,2,35,3,11
	.byte	'EN29',0,1
	.word	614
	.byte	1,2,2,35,3,11
	.byte	'EN30',0,1
	.word	614
	.byte	1,1,2,35,3,11
	.byte	'EN31',0,1
	.word	614
	.byte	1,0,2,35,3,0,12,8,252,3,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	8390
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P',0,8,229,5,25,128,2,13
	.byte	'OUT',0
	.word	2088
	.byte	4,2,35,0,13
	.byte	'OMR',0
	.word	2659
	.byte	4,2,35,4,13
	.byte	'ID',0
	.word	2778
	.byte	4,2,35,8,13
	.byte	'reserved_C',0
	.word	2818
	.byte	4,2,35,12,13
	.byte	'IOCR0',0
	.word	3002
	.byte	4,2,35,16,13
	.byte	'IOCR4',0
	.word	3217
	.byte	4,2,35,20,13
	.byte	'IOCR8',0
	.word	3434
	.byte	4,2,35,24,13
	.byte	'IOCR12',0
	.word	3654
	.byte	4,2,35,28,13
	.byte	'reserved_20',0
	.word	2818
	.byte	4,2,35,32,13
	.byte	'IN',0
	.word	3968
	.byte	4,2,35,36,13
	.byte	'reserved_28',0
	.word	4008
	.byte	24,2,35,40,13
	.byte	'PDR0',0
	.word	4281
	.byte	4,2,35,64,13
	.byte	'PDR1',0
	.word	4597
	.byte	4,2,35,68,13
	.byte	'reserved_48',0
	.word	4637
	.byte	8,2,35,72,13
	.byte	'ESR',0
	.word	4937
	.byte	4,2,35,80,13
	.byte	'reserved_54',0
	.word	4977
	.byte	12,2,35,84,13
	.byte	'PDISC',0
	.word	5312
	.byte	4,2,35,96,13
	.byte	'PCSR',0
	.word	5598
	.byte	4,2,35,100,13
	.byte	'reserved_68',0
	.word	4637
	.byte	8,2,35,104,13
	.byte	'OMSR0',0
	.word	5745
	.byte	4,2,35,112,13
	.byte	'OMSR4',0
	.word	5914
	.byte	4,2,35,116,13
	.byte	'OMSR8',0
	.word	6086
	.byte	4,2,35,120,13
	.byte	'OMSR12',0
	.word	6261
	.byte	4,2,35,124,13
	.byte	'OMCR0',0
	.word	6435
	.byte	4,3,35,128,1,13
	.byte	'OMCR4',0
	.word	6609
	.byte	4,3,35,132,1,13
	.byte	'OMCR8',0
	.word	6785
	.byte	4,3,35,136,1,13
	.byte	'OMCR12',0
	.word	6941
	.byte	4,3,35,140,1,13
	.byte	'OMSR',0
	.word	7274
	.byte	4,3,35,144,1,13
	.byte	'OMCR',0
	.word	7622
	.byte	4,3,35,148,1,13
	.byte	'reserved_98',0
	.word	4637
	.byte	8,3,35,152,1,13
	.byte	'LPCR0',0
	.word	7746
	.byte	4,3,35,160,1,13
	.byte	'LPCR1',0
	.word	7995
	.byte	4,3,35,164,1,13
	.byte	'LPCR2',0
	.word	8254
	.byte	4,3,35,168,1,13
	.byte	'reserved_A4',0
	.word	8294
	.byte	76,3,35,172,1,13
	.byte	'ACCEN1',0
	.word	8350
	.byte	4,3,35,248,1,13
	.byte	'ACCEN0',0
	.word	8917
	.byte	4,3,35,252,1,0,14
	.word	8957
	.byte	3
	.word	9560
	.byte	15,7,134,1,9,1,16
	.byte	'IfxPort_OutputMode_pushPull',0,128,1,16
	.byte	'IfxPort_OutputMode_openDrain',0,192,1,0,15,7,120,9,1,16
	.byte	'IfxPort_OutputIdx_general',0,128,1,16
	.byte	'IfxPort_OutputIdx_alt1',0,136,1,16
	.byte	'IfxPort_OutputIdx_alt2',0,144,1,16
	.byte	'IfxPort_OutputIdx_alt3',0,152,1,16
	.byte	'IfxPort_OutputIdx_alt4',0,160,1,16
	.byte	'IfxPort_OutputIdx_alt5',0,168,1,16
	.byte	'IfxPort_OutputIdx_alt6',0,176,1,16
	.byte	'IfxPort_OutputIdx_alt7',0,184,1,0
.L308:
	.byte	4
	.byte	'IfxPort_setPinModeOutput',0,3,7,202,4,17,1,1
.L311:
	.byte	5
	.byte	'port',0,7,202,4,49
	.word	9565
.L313:
	.byte	5
	.byte	'pinIndex',0,7,202,4,61
	.word	614
.L315:
	.byte	5
	.byte	'mode',0,7,202,4,90
	.word	9570
.L317:
	.byte	5
	.byte	'index',0,7,202,4,114
	.word	9640
.L319:
	.byte	6,0,15,7,172,1,9,4,16
	.byte	'IfxPort_State_notChanged',0,0,16
	.byte	'IfxPort_State_high',0,1,16
	.byte	'IfxPort_State_low',0,128,128,4,16
	.byte	'IfxPort_State_toggled',0,129,128,4,0,4
	.byte	'IfxPort_setPinState',0,3,7,208,4,17,1,1,5
	.byte	'port',0,7,208,4,44
	.word	9565
	.byte	5
	.byte	'pinIndex',0,7,208,4,56
	.word	614
	.byte	5
	.byte	'action',0,7,208,4,80
	.word	9953
	.byte	6,0,10
	.byte	'_Ifx_SRC_SRCR_Bits',0,10,45,16,4,11
	.byte	'SRPN',0,1
	.word	614
	.byte	8,0,2,35,0,11
	.byte	'reserved_8',0,1
	.word	614
	.byte	2,6,2,35,1,11
	.byte	'SRE',0,1
	.word	614
	.byte	1,5,2,35,1,11
	.byte	'TOS',0,1
	.word	614
	.byte	2,3,2,35,1,11
	.byte	'reserved_13',0,1
	.word	614
	.byte	3,0,2,35,1,11
	.byte	'ECC',0,1
	.word	614
	.byte	6,2,2,35,2,11
	.byte	'reserved_22',0,1
	.word	614
	.byte	2,0,2,35,2,11
	.byte	'SRR',0,1
	.word	614
	.byte	1,7,2,35,3,11
	.byte	'CLRR',0,1
	.word	614
	.byte	1,6,2,35,3,11
	.byte	'SETR',0,1
	.word	614
	.byte	1,5,2,35,3,11
	.byte	'IOV',0,1
	.word	614
	.byte	1,4,2,35,3,11
	.byte	'IOVCLR',0,1
	.word	614
	.byte	1,3,2,35,3,11
	.byte	'SWS',0,1
	.word	614
	.byte	1,2,2,35,3,11
	.byte	'SWSCLR',0,1
	.word	614
	.byte	1,1,2,35,3,11
	.byte	'reserved_31',0,1
	.word	614
	.byte	1,0,2,35,3,0,12,10,70,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	10134
	.byte	4,2,35,0,0,14
	.word	10424
	.byte	3
	.word	10463
	.byte	4
	.byte	'IfxSrc_clearRequest',0,3,9,250,1,17,1,1,5
	.byte	'src',0,9,250,1,60
	.word	10468
	.byte	6,0,4
	.byte	'IfxSrc_enable',0,3,9,140,2,17,1,1,5
	.byte	'src',0,9,140,2,54
	.word	10468
	.byte	6,0
.L205:
	.byte	15,11,69,9,1,16
	.byte	'IfxSrc_Tos_cpu0',0,0,16
	.byte	'IfxSrc_Tos_cpu1',0,1,16
	.byte	'IfxSrc_Tos_dma',0,3,0
.L212:
	.byte	4
	.byte	'IfxSrc_init',0,3,9,146,2,17,1,1
.L214:
	.byte	5
	.byte	'src',0,9,146,2,52
	.word	10468
.L216:
	.byte	5
	.byte	'typOfService',0,9,146,2,68
	.word	10553
.L218:
	.byte	5
	.byte	'priority',0,9,146,2,95
	.word	631
.L220:
	.byte	17,6,0,0,10
	.byte	'_Ifx_I2C_CLC1_Bits',0,13,110,16,4,11
	.byte	'DISR',0,1
	.word	614
	.byte	1,7,2,35,0,11
	.byte	'DISS',0,1
	.word	614
	.byte	1,6,2,35,0,11
	.byte	'SPEN',0,1
	.word	614
	.byte	1,5,2,35,0,11
	.byte	'EDIS',0,1
	.word	614
	.byte	1,4,2,35,0,11
	.byte	'SBWE',0,1
	.word	614
	.byte	1,3,2,35,0,11
	.byte	'FSOE',0,1
	.word	614
	.byte	1,2,2,35,0,11
	.byte	'reserved_6',0,1
	.word	614
	.byte	2,0,2,35,0,11
	.byte	'RMC',0,1
	.word	614
	.byte	8,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	631
	.byte	16,0,2,35,2,0,12,13,196,3,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	10689
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_I2C_ID_Bits',0,13,228,1,16,4,11
	.byte	'MODREV',0,1
	.word	614
	.byte	8,0,2,35,0,11
	.byte	'MODNUMBER',0,1
	.word	614
	.byte	8,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	631
	.byte	16,0,2,35,2,0,12,13,156,4,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	10910
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_I2C_RUNCTRL_Bits',0,13,239,2,16,4,11
	.byte	'RUN',0,1
	.word	614
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,4
	.word	439
	.byte	31,0,2,35,0,0,12,13,140,5,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	11036
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_I2C_ENDDCTRL_Bits',0,13,132,1,16,4,11
	.byte	'SETRSC',0,1
	.word	614
	.byte	1,7,2,35,0,11
	.byte	'SETEND',0,1
	.word	614
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,4
	.word	439
	.byte	30,0,2,35,0,0,12,13,204,3,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	11142
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_I2C_FDIVCFG_Bits',0,13,170,1,16,4,11
	.byte	'DEC',0,2
	.word	631
	.byte	11,5,2,35,0,11
	.byte	'reserved_11',0,1
	.word	614
	.byte	5,0,2,35,1,11
	.byte	'INC',0,1
	.word	614
	.byte	8,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	614
	.byte	8,0,2,35,3,0,12,13,236,3,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	11270
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_I2C_FDIVHIGHCFG_Bits',0,13,179,1,16,4,11
	.byte	'DEC',0,2
	.word	631
	.byte	11,5,2,35,0,11
	.byte	'reserved_11',0,1
	.word	614
	.byte	5,0,2,35,1,11
	.byte	'INC',0,1
	.word	614
	.byte	8,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	614
	.byte	8,0,2,35,3,0,12,13,244,3,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	11415
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_I2C_ADDRCFG_Bits',0,13,88,16,4,11
	.byte	'ADR',0,2
	.word	631
	.byte	10,6,2,35,0,11
	.byte	'reserved_10',0,1
	.word	614
	.byte	6,0,2,35,1,11
	.byte	'TBAM',0,1
	.word	614
	.byte	1,7,2,35,2,11
	.byte	'GCE',0,1
	.word	614
	.byte	1,6,2,35,2,11
	.byte	'MCE',0,1
	.word	614
	.byte	1,5,2,35,2,11
	.byte	'MnS',0,1
	.word	614
	.byte	1,4,2,35,2,11
	.byte	'SONA',0,1
	.word	614
	.byte	1,3,2,35,2,11
	.byte	'SOPE',0,1
	.word	614
	.byte	1,2,2,35,2,11
	.byte	'reserved_22',0,2
	.word	631
	.byte	10,0,2,35,2,0,12,13,172,3,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	11564
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_I2C_BUSSTAT_Bits',0,13,102,16,4,11
	.byte	'BS',0,1
	.word	614
	.byte	2,6,2,35,0,11
	.byte	'RnW',0,1
	.word	614
	.byte	1,5,2,35,0,11
	.byte	'reserved_3',0,4
	.word	439
	.byte	29,0,2,35,0,0,12,13,180,3,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	11786
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_I2C_FIFOCFG_Bits',0,13,195,1,16,4,11
	.byte	'RXBS',0,1
	.word	614
	.byte	2,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	614
	.byte	2,4,2,35,0,11
	.byte	'TXBS',0,1
	.word	614
	.byte	2,2,2,35,0,11
	.byte	'reserved_6',0,1
	.word	614
	.byte	2,0,2,35,0,11
	.byte	'RXFA',0,1
	.word	614
	.byte	2,6,2,35,1,11
	.byte	'reserved_10',0,1
	.word	614
	.byte	2,4,2,35,1,11
	.byte	'TXFA',0,1
	.word	614
	.byte	2,2,2,35,1,11
	.byte	'reserved_14',0,1
	.word	614
	.byte	2,0,2,35,1,11
	.byte	'RXFC',0,1
	.word	614
	.byte	1,7,2,35,2,11
	.byte	'TXFC',0,1
	.word	614
	.byte	1,6,2,35,2,11
	.byte	'reserved_18',0,2
	.word	631
	.byte	14,0,2,35,2,0,12,13,132,4,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	11905
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_I2C_MRPSCTRL_Bits',0,13,174,2,16,4,11
	.byte	'MRPS',0,2
	.word	631
	.byte	14,2,2,35,0,11
	.byte	'reserved_14',0,4
	.word	439
	.byte	18,0,2,35,0,0,12,13,220,4,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	12183
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_I2C_RPSSTAT_Bits',0,13,232,2,16,4,11
	.byte	'RPS',0,2
	.word	631
	.byte	14,2,2,35,0,11
	.byte	'reserved_14',0,4
	.word	439
	.byte	18,0,2,35,0,0,12,13,132,5,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	12292
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_I2C_TPSCTRL_Bits',0,13,138,3,16,4,11
	.byte	'TPS',0,2
	.word	631
	.byte	14,2,2,35,0,11
	.byte	'reserved_14',0,4
	.word	439
	.byte	18,0,2,35,0,0,12,13,164,5,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	12399
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_I2C_FFSSTAT_Bits',0,13,188,1,16,4,11
	.byte	'FFS',0,1
	.word	614
	.byte	6,2,2,35,0,11
	.byte	'reserved_6',0,4
	.word	439
	.byte	26,0,2,35,0,0,12,13,252,3,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	12506
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_I2C_TIMCFG_Bits',0,13,252,2,16,4,11
	.byte	'SDA_DEL_HD_DAT',0,1
	.word	614
	.byte	6,2,2,35,0,11
	.byte	'HS_SDA_DEL_HD_DAT',0,2
	.word	631
	.byte	3,7,2,35,0,11
	.byte	'SCL_DEL_HD_STA',0,1
	.word	614
	.byte	3,4,2,35,1,11
	.byte	'reserved_12',0,1
	.word	614
	.byte	2,2,2,35,1,11
	.byte	'EN_SCL_LOW_LEN',0,1
	.word	614
	.byte	1,1,2,35,1,11
	.byte	'FS_SCL_LOW',0,1
	.word	614
	.byte	1,0,2,35,1,11
	.byte	'HS_SDA_DEL',0,1
	.word	614
	.byte	3,5,2,35,2,11
	.byte	'reserved_19',0,1
	.word	614
	.byte	5,0,2,35,2,11
	.byte	'SCL_LOW_LEN',0,1
	.word	614
	.byte	8,0,2,35,3,0,12,13,156,5,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	12612
	.byte	4,2,35,0,0,18,28
	.word	614
	.byte	19,27,0,10
	.byte	'_Ifx_I2C_ERRIRQSM_Bits',0,13,150,1,16,4,11
	.byte	'RXF_UFL',0,1
	.word	614
	.byte	1,7,2,35,0,11
	.byte	'RXF_OFL',0,1
	.word	614
	.byte	1,6,2,35,0,11
	.byte	'TXF_UFL',0,1
	.word	614
	.byte	1,5,2,35,0,11
	.byte	'TXF_OFL',0,1
	.word	614
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,4
	.word	439
	.byte	28,0,2,35,0,0,12,13,220,3,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	12909
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_I2C_ERRIRQSS_Bits',0,13,160,1,16,4,11
	.byte	'RXF_UFL',0,1
	.word	614
	.byte	1,7,2,35,0,11
	.byte	'RXF_OFL',0,1
	.word	614
	.byte	1,6,2,35,0,11
	.byte	'TXF_UFL',0,1
	.word	614
	.byte	1,5,2,35,0,11
	.byte	'TXF_OFL',0,1
	.word	614
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,4
	.word	439
	.byte	28,0,2,35,0,0,12,13,228,3,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	13077
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_I2C_ERRIRQSC_Bits',0,13,140,1,16,4,11
	.byte	'RXF_UFL',0,1
	.word	614
	.byte	1,7,2,35,0,11
	.byte	'RXF_OFL',0,1
	.word	614
	.byte	1,6,2,35,0,11
	.byte	'TXF_UFL',0,1
	.word	614
	.byte	1,5,2,35,0,11
	.byte	'TXF_OFL',0,1
	.word	614
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,4
	.word	439
	.byte	28,0,2,35,0,0,12,13,212,3,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	13245
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_I2C_PIRQSM_Bits',0,13,194,2,16,4,11
	.byte	'AM',0,1
	.word	614
	.byte	1,7,2,35,0,11
	.byte	'GC',0,1
	.word	614
	.byte	1,6,2,35,0,11
	.byte	'MC',0,1
	.word	614
	.byte	1,5,2,35,0,11
	.byte	'AL',0,1
	.word	614
	.byte	1,4,2,35,0,11
	.byte	'NACK',0,1
	.word	614
	.byte	1,3,2,35,0,11
	.byte	'TX_END',0,1
	.word	614
	.byte	1,2,2,35,0,11
	.byte	'RX',0,1
	.word	614
	.byte	1,1,2,35,0,11
	.byte	'reserved_7',0,4
	.word	439
	.byte	25,0,2,35,0,0,12,13,236,4,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	13413
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_I2C_PIRQSS_Bits',0,13,207,2,16,4,11
	.byte	'AM',0,1
	.word	614
	.byte	1,7,2,35,0,11
	.byte	'GC',0,1
	.word	614
	.byte	1,6,2,35,0,11
	.byte	'MC',0,1
	.word	614
	.byte	1,5,2,35,0,11
	.byte	'AL',0,1
	.word	614
	.byte	1,4,2,35,0,11
	.byte	'NACK',0,1
	.word	614
	.byte	1,3,2,35,0,11
	.byte	'TX_END',0,1
	.word	614
	.byte	1,2,2,35,0,11
	.byte	'RX',0,1
	.word	614
	.byte	1,1,2,35,0,11
	.byte	'reserved_7',0,4
	.word	439
	.byte	25,0,2,35,0,0,12,13,244,4,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	13607
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_I2C_PIRQSC_Bits',0,13,181,2,16,4,11
	.byte	'AM',0,1
	.word	614
	.byte	1,7,2,35,0,11
	.byte	'GC',0,1
	.word	614
	.byte	1,6,2,35,0,11
	.byte	'MC',0,1
	.word	614
	.byte	1,5,2,35,0,11
	.byte	'AL',0,1
	.word	614
	.byte	1,4,2,35,0,11
	.byte	'NACK',0,1
	.word	614
	.byte	1,3,2,35,0,11
	.byte	'TX_END',0,1
	.word	614
	.byte	1,2,2,35,0,11
	.byte	'RX',0,1
	.word	614
	.byte	1,1,2,35,0,11
	.byte	'reserved_7',0,4
	.word	439
	.byte	25,0,2,35,0,0,12,13,228,4,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	13801
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_I2C_RIS_Bits',0,13,220,2,16,4,11
	.byte	'LSREQ_INT',0,1
	.word	614
	.byte	1,7,2,35,0,11
	.byte	'SREQ_INT',0,1
	.word	614
	.byte	1,6,2,35,0,11
	.byte	'LBREQ_INT',0,1
	.word	614
	.byte	1,5,2,35,0,11
	.byte	'BREQ_INT',0,1
	.word	614
	.byte	1,4,2,35,0,11
	.byte	'I2C_ERR_INT',0,1
	.word	614
	.byte	1,3,2,35,0,11
	.byte	'I2C_P_INT',0,1
	.word	614
	.byte	1,2,2,35,0,11
	.byte	'reserved_6',0,4
	.word	439
	.byte	26,0,2,35,0,0,12,13,252,4,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	13995
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_I2C_IMSC_Bits',0,13,236,1,16,4,11
	.byte	'LSREQ_INT',0,1
	.word	614
	.byte	1,7,2,35,0,11
	.byte	'SREQ_INT',0,1
	.word	614
	.byte	1,6,2,35,0,11
	.byte	'LBREQ_INT',0,1
	.word	614
	.byte	1,5,2,35,0,11
	.byte	'BREQ_INT',0,1
	.word	614
	.byte	1,4,2,35,0,11
	.byte	'I2C_ERR_INT',0,1
	.word	614
	.byte	1,3,2,35,0,11
	.byte	'I2C_P_INT',0,1
	.word	614
	.byte	1,2,2,35,0,11
	.byte	'reserved_6',0,4
	.word	439
	.byte	26,0,2,35,0,0,12,13,164,4,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	14208
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_I2C_MIS_Bits',0,13,154,2,16,4,11
	.byte	'LSREQ_INT',0,1
	.word	614
	.byte	1,7,2,35,0,11
	.byte	'SREQ_INT',0,1
	.word	614
	.byte	1,6,2,35,0,11
	.byte	'LBREQ_INT',0,1
	.word	614
	.byte	1,5,2,35,0,11
	.byte	'BREQ_INT',0,1
	.word	614
	.byte	1,4,2,35,0,11
	.byte	'I2C_ERR_INT',0,1
	.word	614
	.byte	1,3,2,35,0,11
	.byte	'I2C_P_INT',0,1
	.word	614
	.byte	1,2,2,35,0,11
	.byte	'reserved_6',0,4
	.word	439
	.byte	26,0,2,35,0,0,12,13,204,4,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	14422
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_I2C_ICR_Bits',0,13,218,1,16,4,11
	.byte	'LSREQ_INT',0,1
	.word	614
	.byte	1,7,2,35,0,11
	.byte	'SREQ_INT',0,1
	.word	614
	.byte	1,6,2,35,0,11
	.byte	'LBREQ_INT',0,1
	.word	614
	.byte	1,5,2,35,0,11
	.byte	'BREQ_INT',0,1
	.word	614
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,4
	.word	439
	.byte	28,0,2,35,0,0,12,13,148,4,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	14635
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_I2C_ISR_Bits',0,13,248,1,16,4,11
	.byte	'LSREQ_INT',0,1
	.word	614
	.byte	1,7,2,35,0,11
	.byte	'SREQ_INT',0,1
	.word	614
	.byte	1,6,2,35,0,11
	.byte	'LBREQ_INT',0,1
	.word	614
	.byte	1,5,2,35,0,11
	.byte	'BREQ_INT',0,1
	.word	614
	.byte	1,4,2,35,0,11
	.byte	'I2C_ERR_INT',0,1
	.word	614
	.byte	1,3,2,35,0,11
	.byte	'I2C_P_INT',0,1
	.word	614
	.byte	1,2,2,35,0,11
	.byte	'reserved_6',0,4
	.word	439
	.byte	26,0,2,35,0,0,12,13,172,4,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	14804
	.byte	4,2,35,0,0,18,236,254,1
	.word	614
	.byte	19,235,254,1,0,10
	.byte	'_Ifx_I2C_TXD_Bits',0,13,145,3,16,4,11
	.byte	'TXD',0,4
	.word	439
	.byte	32,0,2,35,0,0,12,13,172,5,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	15030
	.byte	4,2,35,0,0,18,252,127
	.word	614
	.byte	19,251,127,0,10
	.byte	'_Ifx_I2C_RXD_Bits',0,13,246,2,16,4,11
	.byte	'RXD',0,4
	.word	439
	.byte	32,0,2,35,0,0,12,13,148,5,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	15121
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_I2C_CLC_Bits',0,13,124,16,4,11
	.byte	'DISR',0,1
	.word	614
	.byte	1,7,2,35,0,11
	.byte	'DISS',0,1
	.word	614
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,4
	.word	439
	.byte	30,0,2,35,0,0,12,13,188,3,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	15201
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_I2C_MODID_Bits',0,13,166,2,16,4,11
	.byte	'MODREV',0,1
	.word	614
	.byte	8,0,2,35,0,11
	.byte	'MODTYPE',0,1
	.word	614
	.byte	8,0,2,35,1,11
	.byte	'MODNUMBER',0,2
	.word	631
	.byte	16,0,2,35,2,0,12,13,212,4,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	15319
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_I2C_GPCTL_Bits',0,13,211,1,16,4,11
	.byte	'PISEL',0,1
	.word	614
	.byte	3,5,2,35,0,11
	.byte	'reserved_3',0,4
	.word	439
	.byte	29,0,2,35,0,0,12,13,140,4,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	15444
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_I2C_ACCEN0_Bits',0,13,45,16,4,11
	.byte	'EN0',0,1
	.word	614
	.byte	1,7,2,35,0,11
	.byte	'EN1',0,1
	.word	614
	.byte	1,6,2,35,0,11
	.byte	'EN2',0,1
	.word	614
	.byte	1,5,2,35,0,11
	.byte	'EN3',0,1
	.word	614
	.byte	1,4,2,35,0,11
	.byte	'EN4',0,1
	.word	614
	.byte	1,3,2,35,0,11
	.byte	'EN5',0,1
	.word	614
	.byte	1,2,2,35,0,11
	.byte	'EN6',0,1
	.word	614
	.byte	1,1,2,35,0,11
	.byte	'EN7',0,1
	.word	614
	.byte	1,0,2,35,0,11
	.byte	'EN8',0,1
	.word	614
	.byte	1,7,2,35,1,11
	.byte	'EN9',0,1
	.word	614
	.byte	1,6,2,35,1,11
	.byte	'EN10',0,1
	.word	614
	.byte	1,5,2,35,1,11
	.byte	'EN11',0,1
	.word	614
	.byte	1,4,2,35,1,11
	.byte	'EN12',0,1
	.word	614
	.byte	1,3,2,35,1,11
	.byte	'EN13',0,1
	.word	614
	.byte	1,2,2,35,1,11
	.byte	'EN14',0,1
	.word	614
	.byte	1,1,2,35,1,11
	.byte	'EN15',0,1
	.word	614
	.byte	1,0,2,35,1,11
	.byte	'EN16',0,1
	.word	614
	.byte	1,7,2,35,2,11
	.byte	'EN17',0,1
	.word	614
	.byte	1,6,2,35,2,11
	.byte	'EN18',0,1
	.word	614
	.byte	1,5,2,35,2,11
	.byte	'EN19',0,1
	.word	614
	.byte	1,4,2,35,2,11
	.byte	'EN20',0,1
	.word	614
	.byte	1,3,2,35,2,11
	.byte	'EN21',0,1
	.word	614
	.byte	1,2,2,35,2,11
	.byte	'EN22',0,1
	.word	614
	.byte	1,1,2,35,2,11
	.byte	'EN23',0,1
	.word	614
	.byte	1,0,2,35,2,11
	.byte	'EN24',0,1
	.word	614
	.byte	1,7,2,35,3,11
	.byte	'EN25',0,1
	.word	614
	.byte	1,6,2,35,3,11
	.byte	'EN26',0,1
	.word	614
	.byte	1,5,2,35,3,11
	.byte	'EN27',0,1
	.word	614
	.byte	1,4,2,35,3,11
	.byte	'EN28',0,1
	.word	614
	.byte	1,3,2,35,3,11
	.byte	'EN29',0,1
	.word	614
	.byte	1,2,2,35,3,11
	.byte	'EN30',0,1
	.word	614
	.byte	1,1,2,35,3,11
	.byte	'EN31',0,1
	.word	614
	.byte	1,0,2,35,3,0,12,13,156,3,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	15550
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_I2C_ACCEN1_Bits',0,13,82,16,4,11
	.byte	'reserved_0',0,4
	.word	439
	.byte	32,0,2,35,0,0,12,13,164,3,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	16119
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_I2C_KRST0_Bits',0,13,132,2,16,4,11
	.byte	'RST',0,1
	.word	614
	.byte	1,7,2,35,0,11
	.byte	'RSTSTAT',0,1
	.word	614
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,4
	.word	439
	.byte	30,0,2,35,0,0,12,13,180,4,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	16208
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_I2C_KRST1_Bits',0,13,140,2,16,4,11
	.byte	'RST',0,1
	.word	614
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,4
	.word	439
	.byte	31,0,2,35,0,0,12,13,188,4,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	16331
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_I2C_KRSTCLR_Bits',0,13,147,2,16,4,11
	.byte	'CLR',0,1
	.word	614
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,4
	.word	439
	.byte	31,0,2,35,0,0,12,13,196,4,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	16435
	.byte	4,2,35,0,0,18,224,1
	.word	614
	.byte	19,223,1,0,10
	.byte	'_Ifx_I2C',0,13,188,5,25,128,130,4,13
	.byte	'CLC1',0
	.word	10870
	.byte	4,2,35,0,13
	.byte	'reserved_4',0
	.word	2818
	.byte	4,2,35,4,13
	.byte	'ID',0
	.word	10996
	.byte	4,2,35,8,13
	.byte	'reserved_C',0
	.word	2818
	.byte	4,2,35,12,13
	.byte	'RUNCTRL',0
	.word	11102
	.byte	4,2,35,16,13
	.byte	'ENDDCTRL',0
	.word	11230
	.byte	4,2,35,20,13
	.byte	'FDIVCFG',0
	.word	11375
	.byte	4,2,35,24,13
	.byte	'FDIVHIGHCFG',0
	.word	11524
	.byte	4,2,35,28,13
	.byte	'ADDRCFG',0
	.word	11746
	.byte	4,2,35,32,13
	.byte	'BUSSTAT',0
	.word	11865
	.byte	4,2,35,36,13
	.byte	'FIFOCFG',0
	.word	12143
	.byte	4,2,35,40,13
	.byte	'MRPSCTRL',0
	.word	12252
	.byte	4,2,35,44,13
	.byte	'RPSSTAT',0
	.word	12359
	.byte	4,2,35,48,13
	.byte	'TPSCTRL',0
	.word	12466
	.byte	4,2,35,52,13
	.byte	'FFSSTAT',0
	.word	12572
	.byte	4,2,35,56,13
	.byte	'reserved_3C',0
	.word	2818
	.byte	4,2,35,60,13
	.byte	'TIMCFG',0
	.word	12860
	.byte	4,2,35,64,13
	.byte	'reserved_44',0
	.word	12900
	.byte	28,2,35,68,13
	.byte	'ERRIRQSM',0
	.word	13037
	.byte	4,2,35,96,13
	.byte	'ERRIRQSS',0
	.word	13205
	.byte	4,2,35,100,13
	.byte	'ERRIRQSC',0
	.word	13373
	.byte	4,2,35,104,13
	.byte	'reserved_6C',0
	.word	2818
	.byte	4,2,35,108,13
	.byte	'PIRQSM',0
	.word	13567
	.byte	4,2,35,112,13
	.byte	'PIRQSS',0
	.word	13761
	.byte	4,2,35,116,13
	.byte	'PIRQSC',0
	.word	13955
	.byte	4,2,35,120,13
	.byte	'reserved_7C',0
	.word	2818
	.byte	4,2,35,124,13
	.byte	'RIS',0
	.word	14168
	.byte	4,3,35,128,1,13
	.byte	'IMSC',0
	.word	14382
	.byte	4,3,35,132,1,13
	.byte	'MIS',0
	.word	14595
	.byte	4,3,35,136,1,13
	.byte	'ICR',0
	.word	14764
	.byte	4,3,35,140,1,13
	.byte	'ISR',0
	.word	14977
	.byte	4,3,35,144,1,13
	.byte	'reserved_94',0
	.word	15017
	.byte	236,254,1,3,35,148,1,13
	.byte	'TXD',0
	.word	15070
	.byte	4,4,35,128,128,2,13
	.byte	'reserved_8004',0
	.word	15110
	.byte	252,127,4,35,132,128,2,13
	.byte	'RXD',0
	.word	15161
	.byte	4,4,35,128,128,3,13
	.byte	'reserved_C004',0
	.word	15110
	.byte	252,127,4,35,132,128,3,13
	.byte	'CLC',0
	.word	15279
	.byte	4,4,35,128,128,4,13
	.byte	'MODID',0
	.word	15404
	.byte	4,4,35,132,128,4,13
	.byte	'GPCTL',0
	.word	15510
	.byte	4,4,35,136,128,4,13
	.byte	'ACCEN0',0
	.word	16079
	.byte	4,4,35,140,128,4,13
	.byte	'ACCEN1',0
	.word	16168
	.byte	4,4,35,144,128,4,13
	.byte	'KRST0',0
	.word	16291
	.byte	4,4,35,148,128,4,13
	.byte	'KRST1',0
	.word	16395
	.byte	4,4,35,152,128,4,13
	.byte	'KRSTCLR',0
	.word	16501
	.byte	4,4,35,156,128,4,13
	.byte	'reserved_10020',0
	.word	16541
	.byte	224,1,4,35,160,128,4,0,14
	.word	16552
.L190:
	.byte	3
	.word	17373
	.byte	15,12,106,9,1,16
	.byte	'IfxI2c_ProtocolInterruptSource_addressMatch',0,0,16
	.byte	'IfxI2c_ProtocolInterruptSource_generalCall',0,1,16
	.byte	'IfxI2c_ProtocolInterruptSource_masterCode',0,2,16
	.byte	'IfxI2c_ProtocolInterruptSource_arbitrationLost',0,3,16
	.byte	'IfxI2c_ProtocolInterruptSource_notAcknowledgeReceived',0,4,16
	.byte	'IfxI2c_ProtocolInterruptSource_transmissionEnd',0,5,16
	.byte	'IfxI2c_ProtocolInterruptSource_receiveMode',0,6,0
.L341:
	.byte	4
	.byte	'IfxI2c_clearProtocolInterruptSource',0,3,12,132,5,17,1,1
.L343:
	.byte	5
	.byte	'i2c',0,12,132,5,62
	.word	17378
.L345:
	.byte	5
	.byte	'source',0,12,132,5,98
	.word	17383
.L347:
	.byte	6,0
.L208:
	.byte	8
	.byte	'IfxI2c_getBurstDataTransferSrcPointer',0,3,12,240,5,35
	.word	10468
	.byte	1,1
.L209:
	.byte	5
	.byte	'i2c',0,12,240,5,82
	.word	17378
.L211:
	.byte	6,0,15,12,72,9,1,16
	.byte	'IfxI2c_BusStatus_idle',0,0,16
	.byte	'IfxI2c_BusStatus_started',0,1,16
	.byte	'IfxI2c_BusStatus_busyMaster',0,2,16
	.byte	'IfxI2c_BusStatus_remoteSlave',0,3,0,8
	.byte	'IfxI2c_getBusStatus',0,3,12,131,6,29
	.word	17863
	.byte	1,1,5
	.byte	'i2c',0,12,131,6,58
	.word	17378
	.byte	6,0
.L226:
	.byte	8
	.byte	'IfxI2c_getErrorSrcPointer',0,3,12,149,6,35
	.word	10468
	.byte	1,1
.L227:
	.byte	5
	.byte	'i2c',0,12,149,6,70
	.word	17378
.L229:
	.byte	6,0
.L238:
	.byte	8
	.byte	'IfxI2c_getLastBurstDataTransferSrcPointer',0,3,12,162,6,35
	.word	10468
	.byte	1,1
.L239:
	.byte	5
	.byte	'i2c',0,12,162,6,86
	.word	17378
.L241:
	.byte	6,0
.L250:
	.byte	8
	.byte	'IfxI2c_getLastSingleDataTransferSrcPointer',0,3,12,181,6,35
	.word	10468
	.byte	1,1
.L251:
	.byte	5
	.byte	'i2c',0,12,181,6,87
	.word	17378
.L253:
	.byte	6,0
.L334:
	.byte	8
	.byte	'IfxI2c_getProtocolInterruptSourceStatus',0,3,12,206,6,20
	.word	614
	.byte	1,1
.L336:
	.byte	5
	.byte	'i2c',0,12,206,6,69
	.word	17378
.L338:
	.byte	5
	.byte	'source',0,12,206,6,105
	.word	17383
.L340:
	.byte	6,0
.L266:
	.byte	8
	.byte	'IfxI2c_getProtocolSrcPointer',0,3,12,212,6,35
	.word	10468
	.byte	1,1
.L267:
	.byte	5
	.byte	'i2c',0,12,212,6,73
	.word	17378
.L269:
	.byte	6,0
.L278:
	.byte	8
	.byte	'IfxI2c_getSingleDataTransferSrcPointer',0,3,12,225,6,35
	.word	10468
	.byte	1,1
.L279:
	.byte	5
	.byte	'i2c',0,12,225,6,83
	.word	17378
.L281:
	.byte	6,0,15,12,91,9,1,16
	.byte	'IfxI2c_PinSelect_a',0,0,16
	.byte	'IfxI2c_PinSelect_b',0,1,16
	.byte	'IfxI2c_PinSelect_c',0,2,16
	.byte	'IfxI2c_PinSelect_d',0,3,16
	.byte	'IfxI2c_PinSelect_e',0,4,16
	.byte	'IfxI2c_PinSelect_f',0,5,16
	.byte	'IfxI2c_PinSelect_g',0,6,16
	.byte	'IfxI2c_PinSelect_h',0,7,0
.L321:
	.byte	4
	.byte	'IfxI2c_setPinSelection',0,3,12,128,7,17,1,1
.L324:
	.byte	5
	.byte	'i2c',0,12,128,7,49
	.word	17378
.L326:
	.byte	5
	.byte	'pisel',0,12,128,7,71
	.word	18425
.L328:
	.byte	6,0
.L193:
	.byte	4
	.byte	'IfxI2c_stop',0,3,12,158,7,17,1,1
.L195:
	.byte	5
	.byte	'i2c',0,12,158,7,38
	.word	17378
.L197:
	.byte	6,0,20
	.word	455
	.byte	21
	.byte	'__c11_atomic_thread_fence',0,1,1,1,1,22
	.word	18695
	.byte	0,14
	.word	439
	.byte	3
	.word	439
	.byte	23
	.byte	'__cmpswapw',0
	.word	18737
	.byte	1,1,1,1,24
	.byte	'p',0
	.word	18742
	.byte	24
	.byte	'value',0
	.word	439
	.byte	24
	.byte	'compare',0
	.word	439
	.byte	0,25
	.word	183
	.byte	26
	.word	209
	.byte	6,0,25
	.word	244
	.byte	26
	.word	276
	.byte	6,0,25
	.word	289
	.byte	6,0,25
	.word	358
	.byte	26
	.word	377
	.byte	6,0,25
	.word	393
	.byte	26
	.word	408
	.byte	26
	.word	422
	.byte	6,0,25
	.word	1201
	.byte	26
	.word	1241
	.byte	26
	.word	1259
	.byte	6,0,25
	.word	1279
	.byte	26
	.word	1317
	.byte	26
	.word	1335
	.byte	6,0,27
	.byte	'IfxScuWdt_clearCpuEndinit',0,3,217,1,17,1,1,1,1,5
	.byte	'password',0,3,217,1,50
	.word	631
	.byte	0,27
	.byte	'IfxScuWdt_setCpuEndinit',0,3,239,1,17,1,1,1,1,5
	.byte	'password',0,3,239,1,48
	.word	631
	.byte	0,25
	.word	1355
	.byte	26
	.word	1406
	.byte	6,0,28
	.byte	'IfxScuWdt_getCpuWatchdogPassword',0,3,129,3,19
	.word	631
	.byte	1,1,1,1,25
	.word	1505
	.byte	6,0,25
	.word	1539
	.byte	6,0,25
	.word	1602
	.byte	26
	.word	1643
	.byte	6,0,25
	.word	1662
	.byte	26
	.word	1717
	.byte	6,0,25
	.word	1736
	.byte	26
	.word	1776
	.byte	26
	.word	1793
	.byte	17,6,0,0,25
	.word	9857
	.byte	26
	.word	9890
	.byte	26
	.word	9904
	.byte	26
	.word	9922
	.byte	26
	.word	9936
	.byte	6,0,25
	.word	10056
	.byte	26
	.word	10084
	.byte	26
	.word	10098
	.byte	26
	.word	10116
	.byte	6,0,15,7,95,9,1,16
	.byte	'IfxPort_Mode_inputNoPullDevice',0,0,16
	.byte	'IfxPort_Mode_inputPullDown',0,8,16
	.byte	'IfxPort_Mode_inputPullUp',0,16,16
	.byte	'IfxPort_Mode_outputPushPullGeneral',0,128,1,16
	.byte	'IfxPort_Mode_outputPushPullAlt1',0,136,1,16
	.byte	'IfxPort_Mode_outputPushPullAlt2',0,144,1,16
	.byte	'IfxPort_Mode_outputPushPullAlt3',0,152,1,16
	.byte	'IfxPort_Mode_outputPushPullAlt4',0,160,1,16
	.byte	'IfxPort_Mode_outputPushPullAlt5',0,168,1,16
	.byte	'IfxPort_Mode_outputPushPullAlt6',0,176,1,16
	.byte	'IfxPort_Mode_outputPushPullAlt7',0,184,1,16
	.byte	'IfxPort_Mode_outputOpenDrainGeneral',0,192,1,16
	.byte	'IfxPort_Mode_outputOpenDrainAlt1',0,200,1,16
	.byte	'IfxPort_Mode_outputOpenDrainAlt2',0,208,1,16
	.byte	'IfxPort_Mode_outputOpenDrainAlt3',0,216,1,16
	.byte	'IfxPort_Mode_outputOpenDrainAlt4',0,224,1,16
	.byte	'IfxPort_Mode_outputOpenDrainAlt5',0,232,1,16
	.byte	'IfxPort_Mode_outputOpenDrainAlt6',0,240,1,16
	.byte	'IfxPort_Mode_outputOpenDrainAlt7',0,248,1,0,27
	.byte	'IfxPort_setPinMode',0,7,247,2,17,1,1,1,1,5
	.byte	'port',0,7,247,2,43
	.word	9565
	.byte	5
	.byte	'pinIndex',0,7,247,2,55
	.word	614
	.byte	5
	.byte	'mode',0,7,247,2,78
	.word	19163
	.byte	0
.L306:
	.byte	15,7,144,1,9,1,16
	.byte	'IfxPort_PadDriver_cmosAutomotiveSpeed1',0,0,16
	.byte	'IfxPort_PadDriver_cmosAutomotiveSpeed2',0,1,16
	.byte	'IfxPort_PadDriver_cmosAutomotiveSpeed3',0,2,16
	.byte	'IfxPort_PadDriver_cmosAutomotiveSpeed4',0,3,16
	.byte	'IfxPort_PadDriver_lvdsSpeed1',0,4,16
	.byte	'IfxPort_PadDriver_lvdsSpeed2',0,5,16
	.byte	'IfxPort_PadDriver_lvdsSpeed3',0,6,16
	.byte	'IfxPort_PadDriver_lvdsSpeed4',0,7,16
	.byte	'IfxPort_PadDriver_ttlSpeed1',0,8,16
	.byte	'IfxPort_PadDriver_ttlSpeed2',0,9,16
	.byte	'IfxPort_PadDriver_ttlSpeed3',0,10,16
	.byte	'IfxPort_PadDriver_ttlSpeed4',0,11,0,27
	.byte	'IfxPort_setPinPadDriver',0,7,134,3,17,1,1,1,1,5
	.byte	'port',0,7,134,3,48
	.word	9565
	.byte	5
	.byte	'pinIndex',0,7,134,3,60
	.word	614
	.byte	5
	.byte	'padDriver',0,7,134,3,88
	.word	19907
	.byte	0,28
	.byte	'IfxScuCcu_getBaud1Frequency',0,14,217,6,20
	.word	235
	.byte	1,1,1,1,25
	.word	10473
	.byte	26
	.word	10501
	.byte	6,0,25
	.word	10516
	.byte	26
	.word	10538
	.byte	6,0,25
	.word	10612
	.byte	26
	.word	10632
	.byte	26
	.word	10645
	.byte	26
	.word	10667
	.byte	17,29
	.word	10473
	.byte	26
	.word	10501
	.byte	30
	.word	10514
	.byte	0,6,0,0,25
	.word	17723
	.byte	26
	.word	17767
	.byte	26
	.word	17780
	.byte	6,0,25
	.word	17798
	.byte	26
	.word	17848
	.byte	6,0,25
	.word	17981
	.byte	26
	.word	18013
	.byte	6,0,25
	.word	18028
	.byte	26
	.word	18066
	.byte	6,0,25
	.word	18081
	.byte	26
	.word	18135
	.byte	6,0,25
	.word	18150
	.byte	26
	.word	18205
	.byte	6,0,25
	.word	18220
	.byte	26
	.word	18272
	.byte	26
	.word	18285
	.byte	6,0,25
	.word	18303
	.byte	26
	.word	18344
	.byte	6,0,25
	.word	18359
	.byte	26
	.word	18410
	.byte	6,0,25
	.word	18599
	.byte	26
	.word	18630
	.byte	26
	.word	18643
	.byte	6,0,25
	.word	18660
	.byte	26
	.word	18680
	.byte	6,0
.L287:
	.byte	15,15,78,9,1,16
	.byte	'IfxI2c_Index_none',0,127,16
	.byte	'IfxI2c_Index_0',0,0,0,31,7,190,1,9,8,13
	.byte	'port',0
	.word	9565
	.byte	4,2,35,0,13
	.byte	'pinIndex',0
	.word	614
	.byte	1,2,35,4,0,15,17,130,1,9,1,16
	.byte	'Ifx_RxSel_a',0,0,16
	.byte	'Ifx_RxSel_b',0,1,16
	.byte	'Ifx_RxSel_c',0,2,16
	.byte	'Ifx_RxSel_d',0,3,16
	.byte	'Ifx_RxSel_e',0,4,16
	.byte	'Ifx_RxSel_f',0,5,16
	.byte	'Ifx_RxSel_g',0,6,16
	.byte	'Ifx_RxSel_h',0,7,0,31,16,59,15,16,13
	.byte	'module',0
	.word	17378
	.byte	4,2,35,0,13
	.byte	'pin',0
	.word	20702
	.byte	8,2,35,4,13
	.byte	'inSelect',0
	.word	20741
	.byte	1,2,35,12,13
	.byte	'outSelect',0
	.word	9640
	.byte	1,2,35,13,0,20
	.word	20860
.L302:
	.byte	3
	.word	20932
	.byte	31,16,68,15,16,13
	.byte	'module',0
	.word	17378
	.byte	4,2,35,0,13
	.byte	'pin',0
	.word	20702
	.byte	8,2,35,4,13
	.byte	'inSelect',0
	.word	20741
	.byte	1,2,35,12,13
	.byte	'outSelect',0
	.word	9640
	.byte	1,2,35,13,0,20
	.word	20942
.L304:
	.byte	3
	.word	21014
	.byte	7
	.byte	'short int',0,2,5,32
	.byte	'__wchar_t',0,18,1,1
	.word	21024
	.byte	32
	.byte	'__size_t',0,18,1,1
	.word	439
	.byte	32
	.byte	'__ptrdiff_t',0,18,1,1
	.word	455
	.byte	33,1,3
	.word	21092
	.byte	32
	.byte	'__codeptr',0,18,1,1
	.word	21094
	.byte	32
	.byte	'boolean',0,19,101,29
	.word	614
	.byte	32
	.byte	'uint8',0,19,105,29
	.word	614
	.byte	32
	.byte	'uint16',0,19,109,29
	.word	631
	.byte	32
	.byte	'uint32',0,19,113,29
	.word	1581
	.byte	32
	.byte	'uint64',0,19,118,29
	.word	321
	.byte	32
	.byte	'sint16',0,19,126,29
	.word	21024
	.byte	7
	.byte	'long int',0,4,5,32
	.byte	'sint32',0,19,131,1,29
	.word	21207
	.byte	7
	.byte	'long long int',0,8,5,32
	.byte	'sint64',0,19,139,1,29
	.word	21235
	.byte	32
	.byte	'float32',0,19,168,1,29
	.word	235
	.byte	32
	.byte	'pvoid',0,17,57,28
	.word	353
	.byte	32
	.byte	'Ifx_TickTime',0,17,79,28
	.word	21235
	.byte	32
	.byte	'Ifx_SizeT',0,17,92,16
	.word	21024
	.byte	32
	.byte	'Ifx_Priority',0,17,103,16
	.word	631
	.byte	32
	.byte	'Ifx_RxSel',0,17,140,1,3
	.word	20741
	.byte	14
	.word	347
	.byte	3
	.word	21378
	.byte	31,17,143,1,9,8,13
	.byte	'module',0
	.word	21383
	.byte	4,2,35,0,13
	.byte	'index',0
	.word	21207
	.byte	4,2,35,4,0,32
	.byte	'IfxModule_IndexMap',0,17,147,1,3
	.word	21388
	.byte	32
	.byte	'Ifx_I2C_ACCEN0_Bits',0,13,79,3
	.word	15550
	.byte	32
	.byte	'Ifx_I2C_ACCEN1_Bits',0,13,85,3
	.word	16119
	.byte	32
	.byte	'Ifx_I2C_ADDRCFG_Bits',0,13,99,3
	.word	11564
	.byte	32
	.byte	'Ifx_I2C_BUSSTAT_Bits',0,13,107,3
	.word	11786
	.byte	32
	.byte	'Ifx_I2C_CLC1_Bits',0,13,121,3
	.word	10689
	.byte	32
	.byte	'Ifx_I2C_CLC_Bits',0,13,129,1,3
	.word	15201
	.byte	32
	.byte	'Ifx_I2C_ENDDCTRL_Bits',0,13,137,1,3
	.word	11142
	.byte	32
	.byte	'Ifx_I2C_ERRIRQSC_Bits',0,13,147,1,3
	.word	13245
	.byte	32
	.byte	'Ifx_I2C_ERRIRQSM_Bits',0,13,157,1,3
	.word	12909
	.byte	32
	.byte	'Ifx_I2C_ERRIRQSS_Bits',0,13,167,1,3
	.word	13077
	.byte	32
	.byte	'Ifx_I2C_FDIVCFG_Bits',0,13,176,1,3
	.word	11270
	.byte	32
	.byte	'Ifx_I2C_FDIVHIGHCFG_Bits',0,13,185,1,3
	.word	11415
	.byte	32
	.byte	'Ifx_I2C_FFSSTAT_Bits',0,13,192,1,3
	.word	12506
	.byte	32
	.byte	'Ifx_I2C_FIFOCFG_Bits',0,13,208,1,3
	.word	11905
	.byte	32
	.byte	'Ifx_I2C_GPCTL_Bits',0,13,215,1,3
	.word	15444
	.byte	32
	.byte	'Ifx_I2C_ICR_Bits',0,13,225,1,3
	.word	14635
	.byte	32
	.byte	'Ifx_I2C_ID_Bits',0,13,233,1,3
	.word	10910
	.byte	32
	.byte	'Ifx_I2C_IMSC_Bits',0,13,245,1,3
	.word	14208
	.byte	32
	.byte	'Ifx_I2C_ISR_Bits',0,13,129,2,3
	.word	14804
	.byte	32
	.byte	'Ifx_I2C_KRST0_Bits',0,13,137,2,3
	.word	16208
	.byte	32
	.byte	'Ifx_I2C_KRST1_Bits',0,13,144,2,3
	.word	16331
	.byte	32
	.byte	'Ifx_I2C_KRSTCLR_Bits',0,13,151,2,3
	.word	16435
	.byte	32
	.byte	'Ifx_I2C_MIS_Bits',0,13,163,2,3
	.word	14422
	.byte	32
	.byte	'Ifx_I2C_MODID_Bits',0,13,171,2,3
	.word	15319
	.byte	32
	.byte	'Ifx_I2C_MRPSCTRL_Bits',0,13,178,2,3
	.word	12183
	.byte	32
	.byte	'Ifx_I2C_PIRQSC_Bits',0,13,191,2,3
	.word	13801
	.byte	32
	.byte	'Ifx_I2C_PIRQSM_Bits',0,13,204,2,3
	.word	13413
	.byte	32
	.byte	'Ifx_I2C_PIRQSS_Bits',0,13,217,2,3
	.word	13607
	.byte	32
	.byte	'Ifx_I2C_RIS_Bits',0,13,229,2,3
	.word	13995
	.byte	32
	.byte	'Ifx_I2C_RPSSTAT_Bits',0,13,236,2,3
	.word	12292
	.byte	32
	.byte	'Ifx_I2C_RUNCTRL_Bits',0,13,243,2,3
	.word	11036
	.byte	32
	.byte	'Ifx_I2C_RXD_Bits',0,13,249,2,3
	.word	15121
	.byte	32
	.byte	'Ifx_I2C_TIMCFG_Bits',0,13,135,3,3
	.word	12612
	.byte	32
	.byte	'Ifx_I2C_TPSCTRL_Bits',0,13,142,3,3
	.word	12399
	.byte	32
	.byte	'Ifx_I2C_TXD_Bits',0,13,148,3,3
	.word	15030
	.byte	32
	.byte	'Ifx_I2C_ACCEN0',0,13,161,3,3
	.word	16079
	.byte	32
	.byte	'Ifx_I2C_ACCEN1',0,13,169,3,3
	.word	16168
	.byte	32
	.byte	'Ifx_I2C_ADDRCFG',0,13,177,3,3
	.word	11746
	.byte	32
	.byte	'Ifx_I2C_BUSSTAT',0,13,185,3,3
	.word	11865
	.byte	32
	.byte	'Ifx_I2C_CLC',0,13,193,3,3
	.word	15279
	.byte	32
	.byte	'Ifx_I2C_CLC1',0,13,201,3,3
	.word	10870
	.byte	32
	.byte	'Ifx_I2C_ENDDCTRL',0,13,209,3,3
	.word	11230
	.byte	32
	.byte	'Ifx_I2C_ERRIRQSC',0,13,217,3,3
	.word	13373
	.byte	32
	.byte	'Ifx_I2C_ERRIRQSM',0,13,225,3,3
	.word	13037
	.byte	32
	.byte	'Ifx_I2C_ERRIRQSS',0,13,233,3,3
	.word	13205
	.byte	32
	.byte	'Ifx_I2C_FDIVCFG',0,13,241,3,3
	.word	11375
	.byte	32
	.byte	'Ifx_I2C_FDIVHIGHCFG',0,13,249,3,3
	.word	11524
	.byte	32
	.byte	'Ifx_I2C_FFSSTAT',0,13,129,4,3
	.word	12572
	.byte	32
	.byte	'Ifx_I2C_FIFOCFG',0,13,137,4,3
	.word	12143
	.byte	32
	.byte	'Ifx_I2C_GPCTL',0,13,145,4,3
	.word	15510
	.byte	32
	.byte	'Ifx_I2C_ICR',0,13,153,4,3
	.word	14764
	.byte	32
	.byte	'Ifx_I2C_ID',0,13,161,4,3
	.word	10996
	.byte	32
	.byte	'Ifx_I2C_IMSC',0,13,169,4,3
	.word	14382
	.byte	32
	.byte	'Ifx_I2C_ISR',0,13,177,4,3
	.word	14977
	.byte	32
	.byte	'Ifx_I2C_KRST0',0,13,185,4,3
	.word	16291
	.byte	32
	.byte	'Ifx_I2C_KRST1',0,13,193,4,3
	.word	16395
	.byte	32
	.byte	'Ifx_I2C_KRSTCLR',0,13,201,4,3
	.word	16501
	.byte	32
	.byte	'Ifx_I2C_MIS',0,13,209,4,3
	.word	14595
	.byte	32
	.byte	'Ifx_I2C_MODID',0,13,217,4,3
	.word	15404
	.byte	32
	.byte	'Ifx_I2C_MRPSCTRL',0,13,225,4,3
	.word	12252
	.byte	32
	.byte	'Ifx_I2C_PIRQSC',0,13,233,4,3
	.word	13955
	.byte	32
	.byte	'Ifx_I2C_PIRQSM',0,13,241,4,3
	.word	13567
	.byte	32
	.byte	'Ifx_I2C_PIRQSS',0,13,249,4,3
	.word	13761
	.byte	32
	.byte	'Ifx_I2C_RIS',0,13,129,5,3
	.word	14168
	.byte	32
	.byte	'Ifx_I2C_RPSSTAT',0,13,137,5,3
	.word	12359
	.byte	32
	.byte	'Ifx_I2C_RUNCTRL',0,13,145,5,3
	.word	11102
	.byte	32
	.byte	'Ifx_I2C_RXD',0,13,153,5,3
	.word	15161
	.byte	32
	.byte	'Ifx_I2C_TIMCFG',0,13,161,5,3
	.word	12860
	.byte	32
	.byte	'Ifx_I2C_TPSCTRL',0,13,169,5,3
	.word	12466
	.byte	32
	.byte	'Ifx_I2C_TXD',0,13,177,5,3
	.word	15070
	.byte	14
	.word	16552
	.byte	32
	.byte	'Ifx_I2C',0,13,235,5,3
	.word	23286
	.byte	32
	.byte	'IfxI2c_Index',0,15,82,3
	.word	20659
	.byte	18,8
	.word	21388
	.byte	19,0,0,20
	.word	23329
	.byte	34
	.byte	'IfxI2c_cfg_indexMap',0,15,93,41
	.word	23338
	.byte	1,1,15,20,236,10,9,1,16
	.byte	'IfxScu_CCUCON0_CLKSEL_fBack',0,0,16
	.byte	'IfxScu_CCUCON0_CLKSEL_fPll',0,1,0,32
	.byte	'IfxScu_CCUCON0_CLKSEL',0,20,240,10,3
	.word	23373
	.byte	15,20,250,10,9,1,16
	.byte	'IfxScu_WDTCON1_IR_divBy16384',0,0,16
	.byte	'IfxScu_WDTCON1_IR_divBy256',0,1,16
	.byte	'IfxScu_WDTCON1_IR_divBy64',0,2,0,32
	.byte	'IfxScu_WDTCON1_IR',0,20,255,10,3
	.word	23470
	.byte	10
	.byte	'_Ifx_SCU_ACCEN0_Bits',0,4,45,16,4,11
	.byte	'EN0',0,1
	.word	614
	.byte	1,7,2,35,0,11
	.byte	'EN1',0,1
	.word	614
	.byte	1,6,2,35,0,11
	.byte	'EN2',0,1
	.word	614
	.byte	1,5,2,35,0,11
	.byte	'EN3',0,1
	.word	614
	.byte	1,4,2,35,0,11
	.byte	'EN4',0,1
	.word	614
	.byte	1,3,2,35,0,11
	.byte	'EN5',0,1
	.word	614
	.byte	1,2,2,35,0,11
	.byte	'EN6',0,1
	.word	614
	.byte	1,1,2,35,0,11
	.byte	'EN7',0,1
	.word	614
	.byte	1,0,2,35,0,11
	.byte	'EN8',0,1
	.word	614
	.byte	1,7,2,35,1,11
	.byte	'EN9',0,1
	.word	614
	.byte	1,6,2,35,1,11
	.byte	'EN10',0,1
	.word	614
	.byte	1,5,2,35,1,11
	.byte	'EN11',0,1
	.word	614
	.byte	1,4,2,35,1,11
	.byte	'EN12',0,1
	.word	614
	.byte	1,3,2,35,1,11
	.byte	'EN13',0,1
	.word	614
	.byte	1,2,2,35,1,11
	.byte	'EN14',0,1
	.word	614
	.byte	1,1,2,35,1,11
	.byte	'EN15',0,1
	.word	614
	.byte	1,0,2,35,1,11
	.byte	'EN16',0,1
	.word	614
	.byte	1,7,2,35,2,11
	.byte	'EN17',0,1
	.word	614
	.byte	1,6,2,35,2,11
	.byte	'EN18',0,1
	.word	614
	.byte	1,5,2,35,2,11
	.byte	'EN19',0,1
	.word	614
	.byte	1,4,2,35,2,11
	.byte	'EN20',0,1
	.word	614
	.byte	1,3,2,35,2,11
	.byte	'EN21',0,1
	.word	614
	.byte	1,2,2,35,2,11
	.byte	'EN22',0,1
	.word	614
	.byte	1,1,2,35,2,11
	.byte	'EN23',0,1
	.word	614
	.byte	1,0,2,35,2,11
	.byte	'EN24',0,1
	.word	614
	.byte	1,7,2,35,3,11
	.byte	'EN25',0,1
	.word	614
	.byte	1,6,2,35,3,11
	.byte	'EN26',0,1
	.word	614
	.byte	1,5,2,35,3,11
	.byte	'EN27',0,1
	.word	614
	.byte	1,4,2,35,3,11
	.byte	'EN28',0,1
	.word	614
	.byte	1,3,2,35,3,11
	.byte	'EN29',0,1
	.word	614
	.byte	1,2,2,35,3,11
	.byte	'EN30',0,1
	.word	614
	.byte	1,1,2,35,3,11
	.byte	'EN31',0,1
	.word	614
	.byte	1,0,2,35,3,0,32
	.byte	'Ifx_SCU_ACCEN0_Bits',0,4,79,3
	.word	23592
	.byte	10
	.byte	'_Ifx_SCU_ACCEN1_Bits',0,4,82,16,4,11
	.byte	'reserved_0',0,4
	.word	439
	.byte	32,0,2,35,0,0,32
	.byte	'Ifx_SCU_ACCEN1_Bits',0,4,85,3
	.word	24149
	.byte	10
	.byte	'_Ifx_SCU_ARSTDIS_Bits',0,4,88,16,4,11
	.byte	'STM0DIS',0,1
	.word	614
	.byte	1,7,2,35,0,11
	.byte	'STM1DIS',0,1
	.word	614
	.byte	1,6,2,35,0,11
	.byte	'STM2DIS',0,1
	.word	614
	.byte	1,5,2,35,0,11
	.byte	'reserved_3',0,4
	.word	439
	.byte	29,0,2,35,0,0,32
	.byte	'Ifx_SCU_ARSTDIS_Bits',0,4,94,3
	.word	24226
	.byte	10
	.byte	'_Ifx_SCU_CCUCON0_Bits',0,4,97,16,4,11
	.byte	'BAUD1DIV',0,1
	.word	614
	.byte	4,4,2,35,0,11
	.byte	'BAUD2DIV',0,1
	.word	614
	.byte	4,0,2,35,0,11
	.byte	'SRIDIV',0,1
	.word	614
	.byte	4,4,2,35,1,11
	.byte	'LPDIV',0,1
	.word	614
	.byte	4,0,2,35,1,11
	.byte	'SPBDIV',0,1
	.word	614
	.byte	4,4,2,35,2,11
	.byte	'FSI2DIV',0,1
	.word	614
	.byte	2,2,2,35,2,11
	.byte	'reserved_22',0,1
	.word	614
	.byte	2,0,2,35,2,11
	.byte	'FSIDIV',0,1
	.word	614
	.byte	2,6,2,35,3,11
	.byte	'reserved_26',0,1
	.word	614
	.byte	2,4,2,35,3,11
	.byte	'CLKSEL',0,1
	.word	614
	.byte	2,2,2,35,3,11
	.byte	'UP',0,1
	.word	614
	.byte	1,1,2,35,3,11
	.byte	'LCK',0,1
	.word	614
	.byte	1,0,2,35,3,0,32
	.byte	'Ifx_SCU_CCUCON0_Bits',0,4,111,3
	.word	24362
	.byte	10
	.byte	'_Ifx_SCU_CCUCON1_Bits',0,4,114,16,4,11
	.byte	'CANDIV',0,1
	.word	614
	.byte	4,4,2,35,0,11
	.byte	'ERAYDIV',0,1
	.word	614
	.byte	4,0,2,35,0,11
	.byte	'STMDIV',0,1
	.word	614
	.byte	4,4,2,35,1,11
	.byte	'GTMDIV',0,1
	.word	614
	.byte	4,0,2,35,1,11
	.byte	'ETHDIV',0,1
	.word	614
	.byte	4,4,2,35,2,11
	.byte	'ASCLINFDIV',0,1
	.word	614
	.byte	4,0,2,35,2,11
	.byte	'ASCLINSDIV',0,1
	.word	614
	.byte	4,4,2,35,3,11
	.byte	'INSEL',0,1
	.word	614
	.byte	2,2,2,35,3,11
	.byte	'UP',0,1
	.word	614
	.byte	1,1,2,35,3,11
	.byte	'LCK',0,1
	.word	614
	.byte	1,0,2,35,3,0,32
	.byte	'Ifx_SCU_CCUCON1_Bits',0,4,126,3
	.word	24642
	.byte	10
	.byte	'_Ifx_SCU_CCUCON2_Bits',0,4,129,1,16,4,11
	.byte	'BBBDIV',0,1
	.word	614
	.byte	4,4,2,35,0,11
	.byte	'reserved_4',0,4
	.word	439
	.byte	26,2,2,35,0,11
	.byte	'UP',0,1
	.word	614
	.byte	1,1,2,35,3,11
	.byte	'LCK',0,1
	.word	614
	.byte	1,0,2,35,3,0,32
	.byte	'Ifx_SCU_CCUCON2_Bits',0,4,135,1,3
	.word	24880
	.byte	10
	.byte	'_Ifx_SCU_CCUCON3_Bits',0,4,138,1,16,4,11
	.byte	'PLLDIV',0,1
	.word	614
	.byte	6,2,2,35,0,11
	.byte	'PLLSEL',0,1
	.word	614
	.byte	2,0,2,35,0,11
	.byte	'PLLERAYDIV',0,1
	.word	614
	.byte	6,2,2,35,1,11
	.byte	'PLLERAYSEL',0,1
	.word	614
	.byte	2,0,2,35,1,11
	.byte	'SRIDIV',0,1
	.word	614
	.byte	6,2,2,35,2,11
	.byte	'SRISEL',0,1
	.word	614
	.byte	2,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	614
	.byte	5,3,2,35,3,11
	.byte	'SLCK',0,1
	.word	614
	.byte	1,2,2,35,3,11
	.byte	'UP',0,1
	.word	614
	.byte	1,1,2,35,3,11
	.byte	'LCK',0,1
	.word	614
	.byte	1,0,2,35,3,0,32
	.byte	'Ifx_SCU_CCUCON3_Bits',0,4,150,1,3
	.word	25008
	.byte	10
	.byte	'_Ifx_SCU_CCUCON4_Bits',0,4,153,1,16,4,11
	.byte	'SPBDIV',0,1
	.word	614
	.byte	6,2,2,35,0,11
	.byte	'SPBSEL',0,1
	.word	614
	.byte	2,0,2,35,0,11
	.byte	'GTMDIV',0,1
	.word	614
	.byte	6,2,2,35,1,11
	.byte	'GTMSEL',0,1
	.word	614
	.byte	2,0,2,35,1,11
	.byte	'STMDIV',0,1
	.word	614
	.byte	6,2,2,35,2,11
	.byte	'STMSEL',0,1
	.word	614
	.byte	2,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	614
	.byte	5,3,2,35,3,11
	.byte	'SLCK',0,1
	.word	614
	.byte	1,2,2,35,3,11
	.byte	'UP',0,1
	.word	614
	.byte	1,1,2,35,3,11
	.byte	'LCK',0,1
	.word	614
	.byte	1,0,2,35,3,0,32
	.byte	'Ifx_SCU_CCUCON4_Bits',0,4,165,1,3
	.word	25251
	.byte	10
	.byte	'_Ifx_SCU_CCUCON5_Bits',0,4,168,1,16,4,11
	.byte	'MAXDIV',0,1
	.word	614
	.byte	4,4,2,35,0,11
	.byte	'reserved_4',0,4
	.word	439
	.byte	26,2,2,35,0,11
	.byte	'UP',0,1
	.word	614
	.byte	1,1,2,35,3,11
	.byte	'LCK',0,1
	.word	614
	.byte	1,0,2,35,3,0,32
	.byte	'Ifx_SCU_CCUCON5_Bits',0,4,174,1,3
	.word	25486
	.byte	10
	.byte	'_Ifx_SCU_CCUCON6_Bits',0,4,177,1,16,4,11
	.byte	'CPU0DIV',0,1
	.word	614
	.byte	6,2,2,35,0,11
	.byte	'reserved_6',0,4
	.word	439
	.byte	26,0,2,35,0,0,32
	.byte	'Ifx_SCU_CCUCON6_Bits',0,4,181,1,3
	.word	25614
	.byte	10
	.byte	'_Ifx_SCU_CCUCON7_Bits',0,4,184,1,16,4,11
	.byte	'CPU1DIV',0,1
	.word	614
	.byte	6,2,2,35,0,11
	.byte	'reserved_6',0,4
	.word	439
	.byte	26,0,2,35,0,0,32
	.byte	'Ifx_SCU_CCUCON7_Bits',0,4,188,1,3
	.word	25714
	.byte	10
	.byte	'_Ifx_SCU_CHIPID_Bits',0,4,191,1,16,4,11
	.byte	'CHREV',0,1
	.word	614
	.byte	6,2,2,35,0,11
	.byte	'CHTEC',0,1
	.word	614
	.byte	2,0,2,35,0,11
	.byte	'CHID',0,1
	.word	614
	.byte	8,0,2,35,1,11
	.byte	'EEA',0,1
	.word	614
	.byte	1,7,2,35,2,11
	.byte	'UCODE',0,1
	.word	614
	.byte	7,0,2,35,2,11
	.byte	'FSIZE',0,1
	.word	614
	.byte	4,4,2,35,3,11
	.byte	'SP',0,1
	.word	614
	.byte	2,2,2,35,3,11
	.byte	'SEC',0,1
	.word	614
	.byte	1,1,2,35,3,11
	.byte	'reserved_31',0,1
	.word	614
	.byte	1,0,2,35,3,0,32
	.byte	'Ifx_SCU_CHIPID_Bits',0,4,202,1,3
	.word	25814
	.byte	10
	.byte	'_Ifx_SCU_DTSCON_Bits',0,4,205,1,16,4,11
	.byte	'PWD',0,1
	.word	614
	.byte	1,7,2,35,0,11
	.byte	'START',0,1
	.word	614
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	614
	.byte	2,4,2,35,0,11
	.byte	'CAL',0,4
	.word	439
	.byte	20,8,2,35,0,11
	.byte	'reserved_24',0,1
	.word	614
	.byte	7,1,2,35,3,11
	.byte	'SLCK',0,1
	.word	614
	.byte	1,0,2,35,3,0,32
	.byte	'Ifx_SCU_DTSCON_Bits',0,4,213,1,3
	.word	26022
	.byte	10
	.byte	'_Ifx_SCU_DTSLIM_Bits',0,4,216,1,16,4,11
	.byte	'LOWER',0,2
	.word	631
	.byte	10,6,2,35,0,11
	.byte	'reserved_10',0,1
	.word	614
	.byte	5,1,2,35,1,11
	.byte	'LLU',0,1
	.word	614
	.byte	1,0,2,35,1,11
	.byte	'UPPER',0,2
	.word	631
	.byte	10,6,2,35,2,11
	.byte	'reserved_26',0,1
	.word	614
	.byte	4,2,2,35,3,11
	.byte	'SLCK',0,1
	.word	614
	.byte	1,1,2,35,3,11
	.byte	'UOF',0,1
	.word	614
	.byte	1,0,2,35,3,0,32
	.byte	'Ifx_SCU_DTSLIM_Bits',0,4,225,1,3
	.word	26187
	.byte	10
	.byte	'_Ifx_SCU_DTSSTAT_Bits',0,4,228,1,16,4,11
	.byte	'RESULT',0,2
	.word	631
	.byte	10,6,2,35,0,11
	.byte	'reserved_10',0,1
	.word	614
	.byte	4,2,2,35,1,11
	.byte	'RDY',0,1
	.word	614
	.byte	1,1,2,35,1,11
	.byte	'BUSY',0,1
	.word	614
	.byte	1,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	631
	.byte	16,0,2,35,2,0,32
	.byte	'Ifx_SCU_DTSSTAT_Bits',0,4,235,1,3
	.word	26370
	.byte	10
	.byte	'_Ifx_SCU_EICR_Bits',0,4,238,1,16,4,11
	.byte	'reserved_0',0,1
	.word	614
	.byte	4,4,2,35,0,11
	.byte	'EXIS0',0,1
	.word	614
	.byte	3,1,2,35,0,11
	.byte	'reserved_7',0,1
	.word	614
	.byte	1,0,2,35,0,11
	.byte	'FEN0',0,1
	.word	614
	.byte	1,7,2,35,1,11
	.byte	'REN0',0,1
	.word	614
	.byte	1,6,2,35,1,11
	.byte	'LDEN0',0,1
	.word	614
	.byte	1,5,2,35,1,11
	.byte	'EIEN0',0,1
	.word	614
	.byte	1,4,2,35,1,11
	.byte	'INP0',0,1
	.word	614
	.byte	3,1,2,35,1,11
	.byte	'reserved_15',0,4
	.word	439
	.byte	5,12,2,35,0,11
	.byte	'EXIS1',0,1
	.word	614
	.byte	3,1,2,35,2,11
	.byte	'reserved_23',0,1
	.word	614
	.byte	1,0,2,35,2,11
	.byte	'FEN1',0,1
	.word	614
	.byte	1,7,2,35,3,11
	.byte	'REN1',0,1
	.word	614
	.byte	1,6,2,35,3,11
	.byte	'LDEN1',0,1
	.word	614
	.byte	1,5,2,35,3,11
	.byte	'EIEN1',0,1
	.word	614
	.byte	1,4,2,35,3,11
	.byte	'INP1',0,1
	.word	614
	.byte	3,1,2,35,3,11
	.byte	'reserved_31',0,1
	.word	614
	.byte	1,0,2,35,3,0,32
	.byte	'Ifx_SCU_EICR_Bits',0,4,129,2,3
	.word	26524
	.byte	10
	.byte	'_Ifx_SCU_EIFR_Bits',0,4,132,2,16,4,11
	.byte	'INTF0',0,1
	.word	614
	.byte	1,7,2,35,0,11
	.byte	'INTF1',0,1
	.word	614
	.byte	1,6,2,35,0,11
	.byte	'INTF2',0,1
	.word	614
	.byte	1,5,2,35,0,11
	.byte	'INTF3',0,1
	.word	614
	.byte	1,4,2,35,0,11
	.byte	'INTF4',0,1
	.word	614
	.byte	1,3,2,35,0,11
	.byte	'INTF5',0,1
	.word	614
	.byte	1,2,2,35,0,11
	.byte	'INTF6',0,1
	.word	614
	.byte	1,1,2,35,0,11
	.byte	'INTF7',0,1
	.word	614
	.byte	1,0,2,35,0,11
	.byte	'reserved_8',0,4
	.word	439
	.byte	24,0,2,35,0,0,32
	.byte	'Ifx_SCU_EIFR_Bits',0,4,143,2,3
	.word	26888
	.byte	10
	.byte	'_Ifx_SCU_EMSR_Bits',0,4,146,2,16,4,11
	.byte	'POL',0,1
	.word	614
	.byte	1,7,2,35,0,11
	.byte	'MODE',0,1
	.word	614
	.byte	1,6,2,35,0,11
	.byte	'ENON',0,1
	.word	614
	.byte	1,5,2,35,0,11
	.byte	'PSEL',0,1
	.word	614
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,2
	.word	631
	.byte	12,0,2,35,0,11
	.byte	'EMSF',0,1
	.word	614
	.byte	1,7,2,35,2,11
	.byte	'SEMSF',0,1
	.word	614
	.byte	1,6,2,35,2,11
	.byte	'reserved_18',0,1
	.word	614
	.byte	6,0,2,35,2,11
	.byte	'EMSFM',0,1
	.word	614
	.byte	2,6,2,35,3,11
	.byte	'SEMSFM',0,1
	.word	614
	.byte	2,4,2,35,3,11
	.byte	'reserved_28',0,1
	.word	614
	.byte	4,0,2,35,3,0,32
	.byte	'Ifx_SCU_EMSR_Bits',0,4,159,2,3
	.word	27099
	.byte	10
	.byte	'_Ifx_SCU_ESRCFG_Bits',0,4,162,2,16,4,11
	.byte	'reserved_0',0,1
	.word	614
	.byte	7,1,2,35,0,11
	.byte	'EDCON',0,2
	.word	631
	.byte	2,7,2,35,0,11
	.byte	'reserved_9',0,4
	.word	439
	.byte	23,0,2,35,0,0,32
	.byte	'Ifx_SCU_ESRCFG_Bits',0,4,167,2,3
	.word	27351
	.byte	10
	.byte	'_Ifx_SCU_ESROCFG_Bits',0,4,170,2,16,4,11
	.byte	'ARI',0,1
	.word	614
	.byte	1,7,2,35,0,11
	.byte	'ARC',0,1
	.word	614
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,4
	.word	439
	.byte	30,0,2,35,0,0,32
	.byte	'Ifx_SCU_ESROCFG_Bits',0,4,175,2,3
	.word	27469
	.byte	10
	.byte	'_Ifx_SCU_EVR13CON_Bits',0,4,178,2,16,4,11
	.byte	'reserved_0',0,4
	.word	439
	.byte	28,4,2,35,0,11
	.byte	'EVR13OFF',0,1
	.word	614
	.byte	1,3,2,35,3,11
	.byte	'BPEVR13OFF',0,1
	.word	614
	.byte	1,2,2,35,3,11
	.byte	'reserved_30',0,1
	.word	614
	.byte	1,1,2,35,3,11
	.byte	'LCK',0,1
	.word	614
	.byte	1,0,2,35,3,0,32
	.byte	'Ifx_SCU_EVR13CON_Bits',0,4,185,2,3
	.word	27580
	.byte	10
	.byte	'_Ifx_SCU_EVR33CON_Bits',0,4,188,2,16,4,11
	.byte	'reserved_0',0,4
	.word	439
	.byte	28,4,2,35,0,11
	.byte	'EVR33OFF',0,1
	.word	614
	.byte	1,3,2,35,3,11
	.byte	'BPEVR33OFF',0,1
	.word	614
	.byte	1,2,2,35,3,11
	.byte	'reserved_30',0,1
	.word	614
	.byte	1,1,2,35,3,11
	.byte	'LCK',0,1
	.word	614
	.byte	1,0,2,35,3,0,32
	.byte	'Ifx_SCU_EVR33CON_Bits',0,4,195,2,3
	.word	27743
	.byte	10
	.byte	'_Ifx_SCU_EVRADCSTAT_Bits',0,4,198,2,16,4,11
	.byte	'ADC13V',0,1
	.word	614
	.byte	8,0,2,35,0,11
	.byte	'ADC33V',0,1
	.word	614
	.byte	8,0,2,35,1,11
	.byte	'ADCSWDV',0,1
	.word	614
	.byte	8,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	614
	.byte	7,1,2,35,3,11
	.byte	'VAL',0,1
	.word	614
	.byte	1,0,2,35,3,0,32
	.byte	'Ifx_SCU_EVRADCSTAT_Bits',0,4,205,2,3
	.word	27906
	.byte	10
	.byte	'_Ifx_SCU_EVRDVSTAT_Bits',0,4,208,2,16,4,11
	.byte	'DVS13TRIM',0,1
	.word	614
	.byte	8,0,2,35,0,11
	.byte	'reserved_8',0,1
	.word	614
	.byte	8,0,2,35,1,11
	.byte	'DVS33TRIM',0,1
	.word	614
	.byte	8,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	614
	.byte	7,1,2,35,3,11
	.byte	'VAL',0,1
	.word	614
	.byte	1,0,2,35,3,0,32
	.byte	'Ifx_SCU_EVRDVSTAT_Bits',0,4,215,2,3
	.word	28064
	.byte	10
	.byte	'_Ifx_SCU_EVRMONCTRL_Bits',0,4,218,2,16,4,11
	.byte	'EVR13OVMOD',0,1
	.word	614
	.byte	2,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	614
	.byte	2,4,2,35,0,11
	.byte	'EVR13UVMOD',0,1
	.word	614
	.byte	2,2,2,35,0,11
	.byte	'reserved_6',0,1
	.word	614
	.byte	2,0,2,35,0,11
	.byte	'EVR33OVMOD',0,1
	.word	614
	.byte	2,6,2,35,1,11
	.byte	'reserved_10',0,1
	.word	614
	.byte	2,4,2,35,1,11
	.byte	'EVR33UVMOD',0,1
	.word	614
	.byte	2,2,2,35,1,11
	.byte	'reserved_14',0,1
	.word	614
	.byte	2,0,2,35,1,11
	.byte	'SWDOVMOD',0,1
	.word	614
	.byte	2,6,2,35,2,11
	.byte	'reserved_18',0,1
	.word	614
	.byte	2,4,2,35,2,11
	.byte	'SWDUVMOD',0,1
	.word	614
	.byte	2,2,2,35,2,11
	.byte	'reserved_22',0,2
	.word	631
	.byte	10,0,2,35,2,0,32
	.byte	'Ifx_SCU_EVRMONCTRL_Bits',0,4,232,2,3
	.word	28229
	.byte	10
	.byte	'_Ifx_SCU_EVROSCCTRL_Bits',0,4,235,2,16,4,11
	.byte	'OSCTRIM',0,2
	.word	631
	.byte	10,6,2,35,0,11
	.byte	'OSCPTAT',0,1
	.word	614
	.byte	6,0,2,35,1,11
	.byte	'OSCANASEL',0,1
	.word	614
	.byte	4,4,2,35,2,11
	.byte	'HPBGTRIM',0,2
	.word	631
	.byte	7,5,2,35,2,11
	.byte	'HPBGCLKEN',0,1
	.word	614
	.byte	1,4,2,35,3,11
	.byte	'OSC3V3',0,1
	.word	614
	.byte	1,3,2,35,3,11
	.byte	'reserved_29',0,1
	.word	614
	.byte	2,1,2,35,3,11
	.byte	'LCK',0,1
	.word	614
	.byte	1,0,2,35,3,0,32
	.byte	'Ifx_SCU_EVROSCCTRL_Bits',0,4,245,2,3
	.word	28558
	.byte	10
	.byte	'_Ifx_SCU_EVROVMON_Bits',0,4,248,2,16,4,11
	.byte	'EVR13OVVAL',0,1
	.word	614
	.byte	8,0,2,35,0,11
	.byte	'EVR33OVVAL',0,1
	.word	614
	.byte	8,0,2,35,1,11
	.byte	'SWDOVVAL',0,1
	.word	614
	.byte	8,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	614
	.byte	7,1,2,35,3,11
	.byte	'LCK',0,1
	.word	614
	.byte	1,0,2,35,3,0,32
	.byte	'Ifx_SCU_EVROVMON_Bits',0,4,255,2,3
	.word	28779
	.byte	10
	.byte	'_Ifx_SCU_EVRRSTCON_Bits',0,4,130,3,16,4,11
	.byte	'RST13TRIM',0,1
	.word	614
	.byte	8,0,2,35,0,11
	.byte	'reserved_8',0,4
	.word	439
	.byte	16,8,2,35,0,11
	.byte	'RST13OFF',0,1
	.word	614
	.byte	1,7,2,35,3,11
	.byte	'BPRST13OFF',0,1
	.word	614
	.byte	1,6,2,35,3,11
	.byte	'RST33OFF',0,1
	.word	614
	.byte	1,5,2,35,3,11
	.byte	'BPRST33OFF',0,1
	.word	614
	.byte	1,4,2,35,3,11
	.byte	'RSTSWDOFF',0,1
	.word	614
	.byte	1,3,2,35,3,11
	.byte	'BPRSTSWDOFF',0,1
	.word	614
	.byte	1,2,2,35,3,11
	.byte	'reserved_30',0,1
	.word	614
	.byte	1,1,2,35,3,11
	.byte	'LCK',0,1
	.word	614
	.byte	1,0,2,35,3,0,32
	.byte	'Ifx_SCU_EVRRSTCON_Bits',0,4,142,3,3
	.word	28942
	.byte	10
	.byte	'_Ifx_SCU_EVRSDCOEFF1_Bits',0,4,145,3,16,4,11
	.byte	'SD5P',0,1
	.word	614
	.byte	8,0,2,35,0,11
	.byte	'SD5I',0,1
	.word	614
	.byte	8,0,2,35,1,11
	.byte	'SD5D',0,1
	.word	614
	.byte	8,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	614
	.byte	7,1,2,35,3,11
	.byte	'LCK',0,1
	.word	614
	.byte	1,0,2,35,3,0,32
	.byte	'Ifx_SCU_EVRSDCOEFF1_Bits',0,4,152,3,3
	.word	29214
	.byte	10
	.byte	'_Ifx_SCU_EVRSDCOEFF2_Bits',0,4,155,3,16,4,11
	.byte	'SD33P',0,1
	.word	614
	.byte	8,0,2,35,0,11
	.byte	'SD33I',0,1
	.word	614
	.byte	8,0,2,35,1,11
	.byte	'SD33D',0,1
	.word	614
	.byte	8,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	614
	.byte	7,1,2,35,3,11
	.byte	'LCK',0,1
	.word	614
	.byte	1,0,2,35,3,0,32
	.byte	'Ifx_SCU_EVRSDCOEFF2_Bits',0,4,162,3,3
	.word	29367
	.byte	10
	.byte	'_Ifx_SCU_EVRSDCOEFF3_Bits',0,4,165,3,16,4,11
	.byte	'CT5REG0',0,1
	.word	614
	.byte	8,0,2,35,0,11
	.byte	'CT5REG1',0,1
	.word	614
	.byte	8,0,2,35,1,11
	.byte	'CT5REG2',0,1
	.word	614
	.byte	8,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	614
	.byte	7,1,2,35,3,11
	.byte	'LCK',0,1
	.word	614
	.byte	1,0,2,35,3,0,32
	.byte	'Ifx_SCU_EVRSDCOEFF3_Bits',0,4,172,3,3
	.word	29523
	.byte	10
	.byte	'_Ifx_SCU_EVRSDCOEFF4_Bits',0,4,175,3,16,4,11
	.byte	'CT5REG3',0,1
	.word	614
	.byte	8,0,2,35,0,11
	.byte	'CT5REG4',0,1
	.word	614
	.byte	8,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	631
	.byte	15,1,2,35,2,11
	.byte	'LCK',0,1
	.word	614
	.byte	1,0,2,35,3,0,32
	.byte	'Ifx_SCU_EVRSDCOEFF4_Bits',0,4,181,3,3
	.word	29685
	.byte	10
	.byte	'_Ifx_SCU_EVRSDCOEFF5_Bits',0,4,184,3,16,4,11
	.byte	'CT33REG0',0,1
	.word	614
	.byte	8,0,2,35,0,11
	.byte	'CT33REG1',0,1
	.word	614
	.byte	8,0,2,35,1,11
	.byte	'CT33REG2',0,1
	.word	614
	.byte	8,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	614
	.byte	7,1,2,35,3,11
	.byte	'LCK',0,1
	.word	614
	.byte	1,0,2,35,3,0,32
	.byte	'Ifx_SCU_EVRSDCOEFF5_Bits',0,4,191,3,3
	.word	29828
	.byte	10
	.byte	'_Ifx_SCU_EVRSDCOEFF6_Bits',0,4,194,3,16,4,11
	.byte	'CT33REG3',0,1
	.word	614
	.byte	8,0,2,35,0,11
	.byte	'CT33REG4',0,1
	.word	614
	.byte	8,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	631
	.byte	15,1,2,35,2,11
	.byte	'LCK',0,1
	.word	614
	.byte	1,0,2,35,3,0,32
	.byte	'Ifx_SCU_EVRSDCOEFF6_Bits',0,4,200,3,3
	.word	29993
	.byte	10
	.byte	'_Ifx_SCU_EVRSDCTRL1_Bits',0,4,203,3,16,4,11
	.byte	'SDFREQSPRD',0,2
	.word	631
	.byte	16,0,2,35,0,11
	.byte	'SDFREQ',0,1
	.word	614
	.byte	8,0,2,35,2,11
	.byte	'SDSTEP',0,1
	.word	614
	.byte	4,4,2,35,3,11
	.byte	'reserved_28',0,1
	.word	614
	.byte	2,2,2,35,3,11
	.byte	'SDSAMPLE',0,1
	.word	614
	.byte	1,1,2,35,3,11
	.byte	'LCK',0,1
	.word	614
	.byte	1,0,2,35,3,0,32
	.byte	'Ifx_SCU_EVRSDCTRL1_Bits',0,4,211,3,3
	.word	30138
	.byte	10
	.byte	'_Ifx_SCU_EVRSDCTRL2_Bits',0,4,214,3,16,4,11
	.byte	'DRVP',0,1
	.word	614
	.byte	8,0,2,35,0,11
	.byte	'SDMINMAXDC',0,1
	.word	614
	.byte	8,0,2,35,1,11
	.byte	'DRVN',0,1
	.word	614
	.byte	8,0,2,35,2,11
	.byte	'SDLUT',0,1
	.word	614
	.byte	6,2,2,35,3,11
	.byte	'reserved_30',0,1
	.word	614
	.byte	1,1,2,35,3,11
	.byte	'LCK',0,1
	.word	614
	.byte	1,0,2,35,3,0,32
	.byte	'Ifx_SCU_EVRSDCTRL2_Bits',0,4,222,3,3
	.word	30319
	.byte	10
	.byte	'_Ifx_SCU_EVRSDCTRL3_Bits',0,4,225,3,16,4,11
	.byte	'SDPWMPRE',0,1
	.word	614
	.byte	8,0,2,35,0,11
	.byte	'SDPID',0,1
	.word	614
	.byte	8,0,2,35,1,11
	.byte	'SDVOKLVL',0,1
	.word	614
	.byte	8,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	614
	.byte	7,1,2,35,3,11
	.byte	'LCK',0,1
	.word	614
	.byte	1,0,2,35,3,0,32
	.byte	'Ifx_SCU_EVRSDCTRL3_Bits',0,4,232,3,3
	.word	30493
	.byte	10
	.byte	'_Ifx_SCU_EVRSDCTRL4_Bits',0,4,235,3,16,4,11
	.byte	'reserved_0',0,1
	.word	614
	.byte	8,0,2,35,0,11
	.byte	'SYNCDIV',0,1
	.word	614
	.byte	3,5,2,35,1,11
	.byte	'reserved_11',0,4
	.word	439
	.byte	20,1,2,35,0,11
	.byte	'LCK',0,1
	.word	614
	.byte	1,0,2,35,3,0,32
	.byte	'Ifx_SCU_EVRSDCTRL4_Bits',0,4,241,3,3
	.word	30653
	.byte	10
	.byte	'_Ifx_SCU_EVRSTAT_Bits',0,4,244,3,16,4,11
	.byte	'EVR13',0,1
	.word	614
	.byte	1,7,2,35,0,11
	.byte	'OV13',0,1
	.word	614
	.byte	1,6,2,35,0,11
	.byte	'EVR33',0,1
	.word	614
	.byte	1,5,2,35,0,11
	.byte	'OV33',0,1
	.word	614
	.byte	1,4,2,35,0,11
	.byte	'OVSWD',0,1
	.word	614
	.byte	1,3,2,35,0,11
	.byte	'UV13',0,1
	.word	614
	.byte	1,2,2,35,0,11
	.byte	'UV33',0,1
	.word	614
	.byte	1,1,2,35,0,11
	.byte	'UVSWD',0,1
	.word	614
	.byte	1,0,2,35,0,11
	.byte	'EXTPASS13',0,1
	.word	614
	.byte	1,7,2,35,1,11
	.byte	'EXTPASS33',0,1
	.word	614
	.byte	1,6,2,35,1,11
	.byte	'BGPROK',0,1
	.word	614
	.byte	1,5,2,35,1,11
	.byte	'reserved_11',0,4
	.word	439
	.byte	21,0,2,35,0,0,32
	.byte	'Ifx_SCU_EVRSTAT_Bits',0,4,130,4,3
	.word	30797
	.byte	10
	.byte	'_Ifx_SCU_EVRTRIM_Bits',0,4,133,4,16,4,11
	.byte	'EVR13TRIM',0,1
	.word	614
	.byte	8,0,2,35,0,11
	.byte	'SDVOUTSEL',0,1
	.word	614
	.byte	8,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	631
	.byte	15,1,2,35,2,11
	.byte	'LCK',0,1
	.word	614
	.byte	1,0,2,35,3,0,32
	.byte	'Ifx_SCU_EVRTRIM_Bits',0,4,139,4,3
	.word	31071
	.byte	10
	.byte	'_Ifx_SCU_EVRUVMON_Bits',0,4,142,4,16,4,11
	.byte	'EVR13UVVAL',0,1
	.word	614
	.byte	8,0,2,35,0,11
	.byte	'EVR33UVVAL',0,1
	.word	614
	.byte	8,0,2,35,1,11
	.byte	'SWDUVVAL',0,1
	.word	614
	.byte	8,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	614
	.byte	7,1,2,35,3,11
	.byte	'LCK',0,1
	.word	614
	.byte	1,0,2,35,3,0,32
	.byte	'Ifx_SCU_EVRUVMON_Bits',0,4,149,4,3
	.word	31210
	.byte	10
	.byte	'_Ifx_SCU_EXTCON_Bits',0,4,152,4,16,4,11
	.byte	'EN0',0,1
	.word	614
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,1
	.word	614
	.byte	1,6,2,35,0,11
	.byte	'SEL0',0,1
	.word	614
	.byte	4,2,2,35,0,11
	.byte	'reserved_6',0,2
	.word	631
	.byte	10,0,2,35,0,11
	.byte	'EN1',0,1
	.word	614
	.byte	1,7,2,35,2,11
	.byte	'NSEL',0,1
	.word	614
	.byte	1,6,2,35,2,11
	.byte	'SEL1',0,1
	.word	614
	.byte	4,2,2,35,2,11
	.byte	'reserved_22',0,1
	.word	614
	.byte	2,0,2,35,2,11
	.byte	'DIV1',0,1
	.word	614
	.byte	8,0,2,35,3,0,32
	.byte	'Ifx_SCU_EXTCON_Bits',0,4,163,4,3
	.word	31373
	.byte	10
	.byte	'_Ifx_SCU_FDR_Bits',0,4,166,4,16,4,11
	.byte	'STEP',0,2
	.word	631
	.byte	10,6,2,35,0,11
	.byte	'reserved_10',0,1
	.word	614
	.byte	4,2,2,35,1,11
	.byte	'DM',0,1
	.word	614
	.byte	2,0,2,35,1,11
	.byte	'RESULT',0,2
	.word	631
	.byte	10,6,2,35,2,11
	.byte	'reserved_26',0,1
	.word	614
	.byte	5,1,2,35,3,11
	.byte	'DISCLK',0,1
	.word	614
	.byte	1,0,2,35,3,0,32
	.byte	'Ifx_SCU_FDR_Bits',0,4,174,4,3
	.word	31591
	.byte	10
	.byte	'_Ifx_SCU_FMR_Bits',0,4,177,4,16,4,11
	.byte	'FS0',0,1
	.word	614
	.byte	1,7,2,35,0,11
	.byte	'FS1',0,1
	.word	614
	.byte	1,6,2,35,0,11
	.byte	'FS2',0,1
	.word	614
	.byte	1,5,2,35,0,11
	.byte	'FS3',0,1
	.word	614
	.byte	1,4,2,35,0,11
	.byte	'FS4',0,1
	.word	614
	.byte	1,3,2,35,0,11
	.byte	'FS5',0,1
	.word	614
	.byte	1,2,2,35,0,11
	.byte	'FS6',0,1
	.word	614
	.byte	1,1,2,35,0,11
	.byte	'FS7',0,1
	.word	614
	.byte	1,0,2,35,0,11
	.byte	'reserved_8',0,1
	.word	614
	.byte	8,0,2,35,1,11
	.byte	'FC0',0,1
	.word	614
	.byte	1,7,2,35,2,11
	.byte	'FC1',0,1
	.word	614
	.byte	1,6,2,35,2,11
	.byte	'FC2',0,1
	.word	614
	.byte	1,5,2,35,2,11
	.byte	'FC3',0,1
	.word	614
	.byte	1,4,2,35,2,11
	.byte	'FC4',0,1
	.word	614
	.byte	1,3,2,35,2,11
	.byte	'FC5',0,1
	.word	614
	.byte	1,2,2,35,2,11
	.byte	'FC6',0,1
	.word	614
	.byte	1,1,2,35,2,11
	.byte	'FC7',0,1
	.word	614
	.byte	1,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	614
	.byte	8,0,2,35,3,0,32
	.byte	'Ifx_SCU_FMR_Bits',0,4,197,4,3
	.word	31754
	.byte	10
	.byte	'_Ifx_SCU_ID_Bits',0,4,200,4,16,4,11
	.byte	'MODREV',0,1
	.word	614
	.byte	8,0,2,35,0,11
	.byte	'MODTYPE',0,1
	.word	614
	.byte	8,0,2,35,1,11
	.byte	'MODNUMBER',0,2
	.word	631
	.byte	16,0,2,35,2,0,32
	.byte	'Ifx_SCU_ID_Bits',0,4,205,4,3
	.word	32090
	.byte	10
	.byte	'_Ifx_SCU_IGCR_Bits',0,4,208,4,16,4,11
	.byte	'IPEN00',0,1
	.word	614
	.byte	1,7,2,35,0,11
	.byte	'IPEN01',0,1
	.word	614
	.byte	1,6,2,35,0,11
	.byte	'IPEN02',0,1
	.word	614
	.byte	1,5,2,35,0,11
	.byte	'IPEN03',0,1
	.word	614
	.byte	1,4,2,35,0,11
	.byte	'IPEN04',0,1
	.word	614
	.byte	1,3,2,35,0,11
	.byte	'IPEN05',0,1
	.word	614
	.byte	1,2,2,35,0,11
	.byte	'IPEN06',0,1
	.word	614
	.byte	1,1,2,35,0,11
	.byte	'IPEN07',0,1
	.word	614
	.byte	1,0,2,35,0,11
	.byte	'reserved_8',0,1
	.word	614
	.byte	5,3,2,35,1,11
	.byte	'GEEN0',0,1
	.word	614
	.byte	1,2,2,35,1,11
	.byte	'IGP0',0,1
	.word	614
	.byte	2,0,2,35,1,11
	.byte	'IPEN10',0,1
	.word	614
	.byte	1,7,2,35,2,11
	.byte	'IPEN11',0,1
	.word	614
	.byte	1,6,2,35,2,11
	.byte	'IPEN12',0,1
	.word	614
	.byte	1,5,2,35,2,11
	.byte	'IPEN13',0,1
	.word	614
	.byte	1,4,2,35,2,11
	.byte	'IPEN14',0,1
	.word	614
	.byte	1,3,2,35,2,11
	.byte	'IPEN15',0,1
	.word	614
	.byte	1,2,2,35,2,11
	.byte	'IPEN16',0,1
	.word	614
	.byte	1,1,2,35,2,11
	.byte	'IPEN17',0,1
	.word	614
	.byte	1,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	614
	.byte	5,3,2,35,3,11
	.byte	'GEEN1',0,1
	.word	614
	.byte	1,2,2,35,3,11
	.byte	'IGP1',0,1
	.word	614
	.byte	2,0,2,35,3,0,32
	.byte	'Ifx_SCU_IGCR_Bits',0,4,232,4,3
	.word	32197
	.byte	10
	.byte	'_Ifx_SCU_IN_Bits',0,4,235,4,16,4,11
	.byte	'P0',0,1
	.word	614
	.byte	1,7,2,35,0,11
	.byte	'P1',0,1
	.word	614
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,4
	.word	439
	.byte	30,0,2,35,0,0,32
	.byte	'Ifx_SCU_IN_Bits',0,4,240,4,3
	.word	32649
	.byte	10
	.byte	'_Ifx_SCU_IOCR_Bits',0,4,243,4,16,4,11
	.byte	'reserved_0',0,1
	.word	614
	.byte	4,4,2,35,0,11
	.byte	'PC0',0,1
	.word	614
	.byte	4,0,2,35,0,11
	.byte	'reserved_8',0,1
	.word	614
	.byte	4,4,2,35,1,11
	.byte	'PC1',0,1
	.word	614
	.byte	4,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	631
	.byte	16,0,2,35,2,0,32
	.byte	'Ifx_SCU_IOCR_Bits',0,4,250,4,3
	.word	32748
	.byte	10
	.byte	'_Ifx_SCU_LBISTCTRL0_Bits',0,4,253,4,16,4,11
	.byte	'LBISTREQ',0,1
	.word	614
	.byte	1,7,2,35,0,11
	.byte	'LBISTREQP',0,1
	.word	614
	.byte	1,6,2,35,0,11
	.byte	'PATTERNS',0,2
	.word	631
	.byte	14,0,2,35,0,11
	.byte	'reserved_16',0,2
	.word	631
	.byte	16,0,2,35,2,0,32
	.byte	'Ifx_SCU_LBISTCTRL0_Bits',0,4,131,5,3
	.word	32898
	.byte	10
	.byte	'_Ifx_SCU_LBISTCTRL1_Bits',0,4,134,5,16,4,11
	.byte	'SEED',0,4
	.word	439
	.byte	23,9,2,35,0,11
	.byte	'reserved_23',0,1
	.word	614
	.byte	1,0,2,35,2,11
	.byte	'SPLITSH',0,1
	.word	614
	.byte	3,5,2,35,3,11
	.byte	'BODY',0,1
	.word	614
	.byte	1,4,2,35,3,11
	.byte	'LBISTFREQU',0,1
	.word	614
	.byte	4,0,2,35,3,0,32
	.byte	'Ifx_SCU_LBISTCTRL1_Bits',0,4,141,5,3
	.word	33047
	.byte	10
	.byte	'_Ifx_SCU_LBISTCTRL2_Bits',0,4,144,5,16,4,11
	.byte	'SIGNATURE',0,4
	.word	439
	.byte	24,8,2,35,0,11
	.byte	'reserved_24',0,1
	.word	614
	.byte	7,1,2,35,3,11
	.byte	'LBISTDONE',0,1
	.word	614
	.byte	1,0,2,35,3,0,32
	.byte	'Ifx_SCU_LBISTCTRL2_Bits',0,4,149,5,3
	.word	33208
	.byte	10
	.byte	'_Ifx_SCU_LCLCON_Bits',0,4,152,5,16,4,11
	.byte	'reserved_0',0,2
	.word	631
	.byte	16,0,2,35,0,11
	.byte	'LS',0,1
	.word	614
	.byte	1,7,2,35,2,11
	.byte	'reserved_17',0,2
	.word	631
	.byte	14,1,2,35,2,11
	.byte	'LSEN',0,1
	.word	614
	.byte	1,0,2,35,3,0,32
	.byte	'Ifx_SCU_LCLCON_Bits',0,4,158,5,3
	.word	33338
	.byte	10
	.byte	'_Ifx_SCU_LCLTEST_Bits',0,4,161,5,16,4,11
	.byte	'LCLT0',0,1
	.word	614
	.byte	1,7,2,35,0,11
	.byte	'LCLT1',0,1
	.word	614
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,4
	.word	439
	.byte	30,0,2,35,0,0,32
	.byte	'Ifx_SCU_LCLTEST_Bits',0,4,166,5,3
	.word	33470
	.byte	10
	.byte	'_Ifx_SCU_MANID_Bits',0,4,169,5,16,4,11
	.byte	'DEPT',0,1
	.word	614
	.byte	5,3,2,35,0,11
	.byte	'MANUF',0,2
	.word	631
	.byte	11,0,2,35,0,11
	.byte	'reserved_16',0,2
	.word	631
	.byte	16,0,2,35,2,0,32
	.byte	'Ifx_SCU_MANID_Bits',0,4,174,5,3
	.word	33585
	.byte	10
	.byte	'_Ifx_SCU_OMR_Bits',0,4,177,5,16,4,11
	.byte	'PS0',0,1
	.word	614
	.byte	1,7,2,35,0,11
	.byte	'PS1',0,1
	.word	614
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,2
	.word	631
	.byte	14,0,2,35,0,11
	.byte	'PCL0',0,1
	.word	614
	.byte	1,7,2,35,2,11
	.byte	'PCL1',0,1
	.word	614
	.byte	1,6,2,35,2,11
	.byte	'reserved_18',0,2
	.word	631
	.byte	14,0,2,35,2,0,32
	.byte	'Ifx_SCU_OMR_Bits',0,4,185,5,3
	.word	33696
	.byte	10
	.byte	'_Ifx_SCU_OSCCON_Bits',0,4,188,5,16,4,11
	.byte	'reserved_0',0,1
	.word	614
	.byte	1,7,2,35,0,11
	.byte	'PLLLV',0,1
	.word	614
	.byte	1,6,2,35,0,11
	.byte	'OSCRES',0,1
	.word	614
	.byte	1,5,2,35,0,11
	.byte	'GAINSEL',0,1
	.word	614
	.byte	2,3,2,35,0,11
	.byte	'MODE',0,1
	.word	614
	.byte	2,1,2,35,0,11
	.byte	'SHBY',0,1
	.word	614
	.byte	1,0,2,35,0,11
	.byte	'PLLHV',0,1
	.word	614
	.byte	1,7,2,35,1,11
	.byte	'reserved_9',0,1
	.word	614
	.byte	1,6,2,35,1,11
	.byte	'X1D',0,1
	.word	614
	.byte	1,5,2,35,1,11
	.byte	'X1DEN',0,1
	.word	614
	.byte	1,4,2,35,1,11
	.byte	'reserved_12',0,1
	.word	614
	.byte	4,0,2,35,1,11
	.byte	'OSCVAL',0,1
	.word	614
	.byte	5,3,2,35,2,11
	.byte	'reserved_21',0,1
	.word	614
	.byte	2,1,2,35,2,11
	.byte	'APREN',0,1
	.word	614
	.byte	1,0,2,35,2,11
	.byte	'CAP0EN',0,1
	.word	614
	.byte	1,7,2,35,3,11
	.byte	'CAP1EN',0,1
	.word	614
	.byte	1,6,2,35,3,11
	.byte	'CAP2EN',0,1
	.word	614
	.byte	1,5,2,35,3,11
	.byte	'CAP3EN',0,1
	.word	614
	.byte	1,4,2,35,3,11
	.byte	'reserved_28',0,1
	.word	614
	.byte	4,0,2,35,3,0,32
	.byte	'Ifx_SCU_OSCCON_Bits',0,4,209,5,3
	.word	33854
	.byte	10
	.byte	'_Ifx_SCU_OUT_Bits',0,4,212,5,16,4,11
	.byte	'P0',0,1
	.word	614
	.byte	1,7,2,35,0,11
	.byte	'P1',0,1
	.word	614
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,4
	.word	439
	.byte	30,0,2,35,0,0,32
	.byte	'Ifx_SCU_OUT_Bits',0,4,217,5,3
	.word	34266
	.byte	10
	.byte	'_Ifx_SCU_OVCCON_Bits',0,4,220,5,16,4,11
	.byte	'CSEL0',0,1
	.word	614
	.byte	1,7,2,35,0,11
	.byte	'CSEL1',0,1
	.word	614
	.byte	1,6,2,35,0,11
	.byte	'CSEL2',0,1
	.word	614
	.byte	1,5,2,35,0,11
	.byte	'reserved_3',0,2
	.word	631
	.byte	13,0,2,35,0,11
	.byte	'OVSTRT',0,1
	.word	614
	.byte	1,7,2,35,2,11
	.byte	'OVSTP',0,1
	.word	614
	.byte	1,6,2,35,2,11
	.byte	'DCINVAL',0,1
	.word	614
	.byte	1,5,2,35,2,11
	.byte	'reserved_19',0,1
	.word	614
	.byte	5,0,2,35,2,11
	.byte	'OVCONF',0,1
	.word	614
	.byte	1,7,2,35,3,11
	.byte	'POVCONF',0,1
	.word	614
	.byte	1,6,2,35,3,11
	.byte	'reserved_26',0,1
	.word	614
	.byte	6,0,2,35,3,0,32
	.byte	'Ifx_SCU_OVCCON_Bits',0,4,233,5,3
	.word	34367
	.byte	10
	.byte	'_Ifx_SCU_OVCENABLE_Bits',0,4,236,5,16,4,11
	.byte	'OVEN0',0,1
	.word	614
	.byte	1,7,2,35,0,11
	.byte	'OVEN1',0,1
	.word	614
	.byte	1,6,2,35,0,11
	.byte	'OVEN2',0,1
	.word	614
	.byte	1,5,2,35,0,11
	.byte	'reserved_3',0,4
	.word	439
	.byte	29,0,2,35,0,0,32
	.byte	'Ifx_SCU_OVCENABLE_Bits',0,4,242,5,3
	.word	34634
	.byte	10
	.byte	'_Ifx_SCU_PDISC_Bits',0,4,245,5,16,4,11
	.byte	'PDIS0',0,1
	.word	614
	.byte	1,7,2,35,0,11
	.byte	'PDIS1',0,1
	.word	614
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,4
	.word	439
	.byte	30,0,2,35,0,0,32
	.byte	'Ifx_SCU_PDISC_Bits',0,4,250,5,3
	.word	34770
	.byte	10
	.byte	'_Ifx_SCU_PDR_Bits',0,4,253,5,16,4,11
	.byte	'PD0',0,1
	.word	614
	.byte	3,5,2,35,0,11
	.byte	'PL0',0,1
	.word	614
	.byte	1,4,2,35,0,11
	.byte	'PD1',0,1
	.word	614
	.byte	3,1,2,35,0,11
	.byte	'PL1',0,1
	.word	614
	.byte	1,0,2,35,0,11
	.byte	'reserved_8',0,4
	.word	439
	.byte	24,0,2,35,0,0,32
	.byte	'Ifx_SCU_PDR_Bits',0,4,132,6,3
	.word	34881
	.byte	10
	.byte	'_Ifx_SCU_PDRR_Bits',0,4,135,6,16,4,11
	.byte	'PDR0',0,1
	.word	614
	.byte	1,7,2,35,0,11
	.byte	'PDR1',0,1
	.word	614
	.byte	1,6,2,35,0,11
	.byte	'PDR2',0,1
	.word	614
	.byte	1,5,2,35,0,11
	.byte	'PDR3',0,1
	.word	614
	.byte	1,4,2,35,0,11
	.byte	'PDR4',0,1
	.word	614
	.byte	1,3,2,35,0,11
	.byte	'PDR5',0,1
	.word	614
	.byte	1,2,2,35,0,11
	.byte	'PDR6',0,1
	.word	614
	.byte	1,1,2,35,0,11
	.byte	'PDR7',0,1
	.word	614
	.byte	1,0,2,35,0,11
	.byte	'reserved_8',0,4
	.word	439
	.byte	24,0,2,35,0,0,32
	.byte	'Ifx_SCU_PDRR_Bits',0,4,146,6,3
	.word	35014
	.byte	10
	.byte	'_Ifx_SCU_PLLCON0_Bits',0,4,149,6,16,4,11
	.byte	'VCOBYP',0,1
	.word	614
	.byte	1,7,2,35,0,11
	.byte	'VCOPWD',0,1
	.word	614
	.byte	1,6,2,35,0,11
	.byte	'MODEN',0,1
	.word	614
	.byte	1,5,2,35,0,11
	.byte	'reserved_3',0,1
	.word	614
	.byte	1,4,2,35,0,11
	.byte	'SETFINDIS',0,1
	.word	614
	.byte	1,3,2,35,0,11
	.byte	'CLRFINDIS',0,1
	.word	614
	.byte	1,2,2,35,0,11
	.byte	'OSCDISCDIS',0,1
	.word	614
	.byte	1,1,2,35,0,11
	.byte	'reserved_7',0,2
	.word	631
	.byte	2,7,2,35,0,11
	.byte	'NDIV',0,1
	.word	614
	.byte	7,0,2,35,1,11
	.byte	'PLLPWD',0,1
	.word	614
	.byte	1,7,2,35,2,11
	.byte	'reserved_17',0,1
	.word	614
	.byte	1,6,2,35,2,11
	.byte	'RESLD',0,1
	.word	614
	.byte	1,5,2,35,2,11
	.byte	'reserved_19',0,1
	.word	614
	.byte	5,0,2,35,2,11
	.byte	'PDIV',0,1
	.word	614
	.byte	4,4,2,35,3,11
	.byte	'reserved_28',0,1
	.word	614
	.byte	4,0,2,35,3,0,32
	.byte	'Ifx_SCU_PLLCON0_Bits',0,4,166,6,3
	.word	35217
	.byte	10
	.byte	'_Ifx_SCU_PLLCON1_Bits',0,4,169,6,16,4,11
	.byte	'K2DIV',0,1
	.word	614
	.byte	7,1,2,35,0,11
	.byte	'reserved_7',0,1
	.word	614
	.byte	1,0,2,35,0,11
	.byte	'K3DIV',0,1
	.word	614
	.byte	7,1,2,35,1,11
	.byte	'reserved_15',0,1
	.word	614
	.byte	1,0,2,35,1,11
	.byte	'K1DIV',0,1
	.word	614
	.byte	7,1,2,35,2,11
	.byte	'reserved_23',0,2
	.word	631
	.byte	9,0,2,35,2,0,32
	.byte	'Ifx_SCU_PLLCON1_Bits',0,4,177,6,3
	.word	35573
	.byte	10
	.byte	'_Ifx_SCU_PLLCON2_Bits',0,4,180,6,16,4,11
	.byte	'MODCFG',0,2
	.word	631
	.byte	16,0,2,35,0,11
	.byte	'reserved_16',0,2
	.word	631
	.byte	16,0,2,35,2,0,32
	.byte	'Ifx_SCU_PLLCON2_Bits',0,4,184,6,3
	.word	35751
	.byte	10
	.byte	'_Ifx_SCU_PLLERAYCON0_Bits',0,4,187,6,16,4,11
	.byte	'VCOBYP',0,1
	.word	614
	.byte	1,7,2,35,0,11
	.byte	'VCOPWD',0,1
	.word	614
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	614
	.byte	2,4,2,35,0,11
	.byte	'SETFINDIS',0,1
	.word	614
	.byte	1,3,2,35,0,11
	.byte	'CLRFINDIS',0,1
	.word	614
	.byte	1,2,2,35,0,11
	.byte	'OSCDISCDIS',0,1
	.word	614
	.byte	1,1,2,35,0,11
	.byte	'reserved_7',0,2
	.word	631
	.byte	2,7,2,35,0,11
	.byte	'NDIV',0,1
	.word	614
	.byte	5,2,2,35,1,11
	.byte	'reserved_14',0,1
	.word	614
	.byte	2,0,2,35,1,11
	.byte	'PLLPWD',0,1
	.word	614
	.byte	1,7,2,35,2,11
	.byte	'reserved_17',0,1
	.word	614
	.byte	1,6,2,35,2,11
	.byte	'RESLD',0,1
	.word	614
	.byte	1,5,2,35,2,11
	.byte	'reserved_19',0,1
	.word	614
	.byte	5,0,2,35,2,11
	.byte	'PDIV',0,1
	.word	614
	.byte	4,4,2,35,3,11
	.byte	'reserved_28',0,1
	.word	614
	.byte	4,0,2,35,3,0,32
	.byte	'Ifx_SCU_PLLERAYCON0_Bits',0,4,204,6,3
	.word	35851
	.byte	10
	.byte	'_Ifx_SCU_PLLERAYCON1_Bits',0,4,207,6,16,4,11
	.byte	'K2DIV',0,1
	.word	614
	.byte	7,1,2,35,0,11
	.byte	'reserved_7',0,1
	.word	614
	.byte	1,0,2,35,0,11
	.byte	'K3DIV',0,1
	.word	614
	.byte	4,4,2,35,1,11
	.byte	'reserved_12',0,1
	.word	614
	.byte	4,0,2,35,1,11
	.byte	'K1DIV',0,1
	.word	614
	.byte	7,1,2,35,2,11
	.byte	'reserved_23',0,2
	.word	631
	.byte	9,0,2,35,2,0,32
	.byte	'Ifx_SCU_PLLERAYCON1_Bits',0,4,215,6,3
	.word	36221
	.byte	10
	.byte	'_Ifx_SCU_PLLERAYSTAT_Bits',0,4,218,6,16,4,11
	.byte	'VCOBYST',0,1
	.word	614
	.byte	1,7,2,35,0,11
	.byte	'PWDSTAT',0,1
	.word	614
	.byte	1,6,2,35,0,11
	.byte	'VCOLOCK',0,1
	.word	614
	.byte	1,5,2,35,0,11
	.byte	'FINDIS',0,1
	.word	614
	.byte	1,4,2,35,0,11
	.byte	'K1RDY',0,1
	.word	614
	.byte	1,3,2,35,0,11
	.byte	'K2RDY',0,1
	.word	614
	.byte	1,2,2,35,0,11
	.byte	'reserved_6',0,4
	.word	439
	.byte	26,0,2,35,0,0,32
	.byte	'Ifx_SCU_PLLERAYSTAT_Bits',0,4,227,6,3
	.word	36407
	.byte	10
	.byte	'_Ifx_SCU_PLLSTAT_Bits',0,4,230,6,16,4,11
	.byte	'VCOBYST',0,1
	.word	614
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,1
	.word	614
	.byte	1,6,2,35,0,11
	.byte	'VCOLOCK',0,1
	.word	614
	.byte	1,5,2,35,0,11
	.byte	'FINDIS',0,1
	.word	614
	.byte	1,4,2,35,0,11
	.byte	'K1RDY',0,1
	.word	614
	.byte	1,3,2,35,0,11
	.byte	'K2RDY',0,1
	.word	614
	.byte	1,2,2,35,0,11
	.byte	'reserved_6',0,1
	.word	614
	.byte	1,1,2,35,0,11
	.byte	'MODRUN',0,1
	.word	614
	.byte	1,0,2,35,0,11
	.byte	'reserved_8',0,4
	.word	439
	.byte	24,0,2,35,0,0,32
	.byte	'Ifx_SCU_PLLSTAT_Bits',0,4,241,6,3
	.word	36605
	.byte	10
	.byte	'_Ifx_SCU_PMCSR_Bits',0,4,244,6,16,4,11
	.byte	'REQSLP',0,1
	.word	614
	.byte	2,6,2,35,0,11
	.byte	'SMUSLP',0,1
	.word	614
	.byte	1,5,2,35,0,11
	.byte	'reserved_3',0,1
	.word	614
	.byte	5,0,2,35,0,11
	.byte	'PMST',0,1
	.word	614
	.byte	3,5,2,35,1,11
	.byte	'reserved_11',0,4
	.word	439
	.byte	21,0,2,35,0,0,32
	.byte	'Ifx_SCU_PMCSR_Bits',0,4,251,6,3
	.word	36838
	.byte	10
	.byte	'_Ifx_SCU_PMSWCR0_Bits',0,4,254,6,16,4,11
	.byte	'reserved_0',0,1
	.word	614
	.byte	1,7,2,35,0,11
	.byte	'ESR1WKEN',0,1
	.word	614
	.byte	1,6,2,35,0,11
	.byte	'PINAWKEN',0,1
	.word	614
	.byte	1,5,2,35,0,11
	.byte	'PINBWKEN',0,1
	.word	614
	.byte	1,4,2,35,0,11
	.byte	'ESR0DFEN',0,1
	.word	614
	.byte	1,3,2,35,0,11
	.byte	'ESR0EDCON',0,1
	.word	614
	.byte	2,1,2,35,0,11
	.byte	'ESR1DFEN',0,1
	.word	614
	.byte	1,0,2,35,0,11
	.byte	'ESR1EDCON',0,1
	.word	614
	.byte	2,6,2,35,1,11
	.byte	'PINADFEN',0,1
	.word	614
	.byte	1,5,2,35,1,11
	.byte	'PINAEDCON',0,1
	.word	614
	.byte	2,3,2,35,1,11
	.byte	'PINBDFEN',0,1
	.word	614
	.byte	1,2,2,35,1,11
	.byte	'PINBEDCON',0,1
	.word	614
	.byte	2,0,2,35,1,11
	.byte	'SCREN',0,1
	.word	614
	.byte	1,7,2,35,2,11
	.byte	'STBYRAMSEL',0,1
	.word	614
	.byte	2,5,2,35,2,11
	.byte	'SCRCLKSEL',0,1
	.word	614
	.byte	1,4,2,35,2,11
	.byte	'SCRWKEN',0,1
	.word	614
	.byte	1,3,2,35,2,11
	.byte	'TRISTEN',0,1
	.word	614
	.byte	1,2,2,35,2,11
	.byte	'TRISTREQ',0,1
	.word	614
	.byte	1,1,2,35,2,11
	.byte	'PORSTDF',0,1
	.word	614
	.byte	1,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	614
	.byte	1,7,2,35,3,11
	.byte	'DCDCSYNC',0,1
	.word	614
	.byte	1,6,2,35,3,11
	.byte	'reserved_26',0,1
	.word	614
	.byte	3,3,2,35,3,11
	.byte	'ESR0TRIST',0,1
	.word	614
	.byte	1,2,2,35,3,11
	.byte	'reserved_30',0,1
	.word	614
	.byte	1,1,2,35,3,11
	.byte	'LCK',0,1
	.word	614
	.byte	1,0,2,35,3,0,32
	.byte	'Ifx_SCU_PMSWCR0_Bits',0,4,153,7,3
	.word	36990
	.byte	10
	.byte	'_Ifx_SCU_PMSWCR1_Bits',0,4,156,7,16,4,11
	.byte	'SCRSTEN',0,1
	.word	614
	.byte	1,7,2,35,0,11
	.byte	'SCRSTREQ',0,1
	.word	614
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	614
	.byte	6,0,2,35,0,11
	.byte	'CPUIDLSEL',0,1
	.word	614
	.byte	3,5,2,35,1,11
	.byte	'reserved_11',0,1
	.word	614
	.byte	1,4,2,35,1,11
	.byte	'IRADIS',0,1
	.word	614
	.byte	1,3,2,35,1,11
	.byte	'reserved_13',0,1
	.word	614
	.byte	3,0,2,35,1,11
	.byte	'SCRCFG',0,1
	.word	614
	.byte	8,0,2,35,2,11
	.byte	'CPUSEL',0,1
	.word	614
	.byte	3,5,2,35,3,11
	.byte	'STBYEVEN',0,1
	.word	614
	.byte	1,4,2,35,3,11
	.byte	'STBYEV',0,1
	.word	614
	.byte	3,1,2,35,3,11
	.byte	'LCK',0,1
	.word	614
	.byte	1,0,2,35,3,0,32
	.byte	'Ifx_SCU_PMSWCR1_Bits',0,4,170,7,3
	.word	37557
	.byte	10
	.byte	'_Ifx_SCU_PMSWCR2_Bits',0,4,173,7,16,4,11
	.byte	'SCRINT',0,1
	.word	614
	.byte	8,0,2,35,0,11
	.byte	'BUSY',0,1
	.word	614
	.byte	1,7,2,35,1,11
	.byte	'SCRECC',0,1
	.word	614
	.byte	1,6,2,35,1,11
	.byte	'SCRWDT',0,1
	.word	614
	.byte	1,5,2,35,1,11
	.byte	'SCRRST',0,1
	.word	614
	.byte	1,4,2,35,1,11
	.byte	'reserved_12',0,1
	.word	614
	.byte	4,0,2,35,1,11
	.byte	'TCINT',0,1
	.word	614
	.byte	8,0,2,35,2,11
	.byte	'TCINTREQ',0,1
	.word	614
	.byte	1,7,2,35,3,11
	.byte	'SMURST',0,1
	.word	614
	.byte	1,6,2,35,3,11
	.byte	'RST',0,1
	.word	614
	.byte	1,5,2,35,3,11
	.byte	'reserved_27',0,1
	.word	614
	.byte	4,1,2,35,3,11
	.byte	'LCK',0,1
	.word	614
	.byte	1,0,2,35,3,0,32
	.byte	'Ifx_SCU_PMSWCR2_Bits',0,4,187,7,3
	.word	37851
	.byte	10
	.byte	'_Ifx_SCU_PMSWSTAT_Bits',0,4,190,7,16,4,11
	.byte	'reserved_0',0,1
	.word	614
	.byte	2,6,2,35,0,11
	.byte	'ESR1WKP',0,1
	.word	614
	.byte	1,5,2,35,0,11
	.byte	'ESR1OVRUN',0,1
	.word	614
	.byte	1,4,2,35,0,11
	.byte	'PINAWKP',0,1
	.word	614
	.byte	1,3,2,35,0,11
	.byte	'PINAOVRUN',0,1
	.word	614
	.byte	1,2,2,35,0,11
	.byte	'PINBWKP',0,1
	.word	614
	.byte	1,1,2,35,0,11
	.byte	'PINBOVRUN',0,1
	.word	614
	.byte	1,0,2,35,0,11
	.byte	'reserved_8',0,1
	.word	614
	.byte	1,7,2,35,1,11
	.byte	'PORSTDF',0,1
	.word	614
	.byte	1,6,2,35,1,11
	.byte	'HWCFGEVR',0,1
	.word	614
	.byte	3,3,2,35,1,11
	.byte	'STBYRAM',0,1
	.word	614
	.byte	2,1,2,35,1,11
	.byte	'TRIST',0,1
	.word	614
	.byte	1,0,2,35,1,11
	.byte	'SCRST',0,1
	.word	614
	.byte	1,7,2,35,2,11
	.byte	'SCRWKP',0,1
	.word	614
	.byte	1,6,2,35,2,11
	.byte	'SCR',0,1
	.word	614
	.byte	1,5,2,35,2,11
	.byte	'SCRWKEN',0,1
	.word	614
	.byte	1,4,2,35,2,11
	.byte	'ESR1WKEN',0,1
	.word	614
	.byte	1,3,2,35,2,11
	.byte	'PINAWKEN',0,1
	.word	614
	.byte	1,2,2,35,2,11
	.byte	'PINBWKEN',0,1
	.word	614
	.byte	1,1,2,35,2,11
	.byte	'reserved_23',0,2
	.word	631
	.byte	4,5,2,35,2,11
	.byte	'ESR0TRIST',0,1
	.word	614
	.byte	1,4,2,35,3,11
	.byte	'reserved_28',0,1
	.word	614
	.byte	4,0,2,35,3,0,32
	.byte	'Ifx_SCU_PMSWSTAT_Bits',0,4,214,7,3
	.word	38129
	.byte	10
	.byte	'_Ifx_SCU_PMSWSTATCLR_Bits',0,4,217,7,16,4,11
	.byte	'reserved_0',0,1
	.word	614
	.byte	2,6,2,35,0,11
	.byte	'ESR1WKPCLR',0,1
	.word	614
	.byte	1,5,2,35,0,11
	.byte	'ESR1OVRUNCLR',0,1
	.word	614
	.byte	1,4,2,35,0,11
	.byte	'PINAWKPCLR',0,1
	.word	614
	.byte	1,3,2,35,0,11
	.byte	'PINAOVRUNCLR',0,1
	.word	614
	.byte	1,2,2,35,0,11
	.byte	'PINBWKPCLR',0,1
	.word	614
	.byte	1,1,2,35,0,11
	.byte	'PINBOVRUNCLR',0,1
	.word	614
	.byte	1,0,2,35,0,11
	.byte	'reserved_8',0,1
	.word	614
	.byte	8,0,2,35,1,11
	.byte	'SCRSTCLR',0,1
	.word	614
	.byte	1,7,2,35,2,11
	.byte	'SCRWKPCLR',0,1
	.word	614
	.byte	1,6,2,35,2,11
	.byte	'reserved_18',0,2
	.word	631
	.byte	14,0,2,35,2,0,32
	.byte	'Ifx_SCU_PMSWSTATCLR_Bits',0,4,230,7,3
	.word	38625
	.byte	10
	.byte	'_Ifx_SCU_RSTCON2_Bits',0,4,233,7,16,4,11
	.byte	'reserved_0',0,1
	.word	614
	.byte	1,7,2,35,0,11
	.byte	'CLRC',0,1
	.word	614
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,2
	.word	631
	.byte	10,4,2,35,0,11
	.byte	'CSS0',0,1
	.word	614
	.byte	1,3,2,35,1,11
	.byte	'CSS1',0,1
	.word	614
	.byte	1,2,2,35,1,11
	.byte	'CSS2',0,1
	.word	614
	.byte	1,1,2,35,1,11
	.byte	'reserved_15',0,1
	.word	614
	.byte	1,0,2,35,1,11
	.byte	'USRINFO',0,2
	.word	631
	.byte	16,0,2,35,2,0,32
	.byte	'Ifx_SCU_RSTCON2_Bits',0,4,243,7,3
	.word	38938
	.byte	10
	.byte	'_Ifx_SCU_RSTCON_Bits',0,4,246,7,16,4,11
	.byte	'ESR0',0,1
	.word	614
	.byte	2,6,2,35,0,11
	.byte	'ESR1',0,1
	.word	614
	.byte	2,4,2,35,0,11
	.byte	'reserved_4',0,1
	.word	614
	.byte	2,2,2,35,0,11
	.byte	'SMU',0,1
	.word	614
	.byte	2,0,2,35,0,11
	.byte	'SW',0,1
	.word	614
	.byte	2,6,2,35,1,11
	.byte	'STM0',0,1
	.word	614
	.byte	2,4,2,35,1,11
	.byte	'STM1',0,1
	.word	614
	.byte	2,2,2,35,1,11
	.byte	'STM2',0,1
	.word	614
	.byte	2,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	631
	.byte	16,0,2,35,2,0,32
	.byte	'Ifx_SCU_RSTCON_Bits',0,4,129,8,3
	.word	39147
	.byte	10
	.byte	'_Ifx_SCU_RSTSTAT_Bits',0,4,132,8,16,4,11
	.byte	'ESR0',0,1
	.word	614
	.byte	1,7,2,35,0,11
	.byte	'ESR1',0,1
	.word	614
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	614
	.byte	1,5,2,35,0,11
	.byte	'SMU',0,1
	.word	614
	.byte	1,4,2,35,0,11
	.byte	'SW',0,1
	.word	614
	.byte	1,3,2,35,0,11
	.byte	'STM0',0,1
	.word	614
	.byte	1,2,2,35,0,11
	.byte	'STM1',0,1
	.word	614
	.byte	1,1,2,35,0,11
	.byte	'STM2',0,1
	.word	614
	.byte	1,0,2,35,0,11
	.byte	'reserved_8',0,1
	.word	614
	.byte	8,0,2,35,1,11
	.byte	'PORST',0,1
	.word	614
	.byte	1,7,2,35,2,11
	.byte	'reserved_17',0,1
	.word	614
	.byte	1,6,2,35,2,11
	.byte	'CB0',0,1
	.word	614
	.byte	1,5,2,35,2,11
	.byte	'CB1',0,1
	.word	614
	.byte	1,4,2,35,2,11
	.byte	'CB3',0,1
	.word	614
	.byte	1,3,2,35,2,11
	.byte	'reserved_21',0,1
	.word	614
	.byte	2,1,2,35,2,11
	.byte	'EVR13',0,1
	.word	614
	.byte	1,0,2,35,2,11
	.byte	'EVR33',0,1
	.word	614
	.byte	1,7,2,35,3,11
	.byte	'SWD',0,1
	.word	614
	.byte	1,6,2,35,3,11
	.byte	'reserved_26',0,1
	.word	614
	.byte	2,4,2,35,3,11
	.byte	'STBYR',0,1
	.word	614
	.byte	1,3,2,35,3,11
	.byte	'reserved_29',0,1
	.word	614
	.byte	3,0,2,35,3,0,32
	.byte	'Ifx_SCU_RSTSTAT_Bits',0,4,155,8,3
	.word	39358
	.byte	10
	.byte	'_Ifx_SCU_SAFECON_Bits',0,4,158,8,16,4,11
	.byte	'HBT',0,1
	.word	614
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,4
	.word	439
	.byte	31,0,2,35,0,0,32
	.byte	'Ifx_SCU_SAFECON_Bits',0,4,162,8,3
	.word	39790
	.byte	10
	.byte	'_Ifx_SCU_STSTAT_Bits',0,4,165,8,16,4,11
	.byte	'HWCFG',0,1
	.word	614
	.byte	8,0,2,35,0,11
	.byte	'FTM',0,1
	.word	614
	.byte	7,1,2,35,1,11
	.byte	'MODE',0,1
	.word	614
	.byte	1,0,2,35,1,11
	.byte	'FCBAE',0,1
	.word	614
	.byte	1,7,2,35,2,11
	.byte	'LUDIS',0,1
	.word	614
	.byte	1,6,2,35,2,11
	.byte	'reserved_18',0,1
	.word	614
	.byte	1,5,2,35,2,11
	.byte	'TRSTL',0,1
	.word	614
	.byte	1,4,2,35,2,11
	.byte	'SPDEN',0,1
	.word	614
	.byte	1,3,2,35,2,11
	.byte	'reserved_21',0,1
	.word	614
	.byte	3,0,2,35,2,11
	.byte	'RAMINT',0,1
	.word	614
	.byte	1,7,2,35,3,11
	.byte	'reserved_25',0,1
	.word	614
	.byte	7,0,2,35,3,0,32
	.byte	'Ifx_SCU_STSTAT_Bits',0,4,178,8,3
	.word	39886
	.byte	10
	.byte	'_Ifx_SCU_SWRSTCON_Bits',0,4,181,8,16,4,11
	.byte	'reserved_0',0,1
	.word	614
	.byte	1,7,2,35,0,11
	.byte	'SWRSTREQ',0,1
	.word	614
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,4
	.word	439
	.byte	30,0,2,35,0,0,32
	.byte	'Ifx_SCU_SWRSTCON_Bits',0,4,186,8,3
	.word	40146
	.byte	10
	.byte	'_Ifx_SCU_SYSCON_Bits',0,4,189,8,16,4,11
	.byte	'CCTRIG0',0,1
	.word	614
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,1
	.word	614
	.byte	1,6,2,35,0,11
	.byte	'RAMINTM',0,1
	.word	614
	.byte	2,4,2,35,0,11
	.byte	'SETLUDIS',0,1
	.word	614
	.byte	1,3,2,35,0,11
	.byte	'reserved_5',0,1
	.word	614
	.byte	3,0,2,35,0,11
	.byte	'DATM',0,1
	.word	614
	.byte	1,7,2,35,1,11
	.byte	'reserved_9',0,4
	.word	439
	.byte	23,0,2,35,0,0,32
	.byte	'Ifx_SCU_SYSCON_Bits',0,4,198,8,3
	.word	40271
	.byte	10
	.byte	'_Ifx_SCU_TRAPCLR_Bits',0,4,201,8,16,4,11
	.byte	'ESR0T',0,1
	.word	614
	.byte	1,7,2,35,0,11
	.byte	'ESR1T',0,1
	.word	614
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	614
	.byte	1,5,2,35,0,11
	.byte	'SMUT',0,1
	.word	614
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,4
	.word	439
	.byte	28,0,2,35,0,0,32
	.byte	'Ifx_SCU_TRAPCLR_Bits',0,4,208,8,3
	.word	40468
	.byte	10
	.byte	'_Ifx_SCU_TRAPDIS_Bits',0,4,211,8,16,4,11
	.byte	'ESR0T',0,1
	.word	614
	.byte	1,7,2,35,0,11
	.byte	'ESR1T',0,1
	.word	614
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	614
	.byte	1,5,2,35,0,11
	.byte	'SMUT',0,1
	.word	614
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,4
	.word	439
	.byte	28,0,2,35,0,0,32
	.byte	'Ifx_SCU_TRAPDIS_Bits',0,4,218,8,3
	.word	40621
	.byte	10
	.byte	'_Ifx_SCU_TRAPSET_Bits',0,4,221,8,16,4,11
	.byte	'ESR0T',0,1
	.word	614
	.byte	1,7,2,35,0,11
	.byte	'ESR1T',0,1
	.word	614
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	614
	.byte	1,5,2,35,0,11
	.byte	'SMUT',0,1
	.word	614
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,4
	.word	439
	.byte	28,0,2,35,0,0,32
	.byte	'Ifx_SCU_TRAPSET_Bits',0,4,228,8,3
	.word	40774
	.byte	10
	.byte	'_Ifx_SCU_TRAPSTAT_Bits',0,4,231,8,16,4,11
	.byte	'ESR0T',0,1
	.word	614
	.byte	1,7,2,35,0,11
	.byte	'ESR1T',0,1
	.word	614
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	614
	.byte	1,5,2,35,0,11
	.byte	'SMUT',0,1
	.word	614
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,4
	.word	439
	.byte	28,0,2,35,0,0,32
	.byte	'Ifx_SCU_TRAPSTAT_Bits',0,4,238,8,3
	.word	40927
	.byte	32
	.byte	'Ifx_SCU_WDTCPU_CON0_Bits',0,4,247,8,3
	.word	478
	.byte	32
	.byte	'Ifx_SCU_WDTCPU_CON1_Bits',0,4,134,9,3
	.word	653
	.byte	32
	.byte	'Ifx_SCU_WDTCPU_SR_Bits',0,4,150,9,3
	.word	897
	.byte	10
	.byte	'_Ifx_SCU_WDTS_CON0_Bits',0,4,153,9,16,4,11
	.byte	'ENDINIT',0,4
	.word	462
	.byte	1,31,2,35,0,11
	.byte	'LCK',0,4
	.word	462
	.byte	1,30,2,35,0,11
	.byte	'PW',0,4
	.word	462
	.byte	14,16,2,35,0,11
	.byte	'REL',0,4
	.word	462
	.byte	16,0,2,35,0,0,32
	.byte	'Ifx_SCU_WDTS_CON0_Bits',0,4,159,9,3
	.word	41182
	.byte	10
	.byte	'_Ifx_SCU_WDTS_CON1_Bits',0,4,162,9,16,4,11
	.byte	'CLRIRF',0,1
	.word	614
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,1
	.word	614
	.byte	1,6,2,35,0,11
	.byte	'IR0',0,1
	.word	614
	.byte	1,5,2,35,0,11
	.byte	'DR',0,1
	.word	614
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,1
	.word	614
	.byte	1,3,2,35,0,11
	.byte	'IR1',0,1
	.word	614
	.byte	1,2,2,35,0,11
	.byte	'UR',0,1
	.word	614
	.byte	1,1,2,35,0,11
	.byte	'PAR',0,1
	.word	614
	.byte	1,0,2,35,0,11
	.byte	'TCR',0,1
	.word	614
	.byte	1,7,2,35,1,11
	.byte	'TCTR',0,1
	.word	614
	.byte	7,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	631
	.byte	16,0,2,35,2,0,32
	.byte	'Ifx_SCU_WDTS_CON1_Bits',0,4,175,9,3
	.word	41308
	.byte	10
	.byte	'_Ifx_SCU_WDTS_SR_Bits',0,4,178,9,16,4,11
	.byte	'AE',0,1
	.word	614
	.byte	1,7,2,35,0,11
	.byte	'OE',0,1
	.word	614
	.byte	1,6,2,35,0,11
	.byte	'IS0',0,1
	.word	614
	.byte	1,5,2,35,0,11
	.byte	'DS',0,1
	.word	614
	.byte	1,4,2,35,0,11
	.byte	'TO',0,1
	.word	614
	.byte	1,3,2,35,0,11
	.byte	'IS1',0,1
	.word	614
	.byte	1,2,2,35,0,11
	.byte	'US',0,1
	.word	614
	.byte	1,1,2,35,0,11
	.byte	'PAS',0,1
	.word	614
	.byte	1,0,2,35,0,11
	.byte	'TCS',0,1
	.word	614
	.byte	1,7,2,35,1,11
	.byte	'TCT',0,1
	.word	614
	.byte	7,0,2,35,1,11
	.byte	'TIM',0,2
	.word	631
	.byte	16,0,2,35,2,0,32
	.byte	'Ifx_SCU_WDTS_SR_Bits',0,4,191,9,3
	.word	41560
	.byte	12,4,199,9,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	23592
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_ACCEN0',0,4,204,9,3
	.word	41779
	.byte	12,4,207,9,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	24149
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_ACCEN1',0,4,212,9,3
	.word	41843
	.byte	12,4,215,9,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	24226
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_ARSTDIS',0,4,220,9,3
	.word	41907
	.byte	12,4,223,9,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	24362
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_CCUCON0',0,4,228,9,3
	.word	41972
	.byte	12,4,231,9,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	24642
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_CCUCON1',0,4,236,9,3
	.word	42037
	.byte	12,4,239,9,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	24880
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_CCUCON2',0,4,244,9,3
	.word	42102
	.byte	12,4,247,9,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	25008
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_CCUCON3',0,4,252,9,3
	.word	42167
	.byte	12,4,255,9,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	25251
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_CCUCON4',0,4,132,10,3
	.word	42232
	.byte	12,4,135,10,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	25486
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_CCUCON5',0,4,140,10,3
	.word	42297
	.byte	12,4,143,10,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	25614
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_CCUCON6',0,4,148,10,3
	.word	42362
	.byte	12,4,151,10,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	25714
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_CCUCON7',0,4,156,10,3
	.word	42427
	.byte	12,4,159,10,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	25814
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_CHIPID',0,4,164,10,3
	.word	42492
	.byte	12,4,167,10,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	26022
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_DTSCON',0,4,172,10,3
	.word	42556
	.byte	12,4,175,10,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	26187
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_DTSLIM',0,4,180,10,3
	.word	42620
	.byte	12,4,183,10,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	26370
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_DTSSTAT',0,4,188,10,3
	.word	42684
	.byte	12,4,191,10,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	26524
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_EICR',0,4,196,10,3
	.word	42749
	.byte	12,4,199,10,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	26888
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_EIFR',0,4,204,10,3
	.word	42811
	.byte	12,4,207,10,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	27099
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_EMSR',0,4,212,10,3
	.word	42873
	.byte	12,4,215,10,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	27351
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_ESRCFG',0,4,220,10,3
	.word	42935
	.byte	12,4,223,10,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	27469
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_ESROCFG',0,4,228,10,3
	.word	42999
	.byte	12,4,231,10,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	27580
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_EVR13CON',0,4,236,10,3
	.word	43064
	.byte	12,4,239,10,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	27743
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_EVR33CON',0,4,244,10,3
	.word	43130
	.byte	12,4,247,10,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	27906
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_EVRADCSTAT',0,4,252,10,3
	.word	43196
	.byte	12,4,255,10,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	28064
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_EVRDVSTAT',0,4,132,11,3
	.word	43264
	.byte	12,4,135,11,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	28229
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_EVRMONCTRL',0,4,140,11,3
	.word	43331
	.byte	12,4,143,11,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	28558
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_EVROSCCTRL',0,4,148,11,3
	.word	43399
	.byte	12,4,151,11,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	28779
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_EVROVMON',0,4,156,11,3
	.word	43467
	.byte	12,4,159,11,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	28942
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_EVRRSTCON',0,4,164,11,3
	.word	43533
	.byte	12,4,167,11,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	29214
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_EVRSDCOEFF1',0,4,172,11,3
	.word	43600
	.byte	12,4,175,11,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	29367
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_EVRSDCOEFF2',0,4,180,11,3
	.word	43669
	.byte	12,4,183,11,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	29523
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_EVRSDCOEFF3',0,4,188,11,3
	.word	43738
	.byte	12,4,191,11,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	29685
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_EVRSDCOEFF4',0,4,196,11,3
	.word	43807
	.byte	12,4,199,11,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	29828
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_EVRSDCOEFF5',0,4,204,11,3
	.word	43876
	.byte	12,4,207,11,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	29993
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_EVRSDCOEFF6',0,4,212,11,3
	.word	43945
	.byte	12,4,215,11,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	30138
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_EVRSDCTRL1',0,4,220,11,3
	.word	44014
	.byte	12,4,223,11,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	30319
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_EVRSDCTRL2',0,4,228,11,3
	.word	44082
	.byte	12,4,231,11,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	30493
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_EVRSDCTRL3',0,4,236,11,3
	.word	44150
	.byte	12,4,239,11,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	30653
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_EVRSDCTRL4',0,4,244,11,3
	.word	44218
	.byte	12,4,247,11,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	30797
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_EVRSTAT',0,4,252,11,3
	.word	44286
	.byte	12,4,255,11,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	31071
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_EVRTRIM',0,4,132,12,3
	.word	44351
	.byte	12,4,135,12,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	31210
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_EVRUVMON',0,4,140,12,3
	.word	44416
	.byte	12,4,143,12,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	31373
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_EXTCON',0,4,148,12,3
	.word	44482
	.byte	12,4,151,12,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	31591
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_FDR',0,4,156,12,3
	.word	44546
	.byte	12,4,159,12,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	31754
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_FMR',0,4,164,12,3
	.word	44607
	.byte	12,4,167,12,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	32090
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_ID',0,4,172,12,3
	.word	44668
	.byte	12,4,175,12,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	32197
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_IGCR',0,4,180,12,3
	.word	44728
	.byte	12,4,183,12,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	32649
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_IN',0,4,188,12,3
	.word	44790
	.byte	12,4,191,12,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	32748
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_IOCR',0,4,196,12,3
	.word	44850
	.byte	12,4,199,12,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	32898
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_LBISTCTRL0',0,4,204,12,3
	.word	44912
	.byte	12,4,207,12,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	33047
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_LBISTCTRL1',0,4,212,12,3
	.word	44980
	.byte	12,4,215,12,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	33208
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_LBISTCTRL2',0,4,220,12,3
	.word	45048
	.byte	12,4,223,12,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	33338
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_LCLCON',0,4,228,12,3
	.word	45116
	.byte	12,4,231,12,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	33470
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_LCLTEST',0,4,236,12,3
	.word	45180
	.byte	12,4,239,12,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	33585
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_MANID',0,4,244,12,3
	.word	45245
	.byte	12,4,247,12,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	33696
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_OMR',0,4,252,12,3
	.word	45308
	.byte	12,4,255,12,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	33854
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_OSCCON',0,4,132,13,3
	.word	45369
	.byte	12,4,135,13,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	34266
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_OUT',0,4,140,13,3
	.word	45433
	.byte	12,4,143,13,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	34367
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_OVCCON',0,4,148,13,3
	.word	45494
	.byte	12,4,151,13,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	34634
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_OVCENABLE',0,4,156,13,3
	.word	45558
	.byte	12,4,159,13,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	34770
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_PDISC',0,4,164,13,3
	.word	45625
	.byte	12,4,167,13,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	34881
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_PDR',0,4,172,13,3
	.word	45688
	.byte	12,4,175,13,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	35014
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_PDRR',0,4,180,13,3
	.word	45749
	.byte	12,4,183,13,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	35217
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_PLLCON0',0,4,188,13,3
	.word	45811
	.byte	12,4,191,13,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	35573
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_PLLCON1',0,4,196,13,3
	.word	45876
	.byte	12,4,199,13,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	35751
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_PLLCON2',0,4,204,13,3
	.word	45941
	.byte	12,4,207,13,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	35851
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_PLLERAYCON0',0,4,212,13,3
	.word	46006
	.byte	12,4,215,13,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	36221
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_PLLERAYCON1',0,4,220,13,3
	.word	46075
	.byte	12,4,223,13,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	36407
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_PLLERAYSTAT',0,4,228,13,3
	.word	46144
	.byte	12,4,231,13,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	36605
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_PLLSTAT',0,4,236,13,3
	.word	46213
	.byte	12,4,239,13,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	36838
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_PMCSR',0,4,244,13,3
	.word	46278
	.byte	12,4,247,13,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	36990
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_PMSWCR0',0,4,252,13,3
	.word	46341
	.byte	12,4,255,13,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	37557
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_PMSWCR1',0,4,132,14,3
	.word	46406
	.byte	12,4,135,14,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	37851
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_PMSWCR2',0,4,140,14,3
	.word	46471
	.byte	12,4,143,14,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	38129
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_PMSWSTAT',0,4,148,14,3
	.word	46536
	.byte	12,4,151,14,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	38625
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_PMSWSTATCLR',0,4,156,14,3
	.word	46602
	.byte	12,4,159,14,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	39147
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_RSTCON',0,4,164,14,3
	.word	46671
	.byte	12,4,167,14,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	38938
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_RSTCON2',0,4,172,14,3
	.word	46735
	.byte	12,4,175,14,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	39358
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_RSTSTAT',0,4,180,14,3
	.word	46800
	.byte	12,4,183,14,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	39790
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_SAFECON',0,4,188,14,3
	.word	46865
	.byte	12,4,191,14,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	39886
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_STSTAT',0,4,196,14,3
	.word	46930
	.byte	12,4,199,14,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	40146
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_SWRSTCON',0,4,204,14,3
	.word	46994
	.byte	12,4,207,14,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	40271
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_SYSCON',0,4,212,14,3
	.word	47060
	.byte	12,4,215,14,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	40468
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_TRAPCLR',0,4,220,14,3
	.word	47124
	.byte	12,4,223,14,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	40621
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_TRAPDIS',0,4,228,14,3
	.word	47189
	.byte	12,4,231,14,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	40774
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_TRAPSET',0,4,236,14,3
	.word	47254
	.byte	12,4,239,14,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	40927
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_TRAPSTAT',0,4,244,14,3
	.word	47319
	.byte	32
	.byte	'Ifx_SCU_WDTCPU_CON0',0,4,252,14,3
	.word	574
	.byte	32
	.byte	'Ifx_SCU_WDTCPU_CON1',0,4,132,15,3
	.word	857
	.byte	32
	.byte	'Ifx_SCU_WDTCPU_SR',0,4,140,15,3
	.word	1088
	.byte	12,4,143,15,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	41182
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_WDTS_CON0',0,4,148,15,3
	.word	47470
	.byte	12,4,151,15,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	41308
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_WDTS_CON1',0,4,156,15,3
	.word	47537
	.byte	12,4,159,15,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	41560
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_WDTS_SR',0,4,164,15,3
	.word	47604
	.byte	14
	.word	1128
	.byte	32
	.byte	'Ifx_SCU_WDTCPU',0,4,180,15,3
	.word	47669
	.byte	10
	.byte	'_Ifx_SCU_WDTS',0,4,183,15,25,12,13
	.byte	'CON0',0
	.word	47470
	.byte	4,2,35,0,13
	.byte	'CON1',0
	.word	47537
	.byte	4,2,35,4,13
	.byte	'SR',0
	.word	47604
	.byte	4,2,35,8,0,14
	.word	47698
	.byte	32
	.byte	'Ifx_SCU_WDTS',0,4,188,15,3
	.word	47759
	.byte	18,8
	.word	42935
	.byte	19,1,0,18,20
	.word	614
	.byte	19,19,0,18,8
	.word	46278
	.byte	19,1,0,14
	.word	47698
	.byte	18,24
	.word	1128
	.byte	19,1,0,14
	.word	47818
	.byte	18,16
	.word	614
	.byte	19,15,0,18,40
	.word	614
	.byte	19,39,0,18,16
	.word	42749
	.byte	19,3,0,18,16
	.word	44728
	.byte	19,3,0,18,180,3
	.word	614
	.byte	19,179,3,0,10
	.byte	'_Ifx_SCU',0,4,201,15,25,128,8,13
	.byte	'reserved_0',0
	.word	4637
	.byte	8,2,35,0,13
	.byte	'ID',0
	.word	44668
	.byte	4,2,35,8,13
	.byte	'reserved_C',0
	.word	2818
	.byte	4,2,35,12,13
	.byte	'OSCCON',0
	.word	45369
	.byte	4,2,35,16,13
	.byte	'PLLSTAT',0
	.word	46213
	.byte	4,2,35,20,13
	.byte	'PLLCON0',0
	.word	45811
	.byte	4,2,35,24,13
	.byte	'PLLCON1',0
	.word	45876
	.byte	4,2,35,28,13
	.byte	'PLLCON2',0
	.word	45941
	.byte	4,2,35,32,13
	.byte	'PLLERAYSTAT',0
	.word	46144
	.byte	4,2,35,36,13
	.byte	'PLLERAYCON0',0
	.word	46006
	.byte	4,2,35,40,13
	.byte	'PLLERAYCON1',0
	.word	46075
	.byte	4,2,35,44,13
	.byte	'CCUCON0',0
	.word	41972
	.byte	4,2,35,48,13
	.byte	'CCUCON1',0
	.word	42037
	.byte	4,2,35,52,13
	.byte	'FDR',0
	.word	44546
	.byte	4,2,35,56,13
	.byte	'EXTCON',0
	.word	44482
	.byte	4,2,35,60,13
	.byte	'CCUCON2',0
	.word	42102
	.byte	4,2,35,64,13
	.byte	'CCUCON3',0
	.word	42167
	.byte	4,2,35,68,13
	.byte	'CCUCON4',0
	.word	42232
	.byte	4,2,35,72,13
	.byte	'CCUCON5',0
	.word	42297
	.byte	4,2,35,76,13
	.byte	'RSTSTAT',0
	.word	46800
	.byte	4,2,35,80,13
	.byte	'reserved_54',0
	.word	2818
	.byte	4,2,35,84,13
	.byte	'RSTCON',0
	.word	46671
	.byte	4,2,35,88,13
	.byte	'ARSTDIS',0
	.word	41907
	.byte	4,2,35,92,13
	.byte	'SWRSTCON',0
	.word	46994
	.byte	4,2,35,96,13
	.byte	'RSTCON2',0
	.word	46735
	.byte	4,2,35,100,13
	.byte	'reserved_68',0
	.word	2818
	.byte	4,2,35,104,13
	.byte	'EVRRSTCON',0
	.word	43533
	.byte	4,2,35,108,13
	.byte	'ESRCFG',0
	.word	47786
	.byte	8,2,35,112,13
	.byte	'ESROCFG',0
	.word	42999
	.byte	4,2,35,120,13
	.byte	'SYSCON',0
	.word	47060
	.byte	4,2,35,124,13
	.byte	'CCUCON6',0
	.word	42362
	.byte	4,3,35,128,1,13
	.byte	'CCUCON7',0
	.word	42427
	.byte	4,3,35,132,1,13
	.byte	'reserved_88',0
	.word	47795
	.byte	20,3,35,136,1,13
	.byte	'PDR',0
	.word	45688
	.byte	4,3,35,156,1,13
	.byte	'IOCR',0
	.word	44850
	.byte	4,3,35,160,1,13
	.byte	'OUT',0
	.word	45433
	.byte	4,3,35,164,1,13
	.byte	'OMR',0
	.word	45308
	.byte	4,3,35,168,1,13
	.byte	'IN',0
	.word	44790
	.byte	4,3,35,172,1,13
	.byte	'EVRSTAT',0
	.word	44286
	.byte	4,3,35,176,1,13
	.byte	'EVRDVSTAT',0
	.word	43264
	.byte	4,3,35,180,1,13
	.byte	'EVR13CON',0
	.word	43064
	.byte	4,3,35,184,1,13
	.byte	'EVR33CON',0
	.word	43130
	.byte	4,3,35,188,1,13
	.byte	'STSTAT',0
	.word	46930
	.byte	4,3,35,192,1,13
	.byte	'reserved_C4',0
	.word	2818
	.byte	4,3,35,196,1,13
	.byte	'PMSWCR0',0
	.word	46341
	.byte	4,3,35,200,1,13
	.byte	'PMSWSTAT',0
	.word	46536
	.byte	4,3,35,204,1,13
	.byte	'PMSWSTATCLR',0
	.word	46602
	.byte	4,3,35,208,1,13
	.byte	'PMCSR',0
	.word	47804
	.byte	8,3,35,212,1,13
	.byte	'reserved_DC',0
	.word	2818
	.byte	4,3,35,220,1,13
	.byte	'DTSSTAT',0
	.word	42684
	.byte	4,3,35,224,1,13
	.byte	'DTSCON',0
	.word	42556
	.byte	4,3,35,228,1,13
	.byte	'PMSWCR1',0
	.word	46406
	.byte	4,3,35,232,1,13
	.byte	'PMSWCR2',0
	.word	46471
	.byte	4,3,35,236,1,13
	.byte	'WDTS',0
	.word	47813
	.byte	12,3,35,240,1,13
	.byte	'EMSR',0
	.word	42873
	.byte	4,3,35,252,1,13
	.byte	'WDTCPU',0
	.word	47827
	.byte	24,3,35,128,2,13
	.byte	'reserved_118',0
	.word	4977
	.byte	12,3,35,152,2,13
	.byte	'TRAPSTAT',0
	.word	47319
	.byte	4,3,35,164,2,13
	.byte	'TRAPSET',0
	.word	47254
	.byte	4,3,35,168,2,13
	.byte	'TRAPCLR',0
	.word	47124
	.byte	4,3,35,172,2,13
	.byte	'TRAPDIS',0
	.word	47189
	.byte	4,3,35,176,2,13
	.byte	'reserved_134',0
	.word	2818
	.byte	4,3,35,180,2,13
	.byte	'LCLCON1',0
	.word	45116
	.byte	4,3,35,184,2,13
	.byte	'LCLTEST',0
	.word	45180
	.byte	4,3,35,188,2,13
	.byte	'CHIPID',0
	.word	42492
	.byte	4,3,35,192,2,13
	.byte	'MANID',0
	.word	45245
	.byte	4,3,35,196,2,13
	.byte	'reserved_148',0
	.word	4637
	.byte	8,3,35,200,2,13
	.byte	'SAFECON',0
	.word	46865
	.byte	4,3,35,208,2,13
	.byte	'reserved_154',0
	.word	47832
	.byte	16,3,35,212,2,13
	.byte	'LBISTCTRL0',0
	.word	44912
	.byte	4,3,35,228,2,13
	.byte	'LBISTCTRL1',0
	.word	44980
	.byte	4,3,35,232,2,13
	.byte	'LBISTCTRL2',0
	.word	45048
	.byte	4,3,35,236,2,13
	.byte	'reserved_170',0
	.word	12900
	.byte	28,3,35,240,2,13
	.byte	'PDISC',0
	.word	45625
	.byte	4,3,35,140,3,13
	.byte	'reserved_190',0
	.word	4637
	.byte	8,3,35,144,3,13
	.byte	'EVRTRIM',0
	.word	44351
	.byte	4,3,35,152,3,13
	.byte	'EVRADCSTAT',0
	.word	43196
	.byte	4,3,35,156,3,13
	.byte	'EVRUVMON',0
	.word	44416
	.byte	4,3,35,160,3,13
	.byte	'EVROVMON',0
	.word	43467
	.byte	4,3,35,164,3,13
	.byte	'EVRMONCTRL',0
	.word	43331
	.byte	4,3,35,168,3,13
	.byte	'reserved_1AC',0
	.word	2818
	.byte	4,3,35,172,3,13
	.byte	'EVRSDCTRL1',0
	.word	44014
	.byte	4,3,35,176,3,13
	.byte	'EVRSDCTRL2',0
	.word	44082
	.byte	4,3,35,180,3,13
	.byte	'EVRSDCTRL3',0
	.word	44150
	.byte	4,3,35,184,3,13
	.byte	'EVRSDCTRL4',0
	.word	44218
	.byte	4,3,35,188,3,13
	.byte	'EVRSDCOEFF1',0
	.word	43600
	.byte	4,3,35,192,3,13
	.byte	'EVRSDCOEFF2',0
	.word	43669
	.byte	4,3,35,196,3,13
	.byte	'EVRSDCOEFF3',0
	.word	43738
	.byte	4,3,35,200,3,13
	.byte	'EVRSDCOEFF4',0
	.word	43807
	.byte	4,3,35,204,3,13
	.byte	'EVRSDCOEFF5',0
	.word	43876
	.byte	4,3,35,208,3,13
	.byte	'EVRSDCOEFF6',0
	.word	43945
	.byte	4,3,35,212,3,13
	.byte	'EVROSCCTRL',0
	.word	43399
	.byte	4,3,35,216,3,13
	.byte	'reserved_1DC',0
	.word	2818
	.byte	4,3,35,220,3,13
	.byte	'OVCENABLE',0
	.word	45558
	.byte	4,3,35,224,3,13
	.byte	'OVCCON',0
	.word	45494
	.byte	4,3,35,228,3,13
	.byte	'reserved_1E8',0
	.word	47841
	.byte	40,3,35,232,3,13
	.byte	'EICR',0
	.word	47850
	.byte	16,3,35,144,4,13
	.byte	'EIFR',0
	.word	42811
	.byte	4,3,35,160,4,13
	.byte	'FMR',0
	.word	44607
	.byte	4,3,35,164,4,13
	.byte	'PDRR',0
	.word	45749
	.byte	4,3,35,168,4,13
	.byte	'IGCR',0
	.word	47859
	.byte	16,3,35,172,4,13
	.byte	'reserved_23C',0
	.word	2818
	.byte	4,3,35,188,4,13
	.byte	'DTSLIM',0
	.word	42620
	.byte	4,3,35,192,4,13
	.byte	'reserved_244',0
	.word	47868
	.byte	180,3,3,35,196,4,13
	.byte	'ACCEN1',0
	.word	41843
	.byte	4,3,35,248,7,13
	.byte	'ACCEN0',0
	.word	41779
	.byte	4,3,35,252,7,0,14
	.word	47879
	.byte	32
	.byte	'Ifx_SCU',0,4,181,16,3
	.word	49869
	.byte	10
	.byte	'_Ifx_CPU_A_Bits',0,21,45,16,4,11
	.byte	'ADDR',0,4
	.word	462
	.byte	32,0,2,35,0,0,32
	.byte	'Ifx_CPU_A_Bits',0,21,48,3
	.word	49891
	.byte	10
	.byte	'_Ifx_CPU_BIV_Bits',0,21,51,16,4,11
	.byte	'VSS',0,4
	.word	462
	.byte	1,31,2,35,0,11
	.byte	'BIV',0,4
	.word	462
	.byte	31,0,2,35,0,0,32
	.byte	'Ifx_CPU_BIV_Bits',0,21,55,3
	.word	49952
	.byte	10
	.byte	'_Ifx_CPU_BTV_Bits',0,21,58,16,4,11
	.byte	'reserved_0',0,4
	.word	462
	.byte	1,31,2,35,0,11
	.byte	'BTV',0,4
	.word	462
	.byte	31,0,2,35,0,0,32
	.byte	'Ifx_CPU_BTV_Bits',0,21,62,3
	.word	50031
	.byte	10
	.byte	'_Ifx_CPU_CCNT_Bits',0,21,65,16,4,11
	.byte	'CountValue',0,4
	.word	462
	.byte	31,1,2,35,0,11
	.byte	'SOvf',0,4
	.word	462
	.byte	1,0,2,35,0,0,32
	.byte	'Ifx_CPU_CCNT_Bits',0,21,69,3
	.word	50117
	.byte	10
	.byte	'_Ifx_CPU_CCTRL_Bits',0,21,72,16,4,11
	.byte	'CM',0,4
	.word	462
	.byte	1,31,2,35,0,11
	.byte	'CE',0,4
	.word	462
	.byte	1,30,2,35,0,11
	.byte	'M1',0,4
	.word	462
	.byte	3,27,2,35,0,11
	.byte	'M2',0,4
	.word	462
	.byte	3,24,2,35,0,11
	.byte	'M3',0,4
	.word	462
	.byte	3,21,2,35,0,11
	.byte	'reserved_11',0,4
	.word	462
	.byte	21,0,2,35,0,0,32
	.byte	'Ifx_CPU_CCTRL_Bits',0,21,80,3
	.word	50206
	.byte	10
	.byte	'_Ifx_CPU_COMPAT_Bits',0,21,83,16,4,11
	.byte	'reserved_0',0,4
	.word	462
	.byte	3,29,2,35,0,11
	.byte	'RM',0,4
	.word	462
	.byte	1,28,2,35,0,11
	.byte	'SP',0,4
	.word	462
	.byte	1,27,2,35,0,11
	.byte	'reserved_5',0,4
	.word	462
	.byte	27,0,2,35,0,0,32
	.byte	'Ifx_CPU_COMPAT_Bits',0,21,89,3
	.word	50352
	.byte	10
	.byte	'_Ifx_CPU_CORE_ID_Bits',0,21,92,16,4,11
	.byte	'CORE_ID',0,4
	.word	462
	.byte	3,29,2,35,0,11
	.byte	'reserved_3',0,4
	.word	462
	.byte	29,0,2,35,0,0,32
	.byte	'Ifx_CPU_CORE_ID_Bits',0,21,96,3
	.word	50479
	.byte	10
	.byte	'_Ifx_CPU_CPR_L_Bits',0,21,99,16,4,11
	.byte	'reserved_0',0,4
	.word	462
	.byte	3,29,2,35,0,11
	.byte	'LOWBND',0,4
	.word	462
	.byte	29,0,2,35,0,0,32
	.byte	'Ifx_CPU_CPR_L_Bits',0,21,103,3
	.word	50577
	.byte	10
	.byte	'_Ifx_CPU_CPR_U_Bits',0,21,106,16,4,11
	.byte	'reserved_0',0,4
	.word	462
	.byte	3,29,2,35,0,11
	.byte	'UPPBND',0,4
	.word	462
	.byte	29,0,2,35,0,0,32
	.byte	'Ifx_CPU_CPR_U_Bits',0,21,110,3
	.word	50670
	.byte	10
	.byte	'_Ifx_CPU_CPU_ID_Bits',0,21,113,16,4,11
	.byte	'MODREV',0,4
	.word	462
	.byte	8,24,2,35,0,11
	.byte	'MOD_32B',0,4
	.word	462
	.byte	8,16,2,35,0,11
	.byte	'MOD',0,4
	.word	462
	.byte	16,0,2,35,0,0,32
	.byte	'Ifx_CPU_CPU_ID_Bits',0,21,118,3
	.word	50763
	.byte	10
	.byte	'_Ifx_CPU_CPXE_Bits',0,21,121,16,4,11
	.byte	'XE',0,4
	.word	462
	.byte	8,24,2,35,0,11
	.byte	'reserved_8',0,4
	.word	462
	.byte	24,0,2,35,0,0,32
	.byte	'Ifx_CPU_CPXE_Bits',0,21,125,3
	.word	50870
	.byte	10
	.byte	'_Ifx_CPU_CREVT_Bits',0,21,128,1,16,4,11
	.byte	'EVTA',0,4
	.word	462
	.byte	3,29,2,35,0,11
	.byte	'BBM',0,4
	.word	462
	.byte	1,28,2,35,0,11
	.byte	'BOD',0,4
	.word	462
	.byte	1,27,2,35,0,11
	.byte	'SUSP',0,4
	.word	462
	.byte	1,26,2,35,0,11
	.byte	'CNT',0,4
	.word	462
	.byte	2,24,2,35,0,11
	.byte	'reserved_8',0,4
	.word	462
	.byte	24,0,2,35,0,0,32
	.byte	'Ifx_CPU_CREVT_Bits',0,21,136,1,3
	.word	50957
	.byte	10
	.byte	'_Ifx_CPU_CUS_ID_Bits',0,21,139,1,16,4,11
	.byte	'CID',0,4
	.word	462
	.byte	3,29,2,35,0,11
	.byte	'reserved_3',0,4
	.word	462
	.byte	29,0,2,35,0,0,32
	.byte	'Ifx_CPU_CUS_ID_Bits',0,21,143,1,3
	.word	51111
	.byte	10
	.byte	'_Ifx_CPU_D_Bits',0,21,146,1,16,4,11
	.byte	'DATA',0,4
	.word	462
	.byte	32,0,2,35,0,0,32
	.byte	'Ifx_CPU_D_Bits',0,21,149,1,3
	.word	51205
	.byte	10
	.byte	'_Ifx_CPU_DATR_Bits',0,21,152,1,16,4,11
	.byte	'reserved_0',0,4
	.word	462
	.byte	3,29,2,35,0,11
	.byte	'SBE',0,4
	.word	462
	.byte	1,28,2,35,0,11
	.byte	'reserved_4',0,4
	.word	462
	.byte	5,23,2,35,0,11
	.byte	'CWE',0,4
	.word	462
	.byte	1,22,2,35,0,11
	.byte	'CFE',0,4
	.word	462
	.byte	1,21,2,35,0,11
	.byte	'reserved_11',0,4
	.word	462
	.byte	3,18,2,35,0,11
	.byte	'SOE',0,4
	.word	462
	.byte	1,17,2,35,0,11
	.byte	'SME',0,4
	.word	462
	.byte	1,16,2,35,0,11
	.byte	'reserved_16',0,4
	.word	462
	.byte	16,0,2,35,0,0,32
	.byte	'Ifx_CPU_DATR_Bits',0,21,163,1,3
	.word	51268
	.byte	10
	.byte	'_Ifx_CPU_DBGSR_Bits',0,21,166,1,16,4,11
	.byte	'DE',0,4
	.word	462
	.byte	1,31,2,35,0,11
	.byte	'HALT',0,4
	.word	462
	.byte	2,29,2,35,0,11
	.byte	'SIH',0,4
	.word	462
	.byte	1,28,2,35,0,11
	.byte	'SUSP',0,4
	.word	462
	.byte	1,27,2,35,0,11
	.byte	'reserved_5',0,4
	.word	462
	.byte	1,26,2,35,0,11
	.byte	'PREVSUSP',0,4
	.word	462
	.byte	1,25,2,35,0,11
	.byte	'PEVT',0,4
	.word	462
	.byte	1,24,2,35,0,11
	.byte	'EVTSRC',0,4
	.word	462
	.byte	5,19,2,35,0,11
	.byte	'reserved_13',0,4
	.word	462
	.byte	19,0,2,35,0,0,32
	.byte	'Ifx_CPU_DBGSR_Bits',0,21,177,1,3
	.word	51486
	.byte	10
	.byte	'_Ifx_CPU_DBGTCR_Bits',0,21,180,1,16,4,11
	.byte	'DTA',0,4
	.word	462
	.byte	1,31,2,35,0,11
	.byte	'reserved_1',0,4
	.word	462
	.byte	31,0,2,35,0,0,32
	.byte	'Ifx_CPU_DBGTCR_Bits',0,21,184,1,3
	.word	51701
	.byte	10
	.byte	'_Ifx_CPU_DCON0_Bits',0,21,187,1,16,4,11
	.byte	'reserved_0',0,4
	.word	462
	.byte	1,31,2,35,0,11
	.byte	'DCBYP',0,4
	.word	462
	.byte	1,30,2,35,0,11
	.byte	'reserved_2',0,4
	.word	462
	.byte	30,0,2,35,0,0,32
	.byte	'Ifx_CPU_DCON0_Bits',0,21,192,1,3
	.word	51795
	.byte	10
	.byte	'_Ifx_CPU_DCON2_Bits',0,21,195,1,16,4,11
	.byte	'DCACHE_SZE',0,4
	.word	462
	.byte	16,16,2,35,0,11
	.byte	'DSCRATCH_SZE',0,4
	.word	462
	.byte	16,0,2,35,0,0,32
	.byte	'Ifx_CPU_DCON2_Bits',0,21,199,1,3
	.word	51911
	.byte	10
	.byte	'_Ifx_CPU_DCX_Bits',0,21,202,1,16,4,11
	.byte	'reserved_0',0,4
	.word	462
	.byte	6,26,2,35,0,11
	.byte	'DCXValue',0,4
	.word	462
	.byte	26,0,2,35,0,0,32
	.byte	'Ifx_CPU_DCX_Bits',0,21,206,1,3
	.word	52012
	.byte	10
	.byte	'_Ifx_CPU_DEADD_Bits',0,21,209,1,16,4,11
	.byte	'ERROR_ADDRESS',0,4
	.word	462
	.byte	32,0,2,35,0,0,32
	.byte	'Ifx_CPU_DEADD_Bits',0,21,212,1,3
	.word	52105
	.byte	10
	.byte	'_Ifx_CPU_DIEAR_Bits',0,21,215,1,16,4,11
	.byte	'TA',0,4
	.word	462
	.byte	32,0,2,35,0,0,32
	.byte	'Ifx_CPU_DIEAR_Bits',0,21,218,1,3
	.word	52185
	.byte	10
	.byte	'_Ifx_CPU_DIETR_Bits',0,21,221,1,16,4,11
	.byte	'IED',0,4
	.word	462
	.byte	1,31,2,35,0,11
	.byte	'IE_T',0,4
	.word	462
	.byte	1,30,2,35,0,11
	.byte	'IE_C',0,4
	.word	462
	.byte	1,29,2,35,0,11
	.byte	'IE_S',0,4
	.word	462
	.byte	1,28,2,35,0,11
	.byte	'IE_BI',0,4
	.word	462
	.byte	1,27,2,35,0,11
	.byte	'E_INFO',0,4
	.word	462
	.byte	6,21,2,35,0,11
	.byte	'IE_DUAL',0,4
	.word	462
	.byte	1,20,2,35,0,11
	.byte	'IE_SP',0,4
	.word	462
	.byte	1,19,2,35,0,11
	.byte	'IE_BS',0,4
	.word	462
	.byte	1,18,2,35,0,11
	.byte	'reserved_14',0,4
	.word	462
	.byte	18,0,2,35,0,0,32
	.byte	'Ifx_CPU_DIETR_Bits',0,21,233,1,3
	.word	52254
	.byte	10
	.byte	'_Ifx_CPU_DMS_Bits',0,21,236,1,16,4,11
	.byte	'reserved_0',0,4
	.word	462
	.byte	1,31,2,35,0,11
	.byte	'DMSValue',0,4
	.word	462
	.byte	31,0,2,35,0,0,32
	.byte	'Ifx_CPU_DMS_Bits',0,21,240,1,3
	.word	52483
	.byte	10
	.byte	'_Ifx_CPU_DPR_L_Bits',0,21,243,1,16,4,11
	.byte	'reserved_0',0,4
	.word	462
	.byte	3,29,2,35,0,11
	.byte	'LOWBND',0,4
	.word	462
	.byte	29,0,2,35,0,0,32
	.byte	'Ifx_CPU_DPR_L_Bits',0,21,247,1,3
	.word	52576
	.byte	10
	.byte	'_Ifx_CPU_DPR_U_Bits',0,21,250,1,16,4,11
	.byte	'reserved_0',0,4
	.word	462
	.byte	3,29,2,35,0,11
	.byte	'UPPBND',0,4
	.word	462
	.byte	29,0,2,35,0,0,32
	.byte	'Ifx_CPU_DPR_U_Bits',0,21,254,1,3
	.word	52671
	.byte	10
	.byte	'_Ifx_CPU_DPRE_Bits',0,21,129,2,16,4,11
	.byte	'RE',0,4
	.word	462
	.byte	16,16,2,35,0,11
	.byte	'reserved_16',0,4
	.word	462
	.byte	16,0,2,35,0,0,32
	.byte	'Ifx_CPU_DPRE_Bits',0,21,133,2,3
	.word	52766
	.byte	10
	.byte	'_Ifx_CPU_DPWE_Bits',0,21,136,2,16,4,11
	.byte	'WE',0,4
	.word	462
	.byte	16,16,2,35,0,11
	.byte	'reserved_16',0,4
	.word	462
	.byte	16,0,2,35,0,0,32
	.byte	'Ifx_CPU_DPWE_Bits',0,21,140,2,3
	.word	52856
	.byte	10
	.byte	'_Ifx_CPU_DSTR_Bits',0,21,143,2,16,4,11
	.byte	'SRE',0,4
	.word	462
	.byte	1,31,2,35,0,11
	.byte	'GAE',0,4
	.word	462
	.byte	1,30,2,35,0,11
	.byte	'LBE',0,4
	.word	462
	.byte	1,29,2,35,0,11
	.byte	'reserved_3',0,4
	.word	462
	.byte	3,26,2,35,0,11
	.byte	'CRE',0,4
	.word	462
	.byte	1,25,2,35,0,11
	.byte	'reserved_7',0,4
	.word	462
	.byte	7,18,2,35,0,11
	.byte	'DTME',0,4
	.word	462
	.byte	1,17,2,35,0,11
	.byte	'LOE',0,4
	.word	462
	.byte	1,16,2,35,0,11
	.byte	'SDE',0,4
	.word	462
	.byte	1,15,2,35,0,11
	.byte	'SCE',0,4
	.word	462
	.byte	1,14,2,35,0,11
	.byte	'CAC',0,4
	.word	462
	.byte	1,13,2,35,0,11
	.byte	'MPE',0,4
	.word	462
	.byte	1,12,2,35,0,11
	.byte	'CLE',0,4
	.word	462
	.byte	1,11,2,35,0,11
	.byte	'reserved_21',0,4
	.word	462
	.byte	3,8,2,35,0,11
	.byte	'ALN',0,4
	.word	462
	.byte	1,7,2,35,0,11
	.byte	'reserved_25',0,4
	.word	462
	.byte	7,0,2,35,0,0,32
	.byte	'Ifx_CPU_DSTR_Bits',0,21,161,2,3
	.word	52946
	.byte	10
	.byte	'_Ifx_CPU_EXEVT_Bits',0,21,164,2,16,4,11
	.byte	'EVTA',0,4
	.word	462
	.byte	3,29,2,35,0,11
	.byte	'BBM',0,4
	.word	462
	.byte	1,28,2,35,0,11
	.byte	'BOD',0,4
	.word	462
	.byte	1,27,2,35,0,11
	.byte	'SUSP',0,4
	.word	462
	.byte	1,26,2,35,0,11
	.byte	'CNT',0,4
	.word	462
	.byte	2,24,2,35,0,11
	.byte	'reserved_8',0,4
	.word	462
	.byte	24,0,2,35,0,0,32
	.byte	'Ifx_CPU_EXEVT_Bits',0,21,172,2,3
	.word	53270
	.byte	10
	.byte	'_Ifx_CPU_FCX_Bits',0,21,175,2,16,4,11
	.byte	'FCXO',0,4
	.word	462
	.byte	16,16,2,35,0,11
	.byte	'FCXS',0,4
	.word	462
	.byte	4,12,2,35,0,11
	.byte	'reserved_20',0,4
	.word	462
	.byte	12,0,2,35,0,0,32
	.byte	'Ifx_CPU_FCX_Bits',0,21,180,2,3
	.word	53424
	.byte	10
	.byte	'_Ifx_CPU_FPU_TRAP_CON_Bits',0,21,183,2,16,4,11
	.byte	'TST',0,4
	.word	462
	.byte	1,31,2,35,0,11
	.byte	'TCL',0,4
	.word	462
	.byte	1,30,2,35,0,11
	.byte	'reserved_2',0,4
	.word	462
	.byte	6,24,2,35,0,11
	.byte	'RM',0,4
	.word	462
	.byte	2,22,2,35,0,11
	.byte	'reserved_10',0,4
	.word	462
	.byte	8,14,2,35,0,11
	.byte	'FXE',0,4
	.word	462
	.byte	1,13,2,35,0,11
	.byte	'FUE',0,4
	.word	462
	.byte	1,12,2,35,0,11
	.byte	'FZE',0,4
	.word	462
	.byte	1,11,2,35,0,11
	.byte	'FVE',0,4
	.word	462
	.byte	1,10,2,35,0,11
	.byte	'FIE',0,4
	.word	462
	.byte	1,9,2,35,0,11
	.byte	'reserved_23',0,4
	.word	462
	.byte	3,6,2,35,0,11
	.byte	'FX',0,4
	.word	462
	.byte	1,5,2,35,0,11
	.byte	'FU',0,4
	.word	462
	.byte	1,4,2,35,0,11
	.byte	'FZ',0,4
	.word	462
	.byte	1,3,2,35,0,11
	.byte	'FV',0,4
	.word	462
	.byte	1,2,2,35,0,11
	.byte	'FI',0,4
	.word	462
	.byte	1,1,2,35,0,11
	.byte	'reserved_31',0,4
	.word	462
	.byte	1,0,2,35,0,0,32
	.byte	'Ifx_CPU_FPU_TRAP_CON_Bits',0,21,202,2,3
	.word	53530
	.byte	10
	.byte	'_Ifx_CPU_FPU_TRAP_OPC_Bits',0,21,205,2,16,4,11
	.byte	'OPC',0,4
	.word	462
	.byte	8,24,2,35,0,11
	.byte	'FMT',0,4
	.word	462
	.byte	1,23,2,35,0,11
	.byte	'reserved_9',0,4
	.word	462
	.byte	7,16,2,35,0,11
	.byte	'DREG',0,4
	.word	462
	.byte	4,12,2,35,0,11
	.byte	'reserved_20',0,4
	.word	462
	.byte	12,0,2,35,0,0,32
	.byte	'Ifx_CPU_FPU_TRAP_OPC_Bits',0,21,212,2,3
	.word	53879
	.byte	10
	.byte	'_Ifx_CPU_FPU_TRAP_PC_Bits',0,21,215,2,16,4,11
	.byte	'PC',0,4
	.word	462
	.byte	32,0,2,35,0,0,32
	.byte	'Ifx_CPU_FPU_TRAP_PC_Bits',0,21,218,2,3
	.word	54039
	.byte	10
	.byte	'_Ifx_CPU_FPU_TRAP_SRC1_Bits',0,21,221,2,16,4,11
	.byte	'SRC1',0,4
	.word	462
	.byte	32,0,2,35,0,0,32
	.byte	'Ifx_CPU_FPU_TRAP_SRC1_Bits',0,21,224,2,3
	.word	54120
	.byte	10
	.byte	'_Ifx_CPU_FPU_TRAP_SRC2_Bits',0,21,227,2,16,4,11
	.byte	'SRC2',0,4
	.word	462
	.byte	32,0,2,35,0,0,32
	.byte	'Ifx_CPU_FPU_TRAP_SRC2_Bits',0,21,230,2,3
	.word	54207
	.byte	10
	.byte	'_Ifx_CPU_FPU_TRAP_SRC3_Bits',0,21,233,2,16,4,11
	.byte	'SRC3',0,4
	.word	462
	.byte	32,0,2,35,0,0,32
	.byte	'Ifx_CPU_FPU_TRAP_SRC3_Bits',0,21,236,2,3
	.word	54294
	.byte	10
	.byte	'_Ifx_CPU_ICNT_Bits',0,21,239,2,16,4,11
	.byte	'CountValue',0,4
	.word	462
	.byte	31,1,2,35,0,11
	.byte	'SOvf',0,4
	.word	462
	.byte	1,0,2,35,0,0,32
	.byte	'Ifx_CPU_ICNT_Bits',0,21,243,2,3
	.word	54381
	.byte	10
	.byte	'_Ifx_CPU_ICR_Bits',0,21,246,2,16,4,11
	.byte	'CCPN',0,4
	.word	462
	.byte	10,22,2,35,0,11
	.byte	'reserved_10',0,4
	.word	462
	.byte	5,17,2,35,0,11
	.byte	'IE',0,4
	.word	462
	.byte	1,16,2,35,0,11
	.byte	'PIPN',0,4
	.word	462
	.byte	10,6,2,35,0,11
	.byte	'reserved_26',0,4
	.word	462
	.byte	6,0,2,35,0,0,32
	.byte	'Ifx_CPU_ICR_Bits',0,21,253,2,3
	.word	54472
	.byte	10
	.byte	'_Ifx_CPU_ISP_Bits',0,21,128,3,16,4,11
	.byte	'ISP',0,4
	.word	462
	.byte	32,0,2,35,0,0,32
	.byte	'Ifx_CPU_ISP_Bits',0,21,131,3,3
	.word	54615
	.byte	10
	.byte	'_Ifx_CPU_LCX_Bits',0,21,134,3,16,4,11
	.byte	'LCXO',0,4
	.word	462
	.byte	16,16,2,35,0,11
	.byte	'LCXS',0,4
	.word	462
	.byte	4,12,2,35,0,11
	.byte	'reserved_20',0,4
	.word	462
	.byte	12,0,2,35,0,0,32
	.byte	'Ifx_CPU_LCX_Bits',0,21,139,3,3
	.word	54681
	.byte	10
	.byte	'_Ifx_CPU_M1CNT_Bits',0,21,142,3,16,4,11
	.byte	'CountValue',0,4
	.word	462
	.byte	31,1,2,35,0,11
	.byte	'SOvf',0,4
	.word	462
	.byte	1,0,2,35,0,0,32
	.byte	'Ifx_CPU_M1CNT_Bits',0,21,146,3,3
	.word	54787
	.byte	10
	.byte	'_Ifx_CPU_M2CNT_Bits',0,21,149,3,16,4,11
	.byte	'CountValue',0,4
	.word	462
	.byte	31,1,2,35,0,11
	.byte	'SOvf',0,4
	.word	462
	.byte	1,0,2,35,0,0,32
	.byte	'Ifx_CPU_M2CNT_Bits',0,21,153,3,3
	.word	54880
	.byte	10
	.byte	'_Ifx_CPU_M3CNT_Bits',0,21,156,3,16,4,11
	.byte	'CountValue',0,4
	.word	462
	.byte	31,1,2,35,0,11
	.byte	'SOvf',0,4
	.word	462
	.byte	1,0,2,35,0,0,32
	.byte	'Ifx_CPU_M3CNT_Bits',0,21,160,3,3
	.word	54973
	.byte	10
	.byte	'_Ifx_CPU_PC_Bits',0,21,163,3,16,4,11
	.byte	'reserved_0',0,4
	.word	462
	.byte	1,31,2,35,0,11
	.byte	'PC',0,4
	.word	462
	.byte	31,0,2,35,0,0,32
	.byte	'Ifx_CPU_PC_Bits',0,21,167,3,3
	.word	55066
	.byte	10
	.byte	'_Ifx_CPU_PCON0_Bits',0,21,170,3,16,4,11
	.byte	'reserved_0',0,4
	.word	462
	.byte	1,31,2,35,0,11
	.byte	'PCBYP',0,4
	.word	462
	.byte	1,30,2,35,0,11
	.byte	'reserved_2',0,4
	.word	462
	.byte	30,0,2,35,0,0,32
	.byte	'Ifx_CPU_PCON0_Bits',0,21,175,3,3
	.word	55151
	.byte	10
	.byte	'_Ifx_CPU_PCON1_Bits',0,21,178,3,16,4,11
	.byte	'PCINV',0,4
	.word	462
	.byte	1,31,2,35,0,11
	.byte	'PBINV',0,4
	.word	462
	.byte	1,30,2,35,0,11
	.byte	'reserved_2',0,4
	.word	462
	.byte	30,0,2,35,0,0,32
	.byte	'Ifx_CPU_PCON1_Bits',0,21,183,3,3
	.word	55267
	.byte	10
	.byte	'_Ifx_CPU_PCON2_Bits',0,21,186,3,16,4,11
	.byte	'PCACHE_SZE',0,4
	.word	462
	.byte	16,16,2,35,0,11
	.byte	'PSCRATCH_SZE',0,4
	.word	462
	.byte	16,0,2,35,0,0,32
	.byte	'Ifx_CPU_PCON2_Bits',0,21,190,3,3
	.word	55378
	.byte	10
	.byte	'_Ifx_CPU_PCXI_Bits',0,21,193,3,16,4,11
	.byte	'PCXO',0,4
	.word	462
	.byte	16,16,2,35,0,11
	.byte	'PCXS',0,4
	.word	462
	.byte	4,12,2,35,0,11
	.byte	'UL',0,4
	.word	462
	.byte	1,11,2,35,0,11
	.byte	'PIE',0,4
	.word	462
	.byte	1,10,2,35,0,11
	.byte	'PCPN',0,4
	.word	462
	.byte	10,0,2,35,0,0,32
	.byte	'Ifx_CPU_PCXI_Bits',0,21,200,3,3
	.word	55479
	.byte	10
	.byte	'_Ifx_CPU_PIEAR_Bits',0,21,203,3,16,4,11
	.byte	'TA',0,4
	.word	462
	.byte	32,0,2,35,0,0,32
	.byte	'Ifx_CPU_PIEAR_Bits',0,21,206,3,3
	.word	55609
	.byte	10
	.byte	'_Ifx_CPU_PIETR_Bits',0,21,209,3,16,4,11
	.byte	'IED',0,4
	.word	462
	.byte	1,31,2,35,0,11
	.byte	'IE_T',0,4
	.word	462
	.byte	1,30,2,35,0,11
	.byte	'IE_C',0,4
	.word	462
	.byte	1,29,2,35,0,11
	.byte	'IE_S',0,4
	.word	462
	.byte	1,28,2,35,0,11
	.byte	'IE_BI',0,4
	.word	462
	.byte	1,27,2,35,0,11
	.byte	'E_INFO',0,4
	.word	462
	.byte	6,21,2,35,0,11
	.byte	'IE_DUAL',0,4
	.word	462
	.byte	1,20,2,35,0,11
	.byte	'IE_SP',0,4
	.word	462
	.byte	1,19,2,35,0,11
	.byte	'IE_BS',0,4
	.word	462
	.byte	1,18,2,35,0,11
	.byte	'reserved_14',0,4
	.word	462
	.byte	18,0,2,35,0,0,32
	.byte	'Ifx_CPU_PIETR_Bits',0,21,221,3,3
	.word	55678
	.byte	10
	.byte	'_Ifx_CPU_PMA0_Bits',0,21,224,3,16,4,11
	.byte	'reserved_0',0,4
	.word	462
	.byte	13,19,2,35,0,11
	.byte	'DAC',0,4
	.word	462
	.byte	3,16,2,35,0,11
	.byte	'reserved_16',0,4
	.word	462
	.byte	16,0,2,35,0,0,32
	.byte	'Ifx_CPU_PMA0_Bits',0,21,229,3,3
	.word	55907
	.byte	10
	.byte	'_Ifx_CPU_PMA1_Bits',0,21,232,3,16,4,11
	.byte	'reserved_0',0,4
	.word	462
	.byte	14,18,2,35,0,11
	.byte	'CAC',0,4
	.word	462
	.byte	2,16,2,35,0,11
	.byte	'reserved_16',0,4
	.word	462
	.byte	16,0,2,35,0,0,32
	.byte	'Ifx_CPU_PMA1_Bits',0,21,237,3,3
	.word	56020
	.byte	10
	.byte	'_Ifx_CPU_PMA2_Bits',0,21,240,3,16,4,11
	.byte	'PSI',0,4
	.word	462
	.byte	16,16,2,35,0,11
	.byte	'reserved_16',0,4
	.word	462
	.byte	16,0,2,35,0,0,32
	.byte	'Ifx_CPU_PMA2_Bits',0,21,244,3,3
	.word	56133
	.byte	10
	.byte	'_Ifx_CPU_PSTR_Bits',0,21,247,3,16,4,11
	.byte	'FRE',0,4
	.word	462
	.byte	1,31,2,35,0,11
	.byte	'reserved_1',0,4
	.word	462
	.byte	1,30,2,35,0,11
	.byte	'FBE',0,4
	.word	462
	.byte	1,29,2,35,0,11
	.byte	'reserved_3',0,4
	.word	462
	.byte	9,20,2,35,0,11
	.byte	'FPE',0,4
	.word	462
	.byte	1,19,2,35,0,11
	.byte	'reserved_13',0,4
	.word	462
	.byte	1,18,2,35,0,11
	.byte	'FME',0,4
	.word	462
	.byte	1,17,2,35,0,11
	.byte	'reserved_15',0,4
	.word	462
	.byte	17,0,2,35,0,0,32
	.byte	'Ifx_CPU_PSTR_Bits',0,21,129,4,3
	.word	56224
	.byte	10
	.byte	'_Ifx_CPU_PSW_Bits',0,21,132,4,16,4,11
	.byte	'CDC',0,4
	.word	462
	.byte	7,25,2,35,0,11
	.byte	'CDE',0,4
	.word	462
	.byte	1,24,2,35,0,11
	.byte	'GW',0,4
	.word	462
	.byte	1,23,2,35,0,11
	.byte	'IS',0,4
	.word	462
	.byte	1,22,2,35,0,11
	.byte	'IO',0,4
	.word	462
	.byte	2,20,2,35,0,11
	.byte	'PRS',0,4
	.word	462
	.byte	2,18,2,35,0,11
	.byte	'S',0,4
	.word	462
	.byte	1,17,2,35,0,11
	.byte	'reserved_15',0,4
	.word	462
	.byte	12,5,2,35,0,11
	.byte	'SAV',0,4
	.word	462
	.byte	1,4,2,35,0,11
	.byte	'AV',0,4
	.word	462
	.byte	1,3,2,35,0,11
	.byte	'SV',0,4
	.word	462
	.byte	1,2,2,35,0,11
	.byte	'V',0,4
	.word	462
	.byte	1,1,2,35,0,11
	.byte	'C',0,4
	.word	462
	.byte	1,0,2,35,0,0,32
	.byte	'Ifx_CPU_PSW_Bits',0,21,147,4,3
	.word	56427
	.byte	10
	.byte	'_Ifx_CPU_SEGEN_Bits',0,21,150,4,16,4,11
	.byte	'ADFLIP',0,4
	.word	462
	.byte	8,24,2,35,0,11
	.byte	'ADTYPE',0,4
	.word	462
	.byte	2,22,2,35,0,11
	.byte	'reserved_10',0,4
	.word	462
	.byte	21,1,2,35,0,11
	.byte	'AE',0,4
	.word	462
	.byte	1,0,2,35,0,0,32
	.byte	'Ifx_CPU_SEGEN_Bits',0,21,156,4,3
	.word	56670
	.byte	10
	.byte	'_Ifx_CPU_SMACON_Bits',0,21,159,4,16,4,11
	.byte	'PC',0,4
	.word	462
	.byte	1,31,2,35,0,11
	.byte	'reserved_1',0,4
	.word	462
	.byte	1,30,2,35,0,11
	.byte	'PT',0,4
	.word	462
	.byte	1,29,2,35,0,11
	.byte	'reserved_3',0,4
	.word	462
	.byte	5,24,2,35,0,11
	.byte	'DC',0,4
	.word	462
	.byte	1,23,2,35,0,11
	.byte	'reserved_9',0,4
	.word	462
	.byte	1,22,2,35,0,11
	.byte	'DT',0,4
	.word	462
	.byte	1,21,2,35,0,11
	.byte	'reserved_11',0,4
	.word	462
	.byte	13,8,2,35,0,11
	.byte	'IODT',0,4
	.word	462
	.byte	1,7,2,35,0,11
	.byte	'reserved_25',0,4
	.word	462
	.byte	7,0,2,35,0,0,32
	.byte	'Ifx_CPU_SMACON_Bits',0,21,171,4,3
	.word	56798
	.byte	10
	.byte	'_Ifx_CPU_SPROT_ACCENA_Bits',0,21,174,4,16,4,11
	.byte	'EN',0,4
	.word	439
	.byte	32,0,2,35,0,0,32
	.byte	'Ifx_CPU_SPROT_ACCENA_Bits',0,21,177,4,3
	.word	57039
	.byte	10
	.byte	'_Ifx_CPU_SPROT_ACCENB_Bits',0,21,180,4,16,4,11
	.byte	'reserved_0',0,4
	.word	439
	.byte	32,0,2,35,0,0,32
	.byte	'Ifx_CPU_SPROT_ACCENB_Bits',0,21,183,4,3
	.word	57122
	.byte	10
	.byte	'_Ifx_CPU_SPROT_RGN_ACCENA_Bits',0,21,186,4,16,4,11
	.byte	'EN',0,4
	.word	439
	.byte	32,0,2,35,0,0,32
	.byte	'Ifx_CPU_SPROT_RGN_ACCENA_Bits',0,21,189,4,3
	.word	57213
	.byte	10
	.byte	'_Ifx_CPU_SPROT_RGN_ACCENB_Bits',0,21,192,4,16,4,11
	.byte	'reserved_0',0,4
	.word	439
	.byte	32,0,2,35,0,0,32
	.byte	'Ifx_CPU_SPROT_RGN_ACCENB_Bits',0,21,195,4,3
	.word	57304
	.byte	10
	.byte	'_Ifx_CPU_SPROT_RGN_LA_Bits',0,21,198,4,16,4,11
	.byte	'reserved_0',0,1
	.word	614
	.byte	5,3,2,35,0,11
	.byte	'ADDR',0,4
	.word	439
	.byte	27,0,2,35,0,0,32
	.byte	'Ifx_CPU_SPROT_RGN_LA_Bits',0,21,202,4,3
	.word	57403
	.byte	10
	.byte	'_Ifx_CPU_SPROT_RGN_UA_Bits',0,21,205,4,16,4,11
	.byte	'reserved_0',0,1
	.word	614
	.byte	5,3,2,35,0,11
	.byte	'ADDR',0,4
	.word	439
	.byte	27,0,2,35,0,0,32
	.byte	'Ifx_CPU_SPROT_RGN_UA_Bits',0,21,209,4,3
	.word	57510
	.byte	10
	.byte	'_Ifx_CPU_SWEVT_Bits',0,21,212,4,16,4,11
	.byte	'EVTA',0,4
	.word	462
	.byte	3,29,2,35,0,11
	.byte	'BBM',0,4
	.word	462
	.byte	1,28,2,35,0,11
	.byte	'BOD',0,4
	.word	462
	.byte	1,27,2,35,0,11
	.byte	'SUSP',0,4
	.word	462
	.byte	1,26,2,35,0,11
	.byte	'CNT',0,4
	.word	462
	.byte	2,24,2,35,0,11
	.byte	'reserved_8',0,4
	.word	462
	.byte	24,0,2,35,0,0,32
	.byte	'Ifx_CPU_SWEVT_Bits',0,21,220,4,3
	.word	57617
	.byte	10
	.byte	'_Ifx_CPU_SYSCON_Bits',0,21,223,4,16,4,11
	.byte	'FCDSF',0,4
	.word	462
	.byte	1,31,2,35,0,11
	.byte	'PROTEN',0,4
	.word	462
	.byte	1,30,2,35,0,11
	.byte	'TPROTEN',0,4
	.word	462
	.byte	1,29,2,35,0,11
	.byte	'IS',0,4
	.word	462
	.byte	1,28,2,35,0,11
	.byte	'IT',0,4
	.word	462
	.byte	1,27,2,35,0,11
	.byte	'reserved_5',0,4
	.word	462
	.byte	27,0,2,35,0,0,32
	.byte	'Ifx_CPU_SYSCON_Bits',0,21,231,4,3
	.word	57771
	.byte	10
	.byte	'_Ifx_CPU_TASK_ASI_Bits',0,21,234,4,16,4,11
	.byte	'ASI',0,4
	.word	462
	.byte	5,27,2,35,0,11
	.byte	'reserved_5',0,4
	.word	462
	.byte	27,0,2,35,0,0,32
	.byte	'Ifx_CPU_TASK_ASI_Bits',0,21,238,4,3
	.word	57932
	.byte	10
	.byte	'_Ifx_CPU_TPS_CON_Bits',0,21,241,4,16,4,11
	.byte	'TEXP0',0,4
	.word	462
	.byte	1,31,2,35,0,11
	.byte	'TEXP1',0,4
	.word	462
	.byte	1,30,2,35,0,11
	.byte	'TEXP2',0,4
	.word	462
	.byte	1,29,2,35,0,11
	.byte	'reserved_3',0,4
	.word	462
	.byte	13,16,2,35,0,11
	.byte	'TTRAP',0,4
	.word	462
	.byte	1,15,2,35,0,11
	.byte	'reserved_17',0,4
	.word	462
	.byte	15,0,2,35,0,0,32
	.byte	'Ifx_CPU_TPS_CON_Bits',0,21,249,4,3
	.word	58030
	.byte	10
	.byte	'_Ifx_CPU_TPS_TIMER_Bits',0,21,252,4,16,4,11
	.byte	'Timer',0,4
	.word	462
	.byte	32,0,2,35,0,0,32
	.byte	'Ifx_CPU_TPS_TIMER_Bits',0,21,255,4,3
	.word	58202
	.byte	10
	.byte	'_Ifx_CPU_TR_ADR_Bits',0,21,130,5,16,4,11
	.byte	'ADDR',0,4
	.word	462
	.byte	32,0,2,35,0,0,32
	.byte	'Ifx_CPU_TR_ADR_Bits',0,21,133,5,3
	.word	58282
	.byte	10
	.byte	'_Ifx_CPU_TR_EVT_Bits',0,21,136,5,16,4,11
	.byte	'EVTA',0,4
	.word	462
	.byte	3,29,2,35,0,11
	.byte	'BBM',0,4
	.word	462
	.byte	1,28,2,35,0,11
	.byte	'BOD',0,4
	.word	462
	.byte	1,27,2,35,0,11
	.byte	'SUSP',0,4
	.word	462
	.byte	1,26,2,35,0,11
	.byte	'CNT',0,4
	.word	462
	.byte	2,24,2,35,0,11
	.byte	'reserved_8',0,4
	.word	462
	.byte	4,20,2,35,0,11
	.byte	'TYP',0,4
	.word	462
	.byte	1,19,2,35,0,11
	.byte	'RNG',0,4
	.word	462
	.byte	1,18,2,35,0,11
	.byte	'reserved_14',0,4
	.word	462
	.byte	1,17,2,35,0,11
	.byte	'ASI_EN',0,4
	.word	462
	.byte	1,16,2,35,0,11
	.byte	'ASI',0,4
	.word	462
	.byte	5,11,2,35,0,11
	.byte	'reserved_21',0,4
	.word	462
	.byte	6,5,2,35,0,11
	.byte	'AST',0,4
	.word	462
	.byte	1,4,2,35,0,11
	.byte	'ALD',0,4
	.word	462
	.byte	1,3,2,35,0,11
	.byte	'reserved_29',0,4
	.word	462
	.byte	3,0,2,35,0,0,32
	.byte	'Ifx_CPU_TR_EVT_Bits',0,21,153,5,3
	.word	58355
	.byte	10
	.byte	'_Ifx_CPU_TRIG_ACC_Bits',0,21,156,5,16,4,11
	.byte	'T0',0,4
	.word	462
	.byte	1,31,2,35,0,11
	.byte	'T1',0,4
	.word	462
	.byte	1,30,2,35,0,11
	.byte	'T2',0,4
	.word	462
	.byte	1,29,2,35,0,11
	.byte	'T3',0,4
	.word	462
	.byte	1,28,2,35,0,11
	.byte	'T4',0,4
	.word	462
	.byte	1,27,2,35,0,11
	.byte	'T5',0,4
	.word	462
	.byte	1,26,2,35,0,11
	.byte	'T6',0,4
	.word	462
	.byte	1,25,2,35,0,11
	.byte	'T7',0,4
	.word	462
	.byte	1,24,2,35,0,11
	.byte	'reserved_8',0,4
	.word	462
	.byte	24,0,2,35,0,0,32
	.byte	'Ifx_CPU_TRIG_ACC_Bits',0,21,167,5,3
	.word	58673
	.byte	12,21,175,5,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	49891
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_A',0,21,180,5,3
	.word	58868
	.byte	12,21,183,5,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	49952
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_BIV',0,21,188,5,3
	.word	58927
	.byte	12,21,191,5,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	50031
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_BTV',0,21,196,5,3
	.word	58988
	.byte	12,21,199,5,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	50117
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_CCNT',0,21,204,5,3
	.word	59049
	.byte	12,21,207,5,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	50206
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_CCTRL',0,21,212,5,3
	.word	59111
	.byte	12,21,215,5,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	50352
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_COMPAT',0,21,220,5,3
	.word	59174
	.byte	12,21,223,5,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	50479
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_CORE_ID',0,21,228,5,3
	.word	59238
	.byte	12,21,231,5,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	50577
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_CPR_L',0,21,236,5,3
	.word	59303
	.byte	12,21,239,5,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	50670
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_CPR_U',0,21,244,5,3
	.word	59366
	.byte	12,21,247,5,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	50763
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_CPU_ID',0,21,252,5,3
	.word	59429
	.byte	12,21,255,5,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	50870
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_CPXE',0,21,132,6,3
	.word	59493
	.byte	12,21,135,6,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	50957
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_CREVT',0,21,140,6,3
	.word	59555
	.byte	12,21,143,6,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	51111
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_CUS_ID',0,21,148,6,3
	.word	59618
	.byte	12,21,151,6,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	51205
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_D',0,21,156,6,3
	.word	59682
	.byte	12,21,159,6,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	51268
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_DATR',0,21,164,6,3
	.word	59741
	.byte	12,21,167,6,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	51486
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_DBGSR',0,21,172,6,3
	.word	59803
	.byte	12,21,175,6,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	51701
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_DBGTCR',0,21,180,6,3
	.word	59866
	.byte	12,21,183,6,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	51795
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_DCON0',0,21,188,6,3
	.word	59930
	.byte	12,21,191,6,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	51911
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_DCON2',0,21,196,6,3
	.word	59993
	.byte	12,21,199,6,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	52012
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_DCX',0,21,204,6,3
	.word	60056
	.byte	12,21,207,6,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	52105
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_DEADD',0,21,212,6,3
	.word	60117
	.byte	12,21,215,6,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	52185
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_DIEAR',0,21,220,6,3
	.word	60180
	.byte	12,21,223,6,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	52254
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_DIETR',0,21,228,6,3
	.word	60243
	.byte	12,21,231,6,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	52483
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_DMS',0,21,236,6,3
	.word	60306
	.byte	12,21,239,6,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	52576
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_DPR_L',0,21,244,6,3
	.word	60367
	.byte	12,21,247,6,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	52671
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_DPR_U',0,21,252,6,3
	.word	60430
	.byte	12,21,255,6,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	52766
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_DPRE',0,21,132,7,3
	.word	60493
	.byte	12,21,135,7,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	52856
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_DPWE',0,21,140,7,3
	.word	60555
	.byte	12,21,143,7,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	52946
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_DSTR',0,21,148,7,3
	.word	60617
	.byte	12,21,151,7,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	53270
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_EXEVT',0,21,156,7,3
	.word	60679
	.byte	12,21,159,7,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	53424
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_FCX',0,21,164,7,3
	.word	60742
	.byte	12,21,167,7,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	53530
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_FPU_TRAP_CON',0,21,172,7,3
	.word	60803
	.byte	12,21,175,7,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	53879
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_FPU_TRAP_OPC',0,21,180,7,3
	.word	60873
	.byte	12,21,183,7,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	54039
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_FPU_TRAP_PC',0,21,188,7,3
	.word	60943
	.byte	12,21,191,7,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	54120
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_FPU_TRAP_SRC1',0,21,196,7,3
	.word	61012
	.byte	12,21,199,7,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	54207
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_FPU_TRAP_SRC2',0,21,204,7,3
	.word	61083
	.byte	12,21,207,7,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	54294
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_FPU_TRAP_SRC3',0,21,212,7,3
	.word	61154
	.byte	12,21,215,7,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	54381
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_ICNT',0,21,220,7,3
	.word	61225
	.byte	12,21,223,7,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	54472
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_ICR',0,21,228,7,3
	.word	61287
	.byte	12,21,231,7,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	54615
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_ISP',0,21,236,7,3
	.word	61348
	.byte	12,21,239,7,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	54681
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_LCX',0,21,244,7,3
	.word	61409
	.byte	12,21,247,7,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	54787
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_M1CNT',0,21,252,7,3
	.word	61470
	.byte	12,21,255,7,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	54880
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_M2CNT',0,21,132,8,3
	.word	61533
	.byte	12,21,135,8,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	54973
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_M3CNT',0,21,140,8,3
	.word	61596
	.byte	12,21,143,8,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	55066
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_PC',0,21,148,8,3
	.word	61659
	.byte	12,21,151,8,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	55151
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_PCON0',0,21,156,8,3
	.word	61719
	.byte	12,21,159,8,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	55267
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_PCON1',0,21,164,8,3
	.word	61782
	.byte	12,21,167,8,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	55378
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_PCON2',0,21,172,8,3
	.word	61845
	.byte	12,21,175,8,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	55479
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_PCXI',0,21,180,8,3
	.word	61908
	.byte	12,21,183,8,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	55609
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_PIEAR',0,21,188,8,3
	.word	61970
	.byte	12,21,191,8,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	55678
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_PIETR',0,21,196,8,3
	.word	62033
	.byte	12,21,199,8,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	55907
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_PMA0',0,21,204,8,3
	.word	62096
	.byte	12,21,207,8,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	56020
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_PMA1',0,21,212,8,3
	.word	62158
	.byte	12,21,215,8,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	56133
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_PMA2',0,21,220,8,3
	.word	62220
	.byte	12,21,223,8,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	56224
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_PSTR',0,21,228,8,3
	.word	62282
	.byte	12,21,231,8,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	56427
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_PSW',0,21,236,8,3
	.word	62344
	.byte	12,21,239,8,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	56670
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_SEGEN',0,21,244,8,3
	.word	62405
	.byte	12,21,247,8,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	56798
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_SMACON',0,21,252,8,3
	.word	62468
	.byte	12,21,255,8,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	57039
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_SPROT_ACCENA',0,21,132,9,3
	.word	62532
	.byte	12,21,135,9,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	57122
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_SPROT_ACCENB',0,21,140,9,3
	.word	62602
	.byte	12,21,143,9,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	57213
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_SPROT_RGN_ACCENA',0,21,148,9,3
	.word	62672
	.byte	12,21,151,9,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	57304
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_SPROT_RGN_ACCENB',0,21,156,9,3
	.word	62746
	.byte	12,21,159,9,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	57403
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_SPROT_RGN_LA',0,21,164,9,3
	.word	62820
	.byte	12,21,167,9,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	57510
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_SPROT_RGN_UA',0,21,172,9,3
	.word	62890
	.byte	12,21,175,9,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	57617
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_SWEVT',0,21,180,9,3
	.word	62960
	.byte	12,21,183,9,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	57771
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_SYSCON',0,21,188,9,3
	.word	63023
	.byte	12,21,191,9,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	57932
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_TASK_ASI',0,21,196,9,3
	.word	63087
	.byte	12,21,199,9,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	58030
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_TPS_CON',0,21,204,9,3
	.word	63153
	.byte	12,21,207,9,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	58202
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_TPS_TIMER',0,21,212,9,3
	.word	63218
	.byte	12,21,215,9,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	58282
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_TR_ADR',0,21,220,9,3
	.word	63285
	.byte	12,21,223,9,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	58355
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_TR_EVT',0,21,228,9,3
	.word	63349
	.byte	12,21,231,9,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	58673
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_TRIG_ACC',0,21,236,9,3
	.word	63413
	.byte	10
	.byte	'_Ifx_CPU_CPR',0,21,247,9,25,8,13
	.byte	'L',0
	.word	59303
	.byte	4,2,35,0,13
	.byte	'U',0
	.word	59366
	.byte	4,2,35,4,0,14
	.word	63479
	.byte	32
	.byte	'Ifx_CPU_CPR',0,21,251,9,3
	.word	63521
	.byte	10
	.byte	'_Ifx_CPU_DPR',0,21,254,9,25,8,13
	.byte	'L',0
	.word	60367
	.byte	4,2,35,0,13
	.byte	'U',0
	.word	60430
	.byte	4,2,35,4,0,14
	.word	63547
	.byte	32
	.byte	'Ifx_CPU_DPR',0,21,130,10,3
	.word	63589
	.byte	10
	.byte	'_Ifx_CPU_SPROT_RGN',0,21,133,10,25,16,13
	.byte	'LA',0
	.word	62820
	.byte	4,2,35,0,13
	.byte	'UA',0
	.word	62890
	.byte	4,2,35,4,13
	.byte	'ACCENA',0
	.word	62672
	.byte	4,2,35,8,13
	.byte	'ACCENB',0
	.word	62746
	.byte	4,2,35,12,0,14
	.word	63615
	.byte	32
	.byte	'Ifx_CPU_SPROT_RGN',0,21,139,10,3
	.word	63697
	.byte	18,12
	.word	63218
	.byte	19,2,0,10
	.byte	'_Ifx_CPU_TPS',0,21,142,10,25,16,13
	.byte	'CON',0
	.word	63153
	.byte	4,2,35,0,13
	.byte	'TIMER',0
	.word	63729
	.byte	12,2,35,4,0,14
	.word	63738
	.byte	32
	.byte	'Ifx_CPU_TPS',0,21,146,10,3
	.word	63786
	.byte	10
	.byte	'_Ifx_CPU_TR',0,21,149,10,25,8,13
	.byte	'EVT',0
	.word	63349
	.byte	4,2,35,0,13
	.byte	'ADR',0
	.word	63285
	.byte	4,2,35,4,0,14
	.word	63812
	.byte	32
	.byte	'Ifx_CPU_TR',0,21,153,10,3
	.word	63857
	.byte	18,176,32
	.word	614
	.byte	19,175,32,0,18,208,223,1
	.word	614
	.byte	19,207,223,1,0,18,248,1
	.word	614
	.byte	19,247,1,0,18,244,29
	.word	614
	.byte	19,243,29,0,18,188,3
	.word	614
	.byte	19,187,3,0,18,232,3
	.word	614
	.byte	19,231,3,0,18,252,23
	.word	614
	.byte	19,251,23,0,18,228,63
	.word	614
	.byte	19,227,63,0,18,128,1
	.word	63547
	.byte	19,15,0,14
	.word	63972
	.byte	18,128,31
	.word	614
	.byte	19,255,30,0,18,64
	.word	63479
	.byte	19,7,0,14
	.word	63998
	.byte	18,192,31
	.word	614
	.byte	19,191,31,0,18,16
	.word	59493
	.byte	19,3,0,18,16
	.word	60493
	.byte	19,3,0,18,16
	.word	60555
	.byte	19,3,0,18,208,7
	.word	614
	.byte	19,207,7,0,14
	.word	63738
	.byte	18,240,23
	.word	614
	.byte	19,239,23,0,18,64
	.word	63812
	.byte	19,7,0,14
	.word	64077
	.byte	18,192,23
	.word	614
	.byte	19,191,23,0,18,232,1
	.word	614
	.byte	19,231,1,0,18,180,1
	.word	614
	.byte	19,179,1,0,18,172,1
	.word	614
	.byte	19,171,1,0,18,64
	.word	59682
	.byte	19,15,0,18,64
	.word	614
	.byte	19,63,0,18,64
	.word	58868
	.byte	19,15,0,10
	.byte	'_Ifx_CPU',0,21,166,10,25,128,128,4,13
	.byte	'reserved_0',0
	.word	63882
	.byte	176,32,2,35,0,13
	.byte	'SEGEN',0
	.word	62405
	.byte	4,3,35,176,32,13
	.byte	'reserved_1034',0
	.word	63893
	.byte	208,223,1,3,35,180,32,13
	.byte	'TASK_ASI',0
	.word	63087
	.byte	4,4,35,132,128,2,13
	.byte	'reserved_8008',0
	.word	63906
	.byte	248,1,4,35,136,128,2,13
	.byte	'PMA0',0
	.word	62096
	.byte	4,4,35,128,130,2,13
	.byte	'PMA1',0
	.word	62158
	.byte	4,4,35,132,130,2,13
	.byte	'PMA2',0
	.word	62220
	.byte	4,4,35,136,130,2,13
	.byte	'reserved_810C',0
	.word	63917
	.byte	244,29,4,35,140,130,2,13
	.byte	'DCON2',0
	.word	59993
	.byte	4,4,35,128,160,2,13
	.byte	'reserved_9004',0
	.word	4637
	.byte	8,4,35,132,160,2,13
	.byte	'SMACON',0
	.word	62468
	.byte	4,4,35,140,160,2,13
	.byte	'DSTR',0
	.word	60617
	.byte	4,4,35,144,160,2,13
	.byte	'reserved_9014',0
	.word	2818
	.byte	4,4,35,148,160,2,13
	.byte	'DATR',0
	.word	59741
	.byte	4,4,35,152,160,2,13
	.byte	'DEADD',0
	.word	60117
	.byte	4,4,35,156,160,2,13
	.byte	'DIEAR',0
	.word	60180
	.byte	4,4,35,160,160,2,13
	.byte	'DIETR',0
	.word	60243
	.byte	4,4,35,164,160,2,13
	.byte	'reserved_9028',0
	.word	4008
	.byte	24,4,35,168,160,2,13
	.byte	'DCON0',0
	.word	59930
	.byte	4,4,35,192,160,2,13
	.byte	'reserved_9044',0
	.word	63928
	.byte	188,3,4,35,196,160,2,13
	.byte	'PSTR',0
	.word	62282
	.byte	4,4,35,128,164,2,13
	.byte	'PCON1',0
	.word	61782
	.byte	4,4,35,132,164,2,13
	.byte	'PCON2',0
	.word	61845
	.byte	4,4,35,136,164,2,13
	.byte	'PCON0',0
	.word	61719
	.byte	4,4,35,140,164,2,13
	.byte	'PIEAR',0
	.word	61970
	.byte	4,4,35,144,164,2,13
	.byte	'PIETR',0
	.word	62033
	.byte	4,4,35,148,164,2,13
	.byte	'reserved_9218',0
	.word	63939
	.byte	232,3,4,35,152,164,2,13
	.byte	'COMPAT',0
	.word	59174
	.byte	4,4,35,128,168,2,13
	.byte	'reserved_9404',0
	.word	63950
	.byte	252,23,4,35,132,168,2,13
	.byte	'FPU_TRAP_CON',0
	.word	60803
	.byte	4,4,35,128,192,2,13
	.byte	'FPU_TRAP_PC',0
	.word	60943
	.byte	4,4,35,132,192,2,13
	.byte	'FPU_TRAP_OPC',0
	.word	60873
	.byte	4,4,35,136,192,2,13
	.byte	'reserved_A00C',0
	.word	2818
	.byte	4,4,35,140,192,2,13
	.byte	'FPU_TRAP_SRC1',0
	.word	61012
	.byte	4,4,35,144,192,2,13
	.byte	'FPU_TRAP_SRC2',0
	.word	61083
	.byte	4,4,35,148,192,2,13
	.byte	'FPU_TRAP_SRC3',0
	.word	61154
	.byte	4,4,35,152,192,2,13
	.byte	'reserved_A01C',0
	.word	63961
	.byte	228,63,4,35,156,192,2,13
	.byte	'DPR',0
	.word	63982
	.byte	128,1,4,35,128,128,3,13
	.byte	'reserved_C080',0
	.word	63987
	.byte	128,31,4,35,128,129,3,13
	.byte	'CPR',0
	.word	64007
	.byte	64,4,35,128,160,3,13
	.byte	'reserved_D040',0
	.word	64012
	.byte	192,31,4,35,192,160,3,13
	.byte	'CPXE',0
	.word	64023
	.byte	16,4,35,128,192,3,13
	.byte	'DPRE',0
	.word	64032
	.byte	16,4,35,144,192,3,13
	.byte	'DPWE',0
	.word	64041
	.byte	16,4,35,160,192,3,13
	.byte	'reserved_E030',0
	.word	64050
	.byte	208,7,4,35,176,192,3,13
	.byte	'TPS',0
	.word	64061
	.byte	16,4,35,128,200,3,13
	.byte	'reserved_E410',0
	.word	64066
	.byte	240,23,4,35,144,200,3,13
	.byte	'TR',0
	.word	64086
	.byte	64,4,35,128,224,3,13
	.byte	'reserved_F040',0
	.word	64091
	.byte	192,23,4,35,192,224,3,13
	.byte	'CCTRL',0
	.word	59111
	.byte	4,4,35,128,248,3,13
	.byte	'CCNT',0
	.word	59049
	.byte	4,4,35,132,248,3,13
	.byte	'ICNT',0
	.word	61225
	.byte	4,4,35,136,248,3,13
	.byte	'M1CNT',0
	.word	61470
	.byte	4,4,35,140,248,3,13
	.byte	'M2CNT',0
	.word	61533
	.byte	4,4,35,144,248,3,13
	.byte	'M3CNT',0
	.word	61596
	.byte	4,4,35,148,248,3,13
	.byte	'reserved_FC18',0
	.word	64102
	.byte	232,1,4,35,152,248,3,13
	.byte	'DBGSR',0
	.word	59803
	.byte	4,4,35,128,250,3,13
	.byte	'reserved_FD04',0
	.word	2818
	.byte	4,4,35,132,250,3,13
	.byte	'EXEVT',0
	.word	60679
	.byte	4,4,35,136,250,3,13
	.byte	'CREVT',0
	.word	59555
	.byte	4,4,35,140,250,3,13
	.byte	'SWEVT',0
	.word	62960
	.byte	4,4,35,144,250,3,13
	.byte	'reserved_FD14',0
	.word	12900
	.byte	28,4,35,148,250,3,13
	.byte	'TRIG_ACC',0
	.word	63413
	.byte	4,4,35,176,250,3,13
	.byte	'reserved_FD34',0
	.word	4977
	.byte	12,4,35,180,250,3,13
	.byte	'DMS',0
	.word	60306
	.byte	4,4,35,192,250,3,13
	.byte	'DCX',0
	.word	60056
	.byte	4,4,35,196,250,3,13
	.byte	'DBGTCR',0
	.word	59866
	.byte	4,4,35,200,250,3,13
	.byte	'reserved_FD4C',0
	.word	64113
	.byte	180,1,4,35,204,250,3,13
	.byte	'PCXI',0
	.word	61908
	.byte	4,4,35,128,252,3,13
	.byte	'PSW',0
	.word	62344
	.byte	4,4,35,132,252,3,13
	.byte	'PC',0
	.word	61659
	.byte	4,4,35,136,252,3,13
	.byte	'reserved_FE0C',0
	.word	4637
	.byte	8,4,35,140,252,3,13
	.byte	'SYSCON',0
	.word	63023
	.byte	4,4,35,148,252,3,13
	.byte	'CPU_ID',0
	.word	59429
	.byte	4,4,35,152,252,3,13
	.byte	'CORE_ID',0
	.word	59238
	.byte	4,4,35,156,252,3,13
	.byte	'BIV',0
	.word	58927
	.byte	4,4,35,160,252,3,13
	.byte	'BTV',0
	.word	58988
	.byte	4,4,35,164,252,3,13
	.byte	'ISP',0
	.word	61348
	.byte	4,4,35,168,252,3,13
	.byte	'ICR',0
	.word	61287
	.byte	4,4,35,172,252,3,13
	.byte	'reserved_FE30',0
	.word	4637
	.byte	8,4,35,176,252,3,13
	.byte	'FCX',0
	.word	60742
	.byte	4,4,35,184,252,3,13
	.byte	'LCX',0
	.word	61409
	.byte	4,4,35,188,252,3,13
	.byte	'reserved_FE40',0
	.word	47832
	.byte	16,4,35,192,252,3,13
	.byte	'CUS_ID',0
	.word	59618
	.byte	4,4,35,208,252,3,13
	.byte	'reserved_FE54',0
	.word	64124
	.byte	172,1,4,35,212,252,3,13
	.byte	'D',0
	.word	64135
	.byte	64,4,35,128,254,3,13
	.byte	'reserved_FF40',0
	.word	64144
	.byte	64,4,35,192,254,3,13
	.byte	'A',0
	.word	64153
	.byte	64,4,35,128,255,3,13
	.byte	'reserved_FFC0',0
	.word	64144
	.byte	64,4,35,192,255,3,0,14
	.word	64162
	.byte	32
	.byte	'Ifx_CPU',0,21,130,11,3
	.word	65953
	.byte	15,6,127,9,1,16
	.byte	'IfxCpu_Id_0',0,0,16
	.byte	'IfxCpu_Id_1',0,1,16
	.byte	'IfxCpu_Id_none',0,2,0,32
	.byte	'IfxCpu_Id',0,6,132,1,3
	.word	65975
	.byte	32
	.byte	'IfxCpu_ResourceCpu',0,6,161,1,3
	.word	1426
	.byte	32
	.byte	'Ifx_SRC_SRCR_Bits',0,10,62,3
	.word	10134
	.byte	32
	.byte	'Ifx_SRC_SRCR',0,10,75,3
	.word	10424
	.byte	10
	.byte	'_Ifx_SRC_AGBT',0,10,86,25,4,13
	.byte	'SR',0
	.word	10424
	.byte	4,2,35,0,0,14
	.word	66120
	.byte	32
	.byte	'Ifx_SRC_AGBT',0,10,89,3
	.word	66152
	.byte	10
	.byte	'_Ifx_SRC_ASCLIN',0,10,92,25,12,13
	.byte	'TX',0
	.word	10424
	.byte	4,2,35,0,13
	.byte	'RX',0
	.word	10424
	.byte	4,2,35,4,13
	.byte	'ERR',0
	.word	10424
	.byte	4,2,35,8,0,14
	.word	66178
	.byte	32
	.byte	'Ifx_SRC_ASCLIN',0,10,97,3
	.word	66237
	.byte	10
	.byte	'_Ifx_SRC_BCUSPB',0,10,100,25,4,13
	.byte	'SBSRC',0
	.word	10424
	.byte	4,2,35,0,0,14
	.word	66265
	.byte	32
	.byte	'Ifx_SRC_BCUSPB',0,10,103,3
	.word	66302
	.byte	18,64
	.word	10424
	.byte	19,15,0,10
	.byte	'_Ifx_SRC_CAN',0,10,106,25,64,13
	.byte	'INT',0
	.word	66330
	.byte	64,2,35,0,0,14
	.word	66339
	.byte	32
	.byte	'Ifx_SRC_CAN',0,10,109,3
	.word	66371
	.byte	10
	.byte	'_Ifx_SRC_CCU6',0,10,112,25,16,13
	.byte	'SR0',0
	.word	10424
	.byte	4,2,35,0,13
	.byte	'SR1',0
	.word	10424
	.byte	4,2,35,4,13
	.byte	'SR2',0
	.word	10424
	.byte	4,2,35,8,13
	.byte	'SR3',0
	.word	10424
	.byte	4,2,35,12,0,14
	.word	66396
	.byte	32
	.byte	'Ifx_SRC_CCU6',0,10,118,3
	.word	66468
	.byte	18,8
	.word	10424
	.byte	19,1,0,10
	.byte	'_Ifx_SRC_CERBERUS',0,10,121,25,8,13
	.byte	'SR',0
	.word	66494
	.byte	8,2,35,0,0,14
	.word	66503
	.byte	32
	.byte	'Ifx_SRC_CERBERUS',0,10,124,3
	.word	66539
	.byte	10
	.byte	'_Ifx_SRC_CIF',0,10,127,25,16,13
	.byte	'MI',0
	.word	10424
	.byte	4,2,35,0,13
	.byte	'MIEP',0
	.word	10424
	.byte	4,2,35,4,13
	.byte	'ISP',0
	.word	10424
	.byte	4,2,35,8,13
	.byte	'MJPEG',0
	.word	10424
	.byte	4,2,35,12,0,14
	.word	66569
	.byte	32
	.byte	'Ifx_SRC_CIF',0,10,133,1,3
	.word	66642
	.byte	10
	.byte	'_Ifx_SRC_CPU',0,10,136,1,25,4,13
	.byte	'SBSRC',0
	.word	10424
	.byte	4,2,35,0,0,14
	.word	66668
	.byte	32
	.byte	'Ifx_SRC_CPU',0,10,139,1,3
	.word	66703
	.byte	18,192,1
	.word	10424
	.byte	19,47,0,10
	.byte	'_Ifx_SRC_DMA',0,10,142,1,25,208,1,13
	.byte	'ERR',0
	.word	10424
	.byte	4,2,35,0,13
	.byte	'reserved_4',0
	.word	4977
	.byte	12,2,35,4,13
	.byte	'CH',0
	.word	66729
	.byte	192,1,2,35,16,0,14
	.word	66739
	.byte	32
	.byte	'Ifx_SRC_DMA',0,10,147,1,3
	.word	66806
	.byte	10
	.byte	'_Ifx_SRC_DSADC',0,10,150,1,25,8,13
	.byte	'SRM',0
	.word	10424
	.byte	4,2,35,0,13
	.byte	'SRA',0
	.word	10424
	.byte	4,2,35,4,0,14
	.word	66832
	.byte	32
	.byte	'Ifx_SRC_DSADC',0,10,154,1,3
	.word	66880
	.byte	10
	.byte	'_Ifx_SRC_EMEM',0,10,157,1,25,4,13
	.byte	'SR',0
	.word	10424
	.byte	4,2,35,0,0,14
	.word	66908
	.byte	32
	.byte	'Ifx_SRC_EMEM',0,10,160,1,3
	.word	66941
	.byte	10
	.byte	'_Ifx_SRC_ERAY',0,10,163,1,25,80,13
	.byte	'INT',0
	.word	66494
	.byte	8,2,35,0,13
	.byte	'TINT',0
	.word	66494
	.byte	8,2,35,8,13
	.byte	'NDAT',0
	.word	66494
	.byte	8,2,35,16,13
	.byte	'MBSC',0
	.word	66494
	.byte	8,2,35,24,13
	.byte	'OBUSY',0
	.word	10424
	.byte	4,2,35,32,13
	.byte	'IBUSY',0
	.word	10424
	.byte	4,2,35,36,13
	.byte	'reserved_28',0
	.word	47841
	.byte	40,2,35,40,0,14
	.word	66968
	.byte	32
	.byte	'Ifx_SRC_ERAY',0,10,172,1,3
	.word	67095
	.byte	10
	.byte	'_Ifx_SRC_ETH',0,10,175,1,25,4,13
	.byte	'SR',0
	.word	10424
	.byte	4,2,35,0,0,14
	.word	67122
	.byte	32
	.byte	'Ifx_SRC_ETH',0,10,178,1,3
	.word	67154
	.byte	10
	.byte	'_Ifx_SRC_FCE',0,10,181,1,25,4,13
	.byte	'SR',0
	.word	10424
	.byte	4,2,35,0,0,14
	.word	67180
	.byte	32
	.byte	'Ifx_SRC_FCE',0,10,184,1,3
	.word	67212
	.byte	10
	.byte	'_Ifx_SRC_FFT',0,10,187,1,25,12,13
	.byte	'DONE',0
	.word	10424
	.byte	4,2,35,0,13
	.byte	'ERR',0
	.word	10424
	.byte	4,2,35,4,13
	.byte	'RFS',0
	.word	10424
	.byte	4,2,35,8,0,14
	.word	67238
	.byte	32
	.byte	'Ifx_SRC_FFT',0,10,192,1,3
	.word	67298
	.byte	10
	.byte	'_Ifx_SRC_GPSR',0,10,195,1,25,32,13
	.byte	'SR0',0
	.word	10424
	.byte	4,2,35,0,13
	.byte	'SR1',0
	.word	10424
	.byte	4,2,35,4,13
	.byte	'SR2',0
	.word	10424
	.byte	4,2,35,8,13
	.byte	'SR3',0
	.word	10424
	.byte	4,2,35,12,13
	.byte	'reserved_10',0
	.word	47832
	.byte	16,2,35,16,0,14
	.word	67324
	.byte	32
	.byte	'Ifx_SRC_GPSR',0,10,202,1,3
	.word	67418
	.byte	10
	.byte	'_Ifx_SRC_GPT12',0,10,205,1,25,48,13
	.byte	'CIRQ',0
	.word	10424
	.byte	4,2,35,0,13
	.byte	'T2',0
	.word	10424
	.byte	4,2,35,4,13
	.byte	'T3',0
	.word	10424
	.byte	4,2,35,8,13
	.byte	'T4',0
	.word	10424
	.byte	4,2,35,12,13
	.byte	'T5',0
	.word	10424
	.byte	4,2,35,16,13
	.byte	'T6',0
	.word	10424
	.byte	4,2,35,20,13
	.byte	'reserved_18',0
	.word	4008
	.byte	24,2,35,24,0,14
	.word	67445
	.byte	32
	.byte	'Ifx_SRC_GPT12',0,10,214,1,3
	.word	67562
	.byte	18,12
	.word	10424
	.byte	19,2,0,18,32
	.word	10424
	.byte	19,7,0,18,32
	.word	67599
	.byte	19,0,0,18,88
	.word	614
	.byte	19,87,0,18,108
	.word	10424
	.byte	19,26,0,18,96
	.word	614
	.byte	19,95,0,18,96
	.word	67599
	.byte	19,2,0,18,160,3
	.word	614
	.byte	19,159,3,0,18,64
	.word	67599
	.byte	19,1,0,18,192,3
	.word	614
	.byte	19,191,3,0,18,16
	.word	10424
	.byte	19,3,0,18,64
	.word	67684
	.byte	19,3,0,18,192,2
	.word	614
	.byte	19,191,2,0,18,52
	.word	614
	.byte	19,51,0,10
	.byte	'_Ifx_SRC_GTM',0,10,217,1,25,204,18,13
	.byte	'AEIIRQ',0
	.word	10424
	.byte	4,2,35,0,13
	.byte	'ARUIRQ',0
	.word	67590
	.byte	12,2,35,4,13
	.byte	'reserved_10',0
	.word	2818
	.byte	4,2,35,16,13
	.byte	'BRCIRQ',0
	.word	10424
	.byte	4,2,35,20,13
	.byte	'CMPIRQ',0
	.word	10424
	.byte	4,2,35,24,13
	.byte	'SPEIRQ',0
	.word	66494
	.byte	8,2,35,28,13
	.byte	'reserved_24',0
	.word	4637
	.byte	8,2,35,36,13
	.byte	'PSM',0
	.word	67608
	.byte	32,2,35,44,13
	.byte	'reserved_4C',0
	.word	67617
	.byte	88,2,35,76,13
	.byte	'DPLL',0
	.word	67626
	.byte	108,3,35,164,1,13
	.byte	'reserved_110',0
	.word	67635
	.byte	96,3,35,144,2,13
	.byte	'ERR',0
	.word	10424
	.byte	4,3,35,240,2,13
	.byte	'reserved_174',0
	.word	4977
	.byte	12,3,35,244,2,13
	.byte	'TIM',0
	.word	67644
	.byte	96,3,35,128,3,13
	.byte	'reserved_1E0',0
	.word	67653
	.byte	160,3,3,35,224,3,13
	.byte	'MCS',0
	.word	67644
	.byte	96,3,35,128,7,13
	.byte	'reserved_3E0',0
	.word	67653
	.byte	160,3,3,35,224,7,13
	.byte	'TOM',0
	.word	67664
	.byte	64,3,35,128,11,13
	.byte	'reserved_5C0',0
	.word	67673
	.byte	192,3,3,35,192,11,13
	.byte	'ATOM',0
	.word	67693
	.byte	64,3,35,128,15,13
	.byte	'reserved_7C0',0
	.word	67702
	.byte	192,2,3,35,192,15,13
	.byte	'MCSW0',0
	.word	67590
	.byte	12,3,35,128,18,13
	.byte	'reserved_90C',0
	.word	67713
	.byte	52,3,35,140,18,13
	.byte	'MCSW1',0
	.word	67590
	.byte	12,3,35,192,18,0,14
	.word	67722
	.byte	32
	.byte	'Ifx_SRC_GTM',0,10,243,1,3
	.word	68182
	.byte	10
	.byte	'_Ifx_SRC_HSCT',0,10,246,1,25,4,13
	.byte	'SR',0
	.word	10424
	.byte	4,2,35,0,0,14
	.word	68208
	.byte	32
	.byte	'Ifx_SRC_HSCT',0,10,249,1,3
	.word	68241
	.byte	10
	.byte	'_Ifx_SRC_HSSL',0,10,252,1,25,16,13
	.byte	'COK',0
	.word	10424
	.byte	4,2,35,0,13
	.byte	'RDI',0
	.word	10424
	.byte	4,2,35,4,13
	.byte	'ERR',0
	.word	10424
	.byte	4,2,35,8,13
	.byte	'TRG',0
	.word	10424
	.byte	4,2,35,12,0,14
	.word	68268
	.byte	32
	.byte	'Ifx_SRC_HSSL',0,10,130,2,3
	.word	68341
	.byte	18,56
	.word	614
	.byte	19,55,0,10
	.byte	'_Ifx_SRC_I2C',0,10,133,2,25,80,13
	.byte	'BREQ',0
	.word	10424
	.byte	4,2,35,0,13
	.byte	'LBREQ',0
	.word	10424
	.byte	4,2,35,4,13
	.byte	'SREQ',0
	.word	10424
	.byte	4,2,35,8,13
	.byte	'LSREQ',0
	.word	10424
	.byte	4,2,35,12,13
	.byte	'ERR',0
	.word	10424
	.byte	4,2,35,16,13
	.byte	'P',0
	.word	10424
	.byte	4,2,35,20,13
	.byte	'reserved_18',0
	.word	68368
	.byte	56,2,35,24,0,14
	.word	68377
	.byte	32
	.byte	'Ifx_SRC_I2C',0,10,142,2,3
	.word	68500
	.byte	10
	.byte	'_Ifx_SRC_LMU',0,10,145,2,25,4,13
	.byte	'SR',0
	.word	10424
	.byte	4,2,35,0,0,14
	.word	68526
	.byte	32
	.byte	'Ifx_SRC_LMU',0,10,148,2,3
	.word	68558
	.byte	10
	.byte	'_Ifx_SRC_MSC',0,10,151,2,25,20,13
	.byte	'SR0',0
	.word	10424
	.byte	4,2,35,0,13
	.byte	'SR1',0
	.word	10424
	.byte	4,2,35,4,13
	.byte	'SR2',0
	.word	10424
	.byte	4,2,35,8,13
	.byte	'SR3',0
	.word	10424
	.byte	4,2,35,12,13
	.byte	'SR4',0
	.word	10424
	.byte	4,2,35,16,0,14
	.word	68584
	.byte	32
	.byte	'Ifx_SRC_MSC',0,10,158,2,3
	.word	68669
	.byte	10
	.byte	'_Ifx_SRC_PMU',0,10,161,2,25,4,13
	.byte	'SR',0
	.word	10424
	.byte	4,2,35,0,0,14
	.word	68695
	.byte	32
	.byte	'Ifx_SRC_PMU',0,10,164,2,3
	.word	68727
	.byte	10
	.byte	'_Ifx_SRC_PSI5',0,10,167,2,25,32,13
	.byte	'SR',0
	.word	67599
	.byte	32,2,35,0,0,14
	.word	68753
	.byte	32
	.byte	'Ifx_SRC_PSI5',0,10,170,2,3
	.word	68786
	.byte	10
	.byte	'_Ifx_SRC_PSI5S',0,10,173,2,25,32,13
	.byte	'SR',0
	.word	67599
	.byte	32,2,35,0,0,14
	.word	68813
	.byte	32
	.byte	'Ifx_SRC_PSI5S',0,10,176,2,3
	.word	68847
	.byte	10
	.byte	'_Ifx_SRC_QSPI',0,10,179,2,25,24,13
	.byte	'TX',0
	.word	10424
	.byte	4,2,35,0,13
	.byte	'RX',0
	.word	10424
	.byte	4,2,35,4,13
	.byte	'ERR',0
	.word	10424
	.byte	4,2,35,8,13
	.byte	'PT',0
	.word	10424
	.byte	4,2,35,12,13
	.byte	'HC',0
	.word	10424
	.byte	4,2,35,16,13
	.byte	'U',0
	.word	10424
	.byte	4,2,35,20,0,14
	.word	68875
	.byte	32
	.byte	'Ifx_SRC_QSPI',0,10,187,2,3
	.word	68968
	.byte	10
	.byte	'_Ifx_SRC_SCR',0,10,190,2,25,4,13
	.byte	'SR',0
	.word	10424
	.byte	4,2,35,0,0,14
	.word	68995
	.byte	32
	.byte	'Ifx_SRC_SCR',0,10,193,2,3
	.word	69027
	.byte	10
	.byte	'_Ifx_SRC_SCU',0,10,196,2,25,20,13
	.byte	'DTS',0
	.word	10424
	.byte	4,2,35,0,13
	.byte	'ERU',0
	.word	67684
	.byte	16,2,35,4,0,14
	.word	69053
	.byte	32
	.byte	'Ifx_SRC_SCU',0,10,200,2,3
	.word	69099
	.byte	18,24
	.word	10424
	.byte	19,5,0,10
	.byte	'_Ifx_SRC_SENT',0,10,203,2,25,24,13
	.byte	'SR',0
	.word	69125
	.byte	24,2,35,0,0,14
	.word	69134
	.byte	32
	.byte	'Ifx_SRC_SENT',0,10,206,2,3
	.word	69167
	.byte	10
	.byte	'_Ifx_SRC_SMU',0,10,209,2,25,12,13
	.byte	'SR',0
	.word	67590
	.byte	12,2,35,0,0,14
	.word	69194
	.byte	32
	.byte	'Ifx_SRC_SMU',0,10,212,2,3
	.word	69226
	.byte	10
	.byte	'_Ifx_SRC_STM',0,10,215,2,25,8,13
	.byte	'SR0',0
	.word	10424
	.byte	4,2,35,0,13
	.byte	'SR1',0
	.word	10424
	.byte	4,2,35,4,0,14
	.word	69252
	.byte	32
	.byte	'Ifx_SRC_STM',0,10,219,2,3
	.word	69298
	.byte	10
	.byte	'_Ifx_SRC_VADCCG',0,10,222,2,25,16,13
	.byte	'SR0',0
	.word	10424
	.byte	4,2,35,0,13
	.byte	'SR1',0
	.word	10424
	.byte	4,2,35,4,13
	.byte	'SR2',0
	.word	10424
	.byte	4,2,35,8,13
	.byte	'SR3',0
	.word	10424
	.byte	4,2,35,12,0,14
	.word	69324
	.byte	32
	.byte	'Ifx_SRC_VADCCG',0,10,228,2,3
	.word	69399
	.byte	10
	.byte	'_Ifx_SRC_VADCG',0,10,231,2,25,16,13
	.byte	'SR0',0
	.word	10424
	.byte	4,2,35,0,13
	.byte	'SR1',0
	.word	10424
	.byte	4,2,35,4,13
	.byte	'SR2',0
	.word	10424
	.byte	4,2,35,8,13
	.byte	'SR3',0
	.word	10424
	.byte	4,2,35,12,0,14
	.word	69428
	.byte	32
	.byte	'Ifx_SRC_VADCG',0,10,237,2,3
	.word	69502
	.byte	10
	.byte	'_Ifx_SRC_XBAR',0,10,240,2,25,4,13
	.byte	'SRC',0
	.word	10424
	.byte	4,2,35,0,0,14
	.word	69530
	.byte	32
	.byte	'Ifx_SRC_XBAR',0,10,243,2,3
	.word	69564
	.byte	18,4
	.word	66120
	.byte	19,0,0,14
	.word	69591
	.byte	10
	.byte	'_Ifx_SRC_GAGBT',0,10,128,3,25,4,13
	.byte	'AGBT',0
	.word	69600
	.byte	4,2,35,0,0,14
	.word	69605
	.byte	32
	.byte	'Ifx_SRC_GAGBT',0,10,131,3,3
	.word	69641
	.byte	18,48
	.word	66178
	.byte	19,3,0,14
	.word	69669
	.byte	10
	.byte	'_Ifx_SRC_GASCLIN',0,10,134,3,25,48,13
	.byte	'ASCLIN',0
	.word	69678
	.byte	48,2,35,0,0,14
	.word	69683
	.byte	32
	.byte	'Ifx_SRC_GASCLIN',0,10,137,3,3
	.word	69723
	.byte	14
	.word	66265
	.byte	10
	.byte	'_Ifx_SRC_GBCU',0,10,140,3,25,4,13
	.byte	'SPB',0
	.word	69753
	.byte	4,2,35,0,0,14
	.word	69758
	.byte	32
	.byte	'Ifx_SRC_GBCU',0,10,143,3,3
	.word	69792
	.byte	18,64
	.word	66339
	.byte	19,0,0,14
	.word	69819
	.byte	10
	.byte	'_Ifx_SRC_GCAN',0,10,146,3,25,64,13
	.byte	'CAN',0
	.word	69828
	.byte	64,2,35,0,0,14
	.word	69833
	.byte	32
	.byte	'Ifx_SRC_GCAN',0,10,149,3,3
	.word	69867
	.byte	18,32
	.word	66396
	.byte	19,1,0,14
	.word	69894
	.byte	10
	.byte	'_Ifx_SRC_GCCU6',0,10,152,3,25,32,13
	.byte	'CCU6',0
	.word	69903
	.byte	32,2,35,0,0,14
	.word	69908
	.byte	32
	.byte	'Ifx_SRC_GCCU6',0,10,155,3,3
	.word	69944
	.byte	14
	.word	66503
	.byte	10
	.byte	'_Ifx_SRC_GCERBERUS',0,10,158,3,25,8,13
	.byte	'CERBERUS',0
	.word	69972
	.byte	8,2,35,0,0,14
	.word	69977
	.byte	32
	.byte	'Ifx_SRC_GCERBERUS',0,10,161,3,3
	.word	70021
	.byte	18,16
	.word	66569
	.byte	19,0,0,14
	.word	70053
	.byte	10
	.byte	'_Ifx_SRC_GCIF',0,10,164,3,25,16,13
	.byte	'CIF',0
	.word	70062
	.byte	16,2,35,0,0,14
	.word	70067
	.byte	32
	.byte	'Ifx_SRC_GCIF',0,10,167,3,3
	.word	70101
	.byte	18,8
	.word	66668
	.byte	19,1,0,14
	.word	70128
	.byte	10
	.byte	'_Ifx_SRC_GCPU',0,10,170,3,25,8,13
	.byte	'CPU',0
	.word	70137
	.byte	8,2,35,0,0,14
	.word	70142
	.byte	32
	.byte	'Ifx_SRC_GCPU',0,10,173,3,3
	.word	70176
	.byte	18,208,1
	.word	66739
	.byte	19,0,0,14
	.word	70203
	.byte	10
	.byte	'_Ifx_SRC_GDMA',0,10,176,3,25,208,1,13
	.byte	'DMA',0
	.word	70213
	.byte	208,1,2,35,0,0,14
	.word	70218
	.byte	32
	.byte	'Ifx_SRC_GDMA',0,10,179,3,3
	.word	70254
	.byte	14
	.word	66832
	.byte	14
	.word	66832
	.byte	14
	.word	66832
	.byte	10
	.byte	'_Ifx_SRC_GDSADC',0,10,182,3,25,32,13
	.byte	'DSADC0',0
	.word	70281
	.byte	8,2,35,0,13
	.byte	'reserved_8',0
	.word	4637
	.byte	8,2,35,8,13
	.byte	'DSADC2',0
	.word	70286
	.byte	8,2,35,16,13
	.byte	'DSADC3',0
	.word	70291
	.byte	8,2,35,24,0,14
	.word	70296
	.byte	32
	.byte	'Ifx_SRC_GDSADC',0,10,188,3,3
	.word	70387
	.byte	18,4
	.word	66908
	.byte	19,0,0,14
	.word	70416
	.byte	10
	.byte	'_Ifx_SRC_GEMEM',0,10,191,3,25,4,13
	.byte	'EMEM',0
	.word	70425
	.byte	4,2,35,0,0,14
	.word	70430
	.byte	32
	.byte	'Ifx_SRC_GEMEM',0,10,194,3,3
	.word	70466
	.byte	18,80
	.word	66968
	.byte	19,0,0,14
	.word	70494
	.byte	10
	.byte	'_Ifx_SRC_GERAY',0,10,197,3,25,80,13
	.byte	'ERAY',0
	.word	70503
	.byte	80,2,35,0,0,14
	.word	70508
	.byte	32
	.byte	'Ifx_SRC_GERAY',0,10,200,3,3
	.word	70544
	.byte	18,4
	.word	67122
	.byte	19,0,0,14
	.word	70572
	.byte	10
	.byte	'_Ifx_SRC_GETH',0,10,203,3,25,4,13
	.byte	'ETH',0
	.word	70581
	.byte	4,2,35,0,0,14
	.word	70586
	.byte	32
	.byte	'Ifx_SRC_GETH',0,10,206,3,3
	.word	70620
	.byte	18,4
	.word	67180
	.byte	19,0,0,14
	.word	70647
	.byte	10
	.byte	'_Ifx_SRC_GFCE',0,10,209,3,25,4,13
	.byte	'FCE',0
	.word	70656
	.byte	4,2,35,0,0,14
	.word	70661
	.byte	32
	.byte	'Ifx_SRC_GFCE',0,10,212,3,3
	.word	70695
	.byte	18,12
	.word	67238
	.byte	19,0,0,14
	.word	70722
	.byte	10
	.byte	'_Ifx_SRC_GFFT',0,10,215,3,25,12,13
	.byte	'FFT',0
	.word	70731
	.byte	12,2,35,0,0,14
	.word	70736
	.byte	32
	.byte	'Ifx_SRC_GFFT',0,10,218,3,3
	.word	70770
	.byte	18,64
	.word	67324
	.byte	19,1,0,14
	.word	70797
	.byte	10
	.byte	'_Ifx_SRC_GGPSR',0,10,221,3,25,64,13
	.byte	'GPSR',0
	.word	70806
	.byte	64,2,35,0,0,14
	.word	70811
	.byte	32
	.byte	'Ifx_SRC_GGPSR',0,10,224,3,3
	.word	70847
	.byte	18,48
	.word	67445
	.byte	19,0,0,14
	.word	70875
	.byte	10
	.byte	'_Ifx_SRC_GGPT12',0,10,227,3,25,48,13
	.byte	'GPT12',0
	.word	70884
	.byte	48,2,35,0,0,14
	.word	70889
	.byte	32
	.byte	'Ifx_SRC_GGPT12',0,10,230,3,3
	.word	70927
	.byte	18,204,18
	.word	67722
	.byte	19,0,0,14
	.word	70956
	.byte	10
	.byte	'_Ifx_SRC_GGTM',0,10,233,3,25,204,18,13
	.byte	'GTM',0
	.word	70966
	.byte	204,18,2,35,0,0,14
	.word	70971
	.byte	32
	.byte	'Ifx_SRC_GGTM',0,10,236,3,3
	.word	71007
	.byte	18,4
	.word	68208
	.byte	19,0,0,14
	.word	71034
	.byte	10
	.byte	'_Ifx_SRC_GHSCT',0,10,239,3,25,4,13
	.byte	'HSCT',0
	.word	71043
	.byte	4,2,35,0,0,14
	.word	71048
	.byte	32
	.byte	'Ifx_SRC_GHSCT',0,10,242,3,3
	.word	71084
	.byte	18,64
	.word	68268
	.byte	19,3,0,14
	.word	71112
	.byte	10
	.byte	'_Ifx_SRC_GHSSL',0,10,245,3,25,68,13
	.byte	'HSSL',0
	.word	71121
	.byte	64,2,35,0,13
	.byte	'EXI',0
	.word	10424
	.byte	4,2,35,64,0,14
	.word	71126
	.byte	32
	.byte	'Ifx_SRC_GHSSL',0,10,249,3,3
	.word	71175
	.byte	18,80
	.word	68377
	.byte	19,0,0,14
	.word	71203
	.byte	10
	.byte	'_Ifx_SRC_GI2C',0,10,252,3,25,80,13
	.byte	'I2C',0
	.word	71212
	.byte	80,2,35,0,0,14
	.word	71217
	.byte	32
	.byte	'Ifx_SRC_GI2C',0,10,255,3,3
	.word	71251
	.byte	18,4
	.word	68526
	.byte	19,0,0,14
	.word	71278
	.byte	10
	.byte	'_Ifx_SRC_GLMU',0,10,130,4,25,4,13
	.byte	'LMU',0
	.word	71287
	.byte	4,2,35,0,0,14
	.word	71292
	.byte	32
	.byte	'Ifx_SRC_GLMU',0,10,133,4,3
	.word	71326
	.byte	18,40
	.word	68584
	.byte	19,1,0,14
	.word	71353
	.byte	10
	.byte	'_Ifx_SRC_GMSC',0,10,136,4,25,40,13
	.byte	'MSC',0
	.word	71362
	.byte	40,2,35,0,0,14
	.word	71367
	.byte	32
	.byte	'Ifx_SRC_GMSC',0,10,139,4,3
	.word	71401
	.byte	18,8
	.word	68695
	.byte	19,1,0,14
	.word	71428
	.byte	10
	.byte	'_Ifx_SRC_GPMU',0,10,142,4,25,8,13
	.byte	'PMU',0
	.word	71437
	.byte	8,2,35,0,0,14
	.word	71442
	.byte	32
	.byte	'Ifx_SRC_GPMU',0,10,145,4,3
	.word	71476
	.byte	18,32
	.word	68753
	.byte	19,0,0,14
	.word	71503
	.byte	10
	.byte	'_Ifx_SRC_GPSI5',0,10,148,4,25,32,13
	.byte	'PSI5',0
	.word	71512
	.byte	32,2,35,0,0,14
	.word	71517
	.byte	32
	.byte	'Ifx_SRC_GPSI5',0,10,151,4,3
	.word	71553
	.byte	18,32
	.word	68813
	.byte	19,0,0,14
	.word	71581
	.byte	10
	.byte	'_Ifx_SRC_GPSI5S',0,10,154,4,25,32,13
	.byte	'PSI5S',0
	.word	71590
	.byte	32,2,35,0,0,14
	.word	71595
	.byte	32
	.byte	'Ifx_SRC_GPSI5S',0,10,157,4,3
	.word	71633
	.byte	18,96
	.word	68875
	.byte	19,3,0,14
	.word	71662
	.byte	10
	.byte	'_Ifx_SRC_GQSPI',0,10,160,4,25,96,13
	.byte	'QSPI',0
	.word	71671
	.byte	96,2,35,0,0,14
	.word	71676
	.byte	32
	.byte	'Ifx_SRC_GQSPI',0,10,163,4,3
	.word	71712
	.byte	18,4
	.word	68995
	.byte	19,0,0,14
	.word	71740
	.byte	10
	.byte	'_Ifx_SRC_GSCR',0,10,166,4,25,4,13
	.byte	'SCR',0
	.word	71749
	.byte	4,2,35,0,0,14
	.word	71754
	.byte	32
	.byte	'Ifx_SRC_GSCR',0,10,169,4,3
	.word	71788
	.byte	14
	.word	69053
	.byte	10
	.byte	'_Ifx_SRC_GSCU',0,10,172,4,25,20,13
	.byte	'SCU',0
	.word	71815
	.byte	20,2,35,0,0,14
	.word	71820
	.byte	32
	.byte	'Ifx_SRC_GSCU',0,10,175,4,3
	.word	71854
	.byte	18,24
	.word	69134
	.byte	19,0,0,14
	.word	71881
	.byte	10
	.byte	'_Ifx_SRC_GSENT',0,10,178,4,25,24,13
	.byte	'SENT',0
	.word	71890
	.byte	24,2,35,0,0,14
	.word	71895
	.byte	32
	.byte	'Ifx_SRC_GSENT',0,10,181,4,3
	.word	71931
	.byte	18,12
	.word	69194
	.byte	19,0,0,14
	.word	71959
	.byte	10
	.byte	'_Ifx_SRC_GSMU',0,10,184,4,25,12,13
	.byte	'SMU',0
	.word	71968
	.byte	12,2,35,0,0,14
	.word	71973
	.byte	32
	.byte	'Ifx_SRC_GSMU',0,10,187,4,3
	.word	72007
	.byte	18,16
	.word	69252
	.byte	19,1,0,14
	.word	72034
	.byte	10
	.byte	'_Ifx_SRC_GSTM',0,10,190,4,25,16,13
	.byte	'STM',0
	.word	72043
	.byte	16,2,35,0,0,14
	.word	72048
	.byte	32
	.byte	'Ifx_SRC_GSTM',0,10,193,4,3
	.word	72082
	.byte	18,64
	.word	69428
	.byte	19,3,0,14
	.word	72109
	.byte	18,32
	.word	69324
	.byte	19,1,0,14
	.word	72123
	.byte	10
	.byte	'_Ifx_SRC_GVADC',0,10,196,4,25,192,2,13
	.byte	'G',0
	.word	72118
	.byte	64,2,35,0,13
	.byte	'reserved_40',0
	.word	16541
	.byte	224,1,2,35,64,13
	.byte	'CG',0
	.word	72132
	.byte	32,3,35,160,2,0,14
	.word	72137
	.byte	32
	.byte	'Ifx_SRC_GVADC',0,10,201,4,3
	.word	72206
	.byte	14
	.word	69530
	.byte	10
	.byte	'_Ifx_SRC_GXBAR',0,10,204,4,25,4,13
	.byte	'XBAR',0
	.word	72234
	.byte	4,2,35,0,0,14
	.word	72239
	.byte	32
	.byte	'Ifx_SRC_GXBAR',0,10,207,4,3
	.word	72275
	.byte	10
	.byte	'_Ifx_STM_ACCEN0_Bits',0,22,45,16,4,11
	.byte	'EN0',0,1
	.word	614
	.byte	1,7,2,35,0,11
	.byte	'EN1',0,1
	.word	614
	.byte	1,6,2,35,0,11
	.byte	'EN2',0,1
	.word	614
	.byte	1,5,2,35,0,11
	.byte	'EN3',0,1
	.word	614
	.byte	1,4,2,35,0,11
	.byte	'EN4',0,1
	.word	614
	.byte	1,3,2,35,0,11
	.byte	'EN5',0,1
	.word	614
	.byte	1,2,2,35,0,11
	.byte	'EN6',0,1
	.word	614
	.byte	1,1,2,35,0,11
	.byte	'EN7',0,1
	.word	614
	.byte	1,0,2,35,0,11
	.byte	'EN8',0,1
	.word	614
	.byte	1,7,2,35,1,11
	.byte	'EN9',0,1
	.word	614
	.byte	1,6,2,35,1,11
	.byte	'EN10',0,1
	.word	614
	.byte	1,5,2,35,1,11
	.byte	'EN11',0,1
	.word	614
	.byte	1,4,2,35,1,11
	.byte	'EN12',0,1
	.word	614
	.byte	1,3,2,35,1,11
	.byte	'EN13',0,1
	.word	614
	.byte	1,2,2,35,1,11
	.byte	'EN14',0,1
	.word	614
	.byte	1,1,2,35,1,11
	.byte	'EN15',0,1
	.word	614
	.byte	1,0,2,35,1,11
	.byte	'EN16',0,1
	.word	614
	.byte	1,7,2,35,2,11
	.byte	'EN17',0,1
	.word	614
	.byte	1,6,2,35,2,11
	.byte	'EN18',0,1
	.word	614
	.byte	1,5,2,35,2,11
	.byte	'EN19',0,1
	.word	614
	.byte	1,4,2,35,2,11
	.byte	'EN20',0,1
	.word	614
	.byte	1,3,2,35,2,11
	.byte	'EN21',0,1
	.word	614
	.byte	1,2,2,35,2,11
	.byte	'EN22',0,1
	.word	614
	.byte	1,1,2,35,2,11
	.byte	'EN23',0,1
	.word	614
	.byte	1,0,2,35,2,11
	.byte	'EN24',0,1
	.word	614
	.byte	1,7,2,35,3,11
	.byte	'EN25',0,1
	.word	614
	.byte	1,6,2,35,3,11
	.byte	'EN26',0,1
	.word	614
	.byte	1,5,2,35,3,11
	.byte	'EN27',0,1
	.word	614
	.byte	1,4,2,35,3,11
	.byte	'EN28',0,1
	.word	614
	.byte	1,3,2,35,3,11
	.byte	'EN29',0,1
	.word	614
	.byte	1,2,2,35,3,11
	.byte	'EN30',0,1
	.word	614
	.byte	1,1,2,35,3,11
	.byte	'EN31',0,1
	.word	614
	.byte	1,0,2,35,3,0,32
	.byte	'Ifx_STM_ACCEN0_Bits',0,22,79,3
	.word	72303
	.byte	10
	.byte	'_Ifx_STM_ACCEN1_Bits',0,22,82,16,4,11
	.byte	'reserved_0',0,4
	.word	439
	.byte	32,0,2,35,0,0,32
	.byte	'Ifx_STM_ACCEN1_Bits',0,22,85,3
	.word	72860
	.byte	10
	.byte	'_Ifx_STM_CAP_Bits',0,22,88,16,4,11
	.byte	'STMCAP63_32',0,4
	.word	439
	.byte	32,0,2,35,0,0,32
	.byte	'Ifx_STM_CAP_Bits',0,22,91,3
	.word	72937
	.byte	10
	.byte	'_Ifx_STM_CAPSV_Bits',0,22,94,16,4,11
	.byte	'STMCAP63_32',0,4
	.word	439
	.byte	32,0,2,35,0,0,32
	.byte	'Ifx_STM_CAPSV_Bits',0,22,97,3
	.word	73009
	.byte	10
	.byte	'_Ifx_STM_CLC_Bits',0,22,100,16,4,11
	.byte	'DISR',0,1
	.word	614
	.byte	1,7,2,35,0,11
	.byte	'DISS',0,1
	.word	614
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	614
	.byte	1,5,2,35,0,11
	.byte	'EDIS',0,1
	.word	614
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,4
	.word	439
	.byte	28,0,2,35,0,0,32
	.byte	'Ifx_STM_CLC_Bits',0,22,107,3
	.word	73085
	.byte	10
	.byte	'_Ifx_STM_CMCON_Bits',0,22,110,16,4,11
	.byte	'MSIZE0',0,1
	.word	614
	.byte	5,3,2,35,0,11
	.byte	'reserved_5',0,1
	.word	614
	.byte	3,0,2,35,0,11
	.byte	'MSTART0',0,1
	.word	614
	.byte	5,3,2,35,1,11
	.byte	'reserved_13',0,1
	.word	614
	.byte	3,0,2,35,1,11
	.byte	'MSIZE1',0,1
	.word	614
	.byte	5,3,2,35,2,11
	.byte	'reserved_21',0,1
	.word	614
	.byte	3,0,2,35,2,11
	.byte	'MSTART1',0,1
	.word	614
	.byte	5,3,2,35,3,11
	.byte	'reserved_29',0,1
	.word	614
	.byte	3,0,2,35,3,0,32
	.byte	'Ifx_STM_CMCON_Bits',0,22,120,3
	.word	73226
	.byte	10
	.byte	'_Ifx_STM_CMP_Bits',0,22,123,16,4,11
	.byte	'CMPVAL',0,4
	.word	439
	.byte	32,0,2,35,0,0,32
	.byte	'Ifx_STM_CMP_Bits',0,22,126,3
	.word	73444
	.byte	10
	.byte	'_Ifx_STM_ICR_Bits',0,22,129,1,16,4,11
	.byte	'CMP0EN',0,1
	.word	614
	.byte	1,7,2,35,0,11
	.byte	'CMP0IR',0,1
	.word	614
	.byte	1,6,2,35,0,11
	.byte	'CMP0OS',0,1
	.word	614
	.byte	1,5,2,35,0,11
	.byte	'reserved_3',0,1
	.word	614
	.byte	1,4,2,35,0,11
	.byte	'CMP1EN',0,1
	.word	614
	.byte	1,3,2,35,0,11
	.byte	'CMP1IR',0,1
	.word	614
	.byte	1,2,2,35,0,11
	.byte	'CMP1OS',0,1
	.word	614
	.byte	1,1,2,35,0,11
	.byte	'reserved_7',0,4
	.word	439
	.byte	25,0,2,35,0,0,32
	.byte	'Ifx_STM_ICR_Bits',0,22,139,1,3
	.word	73511
	.byte	10
	.byte	'_Ifx_STM_ID_Bits',0,22,142,1,16,4,11
	.byte	'MODREV',0,1
	.word	614
	.byte	8,0,2,35,0,11
	.byte	'MODTYPE',0,1
	.word	614
	.byte	8,0,2,35,1,11
	.byte	'MODNUMBER',0,2
	.word	631
	.byte	16,0,2,35,2,0,32
	.byte	'Ifx_STM_ID_Bits',0,22,147,1,3
	.word	73714
	.byte	10
	.byte	'_Ifx_STM_ISCR_Bits',0,22,150,1,16,4,11
	.byte	'CMP0IRR',0,1
	.word	614
	.byte	1,7,2,35,0,11
	.byte	'CMP0IRS',0,1
	.word	614
	.byte	1,6,2,35,0,11
	.byte	'CMP1IRR',0,1
	.word	614
	.byte	1,5,2,35,0,11
	.byte	'CMP1IRS',0,1
	.word	614
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,4
	.word	439
	.byte	28,0,2,35,0,0,32
	.byte	'Ifx_STM_ISCR_Bits',0,22,157,1,3
	.word	73821
	.byte	10
	.byte	'_Ifx_STM_KRST0_Bits',0,22,160,1,16,4,11
	.byte	'RST',0,1
	.word	614
	.byte	1,7,2,35,0,11
	.byte	'RSTSTAT',0,1
	.word	614
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,4
	.word	439
	.byte	30,0,2,35,0,0,32
	.byte	'Ifx_STM_KRST0_Bits',0,22,165,1,3
	.word	73972
	.byte	10
	.byte	'_Ifx_STM_KRST1_Bits',0,22,168,1,16,4,11
	.byte	'RST',0,1
	.word	614
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,4
	.word	439
	.byte	31,0,2,35,0,0,32
	.byte	'Ifx_STM_KRST1_Bits',0,22,172,1,3
	.word	74083
	.byte	10
	.byte	'_Ifx_STM_KRSTCLR_Bits',0,22,175,1,16,4,11
	.byte	'CLR',0,1
	.word	614
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,4
	.word	439
	.byte	31,0,2,35,0,0,32
	.byte	'Ifx_STM_KRSTCLR_Bits',0,22,179,1,3
	.word	74175
	.byte	10
	.byte	'_Ifx_STM_OCS_Bits',0,22,182,1,16,4,11
	.byte	'reserved_0',0,4
	.word	439
	.byte	24,8,2,35,0,11
	.byte	'SUS',0,1
	.word	614
	.byte	4,4,2,35,3,11
	.byte	'SUS_P',0,1
	.word	614
	.byte	1,3,2,35,3,11
	.byte	'SUSSTA',0,1
	.word	614
	.byte	1,2,2,35,3,11
	.byte	'reserved_30',0,1
	.word	614
	.byte	2,0,2,35,3,0,32
	.byte	'Ifx_STM_OCS_Bits',0,22,189,1,3
	.word	74271
	.byte	10
	.byte	'_Ifx_STM_TIM0_Bits',0,22,192,1,16,4,11
	.byte	'STM31_0',0,4
	.word	439
	.byte	32,0,2,35,0,0,32
	.byte	'Ifx_STM_TIM0_Bits',0,22,195,1,3
	.word	74417
	.byte	10
	.byte	'_Ifx_STM_TIM0SV_Bits',0,22,198,1,16,4,11
	.byte	'STM31_0',0,4
	.word	439
	.byte	32,0,2,35,0,0,32
	.byte	'Ifx_STM_TIM0SV_Bits',0,22,201,1,3
	.word	74489
	.byte	10
	.byte	'_Ifx_STM_TIM1_Bits',0,22,204,1,16,4,11
	.byte	'STM35_4',0,4
	.word	439
	.byte	32,0,2,35,0,0,32
	.byte	'Ifx_STM_TIM1_Bits',0,22,207,1,3
	.word	74565
	.byte	10
	.byte	'_Ifx_STM_TIM2_Bits',0,22,210,1,16,4,11
	.byte	'STM39_8',0,4
	.word	439
	.byte	32,0,2,35,0,0,32
	.byte	'Ifx_STM_TIM2_Bits',0,22,213,1,3
	.word	74637
	.byte	10
	.byte	'_Ifx_STM_TIM3_Bits',0,22,216,1,16,4,11
	.byte	'STM43_12',0,4
	.word	439
	.byte	32,0,2,35,0,0,32
	.byte	'Ifx_STM_TIM3_Bits',0,22,219,1,3
	.word	74709
	.byte	10
	.byte	'_Ifx_STM_TIM4_Bits',0,22,222,1,16,4,11
	.byte	'STM47_16',0,4
	.word	439
	.byte	32,0,2,35,0,0,32
	.byte	'Ifx_STM_TIM4_Bits',0,22,225,1,3
	.word	74782
	.byte	10
	.byte	'_Ifx_STM_TIM5_Bits',0,22,228,1,16,4,11
	.byte	'STM51_20',0,4
	.word	439
	.byte	32,0,2,35,0,0,32
	.byte	'Ifx_STM_TIM5_Bits',0,22,231,1,3
	.word	74855
	.byte	10
	.byte	'_Ifx_STM_TIM6_Bits',0,22,234,1,16,4,11
	.byte	'STM63_32',0,4
	.word	439
	.byte	32,0,2,35,0,0,32
	.byte	'Ifx_STM_TIM6_Bits',0,22,237,1,3
	.word	74928
	.byte	12,22,245,1,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	72303
	.byte	4,2,35,0,0,32
	.byte	'Ifx_STM_ACCEN0',0,22,250,1,3
	.word	75001
	.byte	12,22,253,1,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	72860
	.byte	4,2,35,0,0,32
	.byte	'Ifx_STM_ACCEN1',0,22,130,2,3
	.word	75065
	.byte	12,22,133,2,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	72937
	.byte	4,2,35,0,0,32
	.byte	'Ifx_STM_CAP',0,22,138,2,3
	.word	75129
	.byte	12,22,141,2,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	73009
	.byte	4,2,35,0,0,32
	.byte	'Ifx_STM_CAPSV',0,22,146,2,3
	.word	75190
	.byte	12,22,149,2,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	73085
	.byte	4,2,35,0,0,32
	.byte	'Ifx_STM_CLC',0,22,154,2,3
	.word	75253
	.byte	12,22,157,2,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	73226
	.byte	4,2,35,0,0,32
	.byte	'Ifx_STM_CMCON',0,22,162,2,3
	.word	75314
	.byte	12,22,165,2,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	73444
	.byte	4,2,35,0,0,32
	.byte	'Ifx_STM_CMP',0,22,170,2,3
	.word	75377
	.byte	12,22,173,2,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	73511
	.byte	4,2,35,0,0,32
	.byte	'Ifx_STM_ICR',0,22,178,2,3
	.word	75438
	.byte	12,22,181,2,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	73714
	.byte	4,2,35,0,0,32
	.byte	'Ifx_STM_ID',0,22,186,2,3
	.word	75499
	.byte	12,22,189,2,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	73821
	.byte	4,2,35,0,0,32
	.byte	'Ifx_STM_ISCR',0,22,194,2,3
	.word	75559
	.byte	12,22,197,2,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	73972
	.byte	4,2,35,0,0,32
	.byte	'Ifx_STM_KRST0',0,22,202,2,3
	.word	75621
	.byte	12,22,205,2,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	74083
	.byte	4,2,35,0,0,32
	.byte	'Ifx_STM_KRST1',0,22,210,2,3
	.word	75684
	.byte	12,22,213,2,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	74175
	.byte	4,2,35,0,0,32
	.byte	'Ifx_STM_KRSTCLR',0,22,218,2,3
	.word	75747
	.byte	12,22,221,2,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	74271
	.byte	4,2,35,0,0,32
	.byte	'Ifx_STM_OCS',0,22,226,2,3
	.word	75812
	.byte	12,22,229,2,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	74417
	.byte	4,2,35,0,0,32
	.byte	'Ifx_STM_TIM0',0,22,234,2,3
	.word	75873
	.byte	12,22,237,2,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	74489
	.byte	4,2,35,0,0,32
	.byte	'Ifx_STM_TIM0SV',0,22,242,2,3
	.word	75935
	.byte	12,22,245,2,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	74565
	.byte	4,2,35,0,0,32
	.byte	'Ifx_STM_TIM1',0,22,250,2,3
	.word	75999
	.byte	12,22,253,2,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	74637
	.byte	4,2,35,0,0,32
	.byte	'Ifx_STM_TIM2',0,22,130,3,3
	.word	76061
	.byte	12,22,133,3,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	74709
	.byte	4,2,35,0,0,32
	.byte	'Ifx_STM_TIM3',0,22,138,3,3
	.word	76123
	.byte	12,22,141,3,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	74782
	.byte	4,2,35,0,0,32
	.byte	'Ifx_STM_TIM4',0,22,146,3,3
	.word	76185
	.byte	12,22,149,3,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	74855
	.byte	4,2,35,0,0,32
	.byte	'Ifx_STM_TIM5',0,22,154,3,3
	.word	76247
	.byte	12,22,157,3,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	74928
	.byte	4,2,35,0,0,32
	.byte	'Ifx_STM_TIM6',0,22,162,3,3
	.word	76309
	.byte	15,5,144,1,9,1,16
	.byte	'IfxCpu_CounterMode_normal',0,0,16
	.byte	'IfxCpu_CounterMode_task',0,1,0,32
	.byte	'IfxCpu_CounterMode',0,5,148,1,3
	.word	76371
	.byte	31,5,160,1,9,6,13
	.byte	'counter',0
	.word	1581
	.byte	4,2,35,0,13
	.byte	'overlfow',0
	.word	614
	.byte	1,2,35,4,0,32
	.byte	'IfxCpu_Counter',0,5,164,1,3
	.word	76460
	.byte	31,5,172,1,9,32,13
	.byte	'instruction',0
	.word	76460
	.byte	6,2,35,0,13
	.byte	'clock',0
	.word	76460
	.byte	6,2,35,6,13
	.byte	'counter1',0
	.word	76460
	.byte	6,2,35,12,13
	.byte	'counter2',0
	.word	76460
	.byte	6,2,35,18,13
	.byte	'counter3',0
	.word	76460
	.byte	6,2,35,24,0,32
	.byte	'IfxCpu_Perf',0,5,179,1,3
	.word	76526
	.byte	10
	.byte	'_Ifx_FLASH_ACCEN0_Bits',0,23,45,16,4,11
	.byte	'EN0',0,1
	.word	614
	.byte	1,7,2,35,0,11
	.byte	'EN1',0,1
	.word	614
	.byte	1,6,2,35,0,11
	.byte	'EN2',0,1
	.word	614
	.byte	1,5,2,35,0,11
	.byte	'EN3',0,1
	.word	614
	.byte	1,4,2,35,0,11
	.byte	'EN4',0,1
	.word	614
	.byte	1,3,2,35,0,11
	.byte	'EN5',0,1
	.word	614
	.byte	1,2,2,35,0,11
	.byte	'EN6',0,1
	.word	614
	.byte	1,1,2,35,0,11
	.byte	'EN7',0,1
	.word	614
	.byte	1,0,2,35,0,11
	.byte	'EN8',0,1
	.word	614
	.byte	1,7,2,35,1,11
	.byte	'EN9',0,1
	.word	614
	.byte	1,6,2,35,1,11
	.byte	'EN10',0,1
	.word	614
	.byte	1,5,2,35,1,11
	.byte	'EN11',0,1
	.word	614
	.byte	1,4,2,35,1,11
	.byte	'EN12',0,1
	.word	614
	.byte	1,3,2,35,1,11
	.byte	'EN13',0,1
	.word	614
	.byte	1,2,2,35,1,11
	.byte	'EN14',0,1
	.word	614
	.byte	1,1,2,35,1,11
	.byte	'EN15',0,1
	.word	614
	.byte	1,0,2,35,1,11
	.byte	'EN16',0,1
	.word	614
	.byte	1,7,2,35,2,11
	.byte	'EN17',0,1
	.word	614
	.byte	1,6,2,35,2,11
	.byte	'EN18',0,1
	.word	614
	.byte	1,5,2,35,2,11
	.byte	'EN19',0,1
	.word	614
	.byte	1,4,2,35,2,11
	.byte	'EN20',0,1
	.word	614
	.byte	1,3,2,35,2,11
	.byte	'EN21',0,1
	.word	614
	.byte	1,2,2,35,2,11
	.byte	'EN22',0,1
	.word	614
	.byte	1,1,2,35,2,11
	.byte	'EN23',0,1
	.word	614
	.byte	1,0,2,35,2,11
	.byte	'EN24',0,1
	.word	614
	.byte	1,7,2,35,3,11
	.byte	'EN25',0,1
	.word	614
	.byte	1,6,2,35,3,11
	.byte	'EN26',0,1
	.word	614
	.byte	1,5,2,35,3,11
	.byte	'EN27',0,1
	.word	614
	.byte	1,4,2,35,3,11
	.byte	'EN28',0,1
	.word	614
	.byte	1,3,2,35,3,11
	.byte	'EN29',0,1
	.word	614
	.byte	1,2,2,35,3,11
	.byte	'EN30',0,1
	.word	614
	.byte	1,1,2,35,3,11
	.byte	'EN31',0,1
	.word	614
	.byte	1,0,2,35,3,0,32
	.byte	'Ifx_FLASH_ACCEN0_Bits',0,23,79,3
	.word	76644
	.byte	10
	.byte	'_Ifx_FLASH_ACCEN1_Bits',0,23,82,16,4,11
	.byte	'reserved_0',0,4
	.word	439
	.byte	32,0,2,35,0,0,32
	.byte	'Ifx_FLASH_ACCEN1_Bits',0,23,85,3
	.word	77205
	.byte	10
	.byte	'_Ifx_FLASH_CBAB_CFG_Bits',0,23,88,16,4,11
	.byte	'SEL',0,1
	.word	614
	.byte	6,2,2,35,0,11
	.byte	'reserved_6',0,1
	.word	614
	.byte	2,0,2,35,0,11
	.byte	'CLR',0,1
	.word	614
	.byte	1,7,2,35,1,11
	.byte	'DIS',0,1
	.word	614
	.byte	1,6,2,35,1,11
	.byte	'reserved_10',0,4
	.word	439
	.byte	22,0,2,35,0,0,32
	.byte	'Ifx_FLASH_CBAB_CFG_Bits',0,23,95,3
	.word	77286
	.byte	10
	.byte	'_Ifx_FLASH_CBAB_STAT_Bits',0,23,98,16,4,11
	.byte	'VLD0',0,1
	.word	614
	.byte	1,7,2,35,0,11
	.byte	'VLD1',0,1
	.word	614
	.byte	1,6,2,35,0,11
	.byte	'VLD2',0,1
	.word	614
	.byte	1,5,2,35,0,11
	.byte	'VLD3',0,1
	.word	614
	.byte	1,4,2,35,0,11
	.byte	'VLD4',0,1
	.word	614
	.byte	1,3,2,35,0,11
	.byte	'VLD5',0,1
	.word	614
	.byte	1,2,2,35,0,11
	.byte	'VLD6',0,1
	.word	614
	.byte	1,1,2,35,0,11
	.byte	'VLD7',0,1
	.word	614
	.byte	1,0,2,35,0,11
	.byte	'VLD8',0,1
	.word	614
	.byte	1,7,2,35,1,11
	.byte	'VLD9',0,1
	.word	614
	.byte	1,6,2,35,1,11
	.byte	'reserved_10',0,4
	.word	439
	.byte	22,0,2,35,0,0,32
	.byte	'Ifx_FLASH_CBAB_STAT_Bits',0,23,111,3
	.word	77439
	.byte	10
	.byte	'_Ifx_FLASH_CBAB_TOP_Bits',0,23,114,16,4,11
	.byte	'reserved_0',0,1
	.word	614
	.byte	5,3,2,35,0,11
	.byte	'ADDR',0,4
	.word	439
	.byte	19,8,2,35,0,11
	.byte	'ERR',0,1
	.word	614
	.byte	6,2,2,35,3,11
	.byte	'VLD',0,1
	.word	614
	.byte	1,1,2,35,3,11
	.byte	'CLR',0,1
	.word	614
	.byte	1,0,2,35,3,0,32
	.byte	'Ifx_FLASH_CBAB_TOP_Bits',0,23,121,3
	.word	77687
	.byte	10
	.byte	'_Ifx_FLASH_COMM0_Bits',0,23,124,16,4,11
	.byte	'STATUS',0,1
	.word	614
	.byte	8,0,2,35,0,11
	.byte	'reserved_8',0,4
	.word	439
	.byte	24,0,2,35,0,0,32
	.byte	'Ifx_FLASH_COMM0_Bits',0,23,128,1,3
	.word	77833
	.byte	10
	.byte	'_Ifx_FLASH_COMM1_Bits',0,23,131,1,16,4,11
	.byte	'STATUS',0,1
	.word	614
	.byte	8,0,2,35,0,11
	.byte	'DATA',0,1
	.word	614
	.byte	8,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	631
	.byte	16,0,2,35,2,0,32
	.byte	'Ifx_FLASH_COMM1_Bits',0,23,136,1,3
	.word	77931
	.byte	10
	.byte	'_Ifx_FLASH_COMM2_Bits',0,23,139,1,16,4,11
	.byte	'STATUS',0,1
	.word	614
	.byte	8,0,2,35,0,11
	.byte	'DATA',0,1
	.word	614
	.byte	8,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	631
	.byte	16,0,2,35,2,0,32
	.byte	'Ifx_FLASH_COMM2_Bits',0,23,144,1,3
	.word	78047
	.byte	10
	.byte	'_Ifx_FLASH_ECCRD_Bits',0,23,147,1,16,4,11
	.byte	'RCODE',0,4
	.word	439
	.byte	22,10,2,35,0,11
	.byte	'reserved_22',0,2
	.word	631
	.byte	8,2,2,35,2,11
	.byte	'EDCERRINJ',0,1
	.word	614
	.byte	1,1,2,35,3,11
	.byte	'ECCORDIS',0,1
	.word	614
	.byte	1,0,2,35,3,0,32
	.byte	'Ifx_FLASH_ECCRD_Bits',0,23,153,1,3
	.word	78163
	.byte	10
	.byte	'_Ifx_FLASH_ECCRP_Bits',0,23,156,1,16,4,11
	.byte	'RCODE',0,4
	.word	439
	.byte	22,10,2,35,0,11
	.byte	'reserved_22',0,2
	.word	631
	.byte	8,2,2,35,2,11
	.byte	'EDCERRINJ',0,1
	.word	614
	.byte	1,1,2,35,3,11
	.byte	'ECCORDIS',0,1
	.word	614
	.byte	1,0,2,35,3,0,32
	.byte	'Ifx_FLASH_ECCRP_Bits',0,23,162,1,3
	.word	78303
	.byte	10
	.byte	'_Ifx_FLASH_ECCW_Bits',0,23,165,1,16,4,11
	.byte	'WCODE',0,4
	.word	439
	.byte	22,10,2,35,0,11
	.byte	'reserved_22',0,2
	.word	631
	.byte	8,2,2,35,2,11
	.byte	'DECENCDIS',0,1
	.word	614
	.byte	1,1,2,35,3,11
	.byte	'PECENCDIS',0,1
	.word	614
	.byte	1,0,2,35,3,0,32
	.byte	'Ifx_FLASH_ECCW_Bits',0,23,171,1,3
	.word	78443
	.byte	10
	.byte	'_Ifx_FLASH_FCON_Bits',0,23,174,1,16,4,11
	.byte	'WSPFLASH',0,1
	.word	614
	.byte	4,4,2,35,0,11
	.byte	'WSECPF',0,1
	.word	614
	.byte	2,2,2,35,0,11
	.byte	'WSDFLASH',0,2
	.word	631
	.byte	6,4,2,35,0,11
	.byte	'WSECDF',0,1
	.word	614
	.byte	3,1,2,35,1,11
	.byte	'IDLE',0,1
	.word	614
	.byte	1,0,2,35,1,11
	.byte	'ESLDIS',0,1
	.word	614
	.byte	1,7,2,35,2,11
	.byte	'SLEEP',0,1
	.word	614
	.byte	1,6,2,35,2,11
	.byte	'NSAFECC',0,1
	.word	614
	.byte	1,5,2,35,2,11
	.byte	'STALL',0,1
	.word	614
	.byte	1,4,2,35,2,11
	.byte	'RES21',0,1
	.word	614
	.byte	2,2,2,35,2,11
	.byte	'RES23',0,1
	.word	614
	.byte	2,0,2,35,2,11
	.byte	'VOPERM',0,1
	.word	614
	.byte	1,7,2,35,3,11
	.byte	'SQERM',0,1
	.word	614
	.byte	1,6,2,35,3,11
	.byte	'PROERM',0,1
	.word	614
	.byte	1,5,2,35,3,11
	.byte	'reserved_27',0,1
	.word	614
	.byte	3,2,2,35,3,11
	.byte	'PR5V',0,1
	.word	614
	.byte	1,1,2,35,3,11
	.byte	'EOBM',0,1
	.word	614
	.byte	1,0,2,35,3,0,32
	.byte	'Ifx_FLASH_FCON_Bits',0,23,193,1,3
	.word	78582
	.byte	10
	.byte	'_Ifx_FLASH_FPRO_Bits',0,23,196,1,16,4,11
	.byte	'PROINP',0,1
	.word	614
	.byte	1,7,2,35,0,11
	.byte	'PRODISP',0,1
	.word	614
	.byte	1,6,2,35,0,11
	.byte	'PROIND',0,1
	.word	614
	.byte	1,5,2,35,0,11
	.byte	'PRODISD',0,1
	.word	614
	.byte	1,4,2,35,0,11
	.byte	'PROINHSMCOTP',0,1
	.word	614
	.byte	1,3,2,35,0,11
	.byte	'RES5',0,1
	.word	614
	.byte	1,2,2,35,0,11
	.byte	'PROINOTP',0,1
	.word	614
	.byte	1,1,2,35,0,11
	.byte	'RES7',0,1
	.word	614
	.byte	1,0,2,35,0,11
	.byte	'PROINDBG',0,1
	.word	614
	.byte	1,7,2,35,1,11
	.byte	'PRODISDBG',0,1
	.word	614
	.byte	1,6,2,35,1,11
	.byte	'PROINHSM',0,1
	.word	614
	.byte	1,5,2,35,1,11
	.byte	'reserved_11',0,1
	.word	614
	.byte	5,0,2,35,1,11
	.byte	'DCFP',0,1
	.word	614
	.byte	1,7,2,35,2,11
	.byte	'DDFP',0,1
	.word	614
	.byte	1,6,2,35,2,11
	.byte	'DDFPX',0,1
	.word	614
	.byte	1,5,2,35,2,11
	.byte	'reserved_19',0,1
	.word	614
	.byte	1,4,2,35,2,11
	.byte	'DDFD',0,1
	.word	614
	.byte	1,3,2,35,2,11
	.byte	'reserved_21',0,1
	.word	614
	.byte	1,2,2,35,2,11
	.byte	'ENPE',0,1
	.word	614
	.byte	2,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	614
	.byte	8,0,2,35,3,0,32
	.byte	'Ifx_FLASH_FPRO_Bits',0,23,218,1,3
	.word	78944
	.byte	10
	.byte	'_Ifx_FLASH_FSR_Bits',0,23,221,1,16,4,11
	.byte	'FABUSY',0,1
	.word	614
	.byte	1,7,2,35,0,11
	.byte	'D0BUSY',0,1
	.word	614
	.byte	1,6,2,35,0,11
	.byte	'RES1',0,1
	.word	614
	.byte	1,5,2,35,0,11
	.byte	'P0BUSY',0,1
	.word	614
	.byte	1,4,2,35,0,11
	.byte	'P1BUSY',0,1
	.word	614
	.byte	1,3,2,35,0,11
	.byte	'RES5',0,1
	.word	614
	.byte	1,2,2,35,0,11
	.byte	'RES6',0,1
	.word	614
	.byte	1,1,2,35,0,11
	.byte	'PROG',0,1
	.word	614
	.byte	1,0,2,35,0,11
	.byte	'ERASE',0,1
	.word	614
	.byte	1,7,2,35,1,11
	.byte	'PFPAGE',0,1
	.word	614
	.byte	1,6,2,35,1,11
	.byte	'DFPAGE',0,1
	.word	614
	.byte	1,5,2,35,1,11
	.byte	'OPER',0,1
	.word	614
	.byte	1,4,2,35,1,11
	.byte	'SQER',0,1
	.word	614
	.byte	1,3,2,35,1,11
	.byte	'PROER',0,1
	.word	614
	.byte	1,2,2,35,1,11
	.byte	'PFSBER',0,1
	.word	614
	.byte	1,1,2,35,1,11
	.byte	'PFDBER',0,1
	.word	614
	.byte	1,0,2,35,1,11
	.byte	'PFMBER',0,1
	.word	614
	.byte	1,7,2,35,2,11
	.byte	'RES17',0,1
	.word	614
	.byte	1,6,2,35,2,11
	.byte	'DFSBER',0,1
	.word	614
	.byte	1,5,2,35,2,11
	.byte	'DFDBER',0,1
	.word	614
	.byte	1,4,2,35,2,11
	.byte	'DFTBER',0,1
	.word	614
	.byte	1,3,2,35,2,11
	.byte	'DFMBER',0,1
	.word	614
	.byte	1,2,2,35,2,11
	.byte	'SRIADDERR',0,1
	.word	614
	.byte	1,1,2,35,2,11
	.byte	'reserved_23',0,2
	.word	631
	.byte	2,7,2,35,2,11
	.byte	'PVER',0,1
	.word	614
	.byte	1,6,2,35,3,11
	.byte	'EVER',0,1
	.word	614
	.byte	1,5,2,35,3,11
	.byte	'SPND',0,1
	.word	614
	.byte	1,4,2,35,3,11
	.byte	'SLM',0,1
	.word	614
	.byte	1,3,2,35,3,11
	.byte	'reserved_29',0,1
	.word	614
	.byte	1,2,2,35,3,11
	.byte	'ORIER',0,1
	.word	614
	.byte	1,1,2,35,3,11
	.byte	'reserved_31',0,1
	.word	614
	.byte	1,0,2,35,3,0,32
	.byte	'Ifx_FLASH_FSR_Bits',0,23,254,1,3
	.word	79385
	.byte	10
	.byte	'_Ifx_FLASH_ID_Bits',0,23,129,2,16,4,11
	.byte	'MODREV',0,1
	.word	614
	.byte	8,0,2,35,0,11
	.byte	'MODTYPE',0,1
	.word	614
	.byte	8,0,2,35,1,11
	.byte	'MODNUMBER',0,2
	.word	631
	.byte	16,0,2,35,2,0,32
	.byte	'Ifx_FLASH_ID_Bits',0,23,134,2,3
	.word	79991
	.byte	10
	.byte	'_Ifx_FLASH_MARD_Bits',0,23,137,2,16,4,11
	.byte	'HMARGIN',0,1
	.word	614
	.byte	1,7,2,35,0,11
	.byte	'SELD0',0,1
	.word	614
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	614
	.byte	1,5,2,35,0,11
	.byte	'SPND',0,1
	.word	614
	.byte	1,4,2,35,0,11
	.byte	'SPNDERR',0,1
	.word	614
	.byte	1,3,2,35,0,11
	.byte	'reserved_5',0,2
	.word	631
	.byte	10,1,2,35,0,11
	.byte	'TRAPDIS',0,1
	.word	614
	.byte	1,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	631
	.byte	16,0,2,35,2,0,32
	.byte	'Ifx_FLASH_MARD_Bits',0,23,147,2,3
	.word	80102
	.byte	10
	.byte	'_Ifx_FLASH_MARP_Bits',0,23,150,2,16,4,11
	.byte	'SELP0',0,1
	.word	614
	.byte	1,7,2,35,0,11
	.byte	'SELP1',0,1
	.word	614
	.byte	1,6,2,35,0,11
	.byte	'RES2',0,1
	.word	614
	.byte	1,5,2,35,0,11
	.byte	'RES3',0,1
	.word	614
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,2
	.word	631
	.byte	11,1,2,35,0,11
	.byte	'TRAPDIS',0,1
	.word	614
	.byte	1,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	631
	.byte	16,0,2,35,2,0,32
	.byte	'Ifx_FLASH_MARP_Bits',0,23,159,2,3
	.word	80316
	.byte	10
	.byte	'_Ifx_FLASH_PROCOND_Bits',0,23,162,2,16,4,11
	.byte	'L',0,1
	.word	614
	.byte	1,7,2,35,0,11
	.byte	'NSAFECC',0,1
	.word	614
	.byte	1,6,2,35,0,11
	.byte	'RAMIN',0,1
	.word	614
	.byte	2,4,2,35,0,11
	.byte	'RAMINSEL',0,1
	.word	614
	.byte	4,0,2,35,0,11
	.byte	'OSCCFG',0,1
	.word	614
	.byte	1,7,2,35,1,11
	.byte	'MODE',0,1
	.word	614
	.byte	2,5,2,35,1,11
	.byte	'APREN',0,1
	.word	614
	.byte	1,4,2,35,1,11
	.byte	'CAP0EN',0,1
	.word	614
	.byte	1,3,2,35,1,11
	.byte	'CAP1EN',0,1
	.word	614
	.byte	1,2,2,35,1,11
	.byte	'CAP2EN',0,1
	.word	614
	.byte	1,1,2,35,1,11
	.byte	'CAP3EN',0,1
	.word	614
	.byte	1,0,2,35,1,11
	.byte	'ESR0CNT',0,2
	.word	631
	.byte	12,4,2,35,2,11
	.byte	'RES29',0,1
	.word	614
	.byte	2,2,2,35,3,11
	.byte	'RES30',0,1
	.word	614
	.byte	1,1,2,35,3,11
	.byte	'RPRO',0,1
	.word	614
	.byte	1,0,2,35,3,0,32
	.byte	'Ifx_FLASH_PROCOND_Bits',0,23,179,2,3
	.word	80503
	.byte	10
	.byte	'_Ifx_FLASH_PROCONDBG_Bits',0,23,182,2,16,4,11
	.byte	'OCDSDIS',0,1
	.word	614
	.byte	1,7,2,35,0,11
	.byte	'DBGIFLCK',0,1
	.word	614
	.byte	1,6,2,35,0,11
	.byte	'EDM',0,1
	.word	614
	.byte	2,4,2,35,0,11
	.byte	'reserved_4',0,4
	.word	439
	.byte	28,0,2,35,0,0,32
	.byte	'Ifx_FLASH_PROCONDBG_Bits',0,23,188,2,3
	.word	80827
	.byte	10
	.byte	'_Ifx_FLASH_PROCONHSM_Bits',0,23,191,2,16,4,11
	.byte	'HSMDBGDIS',0,1
	.word	614
	.byte	1,7,2,35,0,11
	.byte	'DBGIFLCK',0,1
	.word	614
	.byte	1,6,2,35,0,11
	.byte	'TSTIFLCK',0,1
	.word	614
	.byte	1,5,2,35,0,11
	.byte	'HSMTSTDIS',0,1
	.word	614
	.byte	1,4,2,35,0,11
	.byte	'RES15',0,2
	.word	631
	.byte	12,0,2,35,0,11
	.byte	'reserved_16',0,2
	.word	631
	.byte	16,0,2,35,2,0,32
	.byte	'Ifx_FLASH_PROCONHSM_Bits',0,23,199,2,3
	.word	80970
	.byte	10
	.byte	'_Ifx_FLASH_PROCONHSMCOTP_Bits',0,23,202,2,16,4,11
	.byte	'HSMBOOTEN',0,1
	.word	614
	.byte	1,7,2,35,0,11
	.byte	'SSWWAIT',0,1
	.word	614
	.byte	1,6,2,35,0,11
	.byte	'HSMDX',0,1
	.word	614
	.byte	1,5,2,35,0,11
	.byte	'HSM6X',0,1
	.word	614
	.byte	1,4,2,35,0,11
	.byte	'HSM16X',0,1
	.word	614
	.byte	1,3,2,35,0,11
	.byte	'HSM17X',0,1
	.word	614
	.byte	1,2,2,35,0,11
	.byte	'S6ROM',0,1
	.word	614
	.byte	1,1,2,35,0,11
	.byte	'HSMENPINS',0,2
	.word	631
	.byte	2,7,2,35,0,11
	.byte	'HSMENRES',0,1
	.word	614
	.byte	2,5,2,35,1,11
	.byte	'DESTDBG',0,1
	.word	614
	.byte	2,3,2,35,1,11
	.byte	'BLKFLAN',0,1
	.word	614
	.byte	1,2,2,35,1,11
	.byte	'reserved_14',0,1
	.word	614
	.byte	2,0,2,35,1,11
	.byte	'S16ROM',0,1
	.word	614
	.byte	1,7,2,35,2,11
	.byte	'S17ROM',0,1
	.word	614
	.byte	1,6,2,35,2,11
	.byte	'reserved_18',0,2
	.word	631
	.byte	14,0,2,35,2,0,32
	.byte	'Ifx_FLASH_PROCONHSMCOTP_Bits',0,23,219,2,3
	.word	81159
	.byte	10
	.byte	'_Ifx_FLASH_PROCONOTP_Bits',0,23,222,2,16,4,11
	.byte	'S0ROM',0,1
	.word	614
	.byte	1,7,2,35,0,11
	.byte	'S1ROM',0,1
	.word	614
	.byte	1,6,2,35,0,11
	.byte	'S2ROM',0,1
	.word	614
	.byte	1,5,2,35,0,11
	.byte	'S3ROM',0,1
	.word	614
	.byte	1,4,2,35,0,11
	.byte	'S4ROM',0,1
	.word	614
	.byte	1,3,2,35,0,11
	.byte	'S5ROM',0,1
	.word	614
	.byte	1,2,2,35,0,11
	.byte	'S6ROM',0,1
	.word	614
	.byte	1,1,2,35,0,11
	.byte	'S7ROM',0,1
	.word	614
	.byte	1,0,2,35,0,11
	.byte	'S8ROM',0,1
	.word	614
	.byte	1,7,2,35,1,11
	.byte	'S9ROM',0,1
	.word	614
	.byte	1,6,2,35,1,11
	.byte	'S10ROM',0,1
	.word	614
	.byte	1,5,2,35,1,11
	.byte	'S11ROM',0,1
	.word	614
	.byte	1,4,2,35,1,11
	.byte	'S12ROM',0,1
	.word	614
	.byte	1,3,2,35,1,11
	.byte	'S13ROM',0,1
	.word	614
	.byte	1,2,2,35,1,11
	.byte	'S14ROM',0,1
	.word	614
	.byte	1,1,2,35,1,11
	.byte	'S15ROM',0,1
	.word	614
	.byte	1,0,2,35,1,11
	.byte	'S16ROM',0,1
	.word	614
	.byte	1,7,2,35,2,11
	.byte	'S17ROM',0,1
	.word	614
	.byte	1,6,2,35,2,11
	.byte	'S18ROM',0,1
	.word	614
	.byte	1,5,2,35,2,11
	.byte	'S19ROM',0,1
	.word	614
	.byte	1,4,2,35,2,11
	.byte	'S20ROM',0,1
	.word	614
	.byte	1,3,2,35,2,11
	.byte	'S21ROM',0,1
	.word	614
	.byte	1,2,2,35,2,11
	.byte	'S22ROM',0,1
	.word	614
	.byte	1,1,2,35,2,11
	.byte	'S23ROM',0,1
	.word	614
	.byte	1,0,2,35,2,11
	.byte	'S24ROM',0,1
	.word	614
	.byte	1,7,2,35,3,11
	.byte	'S25ROM',0,1
	.word	614
	.byte	1,6,2,35,3,11
	.byte	'S26ROM',0,1
	.word	614
	.byte	1,5,2,35,3,11
	.byte	'reserved_27',0,1
	.word	614
	.byte	2,3,2,35,3,11
	.byte	'BML',0,1
	.word	614
	.byte	2,1,2,35,3,11
	.byte	'TP',0,1
	.word	614
	.byte	1,0,2,35,3,0,32
	.byte	'Ifx_FLASH_PROCONOTP_Bits',0,23,254,2,3
	.word	81522
	.byte	10
	.byte	'_Ifx_FLASH_PROCONP_Bits',0,23,129,3,16,4,11
	.byte	'S0L',0,1
	.word	614
	.byte	1,7,2,35,0,11
	.byte	'S1L',0,1
	.word	614
	.byte	1,6,2,35,0,11
	.byte	'S2L',0,1
	.word	614
	.byte	1,5,2,35,0,11
	.byte	'S3L',0,1
	.word	614
	.byte	1,4,2,35,0,11
	.byte	'S4L',0,1
	.word	614
	.byte	1,3,2,35,0,11
	.byte	'S5L',0,1
	.word	614
	.byte	1,2,2,35,0,11
	.byte	'S6L',0,1
	.word	614
	.byte	1,1,2,35,0,11
	.byte	'S7L',0,1
	.word	614
	.byte	1,0,2,35,0,11
	.byte	'S8L',0,1
	.word	614
	.byte	1,7,2,35,1,11
	.byte	'S9L',0,1
	.word	614
	.byte	1,6,2,35,1,11
	.byte	'S10L',0,1
	.word	614
	.byte	1,5,2,35,1,11
	.byte	'S11L',0,1
	.word	614
	.byte	1,4,2,35,1,11
	.byte	'S12L',0,1
	.word	614
	.byte	1,3,2,35,1,11
	.byte	'S13L',0,1
	.word	614
	.byte	1,2,2,35,1,11
	.byte	'S14L',0,1
	.word	614
	.byte	1,1,2,35,1,11
	.byte	'S15L',0,1
	.word	614
	.byte	1,0,2,35,1,11
	.byte	'S16L',0,1
	.word	614
	.byte	1,7,2,35,2,11
	.byte	'S17L',0,1
	.word	614
	.byte	1,6,2,35,2,11
	.byte	'S18L',0,1
	.word	614
	.byte	1,5,2,35,2,11
	.byte	'S19L',0,1
	.word	614
	.byte	1,4,2,35,2,11
	.byte	'S20L',0,1
	.word	614
	.byte	1,3,2,35,2,11
	.byte	'S21L',0,1
	.word	614
	.byte	1,2,2,35,2,11
	.byte	'S22L',0,1
	.word	614
	.byte	1,1,2,35,2,11
	.byte	'S23L',0,1
	.word	614
	.byte	1,0,2,35,2,11
	.byte	'S24L',0,1
	.word	614
	.byte	1,7,2,35,3,11
	.byte	'S25L',0,1
	.word	614
	.byte	1,6,2,35,3,11
	.byte	'S26L',0,1
	.word	614
	.byte	1,5,2,35,3,11
	.byte	'reserved_27',0,1
	.word	614
	.byte	4,1,2,35,3,11
	.byte	'RPRO',0,1
	.word	614
	.byte	1,0,2,35,3,0,32
	.byte	'Ifx_FLASH_PROCONP_Bits',0,23,160,3,3
	.word	82117
	.byte	10
	.byte	'_Ifx_FLASH_PROCONWOP_Bits',0,23,163,3,16,4,11
	.byte	'S0WOP',0,1
	.word	614
	.byte	1,7,2,35,0,11
	.byte	'S1WOP',0,1
	.word	614
	.byte	1,6,2,35,0,11
	.byte	'S2WOP',0,1
	.word	614
	.byte	1,5,2,35,0,11
	.byte	'S3WOP',0,1
	.word	614
	.byte	1,4,2,35,0,11
	.byte	'S4WOP',0,1
	.word	614
	.byte	1,3,2,35,0,11
	.byte	'S5WOP',0,1
	.word	614
	.byte	1,2,2,35,0,11
	.byte	'S6WOP',0,1
	.word	614
	.byte	1,1,2,35,0,11
	.byte	'S7WOP',0,1
	.word	614
	.byte	1,0,2,35,0,11
	.byte	'S8WOP',0,1
	.word	614
	.byte	1,7,2,35,1,11
	.byte	'S9WOP',0,1
	.word	614
	.byte	1,6,2,35,1,11
	.byte	'S10WOP',0,1
	.word	614
	.byte	1,5,2,35,1,11
	.byte	'S11WOP',0,1
	.word	614
	.byte	1,4,2,35,1,11
	.byte	'S12WOP',0,1
	.word	614
	.byte	1,3,2,35,1,11
	.byte	'S13WOP',0,1
	.word	614
	.byte	1,2,2,35,1,11
	.byte	'S14WOP',0,1
	.word	614
	.byte	1,1,2,35,1,11
	.byte	'S15WOP',0,1
	.word	614
	.byte	1,0,2,35,1,11
	.byte	'S16WOP',0,1
	.word	614
	.byte	1,7,2,35,2,11
	.byte	'S17WOP',0,1
	.word	614
	.byte	1,6,2,35,2,11
	.byte	'S18WOP',0,1
	.word	614
	.byte	1,5,2,35,2,11
	.byte	'S19WOP',0,1
	.word	614
	.byte	1,4,2,35,2,11
	.byte	'S20WOP',0,1
	.word	614
	.byte	1,3,2,35,2,11
	.byte	'S21WOP',0,1
	.word	614
	.byte	1,2,2,35,2,11
	.byte	'S22WOP',0,1
	.word	614
	.byte	1,1,2,35,2,11
	.byte	'S23WOP',0,1
	.word	614
	.byte	1,0,2,35,2,11
	.byte	'S24WOP',0,1
	.word	614
	.byte	1,7,2,35,3,11
	.byte	'S25WOP',0,1
	.word	614
	.byte	1,6,2,35,3,11
	.byte	'S26WOP',0,1
	.word	614
	.byte	1,5,2,35,3,11
	.byte	'reserved_27',0,1
	.word	614
	.byte	4,1,2,35,3,11
	.byte	'DATM',0,1
	.word	614
	.byte	1,0,2,35,3,0,32
	.byte	'Ifx_FLASH_PROCONWOP_Bits',0,23,194,3,3
	.word	82641
	.byte	10
	.byte	'_Ifx_FLASH_RDB_CFG0_Bits',0,23,197,3,16,4,11
	.byte	'TAG',0,1
	.word	614
	.byte	6,2,2,35,0,11
	.byte	'reserved_6',0,4
	.word	439
	.byte	26,0,2,35,0,0,32
	.byte	'Ifx_FLASH_RDB_CFG0_Bits',0,23,201,3,3
	.word	83223
	.byte	10
	.byte	'_Ifx_FLASH_RDB_CFG1_Bits',0,23,204,3,16,4,11
	.byte	'TAG',0,1
	.word	614
	.byte	6,2,2,35,0,11
	.byte	'reserved_6',0,4
	.word	439
	.byte	26,0,2,35,0,0,32
	.byte	'Ifx_FLASH_RDB_CFG1_Bits',0,23,208,3,3
	.word	83325
	.byte	10
	.byte	'_Ifx_FLASH_RDB_CFG2_Bits',0,23,211,3,16,4,11
	.byte	'TAG',0,1
	.word	614
	.byte	6,2,2,35,0,11
	.byte	'reserved_6',0,4
	.word	439
	.byte	26,0,2,35,0,0,32
	.byte	'Ifx_FLASH_RDB_CFG2_Bits',0,23,215,3,3
	.word	83427
	.byte	10
	.byte	'_Ifx_FLASH_RRAD_Bits',0,23,218,3,16,4,11
	.byte	'reserved_0',0,1
	.word	614
	.byte	3,5,2,35,0,11
	.byte	'ADD',0,4
	.word	439
	.byte	29,0,2,35,0,0,32
	.byte	'Ifx_FLASH_RRAD_Bits',0,23,222,3,3
	.word	83529
	.byte	10
	.byte	'_Ifx_FLASH_RRCT_Bits',0,23,225,3,16,4,11
	.byte	'STRT',0,1
	.word	614
	.byte	1,7,2,35,0,11
	.byte	'STP',0,1
	.word	614
	.byte	1,6,2,35,0,11
	.byte	'BUSY',0,1
	.word	614
	.byte	1,5,2,35,0,11
	.byte	'DONE',0,1
	.word	614
	.byte	1,4,2,35,0,11
	.byte	'ERR',0,1
	.word	614
	.byte	1,3,2,35,0,11
	.byte	'reserved_5',0,1
	.word	614
	.byte	3,0,2,35,0,11
	.byte	'EOBM',0,1
	.word	614
	.byte	1,7,2,35,1,11
	.byte	'reserved_9',0,1
	.word	614
	.byte	7,0,2,35,1,11
	.byte	'CNT',0,2
	.word	631
	.byte	16,0,2,35,2,0,32
	.byte	'Ifx_FLASH_RRCT_Bits',0,23,236,3,3
	.word	83623
	.byte	10
	.byte	'_Ifx_FLASH_RRD0_Bits',0,23,239,3,16,4,11
	.byte	'DATA',0,4
	.word	439
	.byte	32,0,2,35,0,0,32
	.byte	'Ifx_FLASH_RRD0_Bits',0,23,242,3,3
	.word	83833
	.byte	10
	.byte	'_Ifx_FLASH_RRD1_Bits',0,23,245,3,16,4,11
	.byte	'DATA',0,4
	.word	439
	.byte	32,0,2,35,0,0,32
	.byte	'Ifx_FLASH_RRD1_Bits',0,23,248,3,3
	.word	83906
	.byte	10
	.byte	'_Ifx_FLASH_UBAB_CFG_Bits',0,23,251,3,16,4,11
	.byte	'SEL',0,1
	.word	614
	.byte	6,2,2,35,0,11
	.byte	'reserved_6',0,1
	.word	614
	.byte	2,0,2,35,0,11
	.byte	'CLR',0,1
	.word	614
	.byte	1,7,2,35,1,11
	.byte	'DIS',0,1
	.word	614
	.byte	1,6,2,35,1,11
	.byte	'reserved_10',0,4
	.word	439
	.byte	22,0,2,35,0,0,32
	.byte	'Ifx_FLASH_UBAB_CFG_Bits',0,23,130,4,3
	.word	83979
	.byte	10
	.byte	'_Ifx_FLASH_UBAB_STAT_Bits',0,23,133,4,16,4,11
	.byte	'VLD0',0,1
	.word	614
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,4
	.word	439
	.byte	31,0,2,35,0,0,32
	.byte	'Ifx_FLASH_UBAB_STAT_Bits',0,23,137,4,3
	.word	84134
	.byte	10
	.byte	'_Ifx_FLASH_UBAB_TOP_Bits',0,23,140,4,16,4,11
	.byte	'reserved_0',0,1
	.word	614
	.byte	5,3,2,35,0,11
	.byte	'ADDR',0,4
	.word	439
	.byte	19,8,2,35,0,11
	.byte	'ERR',0,1
	.word	614
	.byte	6,2,2,35,3,11
	.byte	'VLD',0,1
	.word	614
	.byte	1,1,2,35,3,11
	.byte	'CLR',0,1
	.word	614
	.byte	1,0,2,35,3,0,32
	.byte	'Ifx_FLASH_UBAB_TOP_Bits',0,23,147,4,3
	.word	84239
	.byte	12,23,155,4,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	76644
	.byte	4,2,35,0,0,32
	.byte	'Ifx_FLASH_ACCEN0',0,23,160,4,3
	.word	84387
	.byte	12,23,163,4,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	77205
	.byte	4,2,35,0,0,32
	.byte	'Ifx_FLASH_ACCEN1',0,23,168,4,3
	.word	84453
	.byte	12,23,171,4,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	77286
	.byte	4,2,35,0,0,32
	.byte	'Ifx_FLASH_CBAB_CFG',0,23,176,4,3
	.word	84519
	.byte	12,23,179,4,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	77439
	.byte	4,2,35,0,0,32
	.byte	'Ifx_FLASH_CBAB_STAT',0,23,184,4,3
	.word	84587
	.byte	12,23,187,4,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	77687
	.byte	4,2,35,0,0,32
	.byte	'Ifx_FLASH_CBAB_TOP',0,23,192,4,3
	.word	84656
	.byte	12,23,195,4,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	77833
	.byte	4,2,35,0,0,32
	.byte	'Ifx_FLASH_COMM0',0,23,200,4,3
	.word	84724
	.byte	12,23,203,4,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	77931
	.byte	4,2,35,0,0,32
	.byte	'Ifx_FLASH_COMM1',0,23,208,4,3
	.word	84789
	.byte	12,23,211,4,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	78047
	.byte	4,2,35,0,0,32
	.byte	'Ifx_FLASH_COMM2',0,23,216,4,3
	.word	84854
	.byte	12,23,219,4,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	78163
	.byte	4,2,35,0,0,32
	.byte	'Ifx_FLASH_ECCRD',0,23,224,4,3
	.word	84919
	.byte	12,23,227,4,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	78303
	.byte	4,2,35,0,0,32
	.byte	'Ifx_FLASH_ECCRP',0,23,232,4,3
	.word	84984
	.byte	12,23,235,4,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	78443
	.byte	4,2,35,0,0,32
	.byte	'Ifx_FLASH_ECCW',0,23,240,4,3
	.word	85049
	.byte	12,23,243,4,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	78582
	.byte	4,2,35,0,0,32
	.byte	'Ifx_FLASH_FCON',0,23,248,4,3
	.word	85113
	.byte	12,23,251,4,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	78944
	.byte	4,2,35,0,0,32
	.byte	'Ifx_FLASH_FPRO',0,23,128,5,3
	.word	85177
	.byte	12,23,131,5,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	79385
	.byte	4,2,35,0,0,32
	.byte	'Ifx_FLASH_FSR',0,23,136,5,3
	.word	85241
	.byte	12,23,139,5,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	79991
	.byte	4,2,35,0,0,32
	.byte	'Ifx_FLASH_ID',0,23,144,5,3
	.word	85304
	.byte	12,23,147,5,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	80102
	.byte	4,2,35,0,0,32
	.byte	'Ifx_FLASH_MARD',0,23,152,5,3
	.word	85366
	.byte	12,23,155,5,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	80316
	.byte	4,2,35,0,0,32
	.byte	'Ifx_FLASH_MARP',0,23,160,5,3
	.word	85430
	.byte	12,23,163,5,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	80503
	.byte	4,2,35,0,0,32
	.byte	'Ifx_FLASH_PROCOND',0,23,168,5,3
	.word	85494
	.byte	12,23,171,5,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	80827
	.byte	4,2,35,0,0,32
	.byte	'Ifx_FLASH_PROCONDBG',0,23,176,5,3
	.word	85561
	.byte	12,23,179,5,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	80970
	.byte	4,2,35,0,0,32
	.byte	'Ifx_FLASH_PROCONHSM',0,23,184,5,3
	.word	85630
	.byte	12,23,187,5,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	81159
	.byte	4,2,35,0,0,32
	.byte	'Ifx_FLASH_PROCONHSMCOTP',0,23,192,5,3
	.word	85699
	.byte	12,23,195,5,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	81522
	.byte	4,2,35,0,0,32
	.byte	'Ifx_FLASH_PROCONOTP',0,23,200,5,3
	.word	85772
	.byte	12,23,203,5,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	82117
	.byte	4,2,35,0,0,32
	.byte	'Ifx_FLASH_PROCONP',0,23,208,5,3
	.word	85841
	.byte	12,23,211,5,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	82641
	.byte	4,2,35,0,0,32
	.byte	'Ifx_FLASH_PROCONWOP',0,23,216,5,3
	.word	85908
	.byte	12,23,219,5,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	83223
	.byte	4,2,35,0,0,32
	.byte	'Ifx_FLASH_RDB_CFG0',0,23,224,5,3
	.word	85977
	.byte	12,23,227,5,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	83325
	.byte	4,2,35,0,0,32
	.byte	'Ifx_FLASH_RDB_CFG1',0,23,232,5,3
	.word	86045
	.byte	12,23,235,5,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	83427
	.byte	4,2,35,0,0,32
	.byte	'Ifx_FLASH_RDB_CFG2',0,23,240,5,3
	.word	86113
	.byte	12,23,243,5,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	83529
	.byte	4,2,35,0,0,32
	.byte	'Ifx_FLASH_RRAD',0,23,248,5,3
	.word	86181
	.byte	12,23,251,5,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	83623
	.byte	4,2,35,0,0,32
	.byte	'Ifx_FLASH_RRCT',0,23,128,6,3
	.word	86245
	.byte	12,23,131,6,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	83833
	.byte	4,2,35,0,0,32
	.byte	'Ifx_FLASH_RRD0',0,23,136,6,3
	.word	86309
	.byte	12,23,139,6,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	83906
	.byte	4,2,35,0,0,32
	.byte	'Ifx_FLASH_RRD1',0,23,144,6,3
	.word	86373
	.byte	12,23,147,6,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	83979
	.byte	4,2,35,0,0,32
	.byte	'Ifx_FLASH_UBAB_CFG',0,23,152,6,3
	.word	86437
	.byte	12,23,155,6,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	84134
	.byte	4,2,35,0,0,32
	.byte	'Ifx_FLASH_UBAB_STAT',0,23,160,6,3
	.word	86505
	.byte	12,23,163,6,9,4,13
	.byte	'U',0
	.word	439
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	455
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	84239
	.byte	4,2,35,0,0,32
	.byte	'Ifx_FLASH_UBAB_TOP',0,23,168,6,3
	.word	86574
	.byte	10
	.byte	'_Ifx_FLASH_CBAB',0,23,179,6,25,12,13
	.byte	'CFG',0
	.word	84519
	.byte	4,2,35,0,13
	.byte	'STAT',0
	.word	84587
	.byte	4,2,35,4,13
	.byte	'TOP',0
	.word	84656
	.byte	4,2,35,8,0,14
	.word	86642
	.byte	32
	.byte	'Ifx_FLASH_CBAB',0,23,184,6,3
	.word	86705
	.byte	10
	.byte	'_Ifx_FLASH_RDB',0,23,187,6,25,12,13
	.byte	'CFG0',0
	.word	85977
	.byte	4,2,35,0,13
	.byte	'CFG1',0
	.word	86045
	.byte	4,2,35,4,13
	.byte	'CFG2',0
	.word	86113
	.byte	4,2,35,8,0,14
	.word	86734
	.byte	32
	.byte	'Ifx_FLASH_RDB',0,23,192,6,3
	.word	86798
	.byte	10
	.byte	'_Ifx_FLASH_UBAB',0,23,195,6,25,12,13
	.byte	'CFG',0
	.word	86437
	.byte	4,2,35,0,13
	.byte	'STAT',0
	.word	86505
	.byte	4,2,35,4,13
	.byte	'TOP',0
	.word	86574
	.byte	4,2,35,8,0,14
	.word	86826
	.byte	32
	.byte	'Ifx_FLASH_UBAB',0,23,200,6,3
	.word	86889
	.byte	32
	.byte	'Ifx_P_ACCEN0_Bits',0,8,79,3
	.word	8390
	.byte	32
	.byte	'Ifx_P_ACCEN1_Bits',0,8,85,3
	.word	8303
	.byte	32
	.byte	'Ifx_P_ESR_Bits',0,8,107,3
	.word	4646
	.byte	32
	.byte	'Ifx_P_ID_Bits',0,8,115,3
	.word	2699
	.byte	32
	.byte	'Ifx_P_IN_Bits',0,8,137,1,3
	.word	3694
	.byte	32
	.byte	'Ifx_P_IOCR0_Bits',0,8,150,1,3
	.word	2827
	.byte	32
	.byte	'Ifx_P_IOCR12_Bits',0,8,163,1,3
	.word	3474
	.byte	32
	.byte	'Ifx_P_IOCR4_Bits',0,8,176,1,3
	.word	3042
	.byte	32
	.byte	'Ifx_P_IOCR8_Bits',0,8,189,1,3
	.word	3257
	.byte	32
	.byte	'Ifx_P_LPCR0_Bits',0,8,197,1,3
	.word	7662
	.byte	32
	.byte	'Ifx_P_LPCR1_Bits',0,8,205,1,3
	.word	7786
	.byte	32
	.byte	'Ifx_P_LPCR1_P21_Bits',0,8,215,1,3
	.word	7870
	.byte	32
	.byte	'Ifx_P_LPCR2_Bits',0,8,229,1,3
	.word	8050
	.byte	32
	.byte	'Ifx_P_OMCR0_Bits',0,8,240,1,3
	.word	6301
	.byte	32
	.byte	'Ifx_P_OMCR12_Bits',0,8,250,1,3
	.word	6825
	.byte	32
	.byte	'Ifx_P_OMCR4_Bits',0,8,133,2,3
	.word	6475
	.byte	32
	.byte	'Ifx_P_OMCR8_Bits',0,8,144,2,3
	.word	6649
	.byte	32
	.byte	'Ifx_P_OMCR_Bits',0,8,166,2,3
	.word	7314
	.byte	32
	.byte	'Ifx_P_OMR_Bits',0,8,203,2,3
	.word	2128
	.byte	32
	.byte	'Ifx_P_OMSR0_Bits',0,8,213,2,3
	.word	5638
	.byte	32
	.byte	'Ifx_P_OMSR12_Bits',0,8,224,2,3
	.word	6126
	.byte	32
	.byte	'Ifx_P_OMSR4_Bits',0,8,235,2,3
	.word	5785
	.byte	32
	.byte	'Ifx_P_OMSR8_Bits',0,8,246,2,3
	.word	5954
	.byte	32
	.byte	'Ifx_P_OMSR_Bits',0,8,140,3,3
	.word	6981
	.byte	32
	.byte	'Ifx_P_OUT_Bits',0,8,162,3,3
	.word	1812
	.byte	32
	.byte	'Ifx_P_PCSR_Bits',0,8,180,3,3
	.word	5352
	.byte	32
	.byte	'Ifx_P_PDISC_Bits',0,8,202,3,3
	.word	4986
	.byte	32
	.byte	'Ifx_P_PDR0_Bits',0,8,223,3,3
	.word	4017
	.byte	32
	.byte	'Ifx_P_PDR1_Bits',0,8,244,3,3
	.word	4321
	.byte	32
	.byte	'Ifx_P_ACCEN0',0,8,129,4,3
	.word	8917
	.byte	32
	.byte	'Ifx_P_ACCEN1',0,8,137,4,3
	.word	8350
	.byte	32
	.byte	'Ifx_P_ESR',0,8,145,4,3
	.word	4937
	.byte	32
	.byte	'Ifx_P_ID',0,8,153,4,3
	.word	2778
	.byte	32
	.byte	'Ifx_P_IN',0,8,161,4,3
	.word	3968
	.byte	32
	.byte	'Ifx_P_IOCR0',0,8,169,4,3
	.word	3002
	.byte	32
	.byte	'Ifx_P_IOCR12',0,8,177,4,3
	.word	3654
	.byte	32
	.byte	'Ifx_P_IOCR4',0,8,185,4,3
	.word	3217
	.byte	32
	.byte	'Ifx_P_IOCR8',0,8,193,4,3
	.word	3434
	.byte	32
	.byte	'Ifx_P_LPCR0',0,8,201,4,3
	.word	7746
	.byte	32
	.byte	'Ifx_P_LPCR1',0,8,210,4,3
	.word	7995
	.byte	32
	.byte	'Ifx_P_LPCR2',0,8,218,4,3
	.word	8254
	.byte	32
	.byte	'Ifx_P_OMCR',0,8,226,4,3
	.word	7622
	.byte	32
	.byte	'Ifx_P_OMCR0',0,8,234,4,3
	.word	6435
	.byte	32
	.byte	'Ifx_P_OMCR12',0,8,242,4,3
	.word	6941
	.byte	32
	.byte	'Ifx_P_OMCR4',0,8,250,4,3
	.word	6609
	.byte	32
	.byte	'Ifx_P_OMCR8',0,8,130,5,3
	.word	6785
	.byte	32
	.byte	'Ifx_P_OMR',0,8,138,5,3
	.word	2659
	.byte	32
	.byte	'Ifx_P_OMSR',0,8,146,5,3
	.word	7274
	.byte	32
	.byte	'Ifx_P_OMSR0',0,8,154,5,3
	.word	5745
	.byte	32
	.byte	'Ifx_P_OMSR12',0,8,162,5,3
	.word	6261
	.byte	32
	.byte	'Ifx_P_OMSR4',0,8,170,5,3
	.word	5914
	.byte	32
	.byte	'Ifx_P_OMSR8',0,8,178,5,3
	.word	6086
	.byte	32
	.byte	'Ifx_P_OUT',0,8,186,5,3
	.word	2088
	.byte	32
	.byte	'Ifx_P_PCSR',0,8,194,5,3
	.word	5598
	.byte	32
	.byte	'Ifx_P_PDISC',0,8,202,5,3
	.word	5312
	.byte	32
	.byte	'Ifx_P_PDR0',0,8,210,5,3
	.word	4281
	.byte	32
	.byte	'Ifx_P_PDR1',0,8,218,5,3
	.word	4597
	.byte	14
	.word	8957
	.byte	32
	.byte	'Ifx_P',0,8,139,6,3
	.word	88236
	.byte	15,7,83,9,1,16
	.byte	'IfxPort_InputMode_undefined',0,127,16
	.byte	'IfxPort_InputMode_noPullDevice',0,0,16
	.byte	'IfxPort_InputMode_pullDown',0,8,16
	.byte	'IfxPort_InputMode_pullUp',0,16,0,32
	.byte	'IfxPort_InputMode',0,7,89,3
	.word	88256
	.byte	32
	.byte	'IfxPort_Mode',0,7,116,3
	.word	19163
	.byte	32
	.byte	'IfxPort_OutputIdx',0,7,130,1,3
	.word	9640
	.byte	32
	.byte	'IfxPort_OutputMode',0,7,138,1,3
	.word	9570
	.byte	32
	.byte	'IfxPort_PadDriver',0,7,158,1,3
	.word	19907
	.byte	32
	.byte	'IfxPort_State',0,7,178,1,3
	.word	9953
	.byte	32
	.byte	'IfxPort_Pin',0,7,194,1,3
	.word	20702
	.byte	32
	.byte	'IfxScuCcu_PllStepsFunctionHook',0,14,148,1,16
	.word	178
	.byte	31,14,212,5,9,8,13
	.byte	'value',0
	.word	1581
	.byte	4,2,35,0,13
	.byte	'mask',0
	.word	1581
	.byte	4,2,35,4,0,32
	.byte	'IfxScuCcu_CcuconRegConfig',0,14,216,5,3
	.word	88594
	.byte	31,14,221,5,9,8,13
	.byte	'pDivider',0
	.word	614
	.byte	1,2,35,0,13
	.byte	'nDivider',0
	.word	614
	.byte	1,2,35,1,13
	.byte	'k2Initial',0
	.word	614
	.byte	1,2,35,2,13
	.byte	'waitTime',0
	.word	235
	.byte	4,2,35,4,0,32
	.byte	'IfxScuCcu_InitialStepConfig',0,14,227,5,3
	.word	88665
	.byte	31,14,231,5,9,12,13
	.byte	'k2Step',0
	.word	614
	.byte	1,2,35,0,13
	.byte	'waitTime',0
	.word	235
	.byte	4,2,35,2,13
	.byte	'hookFunction',0
	.word	88554
	.byte	4,2,35,8,0,32
	.byte	'IfxScuCcu_PllStepsConfig',0,14,236,5,3
	.word	88782
	.byte	3
	.word	175
	.byte	31,14,244,5,9,48,13
	.byte	'ccucon0',0
	.word	88594
	.byte	8,2,35,0,13
	.byte	'ccucon1',0
	.word	88594
	.byte	8,2,35,8,13
	.byte	'ccucon2',0
	.word	88594
	.byte	8,2,35,16,13
	.byte	'ccucon5',0
	.word	88594
	.byte	8,2,35,24,13
	.byte	'ccucon6',0
	.word	88594
	.byte	8,2,35,32,13
	.byte	'ccucon7',0
	.word	88594
	.byte	8,2,35,40,0,32
	.byte	'IfxScuCcu_ClockDistributionConfig',0,14,252,5,3
	.word	88884
	.byte	31,14,128,6,9,8,13
	.byte	'value',0
	.word	1581
	.byte	4,2,35,0,13
	.byte	'mask',0
	.word	1581
	.byte	4,2,35,4,0,32
	.byte	'IfxScuCcu_FlashWaitstateConfig',0,14,132,6,3
	.word	89036
	.byte	3
	.word	88782
	.byte	31,14,137,6,9,16,13
	.byte	'numOfPllDividerSteps',0
	.word	614
	.byte	1,2,35,0,13
	.byte	'pllDividerStep',0
	.word	89112
	.byte	4,2,35,4,13
	.byte	'pllInitialStep',0
	.word	88665
	.byte	8,2,35,8,0,32
	.byte	'IfxScuCcu_SysPllConfig',0,14,142,6,3
	.word	89117
	.byte	20
	.word	20860
	.byte	32
	.byte	'IfxI2c_Scl_InOut',0,16,65,3
	.word	89234
	.byte	20
	.word	20942
	.byte	32
	.byte	'IfxI2c_Sda_InOut',0,16,74,3
	.word	89264
	.byte	32
	.byte	'IfxSrc_Tos',0,11,74,3
	.word	10553
	.byte	32
	.byte	'IfxI2c_BusStatus',0,12,78,3
	.word	17863
	.byte	15,12,83,9,1,16
	.byte	'IfxI2c_ErrorInterruptSource_rxFifoUnderflow',0,0,16
	.byte	'IfxI2c_ErrorInterruptSource_rxFifoOverflow',0,1,16
	.byte	'IfxI2c_ErrorInterruptSource_txFifoUnderflow',0,2,16
	.byte	'IfxI2c_ErrorInterruptSource_txFifoOverflow',0,3,0,32
	.byte	'IfxI2c_ErrorInterruptSource',0,12,89,3
	.word	89338
	.byte	32
	.byte	'IfxI2c_PinSelect',0,12,101,3
	.word	18425
	.byte	32
	.byte	'IfxI2c_ProtocolInterruptSource',0,12,115,3
	.word	17383
	.byte	15,12,120,9,1,16
	.byte	'IfxI2c_SleepMode_enable',0,0,16
	.byte	'IfxI2c_SleepMode_disable',0,1,0,32
	.byte	'IfxI2c_SleepMode',0,12,124,3
	.word	89626
	.byte	0
	.sdecl	'.debug_abbrev',debug
	.sect	'.debug_abbrev'
.L77:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,16,6,0,0,2,21,0,54,15,39,12,0,0,3,15,0,73,19,0,0,4,46,1,3,8,32,13
	.byte	58,15,59,15,57,15,54,15,39,12,0,0,5,5,0,3,8,58,15,59,15,57,15,73,19,0,0,6,11,0,0,0,7,36,0,3,8,11,15,62
	.byte	15,0,0,8,46,1,3,8,32,13,58,15,59,15,57,15,73,19,54,15,39,12,0,0,9,59,0,3,8,0,0,10,19,1,3,8,58,15,59,15
	.byte	57,15,11,15,0,0,11,13,0,3,8,11,15,73,19,13,15,12,15,56,9,0,0,12,23,1,58,15,59,15,57,15,11,15,0,0,13,13
	.byte	0,3,8,73,19,11,15,56,9,0,0,14,53,0,73,19,0,0,15,4,1,58,15,59,15,57,15,11,15,0,0,16,40,0,3,8,28,13,0,0
	.byte	17,11,1,0,0,18,1,1,11,15,73,19,0,0,19,33,0,47,15,0,0,20,38,0,73,19,0,0,21,46,1,3,8,54,15,39,12,63,12,60
	.byte	12,0,0,22,5,0,73,19,0,0,23,46,1,3,8,73,19,54,15,39,12,63,12,60,12,0,0,24,5,0,3,8,73,19,0,0,25,46,1,49
	.byte	19,0,0,26,5,0,49,19,0,0,27,46,1,3,8,58,15,59,15,57,15,54,15,39,12,63,12,60,12,0,0,28,46,0,3,8,58,15,59
	.byte	15,57,15,73,19,54,15,39,12,63,12,60,12,0,0,29,29,1,49,19,0,0,30,11,0,49,19,0,0,31,19,1,58,15,59,15,57
	.byte	15,11,15,0,0,32,22,0,3,8,58,15,59,15,57,15,73,19,0,0,33,21,0,54,15,0,0,34,52,0,3,8,58,15,59,15,57,15,73
	.byte	19,63,12,60,12,0,0,0
	.sdecl	'.debug_line',debug
	.sect	'.debug_line'
.L78:
	.word	.L414-.L413
.L413:
	.half	3
	.word	.L416-.L415
.L415:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1
	.byte	'E:\\tasking workspace\\Copy of LQ_TC26xB_LIBtaskingAICTone\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Cpu\\Std',0
	.byte	'E:\\tasking workspace\\Copy of LQ_TC26xB_LIBtaskingAICTone\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Scu\\Std',0
	.byte	'E:\\tasking workspace\\Copy of LQ_TC26xB_LIBtaskingAICTone\\src\\BaseSw\\Infra\\Sfr\\TC26B\\_Reg',0
	.byte	'E:\\tasking workspace\\Copy of LQ_TC26xB_LIBtaskingAICTone\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\_Impl',0
	.byte	'E:\\tasking workspace\\Copy of LQ_TC26xB_LIBtaskingAICTone\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Port\\Std',0
	.byte	'E:\\tasking workspace\\Copy of LQ_TC26xB_LIBtaskingAICTone\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Src\\Std',0
	.byte	'E:\\tasking workspace\\Copy of LQ_TC26xB_LIBtaskingAICTone\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\_PinMap',0
	.byte	0
	.byte	'IfxCpu_IntrinsicsTasking.h',0,1,0,0
	.byte	'IfxCpu_Intrinsics.h',0,1,0,0
	.byte	'IfxScuWdt.h',0,2,0,0
	.byte	'IfxScu_regdef.h',0,3,0,0
	.byte	'IfxCpu.h',0,1,0,0
	.byte	'IfxCpu_cfg.h',0,4,0,0
	.byte	'IfxPort.h',0,5,0,0
	.byte	'IfxPort_regdef.h',0,3,0,0
	.byte	'IfxSrc.h',0,6,0,0
	.byte	'IfxSrc_regdef.h',0,3,0,0
	.byte	'IfxSrc_cfg.h',0,4,0,0
	.byte	'..\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\I2c\\Std\\IfxI2c.h',0,0,0,0
	.byte	'IfxI2c_regdef.h',0,3,0,0
	.byte	'IfxScuCcu.h',0,2,0,0
	.byte	'IfxI2c_cfg.h',0,4,0,0
	.byte	'IfxI2c_PinMap.h',0,7,0,0
	.byte	'Ifx_Types.h',0,1,0,0
	.byte	'..\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\I2c\\Std\\IfxI2c.c',0,0,0,0
	.byte	'Platform_Types.h',0,1,0,0
	.byte	'IfxScu_cfg.h',0,4,0,0
	.byte	'IfxCpu_regdef.h',0,3,0,0
	.byte	'IfxStm_regdef.h',0,3,0,0
	.byte	'IfxFlash_regdef.h',0,3,0,0,0
.L416:
.L414:
	.sdecl	'.debug_info',debug,cluster('IfxI2c_configureAsMaster')
	.sect	'.debug_info'
.L79:
	.word	284
	.half	3
	.word	.L80
	.byte	4,1
	.byte	'..\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\I2c\\Std\\IfxI2c.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'E:\\tasking workspace\\Copy of LQ_TC26xB_LIBtaskingAICTone\\Debug\\',0,12,1
	.word	.L82,.L81
	.byte	2
	.word	.L75
	.byte	3
	.byte	'IfxI2c_configureAsMaster',0,1,55,6,1,1,1
	.word	.L32,.L189,.L31
	.byte	4
	.byte	'i2c',0,1,55,40
	.word	.L190,.L191
	.byte	5
	.word	.L192
	.byte	6
	.word	.L193,.L32,.L194
	.byte	7
	.word	.L195,.L196
	.byte	8
	.word	.L197,.L32,.L194
	.byte	0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxI2c_configureAsMaster')
	.sect	'.debug_abbrev'
.L80:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,85,6,0,0,6,29,1,49,16
	.byte	17,1,18,1,0,0,7,5,0,49,16,2,6,0,0,8,11,0,49,16,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxI2c_configureAsMaster')
	.sect	'.debug_line'
.L81:
	.word	.L418-.L417
.L417:
	.half	3
	.word	.L420-.L419
.L419:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\I2c\\Std\\IfxI2c.c',0,0,0,0
	.byte	'..\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\I2c\\Std\\IfxI2c.h',0,0,0,0,0
.L420:
	.byte	4,2,5,22,7,0,5,2
	.word	.L32
	.byte	3,159,7,1,5,20,1,4,1,5,25,9
	.half	.L194-.L32
	.byte	3,156,121,1,5,19,9
	.half	.L421-.L194
	.byte	3,1,1,5,25,9
	.half	.L422-.L421
	.byte	1,9
	.half	.L423-.L422
	.byte	3,1,1,9
	.half	.L424-.L423
	.byte	3,1,1,9
	.half	.L425-.L424
	.byte	3,1,1,9
	.half	.L426-.L425
	.byte	3,1,1,5,19,9
	.half	.L427-.L426
	.byte	3,1,1,5,25,9
	.half	.L428-.L427
	.byte	1,5,19,9
	.half	.L429-.L428
	.byte	3,1,1,5,25,9
	.half	.L430-.L429
	.byte	1,5,1,9
	.half	.L431-.L430
	.byte	3,5,1,7,9
	.half	.L83-.L431
	.byte	0,1,1
.L418:
	.sdecl	'.debug_ranges',debug,cluster('IfxI2c_configureAsMaster')
	.sect	'.debug_ranges'
.L82:
	.word	-1,.L32,0,.L83-.L32,0,0
.L192:
	.word	-1,.L32,0,.L189-.L32,-1,.L34,0,.L183-.L34,-1,.L36,0,.L173-.L36,0,0
	.sdecl	'.debug_info',debug,cluster('IfxI2c_disableModule')
	.sect	'.debug_info'
.L84:
	.word	260
	.half	3
	.word	.L85
	.byte	4,1
	.byte	'..\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\I2c\\Std\\IfxI2c.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'E:\\tasking workspace\\Copy of LQ_TC26xB_LIBtaskingAICTone\\Debug\\',0,12,1
	.word	.L87,.L86
	.byte	2
	.word	.L75
	.byte	3
	.byte	'IfxI2c_disableModule',0,1,75,6,1,1,1
	.word	.L38,.L198,.L37
	.byte	4
	.byte	'i2c',0,1,75,36
	.word	.L190,.L199
	.byte	5
	.word	.L200
	.byte	6
	.byte	'pwd',0,1,77,12
	.word	.L201,.L202
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxI2c_disableModule')
	.sect	'.debug_abbrev'
.L85:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,85,6,0,0,6,52,0,3,8,58
	.byte	15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxI2c_disableModule')
	.sect	'.debug_line'
.L86:
	.word	.L433-.L432
.L432:
	.half	3
	.word	.L435-.L434
.L434:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\I2c\\Std\\IfxI2c.c',0,0,0,0,0
.L435:
	.byte	5,6,7,0,5,2
	.word	.L38
	.byte	3,202,0,1,5,50,9
	.half	.L363-.L38
	.byte	3,2,1,5,16,9
	.half	.L362-.L363
	.byte	1,5,31,9
	.half	.L365-.L362
	.byte	3,2,1,5,15,9
	.half	.L364-.L365
	.byte	3,2,1,5,21,9
	.half	.L436-.L364
	.byte	1,5,15,9
	.half	.L437-.L436
	.byte	3,2,1,5,22,9
	.half	.L2-.L437
	.byte	1,5,32,9
	.half	.L438-.L2
	.byte	1,5,29,7,9
	.half	.L439-.L438
	.byte	3,3,1,5,1,9
	.half	.L88-.L439
	.byte	3,1,0,1,1
.L433:
	.sdecl	'.debug_ranges',debug,cluster('IfxI2c_disableModule')
	.sect	'.debug_ranges'
.L87:
	.word	-1,.L38,0,.L88-.L38,0,0
.L200:
	.word	-1,.L38,0,.L198-.L38,-1,.L40,0,.L188-.L40,-1,.L42,0,.L178-.L42,0,0
	.sdecl	'.debug_info',debug,cluster('IfxI2c_enableBurstDataTransferInterrupt')
	.sect	'.debug_info'
.L89:
	.word	400
	.half	3
	.word	.L90
	.byte	4,1
	.byte	'..\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\I2c\\Std\\IfxI2c.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'E:\\tasking workspace\\Copy of LQ_TC26xB_LIBtaskingAICTone\\Debug\\',0,12,1
	.word	.L92,.L91
	.byte	2
	.word	.L75
	.byte	3
	.byte	'IfxI2c_enableBurstDataTransferInterrupt',0,1,90,6,1,1,1
	.word	.L44,.L203,.L43
	.byte	4
	.byte	'i2c',0,1,90,55
	.word	.L190,.L204
	.byte	4
	.byte	'typeOfService',0,1,90,71
	.word	.L205,.L206
	.byte	4
	.byte	'priority',0,1,90,93
	.word	.L201,.L207
	.byte	5
	.word	.L44,.L203
	.byte	6
	.word	.L208,.L44,.L4
	.byte	7
	.word	.L209,.L210
	.byte	8
	.word	.L211,.L44,.L4
	.byte	0,6
	.word	.L212,.L4,.L213
	.byte	7
	.word	.L214,.L215
	.byte	7
	.word	.L216,.L217
	.byte	7
	.word	.L218,.L219
	.byte	9
	.word	.L220,.L221
	.byte	0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxI2c_enableBurstDataTransferInterrupt')
	.sect	'.debug_abbrev'
.L90:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,29,1,49
	.byte	16,17,1,18,1,0,0,7,5,0,49,16,2,6,0,0,8,11,0,49,16,17,1,18,1,0,0,9,11,0,49,16,85,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxI2c_enableBurstDataTransferInterrupt')
	.sect	'.debug_line'
.L91:
	.word	.L441-.L440
.L440:
	.half	3
	.word	.L443-.L442
.L442:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1
	.byte	'E:\\tasking workspace\\Copy of LQ_TC26xB_LIBtaskingAICTone\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Src\\Std',0
	.byte	0
	.byte	'..\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\I2c\\Std\\IfxI2c.c',0,0,0,0
	.byte	'..\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\I2c\\Std\\IfxI2c.h',0,0,0,0
	.byte	'IfxSrc.h',0,1,0,0,0
.L443:
	.byte	4,2,5,17,7,0,5,2
	.word	.L44
	.byte	3,241,5,1,5,5,9
	.half	.L444-.L44
	.byte	1,5,38,7,9
	.half	.L445-.L444
	.byte	3,2,1,5,9,9
	.half	.L446-.L445
	.byte	1,5,38,9
	.half	.L3-.L446
	.byte	3,4,1,4,3,5,17,9
	.half	.L4-.L3
	.byte	3,156,124,1,4,1,5,1,9
	.half	.L213-.L4
	.byte	3,204,126,1,7,9
	.half	.L93-.L213
	.byte	0,1,1
.L441:
	.sdecl	'.debug_ranges',debug,cluster('IfxI2c_enableBurstDataTransferInterrupt')
	.sect	'.debug_ranges'
.L92:
	.word	-1,.L44,0,.L93-.L44,0,0
.L221:
	.word	-1,.L44,.L4-.L44,.L213-.L44,-1,.L46,0,.L168-.L46,0,0
	.sdecl	'.debug_info',debug,cluster('IfxI2c_enableErrorInterrupt')
	.sect	'.debug_info'
.L94:
	.word	392
	.half	3
	.word	.L95
	.byte	4,1
	.byte	'..\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\I2c\\Std\\IfxI2c.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'E:\\tasking workspace\\Copy of LQ_TC26xB_LIBtaskingAICTone\\Debug\\',0,12,1
	.word	.L97,.L96
	.byte	2
	.word	.L75
	.byte	3
	.byte	'IfxI2c_enableErrorInterrupt',0,1,99,6,1,1,1
	.word	.L48,.L222,.L47
	.byte	4
	.byte	'i2c',0,1,99,43
	.word	.L190,.L223
	.byte	4
	.byte	'typeOfService',0,1,99,59
	.word	.L205,.L224
	.byte	4
	.byte	'priority',0,1,99,81
	.word	.L201,.L225
	.byte	5
	.word	.L48,.L222
	.byte	6
	.word	.L226,.L48,.L6
	.byte	7
	.word	.L227,.L228
	.byte	8
	.word	.L229,.L48,.L6
	.byte	0,6
	.word	.L212,.L6,.L230
	.byte	7
	.word	.L214,.L231
	.byte	7
	.word	.L216,.L232
	.byte	7
	.word	.L218,.L233
	.byte	8
	.word	.L220,.L6,.L230
	.byte	0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxI2c_enableErrorInterrupt')
	.sect	'.debug_abbrev'
.L95:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,29,1,49
	.byte	16,17,1,18,1,0,0,7,5,0,49,16,2,6,0,0,8,11,0,49,16,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxI2c_enableErrorInterrupt')
	.sect	'.debug_line'
.L96:
	.word	.L448-.L447
.L447:
	.half	3
	.word	.L450-.L449
.L449:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1
	.byte	'E:\\tasking workspace\\Copy of LQ_TC26xB_LIBtaskingAICTone\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Src\\Std',0
	.byte	0
	.byte	'..\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\I2c\\Std\\IfxI2c.c',0,0,0,0
	.byte	'..\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\I2c\\Std\\IfxI2c.h',0,0,0,0
	.byte	'IfxSrc.h',0,1,0,0,0
.L450:
	.byte	4,2,5,17,7,0,5,2
	.word	.L48
	.byte	3,150,6,1,5,5,9
	.half	.L451-.L48
	.byte	1,5,38,7,9
	.half	.L452-.L451
	.byte	3,2,1,5,9,9
	.half	.L453-.L452
	.byte	1,5,38,9
	.half	.L5-.L453
	.byte	3,4,1,4,3,5,17,9
	.half	.L6-.L5
	.byte	3,247,123,1,4,1,5,1,9
	.half	.L230-.L6
	.byte	3,213,126,1,7,9
	.half	.L98-.L230
	.byte	0,1,1
.L448:
	.sdecl	'.debug_ranges',debug,cluster('IfxI2c_enableErrorInterrupt')
	.sect	'.debug_ranges'
.L97:
	.word	-1,.L48,0,.L98-.L48,0,0
	.sdecl	'.debug_info',debug,cluster('IfxI2c_enableLastBurstDataTransferInterrupt')
	.sect	'.debug_info'
.L99:
	.word	408
	.half	3
	.word	.L100
	.byte	4,1
	.byte	'..\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\I2c\\Std\\IfxI2c.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'E:\\tasking workspace\\Copy of LQ_TC26xB_LIBtaskingAICTone\\Debug\\',0,12,1
	.word	.L102,.L101
	.byte	2
	.word	.L75
	.byte	3
	.byte	'IfxI2c_enableLastBurstDataTransferInterrupt',0,1,108,6,1,1,1
	.word	.L50,.L234,.L49
	.byte	4
	.byte	'i2c',0,1,108,59
	.word	.L190,.L235
	.byte	4
	.byte	'typeOfService',0,1,108,75
	.word	.L205,.L236
	.byte	4
	.byte	'priority',0,1,108,97
	.word	.L201,.L237
	.byte	5
	.word	.L50,.L234
	.byte	6
	.word	.L238,.L50,.L8
	.byte	7
	.word	.L239,.L240
	.byte	8
	.word	.L241,.L50,.L8
	.byte	0,6
	.word	.L212,.L8,.L242
	.byte	7
	.word	.L214,.L243
	.byte	7
	.word	.L216,.L244
	.byte	7
	.word	.L218,.L245
	.byte	8
	.word	.L220,.L8,.L242
	.byte	0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxI2c_enableLastBurstDataTransferInterrupt')
	.sect	'.debug_abbrev'
.L100:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,29,1,49
	.byte	16,17,1,18,1,0,0,7,5,0,49,16,2,6,0,0,8,11,0,49,16,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxI2c_enableLastBurstDataTransferInterrupt')
	.sect	'.debug_line'
.L101:
	.word	.L455-.L454
.L454:
	.half	3
	.word	.L457-.L456
.L456:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1
	.byte	'E:\\tasking workspace\\Copy of LQ_TC26xB_LIBtaskingAICTone\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Src\\Std',0
	.byte	0
	.byte	'..\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\I2c\\Std\\IfxI2c.c',0,0,0,0
	.byte	'..\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\I2c\\Std\\IfxI2c.h',0,0,0,0
	.byte	'IfxSrc.h',0,1,0,0,0
.L457:
	.byte	4,2,5,17,7,0,5,2
	.word	.L50
	.byte	3,163,6,1,5,5,9
	.half	.L458-.L50
	.byte	1,5,38,7,9
	.half	.L459-.L458
	.byte	3,2,1,5,9,9
	.half	.L460-.L459
	.byte	1,5,38,9
	.half	.L7-.L460
	.byte	3,4,1,4,3,5,17,9
	.half	.L8-.L7
	.byte	3,234,123,1,4,1,5,1,9
	.half	.L242-.L8
	.byte	3,222,126,1,7,9
	.half	.L103-.L242
	.byte	0,1,1
.L455:
	.sdecl	'.debug_ranges',debug,cluster('IfxI2c_enableLastBurstDataTransferInterrupt')
	.sect	'.debug_ranges'
.L102:
	.word	-1,.L50,0,.L103-.L50,0,0
	.sdecl	'.debug_info',debug,cluster('IfxI2c_enableLastSingleDataTransferInterrupt')
	.sect	'.debug_info'
.L104:
	.word	409
	.half	3
	.word	.L105
	.byte	4,1
	.byte	'..\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\I2c\\Std\\IfxI2c.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'E:\\tasking workspace\\Copy of LQ_TC26xB_LIBtaskingAICTone\\Debug\\',0,12,1
	.word	.L107,.L106
	.byte	2
	.word	.L75
	.byte	3
	.byte	'IfxI2c_enableLastSingleDataTransferInterrupt',0,1,117,6,1,1,1
	.word	.L52,.L246,.L51
	.byte	4
	.byte	'i2c',0,1,117,60
	.word	.L190,.L247
	.byte	4
	.byte	'typeOfService',0,1,117,76
	.word	.L205,.L248
	.byte	4
	.byte	'priority',0,1,117,98
	.word	.L201,.L249
	.byte	5
	.word	.L52,.L246
	.byte	6
	.word	.L250,.L52,.L10
	.byte	7
	.word	.L251,.L252
	.byte	8
	.word	.L253,.L52,.L10
	.byte	0,6
	.word	.L212,.L10,.L254
	.byte	7
	.word	.L214,.L255
	.byte	7
	.word	.L216,.L256
	.byte	7
	.word	.L218,.L257
	.byte	8
	.word	.L220,.L10,.L254
	.byte	0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxI2c_enableLastSingleDataTransferInterrupt')
	.sect	'.debug_abbrev'
.L105:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,29,1,49
	.byte	16,17,1,18,1,0,0,7,5,0,49,16,2,6,0,0,8,11,0,49,16,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxI2c_enableLastSingleDataTransferInterrupt')
	.sect	'.debug_line'
.L106:
	.word	.L462-.L461
.L461:
	.half	3
	.word	.L464-.L463
.L463:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1
	.byte	'E:\\tasking workspace\\Copy of LQ_TC26xB_LIBtaskingAICTone\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Src\\Std',0
	.byte	0
	.byte	'..\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\I2c\\Std\\IfxI2c.c',0,0,0,0
	.byte	'..\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\I2c\\Std\\IfxI2c.h',0,0,0,0
	.byte	'IfxSrc.h',0,1,0,0,0
.L464:
	.byte	4,2,5,17,7,0,5,2
	.word	.L52
	.byte	3,182,6,1,5,5,9
	.half	.L465-.L52
	.byte	1,5,38,7,9
	.half	.L466-.L465
	.byte	3,2,1,5,9,9
	.half	.L467-.L466
	.byte	1,5,38,9
	.half	.L9-.L467
	.byte	3,4,1,4,3,5,17,9
	.half	.L10-.L9
	.byte	3,215,123,1,4,1,5,1,9
	.half	.L254-.L10
	.byte	3,231,126,1,7,9
	.half	.L108-.L254
	.byte	0,1,1
.L462:
	.sdecl	'.debug_ranges',debug,cluster('IfxI2c_enableLastSingleDataTransferInterrupt')
	.sect	'.debug_ranges'
.L107:
	.word	-1,.L52,0,.L108-.L52,0,0
	.sdecl	'.debug_info',debug,cluster('IfxI2c_enableModule')
	.sect	'.debug_info'
.L109:
	.word	264
	.half	3
	.word	.L110
	.byte	4,1
	.byte	'..\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\I2c\\Std\\IfxI2c.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'E:\\tasking workspace\\Copy of LQ_TC26xB_LIBtaskingAICTone\\Debug\\',0,12,1
	.word	.L112,.L111
	.byte	2
	.word	.L75
	.byte	3
	.byte	'IfxI2c_enableModule',0,1,126,6,1,1,1
	.word	.L54,.L258,.L53
	.byte	4
	.byte	'i2c',0,1,126,35
	.word	.L190,.L259
	.byte	5
	.word	.L54,.L258
	.byte	6
	.byte	'pwd',0,1,128,1,12
	.word	.L201,.L260
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxI2c_enableModule')
	.sect	'.debug_abbrev'
.L110:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3
	.byte	8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxI2c_enableModule')
	.sect	'.debug_line'
.L111:
	.word	.L469-.L468
.L468:
	.half	3
	.word	.L471-.L470
.L470:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\I2c\\Std\\IfxI2c.c',0,0,0,0,0
.L471:
	.byte	5,6,7,0,5,2
	.word	.L54
	.byte	3,253,0,1,5,50,9
	.half	.L371-.L54
	.byte	3,2,1,5,16,9
	.half	.L370-.L371
	.byte	1,5,31,9
	.half	.L373-.L370
	.byte	3,2,1,5,15,9
	.half	.L372-.L373
	.byte	3,1,1,5,21,9
	.half	.L472-.L372
	.byte	1,5,15,9
	.half	.L473-.L472
	.byte	3,2,1,5,22,9
	.half	.L11-.L473
	.byte	1,5,33,9
	.half	.L474-.L11
	.byte	1,5,23,7,9
	.half	.L475-.L474
	.byte	3,3,1,5,21,1,5,23,9
	.half	.L12-.L475
	.byte	3,2,1,5,33,9
	.half	.L476-.L12
	.byte	1,5,16,7,9
	.half	.L477-.L476
	.byte	3,3,1,5,22,9
	.half	.L478-.L477
	.byte	1,5,23,9
	.half	.L13-.L478
	.byte	3,2,1,5,34,9
	.half	.L479-.L13
	.byte	1,5,23,7,9
	.half	.L480-.L479
	.byte	3,4,1,5,21,1,5,29,9
	.half	.L481-.L480
	.byte	3,4,1,5,21,9
	.half	.L375-.L481
	.byte	3,125,1,9
	.half	.L482-.L375
	.byte	3,1,1,5,29,9
	.half	.L483-.L482
	.byte	3,2,1,5,1,7,9
	.half	.L113-.L483
	.byte	3,1,0,1,1
.L469:
	.sdecl	'.debug_ranges',debug,cluster('IfxI2c_enableModule')
	.sect	'.debug_ranges'
.L112:
	.word	-1,.L54,0,.L113-.L54,0,0
	.sdecl	'.debug_info',debug,cluster('IfxI2c_enableProtocolInterrupt')
	.sect	'.debug_info'
.L114:
	.word	399
	.half	3
	.word	.L115
	.byte	4,1
	.byte	'..\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\I2c\\Std\\IfxI2c.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'E:\\tasking workspace\\Copy of LQ_TC26xB_LIBtaskingAICTone\\Debug\\',0,12,1
	.word	.L117,.L116
	.byte	2
	.word	.L75
	.byte	3
	.byte	'IfxI2c_enableProtocolInterrupt',0,1,155,1,6,1,1,1
	.word	.L56,.L261,.L55
	.byte	4
	.byte	'i2c',0,1,155,1,43
	.word	.L262,.L263
	.byte	4
	.byte	'typeOfService',0,1,155,1,59
	.word	.L205,.L264
	.byte	4
	.byte	'priority',0,1,155,1,81
	.word	.L201,.L265
	.byte	5
	.word	.L56,.L261
	.byte	6
	.word	.L266,.L56,.L15
	.byte	7
	.word	.L267,.L268
	.byte	8
	.word	.L269,.L56,.L15
	.byte	0,6
	.word	.L212,.L15,.L270
	.byte	7
	.word	.L214,.L271
	.byte	7
	.word	.L216,.L272
	.byte	7
	.word	.L218,.L273
	.byte	8
	.word	.L220,.L15,.L270
	.byte	0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxI2c_enableProtocolInterrupt')
	.sect	'.debug_abbrev'
.L115:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,29,1,49
	.byte	16,17,1,18,1,0,0,7,5,0,49,16,2,6,0,0,8,11,0,49,16,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxI2c_enableProtocolInterrupt')
	.sect	'.debug_line'
.L116:
	.word	.L485-.L484
.L484:
	.half	3
	.word	.L487-.L486
.L486:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1
	.byte	'E:\\tasking workspace\\Copy of LQ_TC26xB_LIBtaskingAICTone\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Src\\Std',0
	.byte	0
	.byte	'..\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\I2c\\Std\\IfxI2c.c',0,0,0,0
	.byte	'..\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\I2c\\Std\\IfxI2c.h',0,0,0,0
	.byte	'IfxSrc.h',0,1,0,0,0
.L487:
	.byte	4,2,5,17,7,0,5,2
	.word	.L56
	.byte	3,213,6,1,5,5,9
	.half	.L488-.L56
	.byte	1,5,38,7,9
	.half	.L489-.L488
	.byte	3,2,1,5,9,9
	.half	.L490-.L489
	.byte	1,5,38,9
	.half	.L14-.L490
	.byte	3,4,1,4,3,5,17,9
	.half	.L15-.L14
	.byte	3,184,123,1,4,1,5,1,9
	.half	.L270-.L15
	.byte	3,141,127,1,7,9
	.half	.L118-.L270
	.byte	0,1,1
.L485:
	.sdecl	'.debug_ranges',debug,cluster('IfxI2c_enableProtocolInterrupt')
	.sect	'.debug_ranges'
.L117:
	.word	-1,.L56,0,.L118-.L56,0,0
	.sdecl	'.debug_info',debug,cluster('IfxI2c_enableSingleDataTransferInterrupt')
	.sect	'.debug_info'
.L119:
	.word	409
	.half	3
	.word	.L120
	.byte	4,1
	.byte	'..\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\I2c\\Std\\IfxI2c.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'E:\\tasking workspace\\Copy of LQ_TC26xB_LIBtaskingAICTone\\Debug\\',0,12,1
	.word	.L122,.L121
	.byte	2
	.word	.L75
	.byte	3
	.byte	'IfxI2c_enableSingleDataTransferInterrupt',0,1,164,1,6,1,1,1
	.word	.L58,.L274,.L57
	.byte	4
	.byte	'i2c',0,1,164,1,56
	.word	.L190,.L275
	.byte	4
	.byte	'typeOfService',0,1,164,1,72
	.word	.L205,.L276
	.byte	4
	.byte	'priority',0,1,164,1,94
	.word	.L201,.L277
	.byte	5
	.word	.L58,.L274
	.byte	6
	.word	.L278,.L58,.L17
	.byte	7
	.word	.L279,.L280
	.byte	8
	.word	.L281,.L58,.L17
	.byte	0,6
	.word	.L212,.L17,.L282
	.byte	7
	.word	.L214,.L283
	.byte	7
	.word	.L216,.L284
	.byte	7
	.word	.L218,.L285
	.byte	8
	.word	.L220,.L17,.L282
	.byte	0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxI2c_enableSingleDataTransferInterrupt')
	.sect	'.debug_abbrev'
.L120:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,29,1,49
	.byte	16,17,1,18,1,0,0,7,5,0,49,16,2,6,0,0,8,11,0,49,16,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxI2c_enableSingleDataTransferInterrupt')
	.sect	'.debug_line'
.L121:
	.word	.L492-.L491
.L491:
	.half	3
	.word	.L494-.L493
.L493:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1
	.byte	'E:\\tasking workspace\\Copy of LQ_TC26xB_LIBtaskingAICTone\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Src\\Std',0
	.byte	0
	.byte	'..\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\I2c\\Std\\IfxI2c.c',0,0,0,0
	.byte	'..\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\I2c\\Std\\IfxI2c.h',0,0,0,0
	.byte	'IfxSrc.h',0,1,0,0,0
.L494:
	.byte	4,2,5,17,7,0,5,2
	.word	.L58
	.byte	3,226,6,1,5,5,9
	.half	.L495-.L58
	.byte	1,5,38,7,9
	.half	.L496-.L495
	.byte	3,2,1,5,9,9
	.half	.L497-.L496
	.byte	1,5,38,9
	.half	.L16-.L497
	.byte	3,4,1,4,3,5,17,9
	.half	.L17-.L16
	.byte	3,171,123,1,4,1,5,1,9
	.half	.L282-.L17
	.byte	3,150,127,1,7,9
	.half	.L123-.L282
	.byte	0,1,1
.L492:
	.sdecl	'.debug_ranges',debug,cluster('IfxI2c_enableSingleDataTransferInterrupt')
	.sect	'.debug_ranges'
.L122:
	.word	-1,.L58,0,.L123-.L58,0,0
	.sdecl	'.debug_info',debug,cluster('IfxI2c_getAddress')
	.sect	'.debug_info'
.L124:
	.word	271
	.half	3
	.word	.L125
	.byte	4,1
	.byte	'..\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\I2c\\Std\\IfxI2c.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'E:\\tasking workspace\\Copy of LQ_TC26xB_LIBtaskingAICTone\\Debug\\',0,12,1
	.word	.L127,.L126
	.byte	2
	.word	.L75
	.byte	3
	.byte	'IfxI2c_getAddress',0,1,173,1,10
	.word	.L190
	.byte	1,1,1
	.word	.L60,.L286,.L59
	.byte	4
	.byte	'i2c',0,1,173,1,41
	.word	.L287,.L288
	.byte	5
	.word	.L60,.L286
	.byte	6
	.byte	'module',0,1,175,1,14
	.word	.L190,.L289
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxI2c_getAddress')
	.sect	'.debug_abbrev'
.L125:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxI2c_getAddress')
	.sect	'.debug_line'
.L126:
	.word	.L499-.L498
.L498:
	.half	3
	.word	.L501-.L500
.L500:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\I2c\\Std\\IfxI2c.c',0,0,0,0,0
.L501:
	.byte	5,5,7,0,5,2
	.word	.L60
	.byte	3,176,1,1,5,29,7,9
	.half	.L502-.L60
	.byte	3,2,1,5,48,9
	.half	.L503-.L502
	.byte	1,5,53,9
	.half	.L504-.L503
	.byte	1,5,1,9
	.half	.L376-.L504
	.byte	3,8,1,5,16,7,9
	.half	.L18-.L376
	.byte	3,124,1,5,1,9
	.half	.L377-.L18
	.byte	3,4,1,7,9
	.half	.L128-.L377
	.byte	0,1,1
.L499:
	.sdecl	'.debug_ranges',debug,cluster('IfxI2c_getAddress')
	.sect	'.debug_ranges'
.L127:
	.word	-1,.L60,0,.L128-.L60,0,0
	.sdecl	'.debug_info',debug,cluster('IfxI2c_getBaudrate')
	.sect	'.debug_info'
.L129:
	.word	324
	.half	3
	.word	.L130
	.byte	4,1
	.byte	'..\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\I2c\\Std\\IfxI2c.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'E:\\tasking workspace\\Copy of LQ_TC26xB_LIBtaskingAICTone\\Debug\\',0,12,1
	.word	.L132,.L131
	.byte	2
	.word	.L75
	.byte	3
	.byte	'IfxI2c_getBaudrate',0,1,190,1,9
	.word	.L290
	.byte	1,1,1
	.word	.L62,.L291,.L61
	.byte	4
	.byte	'i2c',0,1,190,1,37
	.word	.L190,.L292
	.byte	5
	.word	.L62,.L291
	.byte	6
	.byte	'inc',0,1,192,1,13
	.word	.L293,.L294
	.byte	6
	.byte	'dec',0,1,193,1,13
	.word	.L201,.L295
	.byte	6
	.byte	'rmc',0,1,194,1,13
	.word	.L293,.L296
	.byte	6
	.byte	'fKernel',0,1,195,1,13
	.word	.L290,.L297
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxI2c_getBaudrate')
	.sect	'.debug_abbrev'
.L130:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxI2c_getBaudrate')
	.sect	'.debug_line'
.L131:
	.word	.L506-.L505
.L505:
	.half	3
	.word	.L508-.L507
.L507:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\I2c\\Std\\IfxI2c.c',0,0,0,0,0
.L508:
	.byte	5,37,7,0,5,2
	.word	.L62
	.byte	3,191,1,1,9
	.half	.L379-.L62
	.byte	3,1,1,5,34,9
	.half	.L509-.L379
	.byte	3,1,1,5,50,9
	.half	.L380-.L509
	.byte	3,1,1,5,36,9
	.half	.L378-.L380
	.byte	3,2,1,5,40,9
	.half	.L381-.L378
	.byte	1,5,23,9
	.half	.L510-.L381
	.byte	1,5,21,9
	.half	.L382-.L510
	.byte	1,5,47,9
	.half	.L511-.L382
	.byte	1,5,28,9
	.half	.L512-.L511
	.byte	1,5,1,3,1,1,7,9
	.half	.L133-.L512
	.byte	0,1,1
.L506:
	.sdecl	'.debug_ranges',debug,cluster('IfxI2c_getBaudrate')
	.sect	'.debug_ranges'
.L132:
	.word	-1,.L62,0,.L133-.L62,0,0
	.sdecl	'.debug_info',debug,cluster('IfxI2c_getIndex')
	.sect	'.debug_info'
.L134:
	.word	269
	.half	3
	.word	.L135
	.byte	4,1
	.byte	'..\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\I2c\\Std\\IfxI2c.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'E:\\tasking workspace\\Copy of LQ_TC26xB_LIBtaskingAICTone\\Debug\\',0,12,1
	.word	.L137,.L136
	.byte	2
	.word	.L75
	.byte	3
	.byte	'IfxI2c_getIndex',0,1,201,1,14
	.word	.L287
	.byte	1,1,1
	.word	.L64,.L298,.L63
	.byte	4
	.byte	'i2c',0,1,201,1,39
	.word	.L190,.L299
	.byte	5
	.word	.L64,.L298
	.byte	6
	.byte	'result',0,1,204,1,18
	.word	.L287,.L300
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxI2c_getIndex')
	.sect	'.debug_abbrev'
.L135:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxI2c_getIndex')
	.sect	'.debug_line'
.L136:
	.word	.L514-.L513
.L513:
	.half	3
	.word	.L516-.L515
.L515:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\I2c\\Std\\IfxI2c.c',0,0,0,0,0
.L516:
	.byte	5,13,7,0,5,2
	.word	.L64
	.byte	3,209,1,1,5,39,9
	.half	.L517-.L64
	.byte	1,5,12,9
	.half	.L518-.L517
	.byte	3,124,1,5,9,9
	.half	.L383-.L518
	.byte	3,4,1,5,62,7,9
	.half	.L519-.L383
	.byte	3,2,1,5,22,9
	.half	.L520-.L519
	.byte	1,5,1,9
	.half	.L22-.L520
	.byte	3,6,1,7,9
	.half	.L138-.L22
	.byte	0,1,1
.L514:
	.sdecl	'.debug_ranges',debug,cluster('IfxI2c_getIndex')
	.sect	'.debug_ranges'
.L137:
	.word	-1,.L64,0,.L138-.L64,0,0
	.sdecl	'.debug_info',debug,cluster('IfxI2c_initSclSdaPin')
	.sect	'.debug_info'
.L139:
	.word	489
	.half	3
	.word	.L140
	.byte	4,1
	.byte	'..\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\I2c\\Std\\IfxI2c.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'E:\\tasking workspace\\Copy of LQ_TC26xB_LIBtaskingAICTone\\Debug\\',0,12,1
	.word	.L142,.L141
	.byte	2
	.word	.L75
	.byte	3
	.byte	'IfxI2c_initSclSdaPin',0,1,221,1,6,1,1,1
	.word	.L66,.L301,.L65
	.byte	4
	.byte	'scl',0,1,221,1,51
	.word	.L302,.L303
	.byte	4
	.byte	'sda',0,1,221,1,80
	.word	.L304,.L305
	.byte	4
	.byte	'padDriver',0,1,221,1,103
	.word	.L306,.L307
	.byte	5
	.word	.L66,.L301
	.byte	6
	.word	.L308,.L309,.L310
	.byte	7
	.word	.L311,.L312
	.byte	7
	.word	.L313,.L314
	.byte	7
	.word	.L315,.L316
	.byte	7
	.word	.L317,.L318
	.byte	8
	.word	.L319,.L309,.L310
	.byte	0,6
	.word	.L308,.L310,.L320
	.byte	7
	.word	.L311,.L312
	.byte	7
	.word	.L313,.L314
	.byte	7
	.word	.L315,.L316
	.byte	7
	.word	.L317,.L318
	.byte	8
	.word	.L319,.L310,.L320
	.byte	0,6
	.word	.L321,.L322,.L323
	.byte	7
	.word	.L324,.L325
	.byte	7
	.word	.L326,.L327
	.byte	9
	.word	.L328,.L329
	.byte	0,6
	.word	.L321,.L330,.L331
	.byte	7
	.word	.L324,.L325
	.byte	7
	.word	.L326,.L327
	.byte	0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxI2c_initSclSdaPin')
	.sect	'.debug_abbrev'
.L140:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,29,1,49
	.byte	16,17,1,18,1,0,0,7,5,0,49,16,2,6,0,0,8,11,0,49,16,17,1,18,1,0,0,9,11,0,49,16,85,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxI2c_initSclSdaPin')
	.sect	'.debug_line'
.L141:
	.word	.L522-.L521
.L521:
	.half	3
	.word	.L524-.L523
.L523:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1
	.byte	'E:\\tasking workspace\\Copy of LQ_TC26xB_LIBtaskingAICTone\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Port\\Std',0
	.byte	0
	.byte	'..\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\I2c\\Std\\IfxI2c.c',0,0,0,0
	.byte	'IfxPort.h',0,1,0,0
	.byte	'..\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\I2c\\Std\\IfxI2c.h',0,0,0,0,0
.L524:
	.byte	5,6,7,0,5,2
	.word	.L66
	.byte	3,220,1,1,5,73,9
	.half	.L386-.L66
	.byte	3,3,1,5,6,9
	.half	.L387-.L386
	.byte	3,125,1,4,2,5,61,9
	.half	.L309-.L387
	.byte	3,239,2,1,4,1,5,38,3,148,125,1,5,53,9
	.half	.L385-.L309
	.byte	1,4,2,5,40,9
	.half	.L384-.L385
	.byte	3,236,2,1,4,1,5,73,9
	.half	.L310-.L384
	.byte	3,149,125,1,5,38,9
	.half	.L525-.L310
	.byte	1,4,2,5,61,9
	.half	.L526-.L525
	.byte	3,235,2,1,4,1,5,53,3,149,125,1,4,2,5,40,9
	.half	.L527-.L526
	.byte	3,235,2,1,4,1,5,37,9
	.half	.L320-.L527
	.byte	3,150,125,1,5,52,9
	.half	.L528-.L320
	.byte	1,5,63,9
	.half	.L529-.L528
	.byte	1,5,37,9
	.half	.L530-.L529
	.byte	3,1,1,5,52,9
	.half	.L531-.L530
	.byte	1,5,63,9
	.half	.L532-.L531
	.byte	1,5,31,9
	.half	.L533-.L532
	.byte	3,1,1,4,3,5,17,9
	.half	.L322-.L533
	.byte	3,158,5,1,4,1,5,62,9
	.half	.L323-.L322
	.byte	3,226,122,1,4,3,5,17,9
	.half	.L330-.L323
	.byte	3,158,5,1,5,24,9
	.half	.L534-.L330
	.byte	1,4,1,5,1,9
	.half	.L331-.L534
	.byte	3,227,122,1,7,9
	.half	.L143-.L331
	.byte	0,1,1
.L522:
	.sdecl	'.debug_ranges',debug,cluster('IfxI2c_initSclSdaPin')
	.sect	'.debug_ranges'
.L142:
	.word	-1,.L66,0,.L143-.L66,0,0
.L329:
	.word	-1,.L66,.L322-.L66,.L323-.L66,.L330-.L66,.L331-.L66,0,0
	.sdecl	'.debug_info',debug,cluster('IfxI2c_releaseBus')
	.sect	'.debug_info'
.L144:
	.word	337
	.half	3
	.word	.L145
	.byte	4,1
	.byte	'..\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\I2c\\Std\\IfxI2c.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'E:\\tasking workspace\\Copy of LQ_TC26xB_LIBtaskingAICTone\\Debug\\',0,12,1
	.word	.L147,.L146
	.byte	2
	.word	.L75
	.byte	3
	.byte	'IfxI2c_releaseBus',0,1,232,1,6,1,1,1
	.word	.L68,.L332,.L67
	.byte	4
	.byte	'i2c',0,1,232,1,33
	.word	.L190,.L333
	.byte	5
	.word	.L68,.L332
	.byte	6
	.word	.L334,.L25,.L335
	.byte	7
	.word	.L336,.L337
	.byte	7
	.word	.L338,.L339
	.byte	8
	.word	.L340,.L25,.L335
	.byte	0,6
	.word	.L341,.L342,.L24
	.byte	7
	.word	.L343,.L344
	.byte	7
	.word	.L345,.L346
	.byte	8
	.word	.L347,.L342,.L24
	.byte	0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxI2c_releaseBus')
	.sect	'.debug_abbrev'
.L145:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,29,1,49
	.byte	16,17,1,18,1,0,0,7,5,0,49,16,2,6,0,0,8,11,0,49,16,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxI2c_releaseBus')
	.sect	'.debug_line'
.L146:
	.word	.L536-.L535
.L535:
	.half	3
	.word	.L538-.L537
.L537:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\I2c\\Std\\IfxI2c.c',0,0,0,0
	.byte	'..\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\I2c\\Std\\IfxI2c.h',0,0,0,0,0
.L538:
	.byte	5,23,7,0,5,2
	.word	.L68
	.byte	3,234,1,1,5,5,9
	.half	.L539-.L68
	.byte	1,5,24,7,9
	.half	.L540-.L539
	.byte	3,2,1,5,32,9
	.half	.L541-.L540
	.byte	1,4,2,5,24,9
	.half	.L25-.L541
	.byte	3,227,4,1,4,1,5,117,9
	.half	.L335-.L25
	.byte	3,160,123,1,4,2,5,24,7,9
	.half	.L342-.L335
	.byte	3,150,3,1,5,19,1,4,1,5,1,9
	.half	.L24-.L342
	.byte	3,239,124,1,7,9
	.half	.L148-.L24
	.byte	0,1,1
.L536:
	.sdecl	'.debug_ranges',debug,cluster('IfxI2c_releaseBus')
	.sect	'.debug_ranges'
.L147:
	.word	-1,.L68,0,.L148-.L68,0,0
	.sdecl	'.debug_info',debug,cluster('IfxI2c_resetFifo')
	.sect	'.debug_info'
.L149:
	.word	245
	.half	3
	.word	.L150
	.byte	4,1
	.byte	'..\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\I2c\\Std\\IfxI2c.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'E:\\tasking workspace\\Copy of LQ_TC26xB_LIBtaskingAICTone\\Debug\\',0,12,1
	.word	.L152,.L151
	.byte	2
	.word	.L75
	.byte	3
	.byte	'IfxI2c_resetFifo',0,1,248,1,6,1,1,1
	.word	.L70,.L348,.L69
	.byte	4
	.byte	'i2c',0,1,248,1,32
	.word	.L190,.L349
	.byte	5
	.word	.L70,.L348
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxI2c_resetFifo')
	.sect	'.debug_abbrev'
.L150:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxI2c_resetFifo')
	.sect	'.debug_line'
.L151:
	.word	.L543-.L542
.L542:
	.half	3
	.word	.L545-.L544
.L544:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\I2c\\Std\\IfxI2c.c',0,0,0,0,0
.L545:
	.byte	5,27,7,0,5,2
	.word	.L70
	.byte	3,250,1,1,5,25,1,5,19,9
	.half	.L546-.L70
	.byte	3,1,1,5,25,9
	.half	.L547-.L546
	.byte	1,5,19,9
	.half	.L548-.L547
	.byte	3,1,1,5,25,9
	.half	.L549-.L548
	.byte	1,5,1,9
	.half	.L550-.L549
	.byte	3,5,1,7,9
	.half	.L153-.L550
	.byte	0,1,1
.L543:
	.sdecl	'.debug_ranges',debug,cluster('IfxI2c_resetFifo')
	.sect	'.debug_ranges'
.L152:
	.word	-1,.L70,0,.L153-.L70,0,0
	.sdecl	'.debug_info',debug,cluster('IfxI2c_resetModule')
	.sect	'.debug_info'
.L154:
	.word	268
	.half	3
	.word	.L155
	.byte	4,1
	.byte	'..\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\I2c\\Std\\IfxI2c.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'E:\\tasking workspace\\Copy of LQ_TC26xB_LIBtaskingAICTone\\Debug\\',0,12,1
	.word	.L157,.L156
	.byte	2
	.word	.L75
	.byte	3
	.byte	'IfxI2c_resetModule',0,1,133,2,6,1,1,1
	.word	.L72,.L350,.L71
	.byte	4
	.byte	'i2c',0,1,133,2,34
	.word	.L190,.L351
	.byte	5
	.word	.L72,.L350
	.byte	6
	.byte	'passwd',0,1,135,2,12
	.word	.L201,.L352
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxI2c_resetModule')
	.sect	'.debug_abbrev'
.L155:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3
	.byte	8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxI2c_resetModule')
	.sect	'.debug_line'
.L156:
	.word	.L552-.L551
.L551:
	.half	3
	.word	.L554-.L553
.L553:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\I2c\\Std\\IfxI2c.c',0,0,0,0,0
.L554:
	.byte	5,6,7,0,5,2
	.word	.L72
	.byte	3,132,2,1,5,53,9
	.half	.L389-.L72
	.byte	3,2,1,5,19,9
	.half	.L388-.L389
	.byte	1,5,31,9
	.half	.L391-.L388
	.byte	3,2,1,5,17,9
	.half	.L390-.L391
	.byte	3,1,1,5,22,9
	.half	.L555-.L390
	.byte	1,5,17,9
	.half	.L556-.L555
	.byte	3,1,1,5,22,9
	.half	.L557-.L556
	.byte	1,5,29,9
	.half	.L558-.L557
	.byte	3,1,1,5,20,9
	.half	.L393-.L558
	.byte	3,2,1,5,29,9
	.half	.L26-.L393
	.byte	1,5,37,9
	.half	.L559-.L26
	.byte	1,5,31,7,9
	.half	.L560-.L559
	.byte	3,4,1,5,19,9
	.half	.L395-.L560
	.byte	3,1,1,5,24,9
	.half	.L561-.L395
	.byte	1,5,29,9
	.half	.L562-.L561
	.byte	3,1,1,5,24,3,127,1,5,29,9
	.half	.L397-.L562
	.byte	3,1,1,5,1,7,9
	.half	.L158-.L397
	.byte	3,1,0,1,1
.L552:
	.sdecl	'.debug_ranges',debug,cluster('IfxI2c_resetModule')
	.sect	'.debug_ranges'
.L157:
	.word	-1,.L72,0,.L158-.L72,0,0
	.sdecl	'.debug_info',debug,cluster('IfxI2c_setBaudrate')
	.sect	'.debug_info'
.L159:
	.word	352
	.half	3
	.word	.L160
	.byte	4,1
	.byte	'..\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\I2c\\Std\\IfxI2c.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'E:\\tasking workspace\\Copy of LQ_TC26xB_LIBtaskingAICTone\\Debug\\',0,12,1
	.word	.L162,.L161
	.byte	2
	.word	.L75
	.byte	3
	.byte	'IfxI2c_setBaudrate',0,1,152,2,6,1,1,1
	.word	.L74,.L353,.L73
	.byte	4
	.byte	'i2c',0,1,152,2,34
	.word	.L190,.L354
	.byte	4
	.byte	'baudrate',0,1,152,2,47
	.word	.L290,.L355
	.byte	5
	.word	.L74,.L353
	.byte	6
	.byte	'fKernel',0,1,154,2,13
	.word	.L290,.L356
	.byte	6
	.byte	'rmc',0,1,155,2,13
	.word	.L293,.L357
	.byte	6
	.byte	'dec',0,1,156,2,13
	.word	.L290,.L358
	.byte	5
	.word	.L27,.L353
	.byte	6
	.byte	'pwd',0,1,169,2,12
	.word	.L201,.L359
	.byte	0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxI2c_setBaudrate')
	.sect	'.debug_abbrev'
.L160:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3
	.byte	8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxI2c_setBaudrate')
	.sect	'.debug_line'
.L161:
	.word	.L564-.L563
.L563:
	.half	3
	.word	.L566-.L565
.L565:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\I2c\\Std\\IfxI2c.c',0,0,0,0,0
.L566:
	.byte	5,6,7,0,5,2
	.word	.L74
	.byte	3,151,2,1,5,50,9
	.half	.L399-.L74
	.byte	3,2,1,5,34,9
	.half	.L398-.L399
	.byte	3,1,1,5,24,9
	.half	.L402-.L398
	.byte	3,2,1,5,22,9
	.half	.L403-.L402
	.byte	1,5,29,9
	.half	.L567-.L403
	.byte	1,5,43,9
	.half	.L568-.L567
	.byte	1,5,41,9
	.half	.L569-.L568
	.byte	1,5,48,9
	.half	.L570-.L569
	.byte	1,5,41,9
	.half	.L571-.L570
	.byte	1,5,15,9
	.half	.L404-.L571
	.byte	3,3,1,5,5,9
	.half	.L400-.L404
	.byte	1,5,51,9
	.half	.L572-.L400
	.byte	3,4,1,5,18,9
	.half	.L407-.L572
	.byte	1,5,50,9
	.half	.L27-.L407
	.byte	3,5,1,5,16,9
	.half	.L401-.L27
	.byte	1,5,31,9
	.half	.L411-.L401
	.byte	3,2,1,5,36,9
	.half	.L410-.L411
	.byte	3,2,1,5,34,1,5,51,9
	.half	.L573-.L410
	.byte	3,1,1,5,19,9
	.half	.L574-.L573
	.byte	1,5,49,9
	.half	.L575-.L574
	.byte	1,5,36,1,5,34,9
	.half	.L576-.L575
	.byte	1,5,29,9
	.half	.L577-.L576
	.byte	3,6,1,5,18,9
	.half	.L412-.L577
	.byte	3,123,1,5,34,9
	.half	.L578-.L412
	.byte	1,5,18,9
	.half	.L579-.L578
	.byte	3,1,1,5,34,9
	.half	.L580-.L579
	.byte	1,5,18,9
	.half	.L581-.L580
	.byte	3,1,1,5,34,9
	.half	.L582-.L581
	.byte	1,5,36,9
	.half	.L583-.L582
	.byte	3,1,1,5,34,1,5,29,9
	.half	.L584-.L583
	.byte	3,2,1,5,1,7,9
	.half	.L163-.L584
	.byte	3,1,0,1,1
.L564:
	.sdecl	'.debug_ranges',debug,cluster('IfxI2c_setBaudrate')
	.sect	'.debug_ranges'
.L162:
	.word	-1,.L74,0,.L163-.L74,0,0
	.sdecl	'.debug_info',debug,cluster('.cocofun_1')
	.sect	'.debug_info'
.L164:
	.word	209
	.half	3
	.word	.L165
	.byte	4,1
	.byte	'..\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\I2c\\Std\\IfxI2c.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'E:\\tasking workspace\\Copy of LQ_TC26xB_LIBtaskingAICTone\\Debug\\',0,12,1
	.word	.L167,.L166
	.byte	2
	.word	.L75
	.byte	3
	.byte	'.cocofun_1',0,1,90,6,1
	.word	.L46,.L168,.L45
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('.cocofun_1')
	.sect	'.debug_abbrev'
.L165:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,0,3,8,58,15,59,15,57,15,54,15
	.byte	17,1,18,1,64,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('.cocofun_1')
	.sect	'.debug_line'
.L166:
	.word	.L586-.L585
.L585:
	.half	3
	.word	.L588-.L587
.L587:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1
	.byte	'E:\\tasking workspace\\Copy of LQ_TC26xB_LIBtaskingAICTone\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\Src\\Std',0
	.byte	0
	.byte	'..\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\I2c\\Std\\IfxI2c.c',0,0,0,0
	.byte	'IfxSrc.h',0,1,0,0,0
.L588:
	.byte	4,2,5,17,7,0,5,2
	.word	.L46
	.byte	3,147,2,1,5,11,9
	.half	.L589-.L46
	.byte	3,1,1,5,17,9
	.half	.L590-.L589
	.byte	1,5,11,9
	.half	.L591-.L590
	.byte	3,103,1,5,17,9
	.half	.L592-.L591
	.byte	1,5,11,9
	.half	.L593-.L592
	.byte	3,18,1,5,16,9
	.half	.L594-.L593
	.byte	1,9
	.half	.L168-.L594
	.byte	0,1,1,4,2,5,17,0,5,2
	.word	.L46
	.byte	3,147,2,1,5,11,9
	.half	.L589-.L46
	.byte	3,1,1,5,17,9
	.half	.L590-.L589
	.byte	1,5,11,9
	.half	.L591-.L590
	.byte	3,103,1,5,17,9
	.half	.L592-.L591
	.byte	1,5,11,9
	.half	.L593-.L592
	.byte	3,18,1,5,16,9
	.half	.L594-.L593
	.byte	1,9
	.half	.L168-.L594
	.byte	0,1,1,4,2,5,17,0,5,2
	.word	.L46
	.byte	3,147,2,1,5,11,9
	.half	.L589-.L46
	.byte	3,1,1,5,17,9
	.half	.L590-.L589
	.byte	1,5,11,9
	.half	.L591-.L590
	.byte	3,103,1,5,17,9
	.half	.L592-.L591
	.byte	1,5,11,9
	.half	.L593-.L592
	.byte	3,18,1,5,16,9
	.half	.L594-.L593
	.byte	1,9
	.half	.L168-.L594
	.byte	0,1,1,4,2,5,17,0,5,2
	.word	.L46
	.byte	3,147,2,1,5,11,9
	.half	.L589-.L46
	.byte	3,1,1,5,17,9
	.half	.L590-.L589
	.byte	1,5,11,9
	.half	.L591-.L590
	.byte	3,103,1,5,17,9
	.half	.L592-.L591
	.byte	1,5,11,9
	.half	.L593-.L592
	.byte	3,18,1,5,16,9
	.half	.L594-.L593
	.byte	1,9
	.half	.L168-.L594
	.byte	0,1,1,4,2,5,17,0,5,2
	.word	.L46
	.byte	3,147,2,1,5,11,9
	.half	.L589-.L46
	.byte	3,1,1,5,17,9
	.half	.L590-.L589
	.byte	1,5,11,9
	.half	.L591-.L590
	.byte	3,103,1,5,17,9
	.half	.L592-.L591
	.byte	1,5,11,9
	.half	.L593-.L592
	.byte	3,18,1,5,16,9
	.half	.L594-.L593
	.byte	1,9
	.half	.L168-.L594
	.byte	0,1,1,4,2,5,17,0,5,2
	.word	.L46
	.byte	3,147,2,1,5,11,9
	.half	.L589-.L46
	.byte	3,1,1,5,17,9
	.half	.L590-.L589
	.byte	1,5,11,9
	.half	.L591-.L590
	.byte	3,103,1,5,17,9
	.half	.L592-.L591
	.byte	1,5,11,9
	.half	.L593-.L592
	.byte	3,18,1,5,16,9
	.half	.L594-.L593
	.byte	1,9
	.half	.L168-.L594
	.byte	0,1,1
.L586:
	.sdecl	'.debug_ranges',debug,cluster('.cocofun_1')
	.sect	'.debug_ranges'
.L167:
	.word	-1,.L46,0,.L168-.L46,0,0
	.sdecl	'.debug_info',debug,cluster('.cocofun_2')
	.sect	'.debug_info'
.L169:
	.word	209
	.half	3
	.word	.L170
	.byte	4,1
	.byte	'..\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\I2c\\Std\\IfxI2c.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'E:\\tasking workspace\\Copy of LQ_TC26xB_LIBtaskingAICTone\\Debug\\',0,12,1
	.word	.L172,.L171
	.byte	2
	.word	.L75
	.byte	3
	.byte	'.cocofun_2',0,1,55,6,1
	.word	.L36,.L173,.L35
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('.cocofun_2')
	.sect	'.debug_abbrev'
.L170:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,0,3,8,58,15,59,15,57,15,54,15
	.byte	17,1,18,1,64,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('.cocofun_2')
	.sect	'.debug_line'
.L171:
	.word	.L596-.L595
.L595:
	.half	3
	.word	.L598-.L597
.L597:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\I2c\\Std\\IfxI2c.c',0,0,0,0,0
.L598:
	.byte	5,25,7,0,5,2
	.word	.L36
	.byte	3,194,0,1,5,19,9
	.half	.L599-.L36
	.byte	3,1,1,5,25,9
	.half	.L600-.L599
	.byte	1,5,19,9
	.half	.L601-.L600
	.byte	3,1,1,5,25,9
	.half	.L602-.L601
	.byte	1,5,19,9
	.half	.L603-.L602
	.byte	3,1,1,5,25,9
	.half	.L604-.L603
	.byte	1,5,19,9
	.half	.L605-.L604
	.byte	3,1,1,5,25,9
	.half	.L606-.L605
	.byte	1,9
	.half	.L173-.L606
	.byte	0,1,1,5,25,0,5,2
	.word	.L36
	.byte	3,252,1,1,5,19,9
	.half	.L599-.L36
	.byte	3,1,1,5,25,9
	.half	.L600-.L599
	.byte	1,5,19,9
	.half	.L601-.L600
	.byte	3,1,1,5,25,9
	.half	.L602-.L601
	.byte	1,5,19,9
	.half	.L603-.L602
	.byte	3,1,1,5,25,9
	.half	.L604-.L603
	.byte	1,5,19,9
	.half	.L605-.L604
	.byte	3,1,1,5,25,9
	.half	.L606-.L605
	.byte	1,9
	.half	.L361-.L606
	.byte	3,198,126,1,7,9
	.half	.L173-.L361
	.byte	0,1,1
.L596:
	.sdecl	'.debug_ranges',debug,cluster('.cocofun_2')
	.sect	'.debug_ranges'
.L172:
	.word	-1,.L36,0,.L173-.L36,0,0
	.sdecl	'.debug_info',debug,cluster('.cocofun_3')
	.sect	'.debug_info'
.L174:
	.word	209
	.half	3
	.word	.L175
	.byte	4,1
	.byte	'..\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\I2c\\Std\\IfxI2c.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'E:\\tasking workspace\\Copy of LQ_TC26xB_LIBtaskingAICTone\\Debug\\',0,12,1
	.word	.L177,.L176
	.byte	2
	.word	.L75
	.byte	3
	.byte	'.cocofun_3',0,1,75,6,1
	.word	.L42,.L178,.L41
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('.cocofun_3')
	.sect	'.debug_abbrev'
.L175:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,0,3,8,58,15,59,15,57,15,54,15
	.byte	17,1,18,1,64,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('.cocofun_3')
	.sect	'.debug_line'
.L176:
	.word	.L608-.L607
.L607:
	.half	3
	.word	.L610-.L609
.L609:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\I2c\\Std\\IfxI2c.c',0,0,0,0,0
.L610:
	.byte	5,21,7,0,5,2
	.word	.L42
	.byte	3,208,0,1,9
	.half	.L178-.L42
	.byte	0,1,1,5,22,0,5,2
	.word	.L42
	.byte	3,137,2,1,5,21,3,199,126,1,9
	.half	.L178-.L42
	.byte	0,1,1,5,22,0,5,2
	.word	.L42
	.byte	3,138,2,1,5,21,3,198,126,1,9
	.half	.L178-.L42
	.byte	0,1,1,5,24,0,5,2
	.word	.L42
	.byte	3,146,2,1,5,21,3,190,126,1,9
	.half	.L178-.L42
	.byte	0,1,1
.L608:
	.sdecl	'.debug_ranges',debug,cluster('.cocofun_3')
	.sect	'.debug_ranges'
.L177:
	.word	-1,.L42,0,.L178-.L42,0,0
	.sdecl	'.debug_info',debug,cluster('.cocofun_4')
	.sect	'.debug_info'
.L179:
	.word	209
	.half	3
	.word	.L180
	.byte	4,1
	.byte	'..\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\I2c\\Std\\IfxI2c.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'E:\\tasking workspace\\Copy of LQ_TC26xB_LIBtaskingAICTone\\Debug\\',0,12,1
	.word	.L182,.L181
	.byte	2
	.word	.L75
	.byte	3
	.byte	'.cocofun_4',0,1,55,6,1
	.word	.L34,.L183,.L33
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('.cocofun_4')
	.sect	'.debug_abbrev'
.L180:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,0,3,8,58,15,59,15,57,15,54,15
	.byte	17,1,18,1,64,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('.cocofun_4')
	.sect	'.debug_line'
.L181:
	.word	.L612-.L611
.L611:
	.half	3
	.word	.L614-.L613
.L613:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\I2c\\Std\\IfxI2c.c',0,0,0,0,0
.L614:
	.byte	5,25,7,0,5,2
	.word	.L34
	.byte	3,60,1,5,19,9
	.half	.L360-.L34
	.byte	3,1,1,9
	.half	.L183-.L360
	.byte	0,1,1,5,25,0,5,2
	.word	.L34
	.byte	3,61,1,5,19,9
	.half	.L360-.L34
	.byte	3,1,1,9
	.half	.L615-.L360
	.byte	3,127,1,7,9
	.half	.L183-.L615
	.byte	0,1,1,5,25,0,5,2
	.word	.L34
	.byte	3,62,1,5,19,9
	.half	.L360-.L34
	.byte	3,1,1,9
	.half	.L615-.L360
	.byte	3,126,1,7,9
	.half	.L183-.L615
	.byte	0,1,1
.L612:
	.sdecl	'.debug_ranges',debug,cluster('.cocofun_4')
	.sect	'.debug_ranges'
.L182:
	.word	-1,.L34,0,.L183-.L34,0,0
	.sdecl	'.debug_info',debug,cluster('.cocofun_5')
	.sect	'.debug_info'
.L184:
	.word	209
	.half	3
	.word	.L185
	.byte	4,1
	.byte	'..\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\I2c\\Std\\IfxI2c.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'E:\\tasking workspace\\Copy of LQ_TC26xB_LIBtaskingAICTone\\Debug\\',0,12,1
	.word	.L187,.L186
	.byte	2
	.word	.L75
	.byte	3
	.byte	'.cocofun_5',0,1,75,6,1
	.word	.L40,.L188,.L39
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('.cocofun_5')
	.sect	'.debug_abbrev'
.L185:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,0,3,8,58,15,59,15,57,15,54,15
	.byte	17,1,18,1,64,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('.cocofun_5')
	.sect	'.debug_line'
.L186:
	.word	.L617-.L616
.L616:
	.half	3
	.word	.L619-.L618
.L618:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\src\\BaseSw\\iLLD\\TC26B\\Tricore\\I2c\\Std\\IfxI2c.c',0,0,0,0,0
.L619:
	.byte	5,15,7,0,5,2
	.word	.L40
	.byte	3,208,0,1,9
	.half	.L188-.L40
	.byte	0,1,1,5,15,0,5,2
	.word	.L40
	.byte	3,210,0,1,9
	.half	.L620-.L40
	.byte	3,126,1,7,9
	.half	.L188-.L620
	.byte	0,1,1,5,21,0,5,2
	.word	.L40
	.byte	3,208,0,1,5,15,9
	.half	.L620-.L40
	.byte	1,7,9
	.half	.L188-.L620
	.byte	0,1,1,5,22,0,5,2
	.word	.L40
	.byte	3,137,2,1,5,15,9
	.half	.L620-.L40
	.byte	3,199,126,1,7,9
	.half	.L188-.L620
	.byte	0,1,1,5,22,0,5,2
	.word	.L40
	.byte	3,138,2,1,5,15,9
	.half	.L620-.L40
	.byte	3,198,126,1,7,9
	.half	.L188-.L620
	.byte	0,1,1,5,24,0,5,2
	.word	.L40
	.byte	3,146,2,1,5,15,9
	.half	.L620-.L40
	.byte	3,190,126,1,7,9
	.half	.L188-.L620
	.byte	0,1,1,5,15,0,5,2
	.word	.L40
	.byte	3,130,1,1,9
	.half	.L620-.L40
	.byte	3,78,1,7,9
	.half	.L188-.L620
	.byte	0,1,1,5,21,0,5,2
	.word	.L40
	.byte	3,130,1,1,5,15,9
	.half	.L620-.L40
	.byte	3,78,1,7,9
	.half	.L188-.L620
	.byte	0,1,1,5,15,0,5,2
	.word	.L40
	.byte	3,132,1,1,9
	.half	.L620-.L40
	.byte	3,76,1,7,9
	.half	.L188-.L620
	.byte	0,1,1,5,17,0,5,2
	.word	.L40
	.byte	3,137,2,1,5,15,9
	.half	.L620-.L40
	.byte	3,199,126,1,7,9
	.half	.L188-.L620
	.byte	0,1,1,5,17,0,5,2
	.word	.L40
	.byte	3,138,2,1,5,15,9
	.half	.L620-.L40
	.byte	3,198,126,1,7,9
	.half	.L188-.L620
	.byte	0,1,1,5,20,0,5,2
	.word	.L40
	.byte	3,141,2,1,5,15,9
	.half	.L620-.L40
	.byte	3,195,126,1,7,9
	.half	.L188-.L620
	.byte	0,1,1,5,19,0,5,2
	.word	.L40
	.byte	3,146,2,1,5,15,9
	.half	.L620-.L40
	.byte	3,190,126,1,7,9
	.half	.L188-.L620
	.byte	0,1,1
.L617:
	.sdecl	'.debug_ranges',debug,cluster('.cocofun_5')
	.sect	'.debug_ranges'
.L187:
	.word	-1,.L40,0,.L188-.L40,0,0
	.sdecl	'.debug_loc',debug,cluster('.cocofun_1')
	.sect	'.debug_loc'
.L45:
	.word	-1,.L46,0,.L168-.L46
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('.cocofun_2')
	.sect	'.debug_loc'
.L35:
	.word	-1,.L36,0,.L173-.L36
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('.cocofun_3')
	.sect	'.debug_loc'
.L41:
	.word	-1,.L42,0,.L178-.L42
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('.cocofun_4')
	.sect	'.debug_loc'
.L33:
	.word	-1,.L34,0,.L183-.L34
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('.cocofun_5')
	.sect	'.debug_loc'
.L39:
	.word	-1,.L40,0,.L188-.L40
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxI2c_configureAsMaster')
	.sect	'.debug_loc'
.L31:
	.word	-1,.L32,0,.L189-.L32
	.half	2
	.byte	138,0
	.word	0,0
.L191:
	.word	-1,.L32,.L360-.L32,.L183-.L32
	.half	1
	.byte	100
	.word	.L36-.L32,.L361-.L32
	.half	1
	.byte	100
	.word	0,.L189-.L32
	.half	1
	.byte	100
	.word	0,0
.L196:
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxI2c_disableModule')
	.sect	'.debug_loc'
.L37:
	.word	-1,.L38,0,.L198-.L38
	.half	2
	.byte	138,0
	.word	0,0
.L199:
	.word	-1,.L38,0,.L362-.L38
	.half	1
	.byte	100
	.word	.L363-.L38,.L364-.L38
	.half	1
	.byte	111
	.word	.L40-.L38,.L188-.L38
	.half	1
	.byte	111
	.word	.L42-.L38,.L366-.L38
	.half	1
	.byte	111
	.word	.L367-.L38,.L2-.L38
	.half	1
	.byte	111
	.word	0,0
.L202:
	.word	-1,.L38,.L362-.L38,.L364-.L38
	.half	1
	.byte	82
	.word	.L365-.L38,.L364-.L38
	.half	1
	.byte	88
	.word	.L40-.L38,.L188-.L38
	.half	1
	.byte	88
	.word	.L42-.L38,.L366-.L38
	.half	1
	.byte	88
	.word	.L367-.L38,.L198-.L38
	.half	1
	.byte	88
	.word	.L368-.L38,.L198-.L38
	.half	1
	.byte	84
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxI2c_enableBurstDataTransferInterrupt')
	.sect	'.debug_loc'
.L43:
	.word	-1,.L44,0,.L203-.L44
	.half	2
	.byte	138,0
	.word	0,0
.L204:
	.word	-1,.L44,.L46-.L44,.L369-.L44
	.half	1
	.byte	100
	.word	0,.L203-.L44
	.half	1
	.byte	100
	.word	0,0
.L210:
	.word	0,0
.L207:
	.word	-1,.L44,.L46-.L44,.L369-.L44
	.half	1
	.byte	85
	.word	0,.L203-.L44
	.half	1
	.byte	85
	.word	0,0
.L219:
	.word	0,0
.L215:
	.word	0,0
.L217:
	.word	0,0
.L206:
	.word	-1,.L44,.L46-.L44,.L369-.L44
	.half	1
	.byte	84
	.word	0,.L203-.L44
	.half	1
	.byte	84
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxI2c_enableErrorInterrupt')
	.sect	'.debug_loc'
.L47:
	.word	-1,.L48,0,.L222-.L48
	.half	2
	.byte	138,0
	.word	0,0
.L223:
	.word	-1,.L48,.L46-.L48,.L168-.L48
	.half	1
	.byte	100
	.word	0,.L222-.L48
	.half	1
	.byte	100
	.word	0,0
.L228:
	.word	0,0
.L225:
	.word	-1,.L48,.L46-.L48,.L168-.L48
	.half	1
	.byte	85
	.word	0,.L222-.L48
	.half	1
	.byte	85
	.word	0,0
.L233:
	.word	0,0
.L231:
	.word	0,0
.L232:
	.word	0,0
.L224:
	.word	-1,.L48,.L46-.L48,.L168-.L48
	.half	1
	.byte	84
	.word	0,.L222-.L48
	.half	1
	.byte	84
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxI2c_enableLastBurstDataTransferInterrupt')
	.sect	'.debug_loc'
.L49:
	.word	-1,.L50,0,.L234-.L50
	.half	2
	.byte	138,0
	.word	0,0
.L235:
	.word	-1,.L50,.L46-.L50,.L168-.L50
	.half	1
	.byte	100
	.word	0,.L234-.L50
	.half	1
	.byte	100
	.word	0,0
.L240:
	.word	0,0
.L237:
	.word	-1,.L50,.L46-.L50,.L168-.L50
	.half	1
	.byte	85
	.word	0,.L234-.L50
	.half	1
	.byte	85
	.word	0,0
.L245:
	.word	0,0
.L243:
	.word	0,0
.L244:
	.word	0,0
.L236:
	.word	-1,.L50,.L46-.L50,.L168-.L50
	.half	1
	.byte	84
	.word	0,.L234-.L50
	.half	1
	.byte	84
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxI2c_enableLastSingleDataTransferInterrupt')
	.sect	'.debug_loc'
.L51:
	.word	-1,.L52,0,.L246-.L52
	.half	2
	.byte	138,0
	.word	0,0
.L247:
	.word	-1,.L52,.L46-.L52,.L168-.L52
	.half	1
	.byte	100
	.word	0,.L246-.L52
	.half	1
	.byte	100
	.word	0,0
.L252:
	.word	0,0
.L249:
	.word	-1,.L52,.L46-.L52,.L168-.L52
	.half	1
	.byte	85
	.word	0,.L246-.L52
	.half	1
	.byte	85
	.word	0,0
.L257:
	.word	0,0
.L255:
	.word	0,0
.L256:
	.word	0,0
.L248:
	.word	-1,.L52,.L46-.L52,.L168-.L52
	.half	1
	.byte	84
	.word	0,.L246-.L52
	.half	1
	.byte	84
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxI2c_enableModule')
	.sect	'.debug_loc'
.L53:
	.word	-1,.L54,0,.L258-.L54
	.half	2
	.byte	138,0
	.word	0,0
.L259:
	.word	-1,.L54,0,.L370-.L54
	.half	1
	.byte	100
	.word	.L371-.L54,.L372-.L54
	.half	1
	.byte	111
	.word	.L40-.L54,.L188-.L54
	.half	1
	.byte	111
	.word	.L374-.L54,.L258-.L54
	.half	1
	.byte	111
	.word	0,0
.L260:
	.word	-1,.L54,.L370-.L54,.L372-.L54
	.half	1
	.byte	82
	.word	.L373-.L54,.L372-.L54
	.half	1
	.byte	88
	.word	.L40-.L54,.L188-.L54
	.half	1
	.byte	88
	.word	.L374-.L54,.L258-.L54
	.half	1
	.byte	88
	.word	.L375-.L54,.L258-.L54
	.half	1
	.byte	84
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxI2c_enableProtocolInterrupt')
	.sect	'.debug_loc'
.L55:
	.word	-1,.L56,0,.L261-.L56
	.half	2
	.byte	138,0
	.word	0,0
.L263:
	.word	-1,.L56,.L46-.L56,.L168-.L56
	.half	1
	.byte	100
	.word	0,.L261-.L56
	.half	1
	.byte	100
	.word	0,0
.L268:
	.word	0,0
.L265:
	.word	-1,.L56,.L46-.L56,.L168-.L56
	.half	1
	.byte	85
	.word	0,.L261-.L56
	.half	1
	.byte	85
	.word	0,0
.L273:
	.word	0,0
.L271:
	.word	0,0
.L272:
	.word	0,0
.L264:
	.word	-1,.L56,.L46-.L56,.L168-.L56
	.half	1
	.byte	84
	.word	0,.L261-.L56
	.half	1
	.byte	84
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxI2c_enableSingleDataTransferInterrupt')
	.sect	'.debug_loc'
.L57:
	.word	-1,.L58,0,.L274-.L58
	.half	2
	.byte	138,0
	.word	0,0
.L275:
	.word	-1,.L58,.L46-.L58,.L168-.L58
	.half	1
	.byte	100
	.word	0,.L274-.L58
	.half	1
	.byte	100
	.word	0,0
.L280:
	.word	0,0
.L277:
	.word	-1,.L58,.L46-.L58,.L168-.L58
	.half	1
	.byte	85
	.word	0,.L274-.L58
	.half	1
	.byte	85
	.word	0,0
.L285:
	.word	0,0
.L283:
	.word	0,0
.L284:
	.word	0,0
.L276:
	.word	-1,.L58,.L46-.L58,.L168-.L58
	.half	1
	.byte	84
	.word	0,.L274-.L58
	.half	1
	.byte	84
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxI2c_getAddress')
	.sect	'.debug_loc'
.L59:
	.word	-1,.L60,0,.L286-.L60
	.half	2
	.byte	138,0
	.word	0,0
.L288:
	.word	-1,.L60,0,.L286-.L60
	.half	1
	.byte	84
	.word	0,0
.L289:
	.word	-1,.L60,.L376-.L60,.L18-.L60
	.half	1
	.byte	98
	.word	.L377-.L60,.L286-.L60
	.half	1
	.byte	98
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxI2c_getBaudrate')
	.sect	'.debug_loc'
.L61:
	.word	-1,.L62,0,.L291-.L62
	.half	2
	.byte	138,0
	.word	0,0
.L295:
	.word	-1,.L62,.L380-.L62,.L381-.L62
	.half	1
	.byte	89
	.word	0,0
.L297:
	.word	-1,.L62,.L378-.L62,.L291-.L62
	.half	1
	.byte	82
	.word	0,0
.L292:
	.word	-1,.L62,0,.L378-.L62
	.half	1
	.byte	100
	.word	0,0
.L294:
	.word	-1,.L62,.L379-.L62,.L291-.L62
	.half	1
	.byte	88
	.word	0,0
.L296:
	.word	-1,.L62,.L380-.L62,.L382-.L62
	.half	1
	.byte	95
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxI2c_getIndex')
	.sect	'.debug_loc'
.L63:
	.word	-1,.L64,0,.L298-.L64
	.half	2
	.byte	138,0
	.word	0,0
.L299:
	.word	-1,.L64,0,.L298-.L64
	.half	1
	.byte	100
	.word	0,0
.L300:
	.word	-1,.L64,.L383-.L64,.L298-.L64
	.half	1
	.byte	82
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxI2c_initSclSdaPin')
	.sect	'.debug_loc'
.L65:
	.word	-1,.L66,0,.L301-.L66
	.half	2
	.byte	138,0
	.word	0,0
.L325:
	.word	0,0
.L318:
	.word	0,0
.L316:
	.word	0,0
.L307:
	.word	-1,.L66,0,.L384-.L66
	.half	1
	.byte	84
	.word	.L387-.L66,.L301-.L66
	.half	1
	.byte	88
	.word	0,0
.L314:
	.word	0,0
.L327:
	.word	0,0
.L312:
	.word	0,0
.L303:
	.word	-1,.L66,0,.L385-.L66
	.half	1
	.byte	100
	.word	.L386-.L66,.L301-.L66
	.half	1
	.byte	111
	.word	0,0
.L305:
	.word	-1,.L66,0,.L310-.L66
	.half	1
	.byte	101
	.word	.L309-.L66,.L301-.L66
	.half	1
	.byte	108
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxI2c_releaseBus')
	.sect	'.debug_loc'
.L67:
	.word	-1,.L68,0,.L332-.L68
	.half	2
	.byte	138,0
	.word	0,0
.L333:
	.word	-1,.L68,0,.L332-.L68
	.half	1
	.byte	100
	.word	0,0
.L344:
	.word	0,0
.L337:
	.word	0,0
.L346:
	.word	0,0
.L339:
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxI2c_resetFifo')
	.sect	'.debug_loc'
.L69:
	.word	-1,.L70,0,.L348-.L70
	.half	2
	.byte	138,0
	.word	0,0
.L349:
	.word	-1,.L70,.L36-.L70,.L173-.L70
	.half	1
	.byte	100
	.word	0,.L348-.L70
	.half	1
	.byte	100
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxI2c_resetModule')
	.sect	'.debug_loc'
.L71:
	.word	-1,.L72,0,.L350-.L72
	.half	2
	.byte	138,0
	.word	0,0
.L351:
	.word	-1,.L72,0,.L388-.L72
	.half	1
	.byte	100
	.word	.L389-.L72,.L390-.L72
	.half	1
	.byte	111
	.word	.L40-.L72,.L188-.L72
	.half	1
	.byte	111
	.word	.L42-.L72,.L366-.L72
	.half	1
	.byte	111
	.word	.L392-.L72,.L393-.L72
	.half	1
	.byte	111
	.word	.L394-.L72,.L395-.L72
	.half	1
	.byte	111
	.word	.L396-.L72,.L350-.L72
	.half	1
	.byte	111
	.word	0,0
.L352:
	.word	-1,.L72,.L388-.L72,.L390-.L72
	.half	1
	.byte	82
	.word	.L391-.L72,.L390-.L72
	.half	1
	.byte	88
	.word	.L40-.L72,.L188-.L72
	.half	1
	.byte	88
	.word	.L42-.L72,.L366-.L72
	.half	1
	.byte	88
	.word	.L392-.L72,.L393-.L72
	.half	1
	.byte	88
	.word	.L394-.L72,.L395-.L72
	.half	1
	.byte	88
	.word	.L396-.L72,.L350-.L72
	.half	1
	.byte	88
	.word	.L397-.L72,.L350-.L72
	.half	1
	.byte	84
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxI2c_setBaudrate')
	.sect	'.debug_loc'
.L73:
	.word	-1,.L74,0,.L353-.L74
	.half	2
	.byte	138,0
	.word	0,0
.L355:
	.word	-1,.L74,0,.L398-.L74
	.half	1
	.byte	84
	.word	.L398-.L74,.L400-.L74
	.half	1
	.byte	88
	.word	0,0
.L358:
	.word	-1,.L74,.L404-.L74,.L405-.L74
	.half	5
	.byte	144,32,157,32,0
	.word	.L400-.L74,.L406-.L74
	.half	1
	.byte	88
	.word	.L407-.L74,.L408-.L74
	.half	5
	.byte	144,32,157,32,0
	.word	.L409-.L74,.L353-.L74
	.half	1
	.byte	88
	.word	.L409-.L74,.L27-.L74
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
.L356:
	.word	-1,.L74,.L398-.L74,.L401-.L74
	.half	1
	.byte	82
	.word	0,0
.L354:
	.word	-1,.L74,0,.L398-.L74
	.half	1
	.byte	100
	.word	.L399-.L74,.L353-.L74
	.half	1
	.byte	111
	.word	0,0
.L359:
	.word	-1,.L74,.L401-.L74,.L410-.L74
	.half	1
	.byte	82
	.word	.L411-.L74,.L353-.L74
	.half	1
	.byte	89
	.word	.L412-.L74,.L353-.L74
	.half	1
	.byte	84
	.word	0,0
.L357:
	.word	-1,.L74,.L402-.L74,.L403-.L74
	.half	1
	.byte	95
	.word	0,0
	.sdecl	'.debug_frame',debug
	.sect	'.debug_frame'
.L621:
	.word	48
	.word	-1
	.byte	3,0,2,1,27,12,26,0,8,27,8,26,8,28,8,29,8,30,8,31,8,34,8,35,8,32,8,33,8,16,8,17,8,24,8,25,8,36,8,37,8,38
	.byte	8,39
	.sdecl	'.debug_frame',debug,cluster('IfxI2c_configureAsMaster')
	.sect	'.debug_frame'
	.word	24
	.word	.L621,.L32,.L189-.L32
	.byte	8,18,8,19,8,21,8,22,8,23,0,0
	.sdecl	'.debug_frame',debug,cluster('IfxI2c_disableModule')
	.sect	'.debug_frame'
	.word	12
	.word	.L621,.L38,.L198-.L38
	.sdecl	'.debug_frame',debug,cluster('IfxI2c_enableBurstDataTransferInterrupt')
	.sect	'.debug_frame'
	.word	24
	.word	.L621,.L44,.L203-.L44
	.byte	8,18,8,19,8,21,8,22,8,23,0,0
	.sdecl	'.debug_frame',debug,cluster('IfxI2c_enableErrorInterrupt')
	.sect	'.debug_frame'
	.word	24
	.word	.L621,.L48,.L222-.L48
	.byte	8,18,8,19,8,21,8,22,8,23,0,0
	.sdecl	'.debug_frame',debug,cluster('IfxI2c_enableLastBurstDataTransferInterrupt')
	.sect	'.debug_frame'
	.word	24
	.word	.L621,.L50,.L234-.L50
	.byte	8,18,8,19,8,21,8,22,8,23,0,0
	.sdecl	'.debug_frame',debug,cluster('IfxI2c_enableLastSingleDataTransferInterrupt')
	.sect	'.debug_frame'
	.word	24
	.word	.L621,.L52,.L246-.L52
	.byte	8,18,8,19,8,21,8,22,8,23,0,0
	.sdecl	'.debug_frame',debug,cluster('IfxI2c_enableModule')
	.sect	'.debug_frame'
	.word	12
	.word	.L621,.L54,.L258-.L54
	.sdecl	'.debug_frame',debug,cluster('IfxI2c_enableProtocolInterrupt')
	.sect	'.debug_frame'
	.word	24
	.word	.L621,.L56,.L261-.L56
	.byte	8,18,8,19,8,21,8,22,8,23,0,0
	.sdecl	'.debug_frame',debug,cluster('IfxI2c_enableSingleDataTransferInterrupt')
	.sect	'.debug_frame'
	.word	24
	.word	.L621,.L58,.L274-.L58
	.byte	8,18,8,19,8,21,8,22,8,23,0,0
	.sdecl	'.debug_frame',debug,cluster('IfxI2c_getAddress')
	.sect	'.debug_frame'
	.word	24
	.word	.L621,.L60,.L286-.L60
	.byte	8,19,8,20,8,21,8,22,8,23,0,0
	.sdecl	'.debug_frame',debug,cluster('IfxI2c_getBaudrate')
	.sect	'.debug_frame'
	.word	12
	.word	.L621,.L62,.L291-.L62
	.sdecl	'.debug_frame',debug,cluster('IfxI2c_getIndex')
	.sect	'.debug_frame'
	.word	20
	.word	.L621,.L64,.L298-.L64
	.byte	8,19,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('IfxI2c_initSclSdaPin')
	.sect	'.debug_frame'
	.word	12
	.word	.L621,.L66,.L301-.L66
	.sdecl	'.debug_frame',debug,cluster('IfxI2c_releaseBus')
	.sect	'.debug_frame'
	.word	24
	.word	.L621,.L68,.L332-.L68
	.byte	8,18,8,19,8,21,8,22,8,23,0,0
	.sdecl	'.debug_frame',debug,cluster('IfxI2c_resetFifo')
	.sect	'.debug_frame'
	.word	24
	.word	.L621,.L70,.L348-.L70
	.byte	8,18,8,19,8,21,8,22,8,23,0,0
	.sdecl	'.debug_frame',debug,cluster('IfxI2c_resetModule')
	.sect	'.debug_frame'
	.word	12
	.word	.L621,.L72,.L350-.L72
	.sdecl	'.debug_frame',debug,cluster('IfxI2c_setBaudrate')
	.sect	'.debug_frame'
	.word	12
	.word	.L621,.L74,.L353-.L74
	.sdecl	'.debug_frame',debug
	.sect	'.debug_frame'
.L622:
	.word	52
	.word	-1
	.byte	3,0,2,1,40,12,26,0,9,40,27,155,0,7,26,8,28,8,29,8,30,8,31,8,34,8,35,8,32,8,33,8,16,8,17,8,24,8,25,8,36
	.byte	8,37,8,38,8,39,0
	.sdecl	'.debug_frame',debug,cluster('.cocofun_4')
	.sect	'.debug_frame'
	.word	24
	.word	.L622,.L34,.L183-.L34
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('.cocofun_2')
	.sect	'.debug_frame'
	.word	24
	.word	.L622,.L36,.L173-.L36
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('.cocofun_5')
	.sect	'.debug_frame'
	.word	24
	.word	.L622,.L40,.L188-.L40
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('.cocofun_3')
	.sect	'.debug_frame'
	.word	24
	.word	.L622,.L42,.L178-.L42
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('.cocofun_1')
	.sect	'.debug_frame'
	.word	24
	.word	.L622,.L46,.L168-.L46
	.byte	8,18,8,19,8,20,8,21,8,22,8,23

; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.c	   309      i2c->TIMCFG.B.SDA_DEL_HD_DAT = 0x3F;
; ..\src\BaseSw\iLLD\TC26B\Tricore\I2c\Std\IfxI2c.c	   310      i2c->TIMCFG.B.FS_SCL_LOW     = 1;
	; Module end
